// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ugccommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ugccommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ugccommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBuffCommon.pb.h"
#include "ProtoBuffUGCResource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ugccommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ugccommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ugccommon_2eproto;
namespace message {
class ModeVariable;
struct ModeVariableDefaultTypeInternal;
extern ModeVariableDefaultTypeInternal _ModeVariable_default_instance_;
class RoomCustomParamData;
struct RoomCustomParamDataDefaultTypeInternal;
extern RoomCustomParamDataDefaultTypeInternal _RoomCustomParamData_default_instance_;
class RoomCustomParamMultiChooseInt;
struct RoomCustomParamMultiChooseIntDefaultTypeInternal;
extern RoomCustomParamMultiChooseIntDefaultTypeInternal _RoomCustomParamMultiChooseInt_default_instance_;
class RoomCustomParamProtoData;
struct RoomCustomParamProtoDataDefaultTypeInternal;
extern RoomCustomParamProtoDataDefaultTypeInternal _RoomCustomParamProtoData_default_instance_;
class RoomCustomParamSingleChooseFloat;
struct RoomCustomParamSingleChooseFloatDefaultTypeInternal;
extern RoomCustomParamSingleChooseFloatDefaultTypeInternal _RoomCustomParamSingleChooseFloat_default_instance_;
class RoomCustomParamSingleChooseInt;
struct RoomCustomParamSingleChooseIntDefaultTypeInternal;
extern RoomCustomParamSingleChooseIntDefaultTypeInternal _RoomCustomParamSingleChooseInt_default_instance_;
class RoomCustomParamSingleFloatItem;
struct RoomCustomParamSingleFloatItemDefaultTypeInternal;
extern RoomCustomParamSingleFloatItemDefaultTypeInternal _RoomCustomParamSingleFloatItem_default_instance_;
class RoomCustomParamSingleIntItem;
struct RoomCustomParamSingleIntItemDefaultTypeInternal;
extern RoomCustomParamSingleIntItemDefaultTypeInternal _RoomCustomParamSingleIntItem_default_instance_;
class RoomCustomParamSliderFloat;
struct RoomCustomParamSliderFloatDefaultTypeInternal;
extern RoomCustomParamSliderFloatDefaultTypeInternal _RoomCustomParamSliderFloat_default_instance_;
class RoomCustomParamSliderInt;
struct RoomCustomParamSliderIntDefaultTypeInternal;
extern RoomCustomParamSliderIntDefaultTypeInternal _RoomCustomParamSliderInt_default_instance_;
class RoomCustomParamsSettingData;
struct RoomCustomParamsSettingDataDefaultTypeInternal;
extern RoomCustomParamsSettingDataDefaultTypeInternal _RoomCustomParamsSettingData_default_instance_;
class SceneEditBasicSphereProtoData;
struct SceneEditBasicSphereProtoDataDefaultTypeInternal;
extern SceneEditBasicSphereProtoDataDefaultTypeInternal _SceneEditBasicSphereProtoData_default_instance_;
class SceneEditBigToyBallProtoData;
struct SceneEditBigToyBallProtoDataDefaultTypeInternal;
extern SceneEditBigToyBallProtoDataDefaultTypeInternal _SceneEditBigToyBallProtoData_default_instance_;
class SceneEditBotGeneratorProtoData;
struct SceneEditBotGeneratorProtoDataDefaultTypeInternal;
extern SceneEditBotGeneratorProtoDataDefaultTypeInternal _SceneEditBotGeneratorProtoData_default_instance_;
class SceneEditBuffProtoData;
struct SceneEditBuffProtoDataDefaultTypeInternal;
extern SceneEditBuffProtoDataDefaultTypeInternal _SceneEditBuffProtoData_default_instance_;
class SceneEditCSModeProtoData;
struct SceneEditCSModeProtoDataDefaultTypeInternal;
extern SceneEditCSModeProtoDataDefaultTypeInternal _SceneEditCSModeProtoData_default_instance_;
class SceneEditCustomItemBoxGroupProtoData;
struct SceneEditCustomItemBoxGroupProtoDataDefaultTypeInternal;
extern SceneEditCustomItemBoxGroupProtoDataDefaultTypeInternal _SceneEditCustomItemBoxGroupProtoData_default_instance_;
class SceneEditCustomItemBoxItemProtoData;
struct SceneEditCustomItemBoxItemProtoDataDefaultTypeInternal;
extern SceneEditCustomItemBoxItemProtoDataDefaultTypeInternal _SceneEditCustomItemBoxItemProtoData_default_instance_;
class SceneEditCustomItemBoxProtoData;
struct SceneEditCustomItemBoxProtoDataDefaultTypeInternal;
extern SceneEditCustomItemBoxProtoDataDefaultTypeInternal _SceneEditCustomItemBoxProtoData_default_instance_;
class SceneEditCustomLevelObjectProtoData;
struct SceneEditCustomLevelObjectProtoDataDefaultTypeInternal;
extern SceneEditCustomLevelObjectProtoDataDefaultTypeInternal _SceneEditCustomLevelObjectProtoData_default_instance_;
class SceneEditCustomModeProtoData;
struct SceneEditCustomModeProtoDataDefaultTypeInternal;
extern SceneEditCustomModeProtoDataDefaultTypeInternal _SceneEditCustomModeProtoData_default_instance_;
class SceneEditEndConditionProtoData;
struct SceneEditEndConditionProtoDataDefaultTypeInternal;
extern SceneEditEndConditionProtoDataDefaultTypeInternal _SceneEditEndConditionProtoData_default_instance_;
class SceneEditEntityAttributeProtoData;
struct SceneEditEntityAttributeProtoDataDefaultTypeInternal;
extern SceneEditEntityAttributeProtoDataDefaultTypeInternal _SceneEditEntityAttributeProtoData_default_instance_;
class SceneEditEntityProtoData;
struct SceneEditEntityProtoDataDefaultTypeInternal;
extern SceneEditEntityProtoDataDefaultTypeInternal _SceneEditEntityProtoData_default_instance_;
class SceneEditGeneralProtoData;
struct SceneEditGeneralProtoDataDefaultTypeInternal;
extern SceneEditGeneralProtoDataDefaultTypeInternal _SceneEditGeneralProtoData_default_instance_;
class SceneEditGoalData;
struct SceneEditGoalDataDefaultTypeInternal;
extern SceneEditGoalDataDefaultTypeInternal _SceneEditGoalData_default_instance_;
class SceneEditIntegralModeProtoData;
struct SceneEditIntegralModeProtoDataDefaultTypeInternal;
extern SceneEditIntegralModeProtoDataDefaultTypeInternal _SceneEditIntegralModeProtoData_default_instance_;
class SceneEditItemBoxProtoData;
struct SceneEditItemBoxProtoDataDefaultTypeInternal;
extern SceneEditItemBoxProtoDataDefaultTypeInternal _SceneEditItemBoxProtoData_default_instance_;
class SceneEditMiniSentryProtoData;
struct SceneEditMiniSentryProtoDataDefaultTypeInternal;
extern SceneEditMiniSentryProtoDataDefaultTypeInternal _SceneEditMiniSentryProtoData_default_instance_;
class SceneEditModeProtoData;
struct SceneEditModeProtoDataDefaultTypeInternal;
extern SceneEditModeProtoDataDefaultTypeInternal _SceneEditModeProtoData_default_instance_;
class SceneEditMoveObjectProtoData;
struct SceneEditMoveObjectProtoDataDefaultTypeInternal;
extern SceneEditMoveObjectProtoDataDefaultTypeInternal _SceneEditMoveObjectProtoData_default_instance_;
class SceneEditObjectProtoData;
struct SceneEditObjectProtoDataDefaultTypeInternal;
extern SceneEditObjectProtoDataDefaultTypeInternal _SceneEditObjectProtoData_default_instance_;
class SceneEditOildrumData;
struct SceneEditOildrumDataDefaultTypeInternal;
extern SceneEditOildrumDataDefaultTypeInternal _SceneEditOildrumData_default_instance_;
class SceneEditPartyModeProtoData;
struct SceneEditPartyModeProtoDataDefaultTypeInternal;
extern SceneEditPartyModeProtoDataDefaultTypeInternal _SceneEditPartyModeProtoData_default_instance_;
class SceneEditPianoKeyProtoData;
struct SceneEditPianoKeyProtoDataDefaultTypeInternal;
extern SceneEditPianoKeyProtoDataDefaultTypeInternal _SceneEditPianoKeyProtoData_default_instance_;
class SceneEditScalableItemProtoData;
struct SceneEditScalableItemProtoDataDefaultTypeInternal;
extern SceneEditScalableItemProtoDataDefaultTypeInternal _SceneEditScalableItemProtoData_default_instance_;
class SceneEditShapeTriggerProtoData;
struct SceneEditShapeTriggerProtoDataDefaultTypeInternal;
extern SceneEditShapeTriggerProtoDataDefaultTypeInternal _SceneEditShapeTriggerProtoData_default_instance_;
class SceneEditSpawnBoxData;
struct SceneEditSpawnBoxDataDefaultTypeInternal;
extern SceneEditSpawnBoxDataDefaultTypeInternal _SceneEditSpawnBoxData_default_instance_;
class SceneEditTeleportDoorProtoData;
struct SceneEditTeleportDoorProtoDataDefaultTypeInternal;
extern SceneEditTeleportDoorProtoDataDefaultTypeInternal _SceneEditTeleportDoorProtoData_default_instance_;
class SceneEditTriggerProtoData;
struct SceneEditTriggerProtoDataDefaultTypeInternal;
extern SceneEditTriggerProtoDataDefaultTypeInternal _SceneEditTriggerProtoData_default_instance_;
class SceneEditUGCAIProtoData;
struct SceneEditUGCAIProtoDataDefaultTypeInternal;
extern SceneEditUGCAIProtoDataDefaultTypeInternal _SceneEditUGCAIProtoData_default_instance_;
class SceneEditUGCCoinGeneratorProtoData;
struct SceneEditUGCCoinGeneratorProtoDataDefaultTypeInternal;
extern SceneEditUGCCoinGeneratorProtoDataDefaultTypeInternal _SceneEditUGCCoinGeneratorProtoData_default_instance_;
class SceneEditUGCCustomPathProtoData;
struct SceneEditUGCCustomPathProtoDataDefaultTypeInternal;
extern SceneEditUGCCustomPathProtoDataDefaultTypeInternal _SceneEditUGCCustomPathProtoData_default_instance_;
class SceneEditUGCEntityGeneratorProtoData;
struct SceneEditUGCEntityGeneratorProtoDataDefaultTypeInternal;
extern SceneEditUGCEntityGeneratorProtoDataDefaultTypeInternal _SceneEditUGCEntityGeneratorProtoData_default_instance_;
class SceneEditUGCFootballProtoData;
struct SceneEditUGCFootballProtoDataDefaultTypeInternal;
extern SceneEditUGCFootballProtoDataDefaultTypeInternal _SceneEditUGCFootballProtoData_default_instance_;
class SceneEditUGCPointLightProtoData;
struct SceneEditUGCPointLightProtoDataDefaultTypeInternal;
extern SceneEditUGCPointLightProtoDataDefaultTypeInternal _SceneEditUGCPointLightProtoData_default_instance_;
class SceneEditUGCVendingMachineProtoData;
struct SceneEditUGCVendingMachineProtoDataDefaultTypeInternal;
extern SceneEditUGCVendingMachineProtoDataDefaultTypeInternal _SceneEditUGCVendingMachineProtoData_default_instance_;
class SceneEditUGCWardrobeProtoData;
struct SceneEditUGCWardrobeProtoDataDefaultTypeInternal;
extern SceneEditUGCWardrobeProtoDataDefaultTypeInternal _SceneEditUGCWardrobeProtoData_default_instance_;
class UGCAIConfigParams;
struct UGCAIConfigParamsDefaultTypeInternal;
extern UGCAIConfigParamsDefaultTypeInternal _UGCAIConfigParams_default_instance_;
class UGCAllSceneRuntimeData;
struct UGCAllSceneRuntimeDataDefaultTypeInternal;
extern UGCAllSceneRuntimeDataDefaultTypeInternal _UGCAllSceneRuntimeData_default_instance_;
class UGCBTreeData;
struct UGCBTreeDataDefaultTypeInternal;
extern UGCBTreeDataDefaultTypeInternal _UGCBTreeData_default_instance_;
class UGCBigToyBallExportExtraInfo;
struct UGCBigToyBallExportExtraInfoDefaultTypeInternal;
extern UGCBigToyBallExportExtraInfoDefaultTypeInternal _UGCBigToyBallExportExtraInfo_default_instance_;
class UGCBlockEditProjectData;
struct UGCBlockEditProjectDataDefaultTypeInternal;
extern UGCBlockEditProjectDataDefaultTypeInternal _UGCBlockEditProjectData_default_instance_;
class UGCCheckPointExportExtraInfo;
struct UGCCheckPointExportExtraInfoDefaultTypeInternal;
extern UGCCheckPointExportExtraInfoDefaultTypeInternal _UGCCheckPointExportExtraInfo_default_instance_;
class UGCCustomEventData;
struct UGCCustomEventDataDefaultTypeInternal;
extern UGCCustomEventDataDefaultTypeInternal _UGCCustomEventData_default_instance_;
class UGCCustomReplicationData;
struct UGCCustomReplicationDataDefaultTypeInternal;
extern UGCCustomReplicationDataDefaultTypeInternal _UGCCustomReplicationData_default_instance_;
class UGCCustomReplicationDataForEditor;
struct UGCCustomReplicationDataForEditorDefaultTypeInternal;
extern UGCCustomReplicationDataForEditorDefaultTypeInternal _UGCCustomReplicationDataForEditor_default_instance_;
class UGCCustomReplicationDataItem;
struct UGCCustomReplicationDataItemDefaultTypeInternal;
extern UGCCustomReplicationDataItemDefaultTypeInternal _UGCCustomReplicationDataItem_default_instance_;
class UGCCustomReplicationDataItemForEditor;
struct UGCCustomReplicationDataItemForEditorDefaultTypeInternal;
extern UGCCustomReplicationDataItemForEditorDefaultTypeInternal _UGCCustomReplicationDataItemForEditor_default_instance_;
class UGCCustomReplicationDataItemInstance;
struct UGCCustomReplicationDataItemInstanceDefaultTypeInternal;
extern UGCCustomReplicationDataItemInstanceDefaultTypeInternal _UGCCustomReplicationDataItemInstance_default_instance_;
class UGCCustomReplicationDataItemInstanceV2;
struct UGCCustomReplicationDataItemInstanceV2DefaultTypeInternal;
extern UGCCustomReplicationDataItemInstanceV2DefaultTypeInternal _UGCCustomReplicationDataItemInstanceV2_default_instance_;
class UGCCustomReplicationDataItemV2;
struct UGCCustomReplicationDataItemV2DefaultTypeInternal;
extern UGCCustomReplicationDataItemV2DefaultTypeInternal _UGCCustomReplicationDataItemV2_default_instance_;
class UGCCustomReplicationDataV2;
struct UGCCustomReplicationDataV2DefaultTypeInternal;
extern UGCCustomReplicationDataV2DefaultTypeInternal _UGCCustomReplicationDataV2_default_instance_;
class UGCDatabaseData;
struct UGCDatabaseDataDefaultTypeInternal;
extern UGCDatabaseDataDefaultTypeInternal _UGCDatabaseData_default_instance_;
class UGCDebugSettingData;
struct UGCDebugSettingDataDefaultTypeInternal;
extern UGCDebugSettingDataDefaultTypeInternal _UGCDebugSettingData_default_instance_;
class UGCEditorError;
struct UGCEditorErrorDefaultTypeInternal;
extern UGCEditorErrorDefaultTypeInternal _UGCEditorError_default_instance_;
class UGCEditorError_ErrorCodeData;
struct UGCEditorError_ErrorCodeDataDefaultTypeInternal;
extern UGCEditorError_ErrorCodeDataDefaultTypeInternal _UGCEditorError_ErrorCodeData_default_instance_;
class UGCEditorError_ErrorEntry;
struct UGCEditorError_ErrorEntryDefaultTypeInternal;
extern UGCEditorError_ErrorEntryDefaultTypeInternal _UGCEditorError_ErrorEntry_default_instance_;
class UGCFuncCallerData;
struct UGCFuncCallerDataDefaultTypeInternal;
extern UGCFuncCallerDataDefaultTypeInternal _UGCFuncCallerData_default_instance_;
class UGCFuncCallerDataV2;
struct UGCFuncCallerDataV2DefaultTypeInternal;
extern UGCFuncCallerDataV2DefaultTypeInternal _UGCFuncCallerDataV2_default_instance_;
class UGCFuncDefParamData;
struct UGCFuncDefParamDataDefaultTypeInternal;
extern UGCFuncDefParamDataDefaultTypeInternal _UGCFuncDefParamData_default_instance_;
class UGCGameData;
struct UGCGameDataDefaultTypeInternal;
extern UGCGameDataDefaultTypeInternal _UGCGameData_default_instance_;
class UGCGraphData;
struct UGCGraphDataDefaultTypeInternal;
extern UGCGraphDataDefaultTypeInternal _UGCGraphData_default_instance_;
class UGCGraphDataV2;
struct UGCGraphDataV2DefaultTypeInternal;
extern UGCGraphDataV2DefaultTypeInternal _UGCGraphDataV2_default_instance_;
class UGCHud3DContainerData;
struct UGCHud3DContainerDataDefaultTypeInternal;
extern UGCHud3DContainerDataDefaultTypeInternal _UGCHud3DContainerData_default_instance_;
class UGCHudButtonData;
struct UGCHudButtonDataDefaultTypeInternal;
extern UGCHudButtonDataDefaultTypeInternal _UGCHudButtonData_default_instance_;
class UGCHudGameObjectCommonData;
struct UGCHudGameObjectCommonDataDefaultTypeInternal;
extern UGCHudGameObjectCommonDataDefaultTypeInternal _UGCHudGameObjectCommonData_default_instance_;
class UGCHudGameObjectData;
struct UGCHudGameObjectDataDefaultTypeInternal;
extern UGCHudGameObjectDataDefaultTypeInternal _UGCHudGameObjectData_default_instance_;
class UGCHudGameObjectDataForEditor;
struct UGCHudGameObjectDataForEditorDefaultTypeInternal;
extern UGCHudGameObjectDataForEditorDefaultTypeInternal _UGCHudGameObjectDataForEditor_default_instance_;
class UGCHudGridData;
struct UGCHudGridDataDefaultTypeInternal;
extern UGCHudGridDataDefaultTypeInternal _UGCHudGridData_default_instance_;
class UGCHudImageData;
struct UGCHudImageDataDefaultTypeInternal;
extern UGCHudImageDataDefaultTypeInternal _UGCHudImageData_default_instance_;
class UGCHudInputData;
struct UGCHudInputDataDefaultTypeInternal;
extern UGCHudInputDataDefaultTypeInternal _UGCHudInputData_default_instance_;
class UGCHudLabelData;
struct UGCHudLabelDataDefaultTypeInternal;
extern UGCHudLabelDataDefaultTypeInternal _UGCHudLabelData_default_instance_;
class UGCHudLayoutData;
struct UGCHudLayoutDataDefaultTypeInternal;
extern UGCHudLayoutDataDefaultTypeInternal _UGCHudLayoutData_default_instance_;
class UGCHudLayoutNewData;
struct UGCHudLayoutNewDataDefaultTypeInternal;
extern UGCHudLayoutNewDataDefaultTypeInternal _UGCHudLayoutNewData_default_instance_;
class UGCHudPanelData;
struct UGCHudPanelDataDefaultTypeInternal;
extern UGCHudPanelDataDefaultTypeInternal _UGCHudPanelData_default_instance_;
class UGCHudPrefabCommonData;
struct UGCHudPrefabCommonDataDefaultTypeInternal;
extern UGCHudPrefabCommonDataDefaultTypeInternal _UGCHudPrefabCommonData_default_instance_;
class UGCHudPrefabData;
struct UGCHudPrefabDataDefaultTypeInternal;
extern UGCHudPrefabDataDefaultTypeInternal _UGCHudPrefabData_default_instance_;
class UGCHudPrefabDataForEditor;
struct UGCHudPrefabDataForEditorDefaultTypeInternal;
extern UGCHudPrefabDataForEditorDefaultTypeInternal _UGCHudPrefabDataForEditor_default_instance_;
class UGCHudPrefabDatas;
struct UGCHudPrefabDatasDefaultTypeInternal;
extern UGCHudPrefabDatasDefaultTypeInternal _UGCHudPrefabDatas_default_instance_;
class UGCHudPrefabDatasForEditor;
struct UGCHudPrefabDatasForEditorDefaultTypeInternal;
extern UGCHudPrefabDatasForEditorDefaultTypeInternal _UGCHudPrefabDatasForEditor_default_instance_;
class UGCHudProfileInfoData;
struct UGCHudProfileInfoDataDefaultTypeInternal;
extern UGCHudProfileInfoDataDefaultTypeInternal _UGCHudProfileInfoData_default_instance_;
class UGCHudRectTransformData;
struct UGCHudRectTransformDataDefaultTypeInternal;
extern UGCHudRectTransformDataDefaultTypeInternal _UGCHudRectTransformData_default_instance_;
class UGCHudScrollViewData;
struct UGCHudScrollViewDataDefaultTypeInternal;
extern UGCHudScrollViewDataDefaultTypeInternal _UGCHudScrollViewData_default_instance_;
class UGCHudTextureData;
struct UGCHudTextureDataDefaultTypeInternal;
extern UGCHudTextureDataDefaultTypeInternal _UGCHudTextureData_default_instance_;
class UGCHudTransformData;
struct UGCHudTransformDataDefaultTypeInternal;
extern UGCHudTransformDataDefaultTypeInternal _UGCHudTransformData_default_instance_;
class UGCHudWidgetData;
struct UGCHudWidgetDataDefaultTypeInternal;
extern UGCHudWidgetDataDefaultTypeInternal _UGCHudWidgetData_default_instance_;
class UGCInternalLibrary;
struct UGCInternalLibraryDefaultTypeInternal;
extern UGCInternalLibraryDefaultTypeInternal _UGCInternalLibrary_default_instance_;
class UGCLevelData;
struct UGCLevelDataDefaultTypeInternal;
extern UGCLevelDataDefaultTypeInternal _UGCLevelData_default_instance_;
class UGCLevelDataV2;
struct UGCLevelDataV2DefaultTypeInternal;
extern UGCLevelDataV2DefaultTypeInternal _UGCLevelDataV2_default_instance_;
class UGCLocData;
struct UGCLocDataDefaultTypeInternal;
extern UGCLocDataDefaultTypeInternal _UGCLocData_default_instance_;
class UGCLocItem;
struct UGCLocItemDefaultTypeInternal;
extern UGCLocItemDefaultTypeInternal _UGCLocItem_default_instance_;
class UGCLocKeyData;
struct UGCLocKeyDataDefaultTypeInternal;
extern UGCLocKeyDataDefaultTypeInternal _UGCLocKeyData_default_instance_;
class UGCLogicEntityData;
struct UGCLogicEntityDataDefaultTypeInternal;
extern UGCLogicEntityDataDefaultTypeInternal _UGCLogicEntityData_default_instance_;
class UGCLogicEntityDataForEditor;
struct UGCLogicEntityDataForEditorDefaultTypeInternal;
extern UGCLogicEntityDataForEditorDefaultTypeInternal _UGCLogicEntityDataForEditor_default_instance_;
class UGCLogicEntityDataV2;
struct UGCLogicEntityDataV2DefaultTypeInternal;
extern UGCLogicEntityDataV2DefaultTypeInternal _UGCLogicEntityDataV2_default_instance_;
class UGCLogicEntityDataV3;
struct UGCLogicEntityDataV3DefaultTypeInternal;
extern UGCLogicEntityDataV3DefaultTypeInternal _UGCLogicEntityDataV3_default_instance_;
class UGCMapProjectData;
struct UGCMapProjectDataDefaultTypeInternal;
extern UGCMapProjectDataDefaultTypeInternal _UGCMapProjectData_default_instance_;
class UGCMapProjectData_OB35_And_Earlier;
struct UGCMapProjectData_OB35_And_EarlierDefaultTypeInternal;
extern UGCMapProjectData_OB35_And_EarlierDefaultTypeInternal _UGCMapProjectData_OB35_And_Earlier_default_instance_;
class UGCMapRuntimeData;
struct UGCMapRuntimeDataDefaultTypeInternal;
extern UGCMapRuntimeDataDefaultTypeInternal _UGCMapRuntimeData_default_instance_;
class UGCMapValue;
struct UGCMapValueDefaultTypeInternal;
extern UGCMapValueDefaultTypeInternal _UGCMapValue_default_instance_;
class UGCMiniSentryExportInfo;
struct UGCMiniSentryExportInfoDefaultTypeInternal;
extern UGCMiniSentryExportInfoDefaultTypeInternal _UGCMiniSentryExportInfo_default_instance_;
class UGCMoveObjectExportExtraInfo;
struct UGCMoveObjectExportExtraInfoDefaultTypeInternal;
extern UGCMoveObjectExportExtraInfoDefaultTypeInternal _UGCMoveObjectExportExtraInfo_default_instance_;
class UGCPhaseData;
struct UGCPhaseDataDefaultTypeInternal;
extern UGCPhaseDataDefaultTypeInternal _UGCPhaseData_default_instance_;
class UGCPrefabData;
struct UGCPrefabDataDefaultTypeInternal;
extern UGCPrefabDataDefaultTypeInternal _UGCPrefabData_default_instance_;
class UGCProjectData;
struct UGCProjectDataDefaultTypeInternal;
extern UGCProjectDataDefaultTypeInternal _UGCProjectData_default_instance_;
class UGCProjectMetaData;
struct UGCProjectMetaDataDefaultTypeInternal;
extern UGCProjectMetaDataDefaultTypeInternal _UGCProjectMetaData_default_instance_;
class UGCResAnimationClipEvent;
struct UGCResAnimationClipEventDefaultTypeInternal;
extern UGCResAnimationClipEventDefaultTypeInternal _UGCResAnimationClipEvent_default_instance_;
class UGCResEventAnimationClipData;
struct UGCResEventAnimationClipDataDefaultTypeInternal;
extern UGCResEventAnimationClipDataDefaultTypeInternal _UGCResEventAnimationClipData_default_instance_;
class UGCResourceContentData;
struct UGCResourceContentDataDefaultTypeInternal;
extern UGCResourceContentDataDefaultTypeInternal _UGCResourceContentData_default_instance_;
class UGCResourceData;
struct UGCResourceDataDefaultTypeInternal;
extern UGCResourceDataDefaultTypeInternal _UGCResourceData_default_instance_;
class UGCRoomCustomParamLocDatas;
struct UGCRoomCustomParamLocDatasDefaultTypeInternal;
extern UGCRoomCustomParamLocDatasDefaultTypeInternal _UGCRoomCustomParamLocDatas_default_instance_;
class UGCRoomHalfWayJoinRule;
struct UGCRoomHalfWayJoinRuleDefaultTypeInternal;
extern UGCRoomHalfWayJoinRuleDefaultTypeInternal _UGCRoomHalfWayJoinRule_default_instance_;
class UGCRoundData;
struct UGCRoundDataDefaultTypeInternal;
extern UGCRoundDataDefaultTypeInternal _UGCRoundData_default_instance_;
class UGCRuleData;
struct UGCRuleDataDefaultTypeInternal;
extern UGCRuleDataDefaultTypeInternal _UGCRuleData_default_instance_;
class UGCRuleDataV2;
struct UGCRuleDataV2DefaultTypeInternal;
extern UGCRuleDataV2DefaultTypeInternal _UGCRuleDataV2_default_instance_;
class UGCSubLevelDescData;
struct UGCSubLevelDescDataDefaultTypeInternal;
extern UGCSubLevelDescDataDefaultTypeInternal _UGCSubLevelDescData_default_instance_;
class UGCSubLevelItemRuntimeData;
struct UGCSubLevelItemRuntimeDataDefaultTypeInternal;
extern UGCSubLevelItemRuntimeDataDefaultTypeInternal _UGCSubLevelItemRuntimeData_default_instance_;
class UGCSubLevelResourceData;
struct UGCSubLevelResourceDataDefaultTypeInternal;
extern UGCSubLevelResourceDataDefaultTypeInternal _UGCSubLevelResourceData_default_instance_;
class UGCSubLevelSkyEnvData;
struct UGCSubLevelSkyEnvDataDefaultTypeInternal;
extern UGCSubLevelSkyEnvDataDefaultTypeInternal _UGCSubLevelSkyEnvData_default_instance_;
class UGCTransformNodeData;
struct UGCTransformNodeDataDefaultTypeInternal;
extern UGCTransformNodeDataDefaultTypeInternal _UGCTransformNodeData_default_instance_;
class UGCType;
struct UGCTypeDefaultTypeInternal;
extern UGCTypeDefaultTypeInternal _UGCType_default_instance_;
class UGCTypeComponent;
struct UGCTypeComponentDefaultTypeInternal;
extern UGCTypeComponentDefaultTypeInternal _UGCTypeComponent_default_instance_;
class UGCTypeComponentProp;
struct UGCTypeComponentPropDefaultTypeInternal;
extern UGCTypeComponentPropDefaultTypeInternal _UGCTypeComponentProp_default_instance_;
class UGCTypeTree;
struct UGCTypeTreeDefaultTypeInternal;
extern UGCTypeTreeDefaultTypeInternal _UGCTypeTree_default_instance_;
class UGCUserDataForCensorship;
struct UGCUserDataForCensorshipDefaultTypeInternal;
extern UGCUserDataForCensorshipDefaultTypeInternal _UGCUserDataForCensorship_default_instance_;
class UGCUserDataForCensorship_BlobOfCustomStrings;
struct UGCUserDataForCensorship_BlobOfCustomStringsDefaultTypeInternal;
extern UGCUserDataForCensorship_BlobOfCustomStringsDefaultTypeInternal _UGCUserDataForCensorship_BlobOfCustomStrings_default_instance_;
class UGCVarDefineData;
struct UGCVarDefineDataDefaultTypeInternal;
extern UGCVarDefineDataDefaultTypeInternal _UGCVarDefineData_default_instance_;
class UGCVarDefineDataV2;
struct UGCVarDefineDataV2DefaultTypeInternal;
extern UGCVarDefineDataV2DefaultTypeInternal _UGCVarDefineDataV2_default_instance_;
class UGCVarValueData;
struct UGCVarValueDataDefaultTypeInternal;
extern UGCVarValueDataDefaultTypeInternal _UGCVarValueData_default_instance_;
class UGCVarValueDataV2;
struct UGCVarValueDataV2DefaultTypeInternal;
extern UGCVarValueDataV2DefaultTypeInternal _UGCVarValueDataV2_default_instance_;
class UGCVersionControlData;
struct UGCVersionControlDataDefaultTypeInternal;
extern UGCVersionControlDataDefaultTypeInternal _UGCVersionControlData_default_instance_;
class UGCWorkflowData;
struct UGCWorkflowDataDefaultTypeInternal;
extern UGCWorkflowDataDefaultTypeInternal _UGCWorkflowData_default_instance_;
class UGCWorkflowSequence;
struct UGCWorkflowSequenceDefaultTypeInternal;
extern UGCWorkflowSequenceDefaultTypeInternal _UGCWorkflowSequence_default_instance_;
class UGCWorkflowSequenceItem;
struct UGCWorkflowSequenceItemDefaultTypeInternal;
extern UGCWorkflowSequenceItemDefaultTypeInternal _UGCWorkflowSequenceItem_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::ModeVariable* Arena::CreateMaybeMessage<::message::ModeVariable>(Arena*);
template<> ::message::RoomCustomParamData* Arena::CreateMaybeMessage<::message::RoomCustomParamData>(Arena*);
template<> ::message::RoomCustomParamMultiChooseInt* Arena::CreateMaybeMessage<::message::RoomCustomParamMultiChooseInt>(Arena*);
template<> ::message::RoomCustomParamProtoData* Arena::CreateMaybeMessage<::message::RoomCustomParamProtoData>(Arena*);
template<> ::message::RoomCustomParamSingleChooseFloat* Arena::CreateMaybeMessage<::message::RoomCustomParamSingleChooseFloat>(Arena*);
template<> ::message::RoomCustomParamSingleChooseInt* Arena::CreateMaybeMessage<::message::RoomCustomParamSingleChooseInt>(Arena*);
template<> ::message::RoomCustomParamSingleFloatItem* Arena::CreateMaybeMessage<::message::RoomCustomParamSingleFloatItem>(Arena*);
template<> ::message::RoomCustomParamSingleIntItem* Arena::CreateMaybeMessage<::message::RoomCustomParamSingleIntItem>(Arena*);
template<> ::message::RoomCustomParamSliderFloat* Arena::CreateMaybeMessage<::message::RoomCustomParamSliderFloat>(Arena*);
template<> ::message::RoomCustomParamSliderInt* Arena::CreateMaybeMessage<::message::RoomCustomParamSliderInt>(Arena*);
template<> ::message::RoomCustomParamsSettingData* Arena::CreateMaybeMessage<::message::RoomCustomParamsSettingData>(Arena*);
template<> ::message::SceneEditBasicSphereProtoData* Arena::CreateMaybeMessage<::message::SceneEditBasicSphereProtoData>(Arena*);
template<> ::message::SceneEditBigToyBallProtoData* Arena::CreateMaybeMessage<::message::SceneEditBigToyBallProtoData>(Arena*);
template<> ::message::SceneEditBotGeneratorProtoData* Arena::CreateMaybeMessage<::message::SceneEditBotGeneratorProtoData>(Arena*);
template<> ::message::SceneEditBuffProtoData* Arena::CreateMaybeMessage<::message::SceneEditBuffProtoData>(Arena*);
template<> ::message::SceneEditCSModeProtoData* Arena::CreateMaybeMessage<::message::SceneEditCSModeProtoData>(Arena*);
template<> ::message::SceneEditCustomItemBoxGroupProtoData* Arena::CreateMaybeMessage<::message::SceneEditCustomItemBoxGroupProtoData>(Arena*);
template<> ::message::SceneEditCustomItemBoxItemProtoData* Arena::CreateMaybeMessage<::message::SceneEditCustomItemBoxItemProtoData>(Arena*);
template<> ::message::SceneEditCustomItemBoxProtoData* Arena::CreateMaybeMessage<::message::SceneEditCustomItemBoxProtoData>(Arena*);
template<> ::message::SceneEditCustomLevelObjectProtoData* Arena::CreateMaybeMessage<::message::SceneEditCustomLevelObjectProtoData>(Arena*);
template<> ::message::SceneEditCustomModeProtoData* Arena::CreateMaybeMessage<::message::SceneEditCustomModeProtoData>(Arena*);
template<> ::message::SceneEditEndConditionProtoData* Arena::CreateMaybeMessage<::message::SceneEditEndConditionProtoData>(Arena*);
template<> ::message::SceneEditEntityAttributeProtoData* Arena::CreateMaybeMessage<::message::SceneEditEntityAttributeProtoData>(Arena*);
template<> ::message::SceneEditEntityProtoData* Arena::CreateMaybeMessage<::message::SceneEditEntityProtoData>(Arena*);
template<> ::message::SceneEditGeneralProtoData* Arena::CreateMaybeMessage<::message::SceneEditGeneralProtoData>(Arena*);
template<> ::message::SceneEditGoalData* Arena::CreateMaybeMessage<::message::SceneEditGoalData>(Arena*);
template<> ::message::SceneEditIntegralModeProtoData* Arena::CreateMaybeMessage<::message::SceneEditIntegralModeProtoData>(Arena*);
template<> ::message::SceneEditItemBoxProtoData* Arena::CreateMaybeMessage<::message::SceneEditItemBoxProtoData>(Arena*);
template<> ::message::SceneEditMiniSentryProtoData* Arena::CreateMaybeMessage<::message::SceneEditMiniSentryProtoData>(Arena*);
template<> ::message::SceneEditModeProtoData* Arena::CreateMaybeMessage<::message::SceneEditModeProtoData>(Arena*);
template<> ::message::SceneEditMoveObjectProtoData* Arena::CreateMaybeMessage<::message::SceneEditMoveObjectProtoData>(Arena*);
template<> ::message::SceneEditObjectProtoData* Arena::CreateMaybeMessage<::message::SceneEditObjectProtoData>(Arena*);
template<> ::message::SceneEditOildrumData* Arena::CreateMaybeMessage<::message::SceneEditOildrumData>(Arena*);
template<> ::message::SceneEditPartyModeProtoData* Arena::CreateMaybeMessage<::message::SceneEditPartyModeProtoData>(Arena*);
template<> ::message::SceneEditPianoKeyProtoData* Arena::CreateMaybeMessage<::message::SceneEditPianoKeyProtoData>(Arena*);
template<> ::message::SceneEditScalableItemProtoData* Arena::CreateMaybeMessage<::message::SceneEditScalableItemProtoData>(Arena*);
template<> ::message::SceneEditShapeTriggerProtoData* Arena::CreateMaybeMessage<::message::SceneEditShapeTriggerProtoData>(Arena*);
template<> ::message::SceneEditSpawnBoxData* Arena::CreateMaybeMessage<::message::SceneEditSpawnBoxData>(Arena*);
template<> ::message::SceneEditTeleportDoorProtoData* Arena::CreateMaybeMessage<::message::SceneEditTeleportDoorProtoData>(Arena*);
template<> ::message::SceneEditTriggerProtoData* Arena::CreateMaybeMessage<::message::SceneEditTriggerProtoData>(Arena*);
template<> ::message::SceneEditUGCAIProtoData* Arena::CreateMaybeMessage<::message::SceneEditUGCAIProtoData>(Arena*);
template<> ::message::SceneEditUGCCoinGeneratorProtoData* Arena::CreateMaybeMessage<::message::SceneEditUGCCoinGeneratorProtoData>(Arena*);
template<> ::message::SceneEditUGCCustomPathProtoData* Arena::CreateMaybeMessage<::message::SceneEditUGCCustomPathProtoData>(Arena*);
template<> ::message::SceneEditUGCEntityGeneratorProtoData* Arena::CreateMaybeMessage<::message::SceneEditUGCEntityGeneratorProtoData>(Arena*);
template<> ::message::SceneEditUGCFootballProtoData* Arena::CreateMaybeMessage<::message::SceneEditUGCFootballProtoData>(Arena*);
template<> ::message::SceneEditUGCPointLightProtoData* Arena::CreateMaybeMessage<::message::SceneEditUGCPointLightProtoData>(Arena*);
template<> ::message::SceneEditUGCVendingMachineProtoData* Arena::CreateMaybeMessage<::message::SceneEditUGCVendingMachineProtoData>(Arena*);
template<> ::message::SceneEditUGCWardrobeProtoData* Arena::CreateMaybeMessage<::message::SceneEditUGCWardrobeProtoData>(Arena*);
template<> ::message::UGCAIConfigParams* Arena::CreateMaybeMessage<::message::UGCAIConfigParams>(Arena*);
template<> ::message::UGCAllSceneRuntimeData* Arena::CreateMaybeMessage<::message::UGCAllSceneRuntimeData>(Arena*);
template<> ::message::UGCBTreeData* Arena::CreateMaybeMessage<::message::UGCBTreeData>(Arena*);
template<> ::message::UGCBigToyBallExportExtraInfo* Arena::CreateMaybeMessage<::message::UGCBigToyBallExportExtraInfo>(Arena*);
template<> ::message::UGCBlockEditProjectData* Arena::CreateMaybeMessage<::message::UGCBlockEditProjectData>(Arena*);
template<> ::message::UGCCheckPointExportExtraInfo* Arena::CreateMaybeMessage<::message::UGCCheckPointExportExtraInfo>(Arena*);
template<> ::message::UGCCustomEventData* Arena::CreateMaybeMessage<::message::UGCCustomEventData>(Arena*);
template<> ::message::UGCCustomReplicationData* Arena::CreateMaybeMessage<::message::UGCCustomReplicationData>(Arena*);
template<> ::message::UGCCustomReplicationDataForEditor* Arena::CreateMaybeMessage<::message::UGCCustomReplicationDataForEditor>(Arena*);
template<> ::message::UGCCustomReplicationDataItem* Arena::CreateMaybeMessage<::message::UGCCustomReplicationDataItem>(Arena*);
template<> ::message::UGCCustomReplicationDataItemForEditor* Arena::CreateMaybeMessage<::message::UGCCustomReplicationDataItemForEditor>(Arena*);
template<> ::message::UGCCustomReplicationDataItemInstance* Arena::CreateMaybeMessage<::message::UGCCustomReplicationDataItemInstance>(Arena*);
template<> ::message::UGCCustomReplicationDataItemInstanceV2* Arena::CreateMaybeMessage<::message::UGCCustomReplicationDataItemInstanceV2>(Arena*);
template<> ::message::UGCCustomReplicationDataItemV2* Arena::CreateMaybeMessage<::message::UGCCustomReplicationDataItemV2>(Arena*);
template<> ::message::UGCCustomReplicationDataV2* Arena::CreateMaybeMessage<::message::UGCCustomReplicationDataV2>(Arena*);
template<> ::message::UGCDatabaseData* Arena::CreateMaybeMessage<::message::UGCDatabaseData>(Arena*);
template<> ::message::UGCDebugSettingData* Arena::CreateMaybeMessage<::message::UGCDebugSettingData>(Arena*);
template<> ::message::UGCEditorError* Arena::CreateMaybeMessage<::message::UGCEditorError>(Arena*);
template<> ::message::UGCEditorError_ErrorCodeData* Arena::CreateMaybeMessage<::message::UGCEditorError_ErrorCodeData>(Arena*);
template<> ::message::UGCEditorError_ErrorEntry* Arena::CreateMaybeMessage<::message::UGCEditorError_ErrorEntry>(Arena*);
template<> ::message::UGCFuncCallerData* Arena::CreateMaybeMessage<::message::UGCFuncCallerData>(Arena*);
template<> ::message::UGCFuncCallerDataV2* Arena::CreateMaybeMessage<::message::UGCFuncCallerDataV2>(Arena*);
template<> ::message::UGCFuncDefParamData* Arena::CreateMaybeMessage<::message::UGCFuncDefParamData>(Arena*);
template<> ::message::UGCGameData* Arena::CreateMaybeMessage<::message::UGCGameData>(Arena*);
template<> ::message::UGCGraphData* Arena::CreateMaybeMessage<::message::UGCGraphData>(Arena*);
template<> ::message::UGCGraphDataV2* Arena::CreateMaybeMessage<::message::UGCGraphDataV2>(Arena*);
template<> ::message::UGCHud3DContainerData* Arena::CreateMaybeMessage<::message::UGCHud3DContainerData>(Arena*);
template<> ::message::UGCHudButtonData* Arena::CreateMaybeMessage<::message::UGCHudButtonData>(Arena*);
template<> ::message::UGCHudGameObjectCommonData* Arena::CreateMaybeMessage<::message::UGCHudGameObjectCommonData>(Arena*);
template<> ::message::UGCHudGameObjectData* Arena::CreateMaybeMessage<::message::UGCHudGameObjectData>(Arena*);
template<> ::message::UGCHudGameObjectDataForEditor* Arena::CreateMaybeMessage<::message::UGCHudGameObjectDataForEditor>(Arena*);
template<> ::message::UGCHudGridData* Arena::CreateMaybeMessage<::message::UGCHudGridData>(Arena*);
template<> ::message::UGCHudImageData* Arena::CreateMaybeMessage<::message::UGCHudImageData>(Arena*);
template<> ::message::UGCHudInputData* Arena::CreateMaybeMessage<::message::UGCHudInputData>(Arena*);
template<> ::message::UGCHudLabelData* Arena::CreateMaybeMessage<::message::UGCHudLabelData>(Arena*);
template<> ::message::UGCHudLayoutData* Arena::CreateMaybeMessage<::message::UGCHudLayoutData>(Arena*);
template<> ::message::UGCHudLayoutNewData* Arena::CreateMaybeMessage<::message::UGCHudLayoutNewData>(Arena*);
template<> ::message::UGCHudPanelData* Arena::CreateMaybeMessage<::message::UGCHudPanelData>(Arena*);
template<> ::message::UGCHudPrefabCommonData* Arena::CreateMaybeMessage<::message::UGCHudPrefabCommonData>(Arena*);
template<> ::message::UGCHudPrefabData* Arena::CreateMaybeMessage<::message::UGCHudPrefabData>(Arena*);
template<> ::message::UGCHudPrefabDataForEditor* Arena::CreateMaybeMessage<::message::UGCHudPrefabDataForEditor>(Arena*);
template<> ::message::UGCHudPrefabDatas* Arena::CreateMaybeMessage<::message::UGCHudPrefabDatas>(Arena*);
template<> ::message::UGCHudPrefabDatasForEditor* Arena::CreateMaybeMessage<::message::UGCHudPrefabDatasForEditor>(Arena*);
template<> ::message::UGCHudProfileInfoData* Arena::CreateMaybeMessage<::message::UGCHudProfileInfoData>(Arena*);
template<> ::message::UGCHudRectTransformData* Arena::CreateMaybeMessage<::message::UGCHudRectTransformData>(Arena*);
template<> ::message::UGCHudScrollViewData* Arena::CreateMaybeMessage<::message::UGCHudScrollViewData>(Arena*);
template<> ::message::UGCHudTextureData* Arena::CreateMaybeMessage<::message::UGCHudTextureData>(Arena*);
template<> ::message::UGCHudTransformData* Arena::CreateMaybeMessage<::message::UGCHudTransformData>(Arena*);
template<> ::message::UGCHudWidgetData* Arena::CreateMaybeMessage<::message::UGCHudWidgetData>(Arena*);
template<> ::message::UGCInternalLibrary* Arena::CreateMaybeMessage<::message::UGCInternalLibrary>(Arena*);
template<> ::message::UGCLevelData* Arena::CreateMaybeMessage<::message::UGCLevelData>(Arena*);
template<> ::message::UGCLevelDataV2* Arena::CreateMaybeMessage<::message::UGCLevelDataV2>(Arena*);
template<> ::message::UGCLocData* Arena::CreateMaybeMessage<::message::UGCLocData>(Arena*);
template<> ::message::UGCLocItem* Arena::CreateMaybeMessage<::message::UGCLocItem>(Arena*);
template<> ::message::UGCLocKeyData* Arena::CreateMaybeMessage<::message::UGCLocKeyData>(Arena*);
template<> ::message::UGCLogicEntityData* Arena::CreateMaybeMessage<::message::UGCLogicEntityData>(Arena*);
template<> ::message::UGCLogicEntityDataForEditor* Arena::CreateMaybeMessage<::message::UGCLogicEntityDataForEditor>(Arena*);
template<> ::message::UGCLogicEntityDataV2* Arena::CreateMaybeMessage<::message::UGCLogicEntityDataV2>(Arena*);
template<> ::message::UGCLogicEntityDataV3* Arena::CreateMaybeMessage<::message::UGCLogicEntityDataV3>(Arena*);
template<> ::message::UGCMapProjectData* Arena::CreateMaybeMessage<::message::UGCMapProjectData>(Arena*);
template<> ::message::UGCMapProjectData_OB35_And_Earlier* Arena::CreateMaybeMessage<::message::UGCMapProjectData_OB35_And_Earlier>(Arena*);
template<> ::message::UGCMapRuntimeData* Arena::CreateMaybeMessage<::message::UGCMapRuntimeData>(Arena*);
template<> ::message::UGCMapValue* Arena::CreateMaybeMessage<::message::UGCMapValue>(Arena*);
template<> ::message::UGCMiniSentryExportInfo* Arena::CreateMaybeMessage<::message::UGCMiniSentryExportInfo>(Arena*);
template<> ::message::UGCMoveObjectExportExtraInfo* Arena::CreateMaybeMessage<::message::UGCMoveObjectExportExtraInfo>(Arena*);
template<> ::message::UGCPhaseData* Arena::CreateMaybeMessage<::message::UGCPhaseData>(Arena*);
template<> ::message::UGCPrefabData* Arena::CreateMaybeMessage<::message::UGCPrefabData>(Arena*);
template<> ::message::UGCProjectData* Arena::CreateMaybeMessage<::message::UGCProjectData>(Arena*);
template<> ::message::UGCProjectMetaData* Arena::CreateMaybeMessage<::message::UGCProjectMetaData>(Arena*);
template<> ::message::UGCResAnimationClipEvent* Arena::CreateMaybeMessage<::message::UGCResAnimationClipEvent>(Arena*);
template<> ::message::UGCResEventAnimationClipData* Arena::CreateMaybeMessage<::message::UGCResEventAnimationClipData>(Arena*);
template<> ::message::UGCResourceContentData* Arena::CreateMaybeMessage<::message::UGCResourceContentData>(Arena*);
template<> ::message::UGCResourceData* Arena::CreateMaybeMessage<::message::UGCResourceData>(Arena*);
template<> ::message::UGCRoomCustomParamLocDatas* Arena::CreateMaybeMessage<::message::UGCRoomCustomParamLocDatas>(Arena*);
template<> ::message::UGCRoomHalfWayJoinRule* Arena::CreateMaybeMessage<::message::UGCRoomHalfWayJoinRule>(Arena*);
template<> ::message::UGCRoundData* Arena::CreateMaybeMessage<::message::UGCRoundData>(Arena*);
template<> ::message::UGCRuleData* Arena::CreateMaybeMessage<::message::UGCRuleData>(Arena*);
template<> ::message::UGCRuleDataV2* Arena::CreateMaybeMessage<::message::UGCRuleDataV2>(Arena*);
template<> ::message::UGCSubLevelDescData* Arena::CreateMaybeMessage<::message::UGCSubLevelDescData>(Arena*);
template<> ::message::UGCSubLevelItemRuntimeData* Arena::CreateMaybeMessage<::message::UGCSubLevelItemRuntimeData>(Arena*);
template<> ::message::UGCSubLevelResourceData* Arena::CreateMaybeMessage<::message::UGCSubLevelResourceData>(Arena*);
template<> ::message::UGCSubLevelSkyEnvData* Arena::CreateMaybeMessage<::message::UGCSubLevelSkyEnvData>(Arena*);
template<> ::message::UGCTransformNodeData* Arena::CreateMaybeMessage<::message::UGCTransformNodeData>(Arena*);
template<> ::message::UGCType* Arena::CreateMaybeMessage<::message::UGCType>(Arena*);
template<> ::message::UGCTypeComponent* Arena::CreateMaybeMessage<::message::UGCTypeComponent>(Arena*);
template<> ::message::UGCTypeComponentProp* Arena::CreateMaybeMessage<::message::UGCTypeComponentProp>(Arena*);
template<> ::message::UGCTypeTree* Arena::CreateMaybeMessage<::message::UGCTypeTree>(Arena*);
template<> ::message::UGCUserDataForCensorship* Arena::CreateMaybeMessage<::message::UGCUserDataForCensorship>(Arena*);
template<> ::message::UGCUserDataForCensorship_BlobOfCustomStrings* Arena::CreateMaybeMessage<::message::UGCUserDataForCensorship_BlobOfCustomStrings>(Arena*);
template<> ::message::UGCVarDefineData* Arena::CreateMaybeMessage<::message::UGCVarDefineData>(Arena*);
template<> ::message::UGCVarDefineDataV2* Arena::CreateMaybeMessage<::message::UGCVarDefineDataV2>(Arena*);
template<> ::message::UGCVarValueData* Arena::CreateMaybeMessage<::message::UGCVarValueData>(Arena*);
template<> ::message::UGCVarValueDataV2* Arena::CreateMaybeMessage<::message::UGCVarValueDataV2>(Arena*);
template<> ::message::UGCVersionControlData* Arena::CreateMaybeMessage<::message::UGCVersionControlData>(Arena*);
template<> ::message::UGCWorkflowData* Arena::CreateMaybeMessage<::message::UGCWorkflowData>(Arena*);
template<> ::message::UGCWorkflowSequence* Arena::CreateMaybeMessage<::message::UGCWorkflowSequence>(Arena*);
template<> ::message::UGCWorkflowSequenceItem* Arena::CreateMaybeMessage<::message::UGCWorkflowSequenceItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

enum UGCEditorError_ErrorCode : int {
  UGCEditorError_ErrorCode_ErrorCode_Unknown = 0,
  UGCEditorError_ErrorCode_ErrorCode_Reserved_MaxValue = 100000000,
  UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientSpawnPoints = 100000001,
  UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientTargetPoints = 100000002,
  UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientMustModeItems = 100000003,
  UGCEditorError_ErrorCode_ErrorCode_Map_CostExceedLimit = 100000004,
  UGCEditorError_ErrorCode_ErrorCode_Map_ObjectExceedLimit = 100000005,
  UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientAllTeamSpawnPointsNum = 100000006,
  UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientSingleTeamSpawnPoints = 100000007,
  UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientSingleTeamSpawnPointsNum = 100000008,
  UGCEditorError_ErrorCode_ErrorCode_Graph_MissingReference = 100200001,
  UGCEditorError_ErrorCode_ErrorCode_Graph_TypeMismatch = 100200002,
  UGCEditorError_ErrorCode_ErrorCode_Graph_VariableOutOfScope = 100200003,
  UGCEditorError_ErrorCode_ErrorCode_Graph_ExceedLimit = 100200004,
  UGCEditorError_ErrorCode_ErrorCode_Graph_ReturnOutOfScope = 100200005,
  UGCEditorError_ErrorCode_ErrorCode_Graph_ReturnWithoutValueOutOfScope = 100200006,
  UGCEditorError_ErrorCode_ErrorCode_Graph_ReturnWithValueOutOfScope = 100200007,
  UGCEditorError_ErrorCode_ErrorCode_Graph_InvalidEvent = 100200008,
  UGCEditorError_ErrorCode_ErrorCode_Graph_ForbbidenEmptySlot = 100200009,
  UGCEditorError_ErrorCode_ErrorCode_Graph_EntityPropertyObsolete = 100200010,
  UGCEditorError_ErrorCode_ErrorCode_Hud_InterfaceExceedLimit = 100300001,
  UGCEditorError_ErrorCode_ErrorCode_Hud_ControlExceedLimit = 100300002,
  UGCEditorError_ErrorCode_UGCEditorError_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UGCEditorError_ErrorCode_UGCEditorError_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UGCEditorError_ErrorCode_IsValid(int value);
constexpr UGCEditorError_ErrorCode UGCEditorError_ErrorCode_ErrorCode_MIN = UGCEditorError_ErrorCode_ErrorCode_Unknown;
constexpr UGCEditorError_ErrorCode UGCEditorError_ErrorCode_ErrorCode_MAX = UGCEditorError_ErrorCode_ErrorCode_Hud_ControlExceedLimit;
constexpr int UGCEditorError_ErrorCode_ErrorCode_ARRAYSIZE = UGCEditorError_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCEditorError_ErrorCode_descriptor();
template<typename T>
inline const std::string& UGCEditorError_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UGCEditorError_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UGCEditorError_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UGCEditorError_ErrorCode_descriptor(), enum_t_value);
}
inline bool UGCEditorError_ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UGCEditorError_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UGCEditorError_ErrorCode>(
    UGCEditorError_ErrorCode_descriptor(), name, value);
}
enum UGCEditorError_ErrorSeverity : int {
  UGCEditorError_ErrorSeverity_ErrorSeverity_None = 0,
  UGCEditorError_ErrorSeverity_ErrorSeverity_Panic = 1,
  UGCEditorError_ErrorSeverity_ErrorSeverity_Error = 2,
  UGCEditorError_ErrorSeverity_ErrorSeverity_Warning = 3,
  UGCEditorError_ErrorSeverity_UGCEditorError_ErrorSeverity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UGCEditorError_ErrorSeverity_UGCEditorError_ErrorSeverity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UGCEditorError_ErrorSeverity_IsValid(int value);
constexpr UGCEditorError_ErrorSeverity UGCEditorError_ErrorSeverity_ErrorSeverity_MIN = UGCEditorError_ErrorSeverity_ErrorSeverity_None;
constexpr UGCEditorError_ErrorSeverity UGCEditorError_ErrorSeverity_ErrorSeverity_MAX = UGCEditorError_ErrorSeverity_ErrorSeverity_Warning;
constexpr int UGCEditorError_ErrorSeverity_ErrorSeverity_ARRAYSIZE = UGCEditorError_ErrorSeverity_ErrorSeverity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCEditorError_ErrorSeverity_descriptor();
template<typename T>
inline const std::string& UGCEditorError_ErrorSeverity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UGCEditorError_ErrorSeverity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UGCEditorError_ErrorSeverity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UGCEditorError_ErrorSeverity_descriptor(), enum_t_value);
}
inline bool UGCEditorError_ErrorSeverity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UGCEditorError_ErrorSeverity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UGCEditorError_ErrorSeverity>(
    UGCEditorError_ErrorSeverity_descriptor(), name, value);
}
enum UGCResourceData_UGCResourceDataVersion : int {
  UGCResourceData_UGCResourceDataVersion_UGCResourceMetaDataVersion_Unknown = 0,
  UGCResourceData_UGCResourceDataVersion_UGCResourceMetaDataVersion_V1 = 1,
  UGCResourceData_UGCResourceDataVersion_UGCResourceData_UGCResourceDataVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UGCResourceData_UGCResourceDataVersion_UGCResourceData_UGCResourceDataVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UGCResourceData_UGCResourceDataVersion_IsValid(int value);
constexpr UGCResourceData_UGCResourceDataVersion UGCResourceData_UGCResourceDataVersion_UGCResourceDataVersion_MIN = UGCResourceData_UGCResourceDataVersion_UGCResourceMetaDataVersion_Unknown;
constexpr UGCResourceData_UGCResourceDataVersion UGCResourceData_UGCResourceDataVersion_UGCResourceDataVersion_MAX = UGCResourceData_UGCResourceDataVersion_UGCResourceMetaDataVersion_V1;
constexpr int UGCResourceData_UGCResourceDataVersion_UGCResourceDataVersion_ARRAYSIZE = UGCResourceData_UGCResourceDataVersion_UGCResourceDataVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCResourceData_UGCResourceDataVersion_descriptor();
template<typename T>
inline const std::string& UGCResourceData_UGCResourceDataVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UGCResourceData_UGCResourceDataVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UGCResourceData_UGCResourceDataVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UGCResourceData_UGCResourceDataVersion_descriptor(), enum_t_value);
}
inline bool UGCResourceData_UGCResourceDataVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UGCResourceData_UGCResourceDataVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UGCResourceData_UGCResourceDataVersion>(
    UGCResourceData_UGCResourceDataVersion_descriptor(), name, value);
}
enum EUGCModuleType : int {
  EUGCModuleType_Unknown = 0,
  EUGCModuleType_Workflow = 1,
  EUGCModuleType_ConditionBlackboard = 2,
  EUGCModuleType_RoundBlackboard = 3,
  EUGCModuleType_FactionRound = 4,
  EUGCModuleType_ScoreBlackboard = 5,
  EUGCModuleType_SpawnPosMgr = 6,
  EUGCModuleType_RankBlackboard = 7,
  EUGCModuleType_HudStateMgr = 8,
  EUGCModuleType_SafeZone = 9,
  EUGCModuleType_GenerateSpawnPosMgr = 10,
  EUGCModuleType_EntityRepDataBlackboard = 11,
  EUGCModuleType_CheckPoint = 13,
  EUGCModuleType_Team = 14,
  EUGCModuleType_MatchResult = 15,
  EUGCModuleType_HudPrefabMgr = 16,
  EUGCModuleType_StatisticalReport = 17,
  EUGCModuleType_PropertyFormulaMgr = 18,
  EUGCModuleType_ShopMgr = 19,
  EUGCModuleType_WalletModule = 20,
  EUGCModuleType_LevelObjectMgr = 21,
  EUGCModuleType_MorphMgr = 22,
  EUGCModuleType_ArchTypeMgr = 23,
  EUGCModuleType_ChatChannelMgr = 24,
  EUGCModuleType_Faction = 25,
  EUGCModuleType_Hostility = 26,
  EUGCModuleType_KDA = 27,
  EUGCModuleType_Transform = 28,
  EUGCModuleType_Playable = 29,
  EUGCModuleTyppe_Database = 30,
  EUGCModuleTyppe_InternalHudMgr = 31,
  EUGCModuleType_Dyeing = 32,
  EUGCModuleType_Physics = 33,
  EUGCModuleType_MiniMap = 34,
  EUGCModuleType_Animation = 35,
  EUGCModuleType_BehaviourTree = 36,
  EUGCModuleType_PathFinding = 37,
  EUGCModuleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCModuleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCModuleType_IsValid(int value);
constexpr EUGCModuleType EUGCModuleType_MIN = EUGCModuleType_Unknown;
constexpr EUGCModuleType EUGCModuleType_MAX = EUGCModuleType_PathFinding;
constexpr int EUGCModuleType_ARRAYSIZE = EUGCModuleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCModuleType_descriptor();
template<typename T>
inline const std::string& EUGCModuleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCModuleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCModuleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCModuleType_descriptor(), enum_t_value);
}
inline bool EUGCModuleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCModuleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCModuleType>(
    EUGCModuleType_descriptor(), name, value);
}
enum EUGCDamageType : int {
  EUGCDamageType_Unknown = 0,
  EUGCDamageType_Melee = 1,
  EUGCDamageType_Gun = 2,
  EUGCDamageType_Grenade = 3,
  EUGCDamageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCDamageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCDamageType_IsValid(int value);
constexpr EUGCDamageType EUGCDamageType_MIN = EUGCDamageType_Unknown;
constexpr EUGCDamageType EUGCDamageType_MAX = EUGCDamageType_Grenade;
constexpr int EUGCDamageType_ARRAYSIZE = EUGCDamageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCDamageType_descriptor();
template<typename T>
inline const std::string& EUGCDamageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCDamageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCDamageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCDamageType_descriptor(), enum_t_value);
}
inline bool EUGCDamageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCDamageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCDamageType>(
    EUGCDamageType_descriptor(), name, value);
}
enum EUGCScoreType : int {
  EUGCScoreType_Unknown = 0,
  EUGCScoreType_Kill_Count = 1,
  EUGCScoreType_Damage_Amount = 2,
  EUGCScoreType_Assist_Count = 3,
  EUGCScoreType_Finish_Order = 4,
  EUGCScoreType_Finish_TimeScore = 5,
  EUGCScoreType_Finish_Count = 6,
  EUGCScoreType_Checkpoint_Amount = 7,
  EUGCScoreType_RankScore = 8,
  EUGCScoreType_Survival_TimeScore = 9,
  EUGCScoreType_MainScore = 10,
  EUGCScoreType_Zombie_Kill_Count = 11,
  EUGCScoreType_Zombie_Assist_Count = 12,
  EUGCScoreType_Zombie_Damage_Amount = 13,
  EUGCScoreType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCScoreType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCScoreType_IsValid(int value);
constexpr EUGCScoreType EUGCScoreType_MIN = EUGCScoreType_Unknown;
constexpr EUGCScoreType EUGCScoreType_MAX = EUGCScoreType_Zombie_Damage_Amount;
constexpr int EUGCScoreType_ARRAYSIZE = EUGCScoreType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCScoreType_descriptor();
template<typename T>
inline const std::string& EUGCScoreType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCScoreType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCScoreType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCScoreType_descriptor(), enum_t_value);
}
inline bool EUGCScoreType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCScoreType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCScoreType>(
    EUGCScoreType_descriptor(), name, value);
}
enum EUGCPlayerStateType : int {
  EUGCPlayerStateType_Unknown = 0,
  EUGCPlayerStateType_Alive = 1,
  EUGCPlayerStateType_KnockDown = 2,
  EUGCPlayerStateType_Dead = 3,
  EUGCPlayerStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCPlayerStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCPlayerStateType_IsValid(int value);
constexpr EUGCPlayerStateType EUGCPlayerStateType_MIN = EUGCPlayerStateType_Unknown;
constexpr EUGCPlayerStateType EUGCPlayerStateType_MAX = EUGCPlayerStateType_Dead;
constexpr int EUGCPlayerStateType_ARRAYSIZE = EUGCPlayerStateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPlayerStateType_descriptor();
template<typename T>
inline const std::string& EUGCPlayerStateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCPlayerStateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCPlayerStateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCPlayerStateType_descriptor(), enum_t_value);
}
inline bool EUGCPlayerStateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCPlayerStateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCPlayerStateType>(
    EUGCPlayerStateType_descriptor(), name, value);
}
enum EUGCArithmeticType : int {
  EUGCArithmeticType_Unknown = 0,
  EUGCArithmeticType_Add = 1,
  EUGCArithmeticType_Subtract = 2,
  EUGCArithmeticType_Multiply = 3,
  EUGCArithmeticType_Divide = 4,
  EUGCArithmeticType_Remainder = 5,
  EUGCArithmeticType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCArithmeticType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCArithmeticType_IsValid(int value);
constexpr EUGCArithmeticType EUGCArithmeticType_MIN = EUGCArithmeticType_Unknown;
constexpr EUGCArithmeticType EUGCArithmeticType_MAX = EUGCArithmeticType_Remainder;
constexpr int EUGCArithmeticType_ARRAYSIZE = EUGCArithmeticType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCArithmeticType_descriptor();
template<typename T>
inline const std::string& EUGCArithmeticType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCArithmeticType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCArithmeticType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCArithmeticType_descriptor(), enum_t_value);
}
inline bool EUGCArithmeticType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCArithmeticType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCArithmeticType>(
    EUGCArithmeticType_descriptor(), name, value);
}
enum EUGCCompareType : int {
  EUGCCompareType_Unknown = 0,
  EUGCCompareType_Less = 1,
  EUGCCompareType_LessEqual = 2,
  EUGCCompareType_GreaterEqual = 3,
  EUGCCompareType_Greater = 4,
  EUGCCompareType_Equal = 5,
  EUGCCompareType_NotEqual = 6,
  EUGCCompareType_And = 7,
  EUGCCompareType_Or = 8,
  EUGCCompareType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCCompareType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCCompareType_IsValid(int value);
constexpr EUGCCompareType EUGCCompareType_MIN = EUGCCompareType_Unknown;
constexpr EUGCCompareType EUGCCompareType_MAX = EUGCCompareType_Or;
constexpr int EUGCCompareType_ARRAYSIZE = EUGCCompareType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCCompareType_descriptor();
template<typename T>
inline const std::string& EUGCCompareType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCCompareType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCCompareType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCCompareType_descriptor(), enum_t_value);
}
inline bool EUGCCompareType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCCompareType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCCompareType>(
    EUGCCompareType_descriptor(), name, value);
}
enum EUGCValueType : int {
  EUGCValueType_Unknown = 0,
  EUGCValueType_List = 1,
  EUGCValueType_Bool = 2,
  EUGCValueType_Int = 3,
  EUGCValueType_Float = 4,
  EUGCValueType_String = 5,
  EUGCValueType_Vector3 = 6,
  EUGCValueType_Interface = 7,
  EUGCValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCValueType_IsValid(int value);
constexpr EUGCValueType EUGCValueType_MIN = EUGCValueType_Unknown;
constexpr EUGCValueType EUGCValueType_MAX = EUGCValueType_Interface;
constexpr int EUGCValueType_ARRAYSIZE = EUGCValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCValueType_descriptor();
template<typename T>
inline const std::string& EUGCValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCValueType_descriptor(), enum_t_value);
}
inline bool EUGCValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCValueType>(
    EUGCValueType_descriptor(), name, value);
}
enum EMetaConfigParamType : int {
  EMetaConfigParamType_Unknown = 0,
  EMetaConfigParamType_List = 1,
  EMetaConfigParamType_Bool = 2,
  EMetaConfigParamType_Int = 3,
  EMetaConfigParamType_Float = 4,
  EMetaConfigParamType_String = 5,
  EMetaConfigParamType_Vector3 = 6,
  EMetaConfigParamType_Interface = 7,
  EMetaConfigParamType_BoolList = 50,
  EMetaConfigParamType_IntList = 51,
  EMetaConfigParamType_FloatList = 52,
  EMetaConfigParamType_StringList = 53,
  EMetaConfigParamType_Vector3List = 54,
  EMetaConfigParamType_Condition = 55,
  EMetaConfigParamType_ConditionArray = 56,
  EMetaConfigParamType_EntityType = 57,
  EMetaConfigParamType_Entity = 58,
  EMetaConfigParamType_EntityList = 59,
  EMetaConfigParamType_Player = 60,
  EMetaConfigParamType_PlayerList = 61,
  EMetaConfigParamType_Team = 62,
  EMetaConfigParamType_TeamList = 63,
  EMetaConfigParamType_LevelObj = 64,
  EMetaConfigParamType_LevelObjList = 65,
  EMetaConfigParamType_DirectedPoint = 66,
  EMetaConfigParamType_InternalHudType = 67,
  EMetaConfigParamType_Hud = 68,
  EMetaConfigParamType_HudList = 69,
  EMetaConfigParamType_LevelObjType = 70,
  EMetaConfigParamType_DamageType = 71,
  EMetaConfigParamType_Phase = 72,
  EMetaConfigParamType_ScoreType = 73,
  EMetaConfigParamType_FloatOrInt = 74,
  EMetaConfigParamType_EffectType = 75,
  EMetaConfigParamType_IconType = 76,
  EMetaConfigParamType_PlayerStateType = 77,
  EMetaConfigParamType_AudioType = 78,
  EMetaConfigParamType_SortType = 79,
  EMetaConfigParamType_ItemGoodsIDType = 80,
  EMetaConfigParamType_AIType = 81,
  EMetaConfigParamType_InventoryType = 82,
  EMetaConfigParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EMetaConfigParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EMetaConfigParamType_IsValid(int value);
constexpr EMetaConfigParamType EMetaConfigParamType_MIN = EMetaConfigParamType_Unknown;
constexpr EMetaConfigParamType EMetaConfigParamType_MAX = EMetaConfigParamType_InventoryType;
constexpr int EMetaConfigParamType_ARRAYSIZE = EMetaConfigParamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMetaConfigParamType_descriptor();
template<typename T>
inline const std::string& EMetaConfigParamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMetaConfigParamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMetaConfigParamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMetaConfigParamType_descriptor(), enum_t_value);
}
inline bool EMetaConfigParamType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMetaConfigParamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMetaConfigParamType>(
    EMetaConfigParamType_descriptor(), name, value);
}
enum EUGCLogicEntityType : int {
  EUGCLogicEntityType_Unknown = 0,
  EUGCLogicEntityType_Global = 1,
  EUGCLogicEntityType_Player = 2,
  EUGCLogicEntityType_Team = 3,
  EUGCLogicEntityType_Round = 1000,
  EUGCLogicEntityType_Phase = 1001,
  EUGCLogicEntityType_CountdownHud = 1010,
  EUGCLogicEntityType_OpeningBannerHud = 1011,
  EUGCLogicEntityType_TwoTeamRoundStartBannerHud = 1012,
  EUGCLogicEntityType_NormalRoundStartBannerHud = 1013,
  EUGCLogicEntityType_TeamRoundScoreBannerHud = 1014,
  EUGCLogicEntityType_CheckPointMgrHud = 1015,
  EUGCLogicEntityType_RoundResultShowTimeHud = 1016,
  EUGCLogicEntityType_TwoTeamFactionHud = 1017,
  EUGCLogicEntityType_TwoTeamRoundScoreBannerHud = 1018,
  EUGCLogicEntityType_ResultBannerHud = 1019,
  EUGCLogicEntityType_RoundNumHud = 1020,
  EUGCLogicEntityType_PhaseCountDownHud = 1021,
  EUGCLogicEntityType_MatchInfoSubTitleHud = 1022,
  EUGCLogicEntityType_TwoTeamMatchInfoHud = 1023,
  EUGCLogicEntityType_TeamMatchInfoHud = 1024,
  EUGCLogicEntityType_TwoTeamLeaderboardHud = 1025,
  EUGCLogicEntityType_MoreTeamLeaderboardHud = 1026,
  EUGCLogicEntityType_FactionInfoHud = 1028,
  EUGCLogicEntityType_IconNotificationHud = 1029,
  EUGCLogicEntityType_TwoTeamMatchInfoSimpleHud = 1030,
  EUGCLogicEntityType_CountdownReminderHud = 1031,
  EUGCLogicEntityType_TweenTipsHud = 1032,
  EUGCLogicEntityType_RoundTransitionHud = 1033,
  EUGCLogicEntityType_SingleLeaderboardHud = 1034,
  EUGCLogicEntityType_LeaderboardButtonHud = 1035,
  EUGCLogicEntityType_ZombieLevelHud = 1036,
  EUGCLogicEntityType_AddScoreVFXHud = 1037,
  EUGCLogicEntityType_ZombieVFXHud = 1038,
  EUGCLogicEntityType_TimeTweenTipsHud = 1039,
  EUGCLogicEntityType_ChooseCardHud = 1040,
  EUGCLogicEntityType_IdentityNotifyHud = 1041,
  EUGCLogicEntityType_FiveSecondCountDownHud = 1042,
  EUGCLogicEntityType_TitleBannerHud = 1043,
  EUGCLogicEntityType_CommonHudSwitchHud = 1044,
  EUGCLogicEntityType_SkillButtonHud = 1045,
  EUGCLogicEntityType_IconEntity = 2000,
  EUGCLogicEntityType_TextEntity = 2001,
  EUGCLogicEntityType_EffectEntity = 2002,
  EUGCLogicEntityType_CustomHud = 2003,
  EUGCLogicEntityType_HudEmptyWidget = 2004,
  EUGCLogicEntityType_HudImageWidget = 2005,
  EUGCLogicEntityType_HudLabelWidget = 2006,
  EUGCLogicEntityType_HudButtonWidget = 2007,
  EUGCLogicEntityType_HudInputWidget = 2008,
  EUGCLogicEntityType_SoundEntity = 2009,
  EUGCLogicEntityType_Entity = 2300,
  EUGCLogicEntityType_CombatableEntity = 2301,
  EUGCLogicEntityType_Hud = 2302,
  EUGCLogicEntityType_LevelObject = 2303,
  EUGCLogicEntityType_HudWidget = 2304,
  EUGCLogicEntityType_SpawnPos = 2500,
  EUGCLogicEntityType_CustomizeTrigger = 2501,
  EUGCLogicEntityType_KillOrGodZoneTrigger = 2502,
  EUGCLogicEntityType_CheckPointTrigger = 2503,
  EUGCLogicEntityType_EndPointTrigger = 2504,
  EUGCLogicEntityType_DynamicCollider = 2505,
  EUGCLogicEntityType_SupplyBoxTrigger = 2506,
  EUGCLogicEntityType_UGCMinisentry = 2507,
  EUGCLogicEntityType_BotGenerator = 2508,
  EUGCLogicEntityType_EntityGenerator = 2509,
  EUGCLogicEntityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCLogicEntityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCLogicEntityType_IsValid(int value);
constexpr EUGCLogicEntityType EUGCLogicEntityType_MIN = EUGCLogicEntityType_Unknown;
constexpr EUGCLogicEntityType EUGCLogicEntityType_MAX = EUGCLogicEntityType_EntityGenerator;
constexpr int EUGCLogicEntityType_ARRAYSIZE = EUGCLogicEntityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCLogicEntityType_descriptor();
template<typename T>
inline const std::string& EUGCLogicEntityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCLogicEntityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCLogicEntityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCLogicEntityType_descriptor(), enum_t_value);
}
inline bool EUGCLogicEntityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCLogicEntityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCLogicEntityType>(
    EUGCLogicEntityType_descriptor(), name, value);
}
enum EUGCParamSettingMethodType : int {
  EUGCParamSettingMethodType_Unknown = 0,
  EUGCParamSettingMethodType_Override = 1,
  EUGCParamSettingMethodType_Add = 2,
  EUGCParamSettingMethodType_Subtract = 3,
  EUGCParamSettingMethodType_Multiply = 4,
  EUGCParamSettingMethodType_Divide = 5,
  EUGCParamSettingMethodType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCParamSettingMethodType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCParamSettingMethodType_IsValid(int value);
constexpr EUGCParamSettingMethodType EUGCParamSettingMethodType_MIN = EUGCParamSettingMethodType_Unknown;
constexpr EUGCParamSettingMethodType EUGCParamSettingMethodType_MAX = EUGCParamSettingMethodType_Divide;
constexpr int EUGCParamSettingMethodType_ARRAYSIZE = EUGCParamSettingMethodType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCParamSettingMethodType_descriptor();
template<typename T>
inline const std::string& EUGCParamSettingMethodType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCParamSettingMethodType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCParamSettingMethodType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCParamSettingMethodType_descriptor(), enum_t_value);
}
inline bool EUGCParamSettingMethodType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCParamSettingMethodType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCParamSettingMethodType>(
    EUGCParamSettingMethodType_descriptor(), name, value);
}
enum UGCSpawnPointSpawnType : int {
  UGCSpawnPointSpawnType_Default = 0,
  UGCSpawnPointSpawnType_Random = 1,
  UGCSpawnPointSpawnType_UserAssign = 2,
  UGCSpawnPointSpawnType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UGCSpawnPointSpawnType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UGCSpawnPointSpawnType_IsValid(int value);
constexpr UGCSpawnPointSpawnType UGCSpawnPointSpawnType_MIN = UGCSpawnPointSpawnType_Default;
constexpr UGCSpawnPointSpawnType UGCSpawnPointSpawnType_MAX = UGCSpawnPointSpawnType_UserAssign;
constexpr int UGCSpawnPointSpawnType_ARRAYSIZE = UGCSpawnPointSpawnType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCSpawnPointSpawnType_descriptor();
template<typename T>
inline const std::string& UGCSpawnPointSpawnType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UGCSpawnPointSpawnType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UGCSpawnPointSpawnType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UGCSpawnPointSpawnType_descriptor(), enum_t_value);
}
inline bool UGCSpawnPointSpawnType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UGCSpawnPointSpawnType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UGCSpawnPointSpawnType>(
    UGCSpawnPointSpawnType_descriptor(), name, value);
}
enum ESort : int {
  ESort_AscZ = 0,
  ESort_Desc = 1,
  ESort_Asc = 2,
  ESort_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ESort_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ESort_IsValid(int value);
constexpr ESort ESort_MIN = ESort_AscZ;
constexpr ESort ESort_MAX = ESort_Asc;
constexpr int ESort_ARRAYSIZE = ESort_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESort_descriptor();
template<typename T>
inline const std::string& ESort_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESort>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESort_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESort_descriptor(), enum_t_value);
}
inline bool ESort_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESort* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESort>(
    ESort_descriptor(), name, value);
}
enum EUGCWorkflowSequenceItemType : int {
  EUGCWorkflowSequenceItemType_Phase = 0,
  EUGCWorkflowSequenceItemType_Round = 1,
  EUGCWorkflowSequenceItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCWorkflowSequenceItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCWorkflowSequenceItemType_IsValid(int value);
constexpr EUGCWorkflowSequenceItemType EUGCWorkflowSequenceItemType_MIN = EUGCWorkflowSequenceItemType_Phase;
constexpr EUGCWorkflowSequenceItemType EUGCWorkflowSequenceItemType_MAX = EUGCWorkflowSequenceItemType_Round;
constexpr int EUGCWorkflowSequenceItemType_ARRAYSIZE = EUGCWorkflowSequenceItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCWorkflowSequenceItemType_descriptor();
template<typename T>
inline const std::string& EUGCWorkflowSequenceItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCWorkflowSequenceItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCWorkflowSequenceItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCWorkflowSequenceItemType_descriptor(), enum_t_value);
}
inline bool EUGCWorkflowSequenceItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCWorkflowSequenceItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCWorkflowSequenceItemType>(
    EUGCWorkflowSequenceItemType_descriptor(), name, value);
}
enum EUGCKeyword : int {
  Keyword_Unknown = 0,
  Keyword_Enum = 1,
  Keyword_Class = 2,
  Keyword_TypeAlias = 4,
  Keyword_Abstract = 8,
  Keyword_Generics = 16,
  EUGCKeyword_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCKeyword_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCKeyword_IsValid(int value);
constexpr EUGCKeyword EUGCKeyword_MIN = Keyword_Unknown;
constexpr EUGCKeyword EUGCKeyword_MAX = Keyword_Generics;
constexpr int EUGCKeyword_ARRAYSIZE = EUGCKeyword_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCKeyword_descriptor();
template<typename T>
inline const std::string& EUGCKeyword_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCKeyword>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCKeyword_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCKeyword_descriptor(), enum_t_value);
}
inline bool EUGCKeyword_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCKeyword* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCKeyword>(
    EUGCKeyword_descriptor(), name, value);
}
enum EUGCAttribute : int {
  UGCAttribute_Unknown = 0,
  UGCAttribute_BridgingComponent = 1,
  UGCAttribute_Max = 2,
  EUGCAttribute_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCAttribute_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCAttribute_IsValid(int value);
constexpr EUGCAttribute EUGCAttribute_MIN = UGCAttribute_Unknown;
constexpr EUGCAttribute EUGCAttribute_MAX = UGCAttribute_Max;
constexpr int EUGCAttribute_ARRAYSIZE = EUGCAttribute_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCAttribute_descriptor();
template<typename T>
inline const std::string& EUGCAttribute_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCAttribute>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCAttribute_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCAttribute_descriptor(), enum_t_value);
}
inline bool EUGCAttribute_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCAttribute* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCAttribute>(
    EUGCAttribute_descriptor(), name, value);
}
enum EUGCLocLanguage : int {
  UGCLANGUAGE_Unknown = 0,
  UGCLANGUAGE_ENGLISH = 1,
  UGCLANGUAGE_SIMPLIFIED_CHINESE = 2,
  UGCLANGUAGE_TRADITIONAL_CHINESE = 3,
  UGCLANGUAGE_THAI = 4,
  UGCLANGUAGE_VIETNAMESE = 5,
  UGCLANGUAGE_INDONESIA = 6,
  UGCLANGUAGE_BRAZILIAN_PORTUGUESE = 7,
  UGCLANGUAGE_SPANISH = 8,
  UGCLANGUAGE_RUSSIAN = 9,
  UGCLANGUAGE_KOREAN = 10,
  UGCLANGUAGE_FRENCH = 11,
  UGCLANGUAGE_GERMAN = 12,
  UGCLANGUAGE_TURKISH = 13,
  UGCLANGUAGE_HINDI = 14,
  UGCLANGUAGE_JAPANESE = 15,
  UGCLANGUAGE_ROMANIAN = 16,
  UGCLANGUAGE_ARABIC = 17,
  UGCLANGUAGE_BURMESE = 18,
  UGCLANGUAGE_URDU = 19,
  UGCLANGUAGE_BENGALI = 20,
  EUGCLocLanguage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCLocLanguage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCLocLanguage_IsValid(int value);
constexpr EUGCLocLanguage EUGCLocLanguage_MIN = UGCLANGUAGE_Unknown;
constexpr EUGCLocLanguage EUGCLocLanguage_MAX = UGCLANGUAGE_BENGALI;
constexpr int EUGCLocLanguage_ARRAYSIZE = EUGCLocLanguage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCLocLanguage_descriptor();
template<typename T>
inline const std::string& EUGCLocLanguage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCLocLanguage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCLocLanguage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCLocLanguage_descriptor(), enum_t_value);
}
inline bool EUGCLocLanguage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCLocLanguage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCLocLanguage>(
    EUGCLocLanguage_descriptor(), name, value);
}
enum EUGCVersionCode : int {
  EUGCVersionCode_Unknown = 0,
  EUGCVersionCode_CompatibleVersion = 6,
  EUGCVersionCode_PublicVersion = 104,
  EUGCVersionCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCVersionCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCVersionCode_IsValid(int value);
constexpr EUGCVersionCode EUGCVersionCode_MIN = EUGCVersionCode_Unknown;
constexpr EUGCVersionCode EUGCVersionCode_MAX = EUGCVersionCode_PublicVersion;
constexpr int EUGCVersionCode_ARRAYSIZE = EUGCVersionCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCVersionCode_descriptor();
template<typename T>
inline const std::string& EUGCVersionCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCVersionCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCVersionCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCVersionCode_descriptor(), enum_t_value);
}
inline bool EUGCVersionCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCVersionCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCVersionCode>(
    EUGCVersionCode_descriptor(), name, value);
}
enum EUGCGraphKeyword : int {
  GraphKeyword_Unknown = 0,
  GraphKeyword_Static = 1,
  GraphKeyword_Partial = 2,
  EUGCGraphKeyword_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCGraphKeyword_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCGraphKeyword_IsValid(int value);
constexpr EUGCGraphKeyword EUGCGraphKeyword_MIN = GraphKeyword_Unknown;
constexpr EUGCGraphKeyword EUGCGraphKeyword_MAX = GraphKeyword_Partial;
constexpr int EUGCGraphKeyword_ARRAYSIZE = EUGCGraphKeyword_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCGraphKeyword_descriptor();
template<typename T>
inline const std::string& EUGCGraphKeyword_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCGraphKeyword>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCGraphKeyword_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCGraphKeyword_descriptor(), enum_t_value);
}
inline bool EUGCGraphKeyword_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCGraphKeyword* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCGraphKeyword>(
    EUGCGraphKeyword_descriptor(), name, value);
}
enum UGCMiniSentryRange : int {
  UGCMiniSentryRange_Near = 0,
  UGCMiniSentryRange_Middle = 1,
  UGCMiniSentryRange_Far = 2,
  UGCMiniSentryRange_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UGCMiniSentryRange_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UGCMiniSentryRange_IsValid(int value);
constexpr UGCMiniSentryRange UGCMiniSentryRange_MIN = UGCMiniSentryRange_Near;
constexpr UGCMiniSentryRange UGCMiniSentryRange_MAX = UGCMiniSentryRange_Far;
constexpr int UGCMiniSentryRange_ARRAYSIZE = UGCMiniSentryRange_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCMiniSentryRange_descriptor();
template<typename T>
inline const std::string& UGCMiniSentryRange_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UGCMiniSentryRange>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UGCMiniSentryRange_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UGCMiniSentryRange_descriptor(), enum_t_value);
}
inline bool UGCMiniSentryRange_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UGCMiniSentryRange* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UGCMiniSentryRange>(
    UGCMiniSentryRange_descriptor(), name, value);
}
enum EUGCProjectVersion : int {
  EUGCProjectVersion_Unknown = 0,
  EUGCProjectVersion_OB35_And_Earlier = 1,
  EUGCProjectVersion_OB36_To_OB37 = 2,
  EUGCProjectVersion_OB38_To_OB39 = 3,
  EUGCProjectVersion_Latest = 4,
  EUGCProjectVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCProjectVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCProjectVersion_IsValid(int value);
constexpr EUGCProjectVersion EUGCProjectVersion_MIN = EUGCProjectVersion_Unknown;
constexpr EUGCProjectVersion EUGCProjectVersion_MAX = EUGCProjectVersion_Latest;
constexpr int EUGCProjectVersion_ARRAYSIZE = EUGCProjectVersion_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCProjectVersion_descriptor();
template<typename T>
inline const std::string& EUGCProjectVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCProjectVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCProjectVersion_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCProjectVersion_descriptor(), enum_t_value);
}
inline bool EUGCProjectVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCProjectVersion* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCProjectVersion>(
    EUGCProjectVersion_descriptor(), name, value);
}
enum RoomCustomParamsDataType : int {
  ERoomCustomParamsDataType_None = 0,
  ERoomCustomParamsDataType_Bool = 1,
  ERoomCustomParamsDataType_SliderInt = 2,
  ERoomCustomParamsDataType_SliderFloat = 3,
  ERoomCustomParamsDataType_SingleChooseInt = 4,
  ERoomCustomParamsDataType_MultiChooseInt = 5,
  ERoomCustomParamsDataType_SingleChooseFloat = 6,
  RoomCustomParamsDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoomCustomParamsDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoomCustomParamsDataType_IsValid(int value);
constexpr RoomCustomParamsDataType RoomCustomParamsDataType_MIN = ERoomCustomParamsDataType_None;
constexpr RoomCustomParamsDataType RoomCustomParamsDataType_MAX = ERoomCustomParamsDataType_SingleChooseFloat;
constexpr int RoomCustomParamsDataType_ARRAYSIZE = RoomCustomParamsDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomCustomParamsDataType_descriptor();
template<typename T>
inline const std::string& RoomCustomParamsDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomCustomParamsDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomCustomParamsDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomCustomParamsDataType_descriptor(), enum_t_value);
}
inline bool RoomCustomParamsDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomCustomParamsDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomCustomParamsDataType>(
    RoomCustomParamsDataType_descriptor(), name, value);
}
// ===================================================================

class UGCDebugSettingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCDebugSettingData) */ {
 public:
  inline UGCDebugSettingData() : UGCDebugSettingData(nullptr) {}
  ~UGCDebugSettingData() override;
  explicit PROTOBUF_CONSTEXPR UGCDebugSettingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCDebugSettingData(const UGCDebugSettingData& from);
  UGCDebugSettingData(UGCDebugSettingData&& from) noexcept
    : UGCDebugSettingData() {
    *this = ::std::move(from);
  }

  inline UGCDebugSettingData& operator=(const UGCDebugSettingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCDebugSettingData& operator=(UGCDebugSettingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCDebugSettingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCDebugSettingData* internal_default_instance() {
    return reinterpret_cast<const UGCDebugSettingData*>(
               &_UGCDebugSettingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UGCDebugSettingData& a, UGCDebugSettingData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCDebugSettingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCDebugSettingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCDebugSettingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCDebugSettingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCDebugSettingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCDebugSettingData& from) {
    UGCDebugSettingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCDebugSettingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCDebugSettingData";
  }
  protected:
  explicit UGCDebugSettingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotCountByTeamFieldNumber = 6,
    kBreakpointsFieldNumber = 8,
    kTokensValidIdFieldNumber = 11,
    kNickNameFieldNumber = 7,
    kGotoPositionFieldNumber = 5,
    kAccountIDFieldNumber = 1,
    kGameModeFieldNumber = 2,
    kMapIDFieldNumber = 3,
    kGotoPositionAfterStartFieldNumber = 4,
    kIsStrictModeFieldNumber = 10,
    kGroupModeFieldNumber = 9,
  };
  // repeated uint32 BotCountByTeam = 6;
  int botcountbyteam_size() const;
  private:
  int _internal_botcountbyteam_size() const;
  public:
  void clear_botcountbyteam();
  private:
  uint32_t _internal_botcountbyteam(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_botcountbyteam() const;
  void _internal_add_botcountbyteam(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_botcountbyteam();
  public:
  uint32_t botcountbyteam(int index) const;
  void set_botcountbyteam(int index, uint32_t value);
  void add_botcountbyteam(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      botcountbyteam() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_botcountbyteam();

  // repeated string Breakpoints = 8;
  int breakpoints_size() const;
  private:
  int _internal_breakpoints_size() const;
  public:
  void clear_breakpoints();
  const std::string& breakpoints(int index) const;
  std::string* mutable_breakpoints(int index);
  void set_breakpoints(int index, const std::string& value);
  void set_breakpoints(int index, std::string&& value);
  void set_breakpoints(int index, const char* value);
  void set_breakpoints(int index, const char* value, size_t size);
  std::string* add_breakpoints();
  void add_breakpoints(const std::string& value);
  void add_breakpoints(std::string&& value);
  void add_breakpoints(const char* value);
  void add_breakpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& breakpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_breakpoints();
  private:
  const std::string& _internal_breakpoints(int index) const;
  std::string* _internal_add_breakpoints();
  public:

  // repeated uint32 TokensValidId = 11;
  int tokensvalidid_size() const;
  private:
  int _internal_tokensvalidid_size() const;
  public:
  void clear_tokensvalidid();
  private:
  uint32_t _internal_tokensvalidid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tokensvalidid() const;
  void _internal_add_tokensvalidid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tokensvalidid();
  public:
  uint32_t tokensvalidid(int index) const;
  void set_tokensvalidid(int index, uint32_t value);
  void add_tokensvalidid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tokensvalidid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tokensvalidid();

  // string NickName = 7;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // .message.ProtoBuffVector3 GotoPosition = 5;
  bool has_gotoposition() const;
  private:
  bool _internal_has_gotoposition() const;
  public:
  void clear_gotoposition();
  const ::message::ProtoBuffVector3& gotoposition() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_gotoposition();
  ::message::ProtoBuffVector3* mutable_gotoposition();
  void set_allocated_gotoposition(::message::ProtoBuffVector3* gotoposition);
  private:
  const ::message::ProtoBuffVector3& _internal_gotoposition() const;
  ::message::ProtoBuffVector3* _internal_mutable_gotoposition();
  public:
  void unsafe_arena_set_allocated_gotoposition(
      ::message::ProtoBuffVector3* gotoposition);
  ::message::ProtoBuffVector3* unsafe_arena_release_gotoposition();

  // uint64 AccountID = 1;
  void clear_accountid();
  uint64_t accountid() const;
  void set_accountid(uint64_t value);
  private:
  uint64_t _internal_accountid() const;
  void _internal_set_accountid(uint64_t value);
  public:

  // uint32 GameMode = 2;
  void clear_gamemode();
  uint32_t gamemode() const;
  void set_gamemode(uint32_t value);
  private:
  uint32_t _internal_gamemode() const;
  void _internal_set_gamemode(uint32_t value);
  public:

  // uint32 MapID = 3;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // bool GotoPositionAfterStart = 4;
  void clear_gotopositionafterstart();
  bool gotopositionafterstart() const;
  void set_gotopositionafterstart(bool value);
  private:
  bool _internal_gotopositionafterstart() const;
  void _internal_set_gotopositionafterstart(bool value);
  public:

  // bool IsStrictMode = 10;
  void clear_isstrictmode();
  bool isstrictmode() const;
  void set_isstrictmode(bool value);
  private:
  bool _internal_isstrictmode() const;
  void _internal_set_isstrictmode(bool value);
  public:

  // uint32 GroupMode = 9;
  void clear_groupmode();
  uint32_t groupmode() const;
  void set_groupmode(uint32_t value);
  private:
  uint32_t _internal_groupmode() const;
  void _internal_set_groupmode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCDebugSettingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > botcountbyteam_;
    mutable std::atomic<int> _botcountbyteam_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> breakpoints_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tokensvalidid_;
    mutable std::atomic<int> _tokensvalidid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::message::ProtoBuffVector3* gotoposition_;
    uint64_t accountid_;
    uint32_t gamemode_;
    uint32_t mapid_;
    bool gotopositionafterstart_;
    bool isstrictmode_;
    uint32_t groupmode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCPhaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCPhaseData) */ {
 public:
  inline UGCPhaseData() : UGCPhaseData(nullptr) {}
  ~UGCPhaseData() override;
  explicit PROTOBUF_CONSTEXPR UGCPhaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCPhaseData(const UGCPhaseData& from);
  UGCPhaseData(UGCPhaseData&& from) noexcept
    : UGCPhaseData() {
    *this = ::std::move(from);
  }

  inline UGCPhaseData& operator=(const UGCPhaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCPhaseData& operator=(UGCPhaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCPhaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCPhaseData* internal_default_instance() {
    return reinterpret_cast<const UGCPhaseData*>(
               &_UGCPhaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UGCPhaseData& a, UGCPhaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCPhaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCPhaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCPhaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCPhaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCPhaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCPhaseData& from) {
    UGCPhaseData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCPhaseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCPhaseData";
  }
  protected:
  explicit UGCPhaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseIndexFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // uint32 PhaseIndex = 1;
  void clear_phaseindex();
  uint32_t phaseindex() const;
  void set_phaseindex(uint32_t value);
  private:
  uint32_t _internal_phaseindex() const;
  void _internal_set_phaseindex(uint32_t value);
  public:

  // int32 Duration = 2;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCPhaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t phaseindex_;
    int32_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCRoundData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCRoundData) */ {
 public:
  inline UGCRoundData() : UGCRoundData(nullptr) {}
  ~UGCRoundData() override;
  explicit PROTOBUF_CONSTEXPR UGCRoundData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCRoundData(const UGCRoundData& from);
  UGCRoundData(UGCRoundData&& from) noexcept
    : UGCRoundData() {
    *this = ::std::move(from);
  }

  inline UGCRoundData& operator=(const UGCRoundData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCRoundData& operator=(UGCRoundData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCRoundData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCRoundData* internal_default_instance() {
    return reinterpret_cast<const UGCRoundData*>(
               &_UGCRoundData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UGCRoundData& a, UGCRoundData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCRoundData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCRoundData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCRoundData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCRoundData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCRoundData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCRoundData& from) {
    UGCRoundData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCRoundData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCRoundData";
  }
  protected:
  explicit UGCRoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseDataFieldNumber = 3,
    kPhaseIndexFieldNumber = 1,
    kRoundNumMaxFieldNumber = 2,
  };
  // repeated .message.UGCPhaseData PhaseData = 3;
  int phasedata_size() const;
  private:
  int _internal_phasedata_size() const;
  public:
  void clear_phasedata();
  ::message::UGCPhaseData* mutable_phasedata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData >*
      mutable_phasedata();
  private:
  const ::message::UGCPhaseData& _internal_phasedata(int index) const;
  ::message::UGCPhaseData* _internal_add_phasedata();
  public:
  const ::message::UGCPhaseData& phasedata(int index) const;
  ::message::UGCPhaseData* add_phasedata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData >&
      phasedata() const;

  // uint32 PhaseIndex = 1;
  void clear_phaseindex();
  uint32_t phaseindex() const;
  void set_phaseindex(uint32_t value);
  private:
  uint32_t _internal_phaseindex() const;
  void _internal_set_phaseindex(uint32_t value);
  public:

  // int32 RoundNumMax = 2;
  void clear_roundnummax();
  int32_t roundnummax() const;
  void set_roundnummax(int32_t value);
  private:
  int32_t _internal_roundnummax() const;
  void _internal_set_roundnummax(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCRoundData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData > phasedata_;
    uint32_t phaseindex_;
    int32_t roundnummax_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCWorkflowSequenceItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCWorkflowSequenceItem) */ {
 public:
  inline UGCWorkflowSequenceItem() : UGCWorkflowSequenceItem(nullptr) {}
  ~UGCWorkflowSequenceItem() override;
  explicit PROTOBUF_CONSTEXPR UGCWorkflowSequenceItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCWorkflowSequenceItem(const UGCWorkflowSequenceItem& from);
  UGCWorkflowSequenceItem(UGCWorkflowSequenceItem&& from) noexcept
    : UGCWorkflowSequenceItem() {
    *this = ::std::move(from);
  }

  inline UGCWorkflowSequenceItem& operator=(const UGCWorkflowSequenceItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCWorkflowSequenceItem& operator=(UGCWorkflowSequenceItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCWorkflowSequenceItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCWorkflowSequenceItem* internal_default_instance() {
    return reinterpret_cast<const UGCWorkflowSequenceItem*>(
               &_UGCWorkflowSequenceItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UGCWorkflowSequenceItem& a, UGCWorkflowSequenceItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCWorkflowSequenceItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCWorkflowSequenceItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCWorkflowSequenceItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCWorkflowSequenceItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCWorkflowSequenceItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCWorkflowSequenceItem& from) {
    UGCWorkflowSequenceItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCWorkflowSequenceItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCWorkflowSequenceItem";
  }
  protected:
  explicit UGCWorkflowSequenceItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeFieldNumber = 1,
    kDataIndexFieldNumber = 2,
  };
  // .message.EUGCWorkflowSequenceItemType DataType = 1;
  void clear_datatype();
  ::message::EUGCWorkflowSequenceItemType datatype() const;
  void set_datatype(::message::EUGCWorkflowSequenceItemType value);
  private:
  ::message::EUGCWorkflowSequenceItemType _internal_datatype() const;
  void _internal_set_datatype(::message::EUGCWorkflowSequenceItemType value);
  public:

  // int32 DataIndex = 2;
  void clear_dataindex();
  int32_t dataindex() const;
  void set_dataindex(int32_t value);
  private:
  int32_t _internal_dataindex() const;
  void _internal_set_dataindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCWorkflowSequenceItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int datatype_;
    int32_t dataindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCWorkflowSequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCWorkflowSequence) */ {
 public:
  inline UGCWorkflowSequence() : UGCWorkflowSequence(nullptr) {}
  ~UGCWorkflowSequence() override;
  explicit PROTOBUF_CONSTEXPR UGCWorkflowSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCWorkflowSequence(const UGCWorkflowSequence& from);
  UGCWorkflowSequence(UGCWorkflowSequence&& from) noexcept
    : UGCWorkflowSequence() {
    *this = ::std::move(from);
  }

  inline UGCWorkflowSequence& operator=(const UGCWorkflowSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCWorkflowSequence& operator=(UGCWorkflowSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCWorkflowSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCWorkflowSequence* internal_default_instance() {
    return reinterpret_cast<const UGCWorkflowSequence*>(
               &_UGCWorkflowSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UGCWorkflowSequence& a, UGCWorkflowSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCWorkflowSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCWorkflowSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCWorkflowSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCWorkflowSequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCWorkflowSequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCWorkflowSequence& from) {
    UGCWorkflowSequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCWorkflowSequence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCWorkflowSequence";
  }
  protected:
  explicit UGCWorkflowSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .message.UGCWorkflowSequenceItem Items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::message::UGCWorkflowSequenceItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCWorkflowSequenceItem >*
      mutable_items();
  private:
  const ::message::UGCWorkflowSequenceItem& _internal_items(int index) const;
  ::message::UGCWorkflowSequenceItem* _internal_add_items();
  public:
  const ::message::UGCWorkflowSequenceItem& items(int index) const;
  ::message::UGCWorkflowSequenceItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCWorkflowSequenceItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:message.UGCWorkflowSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCWorkflowSequenceItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCType) */ {
 public:
  inline UGCType() : UGCType(nullptr) {}
  ~UGCType() override;
  explicit PROTOBUF_CONSTEXPR UGCType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCType(const UGCType& from);
  UGCType(UGCType&& from) noexcept
    : UGCType() {
    *this = ::std::move(from);
  }

  inline UGCType& operator=(const UGCType& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCType& operator=(UGCType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCType& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCType* internal_default_instance() {
    return reinterpret_cast<const UGCType*>(
               &_UGCType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UGCType& a, UGCType& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCType& from) {
    UGCType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCType";
  }
  protected:
  explicit UGCType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseTypeIDsFieldNumber = 2,
    kAcceptTypeIDsFieldNumber = 3,
    kNameFieldNumber = 5,
    kDeclareFieldNumber = 1,
    kIDFieldNumber = 4,
    kGenericsIDFieldNumber = 6,
    kT0IDFieldNumber = 7,
    kAttributesFieldNumber = 8,
    kT1IDFieldNumber = 9,
  };
  // repeated int32 BaseTypeIDs = 2;
  int basetypeids_size() const;
  private:
  int _internal_basetypeids_size() const;
  public:
  void clear_basetypeids();
  private:
  int32_t _internal_basetypeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_basetypeids() const;
  void _internal_add_basetypeids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_basetypeids();
  public:
  int32_t basetypeids(int index) const;
  void set_basetypeids(int index, int32_t value);
  void add_basetypeids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      basetypeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_basetypeids();

  // repeated int32 AcceptTypeIDs = 3;
  int accepttypeids_size() const;
  private:
  int _internal_accepttypeids_size() const;
  public:
  void clear_accepttypeids();
  private:
  int32_t _internal_accepttypeids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_accepttypeids() const;
  void _internal_add_accepttypeids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_accepttypeids();
  public:
  int32_t accepttypeids(int index) const;
  void set_accepttypeids(int index, int32_t value);
  void add_accepttypeids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      accepttypeids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_accepttypeids();

  // string Name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 Declare = 1;
  void clear_declare();
  int32_t declare() const;
  void set_declare(int32_t value);
  private:
  int32_t _internal_declare() const;
  void _internal_set_declare(int32_t value);
  public:

  // int32 ID = 4;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 GenericsID = 6;
  void clear_genericsid();
  int32_t genericsid() const;
  void set_genericsid(int32_t value);
  private:
  int32_t _internal_genericsid() const;
  void _internal_set_genericsid(int32_t value);
  public:

  // int32 T0ID = 7;
  void clear_t0id();
  int32_t t0id() const;
  void set_t0id(int32_t value);
  private:
  int32_t _internal_t0id() const;
  void _internal_set_t0id(int32_t value);
  public:

  // uint32 Attributes = 8;
  void clear_attributes();
  uint32_t attributes() const;
  void set_attributes(uint32_t value);
  private:
  uint32_t _internal_attributes() const;
  void _internal_set_attributes(uint32_t value);
  public:

  // int32 T1ID = 9;
  void clear_t1id();
  int32_t t1id() const;
  void set_t1id(int32_t value);
  private:
  int32_t _internal_t1id() const;
  void _internal_set_t1id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > basetypeids_;
    mutable std::atomic<int> _basetypeids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > accepttypeids_;
    mutable std::atomic<int> _accepttypeids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t declare_;
    int32_t id_;
    int32_t genericsid_;
    int32_t t0id_;
    uint32_t attributes_;
    int32_t t1id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCTypeTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCTypeTree) */ {
 public:
  inline UGCTypeTree() : UGCTypeTree(nullptr) {}
  ~UGCTypeTree() override;
  explicit PROTOBUF_CONSTEXPR UGCTypeTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCTypeTree(const UGCTypeTree& from);
  UGCTypeTree(UGCTypeTree&& from) noexcept
    : UGCTypeTree() {
    *this = ::std::move(from);
  }

  inline UGCTypeTree& operator=(const UGCTypeTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCTypeTree& operator=(UGCTypeTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCTypeTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCTypeTree* internal_default_instance() {
    return reinterpret_cast<const UGCTypeTree*>(
               &_UGCTypeTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UGCTypeTree& a, UGCTypeTree& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCTypeTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCTypeTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCTypeTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCTypeTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCTypeTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCTypeTree& from) {
    UGCTypeTree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCTypeTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCTypeTree";
  }
  protected:
  explicit UGCTypeTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeMapFieldNumber = 1,
    kCmpPropsFieldNumber = 2,
    kComponentsFieldNumber = 3,
  };
  // repeated .message.UGCType TypeMap = 1;
  int typemap_size() const;
  private:
  int _internal_typemap_size() const;
  public:
  void clear_typemap();
  ::message::UGCType* mutable_typemap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCType >*
      mutable_typemap();
  private:
  const ::message::UGCType& _internal_typemap(int index) const;
  ::message::UGCType* _internal_add_typemap();
  public:
  const ::message::UGCType& typemap(int index) const;
  ::message::UGCType* add_typemap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCType >&
      typemap() const;

  // repeated .message.UGCTypeComponentProp CmpProps = 2;
  int cmpprops_size() const;
  private:
  int _internal_cmpprops_size() const;
  public:
  void clear_cmpprops();
  ::message::UGCTypeComponentProp* mutable_cmpprops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponentProp >*
      mutable_cmpprops();
  private:
  const ::message::UGCTypeComponentProp& _internal_cmpprops(int index) const;
  ::message::UGCTypeComponentProp* _internal_add_cmpprops();
  public:
  const ::message::UGCTypeComponentProp& cmpprops(int index) const;
  ::message::UGCTypeComponentProp* add_cmpprops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponentProp >&
      cmpprops() const;

  // repeated .message.UGCTypeComponent Components = 3;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::message::UGCTypeComponent* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponent >*
      mutable_components();
  private:
  const ::message::UGCTypeComponent& _internal_components(int index) const;
  ::message::UGCTypeComponent* _internal_add_components();
  public:
  const ::message::UGCTypeComponent& components(int index) const;
  ::message::UGCTypeComponent* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponent >&
      components() const;

  // @@protoc_insertion_point(class_scope:message.UGCTypeTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCType > typemap_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponentProp > cmpprops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponent > components_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCTypeComponent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCTypeComponent) */ {
 public:
  inline UGCTypeComponent() : UGCTypeComponent(nullptr) {}
  ~UGCTypeComponent() override;
  explicit PROTOBUF_CONSTEXPR UGCTypeComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCTypeComponent(const UGCTypeComponent& from);
  UGCTypeComponent(UGCTypeComponent&& from) noexcept
    : UGCTypeComponent() {
    *this = ::std::move(from);
  }

  inline UGCTypeComponent& operator=(const UGCTypeComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCTypeComponent& operator=(UGCTypeComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCTypeComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCTypeComponent* internal_default_instance() {
    return reinterpret_cast<const UGCTypeComponent*>(
               &_UGCTypeComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UGCTypeComponent& a, UGCTypeComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCTypeComponent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCTypeComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCTypeComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCTypeComponent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCTypeComponent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCTypeComponent& from) {
    UGCTypeComponent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCTypeComponent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCTypeComponent";
  }
  protected:
  explicit UGCTypeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 2,
    kIDFieldNumber = 1,
  };
  // repeated int32 Props = 2;
  int props_size() const;
  private:
  int _internal_props_size() const;
  public:
  void clear_props();
  private:
  int32_t _internal_props(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_props() const;
  void _internal_add_props(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_props();
  public:
  int32_t props(int index) const;
  void set_props(int index, int32_t value);
  void add_props(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      props() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_props();

  // int32 ID = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCTypeComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > props_;
    mutable std::atomic<int> _props_cached_byte_size_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCTypeComponentProp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCTypeComponentProp) */ {
 public:
  inline UGCTypeComponentProp() : UGCTypeComponentProp(nullptr) {}
  ~UGCTypeComponentProp() override;
  explicit PROTOBUF_CONSTEXPR UGCTypeComponentProp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCTypeComponentProp(const UGCTypeComponentProp& from);
  UGCTypeComponentProp(UGCTypeComponentProp&& from) noexcept
    : UGCTypeComponentProp() {
    *this = ::std::move(from);
  }

  inline UGCTypeComponentProp& operator=(const UGCTypeComponentProp& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCTypeComponentProp& operator=(UGCTypeComponentProp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCTypeComponentProp& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCTypeComponentProp* internal_default_instance() {
    return reinterpret_cast<const UGCTypeComponentProp*>(
               &_UGCTypeComponentProp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UGCTypeComponentProp& a, UGCTypeComponentProp& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCTypeComponentProp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCTypeComponentProp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCTypeComponentProp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCTypeComponentProp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCTypeComponentProp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCTypeComponentProp& from) {
    UGCTypeComponentProp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCTypeComponentProp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCTypeComponentProp";
  }
  protected:
  explicit UGCTypeComponentProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultValueFieldNumber = 3,
    kIDFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .message.UGCVarValueDataV2 DefaultValue = 3;
  bool has_defaultvalue() const;
  private:
  bool _internal_has_defaultvalue() const;
  public:
  void clear_defaultvalue();
  const ::message::UGCVarValueDataV2& defaultvalue() const;
  PROTOBUF_NODISCARD ::message::UGCVarValueDataV2* release_defaultvalue();
  ::message::UGCVarValueDataV2* mutable_defaultvalue();
  void set_allocated_defaultvalue(::message::UGCVarValueDataV2* defaultvalue);
  private:
  const ::message::UGCVarValueDataV2& _internal_defaultvalue() const;
  ::message::UGCVarValueDataV2* _internal_mutable_defaultvalue();
  public:
  void unsafe_arena_set_allocated_defaultvalue(
      ::message::UGCVarValueDataV2* defaultvalue);
  ::message::UGCVarValueDataV2* unsafe_arena_release_defaultvalue();

  // int32 ID = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCTypeComponentProp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCVarValueDataV2* defaultvalue_;
    int32_t id_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCustomReplicationDataItemForEditor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCustomReplicationDataItemForEditor) */ {
 public:
  inline UGCCustomReplicationDataItemForEditor() : UGCCustomReplicationDataItemForEditor(nullptr) {}
  ~UGCCustomReplicationDataItemForEditor() override;
  explicit PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemForEditor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCustomReplicationDataItemForEditor(const UGCCustomReplicationDataItemForEditor& from);
  UGCCustomReplicationDataItemForEditor(UGCCustomReplicationDataItemForEditor&& from) noexcept
    : UGCCustomReplicationDataItemForEditor() {
    *this = ::std::move(from);
  }

  inline UGCCustomReplicationDataItemForEditor& operator=(const UGCCustomReplicationDataItemForEditor& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCustomReplicationDataItemForEditor& operator=(UGCCustomReplicationDataItemForEditor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCustomReplicationDataItemForEditor& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCustomReplicationDataItemForEditor* internal_default_instance() {
    return reinterpret_cast<const UGCCustomReplicationDataItemForEditor*>(
               &_UGCCustomReplicationDataItemForEditor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UGCCustomReplicationDataItemForEditor& a, UGCCustomReplicationDataItemForEditor& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCustomReplicationDataItemForEditor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCustomReplicationDataItemForEditor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCustomReplicationDataItemForEditor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCustomReplicationDataItemForEditor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCustomReplicationDataItemForEditor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCustomReplicationDataItemForEditor& from) {
    UGCCustomReplicationDataItemForEditor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCustomReplicationDataItemForEditor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCustomReplicationDataItemForEditor";
  }
  protected:
  explicit UGCCustomReplicationDataItemForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeIDFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string TypeID = 2;
  void clear_typeid_();
  const std::string& typeid_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_typeid_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_typeid_();
  PROTOBUF_NODISCARD std::string* release_typeid_();
  void set_allocated_typeid_(std::string* typeid_);
  private:
  const std::string& _internal_typeid_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_typeid_(const std::string& value);
  std::string* _internal_mutable_typeid_();
  public:

  // .message.UGCVarValueDataV2 Value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::message::UGCVarValueDataV2& value() const;
  PROTOBUF_NODISCARD ::message::UGCVarValueDataV2* release_value();
  ::message::UGCVarValueDataV2* mutable_value();
  void set_allocated_value(::message::UGCVarValueDataV2* value);
  private:
  const ::message::UGCVarValueDataV2& _internal_value() const;
  ::message::UGCVarValueDataV2* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::message::UGCVarValueDataV2* value);
  ::message::UGCVarValueDataV2* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:message.UGCCustomReplicationDataItemForEditor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr typeid__;
    ::message::UGCVarValueDataV2* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCLogicEntityDataForEditor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCLogicEntityDataForEditor) */ {
 public:
  inline UGCLogicEntityDataForEditor() : UGCLogicEntityDataForEditor(nullptr) {}
  ~UGCLogicEntityDataForEditor() override;
  explicit PROTOBUF_CONSTEXPR UGCLogicEntityDataForEditor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCLogicEntityDataForEditor(const UGCLogicEntityDataForEditor& from);
  UGCLogicEntityDataForEditor(UGCLogicEntityDataForEditor&& from) noexcept
    : UGCLogicEntityDataForEditor() {
    *this = ::std::move(from);
  }

  inline UGCLogicEntityDataForEditor& operator=(const UGCLogicEntityDataForEditor& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCLogicEntityDataForEditor& operator=(UGCLogicEntityDataForEditor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCLogicEntityDataForEditor& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCLogicEntityDataForEditor* internal_default_instance() {
    return reinterpret_cast<const UGCLogicEntityDataForEditor*>(
               &_UGCLogicEntityDataForEditor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UGCLogicEntityDataForEditor& a, UGCLogicEntityDataForEditor& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCLogicEntityDataForEditor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCLogicEntityDataForEditor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCLogicEntityDataForEditor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCLogicEntityDataForEditor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCLogicEntityDataForEditor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCLogicEntityDataForEditor& from) {
    UGCLogicEntityDataForEditor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCLogicEntityDataForEditor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCLogicEntityDataForEditor";
  }
  protected:
  explicit UGCLogicEntityDataForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphIDsFieldNumber = 3,
    kRepDataItemFieldNumber = 4,
    kIDFieldNumber = 1,
    kTypeFieldNumber = 2,
    kEditorTypeFieldNumber = 5,
  };
  // repeated string GraphIDs = 3;
  int graphids_size() const;
  private:
  int _internal_graphids_size() const;
  public:
  void clear_graphids();
  const std::string& graphids(int index) const;
  std::string* mutable_graphids(int index);
  void set_graphids(int index, const std::string& value);
  void set_graphids(int index, std::string&& value);
  void set_graphids(int index, const char* value);
  void set_graphids(int index, const char* value, size_t size);
  std::string* add_graphids();
  void add_graphids(const std::string& value);
  void add_graphids(std::string&& value);
  void add_graphids(const char* value);
  void add_graphids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& graphids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_graphids();
  private:
  const std::string& _internal_graphids(int index) const;
  std::string* _internal_add_graphids();
  public:

  // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
  int repdataitem_size() const;
  private:
  int _internal_repdataitem_size() const;
  public:
  void clear_repdataitem();
  ::message::UGCCustomReplicationDataItemInstanceV2* mutable_repdataitem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >*
      mutable_repdataitem();
  private:
  const ::message::UGCCustomReplicationDataItemInstanceV2& _internal_repdataitem(int index) const;
  ::message::UGCCustomReplicationDataItemInstanceV2* _internal_add_repdataitem();
  public:
  const ::message::UGCCustomReplicationDataItemInstanceV2& repdataitem(int index) const;
  ::message::UGCCustomReplicationDataItemInstanceV2* add_repdataitem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >&
      repdataitem() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string EditorType = 5;
  void clear_editortype();
  const std::string& editortype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_editortype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_editortype();
  PROTOBUF_NODISCARD std::string* release_editortype();
  void set_allocated_editortype(std::string* editortype);
  private:
  const std::string& _internal_editortype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_editortype(const std::string& value);
  std::string* _internal_mutable_editortype();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCLogicEntityDataForEditor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> graphids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 > repdataitem_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr editortype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCustomReplicationDataForEditor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCustomReplicationDataForEditor) */ {
 public:
  inline UGCCustomReplicationDataForEditor() : UGCCustomReplicationDataForEditor(nullptr) {}
  ~UGCCustomReplicationDataForEditor() override;
  explicit PROTOBUF_CONSTEXPR UGCCustomReplicationDataForEditor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCustomReplicationDataForEditor(const UGCCustomReplicationDataForEditor& from);
  UGCCustomReplicationDataForEditor(UGCCustomReplicationDataForEditor&& from) noexcept
    : UGCCustomReplicationDataForEditor() {
    *this = ::std::move(from);
  }

  inline UGCCustomReplicationDataForEditor& operator=(const UGCCustomReplicationDataForEditor& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCustomReplicationDataForEditor& operator=(UGCCustomReplicationDataForEditor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCustomReplicationDataForEditor& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCustomReplicationDataForEditor* internal_default_instance() {
    return reinterpret_cast<const UGCCustomReplicationDataForEditor*>(
               &_UGCCustomReplicationDataForEditor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UGCCustomReplicationDataForEditor& a, UGCCustomReplicationDataForEditor& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCustomReplicationDataForEditor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCustomReplicationDataForEditor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCustomReplicationDataForEditor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCustomReplicationDataForEditor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCustomReplicationDataForEditor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCustomReplicationDataForEditor& from) {
    UGCCustomReplicationDataForEditor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCustomReplicationDataForEditor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCustomReplicationDataForEditor";
  }
  protected:
  explicit UGCCustomReplicationDataForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDataFieldNumber = 2,
    kEntityTypeFieldNumber = 1,
  };
  // repeated .message.UGCCustomReplicationDataItemForEditor ItemData = 2;
  int itemdata_size() const;
  private:
  int _internal_itemdata_size() const;
  public:
  void clear_itemdata();
  ::message::UGCCustomReplicationDataItemForEditor* mutable_itemdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemForEditor >*
      mutable_itemdata();
  private:
  const ::message::UGCCustomReplicationDataItemForEditor& _internal_itemdata(int index) const;
  ::message::UGCCustomReplicationDataItemForEditor* _internal_add_itemdata();
  public:
  const ::message::UGCCustomReplicationDataItemForEditor& itemdata(int index) const;
  ::message::UGCCustomReplicationDataItemForEditor* add_itemdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemForEditor >&
      itemdata() const;

  // string EntityType = 1;
  void clear_entitytype();
  const std::string& entitytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entitytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entitytype();
  PROTOBUF_NODISCARD std::string* release_entitytype();
  void set_allocated_entitytype(std::string* entitytype);
  private:
  const std::string& _internal_entitytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entitytype(const std::string& value);
  std::string* _internal_mutable_entitytype();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCCustomReplicationDataForEditor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemForEditor > itemdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitytype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCVarValueData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCVarValueData) */ {
 public:
  inline UGCVarValueData() : UGCVarValueData(nullptr) {}
  ~UGCVarValueData() override;
  explicit PROTOBUF_CONSTEXPR UGCVarValueData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCVarValueData(const UGCVarValueData& from);
  UGCVarValueData(UGCVarValueData&& from) noexcept
    : UGCVarValueData() {
    *this = ::std::move(from);
  }

  inline UGCVarValueData& operator=(const UGCVarValueData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCVarValueData& operator=(UGCVarValueData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCVarValueData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCVarValueData* internal_default_instance() {
    return reinterpret_cast<const UGCVarValueData*>(
               &_UGCVarValueData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UGCVarValueData& a, UGCVarValueData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCVarValueData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCVarValueData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCVarValueData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCVarValueData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCVarValueData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCVarValueData& from) {
    UGCVarValueData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCVarValueData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCVarValueData";
  }
  protected:
  explicit UGCVarValueData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayValueFieldNumber = 8,
    kStringValueFieldNumber = 6,
    kFuncValueFieldNumber = 2,
    kVector3ValueFieldNumber = 7,
    kValueTypeFieldNumber = 1,
    kBoolValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kFloatValueFieldNumber = 5,
  };
  // repeated .message.UGCVarValueData ArrayValue = 8;
  int arrayvalue_size() const;
  private:
  int _internal_arrayvalue_size() const;
  public:
  void clear_arrayvalue();
  ::message::UGCVarValueData* mutable_arrayvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData >*
      mutable_arrayvalue();
  private:
  const ::message::UGCVarValueData& _internal_arrayvalue(int index) const;
  ::message::UGCVarValueData* _internal_add_arrayvalue();
  public:
  const ::message::UGCVarValueData& arrayvalue(int index) const;
  ::message::UGCVarValueData* add_arrayvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData >&
      arrayvalue() const;

  // string StringValue = 6;
  void clear_stringvalue();
  const std::string& stringvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringvalue();
  PROTOBUF_NODISCARD std::string* release_stringvalue();
  void set_allocated_stringvalue(std::string* stringvalue);
  private:
  const std::string& _internal_stringvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringvalue(const std::string& value);
  std::string* _internal_mutable_stringvalue();
  public:

  // .message.UGCFuncCallerData FuncValue = 2;
  bool has_funcvalue() const;
  private:
  bool _internal_has_funcvalue() const;
  public:
  void clear_funcvalue();
  const ::message::UGCFuncCallerData& funcvalue() const;
  PROTOBUF_NODISCARD ::message::UGCFuncCallerData* release_funcvalue();
  ::message::UGCFuncCallerData* mutable_funcvalue();
  void set_allocated_funcvalue(::message::UGCFuncCallerData* funcvalue);
  private:
  const ::message::UGCFuncCallerData& _internal_funcvalue() const;
  ::message::UGCFuncCallerData* _internal_mutable_funcvalue();
  public:
  void unsafe_arena_set_allocated_funcvalue(
      ::message::UGCFuncCallerData* funcvalue);
  ::message::UGCFuncCallerData* unsafe_arena_release_funcvalue();

  // .message.ProtoBuffVector3 Vector3Value = 7;
  bool has_vector3value() const;
  private:
  bool _internal_has_vector3value() const;
  public:
  void clear_vector3value();
  const ::message::ProtoBuffVector3& vector3value() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_vector3value();
  ::message::ProtoBuffVector3* mutable_vector3value();
  void set_allocated_vector3value(::message::ProtoBuffVector3* vector3value);
  private:
  const ::message::ProtoBuffVector3& _internal_vector3value() const;
  ::message::ProtoBuffVector3* _internal_mutable_vector3value();
  public:
  void unsafe_arena_set_allocated_vector3value(
      ::message::ProtoBuffVector3* vector3value);
  ::message::ProtoBuffVector3* unsafe_arena_release_vector3value();

  // .message.EUGCValueType ValueType = 1;
  void clear_valuetype();
  ::message::EUGCValueType valuetype() const;
  void set_valuetype(::message::EUGCValueType value);
  private:
  ::message::EUGCValueType _internal_valuetype() const;
  void _internal_set_valuetype(::message::EUGCValueType value);
  public:

  // bool BoolValue = 3;
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // int32 IntValue = 4;
  void clear_intvalue();
  int32_t intvalue() const;
  void set_intvalue(int32_t value);
  private:
  int32_t _internal_intvalue() const;
  void _internal_set_intvalue(int32_t value);
  public:

  // float FloatValue = 5;
  void clear_floatvalue();
  float floatvalue() const;
  void set_floatvalue(float value);
  private:
  float _internal_floatvalue() const;
  void _internal_set_floatvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCVarValueData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData > arrayvalue_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringvalue_;
    ::message::UGCFuncCallerData* funcvalue_;
    ::message::ProtoBuffVector3* vector3value_;
    int valuetype_;
    bool boolvalue_;
    int32_t intvalue_;
    float floatvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCFuncCallerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCFuncCallerData) */ {
 public:
  inline UGCFuncCallerData() : UGCFuncCallerData(nullptr) {}
  ~UGCFuncCallerData() override;
  explicit PROTOBUF_CONSTEXPR UGCFuncCallerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCFuncCallerData(const UGCFuncCallerData& from);
  UGCFuncCallerData(UGCFuncCallerData&& from) noexcept
    : UGCFuncCallerData() {
    *this = ::std::move(from);
  }

  inline UGCFuncCallerData& operator=(const UGCFuncCallerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCFuncCallerData& operator=(UGCFuncCallerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCFuncCallerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCFuncCallerData* internal_default_instance() {
    return reinterpret_cast<const UGCFuncCallerData*>(
               &_UGCFuncCallerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UGCFuncCallerData& a, UGCFuncCallerData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCFuncCallerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCFuncCallerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCFuncCallerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCFuncCallerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCFuncCallerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCFuncCallerData& from) {
    UGCFuncCallerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCFuncCallerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCFuncCallerData";
  }
  protected:
  explicit UGCFuncCallerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 4,
    kSubCallerDataFieldNumber = 5,
    kIDFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kUseUpvalueFieldNumber = 6,
  };
  // repeated .message.UGCVarValueData Params = 4;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::message::UGCVarValueData* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData >*
      mutable_params();
  private:
  const ::message::UGCVarValueData& _internal_params(int index) const;
  ::message::UGCVarValueData* _internal_add_params();
  public:
  const ::message::UGCVarValueData& params(int index) const;
  ::message::UGCVarValueData* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData >&
      params() const;

  // repeated .message.UGCFuncCallerData SubCallerData = 5;
  int subcallerdata_size() const;
  private:
  int _internal_subcallerdata_size() const;
  public:
  void clear_subcallerdata();
  ::message::UGCFuncCallerData* mutable_subcallerdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData >*
      mutable_subcallerdata();
  private:
  const ::message::UGCFuncCallerData& _internal_subcallerdata(int index) const;
  ::message::UGCFuncCallerData* _internal_add_subcallerdata();
  public:
  const ::message::UGCFuncCallerData& subcallerdata(int index) const;
  ::message::UGCFuncCallerData* add_subcallerdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData >&
      subcallerdata() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 Type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // bool UseUpvalue = 6;
  void clear_useupvalue();
  bool useupvalue() const;
  void set_useupvalue(bool value);
  private:
  bool _internal_useupvalue() const;
  void _internal_set_useupvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCFuncCallerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData > params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData > subcallerdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t type_;
    bool useupvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCVarDefineData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCVarDefineData) */ {
 public:
  inline UGCVarDefineData() : UGCVarDefineData(nullptr) {}
  ~UGCVarDefineData() override;
  explicit PROTOBUF_CONSTEXPR UGCVarDefineData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCVarDefineData(const UGCVarDefineData& from);
  UGCVarDefineData(UGCVarDefineData&& from) noexcept
    : UGCVarDefineData() {
    *this = ::std::move(from);
  }

  inline UGCVarDefineData& operator=(const UGCVarDefineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCVarDefineData& operator=(UGCVarDefineData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCVarDefineData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCVarDefineData* internal_default_instance() {
    return reinterpret_cast<const UGCVarDefineData*>(
               &_UGCVarDefineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UGCVarDefineData& a, UGCVarDefineData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCVarDefineData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCVarDefineData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCVarDefineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCVarDefineData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCVarDefineData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCVarDefineData& from) {
    UGCVarDefineData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCVarDefineData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCVarDefineData";
  }
  protected:
  explicit UGCVarDefineData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kNameFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .message.UGCVarValueData Value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::message::UGCVarValueData& value() const;
  PROTOBUF_NODISCARD ::message::UGCVarValueData* release_value();
  ::message::UGCVarValueData* mutable_value();
  void set_allocated_value(::message::UGCVarValueData* value);
  private:
  const ::message::UGCVarValueData& _internal_value() const;
  ::message::UGCVarValueData* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::message::UGCVarValueData* value);
  ::message::UGCVarValueData* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:message.UGCVarDefineData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::message::UGCVarValueData* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCRuleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCRuleData) */ {
 public:
  inline UGCRuleData() : UGCRuleData(nullptr) {}
  ~UGCRuleData() override;
  explicit PROTOBUF_CONSTEXPR UGCRuleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCRuleData(const UGCRuleData& from);
  UGCRuleData(UGCRuleData&& from) noexcept
    : UGCRuleData() {
    *this = ::std::move(from);
  }

  inline UGCRuleData& operator=(const UGCRuleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCRuleData& operator=(UGCRuleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCRuleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCRuleData* internal_default_instance() {
    return reinterpret_cast<const UGCRuleData*>(
               &_UGCRuleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UGCRuleData& a, UGCRuleData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCRuleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCRuleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCRuleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCRuleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCRuleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCRuleData& from) {
    UGCRuleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCRuleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCRuleData";
  }
  protected:
  explicit UGCRuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallerDataFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // .message.UGCFuncCallerData CallerData = 2;
  bool has_callerdata() const;
  private:
  bool _internal_has_callerdata() const;
  public:
  void clear_callerdata();
  const ::message::UGCFuncCallerData& callerdata() const;
  PROTOBUF_NODISCARD ::message::UGCFuncCallerData* release_callerdata();
  ::message::UGCFuncCallerData* mutable_callerdata();
  void set_allocated_callerdata(::message::UGCFuncCallerData* callerdata);
  private:
  const ::message::UGCFuncCallerData& _internal_callerdata() const;
  ::message::UGCFuncCallerData* _internal_mutable_callerdata();
  public:
  void unsafe_arena_set_allocated_callerdata(
      ::message::UGCFuncCallerData* callerdata);
  ::message::UGCFuncCallerData* unsafe_arena_release_callerdata();

  // int32 EventType = 1;
  void clear_eventtype();
  int32_t eventtype() const;
  void set_eventtype(int32_t value);
  private:
  int32_t _internal_eventtype() const;
  void _internal_set_eventtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCRuleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCFuncCallerData* callerdata_;
    int32_t eventtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCGraphData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCGraphData) */ {
 public:
  inline UGCGraphData() : UGCGraphData(nullptr) {}
  ~UGCGraphData() override;
  explicit PROTOBUF_CONSTEXPR UGCGraphData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCGraphData(const UGCGraphData& from);
  UGCGraphData(UGCGraphData&& from) noexcept
    : UGCGraphData() {
    *this = ::std::move(from);
  }

  inline UGCGraphData& operator=(const UGCGraphData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCGraphData& operator=(UGCGraphData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCGraphData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCGraphData* internal_default_instance() {
    return reinterpret_cast<const UGCGraphData*>(
               &_UGCGraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UGCGraphData& a, UGCGraphData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCGraphData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCGraphData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCGraphData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCGraphData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCGraphData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCGraphData& from) {
    UGCGraphData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCGraphData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCGraphData";
  }
  protected:
  explicit UGCGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 2,
    kVariablesFieldNumber = 3,
    kFunctionsFieldNumber = 4,
    kIDFieldNumber = 1,
  };
  // repeated .message.UGCRuleData Rules = 2;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::message::UGCRuleData* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleData >*
      mutable_rules();
  private:
  const ::message::UGCRuleData& _internal_rules(int index) const;
  ::message::UGCRuleData* _internal_add_rules();
  public:
  const ::message::UGCRuleData& rules(int index) const;
  ::message::UGCRuleData* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleData >&
      rules() const;

  // repeated .message.UGCVarDefineData Variables = 3;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::message::UGCVarDefineData* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineData >*
      mutable_variables();
  private:
  const ::message::UGCVarDefineData& _internal_variables(int index) const;
  ::message::UGCVarDefineData* _internal_add_variables();
  public:
  const ::message::UGCVarDefineData& variables(int index) const;
  ::message::UGCVarDefineData* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineData >&
      variables() const;

  // repeated .message.UGCFuncCallerData Functions = 4;
  int functions_size() const;
  private:
  int _internal_functions_size() const;
  public:
  void clear_functions();
  ::message::UGCFuncCallerData* mutable_functions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData >*
      mutable_functions();
  private:
  const ::message::UGCFuncCallerData& _internal_functions(int index) const;
  ::message::UGCFuncCallerData* _internal_add_functions();
  public:
  const ::message::UGCFuncCallerData& functions(int index) const;
  ::message::UGCFuncCallerData* add_functions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData >&
      functions() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCGraphData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleData > rules_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineData > variables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData > functions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCustomReplicationDataItemInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCustomReplicationDataItemInstance) */ {
 public:
  inline UGCCustomReplicationDataItemInstance() : UGCCustomReplicationDataItemInstance(nullptr) {}
  ~UGCCustomReplicationDataItemInstance() override;
  explicit PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCustomReplicationDataItemInstance(const UGCCustomReplicationDataItemInstance& from);
  UGCCustomReplicationDataItemInstance(UGCCustomReplicationDataItemInstance&& from) noexcept
    : UGCCustomReplicationDataItemInstance() {
    *this = ::std::move(from);
  }

  inline UGCCustomReplicationDataItemInstance& operator=(const UGCCustomReplicationDataItemInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCustomReplicationDataItemInstance& operator=(UGCCustomReplicationDataItemInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCustomReplicationDataItemInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCustomReplicationDataItemInstance* internal_default_instance() {
    return reinterpret_cast<const UGCCustomReplicationDataItemInstance*>(
               &_UGCCustomReplicationDataItemInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UGCCustomReplicationDataItemInstance& a, UGCCustomReplicationDataItemInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCustomReplicationDataItemInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCustomReplicationDataItemInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCustomReplicationDataItemInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCustomReplicationDataItemInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCustomReplicationDataItemInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCustomReplicationDataItemInstance& from) {
    UGCCustomReplicationDataItemInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCustomReplicationDataItemInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCustomReplicationDataItemInstance";
  }
  protected:
  explicit UGCCustomReplicationDataItemInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .message.UGCVarValueData Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::message::UGCVarValueData& value() const;
  PROTOBUF_NODISCARD ::message::UGCVarValueData* release_value();
  ::message::UGCVarValueData* mutable_value();
  void set_allocated_value(::message::UGCVarValueData* value);
  private:
  const ::message::UGCVarValueData& _internal_value() const;
  ::message::UGCVarValueData* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::message::UGCVarValueData* value);
  ::message::UGCVarValueData* unsafe_arena_release_value();

  // int32 Index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCCustomReplicationDataItemInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCVarValueData* value_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCLogicEntityData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCLogicEntityData) */ {
 public:
  inline UGCLogicEntityData() : UGCLogicEntityData(nullptr) {}
  ~UGCLogicEntityData() override;
  explicit PROTOBUF_CONSTEXPR UGCLogicEntityData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCLogicEntityData(const UGCLogicEntityData& from);
  UGCLogicEntityData(UGCLogicEntityData&& from) noexcept
    : UGCLogicEntityData() {
    *this = ::std::move(from);
  }

  inline UGCLogicEntityData& operator=(const UGCLogicEntityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCLogicEntityData& operator=(UGCLogicEntityData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCLogicEntityData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCLogicEntityData* internal_default_instance() {
    return reinterpret_cast<const UGCLogicEntityData*>(
               &_UGCLogicEntityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UGCLogicEntityData& a, UGCLogicEntityData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCLogicEntityData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCLogicEntityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCLogicEntityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCLogicEntityData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCLogicEntityData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCLogicEntityData& from) {
    UGCLogicEntityData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCLogicEntityData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCLogicEntityData";
  }
  protected:
  explicit UGCLogicEntityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphIDsFieldNumber = 3,
    kRepDataItemFieldNumber = 4,
    kIDFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated string GraphIDs = 3;
  int graphids_size() const;
  private:
  int _internal_graphids_size() const;
  public:
  void clear_graphids();
  const std::string& graphids(int index) const;
  std::string* mutable_graphids(int index);
  void set_graphids(int index, const std::string& value);
  void set_graphids(int index, std::string&& value);
  void set_graphids(int index, const char* value);
  void set_graphids(int index, const char* value, size_t size);
  std::string* add_graphids();
  void add_graphids(const std::string& value);
  void add_graphids(std::string&& value);
  void add_graphids(const char* value);
  void add_graphids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& graphids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_graphids();
  private:
  const std::string& _internal_graphids(int index) const;
  std::string* _internal_add_graphids();
  public:

  // repeated .message.UGCCustomReplicationDataItemInstance RepDataItem = 4;
  int repdataitem_size() const;
  private:
  int _internal_repdataitem_size() const;
  public:
  void clear_repdataitem();
  ::message::UGCCustomReplicationDataItemInstance* mutable_repdataitem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstance >*
      mutable_repdataitem();
  private:
  const ::message::UGCCustomReplicationDataItemInstance& _internal_repdataitem(int index) const;
  ::message::UGCCustomReplicationDataItemInstance* _internal_add_repdataitem();
  public:
  const ::message::UGCCustomReplicationDataItemInstance& repdataitem(int index) const;
  ::message::UGCCustomReplicationDataItemInstance* add_repdataitem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstance >&
      repdataitem() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .message.EUGCLogicEntityType Type = 2;
  void clear_type();
  ::message::EUGCLogicEntityType type() const;
  void set_type(::message::EUGCLogicEntityType value);
  private:
  ::message::EUGCLogicEntityType _internal_type() const;
  void _internal_set_type(::message::EUGCLogicEntityType value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCLogicEntityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> graphids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstance > repdataitem_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCustomReplicationDataItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCustomReplicationDataItem) */ {
 public:
  inline UGCCustomReplicationDataItem() : UGCCustomReplicationDataItem(nullptr) {}
  ~UGCCustomReplicationDataItem() override;
  explicit PROTOBUF_CONSTEXPR UGCCustomReplicationDataItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCustomReplicationDataItem(const UGCCustomReplicationDataItem& from);
  UGCCustomReplicationDataItem(UGCCustomReplicationDataItem&& from) noexcept
    : UGCCustomReplicationDataItem() {
    *this = ::std::move(from);
  }

  inline UGCCustomReplicationDataItem& operator=(const UGCCustomReplicationDataItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCustomReplicationDataItem& operator=(UGCCustomReplicationDataItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCustomReplicationDataItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCustomReplicationDataItem* internal_default_instance() {
    return reinterpret_cast<const UGCCustomReplicationDataItem*>(
               &_UGCCustomReplicationDataItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UGCCustomReplicationDataItem& a, UGCCustomReplicationDataItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCustomReplicationDataItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCustomReplicationDataItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCustomReplicationDataItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCustomReplicationDataItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCustomReplicationDataItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCustomReplicationDataItem& from) {
    UGCCustomReplicationDataItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCustomReplicationDataItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCustomReplicationDataItem";
  }
  protected:
  explicit UGCCustomReplicationDataItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .message.UGCVarValueData Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::message::UGCVarValueData& value() const;
  PROTOBUF_NODISCARD ::message::UGCVarValueData* release_value();
  ::message::UGCVarValueData* mutable_value();
  void set_allocated_value(::message::UGCVarValueData* value);
  private:
  const ::message::UGCVarValueData& _internal_value() const;
  ::message::UGCVarValueData* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::message::UGCVarValueData* value);
  ::message::UGCVarValueData* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:message.UGCCustomReplicationDataItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::message::UGCVarValueData* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCustomReplicationData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCustomReplicationData) */ {
 public:
  inline UGCCustomReplicationData() : UGCCustomReplicationData(nullptr) {}
  ~UGCCustomReplicationData() override;
  explicit PROTOBUF_CONSTEXPR UGCCustomReplicationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCustomReplicationData(const UGCCustomReplicationData& from);
  UGCCustomReplicationData(UGCCustomReplicationData&& from) noexcept
    : UGCCustomReplicationData() {
    *this = ::std::move(from);
  }

  inline UGCCustomReplicationData& operator=(const UGCCustomReplicationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCustomReplicationData& operator=(UGCCustomReplicationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCustomReplicationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCustomReplicationData* internal_default_instance() {
    return reinterpret_cast<const UGCCustomReplicationData*>(
               &_UGCCustomReplicationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UGCCustomReplicationData& a, UGCCustomReplicationData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCustomReplicationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCustomReplicationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCustomReplicationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCustomReplicationData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCustomReplicationData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCustomReplicationData& from) {
    UGCCustomReplicationData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCustomReplicationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCustomReplicationData";
  }
  protected:
  explicit UGCCustomReplicationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDataFieldNumber = 2,
    kEntityTypeFieldNumber = 1,
  };
  // repeated .message.UGCCustomReplicationDataItem ItemData = 2;
  int itemdata_size() const;
  private:
  int _internal_itemdata_size() const;
  public:
  void clear_itemdata();
  ::message::UGCCustomReplicationDataItem* mutable_itemdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItem >*
      mutable_itemdata();
  private:
  const ::message::UGCCustomReplicationDataItem& _internal_itemdata(int index) const;
  ::message::UGCCustomReplicationDataItem* _internal_add_itemdata();
  public:
  const ::message::UGCCustomReplicationDataItem& itemdata(int index) const;
  ::message::UGCCustomReplicationDataItem* add_itemdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItem >&
      itemdata() const;

  // .message.EUGCLogicEntityType EntityType = 1;
  void clear_entitytype();
  ::message::EUGCLogicEntityType entitytype() const;
  void set_entitytype(::message::EUGCLogicEntityType value);
  private:
  ::message::EUGCLogicEntityType _internal_entitytype() const;
  void _internal_set_entitytype(::message::EUGCLogicEntityType value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCCustomReplicationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItem > itemdata_;
    int entitytype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCLevelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCLevelData) */ {
 public:
  inline UGCLevelData() : UGCLevelData(nullptr) {}
  ~UGCLevelData() override;
  explicit PROTOBUF_CONSTEXPR UGCLevelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCLevelData(const UGCLevelData& from);
  UGCLevelData(UGCLevelData&& from) noexcept
    : UGCLevelData() {
    *this = ::std::move(from);
  }

  inline UGCLevelData& operator=(const UGCLevelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCLevelData& operator=(UGCLevelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCLevelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCLevelData* internal_default_instance() {
    return reinterpret_cast<const UGCLevelData*>(
               &_UGCLevelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UGCLevelData& a, UGCLevelData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCLevelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCLevelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCLevelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCLevelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCLevelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCLevelData& from) {
    UGCLevelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCLevelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCLevelData";
  }
  protected:
  explicit UGCLevelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphDataFieldNumber = 1,
    kLogicEntityDatasFieldNumber = 3,
    kEntityReplicationDataFieldNumber = 4,
    kWorkflowFieldNumber = 2,
    kMapDataFieldNumber = 5,
    kHudPrefabDataFieldNumber = 6,
  };
  // repeated .message.UGCGraphData GraphData = 1;
  int graphdata_size() const;
  private:
  int _internal_graphdata_size() const;
  public:
  void clear_graphdata();
  ::message::UGCGraphData* mutable_graphdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphData >*
      mutable_graphdata();
  private:
  const ::message::UGCGraphData& _internal_graphdata(int index) const;
  ::message::UGCGraphData* _internal_add_graphdata();
  public:
  const ::message::UGCGraphData& graphdata(int index) const;
  ::message::UGCGraphData* add_graphdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphData >&
      graphdata() const;

  // repeated .message.UGCLogicEntityData LogicEntityDatas = 3;
  int logicentitydatas_size() const;
  private:
  int _internal_logicentitydatas_size() const;
  public:
  void clear_logicentitydatas();
  ::message::UGCLogicEntityData* mutable_logicentitydatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityData >*
      mutable_logicentitydatas();
  private:
  const ::message::UGCLogicEntityData& _internal_logicentitydatas(int index) const;
  ::message::UGCLogicEntityData* _internal_add_logicentitydatas();
  public:
  const ::message::UGCLogicEntityData& logicentitydatas(int index) const;
  ::message::UGCLogicEntityData* add_logicentitydatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityData >&
      logicentitydatas() const;

  // repeated .message.UGCCustomReplicationData EntityReplicationData = 4;
  int entityreplicationdata_size() const;
  private:
  int _internal_entityreplicationdata_size() const;
  public:
  void clear_entityreplicationdata();
  ::message::UGCCustomReplicationData* mutable_entityreplicationdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationData >*
      mutable_entityreplicationdata();
  private:
  const ::message::UGCCustomReplicationData& _internal_entityreplicationdata(int index) const;
  ::message::UGCCustomReplicationData* _internal_add_entityreplicationdata();
  public:
  const ::message::UGCCustomReplicationData& entityreplicationdata(int index) const;
  ::message::UGCCustomReplicationData* add_entityreplicationdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationData >&
      entityreplicationdata() const;

  // .message.UGCWorkflowData Workflow = 2;
  bool has_workflow() const;
  private:
  bool _internal_has_workflow() const;
  public:
  void clear_workflow();
  const ::message::UGCWorkflowData& workflow() const;
  PROTOBUF_NODISCARD ::message::UGCWorkflowData* release_workflow();
  ::message::UGCWorkflowData* mutable_workflow();
  void set_allocated_workflow(::message::UGCWorkflowData* workflow);
  private:
  const ::message::UGCWorkflowData& _internal_workflow() const;
  ::message::UGCWorkflowData* _internal_mutable_workflow();
  public:
  void unsafe_arena_set_allocated_workflow(
      ::message::UGCWorkflowData* workflow);
  ::message::UGCWorkflowData* unsafe_arena_release_workflow();

  // .message.UGCMapRuntimeData MapData = 5;
  bool has_mapdata() const;
  private:
  bool _internal_has_mapdata() const;
  public:
  void clear_mapdata();
  const ::message::UGCMapRuntimeData& mapdata() const;
  PROTOBUF_NODISCARD ::message::UGCMapRuntimeData* release_mapdata();
  ::message::UGCMapRuntimeData* mutable_mapdata();
  void set_allocated_mapdata(::message::UGCMapRuntimeData* mapdata);
  private:
  const ::message::UGCMapRuntimeData& _internal_mapdata() const;
  ::message::UGCMapRuntimeData* _internal_mutable_mapdata();
  public:
  void unsafe_arena_set_allocated_mapdata(
      ::message::UGCMapRuntimeData* mapdata);
  ::message::UGCMapRuntimeData* unsafe_arena_release_mapdata();

  // .message.UGCHudPrefabDatas HudPrefabData = 6;
  bool has_hudprefabdata() const;
  private:
  bool _internal_has_hudprefabdata() const;
  public:
  void clear_hudprefabdata();
  const ::message::UGCHudPrefabDatas& hudprefabdata() const;
  PROTOBUF_NODISCARD ::message::UGCHudPrefabDatas* release_hudprefabdata();
  ::message::UGCHudPrefabDatas* mutable_hudprefabdata();
  void set_allocated_hudprefabdata(::message::UGCHudPrefabDatas* hudprefabdata);
  private:
  const ::message::UGCHudPrefabDatas& _internal_hudprefabdata() const;
  ::message::UGCHudPrefabDatas* _internal_mutable_hudprefabdata();
  public:
  void unsafe_arena_set_allocated_hudprefabdata(
      ::message::UGCHudPrefabDatas* hudprefabdata);
  ::message::UGCHudPrefabDatas* unsafe_arena_release_hudprefabdata();

  // @@protoc_insertion_point(class_scope:message.UGCLevelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphData > graphdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityData > logicentitydatas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationData > entityreplicationdata_;
    ::message::UGCWorkflowData* workflow_;
    ::message::UGCMapRuntimeData* mapdata_;
    ::message::UGCHudPrefabDatas* hudprefabdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCLogicEntityDataV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCLogicEntityDataV2) */ {
 public:
  inline UGCLogicEntityDataV2() : UGCLogicEntityDataV2(nullptr) {}
  ~UGCLogicEntityDataV2() override;
  explicit PROTOBUF_CONSTEXPR UGCLogicEntityDataV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCLogicEntityDataV2(const UGCLogicEntityDataV2& from);
  UGCLogicEntityDataV2(UGCLogicEntityDataV2&& from) noexcept
    : UGCLogicEntityDataV2() {
    *this = ::std::move(from);
  }

  inline UGCLogicEntityDataV2& operator=(const UGCLogicEntityDataV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCLogicEntityDataV2& operator=(UGCLogicEntityDataV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCLogicEntityDataV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCLogicEntityDataV2* internal_default_instance() {
    return reinterpret_cast<const UGCLogicEntityDataV2*>(
               &_UGCLogicEntityDataV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UGCLogicEntityDataV2& a, UGCLogicEntityDataV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCLogicEntityDataV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCLogicEntityDataV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCLogicEntityDataV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCLogicEntityDataV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCLogicEntityDataV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCLogicEntityDataV2& from) {
    UGCLogicEntityDataV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCLogicEntityDataV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCLogicEntityDataV2";
  }
  protected:
  explicit UGCLogicEntityDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphIDsFieldNumber = 3,
    kRepDataItemFieldNumber = 4,
    kIDFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated string GraphIDs = 3;
  int graphids_size() const;
  private:
  int _internal_graphids_size() const;
  public:
  void clear_graphids();
  const std::string& graphids(int index) const;
  std::string* mutable_graphids(int index);
  void set_graphids(int index, const std::string& value);
  void set_graphids(int index, std::string&& value);
  void set_graphids(int index, const char* value);
  void set_graphids(int index, const char* value, size_t size);
  std::string* add_graphids();
  void add_graphids(const std::string& value);
  void add_graphids(std::string&& value);
  void add_graphids(const char* value);
  void add_graphids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& graphids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_graphids();
  private:
  const std::string& _internal_graphids(int index) const;
  std::string* _internal_add_graphids();
  public:

  // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
  int repdataitem_size() const;
  private:
  int _internal_repdataitem_size() const;
  public:
  void clear_repdataitem();
  ::message::UGCCustomReplicationDataItemInstanceV2* mutable_repdataitem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >*
      mutable_repdataitem();
  private:
  const ::message::UGCCustomReplicationDataItemInstanceV2& _internal_repdataitem(int index) const;
  ::message::UGCCustomReplicationDataItemInstanceV2* _internal_add_repdataitem();
  public:
  const ::message::UGCCustomReplicationDataItemInstanceV2& repdataitem(int index) const;
  ::message::UGCCustomReplicationDataItemInstanceV2* add_repdataitem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >&
      repdataitem() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 Type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCLogicEntityDataV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> graphids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 > repdataitem_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCLevelDataV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCLevelDataV2) */ {
 public:
  inline UGCLevelDataV2() : UGCLevelDataV2(nullptr) {}
  ~UGCLevelDataV2() override;
  explicit PROTOBUF_CONSTEXPR UGCLevelDataV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCLevelDataV2(const UGCLevelDataV2& from);
  UGCLevelDataV2(UGCLevelDataV2&& from) noexcept
    : UGCLevelDataV2() {
    *this = ::std::move(from);
  }

  inline UGCLevelDataV2& operator=(const UGCLevelDataV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCLevelDataV2& operator=(UGCLevelDataV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCLevelDataV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCLevelDataV2* internal_default_instance() {
    return reinterpret_cast<const UGCLevelDataV2*>(
               &_UGCLevelDataV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UGCLevelDataV2& a, UGCLevelDataV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCLevelDataV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCLevelDataV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCLevelDataV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCLevelDataV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCLevelDataV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCLevelDataV2& from) {
    UGCLevelDataV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCLevelDataV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCLevelDataV2";
  }
  protected:
  explicit UGCLevelDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphDataFieldNumber = 1,
    kLogicEntityDatasFieldNumber = 3,
    kEntityReplicationDataFieldNumber = 4,
    kWorkflowFieldNumber = 2,
    kHudPrefabDataFieldNumber = 5,
    kCustomTypeMapFieldNumber = 6,
    kModeSettingFieldNumber = 7,
    kAllSceneDataFieldNumber = 8,
  };
  // repeated .message.UGCGraphDataV2 GraphData = 1;
  int graphdata_size() const;
  private:
  int _internal_graphdata_size() const;
  public:
  void clear_graphdata();
  ::message::UGCGraphDataV2* mutable_graphdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >*
      mutable_graphdata();
  private:
  const ::message::UGCGraphDataV2& _internal_graphdata(int index) const;
  ::message::UGCGraphDataV2* _internal_add_graphdata();
  public:
  const ::message::UGCGraphDataV2& graphdata(int index) const;
  ::message::UGCGraphDataV2* add_graphdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >&
      graphdata() const;

  // repeated .message.UGCLogicEntityDataV2 LogicEntityDatas = 3;
  int logicentitydatas_size() const;
  private:
  int _internal_logicentitydatas_size() const;
  public:
  void clear_logicentitydatas();
  ::message::UGCLogicEntityDataV2* mutable_logicentitydatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV2 >*
      mutable_logicentitydatas();
  private:
  const ::message::UGCLogicEntityDataV2& _internal_logicentitydatas(int index) const;
  ::message::UGCLogicEntityDataV2* _internal_add_logicentitydatas();
  public:
  const ::message::UGCLogicEntityDataV2& logicentitydatas(int index) const;
  ::message::UGCLogicEntityDataV2* add_logicentitydatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV2 >&
      logicentitydatas() const;

  // repeated .message.UGCCustomReplicationDataV2 EntityReplicationData = 4;
  int entityreplicationdata_size() const;
  private:
  int _internal_entityreplicationdata_size() const;
  public:
  void clear_entityreplicationdata();
  ::message::UGCCustomReplicationDataV2* mutable_entityreplicationdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 >*
      mutable_entityreplicationdata();
  private:
  const ::message::UGCCustomReplicationDataV2& _internal_entityreplicationdata(int index) const;
  ::message::UGCCustomReplicationDataV2* _internal_add_entityreplicationdata();
  public:
  const ::message::UGCCustomReplicationDataV2& entityreplicationdata(int index) const;
  ::message::UGCCustomReplicationDataV2* add_entityreplicationdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 >&
      entityreplicationdata() const;

  // .message.UGCWorkflowData Workflow = 2;
  bool has_workflow() const;
  private:
  bool _internal_has_workflow() const;
  public:
  void clear_workflow();
  const ::message::UGCWorkflowData& workflow() const;
  PROTOBUF_NODISCARD ::message::UGCWorkflowData* release_workflow();
  ::message::UGCWorkflowData* mutable_workflow();
  void set_allocated_workflow(::message::UGCWorkflowData* workflow);
  private:
  const ::message::UGCWorkflowData& _internal_workflow() const;
  ::message::UGCWorkflowData* _internal_mutable_workflow();
  public:
  void unsafe_arena_set_allocated_workflow(
      ::message::UGCWorkflowData* workflow);
  ::message::UGCWorkflowData* unsafe_arena_release_workflow();

  // .message.UGCHudPrefabDatas HudPrefabData = 5;
  bool has_hudprefabdata() const;
  private:
  bool _internal_has_hudprefabdata() const;
  public:
  void clear_hudprefabdata();
  const ::message::UGCHudPrefabDatas& hudprefabdata() const;
  PROTOBUF_NODISCARD ::message::UGCHudPrefabDatas* release_hudprefabdata();
  ::message::UGCHudPrefabDatas* mutable_hudprefabdata();
  void set_allocated_hudprefabdata(::message::UGCHudPrefabDatas* hudprefabdata);
  private:
  const ::message::UGCHudPrefabDatas& _internal_hudprefabdata() const;
  ::message::UGCHudPrefabDatas* _internal_mutable_hudprefabdata();
  public:
  void unsafe_arena_set_allocated_hudprefabdata(
      ::message::UGCHudPrefabDatas* hudprefabdata);
  ::message::UGCHudPrefabDatas* unsafe_arena_release_hudprefabdata();

  // .message.UGCTypeTree CustomTypeMap = 6;
  bool has_customtypemap() const;
  private:
  bool _internal_has_customtypemap() const;
  public:
  void clear_customtypemap();
  const ::message::UGCTypeTree& customtypemap() const;
  PROTOBUF_NODISCARD ::message::UGCTypeTree* release_customtypemap();
  ::message::UGCTypeTree* mutable_customtypemap();
  void set_allocated_customtypemap(::message::UGCTypeTree* customtypemap);
  private:
  const ::message::UGCTypeTree& _internal_customtypemap() const;
  ::message::UGCTypeTree* _internal_mutable_customtypemap();
  public:
  void unsafe_arena_set_allocated_customtypemap(
      ::message::UGCTypeTree* customtypemap);
  ::message::UGCTypeTree* unsafe_arena_release_customtypemap();

  // .message.SceneEditModeProtoData ModeSetting = 7;
  bool has_modesetting() const;
  private:
  bool _internal_has_modesetting() const;
  public:
  void clear_modesetting();
  const ::message::SceneEditModeProtoData& modesetting() const;
  PROTOBUF_NODISCARD ::message::SceneEditModeProtoData* release_modesetting();
  ::message::SceneEditModeProtoData* mutable_modesetting();
  void set_allocated_modesetting(::message::SceneEditModeProtoData* modesetting);
  private:
  const ::message::SceneEditModeProtoData& _internal_modesetting() const;
  ::message::SceneEditModeProtoData* _internal_mutable_modesetting();
  public:
  void unsafe_arena_set_allocated_modesetting(
      ::message::SceneEditModeProtoData* modesetting);
  ::message::SceneEditModeProtoData* unsafe_arena_release_modesetting();

  // .message.UGCAllSceneRuntimeData AllSceneData = 8;
  bool has_allscenedata() const;
  private:
  bool _internal_has_allscenedata() const;
  public:
  void clear_allscenedata();
  const ::message::UGCAllSceneRuntimeData& allscenedata() const;
  PROTOBUF_NODISCARD ::message::UGCAllSceneRuntimeData* release_allscenedata();
  ::message::UGCAllSceneRuntimeData* mutable_allscenedata();
  void set_allocated_allscenedata(::message::UGCAllSceneRuntimeData* allscenedata);
  private:
  const ::message::UGCAllSceneRuntimeData& _internal_allscenedata() const;
  ::message::UGCAllSceneRuntimeData* _internal_mutable_allscenedata();
  public:
  void unsafe_arena_set_allocated_allscenedata(
      ::message::UGCAllSceneRuntimeData* allscenedata);
  ::message::UGCAllSceneRuntimeData* unsafe_arena_release_allscenedata();

  // @@protoc_insertion_point(class_scope:message.UGCLevelDataV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 > graphdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV2 > logicentitydatas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 > entityreplicationdata_;
    ::message::UGCWorkflowData* workflow_;
    ::message::UGCHudPrefabDatas* hudprefabdata_;
    ::message::UGCTypeTree* customtypemap_;
    ::message::SceneEditModeProtoData* modesetting_;
    ::message::UGCAllSceneRuntimeData* allscenedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCVersionControlData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCVersionControlData) */ {
 public:
  inline UGCVersionControlData() : UGCVersionControlData(nullptr) {}
  ~UGCVersionControlData() override;
  explicit PROTOBUF_CONSTEXPR UGCVersionControlData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCVersionControlData(const UGCVersionControlData& from);
  UGCVersionControlData(UGCVersionControlData&& from) noexcept
    : UGCVersionControlData() {
    *this = ::std::move(from);
  }

  inline UGCVersionControlData& operator=(const UGCVersionControlData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCVersionControlData& operator=(UGCVersionControlData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCVersionControlData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCVersionControlData* internal_default_instance() {
    return reinterpret_cast<const UGCVersionControlData*>(
               &_UGCVersionControlData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UGCVersionControlData& a, UGCVersionControlData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCVersionControlData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCVersionControlData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCVersionControlData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCVersionControlData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCVersionControlData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCVersionControlData& from) {
    UGCVersionControlData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCVersionControlData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCVersionControlData";
  }
  protected:
  explicit UGCVersionControlData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentDataFieldNumber = 2,
    kDownloadDescFieldNumber = 4,
    kCompatibleVersionFieldNumber = 1,
    kPublicVersionFieldNumber = 3,
  };
  // bytes ContentData = 2;
  void clear_contentdata();
  const std::string& contentdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contentdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contentdata();
  PROTOBUF_NODISCARD std::string* release_contentdata();
  void set_allocated_contentdata(std::string* contentdata);
  private:
  const std::string& _internal_contentdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contentdata(const std::string& value);
  std::string* _internal_mutable_contentdata();
  public:

  // bytes DownloadDesc = 4;
  void clear_downloaddesc();
  const std::string& downloaddesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloaddesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloaddesc();
  PROTOBUF_NODISCARD std::string* release_downloaddesc();
  void set_allocated_downloaddesc(std::string* downloaddesc);
  private:
  const std::string& _internal_downloaddesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloaddesc(const std::string& value);
  std::string* _internal_mutable_downloaddesc();
  public:

  // int32 CompatibleVersion = 1;
  void clear_compatibleversion();
  int32_t compatibleversion() const;
  void set_compatibleversion(int32_t value);
  private:
  int32_t _internal_compatibleversion() const;
  void _internal_set_compatibleversion(int32_t value);
  public:

  // int32 PublicVersion = 3;
  void clear_publicversion();
  int32_t publicversion() const;
  void set_publicversion(int32_t value);
  private:
  int32_t _internal_publicversion() const;
  void _internal_set_publicversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCVersionControlData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contentdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloaddesc_;
    int32_t compatibleversion_;
    int32_t publicversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCMapValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCMapValue) */ {
 public:
  inline UGCMapValue() : UGCMapValue(nullptr) {}
  ~UGCMapValue() override;
  explicit PROTOBUF_CONSTEXPR UGCMapValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCMapValue(const UGCMapValue& from);
  UGCMapValue(UGCMapValue&& from) noexcept
    : UGCMapValue() {
    *this = ::std::move(from);
  }

  inline UGCMapValue& operator=(const UGCMapValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCMapValue& operator=(UGCMapValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCMapValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCMapValue* internal_default_instance() {
    return reinterpret_cast<const UGCMapValue*>(
               &_UGCMapValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UGCMapValue& a, UGCMapValue& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCMapValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCMapValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCMapValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCMapValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCMapValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCMapValue& from) {
    UGCMapValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCMapValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCMapValue";
  }
  protected:
  explicit UGCMapValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated .message.UGCVarValueDataV2 Keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::message::UGCVarValueDataV2* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >*
      mutable_keys();
  private:
  const ::message::UGCVarValueDataV2& _internal_keys(int index) const;
  ::message::UGCVarValueDataV2* _internal_add_keys();
  public:
  const ::message::UGCVarValueDataV2& keys(int index) const;
  ::message::UGCVarValueDataV2* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >&
      keys() const;

  // repeated .message.UGCVarValueDataV2 Values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::message::UGCVarValueDataV2* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >*
      mutable_values();
  private:
  const ::message::UGCVarValueDataV2& _internal_values(int index) const;
  ::message::UGCVarValueDataV2* _internal_add_values();
  public:
  const ::message::UGCVarValueDataV2& values(int index) const;
  ::message::UGCVarValueDataV2* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >&
      values() const;

  // @@protoc_insertion_point(class_scope:message.UGCMapValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 > keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCVarValueDataV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCVarValueDataV2) */ {
 public:
  inline UGCVarValueDataV2() : UGCVarValueDataV2(nullptr) {}
  ~UGCVarValueDataV2() override;
  explicit PROTOBUF_CONSTEXPR UGCVarValueDataV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCVarValueDataV2(const UGCVarValueDataV2& from);
  UGCVarValueDataV2(UGCVarValueDataV2&& from) noexcept
    : UGCVarValueDataV2() {
    *this = ::std::move(from);
  }

  inline UGCVarValueDataV2& operator=(const UGCVarValueDataV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCVarValueDataV2& operator=(UGCVarValueDataV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCVarValueDataV2& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIsList = 1,
    kFuncValue = 3,
    kBoolValue = 4,
    kIntValue = 5,
    kFloatValue = 6,
    kStringValue = 7,
    kVector3Value = 8,
    kEntityRefValue = 9,
    kQuaternionValue = 10,
    kVector2Value = 11,
    kLocStringValue = 12,
    kIsMap = 13,
    VALUE_NOT_SET = 0,
  };

  static inline const UGCVarValueDataV2* internal_default_instance() {
    return reinterpret_cast<const UGCVarValueDataV2*>(
               &_UGCVarValueDataV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UGCVarValueDataV2& a, UGCVarValueDataV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCVarValueDataV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCVarValueDataV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCVarValueDataV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCVarValueDataV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCVarValueDataV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCVarValueDataV2& from) {
    UGCVarValueDataV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCVarValueDataV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCVarValueDataV2";
  }
  protected:
  explicit UGCVarValueDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListValueFieldNumber = 2,
    kMapValueFieldNumber = 14,
    kIsListFieldNumber = 1,
    kFuncValueFieldNumber = 3,
    kBoolValueFieldNumber = 4,
    kIntValueFieldNumber = 5,
    kFloatValueFieldNumber = 6,
    kStringValueFieldNumber = 7,
    kVector3ValueFieldNumber = 8,
    kEntityRefValueFieldNumber = 9,
    kQuaternionValueFieldNumber = 10,
    kVector2ValueFieldNumber = 11,
    kLocStringValueFieldNumber = 12,
    kIsMapFieldNumber = 13,
  };
  // repeated .message.UGCVarValueDataV2 ListValue = 2;
  int listvalue_size() const;
  private:
  int _internal_listvalue_size() const;
  public:
  void clear_listvalue();
  ::message::UGCVarValueDataV2* mutable_listvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >*
      mutable_listvalue();
  private:
  const ::message::UGCVarValueDataV2& _internal_listvalue(int index) const;
  ::message::UGCVarValueDataV2* _internal_add_listvalue();
  public:
  const ::message::UGCVarValueDataV2& listvalue(int index) const;
  ::message::UGCVarValueDataV2* add_listvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >&
      listvalue() const;

  // .message.UGCMapValue MapValue = 14;
  bool has_mapvalue() const;
  private:
  bool _internal_has_mapvalue() const;
  public:
  void clear_mapvalue();
  const ::message::UGCMapValue& mapvalue() const;
  PROTOBUF_NODISCARD ::message::UGCMapValue* release_mapvalue();
  ::message::UGCMapValue* mutable_mapvalue();
  void set_allocated_mapvalue(::message::UGCMapValue* mapvalue);
  private:
  const ::message::UGCMapValue& _internal_mapvalue() const;
  ::message::UGCMapValue* _internal_mutable_mapvalue();
  public:
  void unsafe_arena_set_allocated_mapvalue(
      ::message::UGCMapValue* mapvalue);
  ::message::UGCMapValue* unsafe_arena_release_mapvalue();

  // bool IsList = 1;
  bool has_islist() const;
  private:
  bool _internal_has_islist() const;
  public:
  void clear_islist();
  bool islist() const;
  void set_islist(bool value);
  private:
  bool _internal_islist() const;
  void _internal_set_islist(bool value);
  public:

  // .message.UGCFuncCallerDataV2 FuncValue = 3;
  bool has_funcvalue() const;
  private:
  bool _internal_has_funcvalue() const;
  public:
  void clear_funcvalue();
  const ::message::UGCFuncCallerDataV2& funcvalue() const;
  PROTOBUF_NODISCARD ::message::UGCFuncCallerDataV2* release_funcvalue();
  ::message::UGCFuncCallerDataV2* mutable_funcvalue();
  void set_allocated_funcvalue(::message::UGCFuncCallerDataV2* funcvalue);
  private:
  const ::message::UGCFuncCallerDataV2& _internal_funcvalue() const;
  ::message::UGCFuncCallerDataV2* _internal_mutable_funcvalue();
  public:
  void unsafe_arena_set_allocated_funcvalue(
      ::message::UGCFuncCallerDataV2* funcvalue);
  ::message::UGCFuncCallerDataV2* unsafe_arena_release_funcvalue();

  // bool BoolValue = 4;
  bool has_boolvalue() const;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // int32 IntValue = 5;
  bool has_intvalue() const;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  int32_t intvalue() const;
  void set_intvalue(int32_t value);
  private:
  int32_t _internal_intvalue() const;
  void _internal_set_intvalue(int32_t value);
  public:

  // float FloatValue = 6;
  bool has_floatvalue() const;
  private:
  bool _internal_has_floatvalue() const;
  public:
  void clear_floatvalue();
  float floatvalue() const;
  void set_floatvalue(float value);
  private:
  float _internal_floatvalue() const;
  void _internal_set_floatvalue(float value);
  public:

  // string StringValue = 7;
  bool has_stringvalue() const;
  private:
  bool _internal_has_stringvalue() const;
  public:
  void clear_stringvalue();
  const std::string& stringvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringvalue();
  PROTOBUF_NODISCARD std::string* release_stringvalue();
  void set_allocated_stringvalue(std::string* stringvalue);
  private:
  const std::string& _internal_stringvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringvalue(const std::string& value);
  std::string* _internal_mutable_stringvalue();
  public:

  // .message.ProtoBuffVector3 Vector3Value = 8;
  bool has_vector3value() const;
  private:
  bool _internal_has_vector3value() const;
  public:
  void clear_vector3value();
  const ::message::ProtoBuffVector3& vector3value() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_vector3value();
  ::message::ProtoBuffVector3* mutable_vector3value();
  void set_allocated_vector3value(::message::ProtoBuffVector3* vector3value);
  private:
  const ::message::ProtoBuffVector3& _internal_vector3value() const;
  ::message::ProtoBuffVector3* _internal_mutable_vector3value();
  public:
  void unsafe_arena_set_allocated_vector3value(
      ::message::ProtoBuffVector3* vector3value);
  ::message::ProtoBuffVector3* unsafe_arena_release_vector3value();

  // string EntityRefValue = 9;
  bool has_entityrefvalue() const;
  private:
  bool _internal_has_entityrefvalue() const;
  public:
  void clear_entityrefvalue();
  const std::string& entityrefvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entityrefvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entityrefvalue();
  PROTOBUF_NODISCARD std::string* release_entityrefvalue();
  void set_allocated_entityrefvalue(std::string* entityrefvalue);
  private:
  const std::string& _internal_entityrefvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entityrefvalue(const std::string& value);
  std::string* _internal_mutable_entityrefvalue();
  public:

  // .message.ProtoBuffQuaternion QuaternionValue = 10;
  bool has_quaternionvalue() const;
  private:
  bool _internal_has_quaternionvalue() const;
  public:
  void clear_quaternionvalue();
  const ::message::ProtoBuffQuaternion& quaternionvalue() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffQuaternion* release_quaternionvalue();
  ::message::ProtoBuffQuaternion* mutable_quaternionvalue();
  void set_allocated_quaternionvalue(::message::ProtoBuffQuaternion* quaternionvalue);
  private:
  const ::message::ProtoBuffQuaternion& _internal_quaternionvalue() const;
  ::message::ProtoBuffQuaternion* _internal_mutable_quaternionvalue();
  public:
  void unsafe_arena_set_allocated_quaternionvalue(
      ::message::ProtoBuffQuaternion* quaternionvalue);
  ::message::ProtoBuffQuaternion* unsafe_arena_release_quaternionvalue();

  // .message.ProtoBuffVector2 Vector2Value = 11;
  bool has_vector2value() const;
  private:
  bool _internal_has_vector2value() const;
  public:
  void clear_vector2value();
  const ::message::ProtoBuffVector2& vector2value() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_vector2value();
  ::message::ProtoBuffVector2* mutable_vector2value();
  void set_allocated_vector2value(::message::ProtoBuffVector2* vector2value);
  private:
  const ::message::ProtoBuffVector2& _internal_vector2value() const;
  ::message::ProtoBuffVector2* _internal_mutable_vector2value();
  public:
  void unsafe_arena_set_allocated_vector2value(
      ::message::ProtoBuffVector2* vector2value);
  ::message::ProtoBuffVector2* unsafe_arena_release_vector2value();

  // string LocStringValue = 12;
  bool has_locstringvalue() const;
  private:
  bool _internal_has_locstringvalue() const;
  public:
  void clear_locstringvalue();
  const std::string& locstringvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locstringvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locstringvalue();
  PROTOBUF_NODISCARD std::string* release_locstringvalue();
  void set_allocated_locstringvalue(std::string* locstringvalue);
  private:
  const std::string& _internal_locstringvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locstringvalue(const std::string& value);
  std::string* _internal_mutable_locstringvalue();
  public:

  // bool IsMap = 13;
  bool has_ismap() const;
  private:
  bool _internal_has_ismap() const;
  public:
  void clear_ismap();
  bool ismap() const;
  void set_ismap(bool value);
  private:
  bool _internal_ismap() const;
  void _internal_set_ismap(bool value);
  public:

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:message.UGCVarValueDataV2)
 private:
  class _Internal;
  void set_has_islist();
  void set_has_funcvalue();
  void set_has_boolvalue();
  void set_has_intvalue();
  void set_has_floatvalue();
  void set_has_stringvalue();
  void set_has_vector3value();
  void set_has_entityrefvalue();
  void set_has_quaternionvalue();
  void set_has_vector2value();
  void set_has_locstringvalue();
  void set_has_ismap();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 > listvalue_;
    ::message::UGCMapValue* mapvalue_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool islist_;
      ::message::UGCFuncCallerDataV2* funcvalue_;
      bool boolvalue_;
      int32_t intvalue_;
      float floatvalue_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringvalue_;
      ::message::ProtoBuffVector3* vector3value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entityrefvalue_;
      ::message::ProtoBuffQuaternion* quaternionvalue_;
      ::message::ProtoBuffVector2* vector2value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locstringvalue_;
      bool ismap_;
    } Value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCFuncDefParamData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCFuncDefParamData) */ {
 public:
  inline UGCFuncDefParamData() : UGCFuncDefParamData(nullptr) {}
  ~UGCFuncDefParamData() override;
  explicit PROTOBUF_CONSTEXPR UGCFuncDefParamData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCFuncDefParamData(const UGCFuncDefParamData& from);
  UGCFuncDefParamData(UGCFuncDefParamData&& from) noexcept
    : UGCFuncDefParamData() {
    *this = ::std::move(from);
  }

  inline UGCFuncDefParamData& operator=(const UGCFuncDefParamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCFuncDefParamData& operator=(UGCFuncDefParamData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCFuncDefParamData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCFuncDefParamData* internal_default_instance() {
    return reinterpret_cast<const UGCFuncDefParamData*>(
               &_UGCFuncDefParamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UGCFuncDefParamData& a, UGCFuncDefParamData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCFuncDefParamData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCFuncDefParamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCFuncDefParamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCFuncDefParamData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCFuncDefParamData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCFuncDefParamData& from) {
    UGCFuncDefParamData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCFuncDefParamData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCFuncDefParamData";
  }
  protected:
  explicit UGCFuncDefParamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsUpvalueFieldNumber = 1,
    kTypeFieldNumber = 2,
    kOutTypeFieldNumber = 3,
  };
  // bool IsUpvalue = 1;
  void clear_isupvalue();
  bool isupvalue() const;
  void set_isupvalue(bool value);
  private:
  bool _internal_isupvalue() const;
  void _internal_set_isupvalue(bool value);
  public:

  // int32 Type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 OutType = 3;
  void clear_outtype();
  int32_t outtype() const;
  void set_outtype(int32_t value);
  private:
  int32_t _internal_outtype() const;
  void _internal_set_outtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCFuncDefParamData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool isupvalue_;
    int32_t type_;
    int32_t outtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCFuncCallerDataV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCFuncCallerDataV2) */ {
 public:
  inline UGCFuncCallerDataV2() : UGCFuncCallerDataV2(nullptr) {}
  ~UGCFuncCallerDataV2() override;
  explicit PROTOBUF_CONSTEXPR UGCFuncCallerDataV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCFuncCallerDataV2(const UGCFuncCallerDataV2& from);
  UGCFuncCallerDataV2(UGCFuncCallerDataV2&& from) noexcept
    : UGCFuncCallerDataV2() {
    *this = ::std::move(from);
  }

  inline UGCFuncCallerDataV2& operator=(const UGCFuncCallerDataV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCFuncCallerDataV2& operator=(UGCFuncCallerDataV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCFuncCallerDataV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCFuncCallerDataV2* internal_default_instance() {
    return reinterpret_cast<const UGCFuncCallerDataV2*>(
               &_UGCFuncCallerDataV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(UGCFuncCallerDataV2& a, UGCFuncCallerDataV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCFuncCallerDataV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCFuncCallerDataV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCFuncCallerDataV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCFuncCallerDataV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCFuncCallerDataV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCFuncCallerDataV2& from) {
    UGCFuncCallerDataV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCFuncCallerDataV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCFuncCallerDataV2";
  }
  protected:
  explicit UGCFuncCallerDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 4,
    kSubCallerDataFieldNumber = 5,
    kParamTypesFieldNumber = 7,
    kDefParamInfosFieldNumber = 8,
    kIDFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kUseUpvalueFieldNumber = 6,
  };
  // repeated .message.UGCVarValueDataV2 Params = 4;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::message::UGCVarValueDataV2* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >*
      mutable_params();
  private:
  const ::message::UGCVarValueDataV2& _internal_params(int index) const;
  ::message::UGCVarValueDataV2* _internal_add_params();
  public:
  const ::message::UGCVarValueDataV2& params(int index) const;
  ::message::UGCVarValueDataV2* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >&
      params() const;

  // repeated .message.UGCFuncCallerDataV2 SubCallerData = 5;
  int subcallerdata_size() const;
  private:
  int _internal_subcallerdata_size() const;
  public:
  void clear_subcallerdata();
  ::message::UGCFuncCallerDataV2* mutable_subcallerdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 >*
      mutable_subcallerdata();
  private:
  const ::message::UGCFuncCallerDataV2& _internal_subcallerdata(int index) const;
  ::message::UGCFuncCallerDataV2* _internal_add_subcallerdata();
  public:
  const ::message::UGCFuncCallerDataV2& subcallerdata(int index) const;
  ::message::UGCFuncCallerDataV2* add_subcallerdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 >&
      subcallerdata() const;

  // repeated int32 ParamTypes = 7;
  int paramtypes_size() const;
  private:
  int _internal_paramtypes_size() const;
  public:
  void clear_paramtypes();
  private:
  int32_t _internal_paramtypes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_paramtypes() const;
  void _internal_add_paramtypes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_paramtypes();
  public:
  int32_t paramtypes(int index) const;
  void set_paramtypes(int index, int32_t value);
  void add_paramtypes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      paramtypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_paramtypes();

  // repeated .message.UGCFuncDefParamData DefParamInfos = 8;
  int defparaminfos_size() const;
  private:
  int _internal_defparaminfos_size() const;
  public:
  void clear_defparaminfos();
  ::message::UGCFuncDefParamData* mutable_defparaminfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncDefParamData >*
      mutable_defparaminfos();
  private:
  const ::message::UGCFuncDefParamData& _internal_defparaminfos(int index) const;
  ::message::UGCFuncDefParamData* _internal_add_defparaminfos();
  public:
  const ::message::UGCFuncDefParamData& defparaminfos(int index) const;
  ::message::UGCFuncDefParamData* add_defparaminfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncDefParamData >&
      defparaminfos() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 Type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // bool UseUpvalue = 6;
  void clear_useupvalue();
  bool useupvalue() const;
  void set_useupvalue(bool value);
  private:
  bool _internal_useupvalue() const;
  void _internal_set_useupvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCFuncCallerDataV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 > params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 > subcallerdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > paramtypes_;
    mutable std::atomic<int> _paramtypes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncDefParamData > defparaminfos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t type_;
    bool useupvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCVarDefineDataV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCVarDefineDataV2) */ {
 public:
  inline UGCVarDefineDataV2() : UGCVarDefineDataV2(nullptr) {}
  ~UGCVarDefineDataV2() override;
  explicit PROTOBUF_CONSTEXPR UGCVarDefineDataV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCVarDefineDataV2(const UGCVarDefineDataV2& from);
  UGCVarDefineDataV2(UGCVarDefineDataV2&& from) noexcept
    : UGCVarDefineDataV2() {
    *this = ::std::move(from);
  }

  inline UGCVarDefineDataV2& operator=(const UGCVarDefineDataV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCVarDefineDataV2& operator=(UGCVarDefineDataV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCVarDefineDataV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCVarDefineDataV2* internal_default_instance() {
    return reinterpret_cast<const UGCVarDefineDataV2*>(
               &_UGCVarDefineDataV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UGCVarDefineDataV2& a, UGCVarDefineDataV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCVarDefineDataV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCVarDefineDataV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCVarDefineDataV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCVarDefineDataV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCVarDefineDataV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCVarDefineDataV2& from) {
    UGCVarDefineDataV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCVarDefineDataV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCVarDefineDataV2";
  }
  protected:
  explicit UGCVarDefineDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kNameFieldNumber = 2,
    kValueFieldNumber = 4,
    kTypeIDFieldNumber = 3,
  };
  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .message.UGCVarValueDataV2 Value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::message::UGCVarValueDataV2& value() const;
  PROTOBUF_NODISCARD ::message::UGCVarValueDataV2* release_value();
  ::message::UGCVarValueDataV2* mutable_value();
  void set_allocated_value(::message::UGCVarValueDataV2* value);
  private:
  const ::message::UGCVarValueDataV2& _internal_value() const;
  ::message::UGCVarValueDataV2* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::message::UGCVarValueDataV2* value);
  ::message::UGCVarValueDataV2* unsafe_arena_release_value();

  // int32 TypeID = 3;
  void clear_typeid_();
  int32_t typeid_() const;
  void set_typeid_(int32_t value);
  private:
  int32_t _internal_typeid_() const;
  void _internal_set_typeid_(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCVarDefineDataV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::message::UGCVarValueDataV2* value_;
    int32_t typeid__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCRuleDataV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCRuleDataV2) */ {
 public:
  inline UGCRuleDataV2() : UGCRuleDataV2(nullptr) {}
  ~UGCRuleDataV2() override;
  explicit PROTOBUF_CONSTEXPR UGCRuleDataV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCRuleDataV2(const UGCRuleDataV2& from);
  UGCRuleDataV2(UGCRuleDataV2&& from) noexcept
    : UGCRuleDataV2() {
    *this = ::std::move(from);
  }

  inline UGCRuleDataV2& operator=(const UGCRuleDataV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCRuleDataV2& operator=(UGCRuleDataV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCRuleDataV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCRuleDataV2* internal_default_instance() {
    return reinterpret_cast<const UGCRuleDataV2*>(
               &_UGCRuleDataV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(UGCRuleDataV2& a, UGCRuleDataV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCRuleDataV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCRuleDataV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCRuleDataV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCRuleDataV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCRuleDataV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCRuleDataV2& from) {
    UGCRuleDataV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCRuleDataV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCRuleDataV2";
  }
  protected:
  explicit UGCRuleDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallerDataFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // .message.UGCFuncCallerDataV2 CallerData = 2;
  bool has_callerdata() const;
  private:
  bool _internal_has_callerdata() const;
  public:
  void clear_callerdata();
  const ::message::UGCFuncCallerDataV2& callerdata() const;
  PROTOBUF_NODISCARD ::message::UGCFuncCallerDataV2* release_callerdata();
  ::message::UGCFuncCallerDataV2* mutable_callerdata();
  void set_allocated_callerdata(::message::UGCFuncCallerDataV2* callerdata);
  private:
  const ::message::UGCFuncCallerDataV2& _internal_callerdata() const;
  ::message::UGCFuncCallerDataV2* _internal_mutable_callerdata();
  public:
  void unsafe_arena_set_allocated_callerdata(
      ::message::UGCFuncCallerDataV2* callerdata);
  ::message::UGCFuncCallerDataV2* unsafe_arena_release_callerdata();

  // int32 EventType = 1;
  void clear_eventtype();
  int32_t eventtype() const;
  void set_eventtype(int32_t value);
  private:
  int32_t _internal_eventtype() const;
  void _internal_set_eventtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCRuleDataV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCFuncCallerDataV2* callerdata_;
    int32_t eventtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCGraphDataV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCGraphDataV2) */ {
 public:
  inline UGCGraphDataV2() : UGCGraphDataV2(nullptr) {}
  ~UGCGraphDataV2() override;
  explicit PROTOBUF_CONSTEXPR UGCGraphDataV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCGraphDataV2(const UGCGraphDataV2& from);
  UGCGraphDataV2(UGCGraphDataV2&& from) noexcept
    : UGCGraphDataV2() {
    *this = ::std::move(from);
  }

  inline UGCGraphDataV2& operator=(const UGCGraphDataV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCGraphDataV2& operator=(UGCGraphDataV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCGraphDataV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCGraphDataV2* internal_default_instance() {
    return reinterpret_cast<const UGCGraphDataV2*>(
               &_UGCGraphDataV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UGCGraphDataV2& a, UGCGraphDataV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCGraphDataV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCGraphDataV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCGraphDataV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCGraphDataV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCGraphDataV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCGraphDataV2& from) {
    UGCGraphDataV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCGraphDataV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCGraphDataV2";
  }
  protected:
  explicit UGCGraphDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 2,
    kVariablesFieldNumber = 3,
    kFunctionsFieldNumber = 4,
    kIDFieldNumber = 1,
    kNameFieldNumber = 5,
    kDeclareFieldNumber = 6,
  };
  // repeated .message.UGCRuleDataV2 Rules = 2;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  ::message::UGCRuleDataV2* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleDataV2 >*
      mutable_rules();
  private:
  const ::message::UGCRuleDataV2& _internal_rules(int index) const;
  ::message::UGCRuleDataV2* _internal_add_rules();
  public:
  const ::message::UGCRuleDataV2& rules(int index) const;
  ::message::UGCRuleDataV2* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleDataV2 >&
      rules() const;

  // repeated .message.UGCVarDefineDataV2 Variables = 3;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::message::UGCVarDefineDataV2* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineDataV2 >*
      mutable_variables();
  private:
  const ::message::UGCVarDefineDataV2& _internal_variables(int index) const;
  ::message::UGCVarDefineDataV2* _internal_add_variables();
  public:
  const ::message::UGCVarDefineDataV2& variables(int index) const;
  ::message::UGCVarDefineDataV2* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineDataV2 >&
      variables() const;

  // repeated .message.UGCFuncCallerDataV2 Functions = 4;
  int functions_size() const;
  private:
  int _internal_functions_size() const;
  public:
  void clear_functions();
  ::message::UGCFuncCallerDataV2* mutable_functions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 >*
      mutable_functions();
  private:
  const ::message::UGCFuncCallerDataV2& _internal_functions(int index) const;
  ::message::UGCFuncCallerDataV2* _internal_add_functions();
  public:
  const ::message::UGCFuncCallerDataV2& functions(int index) const;
  ::message::UGCFuncCallerDataV2* add_functions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 >&
      functions() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 declare = 6;
  void clear_declare();
  int32_t declare() const;
  void set_declare(int32_t value);
  private:
  int32_t _internal_declare() const;
  void _internal_set_declare(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCGraphDataV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleDataV2 > rules_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineDataV2 > variables_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 > functions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t declare_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCustomReplicationDataItemInstanceV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCustomReplicationDataItemInstanceV2) */ {
 public:
  inline UGCCustomReplicationDataItemInstanceV2() : UGCCustomReplicationDataItemInstanceV2(nullptr) {}
  ~UGCCustomReplicationDataItemInstanceV2() override;
  explicit PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemInstanceV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCustomReplicationDataItemInstanceV2(const UGCCustomReplicationDataItemInstanceV2& from);
  UGCCustomReplicationDataItemInstanceV2(UGCCustomReplicationDataItemInstanceV2&& from) noexcept
    : UGCCustomReplicationDataItemInstanceV2() {
    *this = ::std::move(from);
  }

  inline UGCCustomReplicationDataItemInstanceV2& operator=(const UGCCustomReplicationDataItemInstanceV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCustomReplicationDataItemInstanceV2& operator=(UGCCustomReplicationDataItemInstanceV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCustomReplicationDataItemInstanceV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCustomReplicationDataItemInstanceV2* internal_default_instance() {
    return reinterpret_cast<const UGCCustomReplicationDataItemInstanceV2*>(
               &_UGCCustomReplicationDataItemInstanceV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UGCCustomReplicationDataItemInstanceV2& a, UGCCustomReplicationDataItemInstanceV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCustomReplicationDataItemInstanceV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCustomReplicationDataItemInstanceV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCustomReplicationDataItemInstanceV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCustomReplicationDataItemInstanceV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCustomReplicationDataItemInstanceV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCustomReplicationDataItemInstanceV2& from) {
    UGCCustomReplicationDataItemInstanceV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCustomReplicationDataItemInstanceV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCustomReplicationDataItemInstanceV2";
  }
  protected:
  explicit UGCCustomReplicationDataItemInstanceV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kPropIDFieldNumber = 1,
  };
  // .message.UGCVarValueDataV2 Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::message::UGCVarValueDataV2& value() const;
  PROTOBUF_NODISCARD ::message::UGCVarValueDataV2* release_value();
  ::message::UGCVarValueDataV2* mutable_value();
  void set_allocated_value(::message::UGCVarValueDataV2* value);
  private:
  const ::message::UGCVarValueDataV2& _internal_value() const;
  ::message::UGCVarValueDataV2* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::message::UGCVarValueDataV2* value);
  ::message::UGCVarValueDataV2* unsafe_arena_release_value();

  // int32 PropID = 1;
  void clear_propid();
  int32_t propid() const;
  void set_propid(int32_t value);
  private:
  int32_t _internal_propid() const;
  void _internal_set_propid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCCustomReplicationDataItemInstanceV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCVarValueDataV2* value_;
    int32_t propid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCLogicEntityDataV3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCLogicEntityDataV3) */ {
 public:
  inline UGCLogicEntityDataV3() : UGCLogicEntityDataV3(nullptr) {}
  ~UGCLogicEntityDataV3() override;
  explicit PROTOBUF_CONSTEXPR UGCLogicEntityDataV3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCLogicEntityDataV3(const UGCLogicEntityDataV3& from);
  UGCLogicEntityDataV3(UGCLogicEntityDataV3&& from) noexcept
    : UGCLogicEntityDataV3() {
    *this = ::std::move(from);
  }

  inline UGCLogicEntityDataV3& operator=(const UGCLogicEntityDataV3& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCLogicEntityDataV3& operator=(UGCLogicEntityDataV3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCLogicEntityDataV3& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCLogicEntityDataV3* internal_default_instance() {
    return reinterpret_cast<const UGCLogicEntityDataV3*>(
               &_UGCLogicEntityDataV3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(UGCLogicEntityDataV3& a, UGCLogicEntityDataV3& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCLogicEntityDataV3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCLogicEntityDataV3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCLogicEntityDataV3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCLogicEntityDataV3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCLogicEntityDataV3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCLogicEntityDataV3& from) {
    UGCLogicEntityDataV3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCLogicEntityDataV3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCLogicEntityDataV3";
  }
  protected:
  explicit UGCLogicEntityDataV3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIDsFieldNumber = 2,
    kGraphIDsFieldNumber = 3,
    kRepDataItemFieldNumber = 4,
    kIDFieldNumber = 1,
    kRefPrefabIDFieldNumber = 5,
  };
  // repeated int32 ComponentIDs = 2;
  int componentids_size() const;
  private:
  int _internal_componentids_size() const;
  public:
  void clear_componentids();
  private:
  int32_t _internal_componentids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_componentids() const;
  void _internal_add_componentids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_componentids();
  public:
  int32_t componentids(int index) const;
  void set_componentids(int index, int32_t value);
  void add_componentids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      componentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_componentids();

  // repeated string GraphIDs = 3;
  int graphids_size() const;
  private:
  int _internal_graphids_size() const;
  public:
  void clear_graphids();
  const std::string& graphids(int index) const;
  std::string* mutable_graphids(int index);
  void set_graphids(int index, const std::string& value);
  void set_graphids(int index, std::string&& value);
  void set_graphids(int index, const char* value);
  void set_graphids(int index, const char* value, size_t size);
  std::string* add_graphids();
  void add_graphids(const std::string& value);
  void add_graphids(std::string&& value);
  void add_graphids(const char* value);
  void add_graphids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& graphids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_graphids();
  private:
  const std::string& _internal_graphids(int index) const;
  std::string* _internal_add_graphids();
  public:

  // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
  int repdataitem_size() const;
  private:
  int _internal_repdataitem_size() const;
  public:
  void clear_repdataitem();
  ::message::UGCCustomReplicationDataItemInstanceV2* mutable_repdataitem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >*
      mutable_repdataitem();
  private:
  const ::message::UGCCustomReplicationDataItemInstanceV2& _internal_repdataitem(int index) const;
  ::message::UGCCustomReplicationDataItemInstanceV2* _internal_add_repdataitem();
  public:
  const ::message::UGCCustomReplicationDataItemInstanceV2& repdataitem(int index) const;
  ::message::UGCCustomReplicationDataItemInstanceV2* add_repdataitem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >&
      repdataitem() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string RefPrefabID = 5;
  void clear_refprefabid();
  const std::string& refprefabid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refprefabid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refprefabid();
  PROTOBUF_NODISCARD std::string* release_refprefabid();
  void set_allocated_refprefabid(std::string* refprefabid);
  private:
  const std::string& _internal_refprefabid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refprefabid(const std::string& value);
  std::string* _internal_mutable_refprefabid();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCLogicEntityDataV3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > componentids_;
    mutable std::atomic<int> _componentids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> graphids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 > repdataitem_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refprefabid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCustomReplicationDataItemV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCustomReplicationDataItemV2) */ {
 public:
  inline UGCCustomReplicationDataItemV2() : UGCCustomReplicationDataItemV2(nullptr) {}
  ~UGCCustomReplicationDataItemV2() override;
  explicit PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCustomReplicationDataItemV2(const UGCCustomReplicationDataItemV2& from);
  UGCCustomReplicationDataItemV2(UGCCustomReplicationDataItemV2&& from) noexcept
    : UGCCustomReplicationDataItemV2() {
    *this = ::std::move(from);
  }

  inline UGCCustomReplicationDataItemV2& operator=(const UGCCustomReplicationDataItemV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCustomReplicationDataItemV2& operator=(UGCCustomReplicationDataItemV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCustomReplicationDataItemV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCustomReplicationDataItemV2* internal_default_instance() {
    return reinterpret_cast<const UGCCustomReplicationDataItemV2*>(
               &_UGCCustomReplicationDataItemV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UGCCustomReplicationDataItemV2& a, UGCCustomReplicationDataItemV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCustomReplicationDataItemV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCustomReplicationDataItemV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCustomReplicationDataItemV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCustomReplicationDataItemV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCustomReplicationDataItemV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCustomReplicationDataItemV2& from) {
    UGCCustomReplicationDataItemV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCustomReplicationDataItemV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCustomReplicationDataItemV2";
  }
  protected:
  explicit UGCCustomReplicationDataItemV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 3,
    kTypeIDFieldNumber = 2,
    kIndexFieldNumber = 4,
    kOnlyServerFieldNumber = 5,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .message.UGCVarValueDataV2 Value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::message::UGCVarValueDataV2& value() const;
  PROTOBUF_NODISCARD ::message::UGCVarValueDataV2* release_value();
  ::message::UGCVarValueDataV2* mutable_value();
  void set_allocated_value(::message::UGCVarValueDataV2* value);
  private:
  const ::message::UGCVarValueDataV2& _internal_value() const;
  ::message::UGCVarValueDataV2* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::message::UGCVarValueDataV2* value);
  ::message::UGCVarValueDataV2* unsafe_arena_release_value();

  // int32 TypeID = 2;
  void clear_typeid_();
  int32_t typeid_() const;
  void set_typeid_(int32_t value);
  private:
  int32_t _internal_typeid_() const;
  void _internal_set_typeid_(int32_t value);
  public:

  // int32 Index = 4;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // bool OnlyServer = 5;
  void clear_onlyserver();
  bool onlyserver() const;
  void set_onlyserver(bool value);
  private:
  bool _internal_onlyserver() const;
  void _internal_set_onlyserver(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCCustomReplicationDataItemV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::message::UGCVarValueDataV2* value_;
    int32_t typeid__;
    int32_t index_;
    bool onlyserver_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCustomReplicationDataV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCustomReplicationDataV2) */ {
 public:
  inline UGCCustomReplicationDataV2() : UGCCustomReplicationDataV2(nullptr) {}
  ~UGCCustomReplicationDataV2() override;
  explicit PROTOBUF_CONSTEXPR UGCCustomReplicationDataV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCustomReplicationDataV2(const UGCCustomReplicationDataV2& from);
  UGCCustomReplicationDataV2(UGCCustomReplicationDataV2&& from) noexcept
    : UGCCustomReplicationDataV2() {
    *this = ::std::move(from);
  }

  inline UGCCustomReplicationDataV2& operator=(const UGCCustomReplicationDataV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCustomReplicationDataV2& operator=(UGCCustomReplicationDataV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCustomReplicationDataV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCustomReplicationDataV2* internal_default_instance() {
    return reinterpret_cast<const UGCCustomReplicationDataV2*>(
               &_UGCCustomReplicationDataV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UGCCustomReplicationDataV2& a, UGCCustomReplicationDataV2& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCustomReplicationDataV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCustomReplicationDataV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCustomReplicationDataV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCustomReplicationDataV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCustomReplicationDataV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCustomReplicationDataV2& from) {
    UGCCustomReplicationDataV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCustomReplicationDataV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCustomReplicationDataV2";
  }
  protected:
  explicit UGCCustomReplicationDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDataFieldNumber = 2,
    kComponentTypeIDFieldNumber = 1,
  };
  // repeated .message.UGCCustomReplicationDataItemV2 ItemData = 2;
  int itemdata_size() const;
  private:
  int _internal_itemdata_size() const;
  public:
  void clear_itemdata();
  ::message::UGCCustomReplicationDataItemV2* mutable_itemdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemV2 >*
      mutable_itemdata();
  private:
  const ::message::UGCCustomReplicationDataItemV2& _internal_itemdata(int index) const;
  ::message::UGCCustomReplicationDataItemV2* _internal_add_itemdata();
  public:
  const ::message::UGCCustomReplicationDataItemV2& itemdata(int index) const;
  ::message::UGCCustomReplicationDataItemV2* add_itemdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemV2 >&
      itemdata() const;

  // int32 ComponentTypeID = 1;
  void clear_componenttypeid();
  int32_t componenttypeid() const;
  void set_componenttypeid(int32_t value);
  private:
  int32_t _internal_componenttypeid() const;
  void _internal_set_componenttypeid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCCustomReplicationDataV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemV2 > itemdata_;
    int32_t componenttypeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCInternalLibrary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCInternalLibrary) */ {
 public:
  inline UGCInternalLibrary() : UGCInternalLibrary(nullptr) {}
  ~UGCInternalLibrary() override;
  explicit PROTOBUF_CONSTEXPR UGCInternalLibrary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCInternalLibrary(const UGCInternalLibrary& from);
  UGCInternalLibrary(UGCInternalLibrary&& from) noexcept
    : UGCInternalLibrary() {
    *this = ::std::move(from);
  }

  inline UGCInternalLibrary& operator=(const UGCInternalLibrary& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCInternalLibrary& operator=(UGCInternalLibrary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCInternalLibrary& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCInternalLibrary* internal_default_instance() {
    return reinterpret_cast<const UGCInternalLibrary*>(
               &_UGCInternalLibrary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UGCInternalLibrary& a, UGCInternalLibrary& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCInternalLibrary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCInternalLibrary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCInternalLibrary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCInternalLibrary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCInternalLibrary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCInternalLibrary& from) {
    UGCInternalLibrary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCInternalLibrary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCInternalLibrary";
  }
  protected:
  explicit UGCInternalLibrary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphDataFieldNumber = 1,
    kLogicEntityDatasFieldNumber = 2,
  };
  // repeated .message.UGCGraphDataV2 GraphData = 1;
  int graphdata_size() const;
  private:
  int _internal_graphdata_size() const;
  public:
  void clear_graphdata();
  ::message::UGCGraphDataV2* mutable_graphdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >*
      mutable_graphdata();
  private:
  const ::message::UGCGraphDataV2& _internal_graphdata(int index) const;
  ::message::UGCGraphDataV2* _internal_add_graphdata();
  public:
  const ::message::UGCGraphDataV2& graphdata(int index) const;
  ::message::UGCGraphDataV2* add_graphdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >&
      graphdata() const;

  // repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 2;
  int logicentitydatas_size() const;
  private:
  int _internal_logicentitydatas_size() const;
  public:
  void clear_logicentitydatas();
  ::message::UGCLogicEntityDataV3* mutable_logicentitydatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 >*
      mutable_logicentitydatas();
  private:
  const ::message::UGCLogicEntityDataV3& _internal_logicentitydatas(int index) const;
  ::message::UGCLogicEntityDataV3* _internal_add_logicentitydatas();
  public:
  const ::message::UGCLogicEntityDataV3& logicentitydatas(int index) const;
  ::message::UGCLogicEntityDataV3* add_logicentitydatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 >&
      logicentitydatas() const;

  // @@protoc_insertion_point(class_scope:message.UGCInternalLibrary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 > graphdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 > logicentitydatas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCWorkflowData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCWorkflowData) */ {
 public:
  inline UGCWorkflowData() : UGCWorkflowData(nullptr) {}
  ~UGCWorkflowData() override;
  explicit PROTOBUF_CONSTEXPR UGCWorkflowData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCWorkflowData(const UGCWorkflowData& from);
  UGCWorkflowData(UGCWorkflowData&& from) noexcept
    : UGCWorkflowData() {
    *this = ::std::move(from);
  }

  inline UGCWorkflowData& operator=(const UGCWorkflowData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCWorkflowData& operator=(UGCWorkflowData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCWorkflowData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCWorkflowData* internal_default_instance() {
    return reinterpret_cast<const UGCWorkflowData*>(
               &_UGCWorkflowData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(UGCWorkflowData& a, UGCWorkflowData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCWorkflowData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCWorkflowData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCWorkflowData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCWorkflowData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCWorkflowData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCWorkflowData& from) {
    UGCWorkflowData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCWorkflowData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCWorkflowData";
  }
  protected:
  explicit UGCWorkflowData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseDataFieldNumber = 1,
    kRoundDataFieldNumber = 2,
    kWorkflowSequenceFieldNumber = 3,
  };
  // repeated .message.UGCPhaseData PhaseData = 1;
  int phasedata_size() const;
  private:
  int _internal_phasedata_size() const;
  public:
  void clear_phasedata();
  ::message::UGCPhaseData* mutable_phasedata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData >*
      mutable_phasedata();
  private:
  const ::message::UGCPhaseData& _internal_phasedata(int index) const;
  ::message::UGCPhaseData* _internal_add_phasedata();
  public:
  const ::message::UGCPhaseData& phasedata(int index) const;
  ::message::UGCPhaseData* add_phasedata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData >&
      phasedata() const;

  // repeated .message.UGCRoundData RoundData = 2;
  int rounddata_size() const;
  private:
  int _internal_rounddata_size() const;
  public:
  void clear_rounddata();
  ::message::UGCRoundData* mutable_rounddata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRoundData >*
      mutable_rounddata();
  private:
  const ::message::UGCRoundData& _internal_rounddata(int index) const;
  ::message::UGCRoundData* _internal_add_rounddata();
  public:
  const ::message::UGCRoundData& rounddata(int index) const;
  ::message::UGCRoundData* add_rounddata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRoundData >&
      rounddata() const;

  // .message.UGCWorkflowSequence WorkflowSequence = 3;
  bool has_workflowsequence() const;
  private:
  bool _internal_has_workflowsequence() const;
  public:
  void clear_workflowsequence();
  const ::message::UGCWorkflowSequence& workflowsequence() const;
  PROTOBUF_NODISCARD ::message::UGCWorkflowSequence* release_workflowsequence();
  ::message::UGCWorkflowSequence* mutable_workflowsequence();
  void set_allocated_workflowsequence(::message::UGCWorkflowSequence* workflowsequence);
  private:
  const ::message::UGCWorkflowSequence& _internal_workflowsequence() const;
  ::message::UGCWorkflowSequence* _internal_mutable_workflowsequence();
  public:
  void unsafe_arena_set_allocated_workflowsequence(
      ::message::UGCWorkflowSequence* workflowsequence);
  ::message::UGCWorkflowSequence* unsafe_arena_release_workflowsequence();

  // @@protoc_insertion_point(class_scope:message.UGCWorkflowData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData > phasedata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRoundData > rounddata_;
    ::message::UGCWorkflowSequence* workflowsequence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCLocItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCLocItem) */ {
 public:
  inline UGCLocItem() : UGCLocItem(nullptr) {}
  ~UGCLocItem() override;
  explicit PROTOBUF_CONSTEXPR UGCLocItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCLocItem(const UGCLocItem& from);
  UGCLocItem(UGCLocItem&& from) noexcept
    : UGCLocItem() {
    *this = ::std::move(from);
  }

  inline UGCLocItem& operator=(const UGCLocItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCLocItem& operator=(UGCLocItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCLocItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCLocItem* internal_default_instance() {
    return reinterpret_cast<const UGCLocItem*>(
               &_UGCLocItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(UGCLocItem& a, UGCLocItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCLocItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCLocItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCLocItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCLocItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCLocItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCLocItem& from) {
    UGCLocItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCLocItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCLocItem";
  }
  protected:
  explicit UGCLocItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 2,
    kLangFieldNumber = 1,
  };
  // string Translation = 2;
  void clear_translation();
  const std::string& translation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_translation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_translation();
  PROTOBUF_NODISCARD std::string* release_translation();
  void set_allocated_translation(std::string* translation);
  private:
  const std::string& _internal_translation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_translation(const std::string& value);
  std::string* _internal_mutable_translation();
  public:

  // .message.EUGCLocLanguage Lang = 1;
  void clear_lang();
  ::message::EUGCLocLanguage lang() const;
  void set_lang(::message::EUGCLocLanguage value);
  private:
  ::message::EUGCLocLanguage _internal_lang() const;
  void _internal_set_lang(::message::EUGCLocLanguage value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCLocItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr translation_;
    int lang_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCLocKeyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCLocKeyData) */ {
 public:
  inline UGCLocKeyData() : UGCLocKeyData(nullptr) {}
  ~UGCLocKeyData() override;
  explicit PROTOBUF_CONSTEXPR UGCLocKeyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCLocKeyData(const UGCLocKeyData& from);
  UGCLocKeyData(UGCLocKeyData&& from) noexcept
    : UGCLocKeyData() {
    *this = ::std::move(from);
  }

  inline UGCLocKeyData& operator=(const UGCLocKeyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCLocKeyData& operator=(UGCLocKeyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCLocKeyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCLocKeyData* internal_default_instance() {
    return reinterpret_cast<const UGCLocKeyData*>(
               &_UGCLocKeyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(UGCLocKeyData& a, UGCLocKeyData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCLocKeyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCLocKeyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCLocKeyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCLocKeyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCLocKeyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCLocKeyData& from) {
    UGCLocKeyData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCLocKeyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCLocKeyData";
  }
  protected:
  explicit UGCLocKeyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocListFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .message.UGCLocItem LocList = 2;
  int loclist_size() const;
  private:
  int _internal_loclist_size() const;
  public:
  void clear_loclist();
  ::message::UGCLocItem* mutable_loclist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocItem >*
      mutable_loclist();
  private:
  const ::message::UGCLocItem& _internal_loclist(int index) const;
  ::message::UGCLocItem* _internal_add_loclist();
  public:
  const ::message::UGCLocItem& loclist(int index) const;
  ::message::UGCLocItem* add_loclist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocItem >&
      loclist() const;

  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCLocKeyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocItem > loclist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCLocData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCLocData) */ {
 public:
  inline UGCLocData() : UGCLocData(nullptr) {}
  ~UGCLocData() override;
  explicit PROTOBUF_CONSTEXPR UGCLocData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCLocData(const UGCLocData& from);
  UGCLocData(UGCLocData&& from) noexcept
    : UGCLocData() {
    *this = ::std::move(from);
  }

  inline UGCLocData& operator=(const UGCLocData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCLocData& operator=(UGCLocData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCLocData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCLocData* internal_default_instance() {
    return reinterpret_cast<const UGCLocData*>(
               &_UGCLocData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(UGCLocData& a, UGCLocData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCLocData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCLocData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCLocData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCLocData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCLocData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCLocData& from) {
    UGCLocData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCLocData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCLocData";
  }
  protected:
  explicit UGCLocData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyListFieldNumber = 2,
    kDefaultLangFieldNumber = 1,
  };
  // repeated .message.UGCLocKeyData KeyList = 2;
  int keylist_size() const;
  private:
  int _internal_keylist_size() const;
  public:
  void clear_keylist();
  ::message::UGCLocKeyData* mutable_keylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocKeyData >*
      mutable_keylist();
  private:
  const ::message::UGCLocKeyData& _internal_keylist(int index) const;
  ::message::UGCLocKeyData* _internal_add_keylist();
  public:
  const ::message::UGCLocKeyData& keylist(int index) const;
  ::message::UGCLocKeyData* add_keylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocKeyData >&
      keylist() const;

  // .message.EUGCLocLanguage DefaultLang = 1;
  void clear_defaultlang();
  ::message::EUGCLocLanguage defaultlang() const;
  void set_defaultlang(::message::EUGCLocLanguage value);
  private:
  ::message::EUGCLocLanguage _internal_defaultlang() const;
  void _internal_set_defaultlang(::message::EUGCLocLanguage value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCLocData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocKeyData > keylist_;
    int defaultlang_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCPrefabData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCPrefabData) */ {
 public:
  inline UGCPrefabData() : UGCPrefabData(nullptr) {}
  ~UGCPrefabData() override;
  explicit PROTOBUF_CONSTEXPR UGCPrefabData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCPrefabData(const UGCPrefabData& from);
  UGCPrefabData(UGCPrefabData&& from) noexcept
    : UGCPrefabData() {
    *this = ::std::move(from);
  }

  inline UGCPrefabData& operator=(const UGCPrefabData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCPrefabData& operator=(UGCPrefabData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCPrefabData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCPrefabData* internal_default_instance() {
    return reinterpret_cast<const UGCPrefabData*>(
               &_UGCPrefabData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UGCPrefabData& a, UGCPrefabData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCPrefabData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCPrefabData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCPrefabData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCPrefabData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCPrefabData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCPrefabData& from) {
    UGCPrefabData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCPrefabData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCPrefabData";
  }
  protected:
  explicit UGCPrefabData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityHierachyFieldNumber = 2,
    kIDFieldNumber = 1,
  };
  // repeated .message.UGCTransformNodeData EntityHierachy = 2;
  int entityhierachy_size() const;
  private:
  int _internal_entityhierachy_size() const;
  public:
  void clear_entityhierachy();
  ::message::UGCTransformNodeData* mutable_entityhierachy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData >*
      mutable_entityhierachy();
  private:
  const ::message::UGCTransformNodeData& _internal_entityhierachy(int index) const;
  ::message::UGCTransformNodeData* _internal_add_entityhierachy();
  public:
  const ::message::UGCTransformNodeData& entityhierachy(int index) const;
  ::message::UGCTransformNodeData* add_entityhierachy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData >&
      entityhierachy() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCPrefabData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData > entityhierachy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCustomEventData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCustomEventData) */ {
 public:
  inline UGCCustomEventData() : UGCCustomEventData(nullptr) {}
  ~UGCCustomEventData() override;
  explicit PROTOBUF_CONSTEXPR UGCCustomEventData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCustomEventData(const UGCCustomEventData& from);
  UGCCustomEventData(UGCCustomEventData&& from) noexcept
    : UGCCustomEventData() {
    *this = ::std::move(from);
  }

  inline UGCCustomEventData& operator=(const UGCCustomEventData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCustomEventData& operator=(UGCCustomEventData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCustomEventData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCustomEventData* internal_default_instance() {
    return reinterpret_cast<const UGCCustomEventData*>(
               &_UGCCustomEventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(UGCCustomEventData& a, UGCCustomEventData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCustomEventData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCustomEventData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCustomEventData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCustomEventData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCustomEventData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCustomEventData& from) {
    UGCCustomEventData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCustomEventData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCustomEventData";
  }
  protected:
  explicit UGCCustomEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIDFieldNumber = 1,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 ID = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCCustomEventData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCBTreeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCBTreeData) */ {
 public:
  inline UGCBTreeData() : UGCBTreeData(nullptr) {}
  ~UGCBTreeData() override;
  explicit PROTOBUF_CONSTEXPR UGCBTreeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCBTreeData(const UGCBTreeData& from);
  UGCBTreeData(UGCBTreeData&& from) noexcept
    : UGCBTreeData() {
    *this = ::std::move(from);
  }

  inline UGCBTreeData& operator=(const UGCBTreeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCBTreeData& operator=(UGCBTreeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCBTreeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCBTreeData* internal_default_instance() {
    return reinterpret_cast<const UGCBTreeData*>(
               &_UGCBTreeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(UGCBTreeData& a, UGCBTreeData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCBTreeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCBTreeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCBTreeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCBTreeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCBTreeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCBTreeData& from) {
    UGCBTreeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCBTreeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCBTreeData";
  }
  protected:
  explicit UGCBTreeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes Data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCBTreeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCGameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCGameData) */ {
 public:
  inline UGCGameData() : UGCGameData(nullptr) {}
  ~UGCGameData() override;
  explicit PROTOBUF_CONSTEXPR UGCGameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCGameData(const UGCGameData& from);
  UGCGameData(UGCGameData&& from) noexcept
    : UGCGameData() {
    *this = ::std::move(from);
  }

  inline UGCGameData& operator=(const UGCGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCGameData& operator=(UGCGameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCGameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCGameData* internal_default_instance() {
    return reinterpret_cast<const UGCGameData*>(
               &_UGCGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(UGCGameData& a, UGCGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCGameData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCGameData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCGameData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCGameData& from) {
    UGCGameData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCGameData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCGameData";
  }
  protected:
  explicit UGCGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphDataFieldNumber = 1,
    kLogicEntityDatasFieldNumber = 3,
    kComponentRepDataFieldNumber = 4,
    kPrefabDataFieldNumber = 11,
    kCustomEventDataFieldNumber = 12,
    kBTreeDataFieldNumber = 13,
    kWorkflowFieldNumber = 2,
    kHudPrefabDataFieldNumber = 5,
    kCustomTypeMapFieldNumber = 6,
    kModeSettingFieldNumber = 7,
    kAllSceneDataFieldNumber = 8,
    kLocDataFieldNumber = 9,
    kResourceDataFieldNumber = 10,
  };
  // repeated .message.UGCGraphDataV2 GraphData = 1;
  int graphdata_size() const;
  private:
  int _internal_graphdata_size() const;
  public:
  void clear_graphdata();
  ::message::UGCGraphDataV2* mutable_graphdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >*
      mutable_graphdata();
  private:
  const ::message::UGCGraphDataV2& _internal_graphdata(int index) const;
  ::message::UGCGraphDataV2* _internal_add_graphdata();
  public:
  const ::message::UGCGraphDataV2& graphdata(int index) const;
  ::message::UGCGraphDataV2* add_graphdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >&
      graphdata() const;

  // repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 3;
  int logicentitydatas_size() const;
  private:
  int _internal_logicentitydatas_size() const;
  public:
  void clear_logicentitydatas();
  ::message::UGCLogicEntityDataV3* mutable_logicentitydatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 >*
      mutable_logicentitydatas();
  private:
  const ::message::UGCLogicEntityDataV3& _internal_logicentitydatas(int index) const;
  ::message::UGCLogicEntityDataV3* _internal_add_logicentitydatas();
  public:
  const ::message::UGCLogicEntityDataV3& logicentitydatas(int index) const;
  ::message::UGCLogicEntityDataV3* add_logicentitydatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 >&
      logicentitydatas() const;

  // repeated .message.UGCCustomReplicationDataV2 ComponentRepData = 4;
  int componentrepdata_size() const;
  private:
  int _internal_componentrepdata_size() const;
  public:
  void clear_componentrepdata();
  ::message::UGCCustomReplicationDataV2* mutable_componentrepdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 >*
      mutable_componentrepdata();
  private:
  const ::message::UGCCustomReplicationDataV2& _internal_componentrepdata(int index) const;
  ::message::UGCCustomReplicationDataV2* _internal_add_componentrepdata();
  public:
  const ::message::UGCCustomReplicationDataV2& componentrepdata(int index) const;
  ::message::UGCCustomReplicationDataV2* add_componentrepdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 >&
      componentrepdata() const;

  // repeated .message.UGCPrefabData PrefabData = 11;
  int prefabdata_size() const;
  private:
  int _internal_prefabdata_size() const;
  public:
  void clear_prefabdata();
  ::message::UGCPrefabData* mutable_prefabdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPrefabData >*
      mutable_prefabdata();
  private:
  const ::message::UGCPrefabData& _internal_prefabdata(int index) const;
  ::message::UGCPrefabData* _internal_add_prefabdata();
  public:
  const ::message::UGCPrefabData& prefabdata(int index) const;
  ::message::UGCPrefabData* add_prefabdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPrefabData >&
      prefabdata() const;

  // repeated .message.UGCCustomEventData CustomEventData = 12;
  int customeventdata_size() const;
  private:
  int _internal_customeventdata_size() const;
  public:
  void clear_customeventdata();
  ::message::UGCCustomEventData* mutable_customeventdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomEventData >*
      mutable_customeventdata();
  private:
  const ::message::UGCCustomEventData& _internal_customeventdata(int index) const;
  ::message::UGCCustomEventData* _internal_add_customeventdata();
  public:
  const ::message::UGCCustomEventData& customeventdata(int index) const;
  ::message::UGCCustomEventData* add_customeventdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomEventData >&
      customeventdata() const;

  // repeated .message.UGCBTreeData BTreeData = 13;
  int btreedata_size() const;
  private:
  int _internal_btreedata_size() const;
  public:
  void clear_btreedata();
  ::message::UGCBTreeData* mutable_btreedata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCBTreeData >*
      mutable_btreedata();
  private:
  const ::message::UGCBTreeData& _internal_btreedata(int index) const;
  ::message::UGCBTreeData* _internal_add_btreedata();
  public:
  const ::message::UGCBTreeData& btreedata(int index) const;
  ::message::UGCBTreeData* add_btreedata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCBTreeData >&
      btreedata() const;

  // .message.UGCWorkflowData Workflow = 2;
  bool has_workflow() const;
  private:
  bool _internal_has_workflow() const;
  public:
  void clear_workflow();
  const ::message::UGCWorkflowData& workflow() const;
  PROTOBUF_NODISCARD ::message::UGCWorkflowData* release_workflow();
  ::message::UGCWorkflowData* mutable_workflow();
  void set_allocated_workflow(::message::UGCWorkflowData* workflow);
  private:
  const ::message::UGCWorkflowData& _internal_workflow() const;
  ::message::UGCWorkflowData* _internal_mutable_workflow();
  public:
  void unsafe_arena_set_allocated_workflow(
      ::message::UGCWorkflowData* workflow);
  ::message::UGCWorkflowData* unsafe_arena_release_workflow();

  // .message.UGCHudPrefabDatas HudPrefabData = 5;
  bool has_hudprefabdata() const;
  private:
  bool _internal_has_hudprefabdata() const;
  public:
  void clear_hudprefabdata();
  const ::message::UGCHudPrefabDatas& hudprefabdata() const;
  PROTOBUF_NODISCARD ::message::UGCHudPrefabDatas* release_hudprefabdata();
  ::message::UGCHudPrefabDatas* mutable_hudprefabdata();
  void set_allocated_hudprefabdata(::message::UGCHudPrefabDatas* hudprefabdata);
  private:
  const ::message::UGCHudPrefabDatas& _internal_hudprefabdata() const;
  ::message::UGCHudPrefabDatas* _internal_mutable_hudprefabdata();
  public:
  void unsafe_arena_set_allocated_hudprefabdata(
      ::message::UGCHudPrefabDatas* hudprefabdata);
  ::message::UGCHudPrefabDatas* unsafe_arena_release_hudprefabdata();

  // .message.UGCTypeTree CustomTypeMap = 6;
  bool has_customtypemap() const;
  private:
  bool _internal_has_customtypemap() const;
  public:
  void clear_customtypemap();
  const ::message::UGCTypeTree& customtypemap() const;
  PROTOBUF_NODISCARD ::message::UGCTypeTree* release_customtypemap();
  ::message::UGCTypeTree* mutable_customtypemap();
  void set_allocated_customtypemap(::message::UGCTypeTree* customtypemap);
  private:
  const ::message::UGCTypeTree& _internal_customtypemap() const;
  ::message::UGCTypeTree* _internal_mutable_customtypemap();
  public:
  void unsafe_arena_set_allocated_customtypemap(
      ::message::UGCTypeTree* customtypemap);
  ::message::UGCTypeTree* unsafe_arena_release_customtypemap();

  // .message.SceneEditModeProtoData ModeSetting = 7;
  bool has_modesetting() const;
  private:
  bool _internal_has_modesetting() const;
  public:
  void clear_modesetting();
  const ::message::SceneEditModeProtoData& modesetting() const;
  PROTOBUF_NODISCARD ::message::SceneEditModeProtoData* release_modesetting();
  ::message::SceneEditModeProtoData* mutable_modesetting();
  void set_allocated_modesetting(::message::SceneEditModeProtoData* modesetting);
  private:
  const ::message::SceneEditModeProtoData& _internal_modesetting() const;
  ::message::SceneEditModeProtoData* _internal_mutable_modesetting();
  public:
  void unsafe_arena_set_allocated_modesetting(
      ::message::SceneEditModeProtoData* modesetting);
  ::message::SceneEditModeProtoData* unsafe_arena_release_modesetting();

  // .message.UGCAllSceneRuntimeData AllSceneData = 8;
  bool has_allscenedata() const;
  private:
  bool _internal_has_allscenedata() const;
  public:
  void clear_allscenedata();
  const ::message::UGCAllSceneRuntimeData& allscenedata() const;
  PROTOBUF_NODISCARD ::message::UGCAllSceneRuntimeData* release_allscenedata();
  ::message::UGCAllSceneRuntimeData* mutable_allscenedata();
  void set_allocated_allscenedata(::message::UGCAllSceneRuntimeData* allscenedata);
  private:
  const ::message::UGCAllSceneRuntimeData& _internal_allscenedata() const;
  ::message::UGCAllSceneRuntimeData* _internal_mutable_allscenedata();
  public:
  void unsafe_arena_set_allocated_allscenedata(
      ::message::UGCAllSceneRuntimeData* allscenedata);
  ::message::UGCAllSceneRuntimeData* unsafe_arena_release_allscenedata();

  // .message.UGCLocData LocData = 9;
  bool has_locdata() const;
  private:
  bool _internal_has_locdata() const;
  public:
  void clear_locdata();
  const ::message::UGCLocData& locdata() const;
  PROTOBUF_NODISCARD ::message::UGCLocData* release_locdata();
  ::message::UGCLocData* mutable_locdata();
  void set_allocated_locdata(::message::UGCLocData* locdata);
  private:
  const ::message::UGCLocData& _internal_locdata() const;
  ::message::UGCLocData* _internal_mutable_locdata();
  public:
  void unsafe_arena_set_allocated_locdata(
      ::message::UGCLocData* locdata);
  ::message::UGCLocData* unsafe_arena_release_locdata();

  // .message.UGCResourceData ResourceData = 10;
  bool has_resourcedata() const;
  private:
  bool _internal_has_resourcedata() const;
  public:
  void clear_resourcedata();
  const ::message::UGCResourceData& resourcedata() const;
  PROTOBUF_NODISCARD ::message::UGCResourceData* release_resourcedata();
  ::message::UGCResourceData* mutable_resourcedata();
  void set_allocated_resourcedata(::message::UGCResourceData* resourcedata);
  private:
  const ::message::UGCResourceData& _internal_resourcedata() const;
  ::message::UGCResourceData* _internal_mutable_resourcedata();
  public:
  void unsafe_arena_set_allocated_resourcedata(
      ::message::UGCResourceData* resourcedata);
  ::message::UGCResourceData* unsafe_arena_release_resourcedata();

  // @@protoc_insertion_point(class_scope:message.UGCGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 > graphdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 > logicentitydatas_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 > componentrepdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPrefabData > prefabdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomEventData > customeventdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCBTreeData > btreedata_;
    ::message::UGCWorkflowData* workflow_;
    ::message::UGCHudPrefabDatas* hudprefabdata_;
    ::message::UGCTypeTree* customtypemap_;
    ::message::SceneEditModeProtoData* modesetting_;
    ::message::UGCAllSceneRuntimeData* allscenedata_;
    ::message::UGCLocData* locdata_;
    ::message::UGCResourceData* resourcedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCSubLevelItemRuntimeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCSubLevelItemRuntimeData) */ {
 public:
  inline UGCSubLevelItemRuntimeData() : UGCSubLevelItemRuntimeData(nullptr) {}
  ~UGCSubLevelItemRuntimeData() override;
  explicit PROTOBUF_CONSTEXPR UGCSubLevelItemRuntimeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCSubLevelItemRuntimeData(const UGCSubLevelItemRuntimeData& from);
  UGCSubLevelItemRuntimeData(UGCSubLevelItemRuntimeData&& from) noexcept
    : UGCSubLevelItemRuntimeData() {
    *this = ::std::move(from);
  }

  inline UGCSubLevelItemRuntimeData& operator=(const UGCSubLevelItemRuntimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCSubLevelItemRuntimeData& operator=(UGCSubLevelItemRuntimeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCSubLevelItemRuntimeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCSubLevelItemRuntimeData* internal_default_instance() {
    return reinterpret_cast<const UGCSubLevelItemRuntimeData*>(
               &_UGCSubLevelItemRuntimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UGCSubLevelItemRuntimeData& a, UGCSubLevelItemRuntimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCSubLevelItemRuntimeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCSubLevelItemRuntimeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCSubLevelItemRuntimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCSubLevelItemRuntimeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCSubLevelItemRuntimeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCSubLevelItemRuntimeData& from) {
    UGCSubLevelItemRuntimeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCSubLevelItemRuntimeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCSubLevelItemRuntimeData";
  }
  protected:
  explicit UGCSubLevelItemRuntimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicEntityIdFieldNumber = 14,
    kCustomizedNameFieldNumber = 15,
    kObjColorFieldNumber = 17,
    kSurTexFieldNumber = 21,
    kBorTexFieldNumber = 22,
    kStaticTypeIdFieldNumber = 1,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
    kPosZFieldNumber = 5,
    kScaleXFieldNumber = 6,
    kScaleYFieldNumber = 7,
    kScaleZFieldNumber = 8,
    kRotYawFieldNumber = 9,
    kRotPitchFieldNumber = 10,
    kRotRollFieldNumber = 11,
    kExtraBaseInfoInstanceIdFieldNumber = 12,
    kLevelobjectIdByTagFieldNumber = 13,
    kResetPerRoundFieldNumber = 16,
    kGroupIdFieldNumber = 18,
    kSurColorFieldNumber = 19,
    kBorderColorFieldNumber = 20,
    kIsStaticFieldNumber = 23,
  };
  // string logic_entity_id = 14;
  void clear_logic_entity_id();
  const std::string& logic_entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logic_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logic_entity_id();
  PROTOBUF_NODISCARD std::string* release_logic_entity_id();
  void set_allocated_logic_entity_id(std::string* logic_entity_id);
  private:
  const std::string& _internal_logic_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logic_entity_id(const std::string& value);
  std::string* _internal_mutable_logic_entity_id();
  public:

  // string customized_name = 15;
  void clear_customized_name();
  const std::string& customized_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customized_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customized_name();
  PROTOBUF_NODISCARD std::string* release_customized_name();
  void set_allocated_customized_name(std::string* customized_name);
  private:
  const std::string& _internal_customized_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customized_name(const std::string& value);
  std::string* _internal_mutable_customized_name();
  public:

  // string obj_color = 17 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_obj_color();
  PROTOBUF_DEPRECATED const std::string& obj_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_obj_color(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_obj_color();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_obj_color();
  PROTOBUF_DEPRECATED void set_allocated_obj_color(std::string* obj_color);
  private:
  const std::string& _internal_obj_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obj_color(const std::string& value);
  std::string* _internal_mutable_obj_color();
  public:

  // string surTex = 21;
  void clear_surtex();
  const std::string& surtex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_surtex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_surtex();
  PROTOBUF_NODISCARD std::string* release_surtex();
  void set_allocated_surtex(std::string* surtex);
  private:
  const std::string& _internal_surtex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surtex(const std::string& value);
  std::string* _internal_mutable_surtex();
  public:

  // string borTex = 22;
  void clear_bortex();
  const std::string& bortex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bortex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bortex();
  PROTOBUF_NODISCARD std::string* release_bortex();
  void set_allocated_bortex(std::string* bortex);
  private:
  const std::string& _internal_bortex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bortex(const std::string& value);
  std::string* _internal_mutable_bortex();
  public:

  // uint32 static_type_id = 1;
  void clear_static_type_id();
  uint32_t static_type_id() const;
  void set_static_type_id(uint32_t value);
  private:
  uint32_t _internal_static_type_id() const;
  void _internal_set_static_type_id(uint32_t value);
  public:

  // float pos_x = 3;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 4;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_z = 5;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // float scale_x = 6;
  void clear_scale_x();
  float scale_x() const;
  void set_scale_x(float value);
  private:
  float _internal_scale_x() const;
  void _internal_set_scale_x(float value);
  public:

  // float scale_y = 7;
  void clear_scale_y();
  float scale_y() const;
  void set_scale_y(float value);
  private:
  float _internal_scale_y() const;
  void _internal_set_scale_y(float value);
  public:

  // float scale_z = 8;
  void clear_scale_z();
  float scale_z() const;
  void set_scale_z(float value);
  private:
  float _internal_scale_z() const;
  void _internal_set_scale_z(float value);
  public:

  // float rot_yaw = 9;
  void clear_rot_yaw();
  float rot_yaw() const;
  void set_rot_yaw(float value);
  private:
  float _internal_rot_yaw() const;
  void _internal_set_rot_yaw(float value);
  public:

  // float rot_pitch = 10;
  void clear_rot_pitch();
  float rot_pitch() const;
  void set_rot_pitch(float value);
  private:
  float _internal_rot_pitch() const;
  void _internal_set_rot_pitch(float value);
  public:

  // float rot_roll = 11;
  void clear_rot_roll();
  float rot_roll() const;
  void set_rot_roll(float value);
  private:
  float _internal_rot_roll() const;
  void _internal_set_rot_roll(float value);
  public:

  // uint32 extra_base_info_instance_id = 12;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 levelobject_id_by_tag = 13;
  void clear_levelobject_id_by_tag();
  uint32_t levelobject_id_by_tag() const;
  void set_levelobject_id_by_tag(uint32_t value);
  private:
  uint32_t _internal_levelobject_id_by_tag() const;
  void _internal_set_levelobject_id_by_tag(uint32_t value);
  public:

  // uint32 reset_per_round = 16;
  void clear_reset_per_round();
  uint32_t reset_per_round() const;
  void set_reset_per_round(uint32_t value);
  private:
  uint32_t _internal_reset_per_round() const;
  void _internal_set_reset_per_round(uint32_t value);
  public:

  // int32 group_id = 18;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // int32 surColor = 19;
  void clear_surcolor();
  int32_t surcolor() const;
  void set_surcolor(int32_t value);
  private:
  int32_t _internal_surcolor() const;
  void _internal_set_surcolor(int32_t value);
  public:

  // int32 borderColor = 20;
  void clear_bordercolor();
  int32_t bordercolor() const;
  void set_bordercolor(int32_t value);
  private:
  int32_t _internal_bordercolor() const;
  void _internal_set_bordercolor(int32_t value);
  public:

  // bool isStatic = 23;
  void clear_isstatic();
  bool isstatic() const;
  void set_isstatic(bool value);
  private:
  bool _internal_isstatic() const;
  void _internal_set_isstatic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCSubLevelItemRuntimeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logic_entity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customized_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_color_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surtex_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bortex_;
    uint32_t static_type_id_;
    float pos_x_;
    float pos_y_;
    float pos_z_;
    float scale_x_;
    float scale_y_;
    float scale_z_;
    float rot_yaw_;
    float rot_pitch_;
    float rot_roll_;
    uint32_t extra_base_info_instance_id_;
    uint32_t levelobject_id_by_tag_;
    uint32_t reset_per_round_;
    int32_t group_id_;
    int32_t surcolor_;
    int32_t bordercolor_;
    bool isstatic_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCSubLevelDescData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCSubLevelDescData) */ {
 public:
  inline UGCSubLevelDescData() : UGCSubLevelDescData(nullptr) {}
  ~UGCSubLevelDescData() override;
  explicit PROTOBUF_CONSTEXPR UGCSubLevelDescData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCSubLevelDescData(const UGCSubLevelDescData& from);
  UGCSubLevelDescData(UGCSubLevelDescData&& from) noexcept
    : UGCSubLevelDescData() {
    *this = ::std::move(from);
  }

  inline UGCSubLevelDescData& operator=(const UGCSubLevelDescData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCSubLevelDescData& operator=(UGCSubLevelDescData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCSubLevelDescData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCSubLevelDescData* internal_default_instance() {
    return reinterpret_cast<const UGCSubLevelDescData*>(
               &_UGCSubLevelDescData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(UGCSubLevelDescData& a, UGCSubLevelDescData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCSubLevelDescData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCSubLevelDescData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCSubLevelDescData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCSubLevelDescData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCSubLevelDescData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCSubLevelDescData& from) {
    UGCSubLevelDescData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCSubLevelDescData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCSubLevelDescData";
  }
  protected:
  explicit UGCSubLevelDescData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridWidthFieldNumber = 1,
    kGridHeightFieldNumber = 2,
    kGridCenterXFieldNumber = 3,
    kGridCenterZFieldNumber = 4,
    kGridUnitFieldNumber = 5,
  };
  // float GridWidth = 1;
  void clear_gridwidth();
  float gridwidth() const;
  void set_gridwidth(float value);
  private:
  float _internal_gridwidth() const;
  void _internal_set_gridwidth(float value);
  public:

  // float GridHeight = 2;
  void clear_gridheight();
  float gridheight() const;
  void set_gridheight(float value);
  private:
  float _internal_gridheight() const;
  void _internal_set_gridheight(float value);
  public:

  // float GridCenterX = 3;
  void clear_gridcenterx();
  float gridcenterx() const;
  void set_gridcenterx(float value);
  private:
  float _internal_gridcenterx() const;
  void _internal_set_gridcenterx(float value);
  public:

  // float GridCenterZ = 4;
  void clear_gridcenterz();
  float gridcenterz() const;
  void set_gridcenterz(float value);
  private:
  float _internal_gridcenterz() const;
  void _internal_set_gridcenterz(float value);
  public:

  // float GridUnit = 5;
  void clear_gridunit();
  float gridunit() const;
  void set_gridunit(float value);
  private:
  float _internal_gridunit() const;
  void _internal_set_gridunit(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCSubLevelDescData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float gridwidth_;
    float gridheight_;
    float gridcenterx_;
    float gridcenterz_;
    float gridunit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCSubLevelSkyEnvData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCSubLevelSkyEnvData) */ {
 public:
  inline UGCSubLevelSkyEnvData() : UGCSubLevelSkyEnvData(nullptr) {}
  ~UGCSubLevelSkyEnvData() override;
  explicit PROTOBUF_CONSTEXPR UGCSubLevelSkyEnvData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCSubLevelSkyEnvData(const UGCSubLevelSkyEnvData& from);
  UGCSubLevelSkyEnvData(UGCSubLevelSkyEnvData&& from) noexcept
    : UGCSubLevelSkyEnvData() {
    *this = ::std::move(from);
  }

  inline UGCSubLevelSkyEnvData& operator=(const UGCSubLevelSkyEnvData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCSubLevelSkyEnvData& operator=(UGCSubLevelSkyEnvData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCSubLevelSkyEnvData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCSubLevelSkyEnvData* internal_default_instance() {
    return reinterpret_cast<const UGCSubLevelSkyEnvData*>(
               &_UGCSubLevelSkyEnvData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(UGCSubLevelSkyEnvData& a, UGCSubLevelSkyEnvData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCSubLevelSkyEnvData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCSubLevelSkyEnvData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCSubLevelSkyEnvData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCSubLevelSkyEnvData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCSubLevelSkyEnvData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCSubLevelSkyEnvData& from) {
    UGCSubLevelSkyEnvData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCSubLevelSkyEnvData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCSubLevelSkyEnvData";
  }
  protected:
  explicit UGCSubLevelSkyEnvData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseSkyEnvResFieldNumber = 2,
    kLightColorFieldNumber = 3,
    kLightIntensityFieldNumber = 4,
    kDarknessFieldNumber = 5,
    kShadowStrengthFieldNumber = 6,
    kIsAdvanceModeFieldNumber = 1,
    kNightModeFieldNumber = 11,
    kTerrainWetnessFieldNumber = 7,
    kLensFlareFieldNumber = 8,
    kFogColorFieldNumber = 9,
    kAmbientColorFieldNumber = 10,
  };
  // string BaseSkyEnvRes = 2;
  void clear_baseskyenvres();
  const std::string& baseskyenvres() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_baseskyenvres(ArgT0&& arg0, ArgT... args);
  std::string* mutable_baseskyenvres();
  PROTOBUF_NODISCARD std::string* release_baseskyenvres();
  void set_allocated_baseskyenvres(std::string* baseskyenvres);
  private:
  const std::string& _internal_baseskyenvres() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_baseskyenvres(const std::string& value);
  std::string* _internal_mutable_baseskyenvres();
  public:

  // int32 LightColor = 3;
  void clear_lightcolor();
  int32_t lightcolor() const;
  void set_lightcolor(int32_t value);
  private:
  int32_t _internal_lightcolor() const;
  void _internal_set_lightcolor(int32_t value);
  public:

  // float LightIntensity = 4;
  void clear_lightintensity();
  float lightintensity() const;
  void set_lightintensity(float value);
  private:
  float _internal_lightintensity() const;
  void _internal_set_lightintensity(float value);
  public:

  // float Darkness = 5;
  void clear_darkness();
  float darkness() const;
  void set_darkness(float value);
  private:
  float _internal_darkness() const;
  void _internal_set_darkness(float value);
  public:

  // float ShadowStrength = 6;
  void clear_shadowstrength();
  float shadowstrength() const;
  void set_shadowstrength(float value);
  private:
  float _internal_shadowstrength() const;
  void _internal_set_shadowstrength(float value);
  public:

  // bool IsAdvanceMode = 1;
  void clear_isadvancemode();
  bool isadvancemode() const;
  void set_isadvancemode(bool value);
  private:
  bool _internal_isadvancemode() const;
  void _internal_set_isadvancemode(bool value);
  public:

  // bool NightMode = 11;
  void clear_nightmode();
  bool nightmode() const;
  void set_nightmode(bool value);
  private:
  bool _internal_nightmode() const;
  void _internal_set_nightmode(bool value);
  public:

  // float TerrainWetness = 7;
  void clear_terrainwetness();
  float terrainwetness() const;
  void set_terrainwetness(float value);
  private:
  float _internal_terrainwetness() const;
  void _internal_set_terrainwetness(float value);
  public:

  // float LensFlare = 8;
  void clear_lensflare();
  float lensflare() const;
  void set_lensflare(float value);
  private:
  float _internal_lensflare() const;
  void _internal_set_lensflare(float value);
  public:

  // int32 FogColor = 9;
  void clear_fogcolor();
  int32_t fogcolor() const;
  void set_fogcolor(int32_t value);
  private:
  int32_t _internal_fogcolor() const;
  void _internal_set_fogcolor(int32_t value);
  public:

  // int32 AmbientColor = 10;
  void clear_ambientcolor();
  int32_t ambientcolor() const;
  void set_ambientcolor(int32_t value);
  private:
  int32_t _internal_ambientcolor() const;
  void _internal_set_ambientcolor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCSubLevelSkyEnvData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseskyenvres_;
    int32_t lightcolor_;
    float lightintensity_;
    float darkness_;
    float shadowstrength_;
    bool isadvancemode_;
    bool nightmode_;
    float terrainwetness_;
    float lensflare_;
    int32_t fogcolor_;
    int32_t ambientcolor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCSubLevelResourceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCSubLevelResourceData) */ {
 public:
  inline UGCSubLevelResourceData() : UGCSubLevelResourceData(nullptr) {}
  ~UGCSubLevelResourceData() override;
  explicit PROTOBUF_CONSTEXPR UGCSubLevelResourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCSubLevelResourceData(const UGCSubLevelResourceData& from);
  UGCSubLevelResourceData(UGCSubLevelResourceData&& from) noexcept
    : UGCSubLevelResourceData() {
    *this = ::std::move(from);
  }

  inline UGCSubLevelResourceData& operator=(const UGCSubLevelResourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCSubLevelResourceData& operator=(UGCSubLevelResourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCSubLevelResourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCSubLevelResourceData* internal_default_instance() {
    return reinterpret_cast<const UGCSubLevelResourceData*>(
               &_UGCSubLevelResourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(UGCSubLevelResourceData& a, UGCSubLevelResourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCSubLevelResourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCSubLevelResourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCSubLevelResourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCSubLevelResourceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCSubLevelResourceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCSubLevelResourceData& from) {
    UGCSubLevelResourceData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCSubLevelResourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCSubLevelResourceData";
  }
  protected:
  explicit UGCSubLevelResourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 7,
    kObjectHierachyFieldNumber = 10,
    kSubLevelNameFieldNumber = 1,
    kGUIDFieldNumber = 2,
    kGrassResourceUUIDFieldNumber = 11,
    kDescInfoFieldNumber = 6,
    kObjectAttrListFieldNumber = 8,
    kSkyEnvFieldNumber = 9,
    kBaseMapIDFieldNumber = 4,
    kIsMainLevelFieldNumber = 3,
    kIsUseLevelDescDataFieldNumber = 5,
  };
  // repeated .message.UGCSubLevelItemRuntimeData ObjectList = 7;
  int objectlist_size() const;
  private:
  int _internal_objectlist_size() const;
  public:
  void clear_objectlist();
  ::message::UGCSubLevelItemRuntimeData* mutable_objectlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelItemRuntimeData >*
      mutable_objectlist();
  private:
  const ::message::UGCSubLevelItemRuntimeData& _internal_objectlist(int index) const;
  ::message::UGCSubLevelItemRuntimeData* _internal_add_objectlist();
  public:
  const ::message::UGCSubLevelItemRuntimeData& objectlist(int index) const;
  ::message::UGCSubLevelItemRuntimeData* add_objectlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelItemRuntimeData >&
      objectlist() const;

  // repeated .message.UGCTransformNodeData ObjectHierachy = 10;
  int objecthierachy_size() const;
  private:
  int _internal_objecthierachy_size() const;
  public:
  void clear_objecthierachy();
  ::message::UGCTransformNodeData* mutable_objecthierachy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData >*
      mutable_objecthierachy();
  private:
  const ::message::UGCTransformNodeData& _internal_objecthierachy(int index) const;
  ::message::UGCTransformNodeData* _internal_add_objecthierachy();
  public:
  const ::message::UGCTransformNodeData& objecthierachy(int index) const;
  ::message::UGCTransformNodeData* add_objecthierachy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData >&
      objecthierachy() const;

  // string SubLevelName = 1;
  void clear_sublevelname();
  const std::string& sublevelname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sublevelname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sublevelname();
  PROTOBUF_NODISCARD std::string* release_sublevelname();
  void set_allocated_sublevelname(std::string* sublevelname);
  private:
  const std::string& _internal_sublevelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sublevelname(const std::string& value);
  std::string* _internal_mutable_sublevelname();
  public:

  // string GUID = 2;
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_NODISCARD std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // string GrassResourceUUID = 11;
  void clear_grassresourceuuid();
  const std::string& grassresourceuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grassresourceuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grassresourceuuid();
  PROTOBUF_NODISCARD std::string* release_grassresourceuuid();
  void set_allocated_grassresourceuuid(std::string* grassresourceuuid);
  private:
  const std::string& _internal_grassresourceuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grassresourceuuid(const std::string& value);
  std::string* _internal_mutable_grassresourceuuid();
  public:

  // .message.UGCSubLevelDescData DescInfo = 6;
  bool has_descinfo() const;
  private:
  bool _internal_has_descinfo() const;
  public:
  void clear_descinfo();
  const ::message::UGCSubLevelDescData& descinfo() const;
  PROTOBUF_NODISCARD ::message::UGCSubLevelDescData* release_descinfo();
  ::message::UGCSubLevelDescData* mutable_descinfo();
  void set_allocated_descinfo(::message::UGCSubLevelDescData* descinfo);
  private:
  const ::message::UGCSubLevelDescData& _internal_descinfo() const;
  ::message::UGCSubLevelDescData* _internal_mutable_descinfo();
  public:
  void unsafe_arena_set_allocated_descinfo(
      ::message::UGCSubLevelDescData* descinfo);
  ::message::UGCSubLevelDescData* unsafe_arena_release_descinfo();

  // .message.SceneEditEntityAttributeProtoData ObjectAttrList = 8;
  bool has_objectattrlist() const;
  private:
  bool _internal_has_objectattrlist() const;
  public:
  void clear_objectattrlist();
  const ::message::SceneEditEntityAttributeProtoData& objectattrlist() const;
  PROTOBUF_NODISCARD ::message::SceneEditEntityAttributeProtoData* release_objectattrlist();
  ::message::SceneEditEntityAttributeProtoData* mutable_objectattrlist();
  void set_allocated_objectattrlist(::message::SceneEditEntityAttributeProtoData* objectattrlist);
  private:
  const ::message::SceneEditEntityAttributeProtoData& _internal_objectattrlist() const;
  ::message::SceneEditEntityAttributeProtoData* _internal_mutable_objectattrlist();
  public:
  void unsafe_arena_set_allocated_objectattrlist(
      ::message::SceneEditEntityAttributeProtoData* objectattrlist);
  ::message::SceneEditEntityAttributeProtoData* unsafe_arena_release_objectattrlist();

  // .message.UGCSubLevelSkyEnvData SkyEnv = 9;
  bool has_skyenv() const;
  private:
  bool _internal_has_skyenv() const;
  public:
  void clear_skyenv();
  const ::message::UGCSubLevelSkyEnvData& skyenv() const;
  PROTOBUF_NODISCARD ::message::UGCSubLevelSkyEnvData* release_skyenv();
  ::message::UGCSubLevelSkyEnvData* mutable_skyenv();
  void set_allocated_skyenv(::message::UGCSubLevelSkyEnvData* skyenv);
  private:
  const ::message::UGCSubLevelSkyEnvData& _internal_skyenv() const;
  ::message::UGCSubLevelSkyEnvData* _internal_mutable_skyenv();
  public:
  void unsafe_arena_set_allocated_skyenv(
      ::message::UGCSubLevelSkyEnvData* skyenv);
  ::message::UGCSubLevelSkyEnvData* unsafe_arena_release_skyenv();

  // uint32 BaseMapID = 4;
  void clear_basemapid();
  uint32_t basemapid() const;
  void set_basemapid(uint32_t value);
  private:
  uint32_t _internal_basemapid() const;
  void _internal_set_basemapid(uint32_t value);
  public:

  // bool IsMainLevel = 3;
  void clear_ismainlevel();
  bool ismainlevel() const;
  void set_ismainlevel(bool value);
  private:
  bool _internal_ismainlevel() const;
  void _internal_set_ismainlevel(bool value);
  public:

  // bool IsUseLevelDescData = 5;
  void clear_isuseleveldescdata();
  bool isuseleveldescdata() const;
  void set_isuseleveldescdata(bool value);
  private:
  bool _internal_isuseleveldescdata() const;
  void _internal_set_isuseleveldescdata(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCSubLevelResourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelItemRuntimeData > objectlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData > objecthierachy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sublevelname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grassresourceuuid_;
    ::message::UGCSubLevelDescData* descinfo_;
    ::message::SceneEditEntityAttributeProtoData* objectattrlist_;
    ::message::UGCSubLevelSkyEnvData* skyenv_;
    uint32_t basemapid_;
    bool ismainlevel_;
    bool isuseleveldescdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCTransformNodeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCTransformNodeData) */ {
 public:
  inline UGCTransformNodeData() : UGCTransformNodeData(nullptr) {}
  ~UGCTransformNodeData() override;
  explicit PROTOBUF_CONSTEXPR UGCTransformNodeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCTransformNodeData(const UGCTransformNodeData& from);
  UGCTransformNodeData(UGCTransformNodeData&& from) noexcept
    : UGCTransformNodeData() {
    *this = ::std::move(from);
  }

  inline UGCTransformNodeData& operator=(const UGCTransformNodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCTransformNodeData& operator=(UGCTransformNodeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCTransformNodeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCTransformNodeData* internal_default_instance() {
    return reinterpret_cast<const UGCTransformNodeData*>(
               &_UGCTransformNodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(UGCTransformNodeData& a, UGCTransformNodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCTransformNodeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCTransformNodeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCTransformNodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCTransformNodeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCTransformNodeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCTransformNodeData& from) {
    UGCTransformNodeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCTransformNodeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCTransformNodeData";
  }
  protected:
  explicit UGCTransformNodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kParentIDFieldNumber = 2,
    kLocalPositionFieldNumber = 3,
    kLocalScaleFieldNumber = 4,
    kLocalRotationFieldNumber = 5,
  };
  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ParentID = 2;
  void clear_parentid();
  const std::string& parentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentid();
  PROTOBUF_NODISCARD std::string* release_parentid();
  void set_allocated_parentid(std::string* parentid);
  private:
  const std::string& _internal_parentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentid(const std::string& value);
  std::string* _internal_mutable_parentid();
  public:

  // .message.ProtoBuffVector3 LocalPosition = 3;
  bool has_localposition() const;
  private:
  bool _internal_has_localposition() const;
  public:
  void clear_localposition();
  const ::message::ProtoBuffVector3& localposition() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_localposition();
  ::message::ProtoBuffVector3* mutable_localposition();
  void set_allocated_localposition(::message::ProtoBuffVector3* localposition);
  private:
  const ::message::ProtoBuffVector3& _internal_localposition() const;
  ::message::ProtoBuffVector3* _internal_mutable_localposition();
  public:
  void unsafe_arena_set_allocated_localposition(
      ::message::ProtoBuffVector3* localposition);
  ::message::ProtoBuffVector3* unsafe_arena_release_localposition();

  // .message.ProtoBuffVector3 LocalScale = 4;
  bool has_localscale() const;
  private:
  bool _internal_has_localscale() const;
  public:
  void clear_localscale();
  const ::message::ProtoBuffVector3& localscale() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_localscale();
  ::message::ProtoBuffVector3* mutable_localscale();
  void set_allocated_localscale(::message::ProtoBuffVector3* localscale);
  private:
  const ::message::ProtoBuffVector3& _internal_localscale() const;
  ::message::ProtoBuffVector3* _internal_mutable_localscale();
  public:
  void unsafe_arena_set_allocated_localscale(
      ::message::ProtoBuffVector3* localscale);
  ::message::ProtoBuffVector3* unsafe_arena_release_localscale();

  // .message.ProtoBuffQuaternion LocalRotation = 5;
  bool has_localrotation() const;
  private:
  bool _internal_has_localrotation() const;
  public:
  void clear_localrotation();
  const ::message::ProtoBuffQuaternion& localrotation() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffQuaternion* release_localrotation();
  ::message::ProtoBuffQuaternion* mutable_localrotation();
  void set_allocated_localrotation(::message::ProtoBuffQuaternion* localrotation);
  private:
  const ::message::ProtoBuffQuaternion& _internal_localrotation() const;
  ::message::ProtoBuffQuaternion* _internal_mutable_localrotation();
  public:
  void unsafe_arena_set_allocated_localrotation(
      ::message::ProtoBuffQuaternion* localrotation);
  ::message::ProtoBuffQuaternion* unsafe_arena_release_localrotation();

  // @@protoc_insertion_point(class_scope:message.UGCTransformNodeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentid_;
    ::message::ProtoBuffVector3* localposition_;
    ::message::ProtoBuffVector3* localscale_;
    ::message::ProtoBuffQuaternion* localrotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCAllSceneRuntimeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCAllSceneRuntimeData) */ {
 public:
  inline UGCAllSceneRuntimeData() : UGCAllSceneRuntimeData(nullptr) {}
  ~UGCAllSceneRuntimeData() override;
  explicit PROTOBUF_CONSTEXPR UGCAllSceneRuntimeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCAllSceneRuntimeData(const UGCAllSceneRuntimeData& from);
  UGCAllSceneRuntimeData(UGCAllSceneRuntimeData&& from) noexcept
    : UGCAllSceneRuntimeData() {
    *this = ::std::move(from);
  }

  inline UGCAllSceneRuntimeData& operator=(const UGCAllSceneRuntimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCAllSceneRuntimeData& operator=(UGCAllSceneRuntimeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCAllSceneRuntimeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCAllSceneRuntimeData* internal_default_instance() {
    return reinterpret_cast<const UGCAllSceneRuntimeData*>(
               &_UGCAllSceneRuntimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(UGCAllSceneRuntimeData& a, UGCAllSceneRuntimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCAllSceneRuntimeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCAllSceneRuntimeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCAllSceneRuntimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCAllSceneRuntimeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCAllSceneRuntimeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCAllSceneRuntimeData& from) {
    UGCAllSceneRuntimeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCAllSceneRuntimeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCAllSceneRuntimeData";
  }
  protected:
  explicit UGCAllSceneRuntimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubLevelListFieldNumber = 1,
  };
  // repeated .message.UGCSubLevelResourceData SubLevelList = 1;
  int sublevellist_size() const;
  private:
  int _internal_sublevellist_size() const;
  public:
  void clear_sublevellist();
  ::message::UGCSubLevelResourceData* mutable_sublevellist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelResourceData >*
      mutable_sublevellist();
  private:
  const ::message::UGCSubLevelResourceData& _internal_sublevellist(int index) const;
  ::message::UGCSubLevelResourceData* _internal_add_sublevellist();
  public:
  const ::message::UGCSubLevelResourceData& sublevellist(int index) const;
  ::message::UGCSubLevelResourceData* add_sublevellist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelResourceData >&
      sublevellist() const;

  // @@protoc_insertion_point(class_scope:message.UGCAllSceneRuntimeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelResourceData > sublevellist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCMapRuntimeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCMapRuntimeData) */ {
 public:
  inline UGCMapRuntimeData() : UGCMapRuntimeData(nullptr) {}
  ~UGCMapRuntimeData() override;
  explicit PROTOBUF_CONSTEXPR UGCMapRuntimeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCMapRuntimeData(const UGCMapRuntimeData& from);
  UGCMapRuntimeData(UGCMapRuntimeData&& from) noexcept
    : UGCMapRuntimeData() {
    *this = ::std::move(from);
  }

  inline UGCMapRuntimeData& operator=(const UGCMapRuntimeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCMapRuntimeData& operator=(UGCMapRuntimeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCMapRuntimeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCMapRuntimeData* internal_default_instance() {
    return reinterpret_cast<const UGCMapRuntimeData*>(
               &_UGCMapRuntimeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(UGCMapRuntimeData& a, UGCMapRuntimeData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCMapRuntimeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCMapRuntimeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCMapRuntimeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCMapRuntimeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCMapRuntimeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCMapRuntimeData& from) {
    UGCMapRuntimeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCMapRuntimeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCMapRuntimeData";
  }
  protected:
  explicit UGCMapRuntimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
    kModeSettingFieldNumber = 2,
    kEntityAttributesFieldNumber = 3,
  };
  // .message.SceneEditEntityProtoData Entities = 1;
  bool has_entities() const;
  private:
  bool _internal_has_entities() const;
  public:
  void clear_entities();
  const ::message::SceneEditEntityProtoData& entities() const;
  PROTOBUF_NODISCARD ::message::SceneEditEntityProtoData* release_entities();
  ::message::SceneEditEntityProtoData* mutable_entities();
  void set_allocated_entities(::message::SceneEditEntityProtoData* entities);
  private:
  const ::message::SceneEditEntityProtoData& _internal_entities() const;
  ::message::SceneEditEntityProtoData* _internal_mutable_entities();
  public:
  void unsafe_arena_set_allocated_entities(
      ::message::SceneEditEntityProtoData* entities);
  ::message::SceneEditEntityProtoData* unsafe_arena_release_entities();

  // .message.SceneEditModeProtoData ModeSetting = 2;
  bool has_modesetting() const;
  private:
  bool _internal_has_modesetting() const;
  public:
  void clear_modesetting();
  const ::message::SceneEditModeProtoData& modesetting() const;
  PROTOBUF_NODISCARD ::message::SceneEditModeProtoData* release_modesetting();
  ::message::SceneEditModeProtoData* mutable_modesetting();
  void set_allocated_modesetting(::message::SceneEditModeProtoData* modesetting);
  private:
  const ::message::SceneEditModeProtoData& _internal_modesetting() const;
  ::message::SceneEditModeProtoData* _internal_mutable_modesetting();
  public:
  void unsafe_arena_set_allocated_modesetting(
      ::message::SceneEditModeProtoData* modesetting);
  ::message::SceneEditModeProtoData* unsafe_arena_release_modesetting();

  // .message.SceneEditEntityAttributeProtoData EntityAttributes = 3;
  bool has_entityattributes() const;
  private:
  bool _internal_has_entityattributes() const;
  public:
  void clear_entityattributes();
  const ::message::SceneEditEntityAttributeProtoData& entityattributes() const;
  PROTOBUF_NODISCARD ::message::SceneEditEntityAttributeProtoData* release_entityattributes();
  ::message::SceneEditEntityAttributeProtoData* mutable_entityattributes();
  void set_allocated_entityattributes(::message::SceneEditEntityAttributeProtoData* entityattributes);
  private:
  const ::message::SceneEditEntityAttributeProtoData& _internal_entityattributes() const;
  ::message::SceneEditEntityAttributeProtoData* _internal_mutable_entityattributes();
  public:
  void unsafe_arena_set_allocated_entityattributes(
      ::message::SceneEditEntityAttributeProtoData* entityattributes);
  ::message::SceneEditEntityAttributeProtoData* unsafe_arena_release_entityattributes();

  // @@protoc_insertion_point(class_scope:message.UGCMapRuntimeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::SceneEditEntityProtoData* entities_;
    ::message::SceneEditModeProtoData* modesetting_;
    ::message::SceneEditEntityAttributeProtoData* entityattributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditObjectProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditObjectProtoData) */ {
 public:
  inline SceneEditObjectProtoData() : SceneEditObjectProtoData(nullptr) {}
  ~SceneEditObjectProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditObjectProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditObjectProtoData(const SceneEditObjectProtoData& from);
  SceneEditObjectProtoData(SceneEditObjectProtoData&& from) noexcept
    : SceneEditObjectProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditObjectProtoData& operator=(const SceneEditObjectProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditObjectProtoData& operator=(SceneEditObjectProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditObjectProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditObjectProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditObjectProtoData*>(
               &_SceneEditObjectProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SceneEditObjectProtoData& a, SceneEditObjectProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditObjectProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditObjectProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditObjectProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditObjectProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditObjectProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditObjectProtoData& from) {
    SceneEditObjectProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditObjectProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditObjectProtoData";
  }
  protected:
  explicit SceneEditObjectProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicEntityIdFieldNumber = 6,
    kCustomizedNameFieldNumber = 7,
    kObjColorFieldNumber = 9,
    kIdDirPosyFieldNumber = 1,
    kPosXzFieldNumber = 2,
    kExtraBaseInfoInstanceIdFieldNumber = 3,
    kExtraBaseInfoFreeDirFieldNumber = 4,
    kLevelobjectIdByTagFieldNumber = 5,
    kResetPerRoundFieldNumber = 8,
  };
  // string logic_entity_id = 6;
  void clear_logic_entity_id();
  const std::string& logic_entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logic_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logic_entity_id();
  PROTOBUF_NODISCARD std::string* release_logic_entity_id();
  void set_allocated_logic_entity_id(std::string* logic_entity_id);
  private:
  const std::string& _internal_logic_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logic_entity_id(const std::string& value);
  std::string* _internal_mutable_logic_entity_id();
  public:

  // string customized_name = 7;
  void clear_customized_name();
  const std::string& customized_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customized_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customized_name();
  PROTOBUF_NODISCARD std::string* release_customized_name();
  void set_allocated_customized_name(std::string* customized_name);
  private:
  const std::string& _internal_customized_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customized_name(const std::string& value);
  std::string* _internal_mutable_customized_name();
  public:

  // string obj_color = 9 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_obj_color();
  PROTOBUF_DEPRECATED const std::string& obj_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_obj_color(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_obj_color();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_obj_color();
  PROTOBUF_DEPRECATED void set_allocated_obj_color(std::string* obj_color);
  private:
  const std::string& _internal_obj_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obj_color(const std::string& value);
  std::string* _internal_mutable_obj_color();
  public:

  // uint32 id_dir_posy = 1;
  void clear_id_dir_posy();
  uint32_t id_dir_posy() const;
  void set_id_dir_posy(uint32_t value);
  private:
  uint32_t _internal_id_dir_posy() const;
  void _internal_set_id_dir_posy(uint32_t value);
  public:

  // uint32 pos_xz = 2;
  void clear_pos_xz();
  uint32_t pos_xz() const;
  void set_pos_xz(uint32_t value);
  private:
  uint32_t _internal_pos_xz() const;
  void _internal_set_pos_xz(uint32_t value);
  public:

  // uint32 extra_base_info_instance_id = 3;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 extra_base_info_free_dir = 4;
  void clear_extra_base_info_free_dir();
  uint32_t extra_base_info_free_dir() const;
  void set_extra_base_info_free_dir(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_free_dir() const;
  void _internal_set_extra_base_info_free_dir(uint32_t value);
  public:

  // uint32 levelobject_id_by_tag = 5;
  void clear_levelobject_id_by_tag();
  uint32_t levelobject_id_by_tag() const;
  void set_levelobject_id_by_tag(uint32_t value);
  private:
  uint32_t _internal_levelobject_id_by_tag() const;
  void _internal_set_levelobject_id_by_tag(uint32_t value);
  public:

  // uint32 reset_per_round = 8;
  void clear_reset_per_round();
  uint32_t reset_per_round() const;
  void set_reset_per_round(uint32_t value);
  private:
  uint32_t _internal_reset_per_round() const;
  void _internal_set_reset_per_round(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditObjectProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logic_entity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customized_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_color_;
    uint32_t id_dir_posy_;
    uint32_t pos_xz_;
    uint32_t extra_base_info_instance_id_;
    uint32_t extra_base_info_free_dir_;
    uint32_t levelobject_id_by_tag_;
    uint32_t reset_per_round_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditEntityProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditEntityProtoData) */ {
 public:
  inline SceneEditEntityProtoData() : SceneEditEntityProtoData(nullptr) {}
  ~SceneEditEntityProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditEntityProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditEntityProtoData(const SceneEditEntityProtoData& from);
  SceneEditEntityProtoData(SceneEditEntityProtoData&& from) noexcept
    : SceneEditEntityProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditEntityProtoData& operator=(const SceneEditEntityProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditEntityProtoData& operator=(SceneEditEntityProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditEntityProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditEntityProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditEntityProtoData*>(
               &_SceneEditEntityProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(SceneEditEntityProtoData& a, SceneEditEntityProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditEntityProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditEntityProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditEntityProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditEntityProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditEntityProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditEntityProtoData& from) {
    SceneEditEntityProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditEntityProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditEntityProtoData";
  }
  protected:
  explicit SceneEditEntityProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .message.SceneEditObjectProtoData objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::message::SceneEditObjectProtoData* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditObjectProtoData >*
      mutable_objects();
  private:
  const ::message::SceneEditObjectProtoData& _internal_objects(int index) const;
  ::message::SceneEditObjectProtoData* _internal_add_objects();
  public:
  const ::message::SceneEditObjectProtoData& objects(int index) const;
  ::message::SceneEditObjectProtoData* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditObjectProtoData >&
      objects() const;

  // @@protoc_insertion_point(class_scope:message.SceneEditEntityProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditObjectProtoData > objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditTeleportDoorProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditTeleportDoorProtoData) */ {
 public:
  inline SceneEditTeleportDoorProtoData() : SceneEditTeleportDoorProtoData(nullptr) {}
  ~SceneEditTeleportDoorProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditTeleportDoorProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditTeleportDoorProtoData(const SceneEditTeleportDoorProtoData& from);
  SceneEditTeleportDoorProtoData(SceneEditTeleportDoorProtoData&& from) noexcept
    : SceneEditTeleportDoorProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditTeleportDoorProtoData& operator=(const SceneEditTeleportDoorProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditTeleportDoorProtoData& operator=(SceneEditTeleportDoorProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditTeleportDoorProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditTeleportDoorProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditTeleportDoorProtoData*>(
               &_SceneEditTeleportDoorProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SceneEditTeleportDoorProtoData& a, SceneEditTeleportDoorProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditTeleportDoorProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditTeleportDoorProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditTeleportDoorProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditTeleportDoorProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditTeleportDoorProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditTeleportDoorProtoData& from) {
    SceneEditTeleportDoorProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditTeleportDoorProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditTeleportDoorProtoData";
  }
  protected:
  explicit SceneEditTeleportDoorProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kTeleportDoorTypeFieldNumber = 3,
    kTargetDoorIdFieldNumber = 4,
    kTriggerTypeFieldNumber = 5,
    kTeleportActiveFieldNumber = 6,
    kIsvalidTeleportDoorTypeFieldNumber = 7,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 group_id = 2;
  void clear_group_id();
  uint32_t group_id() const;
  void set_group_id(uint32_t value);
  private:
  uint32_t _internal_group_id() const;
  void _internal_set_group_id(uint32_t value);
  public:

  // uint32 teleport_door_type = 3;
  void clear_teleport_door_type();
  uint32_t teleport_door_type() const;
  void set_teleport_door_type(uint32_t value);
  private:
  uint32_t _internal_teleport_door_type() const;
  void _internal_set_teleport_door_type(uint32_t value);
  public:

  // uint32 target_door_id = 4;
  void clear_target_door_id();
  uint32_t target_door_id() const;
  void set_target_door_id(uint32_t value);
  private:
  uint32_t _internal_target_door_id() const;
  void _internal_set_target_door_id(uint32_t value);
  public:

  // uint32 trigger_type = 5;
  void clear_trigger_type();
  uint32_t trigger_type() const;
  void set_trigger_type(uint32_t value);
  private:
  uint32_t _internal_trigger_type() const;
  void _internal_set_trigger_type(uint32_t value);
  public:

  // bool teleport_active = 6;
  void clear_teleport_active();
  bool teleport_active() const;
  void set_teleport_active(bool value);
  private:
  bool _internal_teleport_active() const;
  void _internal_set_teleport_active(bool value);
  public:

  // bool isvalid_teleport_door_type = 7;
  void clear_isvalid_teleport_door_type();
  bool isvalid_teleport_door_type() const;
  void set_isvalid_teleport_door_type(bool value);
  private:
  bool _internal_isvalid_teleport_door_type() const;
  void _internal_set_isvalid_teleport_door_type(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditTeleportDoorProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t group_id_;
    uint32_t teleport_door_type_;
    uint32_t target_door_id_;
    uint32_t trigger_type_;
    bool teleport_active_;
    bool isvalid_teleport_door_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditPianoKeyProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditPianoKeyProtoData) */ {
 public:
  inline SceneEditPianoKeyProtoData() : SceneEditPianoKeyProtoData(nullptr) {}
  ~SceneEditPianoKeyProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditPianoKeyProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditPianoKeyProtoData(const SceneEditPianoKeyProtoData& from);
  SceneEditPianoKeyProtoData(SceneEditPianoKeyProtoData&& from) noexcept
    : SceneEditPianoKeyProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditPianoKeyProtoData& operator=(const SceneEditPianoKeyProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditPianoKeyProtoData& operator=(SceneEditPianoKeyProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditPianoKeyProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditPianoKeyProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditPianoKeyProtoData*>(
               &_SceneEditPianoKeyProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(SceneEditPianoKeyProtoData& a, SceneEditPianoKeyProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditPianoKeyProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditPianoKeyProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditPianoKeyProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditPianoKeyProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditPianoKeyProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditPianoKeyProtoData& from) {
    SceneEditPianoKeyProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditPianoKeyProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditPianoKeyProtoData";
  }
  protected:
  explicit SceneEditPianoKeyProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kKeyIdFieldNumber = 2,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 key_id = 2;
  void clear_key_id();
  uint32_t key_id() const;
  void set_key_id(uint32_t value);
  private:
  uint32_t _internal_key_id() const;
  void _internal_set_key_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditPianoKeyProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t key_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditBuffProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditBuffProtoData) */ {
 public:
  inline SceneEditBuffProtoData() : SceneEditBuffProtoData(nullptr) {}
  ~SceneEditBuffProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditBuffProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditBuffProtoData(const SceneEditBuffProtoData& from);
  SceneEditBuffProtoData(SceneEditBuffProtoData&& from) noexcept
    : SceneEditBuffProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditBuffProtoData& operator=(const SceneEditBuffProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditBuffProtoData& operator=(SceneEditBuffProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditBuffProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditBuffProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditBuffProtoData*>(
               &_SceneEditBuffProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SceneEditBuffProtoData& a, SceneEditBuffProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditBuffProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditBuffProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditBuffProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditBuffProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditBuffProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditBuffProtoData& from) {
    SceneEditBuffProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditBuffProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditBuffProtoData";
  }
  protected:
  explicit SceneEditBuffProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kBuffTypeFieldNumber = 2,
    kBuffRefreshTimeSecFieldNumber = 3,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 buff_type = 2;
  void clear_buff_type();
  uint32_t buff_type() const;
  void set_buff_type(uint32_t value);
  private:
  uint32_t _internal_buff_type() const;
  void _internal_set_buff_type(uint32_t value);
  public:

  // uint32 buff_refresh_time_sec = 3;
  void clear_buff_refresh_time_sec();
  uint32_t buff_refresh_time_sec() const;
  void set_buff_refresh_time_sec(uint32_t value);
  private:
  uint32_t _internal_buff_refresh_time_sec() const;
  void _internal_set_buff_refresh_time_sec(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditBuffProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t buff_type_;
    uint32_t buff_refresh_time_sec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditMoveObjectProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditMoveObjectProtoData) */ {
 public:
  inline SceneEditMoveObjectProtoData() : SceneEditMoveObjectProtoData(nullptr) {}
  ~SceneEditMoveObjectProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditMoveObjectProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditMoveObjectProtoData(const SceneEditMoveObjectProtoData& from);
  SceneEditMoveObjectProtoData(SceneEditMoveObjectProtoData&& from) noexcept
    : SceneEditMoveObjectProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditMoveObjectProtoData& operator=(const SceneEditMoveObjectProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditMoveObjectProtoData& operator=(SceneEditMoveObjectProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditMoveObjectProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditMoveObjectProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditMoveObjectProtoData*>(
               &_SceneEditMoveObjectProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SceneEditMoveObjectProtoData& a, SceneEditMoveObjectProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditMoveObjectProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditMoveObjectProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditMoveObjectProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditMoveObjectProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditMoveObjectProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditMoveObjectProtoData& from) {
    SceneEditMoveObjectProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditMoveObjectProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditMoveObjectProtoData";
  }
  protected:
  explicit SceneEditMoveObjectProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kMoveConfigIDFieldNumber = 2,
    kMotionValueFieldNumber = 4,
    kMotionTypeFieldNumber = 6,
    kMotionEditModeFieldNumber = 3,
    kMotionCustomizedFieldNumber = 5,
    kIsResetFieldNumber = 12,
    kMotionValueXFieldNumber = 7,
    kMotionValueYFieldNumber = 8,
    kMotionValueZFieldNumber = 9,
    kMotionTimeFieldNumber = 10,
    kStayTimeFieldNumber = 11,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 moveConfigID = 2;
  void clear_moveconfigid();
  uint32_t moveconfigid() const;
  void set_moveconfigid(uint32_t value);
  private:
  uint32_t _internal_moveconfigid() const;
  void _internal_set_moveconfigid(uint32_t value);
  public:

  // uint32 motionValue = 4;
  void clear_motionvalue();
  uint32_t motionvalue() const;
  void set_motionvalue(uint32_t value);
  private:
  uint32_t _internal_motionvalue() const;
  void _internal_set_motionvalue(uint32_t value);
  public:

  // uint32 motionType = 6;
  void clear_motiontype();
  uint32_t motiontype() const;
  void set_motiontype(uint32_t value);
  private:
  uint32_t _internal_motiontype() const;
  void _internal_set_motiontype(uint32_t value);
  public:

  // bool motionEditMode = 3;
  void clear_motioneditmode();
  bool motioneditmode() const;
  void set_motioneditmode(bool value);
  private:
  bool _internal_motioneditmode() const;
  void _internal_set_motioneditmode(bool value);
  public:

  // bool motionCustomized = 5;
  void clear_motioncustomized();
  bool motioncustomized() const;
  void set_motioncustomized(bool value);
  private:
  bool _internal_motioncustomized() const;
  void _internal_set_motioncustomized(bool value);
  public:

  // bool IsReset = 12;
  void clear_isreset();
  bool isreset() const;
  void set_isreset(bool value);
  private:
  bool _internal_isreset() const;
  void _internal_set_isreset(bool value);
  public:

  // uint32 motionValueX = 7;
  void clear_motionvaluex();
  uint32_t motionvaluex() const;
  void set_motionvaluex(uint32_t value);
  private:
  uint32_t _internal_motionvaluex() const;
  void _internal_set_motionvaluex(uint32_t value);
  public:

  // uint32 motionValueY = 8;
  void clear_motionvaluey();
  uint32_t motionvaluey() const;
  void set_motionvaluey(uint32_t value);
  private:
  uint32_t _internal_motionvaluey() const;
  void _internal_set_motionvaluey(uint32_t value);
  public:

  // uint32 motionValueZ = 9;
  void clear_motionvaluez();
  uint32_t motionvaluez() const;
  void set_motionvaluez(uint32_t value);
  private:
  uint32_t _internal_motionvaluez() const;
  void _internal_set_motionvaluez(uint32_t value);
  public:

  // uint32 motionTime = 10;
  void clear_motiontime();
  uint32_t motiontime() const;
  void set_motiontime(uint32_t value);
  private:
  uint32_t _internal_motiontime() const;
  void _internal_set_motiontime(uint32_t value);
  public:

  // uint32 StayTime = 11;
  void clear_staytime();
  uint32_t staytime() const;
  void set_staytime(uint32_t value);
  private:
  uint32_t _internal_staytime() const;
  void _internal_set_staytime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditMoveObjectProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t moveconfigid_;
    uint32_t motionvalue_;
    uint32_t motiontype_;
    bool motioneditmode_;
    bool motioncustomized_;
    bool isreset_;
    uint32_t motionvaluex_;
    uint32_t motionvaluey_;
    uint32_t motionvaluez_;
    uint32_t motiontime_;
    uint32_t staytime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditScalableItemProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditScalableItemProtoData) */ {
 public:
  inline SceneEditScalableItemProtoData() : SceneEditScalableItemProtoData(nullptr) {}
  ~SceneEditScalableItemProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditScalableItemProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditScalableItemProtoData(const SceneEditScalableItemProtoData& from);
  SceneEditScalableItemProtoData(SceneEditScalableItemProtoData&& from) noexcept
    : SceneEditScalableItemProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditScalableItemProtoData& operator=(const SceneEditScalableItemProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditScalableItemProtoData& operator=(SceneEditScalableItemProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditScalableItemProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditScalableItemProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditScalableItemProtoData*>(
               &_SceneEditScalableItemProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SceneEditScalableItemProtoData& a, SceneEditScalableItemProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditScalableItemProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditScalableItemProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditScalableItemProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditScalableItemProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditScalableItemProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditScalableItemProtoData& from) {
    SceneEditScalableItemProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditScalableItemProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditScalableItemProtoData";
  }
  protected:
  explicit SceneEditScalableItemProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kScaleXFieldNumber = 2,
    kScaleYFieldNumber = 3,
    kScaleZFieldNumber = 4,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 ScaleX = 2;
  void clear_scalex();
  uint32_t scalex() const;
  void set_scalex(uint32_t value);
  private:
  uint32_t _internal_scalex() const;
  void _internal_set_scalex(uint32_t value);
  public:

  // uint32 ScaleY = 3;
  void clear_scaley();
  uint32_t scaley() const;
  void set_scaley(uint32_t value);
  private:
  uint32_t _internal_scaley() const;
  void _internal_set_scaley(uint32_t value);
  public:

  // uint32 ScaleZ = 4;
  void clear_scalez();
  uint32_t scalez() const;
  void set_scalez(uint32_t value);
  private:
  uint32_t _internal_scalez() const;
  void _internal_set_scalez(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditScalableItemProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t scalex_;
    uint32_t scaley_;
    uint32_t scalez_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditItemBoxProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditItemBoxProtoData) */ {
 public:
  inline SceneEditItemBoxProtoData() : SceneEditItemBoxProtoData(nullptr) {}
  ~SceneEditItemBoxProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditItemBoxProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditItemBoxProtoData(const SceneEditItemBoxProtoData& from);
  SceneEditItemBoxProtoData(SceneEditItemBoxProtoData&& from) noexcept
    : SceneEditItemBoxProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditItemBoxProtoData& operator=(const SceneEditItemBoxProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditItemBoxProtoData& operator=(SceneEditItemBoxProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditItemBoxProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditItemBoxProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditItemBoxProtoData*>(
               &_SceneEditItemBoxProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SceneEditItemBoxProtoData& a, SceneEditItemBoxProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditItemBoxProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditItemBoxProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditItemBoxProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditItemBoxProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditItemBoxProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditItemBoxProtoData& from) {
    SceneEditItemBoxProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditItemBoxProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditItemBoxProtoData";
  }
  protected:
  explicit SceneEditItemBoxProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomDataFieldNumber = 3,
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kDropidFieldNumber = 2,
  };
  // .message.SceneEditCustomItemBoxProtoData customData = 3;
  bool has_customdata() const;
  private:
  bool _internal_has_customdata() const;
  public:
  void clear_customdata();
  const ::message::SceneEditCustomItemBoxProtoData& customdata() const;
  PROTOBUF_NODISCARD ::message::SceneEditCustomItemBoxProtoData* release_customdata();
  ::message::SceneEditCustomItemBoxProtoData* mutable_customdata();
  void set_allocated_customdata(::message::SceneEditCustomItemBoxProtoData* customdata);
  private:
  const ::message::SceneEditCustomItemBoxProtoData& _internal_customdata() const;
  ::message::SceneEditCustomItemBoxProtoData* _internal_mutable_customdata();
  public:
  void unsafe_arena_set_allocated_customdata(
      ::message::SceneEditCustomItemBoxProtoData* customdata);
  ::message::SceneEditCustomItemBoxProtoData* unsafe_arena_release_customdata();

  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 dropid = 2;
  void clear_dropid();
  uint32_t dropid() const;
  void set_dropid(uint32_t value);
  private:
  uint32_t _internal_dropid() const;
  void _internal_set_dropid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditItemBoxProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::SceneEditCustomItemBoxProtoData* customdata_;
    uint32_t extra_base_info_instance_id_;
    uint32_t dropid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditCustomItemBoxProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditCustomItemBoxProtoData) */ {
 public:
  inline SceneEditCustomItemBoxProtoData() : SceneEditCustomItemBoxProtoData(nullptr) {}
  ~SceneEditCustomItemBoxProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditCustomItemBoxProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditCustomItemBoxProtoData(const SceneEditCustomItemBoxProtoData& from);
  SceneEditCustomItemBoxProtoData(SceneEditCustomItemBoxProtoData&& from) noexcept
    : SceneEditCustomItemBoxProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditCustomItemBoxProtoData& operator=(const SceneEditCustomItemBoxProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditCustomItemBoxProtoData& operator=(SceneEditCustomItemBoxProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditCustomItemBoxProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditCustomItemBoxProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditCustomItemBoxProtoData*>(
               &_SceneEditCustomItemBoxProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SceneEditCustomItemBoxProtoData& a, SceneEditCustomItemBoxProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditCustomItemBoxProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditCustomItemBoxProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditCustomItemBoxProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditCustomItemBoxProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditCustomItemBoxProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditCustomItemBoxProtoData& from) {
    SceneEditCustomItemBoxProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditCustomItemBoxProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditCustomItemBoxProtoData";
  }
  protected:
  explicit SceneEditCustomItemBoxProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLootGroupsFieldNumber = 2,
    kRefreshCountFieldNumber = 1,
  };
  // repeated .message.SceneEditCustomItemBoxGroupProtoData lootGroups = 2;
  int lootgroups_size() const;
  private:
  int _internal_lootgroups_size() const;
  public:
  void clear_lootgroups();
  ::message::SceneEditCustomItemBoxGroupProtoData* mutable_lootgroups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxGroupProtoData >*
      mutable_lootgroups();
  private:
  const ::message::SceneEditCustomItemBoxGroupProtoData& _internal_lootgroups(int index) const;
  ::message::SceneEditCustomItemBoxGroupProtoData* _internal_add_lootgroups();
  public:
  const ::message::SceneEditCustomItemBoxGroupProtoData& lootgroups(int index) const;
  ::message::SceneEditCustomItemBoxGroupProtoData* add_lootgroups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxGroupProtoData >&
      lootgroups() const;

  // uint32 refreshCount = 1;
  void clear_refreshcount();
  uint32_t refreshcount() const;
  void set_refreshcount(uint32_t value);
  private:
  uint32_t _internal_refreshcount() const;
  void _internal_set_refreshcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditCustomItemBoxProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxGroupProtoData > lootgroups_;
    uint32_t refreshcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditCustomItemBoxGroupProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditCustomItemBoxGroupProtoData) */ {
 public:
  inline SceneEditCustomItemBoxGroupProtoData() : SceneEditCustomItemBoxGroupProtoData(nullptr) {}
  ~SceneEditCustomItemBoxGroupProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditCustomItemBoxGroupProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditCustomItemBoxGroupProtoData(const SceneEditCustomItemBoxGroupProtoData& from);
  SceneEditCustomItemBoxGroupProtoData(SceneEditCustomItemBoxGroupProtoData&& from) noexcept
    : SceneEditCustomItemBoxGroupProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditCustomItemBoxGroupProtoData& operator=(const SceneEditCustomItemBoxGroupProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditCustomItemBoxGroupProtoData& operator=(SceneEditCustomItemBoxGroupProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditCustomItemBoxGroupProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditCustomItemBoxGroupProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditCustomItemBoxGroupProtoData*>(
               &_SceneEditCustomItemBoxGroupProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(SceneEditCustomItemBoxGroupProtoData& a, SceneEditCustomItemBoxGroupProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditCustomItemBoxGroupProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditCustomItemBoxGroupProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditCustomItemBoxGroupProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditCustomItemBoxGroupProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditCustomItemBoxGroupProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditCustomItemBoxGroupProtoData& from) {
    SceneEditCustomItemBoxGroupProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditCustomItemBoxGroupProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditCustomItemBoxGroupProtoData";
  }
  protected:
  explicit SceneEditCustomItemBoxGroupProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLootItemsFieldNumber = 2,
    kRefreshCountFieldNumber = 1,
    kMarkedFieldNumber = 3,
  };
  // repeated .message.SceneEditCustomItemBoxItemProtoData lootItems = 2;
  int lootitems_size() const;
  private:
  int _internal_lootitems_size() const;
  public:
  void clear_lootitems();
  ::message::SceneEditCustomItemBoxItemProtoData* mutable_lootitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxItemProtoData >*
      mutable_lootitems();
  private:
  const ::message::SceneEditCustomItemBoxItemProtoData& _internal_lootitems(int index) const;
  ::message::SceneEditCustomItemBoxItemProtoData* _internal_add_lootitems();
  public:
  const ::message::SceneEditCustomItemBoxItemProtoData& lootitems(int index) const;
  ::message::SceneEditCustomItemBoxItemProtoData* add_lootitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxItemProtoData >&
      lootitems() const;

  // uint32 refreshCount = 1;
  void clear_refreshcount();
  uint32_t refreshcount() const;
  void set_refreshcount(uint32_t value);
  private:
  uint32_t _internal_refreshcount() const;
  void _internal_set_refreshcount(uint32_t value);
  public:

  // bool marked = 3;
  void clear_marked();
  bool marked() const;
  void set_marked(bool value);
  private:
  bool _internal_marked() const;
  void _internal_set_marked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditCustomItemBoxGroupProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxItemProtoData > lootitems_;
    uint32_t refreshcount_;
    bool marked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditCustomItemBoxItemProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditCustomItemBoxItemProtoData) */ {
 public:
  inline SceneEditCustomItemBoxItemProtoData() : SceneEditCustomItemBoxItemProtoData(nullptr) {}
  ~SceneEditCustomItemBoxItemProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditCustomItemBoxItemProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditCustomItemBoxItemProtoData(const SceneEditCustomItemBoxItemProtoData& from);
  SceneEditCustomItemBoxItemProtoData(SceneEditCustomItemBoxItemProtoData&& from) noexcept
    : SceneEditCustomItemBoxItemProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditCustomItemBoxItemProtoData& operator=(const SceneEditCustomItemBoxItemProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditCustomItemBoxItemProtoData& operator=(SceneEditCustomItemBoxItemProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditCustomItemBoxItemProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditCustomItemBoxItemProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditCustomItemBoxItemProtoData*>(
               &_SceneEditCustomItemBoxItemProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SceneEditCustomItemBoxItemProtoData& a, SceneEditCustomItemBoxItemProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditCustomItemBoxItemProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditCustomItemBoxItemProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditCustomItemBoxItemProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditCustomItemBoxItemProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditCustomItemBoxItemProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditCustomItemBoxItemProtoData& from) {
    SceneEditCustomItemBoxItemProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditCustomItemBoxItemProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditCustomItemBoxItemProtoData";
  }
  protected:
  explicit SceneEditCustomItemBoxItemProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemidFieldNumber = 1,
    kNumFieldNumber = 2,
    kMarkedFieldNumber = 3,
  };
  // uint32 itemid = 1;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // uint32 num = 2;
  void clear_num();
  uint32_t num() const;
  void set_num(uint32_t value);
  private:
  uint32_t _internal_num() const;
  void _internal_set_num(uint32_t value);
  public:

  // bool marked = 3;
  void clear_marked();
  bool marked() const;
  void set_marked(bool value);
  private:
  bool _internal_marked() const;
  void _internal_set_marked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditCustomItemBoxItemProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t itemid_;
    uint32_t num_;
    bool marked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditTriggerProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditTriggerProtoData) */ {
 public:
  inline SceneEditTriggerProtoData() : SceneEditTriggerProtoData(nullptr) {}
  ~SceneEditTriggerProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditTriggerProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditTriggerProtoData(const SceneEditTriggerProtoData& from);
  SceneEditTriggerProtoData(SceneEditTriggerProtoData&& from) noexcept
    : SceneEditTriggerProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditTriggerProtoData& operator=(const SceneEditTriggerProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditTriggerProtoData& operator=(SceneEditTriggerProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditTriggerProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditTriggerProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditTriggerProtoData*>(
               &_SceneEditTriggerProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SceneEditTriggerProtoData& a, SceneEditTriggerProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditTriggerProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditTriggerProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditTriggerProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditTriggerProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditTriggerProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditTriggerProtoData& from) {
    SceneEditTriggerProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditTriggerProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditTriggerProtoData";
  }
  protected:
  explicit SceneEditTriggerProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kTriggerTypeFieldNumber = 2,
    kIsShowFieldNumber = 3,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 trigger_type = 2;
  void clear_trigger_type();
  uint32_t trigger_type() const;
  void set_trigger_type(uint32_t value);
  private:
  uint32_t _internal_trigger_type() const;
  void _internal_set_trigger_type(uint32_t value);
  public:

  // bool isShow = 3;
  void clear_isshow();
  bool isshow() const;
  void set_isshow(bool value);
  private:
  bool _internal_isshow() const;
  void _internal_set_isshow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditTriggerProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t trigger_type_;
    bool isshow_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditShapeTriggerProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditShapeTriggerProtoData) */ {
 public:
  inline SceneEditShapeTriggerProtoData() : SceneEditShapeTriggerProtoData(nullptr) {}
  ~SceneEditShapeTriggerProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditShapeTriggerProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditShapeTriggerProtoData(const SceneEditShapeTriggerProtoData& from);
  SceneEditShapeTriggerProtoData(SceneEditShapeTriggerProtoData&& from) noexcept
    : SceneEditShapeTriggerProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditShapeTriggerProtoData& operator=(const SceneEditShapeTriggerProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditShapeTriggerProtoData& operator=(SceneEditShapeTriggerProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditShapeTriggerProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditShapeTriggerProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditShapeTriggerProtoData*>(
               &_SceneEditShapeTriggerProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(SceneEditShapeTriggerProtoData& a, SceneEditShapeTriggerProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditShapeTriggerProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditShapeTriggerProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditShapeTriggerProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditShapeTriggerProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditShapeTriggerProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditShapeTriggerProtoData& from) {
    SceneEditShapeTriggerProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditShapeTriggerProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditShapeTriggerProtoData";
  }
  protected:
  explicit SceneEditShapeTriggerProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditShapeTriggerProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    float radius_;
    float height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditBigToyBallProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditBigToyBallProtoData) */ {
 public:
  inline SceneEditBigToyBallProtoData() : SceneEditBigToyBallProtoData(nullptr) {}
  ~SceneEditBigToyBallProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditBigToyBallProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditBigToyBallProtoData(const SceneEditBigToyBallProtoData& from);
  SceneEditBigToyBallProtoData(SceneEditBigToyBallProtoData&& from) noexcept
    : SceneEditBigToyBallProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditBigToyBallProtoData& operator=(const SceneEditBigToyBallProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditBigToyBallProtoData& operator=(SceneEditBigToyBallProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditBigToyBallProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditBigToyBallProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditBigToyBallProtoData*>(
               &_SceneEditBigToyBallProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(SceneEditBigToyBallProtoData& a, SceneEditBigToyBallProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditBigToyBallProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditBigToyBallProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditBigToyBallProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditBigToyBallProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditBigToyBallProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditBigToyBallProtoData& from) {
    SceneEditBigToyBallProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditBigToyBallProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditBigToyBallProtoData";
  }
  protected:
  explicit SceneEditBigToyBallProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kVelocityXzFieldNumber = 2,
    kVelocityYFieldNumber = 3,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // float velocity_xz = 2;
  void clear_velocity_xz();
  float velocity_xz() const;
  void set_velocity_xz(float value);
  private:
  float _internal_velocity_xz() const;
  void _internal_set_velocity_xz(float value);
  public:

  // float velocity_y = 3;
  void clear_velocity_y();
  float velocity_y() const;
  void set_velocity_y(float value);
  private:
  float _internal_velocity_y() const;
  void _internal_set_velocity_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditBigToyBallProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    float velocity_xz_;
    float velocity_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditMiniSentryProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditMiniSentryProtoData) */ {
 public:
  inline SceneEditMiniSentryProtoData() : SceneEditMiniSentryProtoData(nullptr) {}
  ~SceneEditMiniSentryProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditMiniSentryProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditMiniSentryProtoData(const SceneEditMiniSentryProtoData& from);
  SceneEditMiniSentryProtoData(SceneEditMiniSentryProtoData&& from) noexcept
    : SceneEditMiniSentryProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditMiniSentryProtoData& operator=(const SceneEditMiniSentryProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditMiniSentryProtoData& operator=(SceneEditMiniSentryProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditMiniSentryProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditMiniSentryProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditMiniSentryProtoData*>(
               &_SceneEditMiniSentryProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SceneEditMiniSentryProtoData& a, SceneEditMiniSentryProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditMiniSentryProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditMiniSentryProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditMiniSentryProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditMiniSentryProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditMiniSentryProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditMiniSentryProtoData& from) {
    SceneEditMiniSentryProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditMiniSentryProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditMiniSentryProtoData";
  }
  protected:
  explicit SceneEditMiniSentryProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kHpFieldNumber = 2,
    kDefenseFieldNumber = 3,
    kAttackFieldNumber = 4,
    kAttackIntervalFieldNumber = 5,
    kAttackRangeFieldNumber = 6,
    kTeamIdFieldNumber = 7,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // float defense = 3;
  void clear_defense();
  float defense() const;
  void set_defense(float value);
  private:
  float _internal_defense() const;
  void _internal_set_defense(float value);
  public:

  // uint32 attack = 4;
  void clear_attack();
  uint32_t attack() const;
  void set_attack(uint32_t value);
  private:
  uint32_t _internal_attack() const;
  void _internal_set_attack(uint32_t value);
  public:

  // float attack_interval = 5;
  void clear_attack_interval();
  float attack_interval() const;
  void set_attack_interval(float value);
  private:
  float _internal_attack_interval() const;
  void _internal_set_attack_interval(float value);
  public:

  // uint32 attack_range = 6;
  void clear_attack_range();
  uint32_t attack_range() const;
  void set_attack_range(uint32_t value);
  private:
  uint32_t _internal_attack_range() const;
  void _internal_set_attack_range(uint32_t value);
  public:

  // uint32 team_id = 7;
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditMiniSentryProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t hp_;
    float defense_;
    uint32_t attack_;
    float attack_interval_;
    uint32_t attack_range_;
    uint32_t team_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditBotGeneratorProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditBotGeneratorProtoData) */ {
 public:
  inline SceneEditBotGeneratorProtoData() : SceneEditBotGeneratorProtoData(nullptr) {}
  ~SceneEditBotGeneratorProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditBotGeneratorProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditBotGeneratorProtoData(const SceneEditBotGeneratorProtoData& from);
  SceneEditBotGeneratorProtoData(SceneEditBotGeneratorProtoData&& from) noexcept
    : SceneEditBotGeneratorProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditBotGeneratorProtoData& operator=(const SceneEditBotGeneratorProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditBotGeneratorProtoData& operator=(SceneEditBotGeneratorProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditBotGeneratorProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditBotGeneratorProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditBotGeneratorProtoData*>(
               &_SceneEditBotGeneratorProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SceneEditBotGeneratorProtoData& a, SceneEditBotGeneratorProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditBotGeneratorProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditBotGeneratorProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditBotGeneratorProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditBotGeneratorProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditBotGeneratorProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditBotGeneratorProtoData& from) {
    SceneEditBotGeneratorProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditBotGeneratorProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditBotGeneratorProtoData";
  }
  protected:
  explicit SceneEditBotGeneratorProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotConfigFieldNumber = 5,
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kCountEachBatchFieldNumber = 2,
    kBatchCountFieldNumber = 3,
    kBatchIntervalFieldNumber = 4,
    kEnableDeadDropFieldNumber = 6,
    kIsContinuousFieldNumber = 7,
    kBatchIntervalFloatFieldNumber = 8,
    kStartGenTimeFieldNumber = 9,
  };
  // .message.UGCAIConfigParams bot_config = 5;
  bool has_bot_config() const;
  private:
  bool _internal_has_bot_config() const;
  public:
  void clear_bot_config();
  const ::message::UGCAIConfigParams& bot_config() const;
  PROTOBUF_NODISCARD ::message::UGCAIConfigParams* release_bot_config();
  ::message::UGCAIConfigParams* mutable_bot_config();
  void set_allocated_bot_config(::message::UGCAIConfigParams* bot_config);
  private:
  const ::message::UGCAIConfigParams& _internal_bot_config() const;
  ::message::UGCAIConfigParams* _internal_mutable_bot_config();
  public:
  void unsafe_arena_set_allocated_bot_config(
      ::message::UGCAIConfigParams* bot_config);
  ::message::UGCAIConfigParams* unsafe_arena_release_bot_config();

  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 count_each_batch = 2;
  void clear_count_each_batch();
  uint32_t count_each_batch() const;
  void set_count_each_batch(uint32_t value);
  private:
  uint32_t _internal_count_each_batch() const;
  void _internal_set_count_each_batch(uint32_t value);
  public:

  // uint32 batch_count = 3;
  void clear_batch_count();
  uint32_t batch_count() const;
  void set_batch_count(uint32_t value);
  private:
  uint32_t _internal_batch_count() const;
  void _internal_set_batch_count(uint32_t value);
  public:

  // uint32 batch_interval = 4;
  void clear_batch_interval();
  uint32_t batch_interval() const;
  void set_batch_interval(uint32_t value);
  private:
  uint32_t _internal_batch_interval() const;
  void _internal_set_batch_interval(uint32_t value);
  public:

  // uint32 enable_dead_drop = 6;
  void clear_enable_dead_drop();
  uint32_t enable_dead_drop() const;
  void set_enable_dead_drop(uint32_t value);
  private:
  uint32_t _internal_enable_dead_drop() const;
  void _internal_set_enable_dead_drop(uint32_t value);
  public:

  // bool is_continuous = 7;
  void clear_is_continuous();
  bool is_continuous() const;
  void set_is_continuous(bool value);
  private:
  bool _internal_is_continuous() const;
  void _internal_set_is_continuous(bool value);
  public:

  // float batch_interval_float = 8;
  void clear_batch_interval_float();
  float batch_interval_float() const;
  void set_batch_interval_float(float value);
  private:
  float _internal_batch_interval_float() const;
  void _internal_set_batch_interval_float(float value);
  public:

  // float start_gen_time = 9;
  void clear_start_gen_time();
  float start_gen_time() const;
  void set_start_gen_time(float value);
  private:
  float _internal_start_gen_time() const;
  void _internal_set_start_gen_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditBotGeneratorProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCAIConfigParams* bot_config_;
    uint32_t extra_base_info_instance_id_;
    uint32_t count_each_batch_;
    uint32_t batch_count_;
    uint32_t batch_interval_;
    uint32_t enable_dead_drop_;
    bool is_continuous_;
    float batch_interval_float_;
    float start_gen_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditUGCVendingMachineProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditUGCVendingMachineProtoData) */ {
 public:
  inline SceneEditUGCVendingMachineProtoData() : SceneEditUGCVendingMachineProtoData(nullptr) {}
  ~SceneEditUGCVendingMachineProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditUGCVendingMachineProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditUGCVendingMachineProtoData(const SceneEditUGCVendingMachineProtoData& from);
  SceneEditUGCVendingMachineProtoData(SceneEditUGCVendingMachineProtoData&& from) noexcept
    : SceneEditUGCVendingMachineProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditUGCVendingMachineProtoData& operator=(const SceneEditUGCVendingMachineProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditUGCVendingMachineProtoData& operator=(SceneEditUGCVendingMachineProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditUGCVendingMachineProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditUGCVendingMachineProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditUGCVendingMachineProtoData*>(
               &_SceneEditUGCVendingMachineProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SceneEditUGCVendingMachineProtoData& a, SceneEditUGCVendingMachineProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditUGCVendingMachineProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditUGCVendingMachineProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditUGCVendingMachineProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditUGCVendingMachineProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditUGCVendingMachineProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditUGCVendingMachineProtoData& from) {
    SceneEditUGCVendingMachineProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditUGCVendingMachineProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditUGCVendingMachineProtoData";
  }
  protected:
  explicit SceneEditUGCVendingMachineProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindingShopEntityIdFieldNumber = 2,
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kTriggerRadiusFieldNumber = 3,
    kModelShowFieldNumber = 4,
  };
  // string binding_shop_entity_id = 2;
  void clear_binding_shop_entity_id();
  const std::string& binding_shop_entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_binding_shop_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_binding_shop_entity_id();
  PROTOBUF_NODISCARD std::string* release_binding_shop_entity_id();
  void set_allocated_binding_shop_entity_id(std::string* binding_shop_entity_id);
  private:
  const std::string& _internal_binding_shop_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binding_shop_entity_id(const std::string& value);
  std::string* _internal_mutable_binding_shop_entity_id();
  public:

  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // float trigger_radius = 3;
  void clear_trigger_radius();
  float trigger_radius() const;
  void set_trigger_radius(float value);
  private:
  float _internal_trigger_radius() const;
  void _internal_set_trigger_radius(float value);
  public:

  // bool model_show = 4;
  void clear_model_show();
  bool model_show() const;
  void set_model_show(bool value);
  private:
  bool _internal_model_show() const;
  void _internal_set_model_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditUGCVendingMachineProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binding_shop_entity_id_;
    uint32_t extra_base_info_instance_id_;
    float trigger_radius_;
    bool model_show_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditUGCWardrobeProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditUGCWardrobeProtoData) */ {
 public:
  inline SceneEditUGCWardrobeProtoData() : SceneEditUGCWardrobeProtoData(nullptr) {}
  ~SceneEditUGCWardrobeProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditUGCWardrobeProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditUGCWardrobeProtoData(const SceneEditUGCWardrobeProtoData& from);
  SceneEditUGCWardrobeProtoData(SceneEditUGCWardrobeProtoData&& from) noexcept
    : SceneEditUGCWardrobeProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditUGCWardrobeProtoData& operator=(const SceneEditUGCWardrobeProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditUGCWardrobeProtoData& operator=(SceneEditUGCWardrobeProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditUGCWardrobeProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditUGCWardrobeProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditUGCWardrobeProtoData*>(
               &_SceneEditUGCWardrobeProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SceneEditUGCWardrobeProtoData& a, SceneEditUGCWardrobeProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditUGCWardrobeProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditUGCWardrobeProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditUGCWardrobeProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditUGCWardrobeProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditUGCWardrobeProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditUGCWardrobeProtoData& from) {
    SceneEditUGCWardrobeProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditUGCWardrobeProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditUGCWardrobeProtoData";
  }
  protected:
  explicit SceneEditUGCWardrobeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kTriggerRadiusFieldNumber = 2,
    kModelShowFieldNumber = 3,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // float trigger_radius = 2;
  void clear_trigger_radius();
  float trigger_radius() const;
  void set_trigger_radius(float value);
  private:
  float _internal_trigger_radius() const;
  void _internal_set_trigger_radius(float value);
  public:

  // bool model_show = 3;
  void clear_model_show();
  bool model_show() const;
  void set_model_show(bool value);
  private:
  bool _internal_model_show() const;
  void _internal_set_model_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditUGCWardrobeProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    float trigger_radius_;
    bool model_show_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditUGCPointLightProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditUGCPointLightProtoData) */ {
 public:
  inline SceneEditUGCPointLightProtoData() : SceneEditUGCPointLightProtoData(nullptr) {}
  ~SceneEditUGCPointLightProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditUGCPointLightProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditUGCPointLightProtoData(const SceneEditUGCPointLightProtoData& from);
  SceneEditUGCPointLightProtoData(SceneEditUGCPointLightProtoData&& from) noexcept
    : SceneEditUGCPointLightProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditUGCPointLightProtoData& operator=(const SceneEditUGCPointLightProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditUGCPointLightProtoData& operator=(SceneEditUGCPointLightProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditUGCPointLightProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditUGCPointLightProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditUGCPointLightProtoData*>(
               &_SceneEditUGCPointLightProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(SceneEditUGCPointLightProtoData& a, SceneEditUGCPointLightProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditUGCPointLightProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditUGCPointLightProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditUGCPointLightProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditUGCPointLightProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditUGCPointLightProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditUGCPointLightProtoData& from) {
    SceneEditUGCPointLightProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditUGCPointLightProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditUGCPointLightProtoData";
  }
  protected:
  explicit SceneEditUGCPointLightProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kIntensityFieldNumber = 2,
    kRangeFieldNumber = 3,
    kColorFieldNumber = 4,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // float intensity = 2;
  void clear_intensity();
  float intensity() const;
  void set_intensity(float value);
  private:
  float _internal_intensity() const;
  void _internal_set_intensity(float value);
  public:

  // float range = 3;
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // uint32 color = 4;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditUGCPointLightProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    float intensity_;
    float range_;
    uint32_t color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditUGCFootballProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditUGCFootballProtoData) */ {
 public:
  inline SceneEditUGCFootballProtoData() : SceneEditUGCFootballProtoData(nullptr) {}
  ~SceneEditUGCFootballProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditUGCFootballProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditUGCFootballProtoData(const SceneEditUGCFootballProtoData& from);
  SceneEditUGCFootballProtoData(SceneEditUGCFootballProtoData&& from) noexcept
    : SceneEditUGCFootballProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditUGCFootballProtoData& operator=(const SceneEditUGCFootballProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditUGCFootballProtoData& operator=(SceneEditUGCFootballProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditUGCFootballProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditUGCFootballProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditUGCFootballProtoData*>(
               &_SceneEditUGCFootballProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(SceneEditUGCFootballProtoData& a, SceneEditUGCFootballProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditUGCFootballProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditUGCFootballProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditUGCFootballProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditUGCFootballProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditUGCFootballProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditUGCFootballProtoData& from) {
    SceneEditUGCFootballProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditUGCFootballProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditUGCFootballProtoData";
  }
  protected:
  explicit SceneEditUGCFootballProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kFrictionFieldNumber = 3,
    kFrictionRushFieldNumber = 4,
    kShootAngleMinFieldNumber = 5,
    kHighShootAngleMinFieldNumber = 6,
    kHideTimeFieldNumber = 7,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float friction = 3;
  void clear_friction();
  float friction() const;
  void set_friction(float value);
  private:
  float _internal_friction() const;
  void _internal_set_friction(float value);
  public:

  // float friction_rush = 4;
  void clear_friction_rush();
  float friction_rush() const;
  void set_friction_rush(float value);
  private:
  float _internal_friction_rush() const;
  void _internal_set_friction_rush(float value);
  public:

  // float shoot_angle_min = 5;
  void clear_shoot_angle_min();
  float shoot_angle_min() const;
  void set_shoot_angle_min(float value);
  private:
  float _internal_shoot_angle_min() const;
  void _internal_set_shoot_angle_min(float value);
  public:

  // float high_shoot_angle_min = 6;
  void clear_high_shoot_angle_min();
  float high_shoot_angle_min() const;
  void set_high_shoot_angle_min(float value);
  private:
  float _internal_high_shoot_angle_min() const;
  void _internal_set_high_shoot_angle_min(float value);
  public:

  // float hide_time = 7;
  void clear_hide_time();
  float hide_time() const;
  void set_hide_time(float value);
  private:
  float _internal_hide_time() const;
  void _internal_set_hide_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditUGCFootballProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    float radius_;
    float friction_;
    float friction_rush_;
    float shoot_angle_min_;
    float high_shoot_angle_min_;
    float hide_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditUGCCoinGeneratorProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditUGCCoinGeneratorProtoData) */ {
 public:
  inline SceneEditUGCCoinGeneratorProtoData() : SceneEditUGCCoinGeneratorProtoData(nullptr) {}
  ~SceneEditUGCCoinGeneratorProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditUGCCoinGeneratorProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditUGCCoinGeneratorProtoData(const SceneEditUGCCoinGeneratorProtoData& from);
  SceneEditUGCCoinGeneratorProtoData(SceneEditUGCCoinGeneratorProtoData&& from) noexcept
    : SceneEditUGCCoinGeneratorProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditUGCCoinGeneratorProtoData& operator=(const SceneEditUGCCoinGeneratorProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditUGCCoinGeneratorProtoData& operator=(SceneEditUGCCoinGeneratorProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditUGCCoinGeneratorProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditUGCCoinGeneratorProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditUGCCoinGeneratorProtoData*>(
               &_SceneEditUGCCoinGeneratorProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(SceneEditUGCCoinGeneratorProtoData& a, SceneEditUGCCoinGeneratorProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditUGCCoinGeneratorProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditUGCCoinGeneratorProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditUGCCoinGeneratorProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditUGCCoinGeneratorProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditUGCCoinGeneratorProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditUGCCoinGeneratorProtoData& from) {
    SceneEditUGCCoinGeneratorProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditUGCCoinGeneratorProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditUGCCoinGeneratorProtoData";
  }
  protected:
  explicit SceneEditUGCCoinGeneratorProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kCointCntFieldNumber = 2,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // float coint_cnt = 2;
  void clear_coint_cnt();
  float coint_cnt() const;
  void set_coint_cnt(float value);
  private:
  float _internal_coint_cnt() const;
  void _internal_set_coint_cnt(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditUGCCoinGeneratorProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    float coint_cnt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditUGCEntityGeneratorProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditUGCEntityGeneratorProtoData) */ {
 public:
  inline SceneEditUGCEntityGeneratorProtoData() : SceneEditUGCEntityGeneratorProtoData(nullptr) {}
  ~SceneEditUGCEntityGeneratorProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditUGCEntityGeneratorProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditUGCEntityGeneratorProtoData(const SceneEditUGCEntityGeneratorProtoData& from);
  SceneEditUGCEntityGeneratorProtoData(SceneEditUGCEntityGeneratorProtoData&& from) noexcept
    : SceneEditUGCEntityGeneratorProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditUGCEntityGeneratorProtoData& operator=(const SceneEditUGCEntityGeneratorProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditUGCEntityGeneratorProtoData& operator=(SceneEditUGCEntityGeneratorProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditUGCEntityGeneratorProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditUGCEntityGeneratorProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditUGCEntityGeneratorProtoData*>(
               &_SceneEditUGCEntityGeneratorProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SceneEditUGCEntityGeneratorProtoData& a, SceneEditUGCEntityGeneratorProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditUGCEntityGeneratorProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditUGCEntityGeneratorProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditUGCEntityGeneratorProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditUGCEntityGeneratorProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditUGCEntityGeneratorProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditUGCEntityGeneratorProtoData& from) {
    SceneEditUGCEntityGeneratorProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditUGCEntityGeneratorProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditUGCEntityGeneratorProtoData";
  }
  protected:
  explicit SceneEditUGCEntityGeneratorProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 5,
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kCountEachBatchFieldNumber = 2,
    kBatchCountFieldNumber = 3,
    kBatchIntervalFieldNumber = 4,
    kBatchIntervalFloatFieldNumber = 6,
    kIsContinuousFieldNumber = 7,
    kStartGenTimeFieldNumber = 8,
  };
  // string entity_id = 5;
  void clear_entity_id();
  const std::string& entity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_id();
  PROTOBUF_NODISCARD std::string* release_entity_id();
  void set_allocated_entity_id(std::string* entity_id);
  private:
  const std::string& _internal_entity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_id(const std::string& value);
  std::string* _internal_mutable_entity_id();
  public:

  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 count_each_batch = 2;
  void clear_count_each_batch();
  uint32_t count_each_batch() const;
  void set_count_each_batch(uint32_t value);
  private:
  uint32_t _internal_count_each_batch() const;
  void _internal_set_count_each_batch(uint32_t value);
  public:

  // uint32 batch_count = 3;
  void clear_batch_count();
  uint32_t batch_count() const;
  void set_batch_count(uint32_t value);
  private:
  uint32_t _internal_batch_count() const;
  void _internal_set_batch_count(uint32_t value);
  public:

  // uint32 batch_interval = 4;
  void clear_batch_interval();
  uint32_t batch_interval() const;
  void set_batch_interval(uint32_t value);
  private:
  uint32_t _internal_batch_interval() const;
  void _internal_set_batch_interval(uint32_t value);
  public:

  // float batch_interval_float = 6;
  void clear_batch_interval_float();
  float batch_interval_float() const;
  void set_batch_interval_float(float value);
  private:
  float _internal_batch_interval_float() const;
  void _internal_set_batch_interval_float(float value);
  public:

  // bool is_continuous = 7;
  void clear_is_continuous();
  bool is_continuous() const;
  void set_is_continuous(bool value);
  private:
  bool _internal_is_continuous() const;
  void _internal_set_is_continuous(bool value);
  public:

  // float start_gen_time = 8;
  void clear_start_gen_time();
  float start_gen_time() const;
  void set_start_gen_time(float value);
  private:
  float _internal_start_gen_time() const;
  void _internal_set_start_gen_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditUGCEntityGeneratorProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_id_;
    uint32_t extra_base_info_instance_id_;
    uint32_t count_each_batch_;
    uint32_t batch_count_;
    uint32_t batch_interval_;
    float batch_interval_float_;
    bool is_continuous_;
    float start_gen_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditUGCAIProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditUGCAIProtoData) */ {
 public:
  inline SceneEditUGCAIProtoData() : SceneEditUGCAIProtoData(nullptr) {}
  ~SceneEditUGCAIProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditUGCAIProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditUGCAIProtoData(const SceneEditUGCAIProtoData& from);
  SceneEditUGCAIProtoData(SceneEditUGCAIProtoData&& from) noexcept
    : SceneEditUGCAIProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditUGCAIProtoData& operator=(const SceneEditUGCAIProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditUGCAIProtoData& operator=(SceneEditUGCAIProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditUGCAIProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditUGCAIProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditUGCAIProtoData*>(
               &_SceneEditUGCAIProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SceneEditUGCAIProtoData& a, SceneEditUGCAIProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditUGCAIProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditUGCAIProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditUGCAIProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditUGCAIProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditUGCAIProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditUGCAIProtoData& from) {
    SceneEditUGCAIProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditUGCAIProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditUGCAIProtoData";
  }
  protected:
  explicit SceneEditUGCAIProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 2,
    kExtraBaseInfoInstanceIdFieldNumber = 1,
  };
  // .message.UGCAIConfigParams param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::message::UGCAIConfigParams& param() const;
  PROTOBUF_NODISCARD ::message::UGCAIConfigParams* release_param();
  ::message::UGCAIConfigParams* mutable_param();
  void set_allocated_param(::message::UGCAIConfigParams* param);
  private:
  const ::message::UGCAIConfigParams& _internal_param() const;
  ::message::UGCAIConfigParams* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::message::UGCAIConfigParams* param);
  ::message::UGCAIConfigParams* unsafe_arena_release_param();

  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditUGCAIProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCAIConfigParams* param_;
    uint32_t extra_base_info_instance_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCAIConfigParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCAIConfigParams) */ {
 public:
  inline UGCAIConfigParams() : UGCAIConfigParams(nullptr) {}
  ~UGCAIConfigParams() override;
  explicit PROTOBUF_CONSTEXPR UGCAIConfigParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCAIConfigParams(const UGCAIConfigParams& from);
  UGCAIConfigParams(UGCAIConfigParams&& from) noexcept
    : UGCAIConfigParams() {
    *this = ::std::move(from);
  }

  inline UGCAIConfigParams& operator=(const UGCAIConfigParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCAIConfigParams& operator=(UGCAIConfigParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCAIConfigParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCAIConfigParams* internal_default_instance() {
    return reinterpret_cast<const UGCAIConfigParams*>(
               &_UGCAIConfigParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(UGCAIConfigParams& a, UGCAIConfigParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCAIConfigParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCAIConfigParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCAIConfigParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCAIConfigParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCAIConfigParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCAIConfigParams& from) {
    UGCAIConfigParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCAIConfigParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCAIConfigParams";
  }
  protected:
  explicit UGCAIConfigParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHpFieldNumber = 1,
    kAttackFieldNumber = 2,
    kDefenseFieldNumber = 3,
    kMoveSpeedFieldNumber = 4,
    kDetectRangeFieldNumber = 6,
    kAttackRangeFieldNumber = 7,
    kTeamIdFieldNumber = 8,
    kCanChaseEnemyFieldNumber = 5,
    kEnableDeadDropFieldNumber = 12,
    kActionTypeFieldNumber = 9,
    kAiTypeFieldNumber = 10,
    kPathInstanceIdFieldNumber = 11,
    kInjuryScaleFieldNumber = 13,
  };
  // uint32 hp = 1;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 attack = 2;
  void clear_attack();
  uint32_t attack() const;
  void set_attack(uint32_t value);
  private:
  uint32_t _internal_attack() const;
  void _internal_set_attack(uint32_t value);
  public:

  // float defense = 3;
  void clear_defense();
  float defense() const;
  void set_defense(float value);
  private:
  float _internal_defense() const;
  void _internal_set_defense(float value);
  public:

  // float move_speed = 4;
  void clear_move_speed();
  float move_speed() const;
  void set_move_speed(float value);
  private:
  float _internal_move_speed() const;
  void _internal_set_move_speed(float value);
  public:

  // float detect_range = 6;
  void clear_detect_range();
  float detect_range() const;
  void set_detect_range(float value);
  private:
  float _internal_detect_range() const;
  void _internal_set_detect_range(float value);
  public:

  // float attack_range = 7;
  void clear_attack_range();
  float attack_range() const;
  void set_attack_range(float value);
  private:
  float _internal_attack_range() const;
  void _internal_set_attack_range(float value);
  public:

  // uint32 team_id = 8;
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // bool can_chase_enemy = 5;
  void clear_can_chase_enemy();
  bool can_chase_enemy() const;
  void set_can_chase_enemy(bool value);
  private:
  bool _internal_can_chase_enemy() const;
  void _internal_set_can_chase_enemy(bool value);
  public:

  // bool enable_dead_drop = 12;
  void clear_enable_dead_drop();
  bool enable_dead_drop() const;
  void set_enable_dead_drop(bool value);
  private:
  bool _internal_enable_dead_drop() const;
  void _internal_set_enable_dead_drop(bool value);
  public:

  // uint32 action_type = 9;
  void clear_action_type();
  uint32_t action_type() const;
  void set_action_type(uint32_t value);
  private:
  uint32_t _internal_action_type() const;
  void _internal_set_action_type(uint32_t value);
  public:

  // uint32 ai_type = 10;
  void clear_ai_type();
  uint32_t ai_type() const;
  void set_ai_type(uint32_t value);
  private:
  uint32_t _internal_ai_type() const;
  void _internal_set_ai_type(uint32_t value);
  public:

  // uint32 path_instance_id = 11;
  void clear_path_instance_id();
  uint32_t path_instance_id() const;
  void set_path_instance_id(uint32_t value);
  private:
  uint32_t _internal_path_instance_id() const;
  void _internal_set_path_instance_id(uint32_t value);
  public:

  // float injury_scale = 13;
  void clear_injury_scale();
  float injury_scale() const;
  void set_injury_scale(float value);
  private:
  float _internal_injury_scale() const;
  void _internal_set_injury_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCAIConfigParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t hp_;
    uint32_t attack_;
    float defense_;
    float move_speed_;
    float detect_range_;
    float attack_range_;
    uint32_t team_id_;
    bool can_chase_enemy_;
    bool enable_dead_drop_;
    uint32_t action_type_;
    uint32_t ai_type_;
    uint32_t path_instance_id_;
    float injury_scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditUGCCustomPathProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditUGCCustomPathProtoData) */ {
 public:
  inline SceneEditUGCCustomPathProtoData() : SceneEditUGCCustomPathProtoData(nullptr) {}
  ~SceneEditUGCCustomPathProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditUGCCustomPathProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditUGCCustomPathProtoData(const SceneEditUGCCustomPathProtoData& from);
  SceneEditUGCCustomPathProtoData(SceneEditUGCCustomPathProtoData&& from) noexcept
    : SceneEditUGCCustomPathProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditUGCCustomPathProtoData& operator=(const SceneEditUGCCustomPathProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditUGCCustomPathProtoData& operator=(SceneEditUGCCustomPathProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditUGCCustomPathProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditUGCCustomPathProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditUGCCustomPathProtoData*>(
               &_SceneEditUGCCustomPathProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SceneEditUGCCustomPathProtoData& a, SceneEditUGCCustomPathProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditUGCCustomPathProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditUGCCustomPathProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditUGCCustomPathProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditUGCCustomPathProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditUGCCustomPathProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditUGCCustomPathProtoData& from) {
    SceneEditUGCCustomPathProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditUGCCustomPathProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditUGCCustomPathProtoData";
  }
  protected:
  explicit SceneEditUGCCustomPathProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlPointsFieldNumber = 2,
    kExtraBaseInfoInstanceIdFieldNumber = 1,
  };
  // repeated .message.ProtoBuffVector3 control_points = 2;
  int control_points_size() const;
  private:
  int _internal_control_points_size() const;
  public:
  void clear_control_points();
  ::message::ProtoBuffVector3* mutable_control_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 >*
      mutable_control_points();
  private:
  const ::message::ProtoBuffVector3& _internal_control_points(int index) const;
  ::message::ProtoBuffVector3* _internal_add_control_points();
  public:
  const ::message::ProtoBuffVector3& control_points(int index) const;
  ::message::ProtoBuffVector3* add_control_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 >&
      control_points() const;

  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditUGCCustomPathProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 > control_points_;
    uint32_t extra_base_info_instance_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditEntityAttributeProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditEntityAttributeProtoData) */ {
 public:
  inline SceneEditEntityAttributeProtoData() : SceneEditEntityAttributeProtoData(nullptr) {}
  ~SceneEditEntityAttributeProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditEntityAttributeProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditEntityAttributeProtoData(const SceneEditEntityAttributeProtoData& from);
  SceneEditEntityAttributeProtoData(SceneEditEntityAttributeProtoData&& from) noexcept
    : SceneEditEntityAttributeProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditEntityAttributeProtoData& operator=(const SceneEditEntityAttributeProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditEntityAttributeProtoData& operator=(SceneEditEntityAttributeProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditEntityAttributeProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditEntityAttributeProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditEntityAttributeProtoData*>(
               &_SceneEditEntityAttributeProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(SceneEditEntityAttributeProtoData& a, SceneEditEntityAttributeProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditEntityAttributeProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditEntityAttributeProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditEntityAttributeProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditEntityAttributeProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditEntityAttributeProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditEntityAttributeProtoData& from) {
    SceneEditEntityAttributeProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditEntityAttributeProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditEntityAttributeProtoData";
  }
  protected:
  explicit SceneEditEntityAttributeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeleportDoorsFieldNumber = 1,
    kPianoKeysFieldNumber = 2,
    kBuffsFieldNumber = 3,
    kMoveObjectsFieldNumber = 4,
    kScaleItemsFieldNumber = 5,
    kItemboxsFieldNumber = 6,
    kTriggersFieldNumber = 7,
    kBigToyBallsFieldNumber = 8,
    kMinisentrisFieldNumber = 9,
    kCustomPathsFieldNumber = 10,
    kBotGeneratorsFieldNumber = 11,
    kVendingMachinesFieldNumber = 12,
    kUgcAisFieldNumber = 13,
    kEntityGeneratorsFieldNumber = 14,
    kCoinGeneratorsFieldNumber = 15,
    kWardrobesFieldNumber = 16,
    kSpawnBoxsFieldNumber = 17,
    kFootballsFieldNumber = 18,
    kGoalsFieldNumber = 19,
    kOildrumsFieldNumber = 20,
    kBasicSphereFieldNumber = 21,
    kCustomLevelobjectFieldNumber = 22,
    kPointLightsFieldNumber = 23,
    kShapeTriggersFieldNumber = 24,
  };
  // repeated .message.SceneEditTeleportDoorProtoData teleport_doors = 1;
  int teleport_doors_size() const;
  private:
  int _internal_teleport_doors_size() const;
  public:
  void clear_teleport_doors();
  ::message::SceneEditTeleportDoorProtoData* mutable_teleport_doors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTeleportDoorProtoData >*
      mutable_teleport_doors();
  private:
  const ::message::SceneEditTeleportDoorProtoData& _internal_teleport_doors(int index) const;
  ::message::SceneEditTeleportDoorProtoData* _internal_add_teleport_doors();
  public:
  const ::message::SceneEditTeleportDoorProtoData& teleport_doors(int index) const;
  ::message::SceneEditTeleportDoorProtoData* add_teleport_doors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTeleportDoorProtoData >&
      teleport_doors() const;

  // repeated .message.SceneEditPianoKeyProtoData piano_keys = 2;
  int piano_keys_size() const;
  private:
  int _internal_piano_keys_size() const;
  public:
  void clear_piano_keys();
  ::message::SceneEditPianoKeyProtoData* mutable_piano_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditPianoKeyProtoData >*
      mutable_piano_keys();
  private:
  const ::message::SceneEditPianoKeyProtoData& _internal_piano_keys(int index) const;
  ::message::SceneEditPianoKeyProtoData* _internal_add_piano_keys();
  public:
  const ::message::SceneEditPianoKeyProtoData& piano_keys(int index) const;
  ::message::SceneEditPianoKeyProtoData* add_piano_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditPianoKeyProtoData >&
      piano_keys() const;

  // repeated .message.SceneEditBuffProtoData buffs = 3;
  int buffs_size() const;
  private:
  int _internal_buffs_size() const;
  public:
  void clear_buffs();
  ::message::SceneEditBuffProtoData* mutable_buffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBuffProtoData >*
      mutable_buffs();
  private:
  const ::message::SceneEditBuffProtoData& _internal_buffs(int index) const;
  ::message::SceneEditBuffProtoData* _internal_add_buffs();
  public:
  const ::message::SceneEditBuffProtoData& buffs(int index) const;
  ::message::SceneEditBuffProtoData* add_buffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBuffProtoData >&
      buffs() const;

  // repeated .message.SceneEditMoveObjectProtoData move_objects = 4;
  int move_objects_size() const;
  private:
  int _internal_move_objects_size() const;
  public:
  void clear_move_objects();
  ::message::SceneEditMoveObjectProtoData* mutable_move_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMoveObjectProtoData >*
      mutable_move_objects();
  private:
  const ::message::SceneEditMoveObjectProtoData& _internal_move_objects(int index) const;
  ::message::SceneEditMoveObjectProtoData* _internal_add_move_objects();
  public:
  const ::message::SceneEditMoveObjectProtoData& move_objects(int index) const;
  ::message::SceneEditMoveObjectProtoData* add_move_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMoveObjectProtoData >&
      move_objects() const;

  // repeated .message.SceneEditScalableItemProtoData scale_items = 5;
  int scale_items_size() const;
  private:
  int _internal_scale_items_size() const;
  public:
  void clear_scale_items();
  ::message::SceneEditScalableItemProtoData* mutable_scale_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditScalableItemProtoData >*
      mutable_scale_items();
  private:
  const ::message::SceneEditScalableItemProtoData& _internal_scale_items(int index) const;
  ::message::SceneEditScalableItemProtoData* _internal_add_scale_items();
  public:
  const ::message::SceneEditScalableItemProtoData& scale_items(int index) const;
  ::message::SceneEditScalableItemProtoData* add_scale_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditScalableItemProtoData >&
      scale_items() const;

  // repeated .message.SceneEditItemBoxProtoData itemboxs = 6;
  int itemboxs_size() const;
  private:
  int _internal_itemboxs_size() const;
  public:
  void clear_itemboxs();
  ::message::SceneEditItemBoxProtoData* mutable_itemboxs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditItemBoxProtoData >*
      mutable_itemboxs();
  private:
  const ::message::SceneEditItemBoxProtoData& _internal_itemboxs(int index) const;
  ::message::SceneEditItemBoxProtoData* _internal_add_itemboxs();
  public:
  const ::message::SceneEditItemBoxProtoData& itemboxs(int index) const;
  ::message::SceneEditItemBoxProtoData* add_itemboxs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditItemBoxProtoData >&
      itemboxs() const;

  // repeated .message.SceneEditTriggerProtoData triggers = 7;
  int triggers_size() const;
  private:
  int _internal_triggers_size() const;
  public:
  void clear_triggers();
  ::message::SceneEditTriggerProtoData* mutable_triggers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTriggerProtoData >*
      mutable_triggers();
  private:
  const ::message::SceneEditTriggerProtoData& _internal_triggers(int index) const;
  ::message::SceneEditTriggerProtoData* _internal_add_triggers();
  public:
  const ::message::SceneEditTriggerProtoData& triggers(int index) const;
  ::message::SceneEditTriggerProtoData* add_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTriggerProtoData >&
      triggers() const;

  // repeated .message.SceneEditBigToyBallProtoData big_toy_balls = 8;
  int big_toy_balls_size() const;
  private:
  int _internal_big_toy_balls_size() const;
  public:
  void clear_big_toy_balls();
  ::message::SceneEditBigToyBallProtoData* mutable_big_toy_balls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBigToyBallProtoData >*
      mutable_big_toy_balls();
  private:
  const ::message::SceneEditBigToyBallProtoData& _internal_big_toy_balls(int index) const;
  ::message::SceneEditBigToyBallProtoData* _internal_add_big_toy_balls();
  public:
  const ::message::SceneEditBigToyBallProtoData& big_toy_balls(int index) const;
  ::message::SceneEditBigToyBallProtoData* add_big_toy_balls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBigToyBallProtoData >&
      big_toy_balls() const;

  // repeated .message.SceneEditMiniSentryProtoData minisentris = 9;
  int minisentris_size() const;
  private:
  int _internal_minisentris_size() const;
  public:
  void clear_minisentris();
  ::message::SceneEditMiniSentryProtoData* mutable_minisentris(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMiniSentryProtoData >*
      mutable_minisentris();
  private:
  const ::message::SceneEditMiniSentryProtoData& _internal_minisentris(int index) const;
  ::message::SceneEditMiniSentryProtoData* _internal_add_minisentris();
  public:
  const ::message::SceneEditMiniSentryProtoData& minisentris(int index) const;
  ::message::SceneEditMiniSentryProtoData* add_minisentris();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMiniSentryProtoData >&
      minisentris() const;

  // repeated .message.SceneEditUGCCustomPathProtoData custom_paths = 10;
  int custom_paths_size() const;
  private:
  int _internal_custom_paths_size() const;
  public:
  void clear_custom_paths();
  ::message::SceneEditUGCCustomPathProtoData* mutable_custom_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCustomPathProtoData >*
      mutable_custom_paths();
  private:
  const ::message::SceneEditUGCCustomPathProtoData& _internal_custom_paths(int index) const;
  ::message::SceneEditUGCCustomPathProtoData* _internal_add_custom_paths();
  public:
  const ::message::SceneEditUGCCustomPathProtoData& custom_paths(int index) const;
  ::message::SceneEditUGCCustomPathProtoData* add_custom_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCustomPathProtoData >&
      custom_paths() const;

  // repeated .message.SceneEditBotGeneratorProtoData bot_generators = 11;
  int bot_generators_size() const;
  private:
  int _internal_bot_generators_size() const;
  public:
  void clear_bot_generators();
  ::message::SceneEditBotGeneratorProtoData* mutable_bot_generators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBotGeneratorProtoData >*
      mutable_bot_generators();
  private:
  const ::message::SceneEditBotGeneratorProtoData& _internal_bot_generators(int index) const;
  ::message::SceneEditBotGeneratorProtoData* _internal_add_bot_generators();
  public:
  const ::message::SceneEditBotGeneratorProtoData& bot_generators(int index) const;
  ::message::SceneEditBotGeneratorProtoData* add_bot_generators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBotGeneratorProtoData >&
      bot_generators() const;

  // repeated .message.SceneEditUGCVendingMachineProtoData vending_machines = 12;
  int vending_machines_size() const;
  private:
  int _internal_vending_machines_size() const;
  public:
  void clear_vending_machines();
  ::message::SceneEditUGCVendingMachineProtoData* mutable_vending_machines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCVendingMachineProtoData >*
      mutable_vending_machines();
  private:
  const ::message::SceneEditUGCVendingMachineProtoData& _internal_vending_machines(int index) const;
  ::message::SceneEditUGCVendingMachineProtoData* _internal_add_vending_machines();
  public:
  const ::message::SceneEditUGCVendingMachineProtoData& vending_machines(int index) const;
  ::message::SceneEditUGCVendingMachineProtoData* add_vending_machines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCVendingMachineProtoData >&
      vending_machines() const;

  // repeated .message.SceneEditUGCAIProtoData ugc_ais = 13;
  int ugc_ais_size() const;
  private:
  int _internal_ugc_ais_size() const;
  public:
  void clear_ugc_ais();
  ::message::SceneEditUGCAIProtoData* mutable_ugc_ais(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCAIProtoData >*
      mutable_ugc_ais();
  private:
  const ::message::SceneEditUGCAIProtoData& _internal_ugc_ais(int index) const;
  ::message::SceneEditUGCAIProtoData* _internal_add_ugc_ais();
  public:
  const ::message::SceneEditUGCAIProtoData& ugc_ais(int index) const;
  ::message::SceneEditUGCAIProtoData* add_ugc_ais();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCAIProtoData >&
      ugc_ais() const;

  // repeated .message.SceneEditUGCEntityGeneratorProtoData entity_generators = 14;
  int entity_generators_size() const;
  private:
  int _internal_entity_generators_size() const;
  public:
  void clear_entity_generators();
  ::message::SceneEditUGCEntityGeneratorProtoData* mutable_entity_generators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCEntityGeneratorProtoData >*
      mutable_entity_generators();
  private:
  const ::message::SceneEditUGCEntityGeneratorProtoData& _internal_entity_generators(int index) const;
  ::message::SceneEditUGCEntityGeneratorProtoData* _internal_add_entity_generators();
  public:
  const ::message::SceneEditUGCEntityGeneratorProtoData& entity_generators(int index) const;
  ::message::SceneEditUGCEntityGeneratorProtoData* add_entity_generators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCEntityGeneratorProtoData >&
      entity_generators() const;

  // repeated .message.SceneEditUGCCoinGeneratorProtoData coin_generators = 15;
  int coin_generators_size() const;
  private:
  int _internal_coin_generators_size() const;
  public:
  void clear_coin_generators();
  ::message::SceneEditUGCCoinGeneratorProtoData* mutable_coin_generators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCoinGeneratorProtoData >*
      mutable_coin_generators();
  private:
  const ::message::SceneEditUGCCoinGeneratorProtoData& _internal_coin_generators(int index) const;
  ::message::SceneEditUGCCoinGeneratorProtoData* _internal_add_coin_generators();
  public:
  const ::message::SceneEditUGCCoinGeneratorProtoData& coin_generators(int index) const;
  ::message::SceneEditUGCCoinGeneratorProtoData* add_coin_generators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCoinGeneratorProtoData >&
      coin_generators() const;

  // repeated .message.SceneEditUGCWardrobeProtoData wardrobes = 16;
  int wardrobes_size() const;
  private:
  int _internal_wardrobes_size() const;
  public:
  void clear_wardrobes();
  ::message::SceneEditUGCWardrobeProtoData* mutable_wardrobes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCWardrobeProtoData >*
      mutable_wardrobes();
  private:
  const ::message::SceneEditUGCWardrobeProtoData& _internal_wardrobes(int index) const;
  ::message::SceneEditUGCWardrobeProtoData* _internal_add_wardrobes();
  public:
  const ::message::SceneEditUGCWardrobeProtoData& wardrobes(int index) const;
  ::message::SceneEditUGCWardrobeProtoData* add_wardrobes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCWardrobeProtoData >&
      wardrobes() const;

  // repeated .message.SceneEditSpawnBoxData spawn_boxs = 17;
  int spawn_boxs_size() const;
  private:
  int _internal_spawn_boxs_size() const;
  public:
  void clear_spawn_boxs();
  ::message::SceneEditSpawnBoxData* mutable_spawn_boxs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditSpawnBoxData >*
      mutable_spawn_boxs();
  private:
  const ::message::SceneEditSpawnBoxData& _internal_spawn_boxs(int index) const;
  ::message::SceneEditSpawnBoxData* _internal_add_spawn_boxs();
  public:
  const ::message::SceneEditSpawnBoxData& spawn_boxs(int index) const;
  ::message::SceneEditSpawnBoxData* add_spawn_boxs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditSpawnBoxData >&
      spawn_boxs() const;

  // repeated .message.SceneEditUGCFootballProtoData footballs = 18;
  int footballs_size() const;
  private:
  int _internal_footballs_size() const;
  public:
  void clear_footballs();
  ::message::SceneEditUGCFootballProtoData* mutable_footballs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCFootballProtoData >*
      mutable_footballs();
  private:
  const ::message::SceneEditUGCFootballProtoData& _internal_footballs(int index) const;
  ::message::SceneEditUGCFootballProtoData* _internal_add_footballs();
  public:
  const ::message::SceneEditUGCFootballProtoData& footballs(int index) const;
  ::message::SceneEditUGCFootballProtoData* add_footballs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCFootballProtoData >&
      footballs() const;

  // repeated .message.SceneEditGoalData goals = 19;
  int goals_size() const;
  private:
  int _internal_goals_size() const;
  public:
  void clear_goals();
  ::message::SceneEditGoalData* mutable_goals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditGoalData >*
      mutable_goals();
  private:
  const ::message::SceneEditGoalData& _internal_goals(int index) const;
  ::message::SceneEditGoalData* _internal_add_goals();
  public:
  const ::message::SceneEditGoalData& goals(int index) const;
  ::message::SceneEditGoalData* add_goals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditGoalData >&
      goals() const;

  // repeated .message.SceneEditOildrumData oildrums = 20;
  int oildrums_size() const;
  private:
  int _internal_oildrums_size() const;
  public:
  void clear_oildrums();
  ::message::SceneEditOildrumData* mutable_oildrums(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditOildrumData >*
      mutable_oildrums();
  private:
  const ::message::SceneEditOildrumData& _internal_oildrums(int index) const;
  ::message::SceneEditOildrumData* _internal_add_oildrums();
  public:
  const ::message::SceneEditOildrumData& oildrums(int index) const;
  ::message::SceneEditOildrumData* add_oildrums();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditOildrumData >&
      oildrums() const;

  // repeated .message.SceneEditBasicSphereProtoData basic_sphere = 21;
  int basic_sphere_size() const;
  private:
  int _internal_basic_sphere_size() const;
  public:
  void clear_basic_sphere();
  ::message::SceneEditBasicSphereProtoData* mutable_basic_sphere(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBasicSphereProtoData >*
      mutable_basic_sphere();
  private:
  const ::message::SceneEditBasicSphereProtoData& _internal_basic_sphere(int index) const;
  ::message::SceneEditBasicSphereProtoData* _internal_add_basic_sphere();
  public:
  const ::message::SceneEditBasicSphereProtoData& basic_sphere(int index) const;
  ::message::SceneEditBasicSphereProtoData* add_basic_sphere();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBasicSphereProtoData >&
      basic_sphere() const;

  // repeated .message.SceneEditCustomLevelObjectProtoData custom_levelobject = 22;
  int custom_levelobject_size() const;
  private:
  int _internal_custom_levelobject_size() const;
  public:
  void clear_custom_levelobject();
  ::message::SceneEditCustomLevelObjectProtoData* mutable_custom_levelobject(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomLevelObjectProtoData >*
      mutable_custom_levelobject();
  private:
  const ::message::SceneEditCustomLevelObjectProtoData& _internal_custom_levelobject(int index) const;
  ::message::SceneEditCustomLevelObjectProtoData* _internal_add_custom_levelobject();
  public:
  const ::message::SceneEditCustomLevelObjectProtoData& custom_levelobject(int index) const;
  ::message::SceneEditCustomLevelObjectProtoData* add_custom_levelobject();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomLevelObjectProtoData >&
      custom_levelobject() const;

  // repeated .message.SceneEditUGCPointLightProtoData point_lights = 23;
  int point_lights_size() const;
  private:
  int _internal_point_lights_size() const;
  public:
  void clear_point_lights();
  ::message::SceneEditUGCPointLightProtoData* mutable_point_lights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCPointLightProtoData >*
      mutable_point_lights();
  private:
  const ::message::SceneEditUGCPointLightProtoData& _internal_point_lights(int index) const;
  ::message::SceneEditUGCPointLightProtoData* _internal_add_point_lights();
  public:
  const ::message::SceneEditUGCPointLightProtoData& point_lights(int index) const;
  ::message::SceneEditUGCPointLightProtoData* add_point_lights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCPointLightProtoData >&
      point_lights() const;

  // repeated .message.SceneEditShapeTriggerProtoData shape_triggers = 24;
  int shape_triggers_size() const;
  private:
  int _internal_shape_triggers_size() const;
  public:
  void clear_shape_triggers();
  ::message::SceneEditShapeTriggerProtoData* mutable_shape_triggers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditShapeTriggerProtoData >*
      mutable_shape_triggers();
  private:
  const ::message::SceneEditShapeTriggerProtoData& _internal_shape_triggers(int index) const;
  ::message::SceneEditShapeTriggerProtoData* _internal_add_shape_triggers();
  public:
  const ::message::SceneEditShapeTriggerProtoData& shape_triggers(int index) const;
  ::message::SceneEditShapeTriggerProtoData* add_shape_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditShapeTriggerProtoData >&
      shape_triggers() const;

  // @@protoc_insertion_point(class_scope:message.SceneEditEntityAttributeProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTeleportDoorProtoData > teleport_doors_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditPianoKeyProtoData > piano_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBuffProtoData > buffs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMoveObjectProtoData > move_objects_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditScalableItemProtoData > scale_items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditItemBoxProtoData > itemboxs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTriggerProtoData > triggers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBigToyBallProtoData > big_toy_balls_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMiniSentryProtoData > minisentris_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCustomPathProtoData > custom_paths_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBotGeneratorProtoData > bot_generators_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCVendingMachineProtoData > vending_machines_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCAIProtoData > ugc_ais_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCEntityGeneratorProtoData > entity_generators_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCoinGeneratorProtoData > coin_generators_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCWardrobeProtoData > wardrobes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditSpawnBoxData > spawn_boxs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCFootballProtoData > footballs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditGoalData > goals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditOildrumData > oildrums_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBasicSphereProtoData > basic_sphere_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomLevelObjectProtoData > custom_levelobject_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCPointLightProtoData > point_lights_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditShapeTriggerProtoData > shape_triggers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditModeProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditModeProtoData) */ {
 public:
  inline SceneEditModeProtoData() : SceneEditModeProtoData(nullptr) {}
  ~SceneEditModeProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditModeProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditModeProtoData(const SceneEditModeProtoData& from);
  SceneEditModeProtoData(SceneEditModeProtoData&& from) noexcept
    : SceneEditModeProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditModeProtoData& operator=(const SceneEditModeProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditModeProtoData& operator=(SceneEditModeProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditModeProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditModeProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditModeProtoData*>(
               &_SceneEditModeProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(SceneEditModeProtoData& a, SceneEditModeProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditModeProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditModeProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditModeProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditModeProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditModeProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditModeProtoData& from) {
    SceneEditModeProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditModeProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditModeProtoData";
  }
  protected:
  explicit SceneEditModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollisionMatrixFieldNumber = 4,
    kModeDataFieldNumber = 1,
    kGeneralDataFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // repeated uint32 collision_matrix = 4;
  int collision_matrix_size() const;
  private:
  int _internal_collision_matrix_size() const;
  public:
  void clear_collision_matrix();
  private:
  uint32_t _internal_collision_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_collision_matrix() const;
  void _internal_add_collision_matrix(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_collision_matrix();
  public:
  uint32_t collision_matrix(int index) const;
  void set_collision_matrix(int index, uint32_t value);
  void add_collision_matrix(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      collision_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_collision_matrix();

  // bytes mode_data = 1;
  void clear_mode_data();
  const std::string& mode_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mode_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mode_data();
  PROTOBUF_NODISCARD std::string* release_mode_data();
  void set_allocated_mode_data(std::string* mode_data);
  private:
  const std::string& _internal_mode_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode_data(const std::string& value);
  std::string* _internal_mutable_mode_data();
  public:

  // .message.SceneEditGeneralProtoData general_data = 2;
  bool has_general_data() const;
  private:
  bool _internal_has_general_data() const;
  public:
  void clear_general_data();
  const ::message::SceneEditGeneralProtoData& general_data() const;
  PROTOBUF_NODISCARD ::message::SceneEditGeneralProtoData* release_general_data();
  ::message::SceneEditGeneralProtoData* mutable_general_data();
  void set_allocated_general_data(::message::SceneEditGeneralProtoData* general_data);
  private:
  const ::message::SceneEditGeneralProtoData& _internal_general_data() const;
  ::message::SceneEditGeneralProtoData* _internal_mutable_general_data();
  public:
  void unsafe_arena_set_allocated_general_data(
      ::message::SceneEditGeneralProtoData* general_data);
  ::message::SceneEditGeneralProtoData* unsafe_arena_release_general_data();

  // uint32 version = 3;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditModeProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > collision_matrix_;
    mutable std::atomic<int> _collision_matrix_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_data_;
    ::message::SceneEditGeneralProtoData* general_data_;
    uint32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditOildrumData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditOildrumData) */ {
 public:
  inline SceneEditOildrumData() : SceneEditOildrumData(nullptr) {}
  ~SceneEditOildrumData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditOildrumData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditOildrumData(const SceneEditOildrumData& from);
  SceneEditOildrumData(SceneEditOildrumData&& from) noexcept
    : SceneEditOildrumData() {
    *this = ::std::move(from);
  }

  inline SceneEditOildrumData& operator=(const SceneEditOildrumData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditOildrumData& operator=(SceneEditOildrumData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditOildrumData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditOildrumData* internal_default_instance() {
    return reinterpret_cast<const SceneEditOildrumData*>(
               &_SceneEditOildrumData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(SceneEditOildrumData& a, SceneEditOildrumData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditOildrumData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditOildrumData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditOildrumData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditOildrumData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditOildrumData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditOildrumData& from) {
    SceneEditOildrumData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditOildrumData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditOildrumData";
  }
  protected:
  explicit SceneEditOildrumData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kHpFieldNumber = 2,
    kRangeFieldNumber = 3,
    kDamageFieldNumber = 4,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // float range = 3;
  void clear_range();
  float range() const;
  void set_range(float value);
  private:
  float _internal_range() const;
  void _internal_set_range(float value);
  public:

  // float damage = 4;
  void clear_damage();
  float damage() const;
  void set_damage(float value);
  private:
  float _internal_damage() const;
  void _internal_set_damage(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditOildrumData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t hp_;
    float range_;
    float damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditBasicSphereProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditBasicSphereProtoData) */ {
 public:
  inline SceneEditBasicSphereProtoData() : SceneEditBasicSphereProtoData(nullptr) {}
  ~SceneEditBasicSphereProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditBasicSphereProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditBasicSphereProtoData(const SceneEditBasicSphereProtoData& from);
  SceneEditBasicSphereProtoData(SceneEditBasicSphereProtoData&& from) noexcept
    : SceneEditBasicSphereProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditBasicSphereProtoData& operator=(const SceneEditBasicSphereProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditBasicSphereProtoData& operator=(SceneEditBasicSphereProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditBasicSphereProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditBasicSphereProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditBasicSphereProtoData*>(
               &_SceneEditBasicSphereProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SceneEditBasicSphereProtoData& a, SceneEditBasicSphereProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditBasicSphereProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditBasicSphereProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditBasicSphereProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditBasicSphereProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditBasicSphereProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditBasicSphereProtoData& from) {
    SceneEditBasicSphereProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditBasicSphereProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditBasicSphereProtoData";
  }
  protected:
  explicit SceneEditBasicSphereProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditBasicSphereProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    float radius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditCustomLevelObjectProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditCustomLevelObjectProtoData) */ {
 public:
  inline SceneEditCustomLevelObjectProtoData() : SceneEditCustomLevelObjectProtoData(nullptr) {}
  ~SceneEditCustomLevelObjectProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditCustomLevelObjectProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditCustomLevelObjectProtoData(const SceneEditCustomLevelObjectProtoData& from);
  SceneEditCustomLevelObjectProtoData(SceneEditCustomLevelObjectProtoData&& from) noexcept
    : SceneEditCustomLevelObjectProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditCustomLevelObjectProtoData& operator=(const SceneEditCustomLevelObjectProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditCustomLevelObjectProtoData& operator=(SceneEditCustomLevelObjectProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditCustomLevelObjectProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditCustomLevelObjectProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditCustomLevelObjectProtoData*>(
               &_SceneEditCustomLevelObjectProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SceneEditCustomLevelObjectProtoData& a, SceneEditCustomLevelObjectProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditCustomLevelObjectProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditCustomLevelObjectProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditCustomLevelObjectProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditCustomLevelObjectProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditCustomLevelObjectProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditCustomLevelObjectProtoData& from) {
    SceneEditCustomLevelObjectProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditCustomLevelObjectProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditCustomLevelObjectProtoData";
  }
  protected:
  explicit SceneEditCustomLevelObjectProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResUuidFieldNumber = 2,
    kExtraBaseInfoInstanceIdFieldNumber = 1,
  };
  // string res_uuid = 2;
  void clear_res_uuid();
  const std::string& res_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_uuid();
  PROTOBUF_NODISCARD std::string* release_res_uuid();
  void set_allocated_res_uuid(std::string* res_uuid);
  private:
  const std::string& _internal_res_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_uuid(const std::string& value);
  std::string* _internal_mutable_res_uuid();
  public:

  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditCustomLevelObjectProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_uuid_;
    uint32_t extra_base_info_instance_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditGoalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditGoalData) */ {
 public:
  inline SceneEditGoalData() : SceneEditGoalData(nullptr) {}
  ~SceneEditGoalData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditGoalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditGoalData(const SceneEditGoalData& from);
  SceneEditGoalData(SceneEditGoalData&& from) noexcept
    : SceneEditGoalData() {
    *this = ::std::move(from);
  }

  inline SceneEditGoalData& operator=(const SceneEditGoalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditGoalData& operator=(SceneEditGoalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditGoalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditGoalData* internal_default_instance() {
    return reinterpret_cast<const SceneEditGoalData*>(
               &_SceneEditGoalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(SceneEditGoalData& a, SceneEditGoalData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditGoalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditGoalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditGoalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditGoalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditGoalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditGoalData& from) {
    SceneEditGoalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditGoalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditGoalData";
  }
  protected:
  explicit SceneEditGoalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kTeamIdFieldNumber = 2,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 team_id = 2;
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditGoalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t team_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditSpawnBoxData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditSpawnBoxData) */ {
 public:
  inline SceneEditSpawnBoxData() : SceneEditSpawnBoxData(nullptr) {}
  ~SceneEditSpawnBoxData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditSpawnBoxData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditSpawnBoxData(const SceneEditSpawnBoxData& from);
  SceneEditSpawnBoxData(SceneEditSpawnBoxData&& from) noexcept
    : SceneEditSpawnBoxData() {
    *this = ::std::move(from);
  }

  inline SceneEditSpawnBoxData& operator=(const SceneEditSpawnBoxData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditSpawnBoxData& operator=(SceneEditSpawnBoxData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditSpawnBoxData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditSpawnBoxData* internal_default_instance() {
    return reinterpret_cast<const SceneEditSpawnBoxData*>(
               &_SceneEditSpawnBoxData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(SceneEditSpawnBoxData& a, SceneEditSpawnBoxData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditSpawnBoxData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditSpawnBoxData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditSpawnBoxData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditSpawnBoxData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditSpawnBoxData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditSpawnBoxData& from) {
    SceneEditSpawnBoxData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditSpawnBoxData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditSpawnBoxData";
  }
  protected:
  explicit SceneEditSpawnBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraBaseInfoInstanceIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kSpawnPointCountFieldNumber = 5,
    kTeamIdFieldNumber = 6,
  };
  // uint32 extra_base_info_instance_id = 1;
  void clear_extra_base_info_instance_id();
  uint32_t extra_base_info_instance_id() const;
  void set_extra_base_info_instance_id(uint32_t value);
  private:
  uint32_t _internal_extra_base_info_instance_id() const;
  void _internal_set_extra_base_info_instance_id(uint32_t value);
  public:

  // uint32 x = 2;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 3;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // uint32 z = 4;
  void clear_z();
  uint32_t z() const;
  void set_z(uint32_t value);
  private:
  uint32_t _internal_z() const;
  void _internal_set_z(uint32_t value);
  public:

  // uint32 spawn_point_count = 5;
  void clear_spawn_point_count();
  uint32_t spawn_point_count() const;
  void set_spawn_point_count(uint32_t value);
  private:
  uint32_t _internal_spawn_point_count() const;
  void _internal_set_spawn_point_count(uint32_t value);
  public:

  // int32 team_id = 6;
  void clear_team_id();
  int32_t team_id() const;
  void set_team_id(int32_t value);
  private:
  int32_t _internal_team_id() const;
  void _internal_set_team_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditSpawnBoxData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t extra_base_info_instance_id_;
    uint32_t x_;
    uint32_t y_;
    uint32_t z_;
    uint32_t spawn_point_count_;
    int32_t team_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditGeneralProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditGeneralProtoData) */ {
 public:
  inline SceneEditGeneralProtoData() : SceneEditGeneralProtoData(nullptr) {}
  ~SceneEditGeneralProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditGeneralProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditGeneralProtoData(const SceneEditGeneralProtoData& from);
  SceneEditGeneralProtoData(SceneEditGeneralProtoData&& from) noexcept
    : SceneEditGeneralProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditGeneralProtoData& operator=(const SceneEditGeneralProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditGeneralProtoData& operator=(SceneEditGeneralProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditGeneralProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditGeneralProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditGeneralProtoData*>(
               &_SceneEditGeneralProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SceneEditGeneralProtoData& a, SceneEditGeneralProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditGeneralProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditGeneralProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditGeneralProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditGeneralProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditGeneralProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditGeneralProtoData& from) {
    SceneEditGeneralProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditGeneralProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditGeneralProtoData";
  }
  protected:
  explicit SceneEditGeneralProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxHpFieldNumber = 1,
    kMaxEpFieldNumber = 2,
    kStartEpFieldNumber = 3,
    kDamageFieldNumber = 5,
    kReceiveDamageFieldNumber = 6,
    kMoveSpeedFieldNumber = 7,
    kJumpHeightFieldNumber = 8,
    kAutoHealingFieldNumber = 4,
    kLimitedAmmoFieldNumber = 9,
    kEnableActiveSkillFieldNumber = 10,
    kEnablePassiveSkillFieldNumber = 11,
    kGlobalActiveSkillCdPercentFieldNumber = 12,
    kPlayerskillTransformCdPercentFieldNumber = 13,
    kPlayerskillEpchangetohpCdPercentFieldNumber = 14,
    kPlayerskillHealingdanceCdPercentFieldNumber = 15,
    kPlayerskillGraffitimonitorCdPercentFieldNumber = 16,
    kPlayerskillDetectiveCdPercentFieldNumber = 17,
    kPlayerskillEpfastandupperCdPercentFieldNumber = 18,
    kPlayerskillAdddamagebycosthpCdPercentFieldNumber = 19,
    kPlayerskillSpaceshieldCdPercentFieldNumber = 20,
    kPlayerskillBlowupicewallCdPercentFieldNumber = 21,
    kPlayerskillTempincreasehpCdPercentFieldNumber = 22,
    kPlayerskillAddhpandrescureCdPercentFieldNumber = 23,
    kPlayerskillDwshieldCdPercentFieldNumber = 25,
    kPlayerskillThrowsilenceCdPercentFieldNumber = 26,
    kPlayerskillCreateflightbombCdPercentFieldNumber = 27,
    kPlayerskillMarkicewallCdPercentFieldNumber = 28,
    kPlayerskillRunspeedupCdPercentFieldNumber = 29,
    kUnlimitedBulletFieldNumber = 30,
    kUnlimitedGloowallFieldNumber = 31,
    kUnlimitedThrowablesFieldNumber = 32,
  };
  // uint32 max_hp = 1;
  void clear_max_hp();
  uint32_t max_hp() const;
  void set_max_hp(uint32_t value);
  private:
  uint32_t _internal_max_hp() const;
  void _internal_set_max_hp(uint32_t value);
  public:

  // uint32 max_ep = 2;
  void clear_max_ep();
  uint32_t max_ep() const;
  void set_max_ep(uint32_t value);
  private:
  uint32_t _internal_max_ep() const;
  void _internal_set_max_ep(uint32_t value);
  public:

  // uint32 start_ep = 3;
  void clear_start_ep();
  uint32_t start_ep() const;
  void set_start_ep(uint32_t value);
  private:
  uint32_t _internal_start_ep() const;
  void _internal_set_start_ep(uint32_t value);
  public:

  // uint32 damage = 5;
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // uint32 receive_damage = 6;
  void clear_receive_damage();
  uint32_t receive_damage() const;
  void set_receive_damage(uint32_t value);
  private:
  uint32_t _internal_receive_damage() const;
  void _internal_set_receive_damage(uint32_t value);
  public:

  // float move_speed = 7;
  void clear_move_speed();
  float move_speed() const;
  void set_move_speed(float value);
  private:
  float _internal_move_speed() const;
  void _internal_set_move_speed(float value);
  public:

  // float jump_height = 8;
  void clear_jump_height();
  float jump_height() const;
  void set_jump_height(float value);
  private:
  float _internal_jump_height() const;
  void _internal_set_jump_height(float value);
  public:

  // bool auto_healing = 4;
  void clear_auto_healing();
  bool auto_healing() const;
  void set_auto_healing(bool value);
  private:
  bool _internal_auto_healing() const;
  void _internal_set_auto_healing(bool value);
  public:

  // bool limited_ammo = 9;
  void clear_limited_ammo();
  bool limited_ammo() const;
  void set_limited_ammo(bool value);
  private:
  bool _internal_limited_ammo() const;
  void _internal_set_limited_ammo(bool value);
  public:

  // bool enable_active_skill = 10;
  void clear_enable_active_skill();
  bool enable_active_skill() const;
  void set_enable_active_skill(bool value);
  private:
  bool _internal_enable_active_skill() const;
  void _internal_set_enable_active_skill(bool value);
  public:

  // bool enable_passive_skill = 11;
  void clear_enable_passive_skill();
  bool enable_passive_skill() const;
  void set_enable_passive_skill(bool value);
  private:
  bool _internal_enable_passive_skill() const;
  void _internal_set_enable_passive_skill(bool value);
  public:

  // uint32 global_active_skill_cd_percent = 12;
  void clear_global_active_skill_cd_percent();
  uint32_t global_active_skill_cd_percent() const;
  void set_global_active_skill_cd_percent(uint32_t value);
  private:
  uint32_t _internal_global_active_skill_cd_percent() const;
  void _internal_set_global_active_skill_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_transform_cd_percent = 13;
  void clear_playerskill_transform_cd_percent();
  uint32_t playerskill_transform_cd_percent() const;
  void set_playerskill_transform_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_transform_cd_percent() const;
  void _internal_set_playerskill_transform_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_epchangetohp_cd_percent = 14;
  void clear_playerskill_epchangetohp_cd_percent();
  uint32_t playerskill_epchangetohp_cd_percent() const;
  void set_playerskill_epchangetohp_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_epchangetohp_cd_percent() const;
  void _internal_set_playerskill_epchangetohp_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_healingdance_cd_percent = 15;
  void clear_playerskill_healingdance_cd_percent();
  uint32_t playerskill_healingdance_cd_percent() const;
  void set_playerskill_healingdance_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_healingdance_cd_percent() const;
  void _internal_set_playerskill_healingdance_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_graffitimonitor_cd_percent = 16;
  void clear_playerskill_graffitimonitor_cd_percent();
  uint32_t playerskill_graffitimonitor_cd_percent() const;
  void set_playerskill_graffitimonitor_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_graffitimonitor_cd_percent() const;
  void _internal_set_playerskill_graffitimonitor_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_detective_cd_percent = 17;
  void clear_playerskill_detective_cd_percent();
  uint32_t playerskill_detective_cd_percent() const;
  void set_playerskill_detective_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_detective_cd_percent() const;
  void _internal_set_playerskill_detective_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_epfastandupper_cd_percent = 18;
  void clear_playerskill_epfastandupper_cd_percent();
  uint32_t playerskill_epfastandupper_cd_percent() const;
  void set_playerskill_epfastandupper_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_epfastandupper_cd_percent() const;
  void _internal_set_playerskill_epfastandupper_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_adddamagebycosthp_cd_percent = 19;
  void clear_playerskill_adddamagebycosthp_cd_percent();
  uint32_t playerskill_adddamagebycosthp_cd_percent() const;
  void set_playerskill_adddamagebycosthp_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_adddamagebycosthp_cd_percent() const;
  void _internal_set_playerskill_adddamagebycosthp_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_spaceshield_cd_percent = 20;
  void clear_playerskill_spaceshield_cd_percent();
  uint32_t playerskill_spaceshield_cd_percent() const;
  void set_playerskill_spaceshield_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_spaceshield_cd_percent() const;
  void _internal_set_playerskill_spaceshield_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_blowupicewall_cd_percent = 21;
  void clear_playerskill_blowupicewall_cd_percent();
  uint32_t playerskill_blowupicewall_cd_percent() const;
  void set_playerskill_blowupicewall_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_blowupicewall_cd_percent() const;
  void _internal_set_playerskill_blowupicewall_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_tempincreasehp_cd_percent = 22;
  void clear_playerskill_tempincreasehp_cd_percent();
  uint32_t playerskill_tempincreasehp_cd_percent() const;
  void set_playerskill_tempincreasehp_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_tempincreasehp_cd_percent() const;
  void _internal_set_playerskill_tempincreasehp_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_addhpandrescure_cd_percent = 23;
  void clear_playerskill_addhpandrescure_cd_percent();
  uint32_t playerskill_addhpandrescure_cd_percent() const;
  void set_playerskill_addhpandrescure_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_addhpandrescure_cd_percent() const;
  void _internal_set_playerskill_addhpandrescure_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_dwshield_cd_percent = 25;
  void clear_playerskill_dwshield_cd_percent();
  uint32_t playerskill_dwshield_cd_percent() const;
  void set_playerskill_dwshield_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_dwshield_cd_percent() const;
  void _internal_set_playerskill_dwshield_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_throwsilence_cd_percent = 26;
  void clear_playerskill_throwsilence_cd_percent();
  uint32_t playerskill_throwsilence_cd_percent() const;
  void set_playerskill_throwsilence_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_throwsilence_cd_percent() const;
  void _internal_set_playerskill_throwsilence_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_createflightbomb_cd_percent = 27;
  void clear_playerskill_createflightbomb_cd_percent();
  uint32_t playerskill_createflightbomb_cd_percent() const;
  void set_playerskill_createflightbomb_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_createflightbomb_cd_percent() const;
  void _internal_set_playerskill_createflightbomb_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_markicewall_cd_percent = 28;
  void clear_playerskill_markicewall_cd_percent();
  uint32_t playerskill_markicewall_cd_percent() const;
  void set_playerskill_markicewall_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_markicewall_cd_percent() const;
  void _internal_set_playerskill_markicewall_cd_percent(uint32_t value);
  public:

  // uint32 playerskill_runspeedup_cd_percent = 29;
  void clear_playerskill_runspeedup_cd_percent();
  uint32_t playerskill_runspeedup_cd_percent() const;
  void set_playerskill_runspeedup_cd_percent(uint32_t value);
  private:
  uint32_t _internal_playerskill_runspeedup_cd_percent() const;
  void _internal_set_playerskill_runspeedup_cd_percent(uint32_t value);
  public:

  // bool unlimited_bullet = 30;
  void clear_unlimited_bullet();
  bool unlimited_bullet() const;
  void set_unlimited_bullet(bool value);
  private:
  bool _internal_unlimited_bullet() const;
  void _internal_set_unlimited_bullet(bool value);
  public:

  // bool unlimited_gloowall = 31;
  void clear_unlimited_gloowall();
  bool unlimited_gloowall() const;
  void set_unlimited_gloowall(bool value);
  private:
  bool _internal_unlimited_gloowall() const;
  void _internal_set_unlimited_gloowall(bool value);
  public:

  // bool unlimited_throwables = 32;
  void clear_unlimited_throwables();
  bool unlimited_throwables() const;
  void set_unlimited_throwables(bool value);
  private:
  bool _internal_unlimited_throwables() const;
  void _internal_set_unlimited_throwables(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditGeneralProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t max_hp_;
    uint32_t max_ep_;
    uint32_t start_ep_;
    uint32_t damage_;
    uint32_t receive_damage_;
    float move_speed_;
    float jump_height_;
    bool auto_healing_;
    bool limited_ammo_;
    bool enable_active_skill_;
    bool enable_passive_skill_;
    uint32_t global_active_skill_cd_percent_;
    uint32_t playerskill_transform_cd_percent_;
    uint32_t playerskill_epchangetohp_cd_percent_;
    uint32_t playerskill_healingdance_cd_percent_;
    uint32_t playerskill_graffitimonitor_cd_percent_;
    uint32_t playerskill_detective_cd_percent_;
    uint32_t playerskill_epfastandupper_cd_percent_;
    uint32_t playerskill_adddamagebycosthp_cd_percent_;
    uint32_t playerskill_spaceshield_cd_percent_;
    uint32_t playerskill_blowupicewall_cd_percent_;
    uint32_t playerskill_tempincreasehp_cd_percent_;
    uint32_t playerskill_addhpandrescure_cd_percent_;
    uint32_t playerskill_dwshield_cd_percent_;
    uint32_t playerskill_throwsilence_cd_percent_;
    uint32_t playerskill_createflightbomb_cd_percent_;
    uint32_t playerskill_markicewall_cd_percent_;
    uint32_t playerskill_runspeedup_cd_percent_;
    bool unlimited_bullet_;
    bool unlimited_gloowall_;
    bool unlimited_throwables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditCSModeProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditCSModeProtoData) */ {
 public:
  inline SceneEditCSModeProtoData() : SceneEditCSModeProtoData(nullptr) {}
  ~SceneEditCSModeProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditCSModeProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditCSModeProtoData(const SceneEditCSModeProtoData& from);
  SceneEditCSModeProtoData(SceneEditCSModeProtoData&& from) noexcept
    : SceneEditCSModeProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditCSModeProtoData& operator=(const SceneEditCSModeProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditCSModeProtoData& operator=(SceneEditCSModeProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditCSModeProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditCSModeProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditCSModeProtoData*>(
               &_SceneEditCSModeProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(SceneEditCSModeProtoData& a, SceneEditCSModeProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditCSModeProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditCSModeProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditCSModeProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditCSModeProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditCSModeProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditCSModeProtoData& from) {
    SceneEditCSModeProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditCSModeProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditCSModeProtoData";
  }
  protected:
  explicit SceneEditCSModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndConditionFieldNumber = 1,
    kSafeZoneSizeFieldNumber = 2,
    kSafeZoneStartTimeFieldNumber = 3,
  };
  // .message.SceneEditEndConditionProtoData end_condition = 1;
  bool has_end_condition() const;
  private:
  bool _internal_has_end_condition() const;
  public:
  void clear_end_condition();
  const ::message::SceneEditEndConditionProtoData& end_condition() const;
  PROTOBUF_NODISCARD ::message::SceneEditEndConditionProtoData* release_end_condition();
  ::message::SceneEditEndConditionProtoData* mutable_end_condition();
  void set_allocated_end_condition(::message::SceneEditEndConditionProtoData* end_condition);
  private:
  const ::message::SceneEditEndConditionProtoData& _internal_end_condition() const;
  ::message::SceneEditEndConditionProtoData* _internal_mutable_end_condition();
  public:
  void unsafe_arena_set_allocated_end_condition(
      ::message::SceneEditEndConditionProtoData* end_condition);
  ::message::SceneEditEndConditionProtoData* unsafe_arena_release_end_condition();

  // float safe_zone_size = 2;
  void clear_safe_zone_size();
  float safe_zone_size() const;
  void set_safe_zone_size(float value);
  private:
  float _internal_safe_zone_size() const;
  void _internal_set_safe_zone_size(float value);
  public:

  // uint32 safe_zone_start_time = 3;
  void clear_safe_zone_start_time();
  uint32_t safe_zone_start_time() const;
  void set_safe_zone_start_time(uint32_t value);
  private:
  uint32_t _internal_safe_zone_start_time() const;
  void _internal_set_safe_zone_start_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditCSModeProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::SceneEditEndConditionProtoData* end_condition_;
    float safe_zone_size_;
    uint32_t safe_zone_start_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditIntegralModeProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditIntegralModeProtoData) */ {
 public:
  inline SceneEditIntegralModeProtoData() : SceneEditIntegralModeProtoData(nullptr) {}
  ~SceneEditIntegralModeProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditIntegralModeProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditIntegralModeProtoData(const SceneEditIntegralModeProtoData& from);
  SceneEditIntegralModeProtoData(SceneEditIntegralModeProtoData&& from) noexcept
    : SceneEditIntegralModeProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditIntegralModeProtoData& operator=(const SceneEditIntegralModeProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditIntegralModeProtoData& operator=(SceneEditIntegralModeProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditIntegralModeProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditIntegralModeProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditIntegralModeProtoData*>(
               &_SceneEditIntegralModeProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(SceneEditIntegralModeProtoData& a, SceneEditIntegralModeProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditIntegralModeProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditIntegralModeProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditIntegralModeProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditIntegralModeProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditIntegralModeProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditIntegralModeProtoData& from) {
    SceneEditIntegralModeProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditIntegralModeProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditIntegralModeProtoData";
  }
  protected:
  explicit SceneEditIntegralModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndConditionFieldNumber = 1,
    kKillScoreFieldNumber = 2,
    kReviveRuleFieldNumber = 3,
    kReviveTimeFieldNumber = 4,
  };
  // .message.SceneEditEndConditionProtoData end_condition = 1;
  bool has_end_condition() const;
  private:
  bool _internal_has_end_condition() const;
  public:
  void clear_end_condition();
  const ::message::SceneEditEndConditionProtoData& end_condition() const;
  PROTOBUF_NODISCARD ::message::SceneEditEndConditionProtoData* release_end_condition();
  ::message::SceneEditEndConditionProtoData* mutable_end_condition();
  void set_allocated_end_condition(::message::SceneEditEndConditionProtoData* end_condition);
  private:
  const ::message::SceneEditEndConditionProtoData& _internal_end_condition() const;
  ::message::SceneEditEndConditionProtoData* _internal_mutable_end_condition();
  public:
  void unsafe_arena_set_allocated_end_condition(
      ::message::SceneEditEndConditionProtoData* end_condition);
  ::message::SceneEditEndConditionProtoData* unsafe_arena_release_end_condition();

  // uint32 kill_score = 2;
  void clear_kill_score();
  uint32_t kill_score() const;
  void set_kill_score(uint32_t value);
  private:
  uint32_t _internal_kill_score() const;
  void _internal_set_kill_score(uint32_t value);
  public:

  // uint32 revive_rule = 3;
  void clear_revive_rule();
  uint32_t revive_rule() const;
  void set_revive_rule(uint32_t value);
  private:
  uint32_t _internal_revive_rule() const;
  void _internal_set_revive_rule(uint32_t value);
  public:

  // uint32 revive_time = 4;
  void clear_revive_time();
  uint32_t revive_time() const;
  void set_revive_time(uint32_t value);
  private:
  uint32_t _internal_revive_time() const;
  void _internal_set_revive_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditIntegralModeProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::SceneEditEndConditionProtoData* end_condition_;
    uint32_t kill_score_;
    uint32_t revive_rule_;
    uint32_t revive_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditPartyModeProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditPartyModeProtoData) */ {
 public:
  inline SceneEditPartyModeProtoData() : SceneEditPartyModeProtoData(nullptr) {}
  ~SceneEditPartyModeProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditPartyModeProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditPartyModeProtoData(const SceneEditPartyModeProtoData& from);
  SceneEditPartyModeProtoData(SceneEditPartyModeProtoData&& from) noexcept
    : SceneEditPartyModeProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditPartyModeProtoData& operator=(const SceneEditPartyModeProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditPartyModeProtoData& operator=(SceneEditPartyModeProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditPartyModeProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditPartyModeProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditPartyModeProtoData*>(
               &_SceneEditPartyModeProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SceneEditPartyModeProtoData& a, SceneEditPartyModeProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditPartyModeProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditPartyModeProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditPartyModeProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditPartyModeProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditPartyModeProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditPartyModeProtoData& from) {
    SceneEditPartyModeProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditPartyModeProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditPartyModeProtoData";
  }
  protected:
  explicit SceneEditPartyModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndConditionFieldNumber = 1,
  };
  // .message.SceneEditEndConditionProtoData end_condition = 1;
  bool has_end_condition() const;
  private:
  bool _internal_has_end_condition() const;
  public:
  void clear_end_condition();
  const ::message::SceneEditEndConditionProtoData& end_condition() const;
  PROTOBUF_NODISCARD ::message::SceneEditEndConditionProtoData* release_end_condition();
  ::message::SceneEditEndConditionProtoData* mutable_end_condition();
  void set_allocated_end_condition(::message::SceneEditEndConditionProtoData* end_condition);
  private:
  const ::message::SceneEditEndConditionProtoData& _internal_end_condition() const;
  ::message::SceneEditEndConditionProtoData* _internal_mutable_end_condition();
  public:
  void unsafe_arena_set_allocated_end_condition(
      ::message::SceneEditEndConditionProtoData* end_condition);
  ::message::SceneEditEndConditionProtoData* unsafe_arena_release_end_condition();

  // @@protoc_insertion_point(class_scope:message.SceneEditPartyModeProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::SceneEditEndConditionProtoData* end_condition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditCustomModeProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditCustomModeProtoData) */ {
 public:
  inline SceneEditCustomModeProtoData() : SceneEditCustomModeProtoData(nullptr) {}
  ~SceneEditCustomModeProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditCustomModeProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditCustomModeProtoData(const SceneEditCustomModeProtoData& from);
  SceneEditCustomModeProtoData(SceneEditCustomModeProtoData&& from) noexcept
    : SceneEditCustomModeProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditCustomModeProtoData& operator=(const SceneEditCustomModeProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditCustomModeProtoData& operator=(SceneEditCustomModeProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditCustomModeProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditCustomModeProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditCustomModeProtoData*>(
               &_SceneEditCustomModeProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SceneEditCustomModeProtoData& a, SceneEditCustomModeProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditCustomModeProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditCustomModeProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditCustomModeProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditCustomModeProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditCustomModeProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditCustomModeProtoData& from) {
    SceneEditCustomModeProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditCustomModeProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditCustomModeProtoData";
  }
  protected:
  explicit SceneEditCustomModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .message.ModeVariable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::message::ModeVariable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ModeVariable >*
      mutable_variables();
  private:
  const ::message::ModeVariable& _internal_variables(int index) const;
  ::message::ModeVariable* _internal_add_variables();
  public:
  const ::message::ModeVariable& variables(int index) const;
  ::message::ModeVariable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ModeVariable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:message.SceneEditCustomModeProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ModeVariable > variables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class SceneEditEndConditionProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SceneEditEndConditionProtoData) */ {
 public:
  inline SceneEditEndConditionProtoData() : SceneEditEndConditionProtoData(nullptr) {}
  ~SceneEditEndConditionProtoData() override;
  explicit PROTOBUF_CONSTEXPR SceneEditEndConditionProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneEditEndConditionProtoData(const SceneEditEndConditionProtoData& from);
  SceneEditEndConditionProtoData(SceneEditEndConditionProtoData&& from) noexcept
    : SceneEditEndConditionProtoData() {
    *this = ::std::move(from);
  }

  inline SceneEditEndConditionProtoData& operator=(const SceneEditEndConditionProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneEditEndConditionProtoData& operator=(SceneEditEndConditionProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneEditEndConditionProtoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneEditEndConditionProtoData* internal_default_instance() {
    return reinterpret_cast<const SceneEditEndConditionProtoData*>(
               &_SceneEditEndConditionProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SceneEditEndConditionProtoData& a, SceneEditEndConditionProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneEditEndConditionProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneEditEndConditionProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneEditEndConditionProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneEditEndConditionProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneEditEndConditionProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SceneEditEndConditionProtoData& from) {
    SceneEditEndConditionProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneEditEndConditionProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SceneEditEndConditionProtoData";
  }
  protected:
  explicit SceneEditEndConditionProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUpFieldNumber = 1,
    kScoreFieldNumber = 2,
    kCsRoundsFieldNumber = 3,
  };
  // uint32 time_up = 1;
  void clear_time_up();
  uint32_t time_up() const;
  void set_time_up(uint32_t value);
  private:
  uint32_t _internal_time_up() const;
  void _internal_set_time_up(uint32_t value);
  public:

  // uint32 score = 2;
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // uint32 cs_rounds = 3;
  void clear_cs_rounds();
  uint32_t cs_rounds() const;
  void set_cs_rounds(uint32_t value);
  private:
  uint32_t _internal_cs_rounds() const;
  void _internal_set_cs_rounds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.SceneEditEndConditionProtoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t time_up_;
    uint32_t score_;
    uint32_t cs_rounds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCMoveObjectExportExtraInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCMoveObjectExportExtraInfo) */ {
 public:
  inline UGCMoveObjectExportExtraInfo() : UGCMoveObjectExportExtraInfo(nullptr) {}
  ~UGCMoveObjectExportExtraInfo() override;
  explicit PROTOBUF_CONSTEXPR UGCMoveObjectExportExtraInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCMoveObjectExportExtraInfo(const UGCMoveObjectExportExtraInfo& from);
  UGCMoveObjectExportExtraInfo(UGCMoveObjectExportExtraInfo&& from) noexcept
    : UGCMoveObjectExportExtraInfo() {
    *this = ::std::move(from);
  }

  inline UGCMoveObjectExportExtraInfo& operator=(const UGCMoveObjectExportExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCMoveObjectExportExtraInfo& operator=(UGCMoveObjectExportExtraInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCMoveObjectExportExtraInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCMoveObjectExportExtraInfo* internal_default_instance() {
    return reinterpret_cast<const UGCMoveObjectExportExtraInfo*>(
               &_UGCMoveObjectExportExtraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(UGCMoveObjectExportExtraInfo& a, UGCMoveObjectExportExtraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCMoveObjectExportExtraInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCMoveObjectExportExtraInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCMoveObjectExportExtraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCMoveObjectExportExtraInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCMoveObjectExportExtraInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCMoveObjectExportExtraInfo& from) {
    UGCMoveObjectExportExtraInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCMoveObjectExportExtraInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCMoveObjectExportExtraInfo";
  }
  protected:
  explicit UGCMoveObjectExportExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveRootLocPosFieldNumber = 1,
    kMoveRooLoctRotFieldNumber = 2,
  };
  // .message.ProtoBuffVector3 MoveRootLocPos = 1;
  bool has_moverootlocpos() const;
  private:
  bool _internal_has_moverootlocpos() const;
  public:
  void clear_moverootlocpos();
  const ::message::ProtoBuffVector3& moverootlocpos() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_moverootlocpos();
  ::message::ProtoBuffVector3* mutable_moverootlocpos();
  void set_allocated_moverootlocpos(::message::ProtoBuffVector3* moverootlocpos);
  private:
  const ::message::ProtoBuffVector3& _internal_moverootlocpos() const;
  ::message::ProtoBuffVector3* _internal_mutable_moverootlocpos();
  public:
  void unsafe_arena_set_allocated_moverootlocpos(
      ::message::ProtoBuffVector3* moverootlocpos);
  ::message::ProtoBuffVector3* unsafe_arena_release_moverootlocpos();

  // .message.ProtoBuffQuaternion MoveRooLoctRot = 2;
  bool has_moverooloctrot() const;
  private:
  bool _internal_has_moverooloctrot() const;
  public:
  void clear_moverooloctrot();
  const ::message::ProtoBuffQuaternion& moverooloctrot() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffQuaternion* release_moverooloctrot();
  ::message::ProtoBuffQuaternion* mutable_moverooloctrot();
  void set_allocated_moverooloctrot(::message::ProtoBuffQuaternion* moverooloctrot);
  private:
  const ::message::ProtoBuffQuaternion& _internal_moverooloctrot() const;
  ::message::ProtoBuffQuaternion* _internal_mutable_moverooloctrot();
  public:
  void unsafe_arena_set_allocated_moverooloctrot(
      ::message::ProtoBuffQuaternion* moverooloctrot);
  ::message::ProtoBuffQuaternion* unsafe_arena_release_moverooloctrot();

  // @@protoc_insertion_point(class_scope:message.UGCMoveObjectExportExtraInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::ProtoBuffVector3* moverootlocpos_;
    ::message::ProtoBuffQuaternion* moverooloctrot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCCheckPointExportExtraInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCheckPointExportExtraInfo) */ {
 public:
  inline UGCCheckPointExportExtraInfo() : UGCCheckPointExportExtraInfo(nullptr) {}
  ~UGCCheckPointExportExtraInfo() override;
  explicit PROTOBUF_CONSTEXPR UGCCheckPointExportExtraInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCheckPointExportExtraInfo(const UGCCheckPointExportExtraInfo& from);
  UGCCheckPointExportExtraInfo(UGCCheckPointExportExtraInfo&& from) noexcept
    : UGCCheckPointExportExtraInfo() {
    *this = ::std::move(from);
  }

  inline UGCCheckPointExportExtraInfo& operator=(const UGCCheckPointExportExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCheckPointExportExtraInfo& operator=(UGCCheckPointExportExtraInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCheckPointExportExtraInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCheckPointExportExtraInfo* internal_default_instance() {
    return reinterpret_cast<const UGCCheckPointExportExtraInfo*>(
               &_UGCCheckPointExportExtraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(UGCCheckPointExportExtraInfo& a, UGCCheckPointExportExtraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCheckPointExportExtraInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCheckPointExportExtraInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCheckPointExportExtraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCheckPointExportExtraInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCheckPointExportExtraInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCheckPointExportExtraInfo& from) {
    UGCCheckPointExportExtraInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCheckPointExportExtraInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCheckPointExportExtraInfo";
  }
  protected:
  explicit UGCCheckPointExportExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawnPointPosFieldNumber = 1,
  };
  // repeated .message.ProtoBuffVector3 spawnPointPos = 1;
  int spawnpointpos_size() const;
  private:
  int _internal_spawnpointpos_size() const;
  public:
  void clear_spawnpointpos();
  ::message::ProtoBuffVector3* mutable_spawnpointpos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 >*
      mutable_spawnpointpos();
  private:
  const ::message::ProtoBuffVector3& _internal_spawnpointpos(int index) const;
  ::message::ProtoBuffVector3* _internal_add_spawnpointpos();
  public:
  const ::message::ProtoBuffVector3& spawnpointpos(int index) const;
  ::message::ProtoBuffVector3* add_spawnpointpos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 >&
      spawnpointpos() const;

  // @@protoc_insertion_point(class_scope:message.UGCCheckPointExportExtraInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 > spawnpointpos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCBigToyBallExportExtraInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCBigToyBallExportExtraInfo) */ {
 public:
  inline UGCBigToyBallExportExtraInfo() : UGCBigToyBallExportExtraInfo(nullptr) {}
  ~UGCBigToyBallExportExtraInfo() override;
  explicit PROTOBUF_CONSTEXPR UGCBigToyBallExportExtraInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCBigToyBallExportExtraInfo(const UGCBigToyBallExportExtraInfo& from);
  UGCBigToyBallExportExtraInfo(UGCBigToyBallExportExtraInfo&& from) noexcept
    : UGCBigToyBallExportExtraInfo() {
    *this = ::std::move(from);
  }

  inline UGCBigToyBallExportExtraInfo& operator=(const UGCBigToyBallExportExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCBigToyBallExportExtraInfo& operator=(UGCBigToyBallExportExtraInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCBigToyBallExportExtraInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCBigToyBallExportExtraInfo* internal_default_instance() {
    return reinterpret_cast<const UGCBigToyBallExportExtraInfo*>(
               &_UGCBigToyBallExportExtraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(UGCBigToyBallExportExtraInfo& a, UGCBigToyBallExportExtraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCBigToyBallExportExtraInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCBigToyBallExportExtraInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCBigToyBallExportExtraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCBigToyBallExportExtraInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCBigToyBallExportExtraInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCBigToyBallExportExtraInfo& from) {
    UGCBigToyBallExportExtraInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCBigToyBallExportExtraInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCBigToyBallExportExtraInfo";
  }
  protected:
  explicit UGCBigToyBallExportExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveRangeFieldNumber = 1,
    kTriggerRadiusFieldNumber = 2,
  };
  // float MoveRange = 1;
  void clear_moverange();
  float moverange() const;
  void set_moverange(float value);
  private:
  float _internal_moverange() const;
  void _internal_set_moverange(float value);
  public:

  // float TriggerRadius = 2;
  void clear_triggerradius();
  float triggerradius() const;
  void set_triggerradius(float value);
  private:
  float _internal_triggerradius() const;
  void _internal_set_triggerradius(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCBigToyBallExportExtraInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float moverange_;
    float triggerradius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCMiniSentryExportInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCMiniSentryExportInfo) */ {
 public:
  inline UGCMiniSentryExportInfo() : UGCMiniSentryExportInfo(nullptr) {}
  ~UGCMiniSentryExportInfo() override;
  explicit PROTOBUF_CONSTEXPR UGCMiniSentryExportInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCMiniSentryExportInfo(const UGCMiniSentryExportInfo& from);
  UGCMiniSentryExportInfo(UGCMiniSentryExportInfo&& from) noexcept
    : UGCMiniSentryExportInfo() {
    *this = ::std::move(from);
  }

  inline UGCMiniSentryExportInfo& operator=(const UGCMiniSentryExportInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCMiniSentryExportInfo& operator=(UGCMiniSentryExportInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCMiniSentryExportInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCMiniSentryExportInfo* internal_default_instance() {
    return reinterpret_cast<const UGCMiniSentryExportInfo*>(
               &_UGCMiniSentryExportInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(UGCMiniSentryExportInfo& a, UGCMiniSentryExportInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCMiniSentryExportInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCMiniSentryExportInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCMiniSentryExportInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCMiniSentryExportInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCMiniSentryExportInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCMiniSentryExportInfo& from) {
    UGCMiniSentryExportInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCMiniSentryExportInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCMiniSentryExportInfo";
  }
  protected:
  explicit UGCMiniSentryExportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirePosFieldNumber = 4,
    kAngleSpeedFieldNumber = 1,
    kAngleUpFieldNumber = 2,
    kAngleDownFieldNumber = 3,
    kFireAngleFieldNumber = 5,
  };
  // .message.ProtoBuffVector3 FirePos = 4;
  bool has_firepos() const;
  private:
  bool _internal_has_firepos() const;
  public:
  void clear_firepos();
  const ::message::ProtoBuffVector3& firepos() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_firepos();
  ::message::ProtoBuffVector3* mutable_firepos();
  void set_allocated_firepos(::message::ProtoBuffVector3* firepos);
  private:
  const ::message::ProtoBuffVector3& _internal_firepos() const;
  ::message::ProtoBuffVector3* _internal_mutable_firepos();
  public:
  void unsafe_arena_set_allocated_firepos(
      ::message::ProtoBuffVector3* firepos);
  ::message::ProtoBuffVector3* unsafe_arena_release_firepos();

  // float AngleSpeed = 1;
  void clear_anglespeed();
  float anglespeed() const;
  void set_anglespeed(float value);
  private:
  float _internal_anglespeed() const;
  void _internal_set_anglespeed(float value);
  public:

  // float AngleUp = 2;
  void clear_angleup();
  float angleup() const;
  void set_angleup(float value);
  private:
  float _internal_angleup() const;
  void _internal_set_angleup(float value);
  public:

  // float AngleDown = 3;
  void clear_angledown();
  float angledown() const;
  void set_angledown(float value);
  private:
  float _internal_angledown() const;
  void _internal_set_angledown(float value);
  public:

  // float FireAngle = 5;
  void clear_fireangle();
  float fireangle() const;
  void set_fireangle(float value);
  private:
  float _internal_fireangle() const;
  void _internal_set_fireangle(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCMiniSentryExportInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::ProtoBuffVector3* firepos_;
    float anglespeed_;
    float angleup_;
    float angledown_;
    float fireangle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class ModeVariable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ModeVariable) */ {
 public:
  inline ModeVariable() : ModeVariable(nullptr) {}
  ~ModeVariable() override;
  explicit PROTOBUF_CONSTEXPR ModeVariable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeVariable(const ModeVariable& from);
  ModeVariable(ModeVariable&& from) noexcept
    : ModeVariable() {
    *this = ::std::move(from);
  }

  inline ModeVariable& operator=(const ModeVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeVariable& operator=(ModeVariable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeVariable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeVariable* internal_default_instance() {
    return reinterpret_cast<const ModeVariable*>(
               &_ModeVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(ModeVariable& a, ModeVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeVariable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeVariable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModeVariable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModeVariable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModeVariable& from) {
    ModeVariable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeVariable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ModeVariable";
  }
  protected:
  explicit ModeVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatArrValueFieldNumber = 5,
    kIdFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kFloatValueFieldNumber = 4,
  };
  // repeated float floatArrValue = 5;
  int floatarrvalue_size() const;
  private:
  int _internal_floatarrvalue_size() const;
  public:
  void clear_floatarrvalue();
  private:
  float _internal_floatarrvalue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floatarrvalue() const;
  void _internal_add_floatarrvalue(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floatarrvalue();
  public:
  float floatarrvalue(int index) const;
  void set_floatarrvalue(int index, float value);
  void add_floatarrvalue(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floatarrvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floatarrvalue();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool boolValue = 2;
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // int32 intValue = 3;
  void clear_intvalue();
  int32_t intvalue() const;
  void set_intvalue(int32_t value);
  private:
  int32_t _internal_intvalue() const;
  void _internal_set_intvalue(int32_t value);
  public:

  // float floatValue = 4;
  void clear_floatvalue();
  float floatvalue() const;
  void set_floatvalue(float value);
  private:
  float _internal_floatvalue() const;
  void _internal_set_floatvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.ModeVariable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floatarrvalue_;
    int32_t id_;
    bool boolvalue_;
    int32_t intvalue_;
    float floatvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCBlockEditProjectData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCBlockEditProjectData) */ {
 public:
  inline UGCBlockEditProjectData() : UGCBlockEditProjectData(nullptr) {}
  ~UGCBlockEditProjectData() override;
  explicit PROTOBUF_CONSTEXPR UGCBlockEditProjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCBlockEditProjectData(const UGCBlockEditProjectData& from);
  UGCBlockEditProjectData(UGCBlockEditProjectData&& from) noexcept
    : UGCBlockEditProjectData() {
    *this = ::std::move(from);
  }

  inline UGCBlockEditProjectData& operator=(const UGCBlockEditProjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCBlockEditProjectData& operator=(UGCBlockEditProjectData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCBlockEditProjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCBlockEditProjectData* internal_default_instance() {
    return reinterpret_cast<const UGCBlockEditProjectData*>(
               &_UGCBlockEditProjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(UGCBlockEditProjectData& a, UGCBlockEditProjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCBlockEditProjectData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCBlockEditProjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCBlockEditProjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCBlockEditProjectData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCBlockEditProjectData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCBlockEditProjectData& from) {
    UGCBlockEditProjectData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCBlockEditProjectData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCBlockEditProjectData";
  }
  protected:
  explicit UGCBlockEditProjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kSaveTypeFieldNumber = 2,
  };
  // bytes Data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 SaveType = 2;
  void clear_savetype();
  int32_t savetype() const;
  void set_savetype(int32_t value);
  private:
  int32_t _internal_savetype() const;
  void _internal_set_savetype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCBlockEditProjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t savetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudTransformData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudTransformData) */ {
 public:
  inline UGCHudTransformData() : UGCHudTransformData(nullptr) {}
  ~UGCHudTransformData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudTransformData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudTransformData(const UGCHudTransformData& from);
  UGCHudTransformData(UGCHudTransformData&& from) noexcept
    : UGCHudTransformData() {
    *this = ::std::move(from);
  }

  inline UGCHudTransformData& operator=(const UGCHudTransformData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudTransformData& operator=(UGCHudTransformData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudTransformData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudTransformData* internal_default_instance() {
    return reinterpret_cast<const UGCHudTransformData*>(
               &_UGCHudTransformData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(UGCHudTransformData& a, UGCHudTransformData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudTransformData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudTransformData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudTransformData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudTransformData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudTransformData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudTransformData& from) {
    UGCHudTransformData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudTransformData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudTransformData";
  }
  protected:
  explicit UGCHudTransformData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalPositionFieldNumber = 1,
    kLocalEulerAnglesFieldNumber = 2,
    kLocalScaleFieldNumber = 3,
  };
  // .message.ProtoBuffVector3 LocalPosition = 1;
  bool has_localposition() const;
  private:
  bool _internal_has_localposition() const;
  public:
  void clear_localposition();
  const ::message::ProtoBuffVector3& localposition() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_localposition();
  ::message::ProtoBuffVector3* mutable_localposition();
  void set_allocated_localposition(::message::ProtoBuffVector3* localposition);
  private:
  const ::message::ProtoBuffVector3& _internal_localposition() const;
  ::message::ProtoBuffVector3* _internal_mutable_localposition();
  public:
  void unsafe_arena_set_allocated_localposition(
      ::message::ProtoBuffVector3* localposition);
  ::message::ProtoBuffVector3* unsafe_arena_release_localposition();

  // .message.ProtoBuffVector3 LocalEulerAngles = 2;
  bool has_localeulerangles() const;
  private:
  bool _internal_has_localeulerangles() const;
  public:
  void clear_localeulerangles();
  const ::message::ProtoBuffVector3& localeulerangles() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_localeulerangles();
  ::message::ProtoBuffVector3* mutable_localeulerangles();
  void set_allocated_localeulerangles(::message::ProtoBuffVector3* localeulerangles);
  private:
  const ::message::ProtoBuffVector3& _internal_localeulerangles() const;
  ::message::ProtoBuffVector3* _internal_mutable_localeulerangles();
  public:
  void unsafe_arena_set_allocated_localeulerangles(
      ::message::ProtoBuffVector3* localeulerangles);
  ::message::ProtoBuffVector3* unsafe_arena_release_localeulerangles();

  // .message.ProtoBuffVector3 LocalScale = 3;
  bool has_localscale() const;
  private:
  bool _internal_has_localscale() const;
  public:
  void clear_localscale();
  const ::message::ProtoBuffVector3& localscale() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_localscale();
  ::message::ProtoBuffVector3* mutable_localscale();
  void set_allocated_localscale(::message::ProtoBuffVector3* localscale);
  private:
  const ::message::ProtoBuffVector3& _internal_localscale() const;
  ::message::ProtoBuffVector3* _internal_mutable_localscale();
  public:
  void unsafe_arena_set_allocated_localscale(
      ::message::ProtoBuffVector3* localscale);
  ::message::ProtoBuffVector3* unsafe_arena_release_localscale();

  // @@protoc_insertion_point(class_scope:message.UGCHudTransformData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::ProtoBuffVector3* localposition_;
    ::message::ProtoBuffVector3* localeulerangles_;
    ::message::ProtoBuffVector3* localscale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudRectTransformData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudRectTransformData) */ {
 public:
  inline UGCHudRectTransformData() : UGCHudRectTransformData(nullptr) {}
  ~UGCHudRectTransformData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudRectTransformData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudRectTransformData(const UGCHudRectTransformData& from);
  UGCHudRectTransformData(UGCHudRectTransformData&& from) noexcept
    : UGCHudRectTransformData() {
    *this = ::std::move(from);
  }

  inline UGCHudRectTransformData& operator=(const UGCHudRectTransformData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudRectTransformData& operator=(UGCHudRectTransformData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudRectTransformData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudRectTransformData* internal_default_instance() {
    return reinterpret_cast<const UGCHudRectTransformData*>(
               &_UGCHudRectTransformData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(UGCHudRectTransformData& a, UGCHudRectTransformData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudRectTransformData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudRectTransformData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudRectTransformData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudRectTransformData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudRectTransformData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudRectTransformData& from) {
    UGCHudRectTransformData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudRectTransformData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudRectTransformData";
  }
  protected:
  explicit UGCHudRectTransformData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 1,
    kAnchorPositionFieldNumber = 2,
  };
  // .message.UGCHudTransformData Transform = 1;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::message::UGCHudTransformData& transform() const;
  PROTOBUF_NODISCARD ::message::UGCHudTransformData* release_transform();
  ::message::UGCHudTransformData* mutable_transform();
  void set_allocated_transform(::message::UGCHudTransformData* transform);
  private:
  const ::message::UGCHudTransformData& _internal_transform() const;
  ::message::UGCHudTransformData* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::message::UGCHudTransformData* transform);
  ::message::UGCHudTransformData* unsafe_arena_release_transform();

  // .message.ProtoBuffVector3 AnchorPosition = 2;
  bool has_anchorposition() const;
  private:
  bool _internal_has_anchorposition() const;
  public:
  void clear_anchorposition();
  const ::message::ProtoBuffVector3& anchorposition() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_anchorposition();
  ::message::ProtoBuffVector3* mutable_anchorposition();
  void set_allocated_anchorposition(::message::ProtoBuffVector3* anchorposition);
  private:
  const ::message::ProtoBuffVector3& _internal_anchorposition() const;
  ::message::ProtoBuffVector3* _internal_mutable_anchorposition();
  public:
  void unsafe_arena_set_allocated_anchorposition(
      ::message::ProtoBuffVector3* anchorposition);
  ::message::ProtoBuffVector3* unsafe_arena_release_anchorposition();

  // @@protoc_insertion_point(class_scope:message.UGCHudRectTransformData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCHudTransformData* transform_;
    ::message::ProtoBuffVector3* anchorposition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudWidgetData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudWidgetData) */ {
 public:
  inline UGCHudWidgetData() : UGCHudWidgetData(nullptr) {}
  ~UGCHudWidgetData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudWidgetData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudWidgetData(const UGCHudWidgetData& from);
  UGCHudWidgetData(UGCHudWidgetData&& from) noexcept
    : UGCHudWidgetData() {
    *this = ::std::move(from);
  }

  inline UGCHudWidgetData& operator=(const UGCHudWidgetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudWidgetData& operator=(UGCHudWidgetData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudWidgetData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudWidgetData* internal_default_instance() {
    return reinterpret_cast<const UGCHudWidgetData*>(
               &_UGCHudWidgetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(UGCHudWidgetData& a, UGCHudWidgetData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudWidgetData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudWidgetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudWidgetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudWidgetData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudWidgetData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudWidgetData& from) {
    UGCHudWidgetData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudWidgetData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudWidgetData";
  }
  protected:
  explicit UGCHudWidgetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorMinFieldNumber = 7,
    kAnchorMaxFieldNumber = 8,
    kSizeDeltaFieldNumber = 9,
    kPivotFieldNumber = 10,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kDepthFieldNumber = 3,
    kHorizontalAlignmentFieldNumber = 4,
    kVerticalAlignmentFieldNumber = 5,
    kColorFieldNumber = 6,
  };
  // .message.ProtoBuffVector2 AnchorMin = 7;
  bool has_anchormin() const;
  private:
  bool _internal_has_anchormin() const;
  public:
  void clear_anchormin();
  const ::message::ProtoBuffVector2& anchormin() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_anchormin();
  ::message::ProtoBuffVector2* mutable_anchormin();
  void set_allocated_anchormin(::message::ProtoBuffVector2* anchormin);
  private:
  const ::message::ProtoBuffVector2& _internal_anchormin() const;
  ::message::ProtoBuffVector2* _internal_mutable_anchormin();
  public:
  void unsafe_arena_set_allocated_anchormin(
      ::message::ProtoBuffVector2* anchormin);
  ::message::ProtoBuffVector2* unsafe_arena_release_anchormin();

  // .message.ProtoBuffVector2 AnchorMax = 8;
  bool has_anchormax() const;
  private:
  bool _internal_has_anchormax() const;
  public:
  void clear_anchormax();
  const ::message::ProtoBuffVector2& anchormax() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_anchormax();
  ::message::ProtoBuffVector2* mutable_anchormax();
  void set_allocated_anchormax(::message::ProtoBuffVector2* anchormax);
  private:
  const ::message::ProtoBuffVector2& _internal_anchormax() const;
  ::message::ProtoBuffVector2* _internal_mutable_anchormax();
  public:
  void unsafe_arena_set_allocated_anchormax(
      ::message::ProtoBuffVector2* anchormax);
  ::message::ProtoBuffVector2* unsafe_arena_release_anchormax();

  // .message.ProtoBuffVector2 SizeDelta = 9;
  bool has_sizedelta() const;
  private:
  bool _internal_has_sizedelta() const;
  public:
  void clear_sizedelta();
  const ::message::ProtoBuffVector2& sizedelta() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_sizedelta();
  ::message::ProtoBuffVector2* mutable_sizedelta();
  void set_allocated_sizedelta(::message::ProtoBuffVector2* sizedelta);
  private:
  const ::message::ProtoBuffVector2& _internal_sizedelta() const;
  ::message::ProtoBuffVector2* _internal_mutable_sizedelta();
  public:
  void unsafe_arena_set_allocated_sizedelta(
      ::message::ProtoBuffVector2* sizedelta);
  ::message::ProtoBuffVector2* unsafe_arena_release_sizedelta();

  // .message.ProtoBuffVector2 Pivot = 10;
  bool has_pivot() const;
  private:
  bool _internal_has_pivot() const;
  public:
  void clear_pivot();
  const ::message::ProtoBuffVector2& pivot() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_pivot();
  ::message::ProtoBuffVector2* mutable_pivot();
  void set_allocated_pivot(::message::ProtoBuffVector2* pivot);
  private:
  const ::message::ProtoBuffVector2& _internal_pivot() const;
  ::message::ProtoBuffVector2* _internal_mutable_pivot();
  public:
  void unsafe_arena_set_allocated_pivot(
      ::message::ProtoBuffVector2* pivot);
  ::message::ProtoBuffVector2* unsafe_arena_release_pivot();

  // int32 Width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 Height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 Depth = 3;
  void clear_depth();
  int32_t depth() const;
  void set_depth(int32_t value);
  private:
  int32_t _internal_depth() const;
  void _internal_set_depth(int32_t value);
  public:

  // int32 HorizontalAlignment = 4;
  void clear_horizontalalignment();
  int32_t horizontalalignment() const;
  void set_horizontalalignment(int32_t value);
  private:
  int32_t _internal_horizontalalignment() const;
  void _internal_set_horizontalalignment(int32_t value);
  public:

  // int32 VerticalAlignment = 5;
  void clear_verticalalignment();
  int32_t verticalalignment() const;
  void set_verticalalignment(int32_t value);
  private:
  int32_t _internal_verticalalignment() const;
  void _internal_set_verticalalignment(int32_t value);
  public:

  // int32 Color = 6;
  void clear_color();
  int32_t color() const;
  void set_color(int32_t value);
  private:
  int32_t _internal_color() const;
  void _internal_set_color(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudWidgetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::ProtoBuffVector2* anchormin_;
    ::message::ProtoBuffVector2* anchormax_;
    ::message::ProtoBuffVector2* sizedelta_;
    ::message::ProtoBuffVector2* pivot_;
    int32_t width_;
    int32_t height_;
    int32_t depth_;
    int32_t horizontalalignment_;
    int32_t verticalalignment_;
    int32_t color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudLabelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudLabelData) */ {
 public:
  inline UGCHudLabelData() : UGCHudLabelData(nullptr) {}
  ~UGCHudLabelData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudLabelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudLabelData(const UGCHudLabelData& from);
  UGCHudLabelData(UGCHudLabelData&& from) noexcept
    : UGCHudLabelData() {
    *this = ::std::move(from);
  }

  inline UGCHudLabelData& operator=(const UGCHudLabelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudLabelData& operator=(UGCHudLabelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudLabelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudLabelData* internal_default_instance() {
    return reinterpret_cast<const UGCHudLabelData*>(
               &_UGCHudLabelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(UGCHudLabelData& a, UGCHudLabelData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudLabelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudLabelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudLabelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudLabelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudLabelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudLabelData& from) {
    UGCHudLabelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudLabelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudLabelData";
  }
  protected:
  explicit UGCHudLabelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kFontFieldNumber = 6,
    kLocKeyFieldNumber = 12,
    kWidgetFieldNumber = 1,
    kFontSizeFieldNumber = 3,
    kAlignmentFieldNumber = 4,
    kAlignmentVerticalFieldNumber = 5,
    kIsBoldFieldNumber = 7,
    kIsItalicFieldNumber = 8,
    kIsUnderlineFieldNumber = 9,
    kLineSpacingFieldNumber = 10,
    kOverflowFieldNumber = 11,
  };
  // string Text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string Font = 6;
  void clear_font();
  const std::string& font() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_font(ArgT0&& arg0, ArgT... args);
  std::string* mutable_font();
  PROTOBUF_NODISCARD std::string* release_font();
  void set_allocated_font(std::string* font);
  private:
  const std::string& _internal_font() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font(const std::string& value);
  std::string* _internal_mutable_font();
  public:

  // string LocKey = 12;
  void clear_lockey();
  const std::string& lockey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lockey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lockey();
  PROTOBUF_NODISCARD std::string* release_lockey();
  void set_allocated_lockey(std::string* lockey);
  private:
  const std::string& _internal_lockey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lockey(const std::string& value);
  std::string* _internal_mutable_lockey();
  public:

  // .message.UGCHudWidgetData Widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // int32 FontSize = 3;
  void clear_fontsize();
  int32_t fontsize() const;
  void set_fontsize(int32_t value);
  private:
  int32_t _internal_fontsize() const;
  void _internal_set_fontsize(int32_t value);
  public:

  // int32 Alignment = 4;
  void clear_alignment();
  int32_t alignment() const;
  void set_alignment(int32_t value);
  private:
  int32_t _internal_alignment() const;
  void _internal_set_alignment(int32_t value);
  public:

  // int32 AlignmentVertical = 5;
  void clear_alignmentvertical();
  int32_t alignmentvertical() const;
  void set_alignmentvertical(int32_t value);
  private:
  int32_t _internal_alignmentvertical() const;
  void _internal_set_alignmentvertical(int32_t value);
  public:

  // bool IsBold = 7;
  void clear_isbold();
  bool isbold() const;
  void set_isbold(bool value);
  private:
  bool _internal_isbold() const;
  void _internal_set_isbold(bool value);
  public:

  // bool IsItalic = 8;
  void clear_isitalic();
  bool isitalic() const;
  void set_isitalic(bool value);
  private:
  bool _internal_isitalic() const;
  void _internal_set_isitalic(bool value);
  public:

  // bool IsUnderline = 9;
  void clear_isunderline();
  bool isunderline() const;
  void set_isunderline(bool value);
  private:
  bool _internal_isunderline() const;
  void _internal_set_isunderline(bool value);
  public:

  // float LineSpacing = 10;
  void clear_linespacing();
  float linespacing() const;
  void set_linespacing(float value);
  private:
  float _internal_linespacing() const;
  void _internal_set_linespacing(float value);
  public:

  // int32 Overflow = 11;
  void clear_overflow();
  int32_t overflow() const;
  void set_overflow(int32_t value);
  private:
  int32_t _internal_overflow() const;
  void _internal_set_overflow(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudLabelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lockey_;
    ::message::UGCHudWidgetData* widget_;
    int32_t fontsize_;
    int32_t alignment_;
    int32_t alignmentvertical_;
    bool isbold_;
    bool isitalic_;
    bool isunderline_;
    float linespacing_;
    int32_t overflow_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudImageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudImageData) */ {
 public:
  inline UGCHudImageData() : UGCHudImageData(nullptr) {}
  ~UGCHudImageData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudImageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudImageData(const UGCHudImageData& from);
  UGCHudImageData(UGCHudImageData&& from) noexcept
    : UGCHudImageData() {
    *this = ::std::move(from);
  }

  inline UGCHudImageData& operator=(const UGCHudImageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudImageData& operator=(UGCHudImageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudImageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudImageData* internal_default_instance() {
    return reinterpret_cast<const UGCHudImageData*>(
               &_UGCHudImageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(UGCHudImageData& a, UGCHudImageData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudImageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudImageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudImageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudImageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudImageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudImageData& from) {
    UGCHudImageData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudImageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudImageData";
  }
  protected:
  explicit UGCHudImageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpriteNameFieldNumber = 2,
    kWidgetFieldNumber = 1,
    kSpriteFlipFieldNumber = 3,
    kSpriteTypeFieldNumber = 4,
    kBorderTopFieldNumber = 5,
    kBorderBottomFieldNumber = 6,
    kBorderLeftFieldNumber = 7,
    kBorderRightFieldNumber = 8,
    kFillDirFieldNumber = 10,
    kCenterInvisibleFieldNumber = 9,
    kInvertFillFieldNumber = 12,
    kFillAmountFieldNumber = 11,
    kGradientFieldNumber = 13,
    kGradientTopFieldNumber = 14,
    kGradientBottomFieldNumber = 15,
  };
  // string SpriteName = 2;
  void clear_spritename();
  const std::string& spritename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spritename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spritename();
  PROTOBUF_NODISCARD std::string* release_spritename();
  void set_allocated_spritename(std::string* spritename);
  private:
  const std::string& _internal_spritename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spritename(const std::string& value);
  std::string* _internal_mutable_spritename();
  public:

  // .message.UGCHudWidgetData Widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // int32 SpriteFlip = 3;
  void clear_spriteflip();
  int32_t spriteflip() const;
  void set_spriteflip(int32_t value);
  private:
  int32_t _internal_spriteflip() const;
  void _internal_set_spriteflip(int32_t value);
  public:

  // int32 SpriteType = 4;
  void clear_spritetype();
  int32_t spritetype() const;
  void set_spritetype(int32_t value);
  private:
  int32_t _internal_spritetype() const;
  void _internal_set_spritetype(int32_t value);
  public:

  // int32 BorderTop = 5;
  void clear_bordertop();
  int32_t bordertop() const;
  void set_bordertop(int32_t value);
  private:
  int32_t _internal_bordertop() const;
  void _internal_set_bordertop(int32_t value);
  public:

  // int32 BorderBottom = 6;
  void clear_borderbottom();
  int32_t borderbottom() const;
  void set_borderbottom(int32_t value);
  private:
  int32_t _internal_borderbottom() const;
  void _internal_set_borderbottom(int32_t value);
  public:

  // int32 BorderLeft = 7;
  void clear_borderleft();
  int32_t borderleft() const;
  void set_borderleft(int32_t value);
  private:
  int32_t _internal_borderleft() const;
  void _internal_set_borderleft(int32_t value);
  public:

  // int32 BorderRight = 8;
  void clear_borderright();
  int32_t borderright() const;
  void set_borderright(int32_t value);
  private:
  int32_t _internal_borderright() const;
  void _internal_set_borderright(int32_t value);
  public:

  // int32 FillDir = 10;
  void clear_filldir();
  int32_t filldir() const;
  void set_filldir(int32_t value);
  private:
  int32_t _internal_filldir() const;
  void _internal_set_filldir(int32_t value);
  public:

  // bool CenterInvisible = 9;
  void clear_centerinvisible();
  bool centerinvisible() const;
  void set_centerinvisible(bool value);
  private:
  bool _internal_centerinvisible() const;
  void _internal_set_centerinvisible(bool value);
  public:

  // bool InvertFill = 12;
  void clear_invertfill();
  bool invertfill() const;
  void set_invertfill(bool value);
  private:
  bool _internal_invertfill() const;
  void _internal_set_invertfill(bool value);
  public:

  // float FillAmount = 11;
  void clear_fillamount();
  float fillamount() const;
  void set_fillamount(float value);
  private:
  float _internal_fillamount() const;
  void _internal_set_fillamount(float value);
  public:

  // int32 Gradient = 13;
  void clear_gradient();
  int32_t gradient() const;
  void set_gradient(int32_t value);
  private:
  int32_t _internal_gradient() const;
  void _internal_set_gradient(int32_t value);
  public:

  // int32 GradientTop = 14;
  void clear_gradienttop();
  int32_t gradienttop() const;
  void set_gradienttop(int32_t value);
  private:
  int32_t _internal_gradienttop() const;
  void _internal_set_gradienttop(int32_t value);
  public:

  // int32 GradientBottom = 15;
  void clear_gradientbottom();
  int32_t gradientbottom() const;
  void set_gradientbottom(int32_t value);
  private:
  int32_t _internal_gradientbottom() const;
  void _internal_set_gradientbottom(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudImageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spritename_;
    ::message::UGCHudWidgetData* widget_;
    int32_t spriteflip_;
    int32_t spritetype_;
    int32_t bordertop_;
    int32_t borderbottom_;
    int32_t borderleft_;
    int32_t borderright_;
    int32_t filldir_;
    bool centerinvisible_;
    bool invertfill_;
    float fillamount_;
    int32_t gradient_;
    int32_t gradienttop_;
    int32_t gradientbottom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudButtonData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudButtonData) */ {
 public:
  inline UGCHudButtonData() : UGCHudButtonData(nullptr) {}
  ~UGCHudButtonData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudButtonData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudButtonData(const UGCHudButtonData& from);
  UGCHudButtonData(UGCHudButtonData&& from) noexcept
    : UGCHudButtonData() {
    *this = ::std::move(from);
  }

  inline UGCHudButtonData& operator=(const UGCHudButtonData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudButtonData& operator=(UGCHudButtonData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudButtonData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudButtonData* internal_default_instance() {
    return reinterpret_cast<const UGCHudButtonData*>(
               &_UGCHudButtonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(UGCHudButtonData& a, UGCHudButtonData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudButtonData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudButtonData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudButtonData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudButtonData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudButtonData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudButtonData& from) {
    UGCHudButtonData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudButtonData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudButtonData";
  }
  protected:
  explicit UGCHudButtonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpriteNameFieldNumber = 2,
    kWidgetFieldNumber = 1,
    kDisableColorFieldNumber = 3,
    kSpriteTypeFieldNumber = 4,
    kNormalColorFieldNumber = 5,
    kPressedColorFieldNumber = 6,
    kIsFEButtonFieldNumber = 7,
    kBorderTopFieldNumber = 8,
    kBorderBottomFieldNumber = 9,
    kBorderLeftFieldNumber = 10,
    kBorderRightFieldNumber = 11,
  };
  // string SpriteName = 2;
  void clear_spritename();
  const std::string& spritename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spritename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spritename();
  PROTOBUF_NODISCARD std::string* release_spritename();
  void set_allocated_spritename(std::string* spritename);
  private:
  const std::string& _internal_spritename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spritename(const std::string& value);
  std::string* _internal_mutable_spritename();
  public:

  // .message.UGCHudWidgetData Widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // int32 DisableColor = 3;
  void clear_disablecolor();
  int32_t disablecolor() const;
  void set_disablecolor(int32_t value);
  private:
  int32_t _internal_disablecolor() const;
  void _internal_set_disablecolor(int32_t value);
  public:

  // int32 SpriteType = 4;
  void clear_spritetype();
  int32_t spritetype() const;
  void set_spritetype(int32_t value);
  private:
  int32_t _internal_spritetype() const;
  void _internal_set_spritetype(int32_t value);
  public:

  // int32 NormalColor = 5;
  void clear_normalcolor();
  int32_t normalcolor() const;
  void set_normalcolor(int32_t value);
  private:
  int32_t _internal_normalcolor() const;
  void _internal_set_normalcolor(int32_t value);
  public:

  // int32 PressedColor = 6;
  void clear_pressedcolor();
  int32_t pressedcolor() const;
  void set_pressedcolor(int32_t value);
  private:
  int32_t _internal_pressedcolor() const;
  void _internal_set_pressedcolor(int32_t value);
  public:

  // bool IsFEButton = 7;
  void clear_isfebutton();
  bool isfebutton() const;
  void set_isfebutton(bool value);
  private:
  bool _internal_isfebutton() const;
  void _internal_set_isfebutton(bool value);
  public:

  // int32 BorderTop = 8;
  void clear_bordertop();
  int32_t bordertop() const;
  void set_bordertop(int32_t value);
  private:
  int32_t _internal_bordertop() const;
  void _internal_set_bordertop(int32_t value);
  public:

  // int32 BorderBottom = 9;
  void clear_borderbottom();
  int32_t borderbottom() const;
  void set_borderbottom(int32_t value);
  private:
  int32_t _internal_borderbottom() const;
  void _internal_set_borderbottom(int32_t value);
  public:

  // int32 BorderLeft = 10;
  void clear_borderleft();
  int32_t borderleft() const;
  void set_borderleft(int32_t value);
  private:
  int32_t _internal_borderleft() const;
  void _internal_set_borderleft(int32_t value);
  public:

  // int32 BorderRight = 11;
  void clear_borderright();
  int32_t borderright() const;
  void set_borderright(int32_t value);
  private:
  int32_t _internal_borderright() const;
  void _internal_set_borderright(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudButtonData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spritename_;
    ::message::UGCHudWidgetData* widget_;
    int32_t disablecolor_;
    int32_t spritetype_;
    int32_t normalcolor_;
    int32_t pressedcolor_;
    bool isfebutton_;
    int32_t bordertop_;
    int32_t borderbottom_;
    int32_t borderleft_;
    int32_t borderright_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudInputData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudInputData) */ {
 public:
  inline UGCHudInputData() : UGCHudInputData(nullptr) {}
  ~UGCHudInputData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudInputData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudInputData(const UGCHudInputData& from);
  UGCHudInputData(UGCHudInputData&& from) noexcept
    : UGCHudInputData() {
    *this = ::std::move(from);
  }

  inline UGCHudInputData& operator=(const UGCHudInputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudInputData& operator=(UGCHudInputData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudInputData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudInputData* internal_default_instance() {
    return reinterpret_cast<const UGCHudInputData*>(
               &_UGCHudInputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(UGCHudInputData& a, UGCHudInputData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudInputData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudInputData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudInputData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudInputData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudInputData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudInputData& from) {
    UGCHudInputData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudInputData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudInputData";
  }
  protected:
  explicit UGCHudInputData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFontFieldNumber = 2,
    kTextFieldNumber = 12,
    kLocKeyFieldNumber = 17,
    kWidgetFieldNumber = 1,
    kFontSizeFieldNumber = 3,
    kIsBoldFieldNumber = 4,
    kIsItalicFieldNumber = 5,
    kIsUnderlineFieldNumber = 6,
    kAlignmentFieldNumber = 7,
    kAlignmentVerticalFieldNumber = 8,
    kLineSpacingFieldNumber = 9,
    kWordWrapFieldNumber = 10,
    kMaxLengthFieldNumber = 11,
    kTransitionTypeFieldNumber = 13,
    kNormalColorFieldNumber = 14,
    kPressedColorFieldNumber = 15,
    kDisableColorFieldNumber = 16,
  };
  // string Font = 2;
  void clear_font();
  const std::string& font() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_font(ArgT0&& arg0, ArgT... args);
  std::string* mutable_font();
  PROTOBUF_NODISCARD std::string* release_font();
  void set_allocated_font(std::string* font);
  private:
  const std::string& _internal_font() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font(const std::string& value);
  std::string* _internal_mutable_font();
  public:

  // string text = 12;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string LocKey = 17;
  void clear_lockey();
  const std::string& lockey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lockey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lockey();
  PROTOBUF_NODISCARD std::string* release_lockey();
  void set_allocated_lockey(std::string* lockey);
  private:
  const std::string& _internal_lockey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lockey(const std::string& value);
  std::string* _internal_mutable_lockey();
  public:

  // .message.UGCHudWidgetData Widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // int32 FontSize = 3;
  void clear_fontsize();
  int32_t fontsize() const;
  void set_fontsize(int32_t value);
  private:
  int32_t _internal_fontsize() const;
  void _internal_set_fontsize(int32_t value);
  public:

  // bool IsBold = 4;
  void clear_isbold();
  bool isbold() const;
  void set_isbold(bool value);
  private:
  bool _internal_isbold() const;
  void _internal_set_isbold(bool value);
  public:

  // bool IsItalic = 5;
  void clear_isitalic();
  bool isitalic() const;
  void set_isitalic(bool value);
  private:
  bool _internal_isitalic() const;
  void _internal_set_isitalic(bool value);
  public:

  // bool IsUnderline = 6;
  void clear_isunderline();
  bool isunderline() const;
  void set_isunderline(bool value);
  private:
  bool _internal_isunderline() const;
  void _internal_set_isunderline(bool value);
  public:

  // int32 Alignment = 7;
  void clear_alignment();
  int32_t alignment() const;
  void set_alignment(int32_t value);
  private:
  int32_t _internal_alignment() const;
  void _internal_set_alignment(int32_t value);
  public:

  // int32 AlignmentVertical = 8;
  void clear_alignmentvertical();
  int32_t alignmentvertical() const;
  void set_alignmentvertical(int32_t value);
  private:
  int32_t _internal_alignmentvertical() const;
  void _internal_set_alignmentvertical(int32_t value);
  public:

  // float LineSpacing = 9;
  void clear_linespacing();
  float linespacing() const;
  void set_linespacing(float value);
  private:
  float _internal_linespacing() const;
  void _internal_set_linespacing(float value);
  public:

  // int32 WordWrap = 10;
  void clear_wordwrap();
  int32_t wordwrap() const;
  void set_wordwrap(int32_t value);
  private:
  int32_t _internal_wordwrap() const;
  void _internal_set_wordwrap(int32_t value);
  public:

  // int32 MaxLength = 11;
  void clear_maxlength();
  int32_t maxlength() const;
  void set_maxlength(int32_t value);
  private:
  int32_t _internal_maxlength() const;
  void _internal_set_maxlength(int32_t value);
  public:

  // int32 TransitionType = 13;
  void clear_transitiontype();
  int32_t transitiontype() const;
  void set_transitiontype(int32_t value);
  private:
  int32_t _internal_transitiontype() const;
  void _internal_set_transitiontype(int32_t value);
  public:

  // int32 NormalColor = 14;
  void clear_normalcolor();
  int32_t normalcolor() const;
  void set_normalcolor(int32_t value);
  private:
  int32_t _internal_normalcolor() const;
  void _internal_set_normalcolor(int32_t value);
  public:

  // int32 PressedColor = 15;
  void clear_pressedcolor();
  int32_t pressedcolor() const;
  void set_pressedcolor(int32_t value);
  private:
  int32_t _internal_pressedcolor() const;
  void _internal_set_pressedcolor(int32_t value);
  public:

  // int32 DisableColor = 16;
  void clear_disablecolor();
  int32_t disablecolor() const;
  void set_disablecolor(int32_t value);
  private:
  int32_t _internal_disablecolor() const;
  void _internal_set_disablecolor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudInputData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lockey_;
    ::message::UGCHudWidgetData* widget_;
    int32_t fontsize_;
    bool isbold_;
    bool isitalic_;
    bool isunderline_;
    int32_t alignment_;
    int32_t alignmentvertical_;
    float linespacing_;
    int32_t wordwrap_;
    int32_t maxlength_;
    int32_t transitiontype_;
    int32_t normalcolor_;
    int32_t pressedcolor_;
    int32_t disablecolor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudLayoutData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudLayoutData) */ {
 public:
  inline UGCHudLayoutData() : UGCHudLayoutData(nullptr) {}
  ~UGCHudLayoutData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudLayoutData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudLayoutData(const UGCHudLayoutData& from);
  UGCHudLayoutData(UGCHudLayoutData&& from) noexcept
    : UGCHudLayoutData() {
    *this = ::std::move(from);
  }

  inline UGCHudLayoutData& operator=(const UGCHudLayoutData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudLayoutData& operator=(UGCHudLayoutData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudLayoutData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudLayoutData* internal_default_instance() {
    return reinterpret_cast<const UGCHudLayoutData*>(
               &_UGCHudLayoutData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(UGCHudLayoutData& a, UGCHudLayoutData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudLayoutData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudLayoutData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudLayoutData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudLayoutData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudLayoutData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudLayoutData& from) {
    UGCHudLayoutData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudLayoutData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudLayoutData";
  }
  protected:
  explicit UGCHudLayoutData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetFieldNumber = 1,
  };
  // .message.UGCHudWidgetData Widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // @@protoc_insertion_point(class_scope:message.UGCHudLayoutData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCHudWidgetData* widget_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudGridData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudGridData) */ {
 public:
  inline UGCHudGridData() : UGCHudGridData(nullptr) {}
  ~UGCHudGridData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudGridData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudGridData(const UGCHudGridData& from);
  UGCHudGridData(UGCHudGridData&& from) noexcept
    : UGCHudGridData() {
    *this = ::std::move(from);
  }

  inline UGCHudGridData& operator=(const UGCHudGridData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudGridData& operator=(UGCHudGridData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudGridData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudGridData* internal_default_instance() {
    return reinterpret_cast<const UGCHudGridData*>(
               &_UGCHudGridData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(UGCHudGridData& a, UGCHudGridData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudGridData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudGridData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudGridData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudGridData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudGridData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudGridData& from) {
    UGCHudGridData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudGridData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudGridData";
  }
  protected:
  explicit UGCHudGridData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPanelFieldNumber = 1,
    kCellSizeFieldNumber = 5,
    kSpaceFieldNumber = 6,
    kOffsetUpDownFieldNumber = 8,
    kOffsetLeftRightFieldNumber = 9,
    kLayoutTypeFieldNumber = 2,
    kContentOriginFieldNumber = 3,
    kFillDirectionFieldNumber = 4,
    kConstraintFieldNumber = 7,
    kConstraintCountFieldNumber = 10,
  };
  // .message.UGCHudPanelData Panel = 1;
  bool has_panel() const;
  private:
  bool _internal_has_panel() const;
  public:
  void clear_panel();
  const ::message::UGCHudPanelData& panel() const;
  PROTOBUF_NODISCARD ::message::UGCHudPanelData* release_panel();
  ::message::UGCHudPanelData* mutable_panel();
  void set_allocated_panel(::message::UGCHudPanelData* panel);
  private:
  const ::message::UGCHudPanelData& _internal_panel() const;
  ::message::UGCHudPanelData* _internal_mutable_panel();
  public:
  void unsafe_arena_set_allocated_panel(
      ::message::UGCHudPanelData* panel);
  ::message::UGCHudPanelData* unsafe_arena_release_panel();

  // .message.ProtoBuffVector2 CellSize = 5;
  bool has_cellsize() const;
  private:
  bool _internal_has_cellsize() const;
  public:
  void clear_cellsize();
  const ::message::ProtoBuffVector2& cellsize() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_cellsize();
  ::message::ProtoBuffVector2* mutable_cellsize();
  void set_allocated_cellsize(::message::ProtoBuffVector2* cellsize);
  private:
  const ::message::ProtoBuffVector2& _internal_cellsize() const;
  ::message::ProtoBuffVector2* _internal_mutable_cellsize();
  public:
  void unsafe_arena_set_allocated_cellsize(
      ::message::ProtoBuffVector2* cellsize);
  ::message::ProtoBuffVector2* unsafe_arena_release_cellsize();

  // .message.ProtoBuffVector2 Space = 6;
  bool has_space() const;
  private:
  bool _internal_has_space() const;
  public:
  void clear_space();
  const ::message::ProtoBuffVector2& space() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_space();
  ::message::ProtoBuffVector2* mutable_space();
  void set_allocated_space(::message::ProtoBuffVector2* space);
  private:
  const ::message::ProtoBuffVector2& _internal_space() const;
  ::message::ProtoBuffVector2* _internal_mutable_space();
  public:
  void unsafe_arena_set_allocated_space(
      ::message::ProtoBuffVector2* space);
  ::message::ProtoBuffVector2* unsafe_arena_release_space();

  // .message.ProtoBuffVector2 OffsetUpDown = 8;
  bool has_offsetupdown() const;
  private:
  bool _internal_has_offsetupdown() const;
  public:
  void clear_offsetupdown();
  const ::message::ProtoBuffVector2& offsetupdown() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_offsetupdown();
  ::message::ProtoBuffVector2* mutable_offsetupdown();
  void set_allocated_offsetupdown(::message::ProtoBuffVector2* offsetupdown);
  private:
  const ::message::ProtoBuffVector2& _internal_offsetupdown() const;
  ::message::ProtoBuffVector2* _internal_mutable_offsetupdown();
  public:
  void unsafe_arena_set_allocated_offsetupdown(
      ::message::ProtoBuffVector2* offsetupdown);
  ::message::ProtoBuffVector2* unsafe_arena_release_offsetupdown();

  // .message.ProtoBuffVector2 OffsetLeftRight = 9;
  bool has_offsetleftright() const;
  private:
  bool _internal_has_offsetleftright() const;
  public:
  void clear_offsetleftright();
  const ::message::ProtoBuffVector2& offsetleftright() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_offsetleftright();
  ::message::ProtoBuffVector2* mutable_offsetleftright();
  void set_allocated_offsetleftright(::message::ProtoBuffVector2* offsetleftright);
  private:
  const ::message::ProtoBuffVector2& _internal_offsetleftright() const;
  ::message::ProtoBuffVector2* _internal_mutable_offsetleftright();
  public:
  void unsafe_arena_set_allocated_offsetleftright(
      ::message::ProtoBuffVector2* offsetleftright);
  ::message::ProtoBuffVector2* unsafe_arena_release_offsetleftright();

  // int32 LayoutType = 2;
  void clear_layouttype();
  int32_t layouttype() const;
  void set_layouttype(int32_t value);
  private:
  int32_t _internal_layouttype() const;
  void _internal_set_layouttype(int32_t value);
  public:

  // int32 ContentOrigin = 3;
  void clear_contentorigin();
  int32_t contentorigin() const;
  void set_contentorigin(int32_t value);
  private:
  int32_t _internal_contentorigin() const;
  void _internal_set_contentorigin(int32_t value);
  public:

  // int32 FillDirection = 4;
  void clear_filldirection();
  int32_t filldirection() const;
  void set_filldirection(int32_t value);
  private:
  int32_t _internal_filldirection() const;
  void _internal_set_filldirection(int32_t value);
  public:

  // int32 Constraint = 7;
  void clear_constraint();
  int32_t constraint() const;
  void set_constraint(int32_t value);
  private:
  int32_t _internal_constraint() const;
  void _internal_set_constraint(int32_t value);
  public:

  // int32 ConstraintCount = 10;
  void clear_constraintcount();
  int32_t constraintcount() const;
  void set_constraintcount(int32_t value);
  private:
  int32_t _internal_constraintcount() const;
  void _internal_set_constraintcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudGridData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCHudPanelData* panel_;
    ::message::ProtoBuffVector2* cellsize_;
    ::message::ProtoBuffVector2* space_;
    ::message::ProtoBuffVector2* offsetupdown_;
    ::message::ProtoBuffVector2* offsetleftright_;
    int32_t layouttype_;
    int32_t contentorigin_;
    int32_t filldirection_;
    int32_t constraint_;
    int32_t constraintcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudLayoutNewData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudLayoutNewData) */ {
 public:
  inline UGCHudLayoutNewData() : UGCHudLayoutNewData(nullptr) {}
  ~UGCHudLayoutNewData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudLayoutNewData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudLayoutNewData(const UGCHudLayoutNewData& from);
  UGCHudLayoutNewData(UGCHudLayoutNewData&& from) noexcept
    : UGCHudLayoutNewData() {
    *this = ::std::move(from);
  }

  inline UGCHudLayoutNewData& operator=(const UGCHudLayoutNewData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudLayoutNewData& operator=(UGCHudLayoutNewData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudLayoutNewData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudLayoutNewData* internal_default_instance() {
    return reinterpret_cast<const UGCHudLayoutNewData*>(
               &_UGCHudLayoutNewData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(UGCHudLayoutNewData& a, UGCHudLayoutNewData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudLayoutNewData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudLayoutNewData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudLayoutNewData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudLayoutNewData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudLayoutNewData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudLayoutNewData& from) {
    UGCHudLayoutNewData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudLayoutNewData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudLayoutNewData";
  }
  protected:
  explicit UGCHudLayoutNewData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetFieldNumber = 1,
    kCellSizeFieldNumber = 5,
    kSpaceFieldNumber = 6,
    kOffsetUpDownFieldNumber = 8,
    kOffsetLeftRightFieldNumber = 9,
    kLayoutTypeFieldNumber = 2,
    kContentOriginFieldNumber = 3,
    kFillDirectionFieldNumber = 4,
    kConstraintFieldNumber = 7,
    kConstraintCountFieldNumber = 10,
  };
  // .message.UGCHudWidgetData Widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // .message.ProtoBuffVector2 CellSize = 5;
  bool has_cellsize() const;
  private:
  bool _internal_has_cellsize() const;
  public:
  void clear_cellsize();
  const ::message::ProtoBuffVector2& cellsize() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_cellsize();
  ::message::ProtoBuffVector2* mutable_cellsize();
  void set_allocated_cellsize(::message::ProtoBuffVector2* cellsize);
  private:
  const ::message::ProtoBuffVector2& _internal_cellsize() const;
  ::message::ProtoBuffVector2* _internal_mutable_cellsize();
  public:
  void unsafe_arena_set_allocated_cellsize(
      ::message::ProtoBuffVector2* cellsize);
  ::message::ProtoBuffVector2* unsafe_arena_release_cellsize();

  // .message.ProtoBuffVector2 Space = 6;
  bool has_space() const;
  private:
  bool _internal_has_space() const;
  public:
  void clear_space();
  const ::message::ProtoBuffVector2& space() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_space();
  ::message::ProtoBuffVector2* mutable_space();
  void set_allocated_space(::message::ProtoBuffVector2* space);
  private:
  const ::message::ProtoBuffVector2& _internal_space() const;
  ::message::ProtoBuffVector2* _internal_mutable_space();
  public:
  void unsafe_arena_set_allocated_space(
      ::message::ProtoBuffVector2* space);
  ::message::ProtoBuffVector2* unsafe_arena_release_space();

  // .message.ProtoBuffVector2 OffsetUpDown = 8;
  bool has_offsetupdown() const;
  private:
  bool _internal_has_offsetupdown() const;
  public:
  void clear_offsetupdown();
  const ::message::ProtoBuffVector2& offsetupdown() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_offsetupdown();
  ::message::ProtoBuffVector2* mutable_offsetupdown();
  void set_allocated_offsetupdown(::message::ProtoBuffVector2* offsetupdown);
  private:
  const ::message::ProtoBuffVector2& _internal_offsetupdown() const;
  ::message::ProtoBuffVector2* _internal_mutable_offsetupdown();
  public:
  void unsafe_arena_set_allocated_offsetupdown(
      ::message::ProtoBuffVector2* offsetupdown);
  ::message::ProtoBuffVector2* unsafe_arena_release_offsetupdown();

  // .message.ProtoBuffVector2 OffsetLeftRight = 9;
  bool has_offsetleftright() const;
  private:
  bool _internal_has_offsetleftright() const;
  public:
  void clear_offsetleftright();
  const ::message::ProtoBuffVector2& offsetleftright() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_offsetleftright();
  ::message::ProtoBuffVector2* mutable_offsetleftright();
  void set_allocated_offsetleftright(::message::ProtoBuffVector2* offsetleftright);
  private:
  const ::message::ProtoBuffVector2& _internal_offsetleftright() const;
  ::message::ProtoBuffVector2* _internal_mutable_offsetleftright();
  public:
  void unsafe_arena_set_allocated_offsetleftright(
      ::message::ProtoBuffVector2* offsetleftright);
  ::message::ProtoBuffVector2* unsafe_arena_release_offsetleftright();

  // int32 LayoutType = 2;
  void clear_layouttype();
  int32_t layouttype() const;
  void set_layouttype(int32_t value);
  private:
  int32_t _internal_layouttype() const;
  void _internal_set_layouttype(int32_t value);
  public:

  // int32 ContentOrigin = 3;
  void clear_contentorigin();
  int32_t contentorigin() const;
  void set_contentorigin(int32_t value);
  private:
  int32_t _internal_contentorigin() const;
  void _internal_set_contentorigin(int32_t value);
  public:

  // int32 FillDirection = 4;
  void clear_filldirection();
  int32_t filldirection() const;
  void set_filldirection(int32_t value);
  private:
  int32_t _internal_filldirection() const;
  void _internal_set_filldirection(int32_t value);
  public:

  // int32 Constraint = 7;
  void clear_constraint();
  int32_t constraint() const;
  void set_constraint(int32_t value);
  private:
  int32_t _internal_constraint() const;
  void _internal_set_constraint(int32_t value);
  public:

  // int32 ConstraintCount = 10;
  void clear_constraintcount();
  int32_t constraintcount() const;
  void set_constraintcount(int32_t value);
  private:
  int32_t _internal_constraintcount() const;
  void _internal_set_constraintcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudLayoutNewData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCHudWidgetData* widget_;
    ::message::ProtoBuffVector2* cellsize_;
    ::message::ProtoBuffVector2* space_;
    ::message::ProtoBuffVector2* offsetupdown_;
    ::message::ProtoBuffVector2* offsetleftright_;
    int32_t layouttype_;
    int32_t contentorigin_;
    int32_t filldirection_;
    int32_t constraint_;
    int32_t constraintcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudPanelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudPanelData) */ {
 public:
  inline UGCHudPanelData() : UGCHudPanelData(nullptr) {}
  ~UGCHudPanelData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudPanelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudPanelData(const UGCHudPanelData& from);
  UGCHudPanelData(UGCHudPanelData&& from) noexcept
    : UGCHudPanelData() {
    *this = ::std::move(from);
  }

  inline UGCHudPanelData& operator=(const UGCHudPanelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudPanelData& operator=(UGCHudPanelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudPanelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudPanelData* internal_default_instance() {
    return reinterpret_cast<const UGCHudPanelData*>(
               &_UGCHudPanelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(UGCHudPanelData& a, UGCHudPanelData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudPanelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudPanelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudPanelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudPanelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudPanelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudPanelData& from) {
    UGCHudPanelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudPanelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudPanelData";
  }
  protected:
  explicit UGCHudPanelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgNameFieldNumber = 5,
    kMaskNameFieldNumber = 9,
    kBgSizeDeltaFieldNumber = 7,
    kSoftnessFieldNumber = 10,
    kAnchorMinFieldNumber = 11,
    kAnchorMaxFieldNumber = 12,
    kSizeDeltaFieldNumber = 13,
    kPivotFieldNumber = 14,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kDepthFieldNumber = 3,
    kBgFillFieldNumber = 4,
    kBgColorFieldNumber = 6,
    kClippingTypeFieldNumber = 8,
    kBgAlphaFieldNumber = 15,
  };
  // string BgName = 5;
  void clear_bgname();
  const std::string& bgname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgname();
  PROTOBUF_NODISCARD std::string* release_bgname();
  void set_allocated_bgname(std::string* bgname);
  private:
  const std::string& _internal_bgname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgname(const std::string& value);
  std::string* _internal_mutable_bgname();
  public:

  // string MaskName = 9;
  void clear_maskname();
  const std::string& maskname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maskname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maskname();
  PROTOBUF_NODISCARD std::string* release_maskname();
  void set_allocated_maskname(std::string* maskname);
  private:
  const std::string& _internal_maskname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maskname(const std::string& value);
  std::string* _internal_mutable_maskname();
  public:

  // .message.ProtoBuffVector2 BgSizeDelta = 7;
  bool has_bgsizedelta() const;
  private:
  bool _internal_has_bgsizedelta() const;
  public:
  void clear_bgsizedelta();
  const ::message::ProtoBuffVector2& bgsizedelta() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_bgsizedelta();
  ::message::ProtoBuffVector2* mutable_bgsizedelta();
  void set_allocated_bgsizedelta(::message::ProtoBuffVector2* bgsizedelta);
  private:
  const ::message::ProtoBuffVector2& _internal_bgsizedelta() const;
  ::message::ProtoBuffVector2* _internal_mutable_bgsizedelta();
  public:
  void unsafe_arena_set_allocated_bgsizedelta(
      ::message::ProtoBuffVector2* bgsizedelta);
  ::message::ProtoBuffVector2* unsafe_arena_release_bgsizedelta();

  // .message.ProtoBuffVector2 Softness = 10;
  bool has_softness() const;
  private:
  bool _internal_has_softness() const;
  public:
  void clear_softness();
  const ::message::ProtoBuffVector2& softness() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_softness();
  ::message::ProtoBuffVector2* mutable_softness();
  void set_allocated_softness(::message::ProtoBuffVector2* softness);
  private:
  const ::message::ProtoBuffVector2& _internal_softness() const;
  ::message::ProtoBuffVector2* _internal_mutable_softness();
  public:
  void unsafe_arena_set_allocated_softness(
      ::message::ProtoBuffVector2* softness);
  ::message::ProtoBuffVector2* unsafe_arena_release_softness();

  // .message.ProtoBuffVector2 AnchorMin = 11;
  bool has_anchormin() const;
  private:
  bool _internal_has_anchormin() const;
  public:
  void clear_anchormin();
  const ::message::ProtoBuffVector2& anchormin() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_anchormin();
  ::message::ProtoBuffVector2* mutable_anchormin();
  void set_allocated_anchormin(::message::ProtoBuffVector2* anchormin);
  private:
  const ::message::ProtoBuffVector2& _internal_anchormin() const;
  ::message::ProtoBuffVector2* _internal_mutable_anchormin();
  public:
  void unsafe_arena_set_allocated_anchormin(
      ::message::ProtoBuffVector2* anchormin);
  ::message::ProtoBuffVector2* unsafe_arena_release_anchormin();

  // .message.ProtoBuffVector2 AnchorMax = 12;
  bool has_anchormax() const;
  private:
  bool _internal_has_anchormax() const;
  public:
  void clear_anchormax();
  const ::message::ProtoBuffVector2& anchormax() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_anchormax();
  ::message::ProtoBuffVector2* mutable_anchormax();
  void set_allocated_anchormax(::message::ProtoBuffVector2* anchormax);
  private:
  const ::message::ProtoBuffVector2& _internal_anchormax() const;
  ::message::ProtoBuffVector2* _internal_mutable_anchormax();
  public:
  void unsafe_arena_set_allocated_anchormax(
      ::message::ProtoBuffVector2* anchormax);
  ::message::ProtoBuffVector2* unsafe_arena_release_anchormax();

  // .message.ProtoBuffVector2 SizeDelta = 13;
  bool has_sizedelta() const;
  private:
  bool _internal_has_sizedelta() const;
  public:
  void clear_sizedelta();
  const ::message::ProtoBuffVector2& sizedelta() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_sizedelta();
  ::message::ProtoBuffVector2* mutable_sizedelta();
  void set_allocated_sizedelta(::message::ProtoBuffVector2* sizedelta);
  private:
  const ::message::ProtoBuffVector2& _internal_sizedelta() const;
  ::message::ProtoBuffVector2* _internal_mutable_sizedelta();
  public:
  void unsafe_arena_set_allocated_sizedelta(
      ::message::ProtoBuffVector2* sizedelta);
  ::message::ProtoBuffVector2* unsafe_arena_release_sizedelta();

  // .message.ProtoBuffVector2 Pivot = 14;
  bool has_pivot() const;
  private:
  bool _internal_has_pivot() const;
  public:
  void clear_pivot();
  const ::message::ProtoBuffVector2& pivot() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_pivot();
  ::message::ProtoBuffVector2* mutable_pivot();
  void set_allocated_pivot(::message::ProtoBuffVector2* pivot);
  private:
  const ::message::ProtoBuffVector2& _internal_pivot() const;
  ::message::ProtoBuffVector2* _internal_mutable_pivot();
  public:
  void unsafe_arena_set_allocated_pivot(
      ::message::ProtoBuffVector2* pivot);
  ::message::ProtoBuffVector2* unsafe_arena_release_pivot();

  // int32 Width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 Height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 Depth = 3;
  void clear_depth();
  int32_t depth() const;
  void set_depth(int32_t value);
  private:
  int32_t _internal_depth() const;
  void _internal_set_depth(int32_t value);
  public:

  // bool BgFill = 4;
  void clear_bgfill();
  bool bgfill() const;
  void set_bgfill(bool value);
  private:
  bool _internal_bgfill() const;
  void _internal_set_bgfill(bool value);
  public:

  // int32 BgColor = 6;
  void clear_bgcolor();
  int32_t bgcolor() const;
  void set_bgcolor(int32_t value);
  private:
  int32_t _internal_bgcolor() const;
  void _internal_set_bgcolor(int32_t value);
  public:

  // int32 ClippingType = 8;
  void clear_clippingtype();
  int32_t clippingtype() const;
  void set_clippingtype(int32_t value);
  private:
  int32_t _internal_clippingtype() const;
  void _internal_set_clippingtype(int32_t value);
  public:

  // float BgAlpha = 15;
  void clear_bgalpha();
  float bgalpha() const;
  void set_bgalpha(float value);
  private:
  float _internal_bgalpha() const;
  void _internal_set_bgalpha(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudPanelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maskname_;
    ::message::ProtoBuffVector2* bgsizedelta_;
    ::message::ProtoBuffVector2* softness_;
    ::message::ProtoBuffVector2* anchormin_;
    ::message::ProtoBuffVector2* anchormax_;
    ::message::ProtoBuffVector2* sizedelta_;
    ::message::ProtoBuffVector2* pivot_;
    int32_t width_;
    int32_t height_;
    int32_t depth_;
    bool bgfill_;
    int32_t bgcolor_;
    int32_t clippingtype_;
    float bgalpha_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudScrollViewData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudScrollViewData) */ {
 public:
  inline UGCHudScrollViewData() : UGCHudScrollViewData(nullptr) {}
  ~UGCHudScrollViewData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudScrollViewData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudScrollViewData(const UGCHudScrollViewData& from);
  UGCHudScrollViewData(UGCHudScrollViewData&& from) noexcept
    : UGCHudScrollViewData() {
    *this = ::std::move(from);
  }

  inline UGCHudScrollViewData& operator=(const UGCHudScrollViewData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudScrollViewData& operator=(UGCHudScrollViewData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudScrollViewData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudScrollViewData* internal_default_instance() {
    return reinterpret_cast<const UGCHudScrollViewData*>(
               &_UGCHudScrollViewData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(UGCHudScrollViewData& a, UGCHudScrollViewData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudScrollViewData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudScrollViewData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudScrollViewData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudScrollViewData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudScrollViewData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudScrollViewData& from) {
    UGCHudScrollViewData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudScrollViewData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudScrollViewData";
  }
  protected:
  explicit UGCHudScrollViewData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPanelFieldNumber = 1,
    kCustomXYFieldNumber = 4,
    kContentOriginFieldNumber = 2,
    kScrollDirectionFieldNumber = 3,
    kDragEffectFieldNumber = 5,
    kScrollWheelFactorFieldNumber = 6,
    kMomentumAmountFieldNumber = 7,
    kRestrictWithinPanelFieldNumber = 8,
    kSmoothDragStartFieldNumber = 9,
    kCancelDragIfFitsFieldNumber = 10,
    kVerticalBarFieldNumber = 11,
    kHorizontalBarFieldNumber = 12,
  };
  // .message.UGCHudPanelData Panel = 1;
  bool has_panel() const;
  private:
  bool _internal_has_panel() const;
  public:
  void clear_panel();
  const ::message::UGCHudPanelData& panel() const;
  PROTOBUF_NODISCARD ::message::UGCHudPanelData* release_panel();
  ::message::UGCHudPanelData* mutable_panel();
  void set_allocated_panel(::message::UGCHudPanelData* panel);
  private:
  const ::message::UGCHudPanelData& _internal_panel() const;
  ::message::UGCHudPanelData* _internal_mutable_panel();
  public:
  void unsafe_arena_set_allocated_panel(
      ::message::UGCHudPanelData* panel);
  ::message::UGCHudPanelData* unsafe_arena_release_panel();

  // .message.ProtoBuffVector2 CustomXY = 4;
  bool has_customxy() const;
  private:
  bool _internal_has_customxy() const;
  public:
  void clear_customxy();
  const ::message::ProtoBuffVector2& customxy() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_customxy();
  ::message::ProtoBuffVector2* mutable_customxy();
  void set_allocated_customxy(::message::ProtoBuffVector2* customxy);
  private:
  const ::message::ProtoBuffVector2& _internal_customxy() const;
  ::message::ProtoBuffVector2* _internal_mutable_customxy();
  public:
  void unsafe_arena_set_allocated_customxy(
      ::message::ProtoBuffVector2* customxy);
  ::message::ProtoBuffVector2* unsafe_arena_release_customxy();

  // int32 ContentOrigin = 2;
  void clear_contentorigin();
  int32_t contentorigin() const;
  void set_contentorigin(int32_t value);
  private:
  int32_t _internal_contentorigin() const;
  void _internal_set_contentorigin(int32_t value);
  public:

  // int32 ScrollDirection = 3;
  void clear_scrolldirection();
  int32_t scrolldirection() const;
  void set_scrolldirection(int32_t value);
  private:
  int32_t _internal_scrolldirection() const;
  void _internal_set_scrolldirection(int32_t value);
  public:

  // int32 DragEffect = 5;
  void clear_drageffect();
  int32_t drageffect() const;
  void set_drageffect(int32_t value);
  private:
  int32_t _internal_drageffect() const;
  void _internal_set_drageffect(int32_t value);
  public:

  // float ScrollWheelFactor = 6;
  void clear_scrollwheelfactor();
  float scrollwheelfactor() const;
  void set_scrollwheelfactor(float value);
  private:
  float _internal_scrollwheelfactor() const;
  void _internal_set_scrollwheelfactor(float value);
  public:

  // float MomentumAmount = 7;
  void clear_momentumamount();
  float momentumamount() const;
  void set_momentumamount(float value);
  private:
  float _internal_momentumamount() const;
  void _internal_set_momentumamount(float value);
  public:

  // bool RestrictWithinPanel = 8;
  void clear_restrictwithinpanel();
  bool restrictwithinpanel() const;
  void set_restrictwithinpanel(bool value);
  private:
  bool _internal_restrictwithinpanel() const;
  void _internal_set_restrictwithinpanel(bool value);
  public:

  // bool SmoothDragStart = 9;
  void clear_smoothdragstart();
  bool smoothdragstart() const;
  void set_smoothdragstart(bool value);
  private:
  bool _internal_smoothdragstart() const;
  void _internal_set_smoothdragstart(bool value);
  public:

  // bool CancelDragIfFits = 10;
  void clear_canceldragiffits();
  bool canceldragiffits() const;
  void set_canceldragiffits(bool value);
  private:
  bool _internal_canceldragiffits() const;
  void _internal_set_canceldragiffits(bool value);
  public:

  // int32 VerticalBar = 11;
  void clear_verticalbar();
  int32_t verticalbar() const;
  void set_verticalbar(int32_t value);
  private:
  int32_t _internal_verticalbar() const;
  void _internal_set_verticalbar(int32_t value);
  public:

  // int32 HorizontalBar = 12;
  void clear_horizontalbar();
  int32_t horizontalbar() const;
  void set_horizontalbar(int32_t value);
  private:
  int32_t _internal_horizontalbar() const;
  void _internal_set_horizontalbar(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudScrollViewData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCHudPanelData* panel_;
    ::message::ProtoBuffVector2* customxy_;
    int32_t contentorigin_;
    int32_t scrolldirection_;
    int32_t drageffect_;
    float scrollwheelfactor_;
    float momentumamount_;
    bool restrictwithinpanel_;
    bool smoothdragstart_;
    bool canceldragiffits_;
    int32_t verticalbar_;
    int32_t horizontalbar_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHud3DContainerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHud3DContainerData) */ {
 public:
  inline UGCHud3DContainerData() : UGCHud3DContainerData(nullptr) {}
  ~UGCHud3DContainerData() override;
  explicit PROTOBUF_CONSTEXPR UGCHud3DContainerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHud3DContainerData(const UGCHud3DContainerData& from);
  UGCHud3DContainerData(UGCHud3DContainerData&& from) noexcept
    : UGCHud3DContainerData() {
    *this = ::std::move(from);
  }

  inline UGCHud3DContainerData& operator=(const UGCHud3DContainerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHud3DContainerData& operator=(UGCHud3DContainerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHud3DContainerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHud3DContainerData* internal_default_instance() {
    return reinterpret_cast<const UGCHud3DContainerData*>(
               &_UGCHud3DContainerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(UGCHud3DContainerData& a, UGCHud3DContainerData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHud3DContainerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHud3DContainerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHud3DContainerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHud3DContainerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHud3DContainerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHud3DContainerData& from) {
    UGCHud3DContainerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHud3DContainerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHud3DContainerData";
  }
  protected:
  explicit UGCHud3DContainerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceIDFieldNumber = 2,
    kWidgetFieldNumber = 1,
    kScaleFieldNumber = 3,
    kRotationFieldNumber = 4,
  };
  // string ResourceID = 2;
  void clear_resourceid();
  const std::string& resourceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resourceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resourceid();
  PROTOBUF_NODISCARD std::string* release_resourceid();
  void set_allocated_resourceid(std::string* resourceid);
  private:
  const std::string& _internal_resourceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resourceid(const std::string& value);
  std::string* _internal_mutable_resourceid();
  public:

  // .message.UGCHudWidgetData Widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // .message.ProtoBuffVector3 Scale = 3;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::message::ProtoBuffVector3& scale() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_scale();
  ::message::ProtoBuffVector3* mutable_scale();
  void set_allocated_scale(::message::ProtoBuffVector3* scale);
  private:
  const ::message::ProtoBuffVector3& _internal_scale() const;
  ::message::ProtoBuffVector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::message::ProtoBuffVector3* scale);
  ::message::ProtoBuffVector3* unsafe_arena_release_scale();

  // .message.ProtoBuffVector3 Rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::message::ProtoBuffVector3& rotation() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_rotation();
  ::message::ProtoBuffVector3* mutable_rotation();
  void set_allocated_rotation(::message::ProtoBuffVector3* rotation);
  private:
  const ::message::ProtoBuffVector3& _internal_rotation() const;
  ::message::ProtoBuffVector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::message::ProtoBuffVector3* rotation);
  ::message::ProtoBuffVector3* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:message.UGCHud3DContainerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourceid_;
    ::message::UGCHudWidgetData* widget_;
    ::message::ProtoBuffVector3* scale_;
    ::message::ProtoBuffVector3* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudTextureData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudTextureData) */ {
 public:
  inline UGCHudTextureData() : UGCHudTextureData(nullptr) {}
  ~UGCHudTextureData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudTextureData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudTextureData(const UGCHudTextureData& from);
  UGCHudTextureData(UGCHudTextureData&& from) noexcept
    : UGCHudTextureData() {
    *this = ::std::move(from);
  }

  inline UGCHudTextureData& operator=(const UGCHudTextureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudTextureData& operator=(UGCHudTextureData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudTextureData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudTextureData* internal_default_instance() {
    return reinterpret_cast<const UGCHudTextureData*>(
               &_UGCHudTextureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(UGCHudTextureData& a, UGCHudTextureData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudTextureData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudTextureData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudTextureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudTextureData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudTextureData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudTextureData& from) {
    UGCHudTextureData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudTextureData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudTextureData";
  }
  protected:
  explicit UGCHudTextureData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextureNameFieldNumber = 2,
    kShaderNameFieldNumber = 3,
    kWidgetFieldNumber = 1,
    kUVRectXYFieldNumber = 4,
    kUVRectWHFieldNumber = 5,
    kBorderLRFieldNumber = 7,
    kBorderTBFieldNumber = 8,
    kFillTypeFieldNumber = 6,
    kFillDirFieldNumber = 10,
    kCenterInvisibleFieldNumber = 9,
    kInvertFillFieldNumber = 12,
    kFillAmountFieldNumber = 11,
    kFlipFieldNumber = 13,
    kGradientFieldNumber = 14,
    kGradientTopFieldNumber = 15,
    kGradientBottomFieldNumber = 16,
  };
  // string TextureName = 2;
  void clear_texturename();
  const std::string& texturename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_texturename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_texturename();
  PROTOBUF_NODISCARD std::string* release_texturename();
  void set_allocated_texturename(std::string* texturename);
  private:
  const std::string& _internal_texturename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texturename(const std::string& value);
  std::string* _internal_mutable_texturename();
  public:

  // string ShaderName = 3;
  void clear_shadername();
  const std::string& shadername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shadername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shadername();
  PROTOBUF_NODISCARD std::string* release_shadername();
  void set_allocated_shadername(std::string* shadername);
  private:
  const std::string& _internal_shadername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shadername(const std::string& value);
  std::string* _internal_mutable_shadername();
  public:

  // .message.UGCHudWidgetData Widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // .message.ProtoBuffVector2 UVRectXY = 4;
  bool has_uvrectxy() const;
  private:
  bool _internal_has_uvrectxy() const;
  public:
  void clear_uvrectxy();
  const ::message::ProtoBuffVector2& uvrectxy() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_uvrectxy();
  ::message::ProtoBuffVector2* mutable_uvrectxy();
  void set_allocated_uvrectxy(::message::ProtoBuffVector2* uvrectxy);
  private:
  const ::message::ProtoBuffVector2& _internal_uvrectxy() const;
  ::message::ProtoBuffVector2* _internal_mutable_uvrectxy();
  public:
  void unsafe_arena_set_allocated_uvrectxy(
      ::message::ProtoBuffVector2* uvrectxy);
  ::message::ProtoBuffVector2* unsafe_arena_release_uvrectxy();

  // .message.ProtoBuffVector2 UVRectWH = 5;
  bool has_uvrectwh() const;
  private:
  bool _internal_has_uvrectwh() const;
  public:
  void clear_uvrectwh();
  const ::message::ProtoBuffVector2& uvrectwh() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_uvrectwh();
  ::message::ProtoBuffVector2* mutable_uvrectwh();
  void set_allocated_uvrectwh(::message::ProtoBuffVector2* uvrectwh);
  private:
  const ::message::ProtoBuffVector2& _internal_uvrectwh() const;
  ::message::ProtoBuffVector2* _internal_mutable_uvrectwh();
  public:
  void unsafe_arena_set_allocated_uvrectwh(
      ::message::ProtoBuffVector2* uvrectwh);
  ::message::ProtoBuffVector2* unsafe_arena_release_uvrectwh();

  // .message.ProtoBuffVector2 BorderLR = 7;
  bool has_borderlr() const;
  private:
  bool _internal_has_borderlr() const;
  public:
  void clear_borderlr();
  const ::message::ProtoBuffVector2& borderlr() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_borderlr();
  ::message::ProtoBuffVector2* mutable_borderlr();
  void set_allocated_borderlr(::message::ProtoBuffVector2* borderlr);
  private:
  const ::message::ProtoBuffVector2& _internal_borderlr() const;
  ::message::ProtoBuffVector2* _internal_mutable_borderlr();
  public:
  void unsafe_arena_set_allocated_borderlr(
      ::message::ProtoBuffVector2* borderlr);
  ::message::ProtoBuffVector2* unsafe_arena_release_borderlr();

  // .message.ProtoBuffVector2 BorderTB = 8;
  bool has_bordertb() const;
  private:
  bool _internal_has_bordertb() const;
  public:
  void clear_bordertb();
  const ::message::ProtoBuffVector2& bordertb() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_bordertb();
  ::message::ProtoBuffVector2* mutable_bordertb();
  void set_allocated_bordertb(::message::ProtoBuffVector2* bordertb);
  private:
  const ::message::ProtoBuffVector2& _internal_bordertb() const;
  ::message::ProtoBuffVector2* _internal_mutable_bordertb();
  public:
  void unsafe_arena_set_allocated_bordertb(
      ::message::ProtoBuffVector2* bordertb);
  ::message::ProtoBuffVector2* unsafe_arena_release_bordertb();

  // int32 FillType = 6;
  void clear_filltype();
  int32_t filltype() const;
  void set_filltype(int32_t value);
  private:
  int32_t _internal_filltype() const;
  void _internal_set_filltype(int32_t value);
  public:

  // int32 FillDir = 10;
  void clear_filldir();
  int32_t filldir() const;
  void set_filldir(int32_t value);
  private:
  int32_t _internal_filldir() const;
  void _internal_set_filldir(int32_t value);
  public:

  // bool CenterInvisible = 9;
  void clear_centerinvisible();
  bool centerinvisible() const;
  void set_centerinvisible(bool value);
  private:
  bool _internal_centerinvisible() const;
  void _internal_set_centerinvisible(bool value);
  public:

  // bool InvertFill = 12;
  void clear_invertfill();
  bool invertfill() const;
  void set_invertfill(bool value);
  private:
  bool _internal_invertfill() const;
  void _internal_set_invertfill(bool value);
  public:

  // float FillAmount = 11;
  void clear_fillamount();
  float fillamount() const;
  void set_fillamount(float value);
  private:
  float _internal_fillamount() const;
  void _internal_set_fillamount(float value);
  public:

  // int32 Flip = 13;
  void clear_flip();
  int32_t flip() const;
  void set_flip(int32_t value);
  private:
  int32_t _internal_flip() const;
  void _internal_set_flip(int32_t value);
  public:

  // int32 Gradient = 14;
  void clear_gradient();
  int32_t gradient() const;
  void set_gradient(int32_t value);
  private:
  int32_t _internal_gradient() const;
  void _internal_set_gradient(int32_t value);
  public:

  // int32 GradientTop = 15;
  void clear_gradienttop();
  int32_t gradienttop() const;
  void set_gradienttop(int32_t value);
  private:
  int32_t _internal_gradienttop() const;
  void _internal_set_gradienttop(int32_t value);
  public:

  // int32 GradientBottom = 16;
  void clear_gradientbottom();
  int32_t gradientbottom() const;
  void set_gradientbottom(int32_t value);
  private:
  int32_t _internal_gradientbottom() const;
  void _internal_set_gradientbottom(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudTextureData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texturename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shadername_;
    ::message::UGCHudWidgetData* widget_;
    ::message::ProtoBuffVector2* uvrectxy_;
    ::message::ProtoBuffVector2* uvrectwh_;
    ::message::ProtoBuffVector2* borderlr_;
    ::message::ProtoBuffVector2* bordertb_;
    int32_t filltype_;
    int32_t filldir_;
    bool centerinvisible_;
    bool invertfill_;
    float fillamount_;
    int32_t flip_;
    int32_t gradient_;
    int32_t gradienttop_;
    int32_t gradientbottom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudProfileInfoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudProfileInfoData) */ {
 public:
  inline UGCHudProfileInfoData() : UGCHudProfileInfoData(nullptr) {}
  ~UGCHudProfileInfoData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudProfileInfoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudProfileInfoData(const UGCHudProfileInfoData& from);
  UGCHudProfileInfoData(UGCHudProfileInfoData&& from) noexcept
    : UGCHudProfileInfoData() {
    *this = ::std::move(from);
  }

  inline UGCHudProfileInfoData& operator=(const UGCHudProfileInfoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudProfileInfoData& operator=(UGCHudProfileInfoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudProfileInfoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudProfileInfoData* internal_default_instance() {
    return reinterpret_cast<const UGCHudProfileInfoData*>(
               &_UGCHudProfileInfoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(UGCHudProfileInfoData& a, UGCHudProfileInfoData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudProfileInfoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudProfileInfoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudProfileInfoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudProfileInfoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudProfileInfoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudProfileInfoData& from) {
    UGCHudProfileInfoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudProfileInfoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudProfileInfoData";
  }
  protected:
  explicit UGCHudProfileInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetFieldNumber = 1,
    kScaleFieldNumber = 2,
    kShowTypeFieldNumber = 3,
    kShowRankFieldNumber = 5,
    kShowPinFieldNumber = 4,
    kShowNameFieldNumber = 6,
  };
  // .message.UGCHudWidgetData Widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // .message.ProtoBuffVector3 Scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::message::ProtoBuffVector3& scale() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_scale();
  ::message::ProtoBuffVector3* mutable_scale();
  void set_allocated_scale(::message::ProtoBuffVector3* scale);
  private:
  const ::message::ProtoBuffVector3& _internal_scale() const;
  ::message::ProtoBuffVector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::message::ProtoBuffVector3* scale);
  ::message::ProtoBuffVector3* unsafe_arena_release_scale();

  // int32 ShowType = 3;
  void clear_showtype();
  int32_t showtype() const;
  void set_showtype(int32_t value);
  private:
  int32_t _internal_showtype() const;
  void _internal_set_showtype(int32_t value);
  public:

  // int32 ShowRank = 5;
  void clear_showrank();
  int32_t showrank() const;
  void set_showrank(int32_t value);
  private:
  int32_t _internal_showrank() const;
  void _internal_set_showrank(int32_t value);
  public:

  // bool ShowPin = 4;
  void clear_showpin();
  bool showpin() const;
  void set_showpin(bool value);
  private:
  bool _internal_showpin() const;
  void _internal_set_showpin(bool value);
  public:

  // bool ShowName = 6;
  void clear_showname();
  bool showname() const;
  void set_showname(bool value);
  private:
  bool _internal_showname() const;
  void _internal_set_showname(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudProfileInfoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCHudWidgetData* widget_;
    ::message::ProtoBuffVector3* scale_;
    int32_t showtype_;
    int32_t showrank_;
    bool showpin_;
    bool showname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudGameObjectCommonData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudGameObjectCommonData) */ {
 public:
  inline UGCHudGameObjectCommonData() : UGCHudGameObjectCommonData(nullptr) {}
  ~UGCHudGameObjectCommonData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudGameObjectCommonData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudGameObjectCommonData(const UGCHudGameObjectCommonData& from);
  UGCHudGameObjectCommonData(UGCHudGameObjectCommonData&& from) noexcept
    : UGCHudGameObjectCommonData() {
    *this = ::std::move(from);
  }

  inline UGCHudGameObjectCommonData& operator=(const UGCHudGameObjectCommonData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudGameObjectCommonData& operator=(UGCHudGameObjectCommonData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudGameObjectCommonData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudGameObjectCommonData* internal_default_instance() {
    return reinterpret_cast<const UGCHudGameObjectCommonData*>(
               &_UGCHudGameObjectCommonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(UGCHudGameObjectCommonData& a, UGCHudGameObjectCommonData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudGameObjectCommonData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudGameObjectCommonData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudGameObjectCommonData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudGameObjectCommonData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudGameObjectCommonData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudGameObjectCommonData& from) {
    UGCHudGameObjectCommonData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudGameObjectCommonData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudGameObjectCommonData";
  }
  protected:
  explicit UGCHudGameObjectCommonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 11,
    kRectTransformFieldNumber = 3,
    kWidgetFieldNumber = 5,
    kLabelFieldNumber = 6,
    kImageFieldNumber = 7,
    kButtonFieldNumber = 8,
    kInputFieldNumber = 9,
    kLayoutFieldNumber = 10,
    kPanelFieldNumber = 12,
    kScrollViewFieldNumber = 13,
    kGridFieldNumber = 14,
    kLayoutNewFieldNumber = 15,
    kContainer3DFieldNumber = 16,
    kTextureFieldNumber = 17,
    kProfileInfoFieldNumber = 18,
    kIDFieldNumber = 1,
    kActivedFieldNumber = 2,
    kWidgetTypeFieldNumber = 4,
  };
  // string Name = 11;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .message.UGCHudRectTransformData RectTransform = 3;
  bool has_recttransform() const;
  private:
  bool _internal_has_recttransform() const;
  public:
  void clear_recttransform();
  const ::message::UGCHudRectTransformData& recttransform() const;
  PROTOBUF_NODISCARD ::message::UGCHudRectTransformData* release_recttransform();
  ::message::UGCHudRectTransformData* mutable_recttransform();
  void set_allocated_recttransform(::message::UGCHudRectTransformData* recttransform);
  private:
  const ::message::UGCHudRectTransformData& _internal_recttransform() const;
  ::message::UGCHudRectTransformData* _internal_mutable_recttransform();
  public:
  void unsafe_arena_set_allocated_recttransform(
      ::message::UGCHudRectTransformData* recttransform);
  ::message::UGCHudRectTransformData* unsafe_arena_release_recttransform();

  // .message.UGCHudWidgetData Widget = 5;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::message::UGCHudWidgetData& widget() const;
  PROTOBUF_NODISCARD ::message::UGCHudWidgetData* release_widget();
  ::message::UGCHudWidgetData* mutable_widget();
  void set_allocated_widget(::message::UGCHudWidgetData* widget);
  private:
  const ::message::UGCHudWidgetData& _internal_widget() const;
  ::message::UGCHudWidgetData* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::message::UGCHudWidgetData* widget);
  ::message::UGCHudWidgetData* unsafe_arena_release_widget();

  // .message.UGCHudLabelData Label = 6;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const ::message::UGCHudLabelData& label() const;
  PROTOBUF_NODISCARD ::message::UGCHudLabelData* release_label();
  ::message::UGCHudLabelData* mutable_label();
  void set_allocated_label(::message::UGCHudLabelData* label);
  private:
  const ::message::UGCHudLabelData& _internal_label() const;
  ::message::UGCHudLabelData* _internal_mutable_label();
  public:
  void unsafe_arena_set_allocated_label(
      ::message::UGCHudLabelData* label);
  ::message::UGCHudLabelData* unsafe_arena_release_label();

  // .message.UGCHudImageData Image = 7;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::message::UGCHudImageData& image() const;
  PROTOBUF_NODISCARD ::message::UGCHudImageData* release_image();
  ::message::UGCHudImageData* mutable_image();
  void set_allocated_image(::message::UGCHudImageData* image);
  private:
  const ::message::UGCHudImageData& _internal_image() const;
  ::message::UGCHudImageData* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::message::UGCHudImageData* image);
  ::message::UGCHudImageData* unsafe_arena_release_image();

  // .message.UGCHudButtonData Button = 8;
  bool has_button() const;
  private:
  bool _internal_has_button() const;
  public:
  void clear_button();
  const ::message::UGCHudButtonData& button() const;
  PROTOBUF_NODISCARD ::message::UGCHudButtonData* release_button();
  ::message::UGCHudButtonData* mutable_button();
  void set_allocated_button(::message::UGCHudButtonData* button);
  private:
  const ::message::UGCHudButtonData& _internal_button() const;
  ::message::UGCHudButtonData* _internal_mutable_button();
  public:
  void unsafe_arena_set_allocated_button(
      ::message::UGCHudButtonData* button);
  ::message::UGCHudButtonData* unsafe_arena_release_button();

  // .message.UGCHudInputData Input = 9;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::message::UGCHudInputData& input() const;
  PROTOBUF_NODISCARD ::message::UGCHudInputData* release_input();
  ::message::UGCHudInputData* mutable_input();
  void set_allocated_input(::message::UGCHudInputData* input);
  private:
  const ::message::UGCHudInputData& _internal_input() const;
  ::message::UGCHudInputData* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::message::UGCHudInputData* input);
  ::message::UGCHudInputData* unsafe_arena_release_input();

  // .message.UGCHudLayoutData Layout = 10;
  bool has_layout() const;
  private:
  bool _internal_has_layout() const;
  public:
  void clear_layout();
  const ::message::UGCHudLayoutData& layout() const;
  PROTOBUF_NODISCARD ::message::UGCHudLayoutData* release_layout();
  ::message::UGCHudLayoutData* mutable_layout();
  void set_allocated_layout(::message::UGCHudLayoutData* layout);
  private:
  const ::message::UGCHudLayoutData& _internal_layout() const;
  ::message::UGCHudLayoutData* _internal_mutable_layout();
  public:
  void unsafe_arena_set_allocated_layout(
      ::message::UGCHudLayoutData* layout);
  ::message::UGCHudLayoutData* unsafe_arena_release_layout();

  // .message.UGCHudPanelData Panel = 12;
  bool has_panel() const;
  private:
  bool _internal_has_panel() const;
  public:
  void clear_panel();
  const ::message::UGCHudPanelData& panel() const;
  PROTOBUF_NODISCARD ::message::UGCHudPanelData* release_panel();
  ::message::UGCHudPanelData* mutable_panel();
  void set_allocated_panel(::message::UGCHudPanelData* panel);
  private:
  const ::message::UGCHudPanelData& _internal_panel() const;
  ::message::UGCHudPanelData* _internal_mutable_panel();
  public:
  void unsafe_arena_set_allocated_panel(
      ::message::UGCHudPanelData* panel);
  ::message::UGCHudPanelData* unsafe_arena_release_panel();

  // .message.UGCHudScrollViewData ScrollView = 13;
  bool has_scrollview() const;
  private:
  bool _internal_has_scrollview() const;
  public:
  void clear_scrollview();
  const ::message::UGCHudScrollViewData& scrollview() const;
  PROTOBUF_NODISCARD ::message::UGCHudScrollViewData* release_scrollview();
  ::message::UGCHudScrollViewData* mutable_scrollview();
  void set_allocated_scrollview(::message::UGCHudScrollViewData* scrollview);
  private:
  const ::message::UGCHudScrollViewData& _internal_scrollview() const;
  ::message::UGCHudScrollViewData* _internal_mutable_scrollview();
  public:
  void unsafe_arena_set_allocated_scrollview(
      ::message::UGCHudScrollViewData* scrollview);
  ::message::UGCHudScrollViewData* unsafe_arena_release_scrollview();

  // .message.UGCHudGridData Grid = 14;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::message::UGCHudGridData& grid() const;
  PROTOBUF_NODISCARD ::message::UGCHudGridData* release_grid();
  ::message::UGCHudGridData* mutable_grid();
  void set_allocated_grid(::message::UGCHudGridData* grid);
  private:
  const ::message::UGCHudGridData& _internal_grid() const;
  ::message::UGCHudGridData* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::message::UGCHudGridData* grid);
  ::message::UGCHudGridData* unsafe_arena_release_grid();

  // .message.UGCHudLayoutNewData LayoutNew = 15;
  bool has_layoutnew() const;
  private:
  bool _internal_has_layoutnew() const;
  public:
  void clear_layoutnew();
  const ::message::UGCHudLayoutNewData& layoutnew() const;
  PROTOBUF_NODISCARD ::message::UGCHudLayoutNewData* release_layoutnew();
  ::message::UGCHudLayoutNewData* mutable_layoutnew();
  void set_allocated_layoutnew(::message::UGCHudLayoutNewData* layoutnew);
  private:
  const ::message::UGCHudLayoutNewData& _internal_layoutnew() const;
  ::message::UGCHudLayoutNewData* _internal_mutable_layoutnew();
  public:
  void unsafe_arena_set_allocated_layoutnew(
      ::message::UGCHudLayoutNewData* layoutnew);
  ::message::UGCHudLayoutNewData* unsafe_arena_release_layoutnew();

  // .message.UGCHud3DContainerData Container3D = 16;
  bool has_container3d() const;
  private:
  bool _internal_has_container3d() const;
  public:
  void clear_container3d();
  const ::message::UGCHud3DContainerData& container3d() const;
  PROTOBUF_NODISCARD ::message::UGCHud3DContainerData* release_container3d();
  ::message::UGCHud3DContainerData* mutable_container3d();
  void set_allocated_container3d(::message::UGCHud3DContainerData* container3d);
  private:
  const ::message::UGCHud3DContainerData& _internal_container3d() const;
  ::message::UGCHud3DContainerData* _internal_mutable_container3d();
  public:
  void unsafe_arena_set_allocated_container3d(
      ::message::UGCHud3DContainerData* container3d);
  ::message::UGCHud3DContainerData* unsafe_arena_release_container3d();

  // .message.UGCHudTextureData Texture = 17;
  bool has_texture() const;
  private:
  bool _internal_has_texture() const;
  public:
  void clear_texture();
  const ::message::UGCHudTextureData& texture() const;
  PROTOBUF_NODISCARD ::message::UGCHudTextureData* release_texture();
  ::message::UGCHudTextureData* mutable_texture();
  void set_allocated_texture(::message::UGCHudTextureData* texture);
  private:
  const ::message::UGCHudTextureData& _internal_texture() const;
  ::message::UGCHudTextureData* _internal_mutable_texture();
  public:
  void unsafe_arena_set_allocated_texture(
      ::message::UGCHudTextureData* texture);
  ::message::UGCHudTextureData* unsafe_arena_release_texture();

  // .message.UGCHudProfileInfoData ProfileInfo = 18;
  bool has_profileinfo() const;
  private:
  bool _internal_has_profileinfo() const;
  public:
  void clear_profileinfo();
  const ::message::UGCHudProfileInfoData& profileinfo() const;
  PROTOBUF_NODISCARD ::message::UGCHudProfileInfoData* release_profileinfo();
  ::message::UGCHudProfileInfoData* mutable_profileinfo();
  void set_allocated_profileinfo(::message::UGCHudProfileInfoData* profileinfo);
  private:
  const ::message::UGCHudProfileInfoData& _internal_profileinfo() const;
  ::message::UGCHudProfileInfoData* _internal_mutable_profileinfo();
  public:
  void unsafe_arena_set_allocated_profileinfo(
      ::message::UGCHudProfileInfoData* profileinfo);
  ::message::UGCHudProfileInfoData* unsafe_arena_release_profileinfo();

  // uint32 ID = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // bool Actived = 2;
  void clear_actived();
  bool actived() const;
  void set_actived(bool value);
  private:
  bool _internal_actived() const;
  void _internal_set_actived(bool value);
  public:

  // uint32 WidgetType = 4;
  void clear_widgettype();
  uint32_t widgettype() const;
  void set_widgettype(uint32_t value);
  private:
  uint32_t _internal_widgettype() const;
  void _internal_set_widgettype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudGameObjectCommonData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::message::UGCHudRectTransformData* recttransform_;
    ::message::UGCHudWidgetData* widget_;
    ::message::UGCHudLabelData* label_;
    ::message::UGCHudImageData* image_;
    ::message::UGCHudButtonData* button_;
    ::message::UGCHudInputData* input_;
    ::message::UGCHudLayoutData* layout_;
    ::message::UGCHudPanelData* panel_;
    ::message::UGCHudScrollViewData* scrollview_;
    ::message::UGCHudGridData* grid_;
    ::message::UGCHudLayoutNewData* layoutnew_;
    ::message::UGCHud3DContainerData* container3d_;
    ::message::UGCHudTextureData* texture_;
    ::message::UGCHudProfileInfoData* profileinfo_;
    uint32_t id_;
    bool actived_;
    uint32_t widgettype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudGameObjectData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudGameObjectData) */ {
 public:
  inline UGCHudGameObjectData() : UGCHudGameObjectData(nullptr) {}
  ~UGCHudGameObjectData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudGameObjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudGameObjectData(const UGCHudGameObjectData& from);
  UGCHudGameObjectData(UGCHudGameObjectData&& from) noexcept
    : UGCHudGameObjectData() {
    *this = ::std::move(from);
  }

  inline UGCHudGameObjectData& operator=(const UGCHudGameObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudGameObjectData& operator=(UGCHudGameObjectData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudGameObjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudGameObjectData* internal_default_instance() {
    return reinterpret_cast<const UGCHudGameObjectData*>(
               &_UGCHudGameObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(UGCHudGameObjectData& a, UGCHudGameObjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudGameObjectData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudGameObjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudGameObjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudGameObjectData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudGameObjectData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudGameObjectData& from) {
    UGCHudGameObjectData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudGameObjectData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudGameObjectData";
  }
  protected:
  explicit UGCHudGameObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 2,
    kCommonDataFieldNumber = 1,
  };
  // repeated .message.UGCHudGameObjectData Children = 2;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::message::UGCHudGameObjectData* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData >*
      mutable_children();
  private:
  const ::message::UGCHudGameObjectData& _internal_children(int index) const;
  ::message::UGCHudGameObjectData* _internal_add_children();
  public:
  const ::message::UGCHudGameObjectData& children(int index) const;
  ::message::UGCHudGameObjectData* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData >&
      children() const;

  // .message.UGCHudGameObjectCommonData CommonData = 1;
  bool has_commondata() const;
  private:
  bool _internal_has_commondata() const;
  public:
  void clear_commondata();
  const ::message::UGCHudGameObjectCommonData& commondata() const;
  PROTOBUF_NODISCARD ::message::UGCHudGameObjectCommonData* release_commondata();
  ::message::UGCHudGameObjectCommonData* mutable_commondata();
  void set_allocated_commondata(::message::UGCHudGameObjectCommonData* commondata);
  private:
  const ::message::UGCHudGameObjectCommonData& _internal_commondata() const;
  ::message::UGCHudGameObjectCommonData* _internal_mutable_commondata();
  public:
  void unsafe_arena_set_allocated_commondata(
      ::message::UGCHudGameObjectCommonData* commondata);
  ::message::UGCHudGameObjectCommonData* unsafe_arena_release_commondata();

  // @@protoc_insertion_point(class_scope:message.UGCHudGameObjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData > children_;
    ::message::UGCHudGameObjectCommonData* commondata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudGameObjectDataForEditor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudGameObjectDataForEditor) */ {
 public:
  inline UGCHudGameObjectDataForEditor() : UGCHudGameObjectDataForEditor(nullptr) {}
  ~UGCHudGameObjectDataForEditor() override;
  explicit PROTOBUF_CONSTEXPR UGCHudGameObjectDataForEditor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudGameObjectDataForEditor(const UGCHudGameObjectDataForEditor& from);
  UGCHudGameObjectDataForEditor(UGCHudGameObjectDataForEditor&& from) noexcept
    : UGCHudGameObjectDataForEditor() {
    *this = ::std::move(from);
  }

  inline UGCHudGameObjectDataForEditor& operator=(const UGCHudGameObjectDataForEditor& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudGameObjectDataForEditor& operator=(UGCHudGameObjectDataForEditor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudGameObjectDataForEditor& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudGameObjectDataForEditor* internal_default_instance() {
    return reinterpret_cast<const UGCHudGameObjectDataForEditor*>(
               &_UGCHudGameObjectDataForEditor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(UGCHudGameObjectDataForEditor& a, UGCHudGameObjectDataForEditor& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudGameObjectDataForEditor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudGameObjectDataForEditor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudGameObjectDataForEditor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudGameObjectDataForEditor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudGameObjectDataForEditor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudGameObjectDataForEditor& from) {
    UGCHudGameObjectDataForEditor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudGameObjectDataForEditor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudGameObjectDataForEditor";
  }
  protected:
  explicit UGCHudGameObjectDataForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kNameFieldNumber = 2,
    kCommonDataFieldNumber = 1,
    kCustomAdaptFieldNumber = 4,
  };
  // repeated .message.UGCHudGameObjectDataForEditor Children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::message::UGCHudGameObjectDataForEditor* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor >*
      mutable_children();
  private:
  const ::message::UGCHudGameObjectDataForEditor& _internal_children(int index) const;
  ::message::UGCHudGameObjectDataForEditor* _internal_add_children();
  public:
  const ::message::UGCHudGameObjectDataForEditor& children(int index) const;
  ::message::UGCHudGameObjectDataForEditor* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor >&
      children() const;

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .message.UGCHudGameObjectCommonData CommonData = 1;
  bool has_commondata() const;
  private:
  bool _internal_has_commondata() const;
  public:
  void clear_commondata();
  const ::message::UGCHudGameObjectCommonData& commondata() const;
  PROTOBUF_NODISCARD ::message::UGCHudGameObjectCommonData* release_commondata();
  ::message::UGCHudGameObjectCommonData* mutable_commondata();
  void set_allocated_commondata(::message::UGCHudGameObjectCommonData* commondata);
  private:
  const ::message::UGCHudGameObjectCommonData& _internal_commondata() const;
  ::message::UGCHudGameObjectCommonData* _internal_mutable_commondata();
  public:
  void unsafe_arena_set_allocated_commondata(
      ::message::UGCHudGameObjectCommonData* commondata);
  ::message::UGCHudGameObjectCommonData* unsafe_arena_release_commondata();

  // bool CustomAdapt = 4;
  void clear_customadapt();
  bool customadapt() const;
  void set_customadapt(bool value);
  private:
  bool _internal_customadapt() const;
  void _internal_set_customadapt(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudGameObjectDataForEditor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor > children_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::message::UGCHudGameObjectCommonData* commondata_;
    bool customadapt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudPrefabCommonData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudPrefabCommonData) */ {
 public:
  inline UGCHudPrefabCommonData() : UGCHudPrefabCommonData(nullptr) {}
  ~UGCHudPrefabCommonData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudPrefabCommonData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudPrefabCommonData(const UGCHudPrefabCommonData& from);
  UGCHudPrefabCommonData(UGCHudPrefabCommonData&& from) noexcept
    : UGCHudPrefabCommonData() {
    *this = ::std::move(from);
  }

  inline UGCHudPrefabCommonData& operator=(const UGCHudPrefabCommonData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudPrefabCommonData& operator=(UGCHudPrefabCommonData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudPrefabCommonData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudPrefabCommonData* internal_default_instance() {
    return reinterpret_cast<const UGCHudPrefabCommonData*>(
               &_UGCHudPrefabCommonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(UGCHudPrefabCommonData& a, UGCHudPrefabCommonData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudPrefabCommonData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudPrefabCommonData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudPrefabCommonData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudPrefabCommonData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudPrefabCommonData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudPrefabCommonData& from) {
    UGCHudPrefabCommonData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudPrefabCommonData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudPrefabCommonData";
  }
  protected:
  explicit UGCHudPrefabCommonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 4,
    kScreenWidthFieldNumber = 1,
    kScreenHeightFieldNumber = 2,
    kIDFieldNumber = 3,
  };
  // .message.UGCHudTransformData Transform = 4;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::message::UGCHudTransformData& transform() const;
  PROTOBUF_NODISCARD ::message::UGCHudTransformData* release_transform();
  ::message::UGCHudTransformData* mutable_transform();
  void set_allocated_transform(::message::UGCHudTransformData* transform);
  private:
  const ::message::UGCHudTransformData& _internal_transform() const;
  ::message::UGCHudTransformData* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::message::UGCHudTransformData* transform);
  ::message::UGCHudTransformData* unsafe_arena_release_transform();

  // int32 ScreenWidth = 1;
  void clear_screenwidth();
  int32_t screenwidth() const;
  void set_screenwidth(int32_t value);
  private:
  int32_t _internal_screenwidth() const;
  void _internal_set_screenwidth(int32_t value);
  public:

  // int32 ScreenHeight = 2;
  void clear_screenheight();
  int32_t screenheight() const;
  void set_screenheight(int32_t value);
  private:
  int32_t _internal_screenheight() const;
  void _internal_set_screenheight(int32_t value);
  public:

  // uint32 ID = 3;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudPrefabCommonData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCHudTransformData* transform_;
    int32_t screenwidth_;
    int32_t screenheight_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudPrefabData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudPrefabData) */ {
 public:
  inline UGCHudPrefabData() : UGCHudPrefabData(nullptr) {}
  ~UGCHudPrefabData() override;
  explicit PROTOBUF_CONSTEXPR UGCHudPrefabData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudPrefabData(const UGCHudPrefabData& from);
  UGCHudPrefabData(UGCHudPrefabData&& from) noexcept
    : UGCHudPrefabData() {
    *this = ::std::move(from);
  }

  inline UGCHudPrefabData& operator=(const UGCHudPrefabData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudPrefabData& operator=(UGCHudPrefabData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudPrefabData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudPrefabData* internal_default_instance() {
    return reinterpret_cast<const UGCHudPrefabData*>(
               &_UGCHudPrefabData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(UGCHudPrefabData& a, UGCHudPrefabData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudPrefabData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudPrefabData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudPrefabData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudPrefabData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudPrefabData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudPrefabData& from) {
    UGCHudPrefabData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudPrefabData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudPrefabData";
  }
  protected:
  explicit UGCHudPrefabData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 2,
    kCommonDataFieldNumber = 1,
    kMaxWidgetIDFieldNumber = 3,
  };
  // repeated .message.UGCHudGameObjectData Children = 2;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::message::UGCHudGameObjectData* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData >*
      mutable_children();
  private:
  const ::message::UGCHudGameObjectData& _internal_children(int index) const;
  ::message::UGCHudGameObjectData* _internal_add_children();
  public:
  const ::message::UGCHudGameObjectData& children(int index) const;
  ::message::UGCHudGameObjectData* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData >&
      children() const;

  // .message.UGCHudPrefabCommonData CommonData = 1;
  bool has_commondata() const;
  private:
  bool _internal_has_commondata() const;
  public:
  void clear_commondata();
  const ::message::UGCHudPrefabCommonData& commondata() const;
  PROTOBUF_NODISCARD ::message::UGCHudPrefabCommonData* release_commondata();
  ::message::UGCHudPrefabCommonData* mutable_commondata();
  void set_allocated_commondata(::message::UGCHudPrefabCommonData* commondata);
  private:
  const ::message::UGCHudPrefabCommonData& _internal_commondata() const;
  ::message::UGCHudPrefabCommonData* _internal_mutable_commondata();
  public:
  void unsafe_arena_set_allocated_commondata(
      ::message::UGCHudPrefabCommonData* commondata);
  ::message::UGCHudPrefabCommonData* unsafe_arena_release_commondata();

  // uint32 MaxWidgetID = 3;
  void clear_maxwidgetid();
  uint32_t maxwidgetid() const;
  void set_maxwidgetid(uint32_t value);
  private:
  uint32_t _internal_maxwidgetid() const;
  void _internal_set_maxwidgetid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudPrefabData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData > children_;
    ::message::UGCHudPrefabCommonData* commondata_;
    uint32_t maxwidgetid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudPrefabDataForEditor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudPrefabDataForEditor) */ {
 public:
  inline UGCHudPrefabDataForEditor() : UGCHudPrefabDataForEditor(nullptr) {}
  ~UGCHudPrefabDataForEditor() override;
  explicit PROTOBUF_CONSTEXPR UGCHudPrefabDataForEditor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudPrefabDataForEditor(const UGCHudPrefabDataForEditor& from);
  UGCHudPrefabDataForEditor(UGCHudPrefabDataForEditor&& from) noexcept
    : UGCHudPrefabDataForEditor() {
    *this = ::std::move(from);
  }

  inline UGCHudPrefabDataForEditor& operator=(const UGCHudPrefabDataForEditor& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudPrefabDataForEditor& operator=(UGCHudPrefabDataForEditor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudPrefabDataForEditor& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudPrefabDataForEditor* internal_default_instance() {
    return reinterpret_cast<const UGCHudPrefabDataForEditor*>(
               &_UGCHudPrefabDataForEditor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(UGCHudPrefabDataForEditor& a, UGCHudPrefabDataForEditor& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudPrefabDataForEditor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudPrefabDataForEditor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudPrefabDataForEditor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudPrefabDataForEditor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudPrefabDataForEditor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudPrefabDataForEditor& from) {
    UGCHudPrefabDataForEditor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudPrefabDataForEditor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudPrefabDataForEditor";
  }
  protected:
  explicit UGCHudPrefabDataForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 2,
    kNameFieldNumber = 3,
    kCommonDataFieldNumber = 1,
    kIndexFieldNumber = 4,
    kMaxWidgetIDFieldNumber = 5,
  };
  // repeated .message.UGCHudGameObjectDataForEditor Children = 2;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::message::UGCHudGameObjectDataForEditor* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor >*
      mutable_children();
  private:
  const ::message::UGCHudGameObjectDataForEditor& _internal_children(int index) const;
  ::message::UGCHudGameObjectDataForEditor* _internal_add_children();
  public:
  const ::message::UGCHudGameObjectDataForEditor& children(int index) const;
  ::message::UGCHudGameObjectDataForEditor* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor >&
      children() const;

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .message.UGCHudPrefabCommonData CommonData = 1;
  bool has_commondata() const;
  private:
  bool _internal_has_commondata() const;
  public:
  void clear_commondata();
  const ::message::UGCHudPrefabCommonData& commondata() const;
  PROTOBUF_NODISCARD ::message::UGCHudPrefabCommonData* release_commondata();
  ::message::UGCHudPrefabCommonData* mutable_commondata();
  void set_allocated_commondata(::message::UGCHudPrefabCommonData* commondata);
  private:
  const ::message::UGCHudPrefabCommonData& _internal_commondata() const;
  ::message::UGCHudPrefabCommonData* _internal_mutable_commondata();
  public:
  void unsafe_arena_set_allocated_commondata(
      ::message::UGCHudPrefabCommonData* commondata);
  ::message::UGCHudPrefabCommonData* unsafe_arena_release_commondata();

  // uint32 Index = 4;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // uint32 MaxWidgetID = 5;
  void clear_maxwidgetid();
  uint32_t maxwidgetid() const;
  void set_maxwidgetid(uint32_t value);
  private:
  uint32_t _internal_maxwidgetid() const;
  void _internal_set_maxwidgetid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCHudPrefabDataForEditor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor > children_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::message::UGCHudPrefabCommonData* commondata_;
    uint32_t index_;
    uint32_t maxwidgetid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudPrefabDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudPrefabDatas) */ {
 public:
  inline UGCHudPrefabDatas() : UGCHudPrefabDatas(nullptr) {}
  ~UGCHudPrefabDatas() override;
  explicit PROTOBUF_CONSTEXPR UGCHudPrefabDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudPrefabDatas(const UGCHudPrefabDatas& from);
  UGCHudPrefabDatas(UGCHudPrefabDatas&& from) noexcept
    : UGCHudPrefabDatas() {
    *this = ::std::move(from);
  }

  inline UGCHudPrefabDatas& operator=(const UGCHudPrefabDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudPrefabDatas& operator=(UGCHudPrefabDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudPrefabDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudPrefabDatas* internal_default_instance() {
    return reinterpret_cast<const UGCHudPrefabDatas*>(
               &_UGCHudPrefabDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(UGCHudPrefabDatas& a, UGCHudPrefabDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudPrefabDatas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudPrefabDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudPrefabDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudPrefabDatas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudPrefabDatas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudPrefabDatas& from) {
    UGCHudPrefabDatas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudPrefabDatas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudPrefabDatas";
  }
  protected:
  explicit UGCHudPrefabDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefabsFieldNumber = 1,
  };
  // repeated .message.UGCHudPrefabData Prefabs = 1;
  int prefabs_size() const;
  private:
  int _internal_prefabs_size() const;
  public:
  void clear_prefabs();
  ::message::UGCHudPrefabData* mutable_prefabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabData >*
      mutable_prefabs();
  private:
  const ::message::UGCHudPrefabData& _internal_prefabs(int index) const;
  ::message::UGCHudPrefabData* _internal_add_prefabs();
  public:
  const ::message::UGCHudPrefabData& prefabs(int index) const;
  ::message::UGCHudPrefabData* add_prefabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabData >&
      prefabs() const;

  // @@protoc_insertion_point(class_scope:message.UGCHudPrefabDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabData > prefabs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCHudPrefabDatasForEditor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCHudPrefabDatasForEditor) */ {
 public:
  inline UGCHudPrefabDatasForEditor() : UGCHudPrefabDatasForEditor(nullptr) {}
  ~UGCHudPrefabDatasForEditor() override;
  explicit PROTOBUF_CONSTEXPR UGCHudPrefabDatasForEditor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCHudPrefabDatasForEditor(const UGCHudPrefabDatasForEditor& from);
  UGCHudPrefabDatasForEditor(UGCHudPrefabDatasForEditor&& from) noexcept
    : UGCHudPrefabDatasForEditor() {
    *this = ::std::move(from);
  }

  inline UGCHudPrefabDatasForEditor& operator=(const UGCHudPrefabDatasForEditor& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCHudPrefabDatasForEditor& operator=(UGCHudPrefabDatasForEditor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCHudPrefabDatasForEditor& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCHudPrefabDatasForEditor* internal_default_instance() {
    return reinterpret_cast<const UGCHudPrefabDatasForEditor*>(
               &_UGCHudPrefabDatasForEditor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(UGCHudPrefabDatasForEditor& a, UGCHudPrefabDatasForEditor& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCHudPrefabDatasForEditor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCHudPrefabDatasForEditor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCHudPrefabDatasForEditor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCHudPrefabDatasForEditor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCHudPrefabDatasForEditor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCHudPrefabDatasForEditor& from) {
    UGCHudPrefabDatasForEditor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCHudPrefabDatasForEditor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCHudPrefabDatasForEditor";
  }
  protected:
  explicit UGCHudPrefabDatasForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefabsFieldNumber = 1,
  };
  // repeated .message.UGCHudPrefabDataForEditor Prefabs = 1;
  int prefabs_size() const;
  private:
  int _internal_prefabs_size() const;
  public:
  void clear_prefabs();
  ::message::UGCHudPrefabDataForEditor* mutable_prefabs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabDataForEditor >*
      mutable_prefabs();
  private:
  const ::message::UGCHudPrefabDataForEditor& _internal_prefabs(int index) const;
  ::message::UGCHudPrefabDataForEditor* _internal_add_prefabs();
  public:
  const ::message::UGCHudPrefabDataForEditor& prefabs(int index) const;
  ::message::UGCHudPrefabDataForEditor* add_prefabs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabDataForEditor >&
      prefabs() const;

  // @@protoc_insertion_point(class_scope:message.UGCHudPrefabDatasForEditor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabDataForEditor > prefabs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCProjectData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCProjectData) */ {
 public:
  inline UGCProjectData() : UGCProjectData(nullptr) {}
  ~UGCProjectData() override;
  explicit PROTOBUF_CONSTEXPR UGCProjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCProjectData(const UGCProjectData& from);
  UGCProjectData(UGCProjectData&& from) noexcept
    : UGCProjectData() {
    *this = ::std::move(from);
  }

  inline UGCProjectData& operator=(const UGCProjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCProjectData& operator=(UGCProjectData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCProjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCProjectData* internal_default_instance() {
    return reinterpret_cast<const UGCProjectData*>(
               &_UGCProjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(UGCProjectData& a, UGCProjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCProjectData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCProjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCProjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCProjectData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCProjectData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCProjectData& from) {
    UGCProjectData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCProjectData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCProjectData";
  }
  protected:
  explicit UGCProjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphEditorProjectFieldNumber = 1,
    kWorkflowEditorProjectFieldNumber = 2,
    kEntityEditorProjectFieldNumber = 3,
    kHudEditorProjectFieldNumber = 4,
    kMapEditorProjectFieldNumber = 5,
    kModeSettingEditorProjectFieldNumber = 6,
    kCompatibleVersionFieldNumber = 999,
    kPublicVersionFieldNumber = 1000,
  };
  // bytes GraphEditorProject = 1;
  void clear_grapheditorproject();
  const std::string& grapheditorproject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grapheditorproject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grapheditorproject();
  PROTOBUF_NODISCARD std::string* release_grapheditorproject();
  void set_allocated_grapheditorproject(std::string* grapheditorproject);
  private:
  const std::string& _internal_grapheditorproject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grapheditorproject(const std::string& value);
  std::string* _internal_mutable_grapheditorproject();
  public:

  // bytes WorkflowEditorProject = 2;
  void clear_workfloweditorproject();
  const std::string& workfloweditorproject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workfloweditorproject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workfloweditorproject();
  PROTOBUF_NODISCARD std::string* release_workfloweditorproject();
  void set_allocated_workfloweditorproject(std::string* workfloweditorproject);
  private:
  const std::string& _internal_workfloweditorproject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workfloweditorproject(const std::string& value);
  std::string* _internal_mutable_workfloweditorproject();
  public:

  // bytes EntityEditorProject = 3;
  void clear_entityeditorproject();
  const std::string& entityeditorproject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entityeditorproject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entityeditorproject();
  PROTOBUF_NODISCARD std::string* release_entityeditorproject();
  void set_allocated_entityeditorproject(std::string* entityeditorproject);
  private:
  const std::string& _internal_entityeditorproject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entityeditorproject(const std::string& value);
  std::string* _internal_mutable_entityeditorproject();
  public:

  // bytes HudEditorProject = 4;
  void clear_hudeditorproject();
  const std::string& hudeditorproject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hudeditorproject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hudeditorproject();
  PROTOBUF_NODISCARD std::string* release_hudeditorproject();
  void set_allocated_hudeditorproject(std::string* hudeditorproject);
  private:
  const std::string& _internal_hudeditorproject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hudeditorproject(const std::string& value);
  std::string* _internal_mutable_hudeditorproject();
  public:

  // bytes MapEditorProject = 5;
  void clear_mapeditorproject();
  const std::string& mapeditorproject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapeditorproject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapeditorproject();
  PROTOBUF_NODISCARD std::string* release_mapeditorproject();
  void set_allocated_mapeditorproject(std::string* mapeditorproject);
  private:
  const std::string& _internal_mapeditorproject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapeditorproject(const std::string& value);
  std::string* _internal_mutable_mapeditorproject();
  public:

  // bytes ModeSettingEditorProject = 6;
  void clear_modesettingeditorproject();
  const std::string& modesettingeditorproject() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modesettingeditorproject(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modesettingeditorproject();
  PROTOBUF_NODISCARD std::string* release_modesettingeditorproject();
  void set_allocated_modesettingeditorproject(std::string* modesettingeditorproject);
  private:
  const std::string& _internal_modesettingeditorproject() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modesettingeditorproject(const std::string& value);
  std::string* _internal_mutable_modesettingeditorproject();
  public:

  // .message.EUGCProjectVersion CompatibleVersion = 999;
  void clear_compatibleversion();
  ::message::EUGCProjectVersion compatibleversion() const;
  void set_compatibleversion(::message::EUGCProjectVersion value);
  private:
  ::message::EUGCProjectVersion _internal_compatibleversion() const;
  void _internal_set_compatibleversion(::message::EUGCProjectVersion value);
  public:

  // int32 PublicVersion = 1000;
  void clear_publicversion();
  int32_t publicversion() const;
  void set_publicversion(int32_t value);
  private:
  int32_t _internal_publicversion() const;
  void _internal_set_publicversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCProjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grapheditorproject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workfloweditorproject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entityeditorproject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hudeditorproject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapeditorproject_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modesettingeditorproject_;
    int compatibleversion_;
    int32_t publicversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCProjectMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCProjectMetaData) */ {
 public:
  inline UGCProjectMetaData() : UGCProjectMetaData(nullptr) {}
  ~UGCProjectMetaData() override;
  explicit PROTOBUF_CONSTEXPR UGCProjectMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCProjectMetaData(const UGCProjectMetaData& from);
  UGCProjectMetaData(UGCProjectMetaData&& from) noexcept
    : UGCProjectMetaData() {
    *this = ::std::move(from);
  }

  inline UGCProjectMetaData& operator=(const UGCProjectMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCProjectMetaData& operator=(UGCProjectMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCProjectMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCProjectMetaData* internal_default_instance() {
    return reinterpret_cast<const UGCProjectMetaData*>(
               &_UGCProjectMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(UGCProjectMetaData& a, UGCProjectMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCProjectMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCProjectMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCProjectMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCProjectMetaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCProjectMetaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCProjectMetaData& from) {
    UGCProjectMetaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCProjectMetaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCProjectMetaData";
  }
  protected:
  explicit UGCProjectMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 10,
    kLocDataFieldNumber = 28,
    kDataStorageFieldNumber = 36,
    kLeaderBoardFieldNumber = 37,
    kStatisticFieldNumber = 39,
    kGameNameFieldNumber = 2,
    kGameDescFieldNumber = 3,
    kWorkshopBitMapFieldNumber = 11,
    kWorkshopIconMapFieldNumber = 12,
    kRuntimeDataMD5FieldNumber = 19,
    kProjectDataMD5FieldNumber = 20,
    kOriginalWorkshopCodeFieldNumber = 25,
    kGameNameKeyFieldNumber = 26,
    kGameDescKeyFieldNumber = 27,
    kCustomCoverFieldNumber = 29,
    kCustomCoverUrlFieldNumber = 30,
    kRoomParamsFieldNumber = 31,
    kPackageDataMD5FieldNumber = 32,
    kOpenRoomLocDataMD5FieldNumber = 33,
    kSubDescFieldNumber = 35,
    kModeSettingsFieldNumber = 13,
    kUserDataForCensorshipFieldNumber = 16,
    kHalfWayJoinRuleFieldNumber = 34,
    kSlotIDFieldNumber = 1,
    kGameModeFieldNumber = 4,
    kGroupModeFieldNumber = 5,
    kTeamCountFieldNumber = 6,
    kGameResourceCountFieldNumber = 7,
    kGameTotalCostFieldNumber = 8,
    kUpdateTimeFieldNumber = 9,
    kRuntimeDataLengthFieldNumber = 14,
    kProjectDataLengthFieldNumber = 15,
    kMapIDFieldNumber = 17,
    kCompatibleVersionFieldNumber = 18,
    kModeTemplateIdFieldNumber = 21,
    kSeverityFieldNumber = 22,
    kPublicVersionFieldNumber = 24,
    kSecEditFieldNumber = 23,
    kNotifySubscriberFieldNumber = 38,
  };
  // repeated uint32 Tags = 10;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  uint32_t _internal_tags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tags() const;
  void _internal_add_tags(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tags();
  public:
  uint32_t tags(int index) const;
  void set_tags(int index, uint32_t value);
  void add_tags(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tags();

  // repeated .message.UGCLocData LocData = 28;
  int locdata_size() const;
  private:
  int _internal_locdata_size() const;
  public:
  void clear_locdata();
  ::message::UGCLocData* mutable_locdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData >*
      mutable_locdata();
  private:
  const ::message::UGCLocData& _internal_locdata(int index) const;
  ::message::UGCLocData* _internal_add_locdata();
  public:
  const ::message::UGCLocData& locdata(int index) const;
  ::message::UGCLocData* add_locdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData >&
      locdata() const;

  // repeated bytes DataStorage = 36;
  int datastorage_size() const;
  private:
  int _internal_datastorage_size() const;
  public:
  void clear_datastorage();
  const std::string& datastorage(int index) const;
  std::string* mutable_datastorage(int index);
  void set_datastorage(int index, const std::string& value);
  void set_datastorage(int index, std::string&& value);
  void set_datastorage(int index, const char* value);
  void set_datastorage(int index, const void* value, size_t size);
  std::string* add_datastorage();
  void add_datastorage(const std::string& value);
  void add_datastorage(std::string&& value);
  void add_datastorage(const char* value);
  void add_datastorage(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datastorage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datastorage();
  private:
  const std::string& _internal_datastorage(int index) const;
  std::string* _internal_add_datastorage();
  public:

  // repeated bytes LeaderBoard = 37;
  int leaderboard_size() const;
  private:
  int _internal_leaderboard_size() const;
  public:
  void clear_leaderboard();
  const std::string& leaderboard(int index) const;
  std::string* mutable_leaderboard(int index);
  void set_leaderboard(int index, const std::string& value);
  void set_leaderboard(int index, std::string&& value);
  void set_leaderboard(int index, const char* value);
  void set_leaderboard(int index, const void* value, size_t size);
  std::string* add_leaderboard();
  void add_leaderboard(const std::string& value);
  void add_leaderboard(std::string&& value);
  void add_leaderboard(const char* value);
  void add_leaderboard(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& leaderboard() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_leaderboard();
  private:
  const std::string& _internal_leaderboard(int index) const;
  std::string* _internal_add_leaderboard();
  public:

  // repeated bytes Statistic = 39;
  int statistic_size() const;
  private:
  int _internal_statistic_size() const;
  public:
  void clear_statistic();
  const std::string& statistic(int index) const;
  std::string* mutable_statistic(int index);
  void set_statistic(int index, const std::string& value);
  void set_statistic(int index, std::string&& value);
  void set_statistic(int index, const char* value);
  void set_statistic(int index, const void* value, size_t size);
  std::string* add_statistic();
  void add_statistic(const std::string& value);
  void add_statistic(std::string&& value);
  void add_statistic(const char* value);
  void add_statistic(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statistic() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statistic();
  private:
  const std::string& _internal_statistic(int index) const;
  std::string* _internal_add_statistic();
  public:

  // string GameName = 2;
  void clear_gamename();
  const std::string& gamename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamename();
  PROTOBUF_NODISCARD std::string* release_gamename();
  void set_allocated_gamename(std::string* gamename);
  private:
  const std::string& _internal_gamename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamename(const std::string& value);
  std::string* _internal_mutable_gamename();
  public:

  // string GameDesc = 3;
  void clear_gamedesc();
  const std::string& gamedesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamedesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamedesc();
  PROTOBUF_NODISCARD std::string* release_gamedesc();
  void set_allocated_gamedesc(std::string* gamedesc);
  private:
  const std::string& _internal_gamedesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamedesc(const std::string& value);
  std::string* _internal_mutable_gamedesc();
  public:

  // bytes WorkshopBitMap = 11;
  void clear_workshopbitmap();
  const std::string& workshopbitmap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workshopbitmap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workshopbitmap();
  PROTOBUF_NODISCARD std::string* release_workshopbitmap();
  void set_allocated_workshopbitmap(std::string* workshopbitmap);
  private:
  const std::string& _internal_workshopbitmap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workshopbitmap(const std::string& value);
  std::string* _internal_mutable_workshopbitmap();
  public:

  // bytes WorkshopIconMap = 12;
  void clear_workshopiconmap();
  const std::string& workshopiconmap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workshopiconmap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workshopiconmap();
  PROTOBUF_NODISCARD std::string* release_workshopiconmap();
  void set_allocated_workshopiconmap(std::string* workshopiconmap);
  private:
  const std::string& _internal_workshopiconmap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workshopiconmap(const std::string& value);
  std::string* _internal_mutable_workshopiconmap();
  public:

  // bytes RuntimeDataMD5 = 19;
  void clear_runtimedatamd5();
  const std::string& runtimedatamd5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtimedatamd5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtimedatamd5();
  PROTOBUF_NODISCARD std::string* release_runtimedatamd5();
  void set_allocated_runtimedatamd5(std::string* runtimedatamd5);
  private:
  const std::string& _internal_runtimedatamd5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtimedatamd5(const std::string& value);
  std::string* _internal_mutable_runtimedatamd5();
  public:

  // bytes ProjectDataMD5 = 20;
  void clear_projectdatamd5();
  const std::string& projectdatamd5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectdatamd5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectdatamd5();
  PROTOBUF_NODISCARD std::string* release_projectdatamd5();
  void set_allocated_projectdatamd5(std::string* projectdatamd5);
  private:
  const std::string& _internal_projectdatamd5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectdatamd5(const std::string& value);
  std::string* _internal_mutable_projectdatamd5();
  public:

  // string OriginalWorkshopCode = 25;
  void clear_originalworkshopcode();
  const std::string& originalworkshopcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_originalworkshopcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_originalworkshopcode();
  PROTOBUF_NODISCARD std::string* release_originalworkshopcode();
  void set_allocated_originalworkshopcode(std::string* originalworkshopcode);
  private:
  const std::string& _internal_originalworkshopcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originalworkshopcode(const std::string& value);
  std::string* _internal_mutable_originalworkshopcode();
  public:

  // string GameNameKey = 26;
  void clear_gamenamekey();
  const std::string& gamenamekey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamenamekey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamenamekey();
  PROTOBUF_NODISCARD std::string* release_gamenamekey();
  void set_allocated_gamenamekey(std::string* gamenamekey);
  private:
  const std::string& _internal_gamenamekey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamenamekey(const std::string& value);
  std::string* _internal_mutable_gamenamekey();
  public:

  // string GameDescKey = 27;
  void clear_gamedesckey();
  const std::string& gamedesckey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamedesckey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamedesckey();
  PROTOBUF_NODISCARD std::string* release_gamedesckey();
  void set_allocated_gamedesckey(std::string* gamedesckey);
  private:
  const std::string& _internal_gamedesckey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamedesckey(const std::string& value);
  std::string* _internal_mutable_gamedesckey();
  public:

  // bytes CustomCover = 29;
  void clear_customcover();
  const std::string& customcover() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customcover(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customcover();
  PROTOBUF_NODISCARD std::string* release_customcover();
  void set_allocated_customcover(std::string* customcover);
  private:
  const std::string& _internal_customcover() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customcover(const std::string& value);
  std::string* _internal_mutable_customcover();
  public:

  // string CustomCoverUrl = 30;
  void clear_customcoverurl();
  const std::string& customcoverurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customcoverurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customcoverurl();
  PROTOBUF_NODISCARD std::string* release_customcoverurl();
  void set_allocated_customcoverurl(std::string* customcoverurl);
  private:
  const std::string& _internal_customcoverurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customcoverurl(const std::string& value);
  std::string* _internal_mutable_customcoverurl();
  public:

  // bytes RoomParams = 31;
  void clear_roomparams();
  const std::string& roomparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomparams();
  PROTOBUF_NODISCARD std::string* release_roomparams();
  void set_allocated_roomparams(std::string* roomparams);
  private:
  const std::string& _internal_roomparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomparams(const std::string& value);
  std::string* _internal_mutable_roomparams();
  public:

  // bytes PackageDataMD5 = 32;
  void clear_packagedatamd5();
  const std::string& packagedatamd5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packagedatamd5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packagedatamd5();
  PROTOBUF_NODISCARD std::string* release_packagedatamd5();
  void set_allocated_packagedatamd5(std::string* packagedatamd5);
  private:
  const std::string& _internal_packagedatamd5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packagedatamd5(const std::string& value);
  std::string* _internal_mutable_packagedatamd5();
  public:

  // bytes OpenRoomLocDataMD5 = 33;
  void clear_openroomlocdatamd5();
  const std::string& openroomlocdatamd5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_openroomlocdatamd5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_openroomlocdatamd5();
  PROTOBUF_NODISCARD std::string* release_openroomlocdatamd5();
  void set_allocated_openroomlocdatamd5(std::string* openroomlocdatamd5);
  private:
  const std::string& _internal_openroomlocdatamd5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openroomlocdatamd5(const std::string& value);
  std::string* _internal_mutable_openroomlocdatamd5();
  public:

  // string SubDesc = 35;
  void clear_subdesc();
  const std::string& subdesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subdesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subdesc();
  PROTOBUF_NODISCARD std::string* release_subdesc();
  void set_allocated_subdesc(std::string* subdesc);
  private:
  const std::string& _internal_subdesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subdesc(const std::string& value);
  std::string* _internal_mutable_subdesc();
  public:

  // .message.SceneEditModeProtoData ModeSettings = 13;
  bool has_modesettings() const;
  private:
  bool _internal_has_modesettings() const;
  public:
  void clear_modesettings();
  const ::message::SceneEditModeProtoData& modesettings() const;
  PROTOBUF_NODISCARD ::message::SceneEditModeProtoData* release_modesettings();
  ::message::SceneEditModeProtoData* mutable_modesettings();
  void set_allocated_modesettings(::message::SceneEditModeProtoData* modesettings);
  private:
  const ::message::SceneEditModeProtoData& _internal_modesettings() const;
  ::message::SceneEditModeProtoData* _internal_mutable_modesettings();
  public:
  void unsafe_arena_set_allocated_modesettings(
      ::message::SceneEditModeProtoData* modesettings);
  ::message::SceneEditModeProtoData* unsafe_arena_release_modesettings();

  // .message.UGCUserDataForCensorship UserDataForCensorship = 16;
  bool has_userdataforcensorship() const;
  private:
  bool _internal_has_userdataforcensorship() const;
  public:
  void clear_userdataforcensorship();
  const ::message::UGCUserDataForCensorship& userdataforcensorship() const;
  PROTOBUF_NODISCARD ::message::UGCUserDataForCensorship* release_userdataforcensorship();
  ::message::UGCUserDataForCensorship* mutable_userdataforcensorship();
  void set_allocated_userdataforcensorship(::message::UGCUserDataForCensorship* userdataforcensorship);
  private:
  const ::message::UGCUserDataForCensorship& _internal_userdataforcensorship() const;
  ::message::UGCUserDataForCensorship* _internal_mutable_userdataforcensorship();
  public:
  void unsafe_arena_set_allocated_userdataforcensorship(
      ::message::UGCUserDataForCensorship* userdataforcensorship);
  ::message::UGCUserDataForCensorship* unsafe_arena_release_userdataforcensorship();

  // .message.UGCRoomHalfWayJoinRule halfWayJoinRule = 34;
  bool has_halfwayjoinrule() const;
  private:
  bool _internal_has_halfwayjoinrule() const;
  public:
  void clear_halfwayjoinrule();
  const ::message::UGCRoomHalfWayJoinRule& halfwayjoinrule() const;
  PROTOBUF_NODISCARD ::message::UGCRoomHalfWayJoinRule* release_halfwayjoinrule();
  ::message::UGCRoomHalfWayJoinRule* mutable_halfwayjoinrule();
  void set_allocated_halfwayjoinrule(::message::UGCRoomHalfWayJoinRule* halfwayjoinrule);
  private:
  const ::message::UGCRoomHalfWayJoinRule& _internal_halfwayjoinrule() const;
  ::message::UGCRoomHalfWayJoinRule* _internal_mutable_halfwayjoinrule();
  public:
  void unsafe_arena_set_allocated_halfwayjoinrule(
      ::message::UGCRoomHalfWayJoinRule* halfwayjoinrule);
  ::message::UGCRoomHalfWayJoinRule* unsafe_arena_release_halfwayjoinrule();

  // uint32 SlotID = 1;
  void clear_slotid();
  uint32_t slotid() const;
  void set_slotid(uint32_t value);
  private:
  uint32_t _internal_slotid() const;
  void _internal_set_slotid(uint32_t value);
  public:

  // uint32 GameMode = 4;
  void clear_gamemode();
  uint32_t gamemode() const;
  void set_gamemode(uint32_t value);
  private:
  uint32_t _internal_gamemode() const;
  void _internal_set_gamemode(uint32_t value);
  public:

  // uint32 GroupMode = 5;
  void clear_groupmode();
  uint32_t groupmode() const;
  void set_groupmode(uint32_t value);
  private:
  uint32_t _internal_groupmode() const;
  void _internal_set_groupmode(uint32_t value);
  public:

  // uint32 TeamCount = 6;
  void clear_teamcount();
  uint32_t teamcount() const;
  void set_teamcount(uint32_t value);
  private:
  uint32_t _internal_teamcount() const;
  void _internal_set_teamcount(uint32_t value);
  public:

  // uint64 GameResourceCount = 7;
  void clear_gameresourcecount();
  uint64_t gameresourcecount() const;
  void set_gameresourcecount(uint64_t value);
  private:
  uint64_t _internal_gameresourcecount() const;
  void _internal_set_gameresourcecount(uint64_t value);
  public:

  // uint64 GameTotalCost = 8;
  void clear_gametotalcost();
  uint64_t gametotalcost() const;
  void set_gametotalcost(uint64_t value);
  private:
  uint64_t _internal_gametotalcost() const;
  void _internal_set_gametotalcost(uint64_t value);
  public:

  // uint64 UpdateTime = 9;
  void clear_updatetime();
  uint64_t updatetime() const;
  void set_updatetime(uint64_t value);
  private:
  uint64_t _internal_updatetime() const;
  void _internal_set_updatetime(uint64_t value);
  public:

  // uint64 RuntimeDataLength = 14;
  void clear_runtimedatalength();
  uint64_t runtimedatalength() const;
  void set_runtimedatalength(uint64_t value);
  private:
  uint64_t _internal_runtimedatalength() const;
  void _internal_set_runtimedatalength(uint64_t value);
  public:

  // uint64 ProjectDataLength = 15;
  void clear_projectdatalength();
  uint64_t projectdatalength() const;
  void set_projectdatalength(uint64_t value);
  private:
  uint64_t _internal_projectdatalength() const;
  void _internal_set_projectdatalength(uint64_t value);
  public:

  // uint32 MapID = 17;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // .message.EUGCProjectVersion CompatibleVersion = 18;
  void clear_compatibleversion();
  ::message::EUGCProjectVersion compatibleversion() const;
  void set_compatibleversion(::message::EUGCProjectVersion value);
  private:
  ::message::EUGCProjectVersion _internal_compatibleversion() const;
  void _internal_set_compatibleversion(::message::EUGCProjectVersion value);
  public:

  // uint32 ModeTemplateId = 21;
  void clear_modetemplateid();
  uint32_t modetemplateid() const;
  void set_modetemplateid(uint32_t value);
  private:
  uint32_t _internal_modetemplateid() const;
  void _internal_set_modetemplateid(uint32_t value);
  public:

  // .message.UGCEditorError.ErrorSeverity Severity = 22;
  void clear_severity();
  ::message::UGCEditorError_ErrorSeverity severity() const;
  void set_severity(::message::UGCEditorError_ErrorSeverity value);
  private:
  ::message::UGCEditorError_ErrorSeverity _internal_severity() const;
  void _internal_set_severity(::message::UGCEditorError_ErrorSeverity value);
  public:

  // int32 PublicVersion = 24;
  void clear_publicversion();
  int32_t publicversion() const;
  void set_publicversion(int32_t value);
  private:
  int32_t _internal_publicversion() const;
  void _internal_set_publicversion(int32_t value);
  public:

  // bool SecEdit = 23;
  void clear_secedit();
  bool secedit() const;
  void set_secedit(bool value);
  private:
  bool _internal_secedit() const;
  void _internal_set_secedit(bool value);
  public:

  // bool notify_subscriber = 38;
  void clear_notify_subscriber();
  bool notify_subscriber() const;
  void set_notify_subscriber(bool value);
  private:
  bool _internal_notify_subscriber() const;
  void _internal_set_notify_subscriber(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCProjectMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tags_;
    mutable std::atomic<int> _tags_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData > locdata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datastorage_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> leaderboard_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statistic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamedesc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workshopbitmap_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workshopiconmap_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtimedatamd5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectdatamd5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originalworkshopcode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamenamekey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamedesckey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customcover_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customcoverurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomparams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packagedatamd5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openroomlocdatamd5_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subdesc_;
    ::message::SceneEditModeProtoData* modesettings_;
    ::message::UGCUserDataForCensorship* userdataforcensorship_;
    ::message::UGCRoomHalfWayJoinRule* halfwayjoinrule_;
    uint32_t slotid_;
    uint32_t gamemode_;
    uint32_t groupmode_;
    uint32_t teamcount_;
    uint64_t gameresourcecount_;
    uint64_t gametotalcost_;
    uint64_t updatetime_;
    uint64_t runtimedatalength_;
    uint64_t projectdatalength_;
    uint32_t mapid_;
    int compatibleversion_;
    uint32_t modetemplateid_;
    int severity_;
    int32_t publicversion_;
    bool secedit_;
    bool notify_subscriber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCUserDataForCensorship_BlobOfCustomStrings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCUserDataForCensorship.BlobOfCustomStrings) */ {
 public:
  inline UGCUserDataForCensorship_BlobOfCustomStrings() : UGCUserDataForCensorship_BlobOfCustomStrings(nullptr) {}
  ~UGCUserDataForCensorship_BlobOfCustomStrings() override;
  explicit PROTOBUF_CONSTEXPR UGCUserDataForCensorship_BlobOfCustomStrings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCUserDataForCensorship_BlobOfCustomStrings(const UGCUserDataForCensorship_BlobOfCustomStrings& from);
  UGCUserDataForCensorship_BlobOfCustomStrings(UGCUserDataForCensorship_BlobOfCustomStrings&& from) noexcept
    : UGCUserDataForCensorship_BlobOfCustomStrings() {
    *this = ::std::move(from);
  }

  inline UGCUserDataForCensorship_BlobOfCustomStrings& operator=(const UGCUserDataForCensorship_BlobOfCustomStrings& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCUserDataForCensorship_BlobOfCustomStrings& operator=(UGCUserDataForCensorship_BlobOfCustomStrings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCUserDataForCensorship_BlobOfCustomStrings& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCUserDataForCensorship_BlobOfCustomStrings* internal_default_instance() {
    return reinterpret_cast<const UGCUserDataForCensorship_BlobOfCustomStrings*>(
               &_UGCUserDataForCensorship_BlobOfCustomStrings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(UGCUserDataForCensorship_BlobOfCustomStrings& a, UGCUserDataForCensorship_BlobOfCustomStrings& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCUserDataForCensorship_BlobOfCustomStrings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCUserDataForCensorship_BlobOfCustomStrings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCUserDataForCensorship_BlobOfCustomStrings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCUserDataForCensorship_BlobOfCustomStrings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCUserDataForCensorship_BlobOfCustomStrings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCUserDataForCensorship_BlobOfCustomStrings& from) {
    UGCUserDataForCensorship_BlobOfCustomStrings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCUserDataForCensorship_BlobOfCustomStrings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCUserDataForCensorship.BlobOfCustomStrings";
  }
  protected:
  explicit UGCUserDataForCensorship_BlobOfCustomStrings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringListFieldNumber = 1,
    kEntityTypeNameFieldNumber = 3,
    kGraphIDFieldNumber = 5,
    kIDFieldNumber = 6,
    kEntityTypeFieldNumber = 2,
    kWordFilterTypeFieldNumber = 4,
  };
  // repeated string StringList = 1;
  int stringlist_size() const;
  private:
  int _internal_stringlist_size() const;
  public:
  void clear_stringlist();
  const std::string& stringlist(int index) const;
  std::string* mutable_stringlist(int index);
  void set_stringlist(int index, const std::string& value);
  void set_stringlist(int index, std::string&& value);
  void set_stringlist(int index, const char* value);
  void set_stringlist(int index, const char* value, size_t size);
  std::string* add_stringlist();
  void add_stringlist(const std::string& value);
  void add_stringlist(std::string&& value);
  void add_stringlist(const char* value);
  void add_stringlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stringlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stringlist();
  private:
  const std::string& _internal_stringlist(int index) const;
  std::string* _internal_add_stringlist();
  public:

  // string EntityTypeName = 3;
  void clear_entitytypename();
  const std::string& entitytypename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entitytypename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entitytypename();
  PROTOBUF_NODISCARD std::string* release_entitytypename();
  void set_allocated_entitytypename(std::string* entitytypename);
  private:
  const std::string& _internal_entitytypename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entitytypename(const std::string& value);
  std::string* _internal_mutable_entitytypename();
  public:

  // string GraphID = 5;
  void clear_graphid();
  const std::string& graphid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_graphid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_graphid();
  PROTOBUF_NODISCARD std::string* release_graphid();
  void set_allocated_graphid(std::string* graphid);
  private:
  const std::string& _internal_graphid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_graphid(const std::string& value);
  std::string* _internal_mutable_graphid();
  public:

  // string ID = 6;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 EntityType = 2;
  void clear_entitytype();
  uint32_t entitytype() const;
  void set_entitytype(uint32_t value);
  private:
  uint32_t _internal_entitytype() const;
  void _internal_set_entitytype(uint32_t value);
  public:

  // uint32 WordFilterType = 4;
  void clear_wordfiltertype();
  uint32_t wordfiltertype() const;
  void set_wordfiltertype(uint32_t value);
  private:
  uint32_t _internal_wordfiltertype() const;
  void _internal_set_wordfiltertype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCUserDataForCensorship.BlobOfCustomStrings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stringlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitytypename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr graphid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    uint32_t entitytype_;
    uint32_t wordfiltertype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCUserDataForCensorship final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCUserDataForCensorship) */ {
 public:
  inline UGCUserDataForCensorship() : UGCUserDataForCensorship(nullptr) {}
  ~UGCUserDataForCensorship() override;
  explicit PROTOBUF_CONSTEXPR UGCUserDataForCensorship(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCUserDataForCensorship(const UGCUserDataForCensorship& from);
  UGCUserDataForCensorship(UGCUserDataForCensorship&& from) noexcept
    : UGCUserDataForCensorship() {
    *this = ::std::move(from);
  }

  inline UGCUserDataForCensorship& operator=(const UGCUserDataForCensorship& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCUserDataForCensorship& operator=(UGCUserDataForCensorship&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCUserDataForCensorship& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCUserDataForCensorship* internal_default_instance() {
    return reinterpret_cast<const UGCUserDataForCensorship*>(
               &_UGCUserDataForCensorship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(UGCUserDataForCensorship& a, UGCUserDataForCensorship& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCUserDataForCensorship* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCUserDataForCensorship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCUserDataForCensorship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCUserDataForCensorship>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCUserDataForCensorship& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCUserDataForCensorship& from) {
    UGCUserDataForCensorship::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCUserDataForCensorship* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCUserDataForCensorship";
  }
  protected:
  explicit UGCUserDataForCensorship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UGCUserDataForCensorship_BlobOfCustomStrings BlobOfCustomStrings;

  // accessors -------------------------------------------------------

  enum : int {
    kCustomStringsFieldNumber = 1,
  };
  // repeated .message.UGCUserDataForCensorship.BlobOfCustomStrings CustomStrings = 1;
  int customstrings_size() const;
  private:
  int _internal_customstrings_size() const;
  public:
  void clear_customstrings();
  ::message::UGCUserDataForCensorship_BlobOfCustomStrings* mutable_customstrings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCUserDataForCensorship_BlobOfCustomStrings >*
      mutable_customstrings();
  private:
  const ::message::UGCUserDataForCensorship_BlobOfCustomStrings& _internal_customstrings(int index) const;
  ::message::UGCUserDataForCensorship_BlobOfCustomStrings* _internal_add_customstrings();
  public:
  const ::message::UGCUserDataForCensorship_BlobOfCustomStrings& customstrings(int index) const;
  ::message::UGCUserDataForCensorship_BlobOfCustomStrings* add_customstrings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCUserDataForCensorship_BlobOfCustomStrings >&
      customstrings() const;

  // @@protoc_insertion_point(class_scope:message.UGCUserDataForCensorship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCUserDataForCensorship_BlobOfCustomStrings > customstrings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCMapProjectData_OB35_And_Earlier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCMapProjectData_OB35_And_Earlier) */ {
 public:
  inline UGCMapProjectData_OB35_And_Earlier() : UGCMapProjectData_OB35_And_Earlier(nullptr) {}
  ~UGCMapProjectData_OB35_And_Earlier() override;
  explicit PROTOBUF_CONSTEXPR UGCMapProjectData_OB35_And_Earlier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCMapProjectData_OB35_And_Earlier(const UGCMapProjectData_OB35_And_Earlier& from);
  UGCMapProjectData_OB35_And_Earlier(UGCMapProjectData_OB35_And_Earlier&& from) noexcept
    : UGCMapProjectData_OB35_And_Earlier() {
    *this = ::std::move(from);
  }

  inline UGCMapProjectData_OB35_And_Earlier& operator=(const UGCMapProjectData_OB35_And_Earlier& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCMapProjectData_OB35_And_Earlier& operator=(UGCMapProjectData_OB35_And_Earlier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCMapProjectData_OB35_And_Earlier& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCMapProjectData_OB35_And_Earlier* internal_default_instance() {
    return reinterpret_cast<const UGCMapProjectData_OB35_And_Earlier*>(
               &_UGCMapProjectData_OB35_And_Earlier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(UGCMapProjectData_OB35_And_Earlier& a, UGCMapProjectData_OB35_And_Earlier& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCMapProjectData_OB35_And_Earlier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCMapProjectData_OB35_And_Earlier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCMapProjectData_OB35_And_Earlier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCMapProjectData_OB35_And_Earlier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCMapProjectData_OB35_And_Earlier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCMapProjectData_OB35_And_Earlier& from) {
    UGCMapProjectData_OB35_And_Earlier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCMapProjectData_OB35_And_Earlier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCMapProjectData_OB35_And_Earlier";
  }
  protected:
  explicit UGCMapProjectData_OB35_And_Earlier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityBindingDataBytesFieldNumber = 1,
    kRuntimeDataBytesFieldNumber = 2,
    kGameNameFieldNumber = 3,
    kGameDescFieldNumber = 4,
    kGameModeFieldNumber = 5,
    kGroupModeFieldNumber = 6,
    kTeamCountFieldNumber = 7,
  };
  // bytes EntityBindingDataBytes = 1;
  void clear_entitybindingdatabytes();
  const std::string& entitybindingdatabytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entitybindingdatabytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entitybindingdatabytes();
  PROTOBUF_NODISCARD std::string* release_entitybindingdatabytes();
  void set_allocated_entitybindingdatabytes(std::string* entitybindingdatabytes);
  private:
  const std::string& _internal_entitybindingdatabytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entitybindingdatabytes(const std::string& value);
  std::string* _internal_mutable_entitybindingdatabytes();
  public:

  // bytes RuntimeDataBytes = 2;
  void clear_runtimedatabytes();
  const std::string& runtimedatabytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtimedatabytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtimedatabytes();
  PROTOBUF_NODISCARD std::string* release_runtimedatabytes();
  void set_allocated_runtimedatabytes(std::string* runtimedatabytes);
  private:
  const std::string& _internal_runtimedatabytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtimedatabytes(const std::string& value);
  std::string* _internal_mutable_runtimedatabytes();
  public:

  // string GameName = 3;
  void clear_gamename();
  const std::string& gamename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamename();
  PROTOBUF_NODISCARD std::string* release_gamename();
  void set_allocated_gamename(std::string* gamename);
  private:
  const std::string& _internal_gamename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamename(const std::string& value);
  std::string* _internal_mutable_gamename();
  public:

  // string GameDesc = 4;
  void clear_gamedesc();
  const std::string& gamedesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamedesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamedesc();
  PROTOBUF_NODISCARD std::string* release_gamedesc();
  void set_allocated_gamedesc(std::string* gamedesc);
  private:
  const std::string& _internal_gamedesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamedesc(const std::string& value);
  std::string* _internal_mutable_gamedesc();
  public:

  // uint32 GameMode = 5;
  void clear_gamemode();
  uint32_t gamemode() const;
  void set_gamemode(uint32_t value);
  private:
  uint32_t _internal_gamemode() const;
  void _internal_set_gamemode(uint32_t value);
  public:

  // uint32 GroupMode = 6;
  void clear_groupmode();
  uint32_t groupmode() const;
  void set_groupmode(uint32_t value);
  private:
  uint32_t _internal_groupmode() const;
  void _internal_set_groupmode(uint32_t value);
  public:

  // uint32 TeamCount = 7;
  void clear_teamcount();
  uint32_t teamcount() const;
  void set_teamcount(uint32_t value);
  private:
  uint32_t _internal_teamcount() const;
  void _internal_set_teamcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCMapProjectData_OB35_And_Earlier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitybindingdatabytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtimedatabytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamedesc_;
    uint32_t gamemode_;
    uint32_t groupmode_;
    uint32_t teamcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCMapProjectData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCMapProjectData) */ {
 public:
  inline UGCMapProjectData() : UGCMapProjectData(nullptr) {}
  ~UGCMapProjectData() override;
  explicit PROTOBUF_CONSTEXPR UGCMapProjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCMapProjectData(const UGCMapProjectData& from);
  UGCMapProjectData(UGCMapProjectData&& from) noexcept
    : UGCMapProjectData() {
    *this = ::std::move(from);
  }

  inline UGCMapProjectData& operator=(const UGCMapProjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCMapProjectData& operator=(UGCMapProjectData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCMapProjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCMapProjectData* internal_default_instance() {
    return reinterpret_cast<const UGCMapProjectData*>(
               &_UGCMapProjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(UGCMapProjectData& a, UGCMapProjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCMapProjectData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCMapProjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCMapProjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCMapProjectData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCMapProjectData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCMapProjectData& from) {
    UGCMapProjectData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCMapProjectData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCMapProjectData";
  }
  protected:
  explicit UGCMapProjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllEntityDataFieldNumber = 1,
    kRuntimeDataBytesFieldNumber = 2,
    kGameNameFieldNumber = 3,
    kGameDescFieldNumber = 4,
    kGameModeFieldNumber = 5,
    kGroupModeFieldNumber = 6,
    kTeamCountFieldNumber = 7,
  };
  // repeated .message.UGCLogicEntityDataForEditor AllEntityData = 1;
  int allentitydata_size() const;
  private:
  int _internal_allentitydata_size() const;
  public:
  void clear_allentitydata();
  ::message::UGCLogicEntityDataForEditor* mutable_allentitydata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataForEditor >*
      mutable_allentitydata();
  private:
  const ::message::UGCLogicEntityDataForEditor& _internal_allentitydata(int index) const;
  ::message::UGCLogicEntityDataForEditor* _internal_add_allentitydata();
  public:
  const ::message::UGCLogicEntityDataForEditor& allentitydata(int index) const;
  ::message::UGCLogicEntityDataForEditor* add_allentitydata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataForEditor >&
      allentitydata() const;

  // bytes RuntimeDataBytes = 2;
  void clear_runtimedatabytes();
  const std::string& runtimedatabytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtimedatabytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtimedatabytes();
  PROTOBUF_NODISCARD std::string* release_runtimedatabytes();
  void set_allocated_runtimedatabytes(std::string* runtimedatabytes);
  private:
  const std::string& _internal_runtimedatabytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtimedatabytes(const std::string& value);
  std::string* _internal_mutable_runtimedatabytes();
  public:

  // string GameName = 3;
  void clear_gamename();
  const std::string& gamename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamename();
  PROTOBUF_NODISCARD std::string* release_gamename();
  void set_allocated_gamename(std::string* gamename);
  private:
  const std::string& _internal_gamename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamename(const std::string& value);
  std::string* _internal_mutable_gamename();
  public:

  // string GameDesc = 4;
  void clear_gamedesc();
  const std::string& gamedesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gamedesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gamedesc();
  PROTOBUF_NODISCARD std::string* release_gamedesc();
  void set_allocated_gamedesc(std::string* gamedesc);
  private:
  const std::string& _internal_gamedesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gamedesc(const std::string& value);
  std::string* _internal_mutable_gamedesc();
  public:

  // uint32 GameMode = 5;
  void clear_gamemode();
  uint32_t gamemode() const;
  void set_gamemode(uint32_t value);
  private:
  uint32_t _internal_gamemode() const;
  void _internal_set_gamemode(uint32_t value);
  public:

  // uint32 GroupMode = 6;
  void clear_groupmode();
  uint32_t groupmode() const;
  void set_groupmode(uint32_t value);
  private:
  uint32_t _internal_groupmode() const;
  void _internal_set_groupmode(uint32_t value);
  public:

  // uint32 TeamCount = 7;
  void clear_teamcount();
  uint32_t teamcount() const;
  void set_teamcount(uint32_t value);
  private:
  uint32_t _internal_teamcount() const;
  void _internal_set_teamcount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCMapProjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataForEditor > allentitydata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtimedatabytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamedesc_;
    uint32_t gamemode_;
    uint32_t groupmode_;
    uint32_t teamcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCEditorError_ErrorCodeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCEditorError.ErrorCodeData) */ {
 public:
  inline UGCEditorError_ErrorCodeData() : UGCEditorError_ErrorCodeData(nullptr) {}
  ~UGCEditorError_ErrorCodeData() override;
  explicit PROTOBUF_CONSTEXPR UGCEditorError_ErrorCodeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCEditorError_ErrorCodeData(const UGCEditorError_ErrorCodeData& from);
  UGCEditorError_ErrorCodeData(UGCEditorError_ErrorCodeData&& from) noexcept
    : UGCEditorError_ErrorCodeData() {
    *this = ::std::move(from);
  }

  inline UGCEditorError_ErrorCodeData& operator=(const UGCEditorError_ErrorCodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCEditorError_ErrorCodeData& operator=(UGCEditorError_ErrorCodeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCEditorError_ErrorCodeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCEditorError_ErrorCodeData* internal_default_instance() {
    return reinterpret_cast<const UGCEditorError_ErrorCodeData*>(
               &_UGCEditorError_ErrorCodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(UGCEditorError_ErrorCodeData& a, UGCEditorError_ErrorCodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCEditorError_ErrorCodeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCEditorError_ErrorCodeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCEditorError_ErrorCodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCEditorError_ErrorCodeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCEditorError_ErrorCodeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCEditorError_ErrorCodeData& from) {
    UGCEditorError_ErrorCodeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCEditorError_ErrorCodeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCEditorError.ErrorCodeData";
  }
  protected:
  explicit UGCEditorError_ErrorCodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocKeyFieldNumber = 4,
    kConsoleKEYFieldNumber = 5,
    kErrorCodeFieldNumber = 1,
    kSeverityFieldNumber = 2,
    kPriorityFieldNumber = 3,
  };
  // string LocKey = 4;
  void clear_lockey();
  const std::string& lockey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lockey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lockey();
  PROTOBUF_NODISCARD std::string* release_lockey();
  void set_allocated_lockey(std::string* lockey);
  private:
  const std::string& _internal_lockey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lockey(const std::string& value);
  std::string* _internal_mutable_lockey();
  public:

  // string ConsoleKEY = 5;
  void clear_consolekey();
  const std::string& consolekey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consolekey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consolekey();
  PROTOBUF_NODISCARD std::string* release_consolekey();
  void set_allocated_consolekey(std::string* consolekey);
  private:
  const std::string& _internal_consolekey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consolekey(const std::string& value);
  std::string* _internal_mutable_consolekey();
  public:

  // .message.UGCEditorError.ErrorCode ErrorCode = 1;
  void clear_errorcode();
  ::message::UGCEditorError_ErrorCode errorcode() const;
  void set_errorcode(::message::UGCEditorError_ErrorCode value);
  private:
  ::message::UGCEditorError_ErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::message::UGCEditorError_ErrorCode value);
  public:

  // .message.UGCEditorError.ErrorSeverity Severity = 2;
  void clear_severity();
  ::message::UGCEditorError_ErrorSeverity severity() const;
  void set_severity(::message::UGCEditorError_ErrorSeverity value);
  private:
  ::message::UGCEditorError_ErrorSeverity _internal_severity() const;
  void _internal_set_severity(::message::UGCEditorError_ErrorSeverity value);
  public:

  // uint32 Priority = 3;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCEditorError.ErrorCodeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lockey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consolekey_;
    int errorcode_;
    int severity_;
    uint32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCEditorError_ErrorEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCEditorError.ErrorEntry) */ {
 public:
  inline UGCEditorError_ErrorEntry() : UGCEditorError_ErrorEntry(nullptr) {}
  ~UGCEditorError_ErrorEntry() override;
  explicit PROTOBUF_CONSTEXPR UGCEditorError_ErrorEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCEditorError_ErrorEntry(const UGCEditorError_ErrorEntry& from);
  UGCEditorError_ErrorEntry(UGCEditorError_ErrorEntry&& from) noexcept
    : UGCEditorError_ErrorEntry() {
    *this = ::std::move(from);
  }

  inline UGCEditorError_ErrorEntry& operator=(const UGCEditorError_ErrorEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCEditorError_ErrorEntry& operator=(UGCEditorError_ErrorEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCEditorError_ErrorEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCEditorError_ErrorEntry* internal_default_instance() {
    return reinterpret_cast<const UGCEditorError_ErrorEntry*>(
               &_UGCEditorError_ErrorEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(UGCEditorError_ErrorEntry& a, UGCEditorError_ErrorEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCEditorError_ErrorEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCEditorError_ErrorEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCEditorError_ErrorEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCEditorError_ErrorEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCEditorError_ErrorEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCEditorError_ErrorEntry& from) {
    UGCEditorError_ErrorEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCEditorError_ErrorEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCEditorError.ErrorEntry";
  }
  protected:
  explicit UGCEditorError_ErrorEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraParamsFieldNumber = 7,
    kEntityTypeFieldNumber = 2,
    kEntityIDFieldNumber = 3,
    kGraphIDFieldNumber = 4,
    kBlockIDFieldNumber = 6,
    kErrorCodeFieldNumber = 1,
    kSceneEditItemTypeFieldNumber = 5,
  };
  // repeated string ExtraParams = 7;
  int extraparams_size() const;
  private:
  int _internal_extraparams_size() const;
  public:
  void clear_extraparams();
  const std::string& extraparams(int index) const;
  std::string* mutable_extraparams(int index);
  void set_extraparams(int index, const std::string& value);
  void set_extraparams(int index, std::string&& value);
  void set_extraparams(int index, const char* value);
  void set_extraparams(int index, const char* value, size_t size);
  std::string* add_extraparams();
  void add_extraparams(const std::string& value);
  void add_extraparams(std::string&& value);
  void add_extraparams(const char* value);
  void add_extraparams(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& extraparams() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_extraparams();
  private:
  const std::string& _internal_extraparams(int index) const;
  std::string* _internal_add_extraparams();
  public:

  // string EntityType = 2;
  void clear_entitytype();
  const std::string& entitytype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entitytype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entitytype();
  PROTOBUF_NODISCARD std::string* release_entitytype();
  void set_allocated_entitytype(std::string* entitytype);
  private:
  const std::string& _internal_entitytype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entitytype(const std::string& value);
  std::string* _internal_mutable_entitytype();
  public:

  // string EntityID = 3;
  void clear_entityid();
  const std::string& entityid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entityid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entityid();
  PROTOBUF_NODISCARD std::string* release_entityid();
  void set_allocated_entityid(std::string* entityid);
  private:
  const std::string& _internal_entityid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entityid(const std::string& value);
  std::string* _internal_mutable_entityid();
  public:

  // string GraphID = 4;
  void clear_graphid();
  const std::string& graphid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_graphid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_graphid();
  PROTOBUF_NODISCARD std::string* release_graphid();
  void set_allocated_graphid(std::string* graphid);
  private:
  const std::string& _internal_graphid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_graphid(const std::string& value);
  std::string* _internal_mutable_graphid();
  public:

  // string BlockID = 6;
  void clear_blockid();
  const std::string& blockid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blockid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blockid();
  PROTOBUF_NODISCARD std::string* release_blockid();
  void set_allocated_blockid(std::string* blockid);
  private:
  const std::string& _internal_blockid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blockid(const std::string& value);
  std::string* _internal_mutable_blockid();
  public:

  // .message.UGCEditorError.ErrorCode ErrorCode = 1;
  void clear_errorcode();
  ::message::UGCEditorError_ErrorCode errorcode() const;
  void set_errorcode(::message::UGCEditorError_ErrorCode value);
  private:
  ::message::UGCEditorError_ErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::message::UGCEditorError_ErrorCode value);
  public:

  // uint32 SceneEditItemType = 5;
  void clear_sceneedititemtype();
  uint32_t sceneedititemtype() const;
  void set_sceneedititemtype(uint32_t value);
  private:
  uint32_t _internal_sceneedititemtype() const;
  void _internal_set_sceneedititemtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCEditorError.ErrorEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> extraparams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitytype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entityid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr graphid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockid_;
    int errorcode_;
    uint32_t sceneedititemtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCEditorError final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:message.UGCEditorError) */ {
 public:
  inline UGCEditorError() : UGCEditorError(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UGCEditorError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCEditorError(const UGCEditorError& from);
  UGCEditorError(UGCEditorError&& from) noexcept
    : UGCEditorError() {
    *this = ::std::move(from);
  }

  inline UGCEditorError& operator=(const UGCEditorError& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCEditorError& operator=(UGCEditorError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCEditorError& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCEditorError* internal_default_instance() {
    return reinterpret_cast<const UGCEditorError*>(
               &_UGCEditorError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(UGCEditorError& a, UGCEditorError& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCEditorError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCEditorError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCEditorError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCEditorError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UGCEditorError& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UGCEditorError& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCEditorError";
  }
  protected:
  explicit UGCEditorError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UGCEditorError_ErrorCodeData ErrorCodeData;
  typedef UGCEditorError_ErrorEntry ErrorEntry;

  typedef UGCEditorError_ErrorCode ErrorCode;
  static constexpr ErrorCode ErrorCode_Unknown =
    UGCEditorError_ErrorCode_ErrorCode_Unknown;
  static constexpr ErrorCode ErrorCode_Reserved_MaxValue =
    UGCEditorError_ErrorCode_ErrorCode_Reserved_MaxValue;
  static constexpr ErrorCode ErrorCode_Map_InsufficientSpawnPoints =
    UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientSpawnPoints;
  static constexpr ErrorCode ErrorCode_Map_InsufficientTargetPoints =
    UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientTargetPoints;
  static constexpr ErrorCode ErrorCode_Map_InsufficientMustModeItems =
    UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientMustModeItems;
  static constexpr ErrorCode ErrorCode_Map_CostExceedLimit =
    UGCEditorError_ErrorCode_ErrorCode_Map_CostExceedLimit;
  static constexpr ErrorCode ErrorCode_Map_ObjectExceedLimit =
    UGCEditorError_ErrorCode_ErrorCode_Map_ObjectExceedLimit;
  static constexpr ErrorCode ErrorCode_Map_InsufficientAllTeamSpawnPointsNum =
    UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientAllTeamSpawnPointsNum;
  static constexpr ErrorCode ErrorCode_Map_InsufficientSingleTeamSpawnPoints =
    UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientSingleTeamSpawnPoints;
  static constexpr ErrorCode ErrorCode_Map_InsufficientSingleTeamSpawnPointsNum =
    UGCEditorError_ErrorCode_ErrorCode_Map_InsufficientSingleTeamSpawnPointsNum;
  static constexpr ErrorCode ErrorCode_Graph_MissingReference =
    UGCEditorError_ErrorCode_ErrorCode_Graph_MissingReference;
  static constexpr ErrorCode ErrorCode_Graph_TypeMismatch =
    UGCEditorError_ErrorCode_ErrorCode_Graph_TypeMismatch;
  static constexpr ErrorCode ErrorCode_Graph_VariableOutOfScope =
    UGCEditorError_ErrorCode_ErrorCode_Graph_VariableOutOfScope;
  static constexpr ErrorCode ErrorCode_Graph_ExceedLimit =
    UGCEditorError_ErrorCode_ErrorCode_Graph_ExceedLimit;
  static constexpr ErrorCode ErrorCode_Graph_ReturnOutOfScope =
    UGCEditorError_ErrorCode_ErrorCode_Graph_ReturnOutOfScope;
  static constexpr ErrorCode ErrorCode_Graph_ReturnWithoutValueOutOfScope =
    UGCEditorError_ErrorCode_ErrorCode_Graph_ReturnWithoutValueOutOfScope;
  static constexpr ErrorCode ErrorCode_Graph_ReturnWithValueOutOfScope =
    UGCEditorError_ErrorCode_ErrorCode_Graph_ReturnWithValueOutOfScope;
  static constexpr ErrorCode ErrorCode_Graph_InvalidEvent =
    UGCEditorError_ErrorCode_ErrorCode_Graph_InvalidEvent;
  static constexpr ErrorCode ErrorCode_Graph_ForbbidenEmptySlot =
    UGCEditorError_ErrorCode_ErrorCode_Graph_ForbbidenEmptySlot;
  static constexpr ErrorCode ErrorCode_Graph_EntityPropertyObsolete =
    UGCEditorError_ErrorCode_ErrorCode_Graph_EntityPropertyObsolete;
  static constexpr ErrorCode ErrorCode_Hud_InterfaceExceedLimit =
    UGCEditorError_ErrorCode_ErrorCode_Hud_InterfaceExceedLimit;
  static constexpr ErrorCode ErrorCode_Hud_ControlExceedLimit =
    UGCEditorError_ErrorCode_ErrorCode_Hud_ControlExceedLimit;
  static inline bool ErrorCode_IsValid(int value) {
    return UGCEditorError_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    UGCEditorError_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    UGCEditorError_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    UGCEditorError_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return UGCEditorError_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return UGCEditorError_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorCode* value) {
    return UGCEditorError_ErrorCode_Parse(name, value);
  }

  typedef UGCEditorError_ErrorSeverity ErrorSeverity;
  static constexpr ErrorSeverity ErrorSeverity_None =
    UGCEditorError_ErrorSeverity_ErrorSeverity_None;
  static constexpr ErrorSeverity ErrorSeverity_Panic =
    UGCEditorError_ErrorSeverity_ErrorSeverity_Panic;
  static constexpr ErrorSeverity ErrorSeverity_Error =
    UGCEditorError_ErrorSeverity_ErrorSeverity_Error;
  static constexpr ErrorSeverity ErrorSeverity_Warning =
    UGCEditorError_ErrorSeverity_ErrorSeverity_Warning;
  static inline bool ErrorSeverity_IsValid(int value) {
    return UGCEditorError_ErrorSeverity_IsValid(value);
  }
  static constexpr ErrorSeverity ErrorSeverity_MIN =
    UGCEditorError_ErrorSeverity_ErrorSeverity_MIN;
  static constexpr ErrorSeverity ErrorSeverity_MAX =
    UGCEditorError_ErrorSeverity_ErrorSeverity_MAX;
  static constexpr int ErrorSeverity_ARRAYSIZE =
    UGCEditorError_ErrorSeverity_ErrorSeverity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorSeverity_descriptor() {
    return UGCEditorError_ErrorSeverity_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorSeverity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorSeverity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorSeverity_Name.");
    return UGCEditorError_ErrorSeverity_Name(enum_t_value);
  }
  static inline bool ErrorSeverity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorSeverity* value) {
    return UGCEditorError_ErrorSeverity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:message.UGCEditorError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamSingleIntItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamSingleIntItem) */ {
 public:
  inline RoomCustomParamSingleIntItem() : RoomCustomParamSingleIntItem(nullptr) {}
  ~RoomCustomParamSingleIntItem() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamSingleIntItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamSingleIntItem(const RoomCustomParamSingleIntItem& from);
  RoomCustomParamSingleIntItem(RoomCustomParamSingleIntItem&& from) noexcept
    : RoomCustomParamSingleIntItem() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamSingleIntItem& operator=(const RoomCustomParamSingleIntItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamSingleIntItem& operator=(RoomCustomParamSingleIntItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamSingleIntItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomCustomParamSingleIntItem* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamSingleIntItem*>(
               &_RoomCustomParamSingleIntItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(RoomCustomParamSingleIntItem& a, RoomCustomParamSingleIntItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamSingleIntItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamSingleIntItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamSingleIntItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamSingleIntItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamSingleIntItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamSingleIntItem& from) {
    RoomCustomParamSingleIntItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamSingleIntItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamSingleIntItem";
  }
  protected:
  explicit RoomCustomParamSingleIntItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelKeyFieldNumber = 2,
    kDefaultTextFieldNumber = 3,
    kValueFieldNumber = 1,
  };
  // string LabelKey = 2;
  void clear_labelkey();
  const std::string& labelkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_labelkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_labelkey();
  PROTOBUF_NODISCARD std::string* release_labelkey();
  void set_allocated_labelkey(std::string* labelkey);
  private:
  const std::string& _internal_labelkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_labelkey(const std::string& value);
  std::string* _internal_mutable_labelkey();
  public:

  // string DefaultText = 3;
  void clear_defaulttext();
  const std::string& defaulttext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_defaulttext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_defaulttext();
  PROTOBUF_NODISCARD std::string* release_defaulttext();
  void set_allocated_defaulttext(std::string* defaulttext);
  private:
  const std::string& _internal_defaulttext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_defaulttext(const std::string& value);
  std::string* _internal_mutable_defaulttext();
  public:

  // int32 Value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.RoomCustomParamSingleIntItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labelkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defaulttext_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamSingleFloatItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamSingleFloatItem) */ {
 public:
  inline RoomCustomParamSingleFloatItem() : RoomCustomParamSingleFloatItem(nullptr) {}
  ~RoomCustomParamSingleFloatItem() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamSingleFloatItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamSingleFloatItem(const RoomCustomParamSingleFloatItem& from);
  RoomCustomParamSingleFloatItem(RoomCustomParamSingleFloatItem&& from) noexcept
    : RoomCustomParamSingleFloatItem() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamSingleFloatItem& operator=(const RoomCustomParamSingleFloatItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamSingleFloatItem& operator=(RoomCustomParamSingleFloatItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamSingleFloatItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomCustomParamSingleFloatItem* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamSingleFloatItem*>(
               &_RoomCustomParamSingleFloatItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(RoomCustomParamSingleFloatItem& a, RoomCustomParamSingleFloatItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamSingleFloatItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamSingleFloatItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamSingleFloatItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamSingleFloatItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamSingleFloatItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamSingleFloatItem& from) {
    RoomCustomParamSingleFloatItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamSingleFloatItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamSingleFloatItem";
  }
  protected:
  explicit RoomCustomParamSingleFloatItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelKeyFieldNumber = 2,
    kDefaultTextFieldNumber = 3,
    kValueFieldNumber = 1,
  };
  // string LabelKey = 2;
  void clear_labelkey();
  const std::string& labelkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_labelkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_labelkey();
  PROTOBUF_NODISCARD std::string* release_labelkey();
  void set_allocated_labelkey(std::string* labelkey);
  private:
  const std::string& _internal_labelkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_labelkey(const std::string& value);
  std::string* _internal_mutable_labelkey();
  public:

  // string DefaultText = 3;
  void clear_defaulttext();
  const std::string& defaulttext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_defaulttext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_defaulttext();
  PROTOBUF_NODISCARD std::string* release_defaulttext();
  void set_allocated_defaulttext(std::string* defaulttext);
  private:
  const std::string& _internal_defaulttext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_defaulttext(const std::string& value);
  std::string* _internal_mutable_defaulttext();
  public:

  // float Value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.RoomCustomParamSingleFloatItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labelkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defaulttext_;
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamSliderInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamSliderInt) */ {
 public:
  inline RoomCustomParamSliderInt() : RoomCustomParamSliderInt(nullptr) {}
  ~RoomCustomParamSliderInt() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamSliderInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamSliderInt(const RoomCustomParamSliderInt& from);
  RoomCustomParamSliderInt(RoomCustomParamSliderInt&& from) noexcept
    : RoomCustomParamSliderInt() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamSliderInt& operator=(const RoomCustomParamSliderInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamSliderInt& operator=(RoomCustomParamSliderInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamSliderInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomCustomParamSliderInt* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamSliderInt*>(
               &_RoomCustomParamSliderInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(RoomCustomParamSliderInt& a, RoomCustomParamSliderInt& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamSliderInt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamSliderInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamSliderInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamSliderInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamSliderInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamSliderInt& from) {
    RoomCustomParamSliderInt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamSliderInt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamSliderInt";
  }
  protected:
  explicit RoomCustomParamSliderInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinValueFieldNumber = 1,
    kMaxValueFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // int32 MinValue = 1;
  void clear_minvalue();
  int32_t minvalue() const;
  void set_minvalue(int32_t value);
  private:
  int32_t _internal_minvalue() const;
  void _internal_set_minvalue(int32_t value);
  public:

  // int32 MaxValue = 2;
  void clear_maxvalue();
  int32_t maxvalue() const;
  void set_maxvalue(int32_t value);
  private:
  int32_t _internal_maxvalue() const;
  void _internal_set_maxvalue(int32_t value);
  public:

  // int32 Value = 3;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.RoomCustomParamSliderInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t minvalue_;
    int32_t maxvalue_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamSliderFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamSliderFloat) */ {
 public:
  inline RoomCustomParamSliderFloat() : RoomCustomParamSliderFloat(nullptr) {}
  ~RoomCustomParamSliderFloat() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamSliderFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamSliderFloat(const RoomCustomParamSliderFloat& from);
  RoomCustomParamSliderFloat(RoomCustomParamSliderFloat&& from) noexcept
    : RoomCustomParamSliderFloat() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamSliderFloat& operator=(const RoomCustomParamSliderFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamSliderFloat& operator=(RoomCustomParamSliderFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamSliderFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomCustomParamSliderFloat* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamSliderFloat*>(
               &_RoomCustomParamSliderFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(RoomCustomParamSliderFloat& a, RoomCustomParamSliderFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamSliderFloat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamSliderFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamSliderFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamSliderFloat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamSliderFloat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamSliderFloat& from) {
    RoomCustomParamSliderFloat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamSliderFloat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamSliderFloat";
  }
  protected:
  explicit RoomCustomParamSliderFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinValueFieldNumber = 1,
    kMaxValueFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // float MinValue = 1;
  void clear_minvalue();
  float minvalue() const;
  void set_minvalue(float value);
  private:
  float _internal_minvalue() const;
  void _internal_set_minvalue(float value);
  public:

  // float MaxValue = 2;
  void clear_maxvalue();
  float maxvalue() const;
  void set_maxvalue(float value);
  private:
  float _internal_maxvalue() const;
  void _internal_set_maxvalue(float value);
  public:

  // float Value = 3;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.RoomCustomParamSliderFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float minvalue_;
    float maxvalue_;
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamSingleChooseInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamSingleChooseInt) */ {
 public:
  inline RoomCustomParamSingleChooseInt() : RoomCustomParamSingleChooseInt(nullptr) {}
  ~RoomCustomParamSingleChooseInt() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamSingleChooseInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamSingleChooseInt(const RoomCustomParamSingleChooseInt& from);
  RoomCustomParamSingleChooseInt(RoomCustomParamSingleChooseInt&& from) noexcept
    : RoomCustomParamSingleChooseInt() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamSingleChooseInt& operator=(const RoomCustomParamSingleChooseInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamSingleChooseInt& operator=(RoomCustomParamSingleChooseInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamSingleChooseInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomCustomParamSingleChooseInt* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamSingleChooseInt*>(
               &_RoomCustomParamSingleChooseInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(RoomCustomParamSingleChooseInt& a, RoomCustomParamSingleChooseInt& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamSingleChooseInt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamSingleChooseInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamSingleChooseInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamSingleChooseInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamSingleChooseInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamSingleChooseInt& from) {
    RoomCustomParamSingleChooseInt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamSingleChooseInt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamSingleChooseInt";
  }
  protected:
  explicit RoomCustomParamSingleChooseInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // repeated .message.RoomCustomParamSingleIntItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::message::RoomCustomParamSingleIntItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem >*
      mutable_items();
  private:
  const ::message::RoomCustomParamSingleIntItem& _internal_items(int index) const;
  ::message::RoomCustomParamSingleIntItem* _internal_add_items();
  public:
  const ::message::RoomCustomParamSingleIntItem& items(int index) const;
  ::message::RoomCustomParamSingleIntItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem >&
      items() const;

  // int32 Index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.RoomCustomParamSingleChooseInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem > items_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamSingleChooseFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamSingleChooseFloat) */ {
 public:
  inline RoomCustomParamSingleChooseFloat() : RoomCustomParamSingleChooseFloat(nullptr) {}
  ~RoomCustomParamSingleChooseFloat() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamSingleChooseFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamSingleChooseFloat(const RoomCustomParamSingleChooseFloat& from);
  RoomCustomParamSingleChooseFloat(RoomCustomParamSingleChooseFloat&& from) noexcept
    : RoomCustomParamSingleChooseFloat() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamSingleChooseFloat& operator=(const RoomCustomParamSingleChooseFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamSingleChooseFloat& operator=(RoomCustomParamSingleChooseFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamSingleChooseFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomCustomParamSingleChooseFloat* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamSingleChooseFloat*>(
               &_RoomCustomParamSingleChooseFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(RoomCustomParamSingleChooseFloat& a, RoomCustomParamSingleChooseFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamSingleChooseFloat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamSingleChooseFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamSingleChooseFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamSingleChooseFloat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamSingleChooseFloat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamSingleChooseFloat& from) {
    RoomCustomParamSingleChooseFloat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamSingleChooseFloat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamSingleChooseFloat";
  }
  protected:
  explicit RoomCustomParamSingleChooseFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // repeated .message.RoomCustomParamSingleFloatItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::message::RoomCustomParamSingleFloatItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleFloatItem >*
      mutable_items();
  private:
  const ::message::RoomCustomParamSingleFloatItem& _internal_items(int index) const;
  ::message::RoomCustomParamSingleFloatItem* _internal_add_items();
  public:
  const ::message::RoomCustomParamSingleFloatItem& items(int index) const;
  ::message::RoomCustomParamSingleFloatItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleFloatItem >&
      items() const;

  // int32 Index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.RoomCustomParamSingleChooseFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleFloatItem > items_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamMultiChooseInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamMultiChooseInt) */ {
 public:
  inline RoomCustomParamMultiChooseInt() : RoomCustomParamMultiChooseInt(nullptr) {}
  ~RoomCustomParamMultiChooseInt() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamMultiChooseInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamMultiChooseInt(const RoomCustomParamMultiChooseInt& from);
  RoomCustomParamMultiChooseInt(RoomCustomParamMultiChooseInt&& from) noexcept
    : RoomCustomParamMultiChooseInt() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamMultiChooseInt& operator=(const RoomCustomParamMultiChooseInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamMultiChooseInt& operator=(RoomCustomParamMultiChooseInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamMultiChooseInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomCustomParamMultiChooseInt* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamMultiChooseInt*>(
               &_RoomCustomParamMultiChooseInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(RoomCustomParamMultiChooseInt& a, RoomCustomParamMultiChooseInt& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamMultiChooseInt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamMultiChooseInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamMultiChooseInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamMultiChooseInt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamMultiChooseInt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamMultiChooseInt& from) {
    RoomCustomParamMultiChooseInt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamMultiChooseInt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamMultiChooseInt";
  }
  protected:
  explicit RoomCustomParamMultiChooseInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexListFieldNumber = 1,
    kItemsFieldNumber = 2,
  };
  // repeated int32 IndexList = 1;
  int indexlist_size() const;
  private:
  int _internal_indexlist_size() const;
  public:
  void clear_indexlist();
  private:
  int32_t _internal_indexlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_indexlist() const;
  void _internal_add_indexlist(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_indexlist();
  public:
  int32_t indexlist(int index) const;
  void set_indexlist(int index, int32_t value);
  void add_indexlist(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      indexlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_indexlist();

  // repeated .message.RoomCustomParamSingleIntItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::message::RoomCustomParamSingleIntItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem >*
      mutable_items();
  private:
  const ::message::RoomCustomParamSingleIntItem& _internal_items(int index) const;
  ::message::RoomCustomParamSingleIntItem* _internal_add_items();
  public:
  const ::message::RoomCustomParamSingleIntItem& items(int index) const;
  ::message::RoomCustomParamSingleIntItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:message.RoomCustomParamMultiChooseInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > indexlist_;
    mutable std::atomic<int> _indexlist_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamData) */ {
 public:
  inline RoomCustomParamData() : RoomCustomParamData(nullptr) {}
  ~RoomCustomParamData() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamData(const RoomCustomParamData& from);
  RoomCustomParamData(RoomCustomParamData&& from) noexcept
    : RoomCustomParamData() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamData& operator=(const RoomCustomParamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamData& operator=(RoomCustomParamData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamData& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kBoolValue = 5,
    kSliderInt = 7,
    kSliderFloat = 8,
    kSingleChooseInt = 9,
    kSingleChooseFloat = 10,
    VALUE_NOT_SET = 0,
  };

  static inline const RoomCustomParamData* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamData*>(
               &_RoomCustomParamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(RoomCustomParamData& a, RoomCustomParamData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamData& from) {
    RoomCustomParamData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamData";
  }
  protected:
  explicit RoomCustomParamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelKeyFieldNumber = 2,
    kDefaultTextFieldNumber = 3,
    kMultiChooseIntFieldNumber = 6,
    kIDFieldNumber = 1,
    kTypeFieldNumber = 4,
    kBoolValueFieldNumber = 5,
    kSliderIntFieldNumber = 7,
    kSliderFloatFieldNumber = 8,
    kSingleChooseIntFieldNumber = 9,
    kSingleChooseFloatFieldNumber = 10,
  };
  // string LabelKey = 2;
  void clear_labelkey();
  const std::string& labelkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_labelkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_labelkey();
  PROTOBUF_NODISCARD std::string* release_labelkey();
  void set_allocated_labelkey(std::string* labelkey);
  private:
  const std::string& _internal_labelkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_labelkey(const std::string& value);
  std::string* _internal_mutable_labelkey();
  public:

  // string DefaultText = 3;
  void clear_defaulttext();
  const std::string& defaulttext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_defaulttext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_defaulttext();
  PROTOBUF_NODISCARD std::string* release_defaulttext();
  void set_allocated_defaulttext(std::string* defaulttext);
  private:
  const std::string& _internal_defaulttext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_defaulttext(const std::string& value);
  std::string* _internal_mutable_defaulttext();
  public:

  // .message.RoomCustomParamMultiChooseInt MultiChooseInt = 6;
  bool has_multichooseint() const;
  private:
  bool _internal_has_multichooseint() const;
  public:
  void clear_multichooseint();
  const ::message::RoomCustomParamMultiChooseInt& multichooseint() const;
  PROTOBUF_NODISCARD ::message::RoomCustomParamMultiChooseInt* release_multichooseint();
  ::message::RoomCustomParamMultiChooseInt* mutable_multichooseint();
  void set_allocated_multichooseint(::message::RoomCustomParamMultiChooseInt* multichooseint);
  private:
  const ::message::RoomCustomParamMultiChooseInt& _internal_multichooseint() const;
  ::message::RoomCustomParamMultiChooseInt* _internal_mutable_multichooseint();
  public:
  void unsafe_arena_set_allocated_multichooseint(
      ::message::RoomCustomParamMultiChooseInt* multichooseint);
  ::message::RoomCustomParamMultiChooseInt* unsafe_arena_release_multichooseint();

  // int32 ID = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .message.RoomCustomParamsDataType Type = 4;
  void clear_type();
  ::message::RoomCustomParamsDataType type() const;
  void set_type(::message::RoomCustomParamsDataType value);
  private:
  ::message::RoomCustomParamsDataType _internal_type() const;
  void _internal_set_type(::message::RoomCustomParamsDataType value);
  public:

  // bool BoolValue = 5;
  bool has_boolvalue() const;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // .message.RoomCustomParamSliderInt SliderInt = 7;
  bool has_sliderint() const;
  private:
  bool _internal_has_sliderint() const;
  public:
  void clear_sliderint();
  const ::message::RoomCustomParamSliderInt& sliderint() const;
  PROTOBUF_NODISCARD ::message::RoomCustomParamSliderInt* release_sliderint();
  ::message::RoomCustomParamSliderInt* mutable_sliderint();
  void set_allocated_sliderint(::message::RoomCustomParamSliderInt* sliderint);
  private:
  const ::message::RoomCustomParamSliderInt& _internal_sliderint() const;
  ::message::RoomCustomParamSliderInt* _internal_mutable_sliderint();
  public:
  void unsafe_arena_set_allocated_sliderint(
      ::message::RoomCustomParamSliderInt* sliderint);
  ::message::RoomCustomParamSliderInt* unsafe_arena_release_sliderint();

  // .message.RoomCustomParamSliderFloat SliderFloat = 8;
  bool has_sliderfloat() const;
  private:
  bool _internal_has_sliderfloat() const;
  public:
  void clear_sliderfloat();
  const ::message::RoomCustomParamSliderFloat& sliderfloat() const;
  PROTOBUF_NODISCARD ::message::RoomCustomParamSliderFloat* release_sliderfloat();
  ::message::RoomCustomParamSliderFloat* mutable_sliderfloat();
  void set_allocated_sliderfloat(::message::RoomCustomParamSliderFloat* sliderfloat);
  private:
  const ::message::RoomCustomParamSliderFloat& _internal_sliderfloat() const;
  ::message::RoomCustomParamSliderFloat* _internal_mutable_sliderfloat();
  public:
  void unsafe_arena_set_allocated_sliderfloat(
      ::message::RoomCustomParamSliderFloat* sliderfloat);
  ::message::RoomCustomParamSliderFloat* unsafe_arena_release_sliderfloat();

  // .message.RoomCustomParamSingleChooseInt SingleChooseInt = 9;
  bool has_singlechooseint() const;
  private:
  bool _internal_has_singlechooseint() const;
  public:
  void clear_singlechooseint();
  const ::message::RoomCustomParamSingleChooseInt& singlechooseint() const;
  PROTOBUF_NODISCARD ::message::RoomCustomParamSingleChooseInt* release_singlechooseint();
  ::message::RoomCustomParamSingleChooseInt* mutable_singlechooseint();
  void set_allocated_singlechooseint(::message::RoomCustomParamSingleChooseInt* singlechooseint);
  private:
  const ::message::RoomCustomParamSingleChooseInt& _internal_singlechooseint() const;
  ::message::RoomCustomParamSingleChooseInt* _internal_mutable_singlechooseint();
  public:
  void unsafe_arena_set_allocated_singlechooseint(
      ::message::RoomCustomParamSingleChooseInt* singlechooseint);
  ::message::RoomCustomParamSingleChooseInt* unsafe_arena_release_singlechooseint();

  // .message.RoomCustomParamSingleChooseFloat SingleChooseFloat = 10;
  bool has_singlechoosefloat() const;
  private:
  bool _internal_has_singlechoosefloat() const;
  public:
  void clear_singlechoosefloat();
  const ::message::RoomCustomParamSingleChooseFloat& singlechoosefloat() const;
  PROTOBUF_NODISCARD ::message::RoomCustomParamSingleChooseFloat* release_singlechoosefloat();
  ::message::RoomCustomParamSingleChooseFloat* mutable_singlechoosefloat();
  void set_allocated_singlechoosefloat(::message::RoomCustomParamSingleChooseFloat* singlechoosefloat);
  private:
  const ::message::RoomCustomParamSingleChooseFloat& _internal_singlechoosefloat() const;
  ::message::RoomCustomParamSingleChooseFloat* _internal_mutable_singlechoosefloat();
  public:
  void unsafe_arena_set_allocated_singlechoosefloat(
      ::message::RoomCustomParamSingleChooseFloat* singlechoosefloat);
  ::message::RoomCustomParamSingleChooseFloat* unsafe_arena_release_singlechoosefloat();

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:message.RoomCustomParamData)
 private:
  class _Internal;
  void set_has_boolvalue();
  void set_has_sliderint();
  void set_has_sliderfloat();
  void set_has_singlechooseint();
  void set_has_singlechoosefloat();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr labelkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defaulttext_;
    ::message::RoomCustomParamMultiChooseInt* multichooseint_;
    int32_t id_;
    int type_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool boolvalue_;
      ::message::RoomCustomParamSliderInt* sliderint_;
      ::message::RoomCustomParamSliderFloat* sliderfloat_;
      ::message::RoomCustomParamSingleChooseInt* singlechooseint_;
      ::message::RoomCustomParamSingleChooseFloat* singlechoosefloat_;
    } Value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamsSettingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamsSettingData) */ {
 public:
  inline RoomCustomParamsSettingData() : RoomCustomParamsSettingData(nullptr) {}
  ~RoomCustomParamsSettingData() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamsSettingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamsSettingData(const RoomCustomParamsSettingData& from);
  RoomCustomParamsSettingData(RoomCustomParamsSettingData&& from) noexcept
    : RoomCustomParamsSettingData() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamsSettingData& operator=(const RoomCustomParamsSettingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamsSettingData& operator=(RoomCustomParamsSettingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamsSettingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomCustomParamsSettingData* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamsSettingData*>(
               &_RoomCustomParamsSettingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(RoomCustomParamsSettingData& a, RoomCustomParamsSettingData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamsSettingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamsSettingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamsSettingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamsSettingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamsSettingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamsSettingData& from) {
    RoomCustomParamsSettingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamsSettingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamsSettingData";
  }
  protected:
  explicit RoomCustomParamsSettingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
    kLocCDNURLFieldNumber = 2,
  };
  // repeated .message.RoomCustomParamData Params = 1;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::message::RoomCustomParamData* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamData >*
      mutable_params();
  private:
  const ::message::RoomCustomParamData& _internal_params(int index) const;
  ::message::RoomCustomParamData* _internal_add_params();
  public:
  const ::message::RoomCustomParamData& params(int index) const;
  ::message::RoomCustomParamData* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamData >&
      params() const;

  // string LocCDNURL = 2;
  void clear_loccdnurl();
  const std::string& loccdnurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loccdnurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loccdnurl();
  PROTOBUF_NODISCARD std::string* release_loccdnurl();
  void set_allocated_loccdnurl(std::string* loccdnurl);
  private:
  const std::string& _internal_loccdnurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loccdnurl(const std::string& value);
  std::string* _internal_mutable_loccdnurl();
  public:

  // @@protoc_insertion_point(class_scope:message.RoomCustomParamsSettingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamData > params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loccdnurl_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class RoomCustomParamProtoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoomCustomParamProtoData) */ {
 public:
  inline RoomCustomParamProtoData() : RoomCustomParamProtoData(nullptr) {}
  ~RoomCustomParamProtoData() override;
  explicit PROTOBUF_CONSTEXPR RoomCustomParamProtoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomCustomParamProtoData(const RoomCustomParamProtoData& from);
  RoomCustomParamProtoData(RoomCustomParamProtoData&& from) noexcept
    : RoomCustomParamProtoData() {
    *this = ::std::move(from);
  }

  inline RoomCustomParamProtoData& operator=(const RoomCustomParamProtoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomCustomParamProtoData& operator=(RoomCustomParamProtoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomCustomParamProtoData& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kBoolValue = 3,
    kIntValue = 5,
    kFloatValue = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const RoomCustomParamProtoData* internal_default_instance() {
    return reinterpret_cast<const RoomCustomParamProtoData*>(
               &_RoomCustomParamProtoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(RoomCustomParamProtoData& a, RoomCustomParamProtoData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomCustomParamProtoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomCustomParamProtoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomCustomParamProtoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomCustomParamProtoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomCustomParamProtoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomCustomParamProtoData& from) {
    RoomCustomParamProtoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomCustomParamProtoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoomCustomParamProtoData";
  }
  protected:
  explicit RoomCustomParamProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListIntFieldNumber = 4,
    kIDFieldNumber = 1,
    kTypeFieldNumber = 2,
    kBoolValueFieldNumber = 3,
    kIntValueFieldNumber = 5,
    kFloatValueFieldNumber = 6,
  };
  // repeated int32 ListInt = 4;
  int listint_size() const;
  private:
  int _internal_listint_size() const;
  public:
  void clear_listint();
  private:
  int32_t _internal_listint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_listint() const;
  void _internal_add_listint(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_listint();
  public:
  int32_t listint(int index) const;
  void set_listint(int index, int32_t value);
  void add_listint(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      listint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_listint();

  // int32 ID = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .message.RoomCustomParamsDataType Type = 2;
  void clear_type();
  ::message::RoomCustomParamsDataType type() const;
  void set_type(::message::RoomCustomParamsDataType value);
  private:
  ::message::RoomCustomParamsDataType _internal_type() const;
  void _internal_set_type(::message::RoomCustomParamsDataType value);
  public:

  // bool BoolValue = 3;
  bool has_boolvalue() const;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // int32 IntValue = 5;
  bool has_intvalue() const;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  int32_t intvalue() const;
  void set_intvalue(int32_t value);
  private:
  int32_t _internal_intvalue() const;
  void _internal_set_intvalue(int32_t value);
  public:

  // float FloatValue = 6;
  bool has_floatvalue() const;
  private:
  bool _internal_has_floatvalue() const;
  public:
  void clear_floatvalue();
  float floatvalue() const;
  void set_floatvalue(float value);
  private:
  float _internal_floatvalue() const;
  void _internal_set_floatvalue(float value);
  public:

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:message.RoomCustomParamProtoData)
 private:
  class _Internal;
  void set_has_boolvalue();
  void set_has_intvalue();
  void set_has_floatvalue();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > listint_;
    mutable std::atomic<int> _listint_cached_byte_size_;
    int32_t id_;
    int type_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool boolvalue_;
      int32_t intvalue_;
      float floatvalue_;
    } Value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCResourceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourceData) */ {
 public:
  inline UGCResourceData() : UGCResourceData(nullptr) {}
  ~UGCResourceData() override;
  explicit PROTOBUF_CONSTEXPR UGCResourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourceData(const UGCResourceData& from);
  UGCResourceData(UGCResourceData&& from) noexcept
    : UGCResourceData() {
    *this = ::std::move(from);
  }

  inline UGCResourceData& operator=(const UGCResourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourceData& operator=(UGCResourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourceData* internal_default_instance() {
    return reinterpret_cast<const UGCResourceData*>(
               &_UGCResourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(UGCResourceData& a, UGCResourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourceData& from) {
    UGCResourceData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourceData";
  }
  protected:
  explicit UGCResourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UGCResourceData_UGCResourceDataVersion UGCResourceDataVersion;
  static constexpr UGCResourceDataVersion UGCResourceMetaDataVersion_Unknown =
    UGCResourceData_UGCResourceDataVersion_UGCResourceMetaDataVersion_Unknown;
  static constexpr UGCResourceDataVersion UGCResourceMetaDataVersion_V1 =
    UGCResourceData_UGCResourceDataVersion_UGCResourceMetaDataVersion_V1;
  static inline bool UGCResourceDataVersion_IsValid(int value) {
    return UGCResourceData_UGCResourceDataVersion_IsValid(value);
  }
  static constexpr UGCResourceDataVersion UGCResourceDataVersion_MIN =
    UGCResourceData_UGCResourceDataVersion_UGCResourceDataVersion_MIN;
  static constexpr UGCResourceDataVersion UGCResourceDataVersion_MAX =
    UGCResourceData_UGCResourceDataVersion_UGCResourceDataVersion_MAX;
  static constexpr int UGCResourceDataVersion_ARRAYSIZE =
    UGCResourceData_UGCResourceDataVersion_UGCResourceDataVersion_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UGCResourceDataVersion_descriptor() {
    return UGCResourceData_UGCResourceDataVersion_descriptor();
  }
  template<typename T>
  static inline const std::string& UGCResourceDataVersion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UGCResourceDataVersion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UGCResourceDataVersion_Name.");
    return UGCResourceData_UGCResourceDataVersion_Name(enum_t_value);
  }
  static inline bool UGCResourceDataVersion_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UGCResourceDataVersion* value) {
    return UGCResourceData_UGCResourceDataVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // bytes Content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .message.UGCResourceData.UGCResourceDataVersion Version = 1;
  void clear_version();
  ::message::UGCResourceData_UGCResourceDataVersion version() const;
  void set_version(::message::UGCResourceData_UGCResourceDataVersion value);
  private:
  ::message::UGCResourceData_UGCResourceDataVersion _internal_version() const;
  void _internal_set_version(::message::UGCResourceData_UGCResourceDataVersion value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCResourceContentData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourceContentData) */ {
 public:
  inline UGCResourceContentData() : UGCResourceContentData(nullptr) {}
  ~UGCResourceContentData() override;
  explicit PROTOBUF_CONSTEXPR UGCResourceContentData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourceContentData(const UGCResourceContentData& from);
  UGCResourceContentData(UGCResourceContentData&& from) noexcept
    : UGCResourceContentData() {
    *this = ::std::move(from);
  }

  inline UGCResourceContentData& operator=(const UGCResourceContentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourceContentData& operator=(UGCResourceContentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourceContentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourceContentData* internal_default_instance() {
    return reinterpret_cast<const UGCResourceContentData*>(
               &_UGCResourceContentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(UGCResourceContentData& a, UGCResourceContentData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourceContentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourceContentData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourceContentData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourceContentData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourceContentData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourceContentData& from) {
    UGCResourceContentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourceContentData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourceContentData";
  }
  protected:
  explicit UGCResourceContentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionalResourceNamesFieldNumber = 1,
    kMapIdsFieldNumber = 3,
    kItemIdsFieldNumber = 4,
    kCSSharedItemIDFieldNumber = 8,
    kUrlCacheFieldNumber = 2,
    kResourcePackageInfoFieldNumber = 5,
    kNotNecessaryResDataFieldNumber = 7,
    kModeTemplateIdFieldNumber = 6,
  };
  // repeated string OptionalResourceNames = 1;
  int optionalresourcenames_size() const;
  private:
  int _internal_optionalresourcenames_size() const;
  public:
  void clear_optionalresourcenames();
  const std::string& optionalresourcenames(int index) const;
  std::string* mutable_optionalresourcenames(int index);
  void set_optionalresourcenames(int index, const std::string& value);
  void set_optionalresourcenames(int index, std::string&& value);
  void set_optionalresourcenames(int index, const char* value);
  void set_optionalresourcenames(int index, const char* value, size_t size);
  std::string* add_optionalresourcenames();
  void add_optionalresourcenames(const std::string& value);
  void add_optionalresourcenames(std::string&& value);
  void add_optionalresourcenames(const char* value);
  void add_optionalresourcenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& optionalresourcenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_optionalresourcenames();
  private:
  const std::string& _internal_optionalresourcenames(int index) const;
  std::string* _internal_add_optionalresourcenames();
  public:

  // repeated uint32 MapIds = 3;
  int mapids_size() const;
  private:
  int _internal_mapids_size() const;
  public:
  void clear_mapids();
  private:
  uint32_t _internal_mapids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_mapids() const;
  void _internal_add_mapids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_mapids();
  public:
  uint32_t mapids(int index) const;
  void set_mapids(int index, uint32_t value);
  void add_mapids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      mapids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_mapids();

  // repeated uint32 ItemIds = 4;
  int itemids_size() const;
  private:
  int _internal_itemids_size() const;
  public:
  void clear_itemids();
  private:
  uint32_t _internal_itemids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_itemids() const;
  void _internal_add_itemids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_itemids();
  public:
  uint32_t itemids(int index) const;
  void set_itemids(int index, uint32_t value);
  void add_itemids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      itemids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_itemids();

  // repeated uint32 CSSharedItemID = 8;
  int csshareditemid_size() const;
  private:
  int _internal_csshareditemid_size() const;
  public:
  void clear_csshareditemid();
  private:
  uint32_t _internal_csshareditemid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_csshareditemid() const;
  void _internal_add_csshareditemid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_csshareditemid();
  public:
  uint32_t csshareditemid(int index) const;
  void set_csshareditemid(int index, uint32_t value);
  void add_csshareditemid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      csshareditemid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_csshareditemid();

  // string UrlCache = 2;
  void clear_urlcache();
  const std::string& urlcache() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_urlcache(ArgT0&& arg0, ArgT... args);
  std::string* mutable_urlcache();
  PROTOBUF_NODISCARD std::string* release_urlcache();
  void set_allocated_urlcache(std::string* urlcache);
  private:
  const std::string& _internal_urlcache() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_urlcache(const std::string& value);
  std::string* _internal_mutable_urlcache();
  public:

  // .message.UGCGameDataResourcePackageInfo ResourcePackageInfo = 5;
  bool has_resourcepackageinfo() const;
  private:
  bool _internal_has_resourcepackageinfo() const;
  public:
  void clear_resourcepackageinfo();
  const ::message::UGCGameDataResourcePackageInfo& resourcepackageinfo() const;
  PROTOBUF_NODISCARD ::message::UGCGameDataResourcePackageInfo* release_resourcepackageinfo();
  ::message::UGCGameDataResourcePackageInfo* mutable_resourcepackageinfo();
  void set_allocated_resourcepackageinfo(::message::UGCGameDataResourcePackageInfo* resourcepackageinfo);
  private:
  const ::message::UGCGameDataResourcePackageInfo& _internal_resourcepackageinfo() const;
  ::message::UGCGameDataResourcePackageInfo* _internal_mutable_resourcepackageinfo();
  public:
  void unsafe_arena_set_allocated_resourcepackageinfo(
      ::message::UGCGameDataResourcePackageInfo* resourcepackageinfo);
  ::message::UGCGameDataResourcePackageInfo* unsafe_arena_release_resourcepackageinfo();

  // .message.UGCResourceContentData NotNecessaryResData = 7;
  bool has_notnecessaryresdata() const;
  private:
  bool _internal_has_notnecessaryresdata() const;
  public:
  void clear_notnecessaryresdata();
  const ::message::UGCResourceContentData& notnecessaryresdata() const;
  PROTOBUF_NODISCARD ::message::UGCResourceContentData* release_notnecessaryresdata();
  ::message::UGCResourceContentData* mutable_notnecessaryresdata();
  void set_allocated_notnecessaryresdata(::message::UGCResourceContentData* notnecessaryresdata);
  private:
  const ::message::UGCResourceContentData& _internal_notnecessaryresdata() const;
  ::message::UGCResourceContentData* _internal_mutable_notnecessaryresdata();
  public:
  void unsafe_arena_set_allocated_notnecessaryresdata(
      ::message::UGCResourceContentData* notnecessaryresdata);
  ::message::UGCResourceContentData* unsafe_arena_release_notnecessaryresdata();

  // int32 ModeTemplateId = 6;
  void clear_modetemplateid();
  int32_t modetemplateid() const;
  void set_modetemplateid(int32_t value);
  private:
  int32_t _internal_modetemplateid() const;
  void _internal_set_modetemplateid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResourceContentData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> optionalresourcenames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > mapids_;
    mutable std::atomic<int> _mapids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > itemids_;
    mutable std::atomic<int> _itemids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > csshareditemid_;
    mutable std::atomic<int> _csshareditemid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr urlcache_;
    ::message::UGCGameDataResourcePackageInfo* resourcepackageinfo_;
    ::message::UGCResourceContentData* notnecessaryresdata_;
    int32_t modetemplateid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCRoomCustomParamLocDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCRoomCustomParamLocDatas) */ {
 public:
  inline UGCRoomCustomParamLocDatas() : UGCRoomCustomParamLocDatas(nullptr) {}
  ~UGCRoomCustomParamLocDatas() override;
  explicit PROTOBUF_CONSTEXPR UGCRoomCustomParamLocDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCRoomCustomParamLocDatas(const UGCRoomCustomParamLocDatas& from);
  UGCRoomCustomParamLocDatas(UGCRoomCustomParamLocDatas&& from) noexcept
    : UGCRoomCustomParamLocDatas() {
    *this = ::std::move(from);
  }

  inline UGCRoomCustomParamLocDatas& operator=(const UGCRoomCustomParamLocDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCRoomCustomParamLocDatas& operator=(UGCRoomCustomParamLocDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCRoomCustomParamLocDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCRoomCustomParamLocDatas* internal_default_instance() {
    return reinterpret_cast<const UGCRoomCustomParamLocDatas*>(
               &_UGCRoomCustomParamLocDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(UGCRoomCustomParamLocDatas& a, UGCRoomCustomParamLocDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCRoomCustomParamLocDatas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCRoomCustomParamLocDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCRoomCustomParamLocDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCRoomCustomParamLocDatas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCRoomCustomParamLocDatas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCRoomCustomParamLocDatas& from) {
    UGCRoomCustomParamLocDatas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCRoomCustomParamLocDatas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCRoomCustomParamLocDatas";
  }
  protected:
  explicit UGCRoomCustomParamLocDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocDataFieldNumber = 1,
  };
  // repeated .message.UGCLocData LocData = 1;
  int locdata_size() const;
  private:
  int _internal_locdata_size() const;
  public:
  void clear_locdata();
  ::message::UGCLocData* mutable_locdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData >*
      mutable_locdata();
  private:
  const ::message::UGCLocData& _internal_locdata(int index) const;
  ::message::UGCLocData* _internal_add_locdata();
  public:
  const ::message::UGCLocData& locdata(int index) const;
  ::message::UGCLocData* add_locdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData >&
      locdata() const;

  // @@protoc_insertion_point(class_scope:message.UGCRoomCustomParamLocDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData > locdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCDatabaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCDatabaseData) */ {
 public:
  inline UGCDatabaseData() : UGCDatabaseData(nullptr) {}
  ~UGCDatabaseData() override;
  explicit PROTOBUF_CONSTEXPR UGCDatabaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCDatabaseData(const UGCDatabaseData& from);
  UGCDatabaseData(UGCDatabaseData&& from) noexcept
    : UGCDatabaseData() {
    *this = ::std::move(from);
  }

  inline UGCDatabaseData& operator=(const UGCDatabaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCDatabaseData& operator=(UGCDatabaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCDatabaseData& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kBoolValue = 3,
    kIntValue = 4,
    kFloatValue = 5,
    kStringValue = 6,
    kVector2Value = 7,
    kVector3Value = 8,
    kQuaternionValue = 9,
    kColorValue = 10,
    VALUE_NOT_SET = 0,
  };

  static inline const UGCDatabaseData* internal_default_instance() {
    return reinterpret_cast<const UGCDatabaseData*>(
               &_UGCDatabaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(UGCDatabaseData& a, UGCDatabaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCDatabaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCDatabaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCDatabaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCDatabaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCDatabaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCDatabaseData& from) {
    UGCDatabaseData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCDatabaseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCDatabaseData";
  }
  protected:
  explicit UGCDatabaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListDataFieldNumber = 2,
    kTypeIDFieldNumber = 1,
    kBoolValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kFloatValueFieldNumber = 5,
    kStringValueFieldNumber = 6,
    kVector2ValueFieldNumber = 7,
    kVector3ValueFieldNumber = 8,
    kQuaternionValueFieldNumber = 9,
    kColorValueFieldNumber = 10,
  };
  // repeated .message.UGCDatabaseData ListData = 2;
  int listdata_size() const;
  private:
  int _internal_listdata_size() const;
  public:
  void clear_listdata();
  ::message::UGCDatabaseData* mutable_listdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCDatabaseData >*
      mutable_listdata();
  private:
  const ::message::UGCDatabaseData& _internal_listdata(int index) const;
  ::message::UGCDatabaseData* _internal_add_listdata();
  public:
  const ::message::UGCDatabaseData& listdata(int index) const;
  ::message::UGCDatabaseData* add_listdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCDatabaseData >&
      listdata() const;

  // int32 TypeID = 1;
  void clear_typeid_();
  int32_t typeid_() const;
  void set_typeid_(int32_t value);
  private:
  int32_t _internal_typeid_() const;
  void _internal_set_typeid_(int32_t value);
  public:

  // bool BoolValue = 3;
  bool has_boolvalue() const;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // int32 IntValue = 4;
  bool has_intvalue() const;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  int32_t intvalue() const;
  void set_intvalue(int32_t value);
  private:
  int32_t _internal_intvalue() const;
  void _internal_set_intvalue(int32_t value);
  public:

  // float FloatValue = 5;
  bool has_floatvalue() const;
  private:
  bool _internal_has_floatvalue() const;
  public:
  void clear_floatvalue();
  float floatvalue() const;
  void set_floatvalue(float value);
  private:
  float _internal_floatvalue() const;
  void _internal_set_floatvalue(float value);
  public:

  // string StringValue = 6;
  bool has_stringvalue() const;
  private:
  bool _internal_has_stringvalue() const;
  public:
  void clear_stringvalue();
  const std::string& stringvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringvalue();
  PROTOBUF_NODISCARD std::string* release_stringvalue();
  void set_allocated_stringvalue(std::string* stringvalue);
  private:
  const std::string& _internal_stringvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringvalue(const std::string& value);
  std::string* _internal_mutable_stringvalue();
  public:

  // .message.ProtoBuffVector2 Vector2Value = 7;
  bool has_vector2value() const;
  private:
  bool _internal_has_vector2value() const;
  public:
  void clear_vector2value();
  const ::message::ProtoBuffVector2& vector2value() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector2* release_vector2value();
  ::message::ProtoBuffVector2* mutable_vector2value();
  void set_allocated_vector2value(::message::ProtoBuffVector2* vector2value);
  private:
  const ::message::ProtoBuffVector2& _internal_vector2value() const;
  ::message::ProtoBuffVector2* _internal_mutable_vector2value();
  public:
  void unsafe_arena_set_allocated_vector2value(
      ::message::ProtoBuffVector2* vector2value);
  ::message::ProtoBuffVector2* unsafe_arena_release_vector2value();

  // .message.ProtoBuffVector3 Vector3Value = 8;
  bool has_vector3value() const;
  private:
  bool _internal_has_vector3value() const;
  public:
  void clear_vector3value();
  const ::message::ProtoBuffVector3& vector3value() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_vector3value();
  ::message::ProtoBuffVector3* mutable_vector3value();
  void set_allocated_vector3value(::message::ProtoBuffVector3* vector3value);
  private:
  const ::message::ProtoBuffVector3& _internal_vector3value() const;
  ::message::ProtoBuffVector3* _internal_mutable_vector3value();
  public:
  void unsafe_arena_set_allocated_vector3value(
      ::message::ProtoBuffVector3* vector3value);
  ::message::ProtoBuffVector3* unsafe_arena_release_vector3value();

  // .message.ProtoBuffQuaternion QuaternionValue = 9;
  bool has_quaternionvalue() const;
  private:
  bool _internal_has_quaternionvalue() const;
  public:
  void clear_quaternionvalue();
  const ::message::ProtoBuffQuaternion& quaternionvalue() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffQuaternion* release_quaternionvalue();
  ::message::ProtoBuffQuaternion* mutable_quaternionvalue();
  void set_allocated_quaternionvalue(::message::ProtoBuffQuaternion* quaternionvalue);
  private:
  const ::message::ProtoBuffQuaternion& _internal_quaternionvalue() const;
  ::message::ProtoBuffQuaternion* _internal_mutable_quaternionvalue();
  public:
  void unsafe_arena_set_allocated_quaternionvalue(
      ::message::ProtoBuffQuaternion* quaternionvalue);
  ::message::ProtoBuffQuaternion* unsafe_arena_release_quaternionvalue();

  // .message.ProtoBuffColor ColorValue = 10;
  bool has_colorvalue() const;
  private:
  bool _internal_has_colorvalue() const;
  public:
  void clear_colorvalue();
  const ::message::ProtoBuffColor& colorvalue() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffColor* release_colorvalue();
  ::message::ProtoBuffColor* mutable_colorvalue();
  void set_allocated_colorvalue(::message::ProtoBuffColor* colorvalue);
  private:
  const ::message::ProtoBuffColor& _internal_colorvalue() const;
  ::message::ProtoBuffColor* _internal_mutable_colorvalue();
  public:
  void unsafe_arena_set_allocated_colorvalue(
      ::message::ProtoBuffColor* colorvalue);
  ::message::ProtoBuffColor* unsafe_arena_release_colorvalue();

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:message.UGCDatabaseData)
 private:
  class _Internal;
  void set_has_boolvalue();
  void set_has_intvalue();
  void set_has_floatvalue();
  void set_has_stringvalue();
  void set_has_vector2value();
  void set_has_vector3value();
  void set_has_quaternionvalue();
  void set_has_colorvalue();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCDatabaseData > listdata_;
    int32_t typeid__;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool boolvalue_;
      int32_t intvalue_;
      float floatvalue_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringvalue_;
      ::message::ProtoBuffVector2* vector2value_;
      ::message::ProtoBuffVector3* vector3value_;
      ::message::ProtoBuffQuaternion* quaternionvalue_;
      ::message::ProtoBuffColor* colorvalue_;
    } Value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCRoomHalfWayJoinRule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCRoomHalfWayJoinRule) */ {
 public:
  inline UGCRoomHalfWayJoinRule() : UGCRoomHalfWayJoinRule(nullptr) {}
  ~UGCRoomHalfWayJoinRule() override;
  explicit PROTOBUF_CONSTEXPR UGCRoomHalfWayJoinRule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCRoomHalfWayJoinRule(const UGCRoomHalfWayJoinRule& from);
  UGCRoomHalfWayJoinRule(UGCRoomHalfWayJoinRule&& from) noexcept
    : UGCRoomHalfWayJoinRule() {
    *this = ::std::move(from);
  }

  inline UGCRoomHalfWayJoinRule& operator=(const UGCRoomHalfWayJoinRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCRoomHalfWayJoinRule& operator=(UGCRoomHalfWayJoinRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCRoomHalfWayJoinRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCRoomHalfWayJoinRule* internal_default_instance() {
    return reinterpret_cast<const UGCRoomHalfWayJoinRule*>(
               &_UGCRoomHalfWayJoinRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(UGCRoomHalfWayJoinRule& a, UGCRoomHalfWayJoinRule& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCRoomHalfWayJoinRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCRoomHalfWayJoinRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCRoomHalfWayJoinRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCRoomHalfWayJoinRule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCRoomHalfWayJoinRule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCRoomHalfWayJoinRule& from) {
    UGCRoomHalfWayJoinRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCRoomHalfWayJoinRule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCRoomHalfWayJoinRule";
  }
  protected:
  explicit UGCRoomHalfWayJoinRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecommendStartGameNumberFieldNumber = 1,
    kHalfWayJoinEffectTimeFieldNumber = 4,
    kEnableHalfWayJoinFieldNumber = 2,
    kEnableHalfWayJoinEffectTimeFieldNumber = 3,
    kHalfWayJoinNumberLimitFieldNumber = 5,
    kEnableHalfwaySubmitMatchStatsFieldNumber = 7,
    kHalfWayJoinNumberFieldNumber = 6,
  };
  // int32 RecommendStartGameNumber = 1;
  void clear_recommendstartgamenumber();
  int32_t recommendstartgamenumber() const;
  void set_recommendstartgamenumber(int32_t value);
  private:
  int32_t _internal_recommendstartgamenumber() const;
  void _internal_set_recommendstartgamenumber(int32_t value);
  public:

  // int32 HalfWayJoinEffectTime = 4;
  void clear_halfwayjoineffecttime();
  int32_t halfwayjoineffecttime() const;
  void set_halfwayjoineffecttime(int32_t value);
  private:
  int32_t _internal_halfwayjoineffecttime() const;
  void _internal_set_halfwayjoineffecttime(int32_t value);
  public:

  // bool EnableHalfWayJoin = 2;
  void clear_enablehalfwayjoin();
  bool enablehalfwayjoin() const;
  void set_enablehalfwayjoin(bool value);
  private:
  bool _internal_enablehalfwayjoin() const;
  void _internal_set_enablehalfwayjoin(bool value);
  public:

  // bool EnableHalfWayJoinEffectTime = 3;
  void clear_enablehalfwayjoineffecttime();
  bool enablehalfwayjoineffecttime() const;
  void set_enablehalfwayjoineffecttime(bool value);
  private:
  bool _internal_enablehalfwayjoineffecttime() const;
  void _internal_set_enablehalfwayjoineffecttime(bool value);
  public:

  // bool HalfWayJoinNumberLimit = 5;
  void clear_halfwayjoinnumberlimit();
  bool halfwayjoinnumberlimit() const;
  void set_halfwayjoinnumberlimit(bool value);
  private:
  bool _internal_halfwayjoinnumberlimit() const;
  void _internal_set_halfwayjoinnumberlimit(bool value);
  public:

  // bool EnableHalfwaySubmitMatchStats = 7;
  void clear_enablehalfwaysubmitmatchstats();
  bool enablehalfwaysubmitmatchstats() const;
  void set_enablehalfwaysubmitmatchstats(bool value);
  private:
  bool _internal_enablehalfwaysubmitmatchstats() const;
  void _internal_set_enablehalfwaysubmitmatchstats(bool value);
  public:

  // int32 HalfWayJoinNumber = 6;
  void clear_halfwayjoinnumber();
  int32_t halfwayjoinnumber() const;
  void set_halfwayjoinnumber(int32_t value);
  private:
  int32_t _internal_halfwayjoinnumber() const;
  void _internal_set_halfwayjoinnumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCRoomHalfWayJoinRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t recommendstartgamenumber_;
    int32_t halfwayjoineffecttime_;
    bool enablehalfwayjoin_;
    bool enablehalfwayjoineffecttime_;
    bool halfwayjoinnumberlimit_;
    bool enablehalfwaysubmitmatchstats_;
    int32_t halfwayjoinnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCResAnimationClipEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResAnimationClipEvent) */ {
 public:
  inline UGCResAnimationClipEvent() : UGCResAnimationClipEvent(nullptr) {}
  ~UGCResAnimationClipEvent() override;
  explicit PROTOBUF_CONSTEXPR UGCResAnimationClipEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResAnimationClipEvent(const UGCResAnimationClipEvent& from);
  UGCResAnimationClipEvent(UGCResAnimationClipEvent&& from) noexcept
    : UGCResAnimationClipEvent() {
    *this = ::std::move(from);
  }

  inline UGCResAnimationClipEvent& operator=(const UGCResAnimationClipEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResAnimationClipEvent& operator=(UGCResAnimationClipEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResAnimationClipEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResAnimationClipEvent* internal_default_instance() {
    return reinterpret_cast<const UGCResAnimationClipEvent*>(
               &_UGCResAnimationClipEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(UGCResAnimationClipEvent& a, UGCResAnimationClipEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResAnimationClipEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResAnimationClipEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResAnimationClipEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResAnimationClipEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResAnimationClipEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResAnimationClipEvent& from) {
    UGCResAnimationClipEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResAnimationClipEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResAnimationClipEvent";
  }
  protected:
  explicit UGCResAnimationClipEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventNameFieldNumber = 2,
    kEventParamListFieldNumber = 4,
    kEventIDFieldNumber = 1,
    kEventTimeFieldNumber = 3,
  };
  // string EventName = 2;
  void clear_eventname();
  const std::string& eventname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eventname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eventname();
  PROTOBUF_NODISCARD std::string* release_eventname();
  void set_allocated_eventname(std::string* eventname);
  private:
  const std::string& _internal_eventname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eventname(const std::string& value);
  std::string* _internal_mutable_eventname();
  public:

  // .message.UGCVarValueDataV2 EventParamList = 4;
  bool has_eventparamlist() const;
  private:
  bool _internal_has_eventparamlist() const;
  public:
  void clear_eventparamlist();
  const ::message::UGCVarValueDataV2& eventparamlist() const;
  PROTOBUF_NODISCARD ::message::UGCVarValueDataV2* release_eventparamlist();
  ::message::UGCVarValueDataV2* mutable_eventparamlist();
  void set_allocated_eventparamlist(::message::UGCVarValueDataV2* eventparamlist);
  private:
  const ::message::UGCVarValueDataV2& _internal_eventparamlist() const;
  ::message::UGCVarValueDataV2* _internal_mutable_eventparamlist();
  public:
  void unsafe_arena_set_allocated_eventparamlist(
      ::message::UGCVarValueDataV2* eventparamlist);
  ::message::UGCVarValueDataV2* unsafe_arena_release_eventparamlist();

  // int32 EventID = 1;
  void clear_eventid();
  int32_t eventid() const;
  void set_eventid(int32_t value);
  private:
  int32_t _internal_eventid() const;
  void _internal_set_eventid(int32_t value);
  public:

  // float EventTime = 3;
  void clear_eventtime();
  float eventtime() const;
  void set_eventtime(float value);
  private:
  float _internal_eventtime() const;
  void _internal_set_eventtime(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResAnimationClipEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventname_;
    ::message::UGCVarValueDataV2* eventparamlist_;
    int32_t eventid_;
    float eventtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// -------------------------------------------------------------------

class UGCResEventAnimationClipData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResEventAnimationClipData) */ {
 public:
  inline UGCResEventAnimationClipData() : UGCResEventAnimationClipData(nullptr) {}
  ~UGCResEventAnimationClipData() override;
  explicit PROTOBUF_CONSTEXPR UGCResEventAnimationClipData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResEventAnimationClipData(const UGCResEventAnimationClipData& from);
  UGCResEventAnimationClipData(UGCResEventAnimationClipData&& from) noexcept
    : UGCResEventAnimationClipData() {
    *this = ::std::move(from);
  }

  inline UGCResEventAnimationClipData& operator=(const UGCResEventAnimationClipData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResEventAnimationClipData& operator=(UGCResEventAnimationClipData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResEventAnimationClipData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResEventAnimationClipData* internal_default_instance() {
    return reinterpret_cast<const UGCResEventAnimationClipData*>(
               &_UGCResEventAnimationClipData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(UGCResEventAnimationClipData& a, UGCResEventAnimationClipData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResEventAnimationClipData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResEventAnimationClipData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResEventAnimationClipData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResEventAnimationClipData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResEventAnimationClipData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResEventAnimationClipData& from) {
    UGCResEventAnimationClipData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResEventAnimationClipData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResEventAnimationClipData";
  }
  protected:
  explicit UGCResEventAnimationClipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 4,
    kClipNameFieldNumber = 1,
    kAnimationClipDataFieldNumber = 5,
    kAnimationClipResUUIDFieldNumber = 6,
    kLengthFieldNumber = 2,
    kFPSFieldNumber = 3,
  };
  // repeated .message.UGCResAnimationClipEvent Events = 4;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::message::UGCResAnimationClipEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationClipEvent >*
      mutable_events();
  private:
  const ::message::UGCResAnimationClipEvent& _internal_events(int index) const;
  ::message::UGCResAnimationClipEvent* _internal_add_events();
  public:
  const ::message::UGCResAnimationClipEvent& events(int index) const;
  ::message::UGCResAnimationClipEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationClipEvent >&
      events() const;

  // string ClipName = 1;
  void clear_clipname();
  const std::string& clipname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clipname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clipname();
  PROTOBUF_NODISCARD std::string* release_clipname();
  void set_allocated_clipname(std::string* clipname);
  private:
  const std::string& _internal_clipname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clipname(const std::string& value);
  std::string* _internal_mutable_clipname();
  public:

  // bytes AnimationClipData = 5;
  void clear_animationclipdata();
  const std::string& animationclipdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationclipdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationclipdata();
  PROTOBUF_NODISCARD std::string* release_animationclipdata();
  void set_allocated_animationclipdata(std::string* animationclipdata);
  private:
  const std::string& _internal_animationclipdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animationclipdata(const std::string& value);
  std::string* _internal_mutable_animationclipdata();
  public:

  // string AnimationClipResUUID = 6;
  void clear_animationclipresuuid();
  const std::string& animationclipresuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animationclipresuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animationclipresuuid();
  PROTOBUF_NODISCARD std::string* release_animationclipresuuid();
  void set_allocated_animationclipresuuid(std::string* animationclipresuuid);
  private:
  const std::string& _internal_animationclipresuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animationclipresuuid(const std::string& value);
  std::string* _internal_mutable_animationclipresuuid();
  public:

  // float Length = 2;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float FPS = 3;
  void clear_fps();
  float fps() const;
  void set_fps(float value);
  private:
  float _internal_fps() const;
  void _internal_set_fps(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResEventAnimationClipData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationClipEvent > events_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clipname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationclipdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animationclipresuuid_;
    float length_;
    float fps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ugccommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UGCDebugSettingData

// uint64 AccountID = 1;
inline void UGCDebugSettingData::clear_accountid() {
  _impl_.accountid_ = uint64_t{0u};
}
inline uint64_t UGCDebugSettingData::_internal_accountid() const {
  return _impl_.accountid_;
}
inline uint64_t UGCDebugSettingData::accountid() const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.AccountID)
  return _internal_accountid();
}
inline void UGCDebugSettingData::_internal_set_accountid(uint64_t value) {
  
  _impl_.accountid_ = value;
}
inline void UGCDebugSettingData::set_accountid(uint64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.AccountID)
}

// uint32 GameMode = 2;
inline void UGCDebugSettingData::clear_gamemode() {
  _impl_.gamemode_ = 0u;
}
inline uint32_t UGCDebugSettingData::_internal_gamemode() const {
  return _impl_.gamemode_;
}
inline uint32_t UGCDebugSettingData::gamemode() const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.GameMode)
  return _internal_gamemode();
}
inline void UGCDebugSettingData::_internal_set_gamemode(uint32_t value) {
  
  _impl_.gamemode_ = value;
}
inline void UGCDebugSettingData::set_gamemode(uint32_t value) {
  _internal_set_gamemode(value);
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.GameMode)
}

// uint32 MapID = 3;
inline void UGCDebugSettingData::clear_mapid() {
  _impl_.mapid_ = 0u;
}
inline uint32_t UGCDebugSettingData::_internal_mapid() const {
  return _impl_.mapid_;
}
inline uint32_t UGCDebugSettingData::mapid() const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.MapID)
  return _internal_mapid();
}
inline void UGCDebugSettingData::_internal_set_mapid(uint32_t value) {
  
  _impl_.mapid_ = value;
}
inline void UGCDebugSettingData::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.MapID)
}

// bool GotoPositionAfterStart = 4;
inline void UGCDebugSettingData::clear_gotopositionafterstart() {
  _impl_.gotopositionafterstart_ = false;
}
inline bool UGCDebugSettingData::_internal_gotopositionafterstart() const {
  return _impl_.gotopositionafterstart_;
}
inline bool UGCDebugSettingData::gotopositionafterstart() const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.GotoPositionAfterStart)
  return _internal_gotopositionafterstart();
}
inline void UGCDebugSettingData::_internal_set_gotopositionafterstart(bool value) {
  
  _impl_.gotopositionafterstart_ = value;
}
inline void UGCDebugSettingData::set_gotopositionafterstart(bool value) {
  _internal_set_gotopositionafterstart(value);
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.GotoPositionAfterStart)
}

// .message.ProtoBuffVector3 GotoPosition = 5;
inline bool UGCDebugSettingData::_internal_has_gotoposition() const {
  return this != internal_default_instance() && _impl_.gotoposition_ != nullptr;
}
inline bool UGCDebugSettingData::has_gotoposition() const {
  return _internal_has_gotoposition();
}
inline const ::message::ProtoBuffVector3& UGCDebugSettingData::_internal_gotoposition() const {
  const ::message::ProtoBuffVector3* p = _impl_.gotoposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCDebugSettingData::gotoposition() const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.GotoPosition)
  return _internal_gotoposition();
}
inline void UGCDebugSettingData::unsafe_arena_set_allocated_gotoposition(
    ::message::ProtoBuffVector3* gotoposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gotoposition_);
  }
  _impl_.gotoposition_ = gotoposition;
  if (gotoposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCDebugSettingData.GotoPosition)
}
inline ::message::ProtoBuffVector3* UGCDebugSettingData::release_gotoposition() {
  
  ::message::ProtoBuffVector3* temp = _impl_.gotoposition_;
  _impl_.gotoposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCDebugSettingData::unsafe_arena_release_gotoposition() {
  // @@protoc_insertion_point(field_release:message.UGCDebugSettingData.GotoPosition)
  
  ::message::ProtoBuffVector3* temp = _impl_.gotoposition_;
  _impl_.gotoposition_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCDebugSettingData::_internal_mutable_gotoposition() {
  
  if (_impl_.gotoposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.gotoposition_ = p;
  }
  return _impl_.gotoposition_;
}
inline ::message::ProtoBuffVector3* UGCDebugSettingData::mutable_gotoposition() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_gotoposition();
  // @@protoc_insertion_point(field_mutable:message.UGCDebugSettingData.GotoPosition)
  return _msg;
}
inline void UGCDebugSettingData::set_allocated_gotoposition(::message::ProtoBuffVector3* gotoposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gotoposition_);
  }
  if (gotoposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gotoposition));
    if (message_arena != submessage_arena) {
      gotoposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gotoposition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gotoposition_ = gotoposition;
  // @@protoc_insertion_point(field_set_allocated:message.UGCDebugSettingData.GotoPosition)
}

// repeated uint32 BotCountByTeam = 6;
inline int UGCDebugSettingData::_internal_botcountbyteam_size() const {
  return _impl_.botcountbyteam_.size();
}
inline int UGCDebugSettingData::botcountbyteam_size() const {
  return _internal_botcountbyteam_size();
}
inline void UGCDebugSettingData::clear_botcountbyteam() {
  _impl_.botcountbyteam_.Clear();
}
inline uint32_t UGCDebugSettingData::_internal_botcountbyteam(int index) const {
  return _impl_.botcountbyteam_.Get(index);
}
inline uint32_t UGCDebugSettingData::botcountbyteam(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.BotCountByTeam)
  return _internal_botcountbyteam(index);
}
inline void UGCDebugSettingData::set_botcountbyteam(int index, uint32_t value) {
  _impl_.botcountbyteam_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.BotCountByTeam)
}
inline void UGCDebugSettingData::_internal_add_botcountbyteam(uint32_t value) {
  _impl_.botcountbyteam_.Add(value);
}
inline void UGCDebugSettingData::add_botcountbyteam(uint32_t value) {
  _internal_add_botcountbyteam(value);
  // @@protoc_insertion_point(field_add:message.UGCDebugSettingData.BotCountByTeam)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCDebugSettingData::_internal_botcountbyteam() const {
  return _impl_.botcountbyteam_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCDebugSettingData::botcountbyteam() const {
  // @@protoc_insertion_point(field_list:message.UGCDebugSettingData.BotCountByTeam)
  return _internal_botcountbyteam();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCDebugSettingData::_internal_mutable_botcountbyteam() {
  return &_impl_.botcountbyteam_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCDebugSettingData::mutable_botcountbyteam() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCDebugSettingData.BotCountByTeam)
  return _internal_mutable_botcountbyteam();
}

// string NickName = 7;
inline void UGCDebugSettingData::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UGCDebugSettingData::nickname() const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.NickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCDebugSettingData::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.NickName)
}
inline std::string* UGCDebugSettingData::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:message.UGCDebugSettingData.NickName)
  return _s;
}
inline const std::string& UGCDebugSettingData::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void UGCDebugSettingData::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCDebugSettingData::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCDebugSettingData::release_nickname() {
  // @@protoc_insertion_point(field_release:message.UGCDebugSettingData.NickName)
  return _impl_.nickname_.Release();
}
inline void UGCDebugSettingData::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCDebugSettingData.NickName)
}

// repeated string Breakpoints = 8;
inline int UGCDebugSettingData::_internal_breakpoints_size() const {
  return _impl_.breakpoints_.size();
}
inline int UGCDebugSettingData::breakpoints_size() const {
  return _internal_breakpoints_size();
}
inline void UGCDebugSettingData::clear_breakpoints() {
  _impl_.breakpoints_.Clear();
}
inline std::string* UGCDebugSettingData::add_breakpoints() {
  std::string* _s = _internal_add_breakpoints();
  // @@protoc_insertion_point(field_add_mutable:message.UGCDebugSettingData.Breakpoints)
  return _s;
}
inline const std::string& UGCDebugSettingData::_internal_breakpoints(int index) const {
  return _impl_.breakpoints_.Get(index);
}
inline const std::string& UGCDebugSettingData::breakpoints(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.Breakpoints)
  return _internal_breakpoints(index);
}
inline std::string* UGCDebugSettingData::mutable_breakpoints(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCDebugSettingData.Breakpoints)
  return _impl_.breakpoints_.Mutable(index);
}
inline void UGCDebugSettingData::set_breakpoints(int index, const std::string& value) {
  _impl_.breakpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.Breakpoints)
}
inline void UGCDebugSettingData::set_breakpoints(int index, std::string&& value) {
  _impl_.breakpoints_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.Breakpoints)
}
inline void UGCDebugSettingData::set_breakpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.breakpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCDebugSettingData.Breakpoints)
}
inline void UGCDebugSettingData::set_breakpoints(int index, const char* value, size_t size) {
  _impl_.breakpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCDebugSettingData.Breakpoints)
}
inline std::string* UGCDebugSettingData::_internal_add_breakpoints() {
  return _impl_.breakpoints_.Add();
}
inline void UGCDebugSettingData::add_breakpoints(const std::string& value) {
  _impl_.breakpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCDebugSettingData.Breakpoints)
}
inline void UGCDebugSettingData::add_breakpoints(std::string&& value) {
  _impl_.breakpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCDebugSettingData.Breakpoints)
}
inline void UGCDebugSettingData::add_breakpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.breakpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCDebugSettingData.Breakpoints)
}
inline void UGCDebugSettingData::add_breakpoints(const char* value, size_t size) {
  _impl_.breakpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCDebugSettingData.Breakpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCDebugSettingData::breakpoints() const {
  // @@protoc_insertion_point(field_list:message.UGCDebugSettingData.Breakpoints)
  return _impl_.breakpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCDebugSettingData::mutable_breakpoints() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCDebugSettingData.Breakpoints)
  return &_impl_.breakpoints_;
}

// uint32 GroupMode = 9;
inline void UGCDebugSettingData::clear_groupmode() {
  _impl_.groupmode_ = 0u;
}
inline uint32_t UGCDebugSettingData::_internal_groupmode() const {
  return _impl_.groupmode_;
}
inline uint32_t UGCDebugSettingData::groupmode() const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.GroupMode)
  return _internal_groupmode();
}
inline void UGCDebugSettingData::_internal_set_groupmode(uint32_t value) {
  
  _impl_.groupmode_ = value;
}
inline void UGCDebugSettingData::set_groupmode(uint32_t value) {
  _internal_set_groupmode(value);
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.GroupMode)
}

// bool IsStrictMode = 10;
inline void UGCDebugSettingData::clear_isstrictmode() {
  _impl_.isstrictmode_ = false;
}
inline bool UGCDebugSettingData::_internal_isstrictmode() const {
  return _impl_.isstrictmode_;
}
inline bool UGCDebugSettingData::isstrictmode() const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.IsStrictMode)
  return _internal_isstrictmode();
}
inline void UGCDebugSettingData::_internal_set_isstrictmode(bool value) {
  
  _impl_.isstrictmode_ = value;
}
inline void UGCDebugSettingData::set_isstrictmode(bool value) {
  _internal_set_isstrictmode(value);
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.IsStrictMode)
}

// repeated uint32 TokensValidId = 11;
inline int UGCDebugSettingData::_internal_tokensvalidid_size() const {
  return _impl_.tokensvalidid_.size();
}
inline int UGCDebugSettingData::tokensvalidid_size() const {
  return _internal_tokensvalidid_size();
}
inline void UGCDebugSettingData::clear_tokensvalidid() {
  _impl_.tokensvalidid_.Clear();
}
inline uint32_t UGCDebugSettingData::_internal_tokensvalidid(int index) const {
  return _impl_.tokensvalidid_.Get(index);
}
inline uint32_t UGCDebugSettingData::tokensvalidid(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCDebugSettingData.TokensValidId)
  return _internal_tokensvalidid(index);
}
inline void UGCDebugSettingData::set_tokensvalidid(int index, uint32_t value) {
  _impl_.tokensvalidid_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCDebugSettingData.TokensValidId)
}
inline void UGCDebugSettingData::_internal_add_tokensvalidid(uint32_t value) {
  _impl_.tokensvalidid_.Add(value);
}
inline void UGCDebugSettingData::add_tokensvalidid(uint32_t value) {
  _internal_add_tokensvalidid(value);
  // @@protoc_insertion_point(field_add:message.UGCDebugSettingData.TokensValidId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCDebugSettingData::_internal_tokensvalidid() const {
  return _impl_.tokensvalidid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCDebugSettingData::tokensvalidid() const {
  // @@protoc_insertion_point(field_list:message.UGCDebugSettingData.TokensValidId)
  return _internal_tokensvalidid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCDebugSettingData::_internal_mutable_tokensvalidid() {
  return &_impl_.tokensvalidid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCDebugSettingData::mutable_tokensvalidid() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCDebugSettingData.TokensValidId)
  return _internal_mutable_tokensvalidid();
}

// -------------------------------------------------------------------

// UGCPhaseData

// uint32 PhaseIndex = 1;
inline void UGCPhaseData::clear_phaseindex() {
  _impl_.phaseindex_ = 0u;
}
inline uint32_t UGCPhaseData::_internal_phaseindex() const {
  return _impl_.phaseindex_;
}
inline uint32_t UGCPhaseData::phaseindex() const {
  // @@protoc_insertion_point(field_get:message.UGCPhaseData.PhaseIndex)
  return _internal_phaseindex();
}
inline void UGCPhaseData::_internal_set_phaseindex(uint32_t value) {
  
  _impl_.phaseindex_ = value;
}
inline void UGCPhaseData::set_phaseindex(uint32_t value) {
  _internal_set_phaseindex(value);
  // @@protoc_insertion_point(field_set:message.UGCPhaseData.PhaseIndex)
}

// int32 Duration = 2;
inline void UGCPhaseData::clear_duration() {
  _impl_.duration_ = 0;
}
inline int32_t UGCPhaseData::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t UGCPhaseData::duration() const {
  // @@protoc_insertion_point(field_get:message.UGCPhaseData.Duration)
  return _internal_duration();
}
inline void UGCPhaseData::_internal_set_duration(int32_t value) {
  
  _impl_.duration_ = value;
}
inline void UGCPhaseData::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:message.UGCPhaseData.Duration)
}

// -------------------------------------------------------------------

// UGCRoundData

// uint32 PhaseIndex = 1;
inline void UGCRoundData::clear_phaseindex() {
  _impl_.phaseindex_ = 0u;
}
inline uint32_t UGCRoundData::_internal_phaseindex() const {
  return _impl_.phaseindex_;
}
inline uint32_t UGCRoundData::phaseindex() const {
  // @@protoc_insertion_point(field_get:message.UGCRoundData.PhaseIndex)
  return _internal_phaseindex();
}
inline void UGCRoundData::_internal_set_phaseindex(uint32_t value) {
  
  _impl_.phaseindex_ = value;
}
inline void UGCRoundData::set_phaseindex(uint32_t value) {
  _internal_set_phaseindex(value);
  // @@protoc_insertion_point(field_set:message.UGCRoundData.PhaseIndex)
}

// int32 RoundNumMax = 2;
inline void UGCRoundData::clear_roundnummax() {
  _impl_.roundnummax_ = 0;
}
inline int32_t UGCRoundData::_internal_roundnummax() const {
  return _impl_.roundnummax_;
}
inline int32_t UGCRoundData::roundnummax() const {
  // @@protoc_insertion_point(field_get:message.UGCRoundData.RoundNumMax)
  return _internal_roundnummax();
}
inline void UGCRoundData::_internal_set_roundnummax(int32_t value) {
  
  _impl_.roundnummax_ = value;
}
inline void UGCRoundData::set_roundnummax(int32_t value) {
  _internal_set_roundnummax(value);
  // @@protoc_insertion_point(field_set:message.UGCRoundData.RoundNumMax)
}

// repeated .message.UGCPhaseData PhaseData = 3;
inline int UGCRoundData::_internal_phasedata_size() const {
  return _impl_.phasedata_.size();
}
inline int UGCRoundData::phasedata_size() const {
  return _internal_phasedata_size();
}
inline void UGCRoundData::clear_phasedata() {
  _impl_.phasedata_.Clear();
}
inline ::message::UGCPhaseData* UGCRoundData::mutable_phasedata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCRoundData.PhaseData)
  return _impl_.phasedata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData >*
UGCRoundData::mutable_phasedata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCRoundData.PhaseData)
  return &_impl_.phasedata_;
}
inline const ::message::UGCPhaseData& UGCRoundData::_internal_phasedata(int index) const {
  return _impl_.phasedata_.Get(index);
}
inline const ::message::UGCPhaseData& UGCRoundData::phasedata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCRoundData.PhaseData)
  return _internal_phasedata(index);
}
inline ::message::UGCPhaseData* UGCRoundData::_internal_add_phasedata() {
  return _impl_.phasedata_.Add();
}
inline ::message::UGCPhaseData* UGCRoundData::add_phasedata() {
  ::message::UGCPhaseData* _add = _internal_add_phasedata();
  // @@protoc_insertion_point(field_add:message.UGCRoundData.PhaseData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData >&
UGCRoundData::phasedata() const {
  // @@protoc_insertion_point(field_list:message.UGCRoundData.PhaseData)
  return _impl_.phasedata_;
}

// -------------------------------------------------------------------

// UGCWorkflowSequenceItem

// .message.EUGCWorkflowSequenceItemType DataType = 1;
inline void UGCWorkflowSequenceItem::clear_datatype() {
  _impl_.datatype_ = 0;
}
inline ::message::EUGCWorkflowSequenceItemType UGCWorkflowSequenceItem::_internal_datatype() const {
  return static_cast< ::message::EUGCWorkflowSequenceItemType >(_impl_.datatype_);
}
inline ::message::EUGCWorkflowSequenceItemType UGCWorkflowSequenceItem::datatype() const {
  // @@protoc_insertion_point(field_get:message.UGCWorkflowSequenceItem.DataType)
  return _internal_datatype();
}
inline void UGCWorkflowSequenceItem::_internal_set_datatype(::message::EUGCWorkflowSequenceItemType value) {
  
  _impl_.datatype_ = value;
}
inline void UGCWorkflowSequenceItem::set_datatype(::message::EUGCWorkflowSequenceItemType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:message.UGCWorkflowSequenceItem.DataType)
}

// int32 DataIndex = 2;
inline void UGCWorkflowSequenceItem::clear_dataindex() {
  _impl_.dataindex_ = 0;
}
inline int32_t UGCWorkflowSequenceItem::_internal_dataindex() const {
  return _impl_.dataindex_;
}
inline int32_t UGCWorkflowSequenceItem::dataindex() const {
  // @@protoc_insertion_point(field_get:message.UGCWorkflowSequenceItem.DataIndex)
  return _internal_dataindex();
}
inline void UGCWorkflowSequenceItem::_internal_set_dataindex(int32_t value) {
  
  _impl_.dataindex_ = value;
}
inline void UGCWorkflowSequenceItem::set_dataindex(int32_t value) {
  _internal_set_dataindex(value);
  // @@protoc_insertion_point(field_set:message.UGCWorkflowSequenceItem.DataIndex)
}

// -------------------------------------------------------------------

// UGCWorkflowSequence

// repeated .message.UGCWorkflowSequenceItem Items = 1;
inline int UGCWorkflowSequence::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UGCWorkflowSequence::items_size() const {
  return _internal_items_size();
}
inline void UGCWorkflowSequence::clear_items() {
  _impl_.items_.Clear();
}
inline ::message::UGCWorkflowSequenceItem* UGCWorkflowSequence::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCWorkflowSequence.Items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCWorkflowSequenceItem >*
UGCWorkflowSequence::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCWorkflowSequence.Items)
  return &_impl_.items_;
}
inline const ::message::UGCWorkflowSequenceItem& UGCWorkflowSequence::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::message::UGCWorkflowSequenceItem& UGCWorkflowSequence::items(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCWorkflowSequence.Items)
  return _internal_items(index);
}
inline ::message::UGCWorkflowSequenceItem* UGCWorkflowSequence::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::message::UGCWorkflowSequenceItem* UGCWorkflowSequence::add_items() {
  ::message::UGCWorkflowSequenceItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:message.UGCWorkflowSequence.Items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCWorkflowSequenceItem >&
UGCWorkflowSequence::items() const {
  // @@protoc_insertion_point(field_list:message.UGCWorkflowSequence.Items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// UGCType

// int32 Declare = 1;
inline void UGCType::clear_declare() {
  _impl_.declare_ = 0;
}
inline int32_t UGCType::_internal_declare() const {
  return _impl_.declare_;
}
inline int32_t UGCType::declare() const {
  // @@protoc_insertion_point(field_get:message.UGCType.Declare)
  return _internal_declare();
}
inline void UGCType::_internal_set_declare(int32_t value) {
  
  _impl_.declare_ = value;
}
inline void UGCType::set_declare(int32_t value) {
  _internal_set_declare(value);
  // @@protoc_insertion_point(field_set:message.UGCType.Declare)
}

// repeated int32 BaseTypeIDs = 2;
inline int UGCType::_internal_basetypeids_size() const {
  return _impl_.basetypeids_.size();
}
inline int UGCType::basetypeids_size() const {
  return _internal_basetypeids_size();
}
inline void UGCType::clear_basetypeids() {
  _impl_.basetypeids_.Clear();
}
inline int32_t UGCType::_internal_basetypeids(int index) const {
  return _impl_.basetypeids_.Get(index);
}
inline int32_t UGCType::basetypeids(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCType.BaseTypeIDs)
  return _internal_basetypeids(index);
}
inline void UGCType::set_basetypeids(int index, int32_t value) {
  _impl_.basetypeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCType.BaseTypeIDs)
}
inline void UGCType::_internal_add_basetypeids(int32_t value) {
  _impl_.basetypeids_.Add(value);
}
inline void UGCType::add_basetypeids(int32_t value) {
  _internal_add_basetypeids(value);
  // @@protoc_insertion_point(field_add:message.UGCType.BaseTypeIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCType::_internal_basetypeids() const {
  return _impl_.basetypeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCType::basetypeids() const {
  // @@protoc_insertion_point(field_list:message.UGCType.BaseTypeIDs)
  return _internal_basetypeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCType::_internal_mutable_basetypeids() {
  return &_impl_.basetypeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCType::mutable_basetypeids() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCType.BaseTypeIDs)
  return _internal_mutable_basetypeids();
}

// repeated int32 AcceptTypeIDs = 3;
inline int UGCType::_internal_accepttypeids_size() const {
  return _impl_.accepttypeids_.size();
}
inline int UGCType::accepttypeids_size() const {
  return _internal_accepttypeids_size();
}
inline void UGCType::clear_accepttypeids() {
  _impl_.accepttypeids_.Clear();
}
inline int32_t UGCType::_internal_accepttypeids(int index) const {
  return _impl_.accepttypeids_.Get(index);
}
inline int32_t UGCType::accepttypeids(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCType.AcceptTypeIDs)
  return _internal_accepttypeids(index);
}
inline void UGCType::set_accepttypeids(int index, int32_t value) {
  _impl_.accepttypeids_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCType.AcceptTypeIDs)
}
inline void UGCType::_internal_add_accepttypeids(int32_t value) {
  _impl_.accepttypeids_.Add(value);
}
inline void UGCType::add_accepttypeids(int32_t value) {
  _internal_add_accepttypeids(value);
  // @@protoc_insertion_point(field_add:message.UGCType.AcceptTypeIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCType::_internal_accepttypeids() const {
  return _impl_.accepttypeids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCType::accepttypeids() const {
  // @@protoc_insertion_point(field_list:message.UGCType.AcceptTypeIDs)
  return _internal_accepttypeids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCType::_internal_mutable_accepttypeids() {
  return &_impl_.accepttypeids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCType::mutable_accepttypeids() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCType.AcceptTypeIDs)
  return _internal_mutable_accepttypeids();
}

// int32 ID = 4;
inline void UGCType::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t UGCType::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UGCType::id() const {
  // @@protoc_insertion_point(field_get:message.UGCType.ID)
  return _internal_id();
}
inline void UGCType::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void UGCType::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:message.UGCType.ID)
}

// string Name = 5;
inline void UGCType::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCType::name() const {
  // @@protoc_insertion_point(field_get:message.UGCType.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCType::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCType.Name)
}
inline std::string* UGCType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCType.Name)
  return _s;
}
inline const std::string& UGCType::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCType::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCType::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCType::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCType.Name)
  return _impl_.name_.Release();
}
inline void UGCType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCType.Name)
}

// int32 GenericsID = 6;
inline void UGCType::clear_genericsid() {
  _impl_.genericsid_ = 0;
}
inline int32_t UGCType::_internal_genericsid() const {
  return _impl_.genericsid_;
}
inline int32_t UGCType::genericsid() const {
  // @@protoc_insertion_point(field_get:message.UGCType.GenericsID)
  return _internal_genericsid();
}
inline void UGCType::_internal_set_genericsid(int32_t value) {
  
  _impl_.genericsid_ = value;
}
inline void UGCType::set_genericsid(int32_t value) {
  _internal_set_genericsid(value);
  // @@protoc_insertion_point(field_set:message.UGCType.GenericsID)
}

// int32 T0ID = 7;
inline void UGCType::clear_t0id() {
  _impl_.t0id_ = 0;
}
inline int32_t UGCType::_internal_t0id() const {
  return _impl_.t0id_;
}
inline int32_t UGCType::t0id() const {
  // @@protoc_insertion_point(field_get:message.UGCType.T0ID)
  return _internal_t0id();
}
inline void UGCType::_internal_set_t0id(int32_t value) {
  
  _impl_.t0id_ = value;
}
inline void UGCType::set_t0id(int32_t value) {
  _internal_set_t0id(value);
  // @@protoc_insertion_point(field_set:message.UGCType.T0ID)
}

// uint32 Attributes = 8;
inline void UGCType::clear_attributes() {
  _impl_.attributes_ = 0u;
}
inline uint32_t UGCType::_internal_attributes() const {
  return _impl_.attributes_;
}
inline uint32_t UGCType::attributes() const {
  // @@protoc_insertion_point(field_get:message.UGCType.Attributes)
  return _internal_attributes();
}
inline void UGCType::_internal_set_attributes(uint32_t value) {
  
  _impl_.attributes_ = value;
}
inline void UGCType::set_attributes(uint32_t value) {
  _internal_set_attributes(value);
  // @@protoc_insertion_point(field_set:message.UGCType.Attributes)
}

// int32 T1ID = 9;
inline void UGCType::clear_t1id() {
  _impl_.t1id_ = 0;
}
inline int32_t UGCType::_internal_t1id() const {
  return _impl_.t1id_;
}
inline int32_t UGCType::t1id() const {
  // @@protoc_insertion_point(field_get:message.UGCType.T1ID)
  return _internal_t1id();
}
inline void UGCType::_internal_set_t1id(int32_t value) {
  
  _impl_.t1id_ = value;
}
inline void UGCType::set_t1id(int32_t value) {
  _internal_set_t1id(value);
  // @@protoc_insertion_point(field_set:message.UGCType.T1ID)
}

// -------------------------------------------------------------------

// UGCTypeTree

// repeated .message.UGCType TypeMap = 1;
inline int UGCTypeTree::_internal_typemap_size() const {
  return _impl_.typemap_.size();
}
inline int UGCTypeTree::typemap_size() const {
  return _internal_typemap_size();
}
inline void UGCTypeTree::clear_typemap() {
  _impl_.typemap_.Clear();
}
inline ::message::UGCType* UGCTypeTree::mutable_typemap(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCTypeTree.TypeMap)
  return _impl_.typemap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCType >*
UGCTypeTree::mutable_typemap() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCTypeTree.TypeMap)
  return &_impl_.typemap_;
}
inline const ::message::UGCType& UGCTypeTree::_internal_typemap(int index) const {
  return _impl_.typemap_.Get(index);
}
inline const ::message::UGCType& UGCTypeTree::typemap(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCTypeTree.TypeMap)
  return _internal_typemap(index);
}
inline ::message::UGCType* UGCTypeTree::_internal_add_typemap() {
  return _impl_.typemap_.Add();
}
inline ::message::UGCType* UGCTypeTree::add_typemap() {
  ::message::UGCType* _add = _internal_add_typemap();
  // @@protoc_insertion_point(field_add:message.UGCTypeTree.TypeMap)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCType >&
UGCTypeTree::typemap() const {
  // @@protoc_insertion_point(field_list:message.UGCTypeTree.TypeMap)
  return _impl_.typemap_;
}

// repeated .message.UGCTypeComponentProp CmpProps = 2;
inline int UGCTypeTree::_internal_cmpprops_size() const {
  return _impl_.cmpprops_.size();
}
inline int UGCTypeTree::cmpprops_size() const {
  return _internal_cmpprops_size();
}
inline void UGCTypeTree::clear_cmpprops() {
  _impl_.cmpprops_.Clear();
}
inline ::message::UGCTypeComponentProp* UGCTypeTree::mutable_cmpprops(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCTypeTree.CmpProps)
  return _impl_.cmpprops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponentProp >*
UGCTypeTree::mutable_cmpprops() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCTypeTree.CmpProps)
  return &_impl_.cmpprops_;
}
inline const ::message::UGCTypeComponentProp& UGCTypeTree::_internal_cmpprops(int index) const {
  return _impl_.cmpprops_.Get(index);
}
inline const ::message::UGCTypeComponentProp& UGCTypeTree::cmpprops(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCTypeTree.CmpProps)
  return _internal_cmpprops(index);
}
inline ::message::UGCTypeComponentProp* UGCTypeTree::_internal_add_cmpprops() {
  return _impl_.cmpprops_.Add();
}
inline ::message::UGCTypeComponentProp* UGCTypeTree::add_cmpprops() {
  ::message::UGCTypeComponentProp* _add = _internal_add_cmpprops();
  // @@protoc_insertion_point(field_add:message.UGCTypeTree.CmpProps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponentProp >&
UGCTypeTree::cmpprops() const {
  // @@protoc_insertion_point(field_list:message.UGCTypeTree.CmpProps)
  return _impl_.cmpprops_;
}

// repeated .message.UGCTypeComponent Components = 3;
inline int UGCTypeTree::_internal_components_size() const {
  return _impl_.components_.size();
}
inline int UGCTypeTree::components_size() const {
  return _internal_components_size();
}
inline void UGCTypeTree::clear_components() {
  _impl_.components_.Clear();
}
inline ::message::UGCTypeComponent* UGCTypeTree::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCTypeTree.Components)
  return _impl_.components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponent >*
UGCTypeTree::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCTypeTree.Components)
  return &_impl_.components_;
}
inline const ::message::UGCTypeComponent& UGCTypeTree::_internal_components(int index) const {
  return _impl_.components_.Get(index);
}
inline const ::message::UGCTypeComponent& UGCTypeTree::components(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCTypeTree.Components)
  return _internal_components(index);
}
inline ::message::UGCTypeComponent* UGCTypeTree::_internal_add_components() {
  return _impl_.components_.Add();
}
inline ::message::UGCTypeComponent* UGCTypeTree::add_components() {
  ::message::UGCTypeComponent* _add = _internal_add_components();
  // @@protoc_insertion_point(field_add:message.UGCTypeTree.Components)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTypeComponent >&
UGCTypeTree::components() const {
  // @@protoc_insertion_point(field_list:message.UGCTypeTree.Components)
  return _impl_.components_;
}

// -------------------------------------------------------------------

// UGCTypeComponent

// int32 ID = 1;
inline void UGCTypeComponent::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t UGCTypeComponent::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UGCTypeComponent::id() const {
  // @@protoc_insertion_point(field_get:message.UGCTypeComponent.ID)
  return _internal_id();
}
inline void UGCTypeComponent::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void UGCTypeComponent::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:message.UGCTypeComponent.ID)
}

// repeated int32 Props = 2;
inline int UGCTypeComponent::_internal_props_size() const {
  return _impl_.props_.size();
}
inline int UGCTypeComponent::props_size() const {
  return _internal_props_size();
}
inline void UGCTypeComponent::clear_props() {
  _impl_.props_.Clear();
}
inline int32_t UGCTypeComponent::_internal_props(int index) const {
  return _impl_.props_.Get(index);
}
inline int32_t UGCTypeComponent::props(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCTypeComponent.Props)
  return _internal_props(index);
}
inline void UGCTypeComponent::set_props(int index, int32_t value) {
  _impl_.props_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCTypeComponent.Props)
}
inline void UGCTypeComponent::_internal_add_props(int32_t value) {
  _impl_.props_.Add(value);
}
inline void UGCTypeComponent::add_props(int32_t value) {
  _internal_add_props(value);
  // @@protoc_insertion_point(field_add:message.UGCTypeComponent.Props)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCTypeComponent::_internal_props() const {
  return _impl_.props_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCTypeComponent::props() const {
  // @@protoc_insertion_point(field_list:message.UGCTypeComponent.Props)
  return _internal_props();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCTypeComponent::_internal_mutable_props() {
  return &_impl_.props_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCTypeComponent::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCTypeComponent.Props)
  return _internal_mutable_props();
}

// -------------------------------------------------------------------

// UGCTypeComponentProp

// int32 ID = 1;
inline void UGCTypeComponentProp::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t UGCTypeComponentProp::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UGCTypeComponentProp::id() const {
  // @@protoc_insertion_point(field_get:message.UGCTypeComponentProp.ID)
  return _internal_id();
}
inline void UGCTypeComponentProp::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void UGCTypeComponentProp::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:message.UGCTypeComponentProp.ID)
}

// int32 Type = 2;
inline void UGCTypeComponentProp::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t UGCTypeComponentProp::_internal_type() const {
  return _impl_.type_;
}
inline int32_t UGCTypeComponentProp::type() const {
  // @@protoc_insertion_point(field_get:message.UGCTypeComponentProp.Type)
  return _internal_type();
}
inline void UGCTypeComponentProp::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void UGCTypeComponentProp::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.UGCTypeComponentProp.Type)
}

// .message.UGCVarValueDataV2 DefaultValue = 3;
inline bool UGCTypeComponentProp::_internal_has_defaultvalue() const {
  return this != internal_default_instance() && _impl_.defaultvalue_ != nullptr;
}
inline bool UGCTypeComponentProp::has_defaultvalue() const {
  return _internal_has_defaultvalue();
}
inline void UGCTypeComponentProp::clear_defaultvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.defaultvalue_ != nullptr) {
    delete _impl_.defaultvalue_;
  }
  _impl_.defaultvalue_ = nullptr;
}
inline const ::message::UGCVarValueDataV2& UGCTypeComponentProp::_internal_defaultvalue() const {
  const ::message::UGCVarValueDataV2* p = _impl_.defaultvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCVarValueDataV2&>(
      ::message::_UGCVarValueDataV2_default_instance_);
}
inline const ::message::UGCVarValueDataV2& UGCTypeComponentProp::defaultvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCTypeComponentProp.DefaultValue)
  return _internal_defaultvalue();
}
inline void UGCTypeComponentProp::unsafe_arena_set_allocated_defaultvalue(
    ::message::UGCVarValueDataV2* defaultvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defaultvalue_);
  }
  _impl_.defaultvalue_ = defaultvalue;
  if (defaultvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCTypeComponentProp.DefaultValue)
}
inline ::message::UGCVarValueDataV2* UGCTypeComponentProp::release_defaultvalue() {
  
  ::message::UGCVarValueDataV2* temp = _impl_.defaultvalue_;
  _impl_.defaultvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCTypeComponentProp::unsafe_arena_release_defaultvalue() {
  // @@protoc_insertion_point(field_release:message.UGCTypeComponentProp.DefaultValue)
  
  ::message::UGCVarValueDataV2* temp = _impl_.defaultvalue_;
  _impl_.defaultvalue_ = nullptr;
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCTypeComponentProp::_internal_mutable_defaultvalue() {
  
  if (_impl_.defaultvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCVarValueDataV2>(GetArenaForAllocation());
    _impl_.defaultvalue_ = p;
  }
  return _impl_.defaultvalue_;
}
inline ::message::UGCVarValueDataV2* UGCTypeComponentProp::mutable_defaultvalue() {
  ::message::UGCVarValueDataV2* _msg = _internal_mutable_defaultvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCTypeComponentProp.DefaultValue)
  return _msg;
}
inline void UGCTypeComponentProp::set_allocated_defaultvalue(::message::UGCVarValueDataV2* defaultvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.defaultvalue_;
  }
  if (defaultvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(defaultvalue);
    if (message_arena != submessage_arena) {
      defaultvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultvalue, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.defaultvalue_ = defaultvalue;
  // @@protoc_insertion_point(field_set_allocated:message.UGCTypeComponentProp.DefaultValue)
}

// -------------------------------------------------------------------

// UGCCustomReplicationDataItemForEditor

// string Name = 1;
inline void UGCCustomReplicationDataItemForEditor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCCustomReplicationDataItemForEditor::name() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemForEditor.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCCustomReplicationDataItemForEditor::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataItemForEditor.Name)
}
inline std::string* UGCCustomReplicationDataItemForEditor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataItemForEditor.Name)
  return _s;
}
inline const std::string& UGCCustomReplicationDataItemForEditor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCCustomReplicationDataItemForEditor::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataItemForEditor::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataItemForEditor::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataItemForEditor.Name)
  return _impl_.name_.Release();
}
inline void UGCCustomReplicationDataItemForEditor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataItemForEditor.Name)
}

// string TypeID = 2;
inline void UGCCustomReplicationDataItemForEditor::clear_typeid_() {
  _impl_.typeid__.ClearToEmpty();
}
inline const std::string& UGCCustomReplicationDataItemForEditor::typeid_() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemForEditor.TypeID)
  return _internal_typeid_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCCustomReplicationDataItemForEditor::set_typeid_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.typeid__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataItemForEditor.TypeID)
}
inline std::string* UGCCustomReplicationDataItemForEditor::mutable_typeid_() {
  std::string* _s = _internal_mutable_typeid_();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataItemForEditor.TypeID)
  return _s;
}
inline const std::string& UGCCustomReplicationDataItemForEditor::_internal_typeid_() const {
  return _impl_.typeid__.Get();
}
inline void UGCCustomReplicationDataItemForEditor::_internal_set_typeid_(const std::string& value) {
  
  _impl_.typeid__.Set(value, GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataItemForEditor::_internal_mutable_typeid_() {
  
  return _impl_.typeid__.Mutable(GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataItemForEditor::release_typeid_() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataItemForEditor.TypeID)
  return _impl_.typeid__.Release();
}
inline void UGCCustomReplicationDataItemForEditor::set_allocated_typeid_(std::string* typeid_) {
  if (typeid_ != nullptr) {
    
  } else {
    
  }
  _impl_.typeid__.SetAllocated(typeid_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.typeid__.IsDefault()) {
    _impl_.typeid__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataItemForEditor.TypeID)
}

// .message.UGCVarValueDataV2 Value = 3;
inline bool UGCCustomReplicationDataItemForEditor::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool UGCCustomReplicationDataItemForEditor::has_value() const {
  return _internal_has_value();
}
inline void UGCCustomReplicationDataItemForEditor::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::message::UGCVarValueDataV2& UGCCustomReplicationDataItemForEditor::_internal_value() const {
  const ::message::UGCVarValueDataV2* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCVarValueDataV2&>(
      ::message::_UGCVarValueDataV2_default_instance_);
}
inline const ::message::UGCVarValueDataV2& UGCCustomReplicationDataItemForEditor::value() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemForEditor.Value)
  return _internal_value();
}
inline void UGCCustomReplicationDataItemForEditor::unsafe_arena_set_allocated_value(
    ::message::UGCVarValueDataV2* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCCustomReplicationDataItemForEditor.Value)
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemForEditor::release_value() {
  
  ::message::UGCVarValueDataV2* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemForEditor::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataItemForEditor.Value)
  
  ::message::UGCVarValueDataV2* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemForEditor::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCVarValueDataV2>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemForEditor::mutable_value() {
  ::message::UGCVarValueDataV2* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataItemForEditor.Value)
  return _msg;
}
inline void UGCCustomReplicationDataItemForEditor::set_allocated_value(::message::UGCVarValueDataV2* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataItemForEditor.Value)
}

// -------------------------------------------------------------------

// UGCLogicEntityDataForEditor

// string ID = 1;
inline void UGCLogicEntityDataForEditor::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCLogicEntityDataForEditor::id() const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataForEditor.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCLogicEntityDataForEditor::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataForEditor.ID)
}
inline std::string* UGCLogicEntityDataForEditor::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataForEditor.ID)
  return _s;
}
inline const std::string& UGCLogicEntityDataForEditor::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCLogicEntityDataForEditor::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataForEditor::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataForEditor::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCLogicEntityDataForEditor.ID)
  return _impl_.id_.Release();
}
inline void UGCLogicEntityDataForEditor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCLogicEntityDataForEditor.ID)
}

// string Type = 2;
inline void UGCLogicEntityDataForEditor::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& UGCLogicEntityDataForEditor::type() const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataForEditor.Type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCLogicEntityDataForEditor::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataForEditor.Type)
}
inline std::string* UGCLogicEntityDataForEditor::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataForEditor.Type)
  return _s;
}
inline const std::string& UGCLogicEntityDataForEditor::_internal_type() const {
  return _impl_.type_.Get();
}
inline void UGCLogicEntityDataForEditor::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataForEditor::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataForEditor::release_type() {
  // @@protoc_insertion_point(field_release:message.UGCLogicEntityDataForEditor.Type)
  return _impl_.type_.Release();
}
inline void UGCLogicEntityDataForEditor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCLogicEntityDataForEditor.Type)
}

// repeated string GraphIDs = 3;
inline int UGCLogicEntityDataForEditor::_internal_graphids_size() const {
  return _impl_.graphids_.size();
}
inline int UGCLogicEntityDataForEditor::graphids_size() const {
  return _internal_graphids_size();
}
inline void UGCLogicEntityDataForEditor::clear_graphids() {
  _impl_.graphids_.Clear();
}
inline std::string* UGCLogicEntityDataForEditor::add_graphids() {
  std::string* _s = _internal_add_graphids();
  // @@protoc_insertion_point(field_add_mutable:message.UGCLogicEntityDataForEditor.GraphIDs)
  return _s;
}
inline const std::string& UGCLogicEntityDataForEditor::_internal_graphids(int index) const {
  return _impl_.graphids_.Get(index);
}
inline const std::string& UGCLogicEntityDataForEditor::graphids(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataForEditor.GraphIDs)
  return _internal_graphids(index);
}
inline std::string* UGCLogicEntityDataForEditor::mutable_graphids(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataForEditor.GraphIDs)
  return _impl_.graphids_.Mutable(index);
}
inline void UGCLogicEntityDataForEditor::set_graphids(int index, const std::string& value) {
  _impl_.graphids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataForEditor.GraphIDs)
}
inline void UGCLogicEntityDataForEditor::set_graphids(int index, std::string&& value) {
  _impl_.graphids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataForEditor.GraphIDs)
}
inline void UGCLogicEntityDataForEditor::set_graphids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.graphids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCLogicEntityDataForEditor.GraphIDs)
}
inline void UGCLogicEntityDataForEditor::set_graphids(int index, const char* value, size_t size) {
  _impl_.graphids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCLogicEntityDataForEditor.GraphIDs)
}
inline std::string* UGCLogicEntityDataForEditor::_internal_add_graphids() {
  return _impl_.graphids_.Add();
}
inline void UGCLogicEntityDataForEditor::add_graphids(const std::string& value) {
  _impl_.graphids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataForEditor.GraphIDs)
}
inline void UGCLogicEntityDataForEditor::add_graphids(std::string&& value) {
  _impl_.graphids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataForEditor.GraphIDs)
}
inline void UGCLogicEntityDataForEditor::add_graphids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.graphids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCLogicEntityDataForEditor.GraphIDs)
}
inline void UGCLogicEntityDataForEditor::add_graphids(const char* value, size_t size) {
  _impl_.graphids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCLogicEntityDataForEditor.GraphIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCLogicEntityDataForEditor::graphids() const {
  // @@protoc_insertion_point(field_list:message.UGCLogicEntityDataForEditor.GraphIDs)
  return _impl_.graphids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCLogicEntityDataForEditor::mutable_graphids() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLogicEntityDataForEditor.GraphIDs)
  return &_impl_.graphids_;
}

// repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
inline int UGCLogicEntityDataForEditor::_internal_repdataitem_size() const {
  return _impl_.repdataitem_.size();
}
inline int UGCLogicEntityDataForEditor::repdataitem_size() const {
  return _internal_repdataitem_size();
}
inline void UGCLogicEntityDataForEditor::clear_repdataitem() {
  _impl_.repdataitem_.Clear();
}
inline ::message::UGCCustomReplicationDataItemInstanceV2* UGCLogicEntityDataForEditor::mutable_repdataitem(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataForEditor.RepDataItem)
  return _impl_.repdataitem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >*
UGCLogicEntityDataForEditor::mutable_repdataitem() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLogicEntityDataForEditor.RepDataItem)
  return &_impl_.repdataitem_;
}
inline const ::message::UGCCustomReplicationDataItemInstanceV2& UGCLogicEntityDataForEditor::_internal_repdataitem(int index) const {
  return _impl_.repdataitem_.Get(index);
}
inline const ::message::UGCCustomReplicationDataItemInstanceV2& UGCLogicEntityDataForEditor::repdataitem(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataForEditor.RepDataItem)
  return _internal_repdataitem(index);
}
inline ::message::UGCCustomReplicationDataItemInstanceV2* UGCLogicEntityDataForEditor::_internal_add_repdataitem() {
  return _impl_.repdataitem_.Add();
}
inline ::message::UGCCustomReplicationDataItemInstanceV2* UGCLogicEntityDataForEditor::add_repdataitem() {
  ::message::UGCCustomReplicationDataItemInstanceV2* _add = _internal_add_repdataitem();
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataForEditor.RepDataItem)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >&
UGCLogicEntityDataForEditor::repdataitem() const {
  // @@protoc_insertion_point(field_list:message.UGCLogicEntityDataForEditor.RepDataItem)
  return _impl_.repdataitem_;
}

// string EditorType = 5;
inline void UGCLogicEntityDataForEditor::clear_editortype() {
  _impl_.editortype_.ClearToEmpty();
}
inline const std::string& UGCLogicEntityDataForEditor::editortype() const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataForEditor.EditorType)
  return _internal_editortype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCLogicEntityDataForEditor::set_editortype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.editortype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataForEditor.EditorType)
}
inline std::string* UGCLogicEntityDataForEditor::mutable_editortype() {
  std::string* _s = _internal_mutable_editortype();
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataForEditor.EditorType)
  return _s;
}
inline const std::string& UGCLogicEntityDataForEditor::_internal_editortype() const {
  return _impl_.editortype_.Get();
}
inline void UGCLogicEntityDataForEditor::_internal_set_editortype(const std::string& value) {
  
  _impl_.editortype_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataForEditor::_internal_mutable_editortype() {
  
  return _impl_.editortype_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataForEditor::release_editortype() {
  // @@protoc_insertion_point(field_release:message.UGCLogicEntityDataForEditor.EditorType)
  return _impl_.editortype_.Release();
}
inline void UGCLogicEntityDataForEditor::set_allocated_editortype(std::string* editortype) {
  if (editortype != nullptr) {
    
  } else {
    
  }
  _impl_.editortype_.SetAllocated(editortype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.editortype_.IsDefault()) {
    _impl_.editortype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCLogicEntityDataForEditor.EditorType)
}

// -------------------------------------------------------------------

// UGCCustomReplicationDataForEditor

// string EntityType = 1;
inline void UGCCustomReplicationDataForEditor::clear_entitytype() {
  _impl_.entitytype_.ClearToEmpty();
}
inline const std::string& UGCCustomReplicationDataForEditor::entitytype() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataForEditor.EntityType)
  return _internal_entitytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCCustomReplicationDataForEditor::set_entitytype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entitytype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataForEditor.EntityType)
}
inline std::string* UGCCustomReplicationDataForEditor::mutable_entitytype() {
  std::string* _s = _internal_mutable_entitytype();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataForEditor.EntityType)
  return _s;
}
inline const std::string& UGCCustomReplicationDataForEditor::_internal_entitytype() const {
  return _impl_.entitytype_.Get();
}
inline void UGCCustomReplicationDataForEditor::_internal_set_entitytype(const std::string& value) {
  
  _impl_.entitytype_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataForEditor::_internal_mutable_entitytype() {
  
  return _impl_.entitytype_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataForEditor::release_entitytype() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataForEditor.EntityType)
  return _impl_.entitytype_.Release();
}
inline void UGCCustomReplicationDataForEditor::set_allocated_entitytype(std::string* entitytype) {
  if (entitytype != nullptr) {
    
  } else {
    
  }
  _impl_.entitytype_.SetAllocated(entitytype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entitytype_.IsDefault()) {
    _impl_.entitytype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataForEditor.EntityType)
}

// repeated .message.UGCCustomReplicationDataItemForEditor ItemData = 2;
inline int UGCCustomReplicationDataForEditor::_internal_itemdata_size() const {
  return _impl_.itemdata_.size();
}
inline int UGCCustomReplicationDataForEditor::itemdata_size() const {
  return _internal_itemdata_size();
}
inline void UGCCustomReplicationDataForEditor::clear_itemdata() {
  _impl_.itemdata_.Clear();
}
inline ::message::UGCCustomReplicationDataItemForEditor* UGCCustomReplicationDataForEditor::mutable_itemdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataForEditor.ItemData)
  return _impl_.itemdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemForEditor >*
UGCCustomReplicationDataForEditor::mutable_itemdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCCustomReplicationDataForEditor.ItemData)
  return &_impl_.itemdata_;
}
inline const ::message::UGCCustomReplicationDataItemForEditor& UGCCustomReplicationDataForEditor::_internal_itemdata(int index) const {
  return _impl_.itemdata_.Get(index);
}
inline const ::message::UGCCustomReplicationDataItemForEditor& UGCCustomReplicationDataForEditor::itemdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataForEditor.ItemData)
  return _internal_itemdata(index);
}
inline ::message::UGCCustomReplicationDataItemForEditor* UGCCustomReplicationDataForEditor::_internal_add_itemdata() {
  return _impl_.itemdata_.Add();
}
inline ::message::UGCCustomReplicationDataItemForEditor* UGCCustomReplicationDataForEditor::add_itemdata() {
  ::message::UGCCustomReplicationDataItemForEditor* _add = _internal_add_itemdata();
  // @@protoc_insertion_point(field_add:message.UGCCustomReplicationDataForEditor.ItemData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemForEditor >&
UGCCustomReplicationDataForEditor::itemdata() const {
  // @@protoc_insertion_point(field_list:message.UGCCustomReplicationDataForEditor.ItemData)
  return _impl_.itemdata_;
}

// -------------------------------------------------------------------

// UGCVarValueData

// .message.EUGCValueType ValueType = 1;
inline void UGCVarValueData::clear_valuetype() {
  _impl_.valuetype_ = 0;
}
inline ::message::EUGCValueType UGCVarValueData::_internal_valuetype() const {
  return static_cast< ::message::EUGCValueType >(_impl_.valuetype_);
}
inline ::message::EUGCValueType UGCVarValueData::valuetype() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueData.ValueType)
  return _internal_valuetype();
}
inline void UGCVarValueData::_internal_set_valuetype(::message::EUGCValueType value) {
  
  _impl_.valuetype_ = value;
}
inline void UGCVarValueData::set_valuetype(::message::EUGCValueType value) {
  _internal_set_valuetype(value);
  // @@protoc_insertion_point(field_set:message.UGCVarValueData.ValueType)
}

// .message.UGCFuncCallerData FuncValue = 2;
inline bool UGCVarValueData::_internal_has_funcvalue() const {
  return this != internal_default_instance() && _impl_.funcvalue_ != nullptr;
}
inline bool UGCVarValueData::has_funcvalue() const {
  return _internal_has_funcvalue();
}
inline void UGCVarValueData::clear_funcvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.funcvalue_ != nullptr) {
    delete _impl_.funcvalue_;
  }
  _impl_.funcvalue_ = nullptr;
}
inline const ::message::UGCFuncCallerData& UGCVarValueData::_internal_funcvalue() const {
  const ::message::UGCFuncCallerData* p = _impl_.funcvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCFuncCallerData&>(
      ::message::_UGCFuncCallerData_default_instance_);
}
inline const ::message::UGCFuncCallerData& UGCVarValueData::funcvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueData.FuncValue)
  return _internal_funcvalue();
}
inline void UGCVarValueData::unsafe_arena_set_allocated_funcvalue(
    ::message::UGCFuncCallerData* funcvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.funcvalue_);
  }
  _impl_.funcvalue_ = funcvalue;
  if (funcvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCVarValueData.FuncValue)
}
inline ::message::UGCFuncCallerData* UGCVarValueData::release_funcvalue() {
  
  ::message::UGCFuncCallerData* temp = _impl_.funcvalue_;
  _impl_.funcvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCFuncCallerData* UGCVarValueData::unsafe_arena_release_funcvalue() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueData.FuncValue)
  
  ::message::UGCFuncCallerData* temp = _impl_.funcvalue_;
  _impl_.funcvalue_ = nullptr;
  return temp;
}
inline ::message::UGCFuncCallerData* UGCVarValueData::_internal_mutable_funcvalue() {
  
  if (_impl_.funcvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCFuncCallerData>(GetArenaForAllocation());
    _impl_.funcvalue_ = p;
  }
  return _impl_.funcvalue_;
}
inline ::message::UGCFuncCallerData* UGCVarValueData::mutable_funcvalue() {
  ::message::UGCFuncCallerData* _msg = _internal_mutable_funcvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueData.FuncValue)
  return _msg;
}
inline void UGCVarValueData::set_allocated_funcvalue(::message::UGCFuncCallerData* funcvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.funcvalue_;
  }
  if (funcvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(funcvalue);
    if (message_arena != submessage_arena) {
      funcvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funcvalue, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.funcvalue_ = funcvalue;
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueData.FuncValue)
}

// bool BoolValue = 3;
inline void UGCVarValueData::clear_boolvalue() {
  _impl_.boolvalue_ = false;
}
inline bool UGCVarValueData::_internal_boolvalue() const {
  return _impl_.boolvalue_;
}
inline bool UGCVarValueData::boolvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueData.BoolValue)
  return _internal_boolvalue();
}
inline void UGCVarValueData::_internal_set_boolvalue(bool value) {
  
  _impl_.boolvalue_ = value;
}
inline void UGCVarValueData::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCVarValueData.BoolValue)
}

// int32 IntValue = 4;
inline void UGCVarValueData::clear_intvalue() {
  _impl_.intvalue_ = 0;
}
inline int32_t UGCVarValueData::_internal_intvalue() const {
  return _impl_.intvalue_;
}
inline int32_t UGCVarValueData::intvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueData.IntValue)
  return _internal_intvalue();
}
inline void UGCVarValueData::_internal_set_intvalue(int32_t value) {
  
  _impl_.intvalue_ = value;
}
inline void UGCVarValueData::set_intvalue(int32_t value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCVarValueData.IntValue)
}

// float FloatValue = 5;
inline void UGCVarValueData::clear_floatvalue() {
  _impl_.floatvalue_ = 0;
}
inline float UGCVarValueData::_internal_floatvalue() const {
  return _impl_.floatvalue_;
}
inline float UGCVarValueData::floatvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueData.FloatValue)
  return _internal_floatvalue();
}
inline void UGCVarValueData::_internal_set_floatvalue(float value) {
  
  _impl_.floatvalue_ = value;
}
inline void UGCVarValueData::set_floatvalue(float value) {
  _internal_set_floatvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCVarValueData.FloatValue)
}

// string StringValue = 6;
inline void UGCVarValueData::clear_stringvalue() {
  _impl_.stringvalue_.ClearToEmpty();
}
inline const std::string& UGCVarValueData::stringvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueData.StringValue)
  return _internal_stringvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCVarValueData::set_stringvalue(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stringvalue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVarValueData.StringValue)
}
inline std::string* UGCVarValueData::mutable_stringvalue() {
  std::string* _s = _internal_mutable_stringvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueData.StringValue)
  return _s;
}
inline const std::string& UGCVarValueData::_internal_stringvalue() const {
  return _impl_.stringvalue_.Get();
}
inline void UGCVarValueData::_internal_set_stringvalue(const std::string& value) {
  
  _impl_.stringvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVarValueData::_internal_mutable_stringvalue() {
  
  return _impl_.stringvalue_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCVarValueData::release_stringvalue() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueData.StringValue)
  return _impl_.stringvalue_.Release();
}
inline void UGCVarValueData::set_allocated_stringvalue(std::string* stringvalue) {
  if (stringvalue != nullptr) {
    
  } else {
    
  }
  _impl_.stringvalue_.SetAllocated(stringvalue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stringvalue_.IsDefault()) {
    _impl_.stringvalue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueData.StringValue)
}

// .message.ProtoBuffVector3 Vector3Value = 7;
inline bool UGCVarValueData::_internal_has_vector3value() const {
  return this != internal_default_instance() && _impl_.vector3value_ != nullptr;
}
inline bool UGCVarValueData::has_vector3value() const {
  return _internal_has_vector3value();
}
inline const ::message::ProtoBuffVector3& UGCVarValueData::_internal_vector3value() const {
  const ::message::ProtoBuffVector3* p = _impl_.vector3value_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCVarValueData::vector3value() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueData.Vector3Value)
  return _internal_vector3value();
}
inline void UGCVarValueData::unsafe_arena_set_allocated_vector3value(
    ::message::ProtoBuffVector3* vector3value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector3value_);
  }
  _impl_.vector3value_ = vector3value;
  if (vector3value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCVarValueData.Vector3Value)
}
inline ::message::ProtoBuffVector3* UGCVarValueData::release_vector3value() {
  
  ::message::ProtoBuffVector3* temp = _impl_.vector3value_;
  _impl_.vector3value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCVarValueData::unsafe_arena_release_vector3value() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueData.Vector3Value)
  
  ::message::ProtoBuffVector3* temp = _impl_.vector3value_;
  _impl_.vector3value_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCVarValueData::_internal_mutable_vector3value() {
  
  if (_impl_.vector3value_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.vector3value_ = p;
  }
  return _impl_.vector3value_;
}
inline ::message::ProtoBuffVector3* UGCVarValueData::mutable_vector3value() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_vector3value();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueData.Vector3Value)
  return _msg;
}
inline void UGCVarValueData::set_allocated_vector3value(::message::ProtoBuffVector3* vector3value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector3value_);
  }
  if (vector3value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector3value));
    if (message_arena != submessage_arena) {
      vector3value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector3value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vector3value_ = vector3value;
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueData.Vector3Value)
}

// repeated .message.UGCVarValueData ArrayValue = 8;
inline int UGCVarValueData::_internal_arrayvalue_size() const {
  return _impl_.arrayvalue_.size();
}
inline int UGCVarValueData::arrayvalue_size() const {
  return _internal_arrayvalue_size();
}
inline void UGCVarValueData::clear_arrayvalue() {
  _impl_.arrayvalue_.Clear();
}
inline ::message::UGCVarValueData* UGCVarValueData::mutable_arrayvalue(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueData.ArrayValue)
  return _impl_.arrayvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData >*
UGCVarValueData::mutable_arrayvalue() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCVarValueData.ArrayValue)
  return &_impl_.arrayvalue_;
}
inline const ::message::UGCVarValueData& UGCVarValueData::_internal_arrayvalue(int index) const {
  return _impl_.arrayvalue_.Get(index);
}
inline const ::message::UGCVarValueData& UGCVarValueData::arrayvalue(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueData.ArrayValue)
  return _internal_arrayvalue(index);
}
inline ::message::UGCVarValueData* UGCVarValueData::_internal_add_arrayvalue() {
  return _impl_.arrayvalue_.Add();
}
inline ::message::UGCVarValueData* UGCVarValueData::add_arrayvalue() {
  ::message::UGCVarValueData* _add = _internal_add_arrayvalue();
  // @@protoc_insertion_point(field_add:message.UGCVarValueData.ArrayValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData >&
UGCVarValueData::arrayvalue() const {
  // @@protoc_insertion_point(field_list:message.UGCVarValueData.ArrayValue)
  return _impl_.arrayvalue_;
}

// -------------------------------------------------------------------

// UGCFuncCallerData

// string ID = 1;
inline void UGCFuncCallerData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCFuncCallerData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerData.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCFuncCallerData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCFuncCallerData.ID)
}
inline std::string* UGCFuncCallerData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCFuncCallerData.ID)
  return _s;
}
inline const std::string& UGCFuncCallerData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCFuncCallerData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCFuncCallerData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCFuncCallerData::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCFuncCallerData.ID)
  return _impl_.id_.Release();
}
inline void UGCFuncCallerData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCFuncCallerData.ID)
}

// string Name = 2;
inline void UGCFuncCallerData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCFuncCallerData::name() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCFuncCallerData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCFuncCallerData.Name)
}
inline std::string* UGCFuncCallerData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCFuncCallerData.Name)
  return _s;
}
inline const std::string& UGCFuncCallerData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCFuncCallerData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCFuncCallerData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCFuncCallerData::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCFuncCallerData.Name)
  return _impl_.name_.Release();
}
inline void UGCFuncCallerData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCFuncCallerData.Name)
}

// int32 Type = 3;
inline void UGCFuncCallerData::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t UGCFuncCallerData::_internal_type() const {
  return _impl_.type_;
}
inline int32_t UGCFuncCallerData::type() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerData.Type)
  return _internal_type();
}
inline void UGCFuncCallerData::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void UGCFuncCallerData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.UGCFuncCallerData.Type)
}

// repeated .message.UGCVarValueData Params = 4;
inline int UGCFuncCallerData::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int UGCFuncCallerData::params_size() const {
  return _internal_params_size();
}
inline void UGCFuncCallerData::clear_params() {
  _impl_.params_.Clear();
}
inline ::message::UGCVarValueData* UGCFuncCallerData::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCFuncCallerData.Params)
  return _impl_.params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData >*
UGCFuncCallerData::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCFuncCallerData.Params)
  return &_impl_.params_;
}
inline const ::message::UGCVarValueData& UGCFuncCallerData::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const ::message::UGCVarValueData& UGCFuncCallerData::params(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerData.Params)
  return _internal_params(index);
}
inline ::message::UGCVarValueData* UGCFuncCallerData::_internal_add_params() {
  return _impl_.params_.Add();
}
inline ::message::UGCVarValueData* UGCFuncCallerData::add_params() {
  ::message::UGCVarValueData* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:message.UGCFuncCallerData.Params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueData >&
UGCFuncCallerData::params() const {
  // @@protoc_insertion_point(field_list:message.UGCFuncCallerData.Params)
  return _impl_.params_;
}

// repeated .message.UGCFuncCallerData SubCallerData = 5;
inline int UGCFuncCallerData::_internal_subcallerdata_size() const {
  return _impl_.subcallerdata_.size();
}
inline int UGCFuncCallerData::subcallerdata_size() const {
  return _internal_subcallerdata_size();
}
inline void UGCFuncCallerData::clear_subcallerdata() {
  _impl_.subcallerdata_.Clear();
}
inline ::message::UGCFuncCallerData* UGCFuncCallerData::mutable_subcallerdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCFuncCallerData.SubCallerData)
  return _impl_.subcallerdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData >*
UGCFuncCallerData::mutable_subcallerdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCFuncCallerData.SubCallerData)
  return &_impl_.subcallerdata_;
}
inline const ::message::UGCFuncCallerData& UGCFuncCallerData::_internal_subcallerdata(int index) const {
  return _impl_.subcallerdata_.Get(index);
}
inline const ::message::UGCFuncCallerData& UGCFuncCallerData::subcallerdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerData.SubCallerData)
  return _internal_subcallerdata(index);
}
inline ::message::UGCFuncCallerData* UGCFuncCallerData::_internal_add_subcallerdata() {
  return _impl_.subcallerdata_.Add();
}
inline ::message::UGCFuncCallerData* UGCFuncCallerData::add_subcallerdata() {
  ::message::UGCFuncCallerData* _add = _internal_add_subcallerdata();
  // @@protoc_insertion_point(field_add:message.UGCFuncCallerData.SubCallerData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData >&
UGCFuncCallerData::subcallerdata() const {
  // @@protoc_insertion_point(field_list:message.UGCFuncCallerData.SubCallerData)
  return _impl_.subcallerdata_;
}

// bool UseUpvalue = 6;
inline void UGCFuncCallerData::clear_useupvalue() {
  _impl_.useupvalue_ = false;
}
inline bool UGCFuncCallerData::_internal_useupvalue() const {
  return _impl_.useupvalue_;
}
inline bool UGCFuncCallerData::useupvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerData.UseUpvalue)
  return _internal_useupvalue();
}
inline void UGCFuncCallerData::_internal_set_useupvalue(bool value) {
  
  _impl_.useupvalue_ = value;
}
inline void UGCFuncCallerData::set_useupvalue(bool value) {
  _internal_set_useupvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCFuncCallerData.UseUpvalue)
}

// -------------------------------------------------------------------

// UGCVarDefineData

// string ID = 1;
inline void UGCVarDefineData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCVarDefineData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCVarDefineData.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCVarDefineData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVarDefineData.ID)
}
inline std::string* UGCVarDefineData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCVarDefineData.ID)
  return _s;
}
inline const std::string& UGCVarDefineData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCVarDefineData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVarDefineData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCVarDefineData::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCVarDefineData.ID)
  return _impl_.id_.Release();
}
inline void UGCVarDefineData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarDefineData.ID)
}

// string Name = 2;
inline void UGCVarDefineData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCVarDefineData::name() const {
  // @@protoc_insertion_point(field_get:message.UGCVarDefineData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCVarDefineData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVarDefineData.Name)
}
inline std::string* UGCVarDefineData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCVarDefineData.Name)
  return _s;
}
inline const std::string& UGCVarDefineData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCVarDefineData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVarDefineData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCVarDefineData::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCVarDefineData.Name)
  return _impl_.name_.Release();
}
inline void UGCVarDefineData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarDefineData.Name)
}

// .message.UGCVarValueData Value = 3;
inline bool UGCVarDefineData::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool UGCVarDefineData::has_value() const {
  return _internal_has_value();
}
inline void UGCVarDefineData::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::message::UGCVarValueData& UGCVarDefineData::_internal_value() const {
  const ::message::UGCVarValueData* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCVarValueData&>(
      ::message::_UGCVarValueData_default_instance_);
}
inline const ::message::UGCVarValueData& UGCVarDefineData::value() const {
  // @@protoc_insertion_point(field_get:message.UGCVarDefineData.Value)
  return _internal_value();
}
inline void UGCVarDefineData::unsafe_arena_set_allocated_value(
    ::message::UGCVarValueData* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCVarDefineData.Value)
}
inline ::message::UGCVarValueData* UGCVarDefineData::release_value() {
  
  ::message::UGCVarValueData* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCVarValueData* UGCVarDefineData::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:message.UGCVarDefineData.Value)
  
  ::message::UGCVarValueData* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::message::UGCVarValueData* UGCVarDefineData::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCVarValueData>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::message::UGCVarValueData* UGCVarDefineData::mutable_value() {
  ::message::UGCVarValueData* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:message.UGCVarDefineData.Value)
  return _msg;
}
inline void UGCVarDefineData::set_allocated_value(::message::UGCVarValueData* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarDefineData.Value)
}

// -------------------------------------------------------------------

// UGCRuleData

// int32 EventType = 1;
inline void UGCRuleData::clear_eventtype() {
  _impl_.eventtype_ = 0;
}
inline int32_t UGCRuleData::_internal_eventtype() const {
  return _impl_.eventtype_;
}
inline int32_t UGCRuleData::eventtype() const {
  // @@protoc_insertion_point(field_get:message.UGCRuleData.EventType)
  return _internal_eventtype();
}
inline void UGCRuleData::_internal_set_eventtype(int32_t value) {
  
  _impl_.eventtype_ = value;
}
inline void UGCRuleData::set_eventtype(int32_t value) {
  _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:message.UGCRuleData.EventType)
}

// .message.UGCFuncCallerData CallerData = 2;
inline bool UGCRuleData::_internal_has_callerdata() const {
  return this != internal_default_instance() && _impl_.callerdata_ != nullptr;
}
inline bool UGCRuleData::has_callerdata() const {
  return _internal_has_callerdata();
}
inline void UGCRuleData::clear_callerdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.callerdata_ != nullptr) {
    delete _impl_.callerdata_;
  }
  _impl_.callerdata_ = nullptr;
}
inline const ::message::UGCFuncCallerData& UGCRuleData::_internal_callerdata() const {
  const ::message::UGCFuncCallerData* p = _impl_.callerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCFuncCallerData&>(
      ::message::_UGCFuncCallerData_default_instance_);
}
inline const ::message::UGCFuncCallerData& UGCRuleData::callerdata() const {
  // @@protoc_insertion_point(field_get:message.UGCRuleData.CallerData)
  return _internal_callerdata();
}
inline void UGCRuleData::unsafe_arena_set_allocated_callerdata(
    ::message::UGCFuncCallerData* callerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callerdata_);
  }
  _impl_.callerdata_ = callerdata;
  if (callerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCRuleData.CallerData)
}
inline ::message::UGCFuncCallerData* UGCRuleData::release_callerdata() {
  
  ::message::UGCFuncCallerData* temp = _impl_.callerdata_;
  _impl_.callerdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCFuncCallerData* UGCRuleData::unsafe_arena_release_callerdata() {
  // @@protoc_insertion_point(field_release:message.UGCRuleData.CallerData)
  
  ::message::UGCFuncCallerData* temp = _impl_.callerdata_;
  _impl_.callerdata_ = nullptr;
  return temp;
}
inline ::message::UGCFuncCallerData* UGCRuleData::_internal_mutable_callerdata() {
  
  if (_impl_.callerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCFuncCallerData>(GetArenaForAllocation());
    _impl_.callerdata_ = p;
  }
  return _impl_.callerdata_;
}
inline ::message::UGCFuncCallerData* UGCRuleData::mutable_callerdata() {
  ::message::UGCFuncCallerData* _msg = _internal_mutable_callerdata();
  // @@protoc_insertion_point(field_mutable:message.UGCRuleData.CallerData)
  return _msg;
}
inline void UGCRuleData::set_allocated_callerdata(::message::UGCFuncCallerData* callerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.callerdata_;
  }
  if (callerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(callerdata);
    if (message_arena != submessage_arena) {
      callerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callerdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.callerdata_ = callerdata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCRuleData.CallerData)
}

// -------------------------------------------------------------------

// UGCGraphData

// string ID = 1;
inline void UGCGraphData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCGraphData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCGraphData.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCGraphData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCGraphData.ID)
}
inline std::string* UGCGraphData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCGraphData.ID)
  return _s;
}
inline const std::string& UGCGraphData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCGraphData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCGraphData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCGraphData::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCGraphData.ID)
  return _impl_.id_.Release();
}
inline void UGCGraphData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCGraphData.ID)
}

// repeated .message.UGCRuleData Rules = 2;
inline int UGCGraphData::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int UGCGraphData::rules_size() const {
  return _internal_rules_size();
}
inline void UGCGraphData::clear_rules() {
  _impl_.rules_.Clear();
}
inline ::message::UGCRuleData* UGCGraphData::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGraphData.Rules)
  return _impl_.rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleData >*
UGCGraphData::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGraphData.Rules)
  return &_impl_.rules_;
}
inline const ::message::UGCRuleData& UGCGraphData::_internal_rules(int index) const {
  return _impl_.rules_.Get(index);
}
inline const ::message::UGCRuleData& UGCGraphData::rules(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGraphData.Rules)
  return _internal_rules(index);
}
inline ::message::UGCRuleData* UGCGraphData::_internal_add_rules() {
  return _impl_.rules_.Add();
}
inline ::message::UGCRuleData* UGCGraphData::add_rules() {
  ::message::UGCRuleData* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:message.UGCGraphData.Rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleData >&
UGCGraphData::rules() const {
  // @@protoc_insertion_point(field_list:message.UGCGraphData.Rules)
  return _impl_.rules_;
}

// repeated .message.UGCVarDefineData Variables = 3;
inline int UGCGraphData::_internal_variables_size() const {
  return _impl_.variables_.size();
}
inline int UGCGraphData::variables_size() const {
  return _internal_variables_size();
}
inline void UGCGraphData::clear_variables() {
  _impl_.variables_.Clear();
}
inline ::message::UGCVarDefineData* UGCGraphData::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGraphData.Variables)
  return _impl_.variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineData >*
UGCGraphData::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGraphData.Variables)
  return &_impl_.variables_;
}
inline const ::message::UGCVarDefineData& UGCGraphData::_internal_variables(int index) const {
  return _impl_.variables_.Get(index);
}
inline const ::message::UGCVarDefineData& UGCGraphData::variables(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGraphData.Variables)
  return _internal_variables(index);
}
inline ::message::UGCVarDefineData* UGCGraphData::_internal_add_variables() {
  return _impl_.variables_.Add();
}
inline ::message::UGCVarDefineData* UGCGraphData::add_variables() {
  ::message::UGCVarDefineData* _add = _internal_add_variables();
  // @@protoc_insertion_point(field_add:message.UGCGraphData.Variables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineData >&
UGCGraphData::variables() const {
  // @@protoc_insertion_point(field_list:message.UGCGraphData.Variables)
  return _impl_.variables_;
}

// repeated .message.UGCFuncCallerData Functions = 4;
inline int UGCGraphData::_internal_functions_size() const {
  return _impl_.functions_.size();
}
inline int UGCGraphData::functions_size() const {
  return _internal_functions_size();
}
inline void UGCGraphData::clear_functions() {
  _impl_.functions_.Clear();
}
inline ::message::UGCFuncCallerData* UGCGraphData::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGraphData.Functions)
  return _impl_.functions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData >*
UGCGraphData::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGraphData.Functions)
  return &_impl_.functions_;
}
inline const ::message::UGCFuncCallerData& UGCGraphData::_internal_functions(int index) const {
  return _impl_.functions_.Get(index);
}
inline const ::message::UGCFuncCallerData& UGCGraphData::functions(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGraphData.Functions)
  return _internal_functions(index);
}
inline ::message::UGCFuncCallerData* UGCGraphData::_internal_add_functions() {
  return _impl_.functions_.Add();
}
inline ::message::UGCFuncCallerData* UGCGraphData::add_functions() {
  ::message::UGCFuncCallerData* _add = _internal_add_functions();
  // @@protoc_insertion_point(field_add:message.UGCGraphData.Functions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerData >&
UGCGraphData::functions() const {
  // @@protoc_insertion_point(field_list:message.UGCGraphData.Functions)
  return _impl_.functions_;
}

// -------------------------------------------------------------------

// UGCCustomReplicationDataItemInstance

// int32 Index = 1;
inline void UGCCustomReplicationDataItemInstance::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t UGCCustomReplicationDataItemInstance::_internal_index() const {
  return _impl_.index_;
}
inline int32_t UGCCustomReplicationDataItemInstance::index() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemInstance.Index)
  return _internal_index();
}
inline void UGCCustomReplicationDataItemInstance::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void UGCCustomReplicationDataItemInstance::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataItemInstance.Index)
}

// .message.UGCVarValueData Value = 2;
inline bool UGCCustomReplicationDataItemInstance::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool UGCCustomReplicationDataItemInstance::has_value() const {
  return _internal_has_value();
}
inline void UGCCustomReplicationDataItemInstance::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::message::UGCVarValueData& UGCCustomReplicationDataItemInstance::_internal_value() const {
  const ::message::UGCVarValueData* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCVarValueData&>(
      ::message::_UGCVarValueData_default_instance_);
}
inline const ::message::UGCVarValueData& UGCCustomReplicationDataItemInstance::value() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemInstance.Value)
  return _internal_value();
}
inline void UGCCustomReplicationDataItemInstance::unsafe_arena_set_allocated_value(
    ::message::UGCVarValueData* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCCustomReplicationDataItemInstance.Value)
}
inline ::message::UGCVarValueData* UGCCustomReplicationDataItemInstance::release_value() {
  
  ::message::UGCVarValueData* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCVarValueData* UGCCustomReplicationDataItemInstance::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataItemInstance.Value)
  
  ::message::UGCVarValueData* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::message::UGCVarValueData* UGCCustomReplicationDataItemInstance::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCVarValueData>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::message::UGCVarValueData* UGCCustomReplicationDataItemInstance::mutable_value() {
  ::message::UGCVarValueData* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataItemInstance.Value)
  return _msg;
}
inline void UGCCustomReplicationDataItemInstance::set_allocated_value(::message::UGCVarValueData* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataItemInstance.Value)
}

// -------------------------------------------------------------------

// UGCLogicEntityData

// string ID = 1;
inline void UGCLogicEntityData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCLogicEntityData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityData.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCLogicEntityData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityData.ID)
}
inline std::string* UGCLogicEntityData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityData.ID)
  return _s;
}
inline const std::string& UGCLogicEntityData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCLogicEntityData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCLogicEntityData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCLogicEntityData::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCLogicEntityData.ID)
  return _impl_.id_.Release();
}
inline void UGCLogicEntityData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCLogicEntityData.ID)
}

// .message.EUGCLogicEntityType Type = 2;
inline void UGCLogicEntityData::clear_type() {
  _impl_.type_ = 0;
}
inline ::message::EUGCLogicEntityType UGCLogicEntityData::_internal_type() const {
  return static_cast< ::message::EUGCLogicEntityType >(_impl_.type_);
}
inline ::message::EUGCLogicEntityType UGCLogicEntityData::type() const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityData.Type)
  return _internal_type();
}
inline void UGCLogicEntityData::_internal_set_type(::message::EUGCLogicEntityType value) {
  
  _impl_.type_ = value;
}
inline void UGCLogicEntityData::set_type(::message::EUGCLogicEntityType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityData.Type)
}

// repeated string GraphIDs = 3;
inline int UGCLogicEntityData::_internal_graphids_size() const {
  return _impl_.graphids_.size();
}
inline int UGCLogicEntityData::graphids_size() const {
  return _internal_graphids_size();
}
inline void UGCLogicEntityData::clear_graphids() {
  _impl_.graphids_.Clear();
}
inline std::string* UGCLogicEntityData::add_graphids() {
  std::string* _s = _internal_add_graphids();
  // @@protoc_insertion_point(field_add_mutable:message.UGCLogicEntityData.GraphIDs)
  return _s;
}
inline const std::string& UGCLogicEntityData::_internal_graphids(int index) const {
  return _impl_.graphids_.Get(index);
}
inline const std::string& UGCLogicEntityData::graphids(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityData.GraphIDs)
  return _internal_graphids(index);
}
inline std::string* UGCLogicEntityData::mutable_graphids(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityData.GraphIDs)
  return _impl_.graphids_.Mutable(index);
}
inline void UGCLogicEntityData::set_graphids(int index, const std::string& value) {
  _impl_.graphids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityData.GraphIDs)
}
inline void UGCLogicEntityData::set_graphids(int index, std::string&& value) {
  _impl_.graphids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityData.GraphIDs)
}
inline void UGCLogicEntityData::set_graphids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.graphids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCLogicEntityData.GraphIDs)
}
inline void UGCLogicEntityData::set_graphids(int index, const char* value, size_t size) {
  _impl_.graphids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCLogicEntityData.GraphIDs)
}
inline std::string* UGCLogicEntityData::_internal_add_graphids() {
  return _impl_.graphids_.Add();
}
inline void UGCLogicEntityData::add_graphids(const std::string& value) {
  _impl_.graphids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityData.GraphIDs)
}
inline void UGCLogicEntityData::add_graphids(std::string&& value) {
  _impl_.graphids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityData.GraphIDs)
}
inline void UGCLogicEntityData::add_graphids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.graphids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCLogicEntityData.GraphIDs)
}
inline void UGCLogicEntityData::add_graphids(const char* value, size_t size) {
  _impl_.graphids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCLogicEntityData.GraphIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCLogicEntityData::graphids() const {
  // @@protoc_insertion_point(field_list:message.UGCLogicEntityData.GraphIDs)
  return _impl_.graphids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCLogicEntityData::mutable_graphids() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLogicEntityData.GraphIDs)
  return &_impl_.graphids_;
}

// repeated .message.UGCCustomReplicationDataItemInstance RepDataItem = 4;
inline int UGCLogicEntityData::_internal_repdataitem_size() const {
  return _impl_.repdataitem_.size();
}
inline int UGCLogicEntityData::repdataitem_size() const {
  return _internal_repdataitem_size();
}
inline void UGCLogicEntityData::clear_repdataitem() {
  _impl_.repdataitem_.Clear();
}
inline ::message::UGCCustomReplicationDataItemInstance* UGCLogicEntityData::mutable_repdataitem(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityData.RepDataItem)
  return _impl_.repdataitem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstance >*
UGCLogicEntityData::mutable_repdataitem() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLogicEntityData.RepDataItem)
  return &_impl_.repdataitem_;
}
inline const ::message::UGCCustomReplicationDataItemInstance& UGCLogicEntityData::_internal_repdataitem(int index) const {
  return _impl_.repdataitem_.Get(index);
}
inline const ::message::UGCCustomReplicationDataItemInstance& UGCLogicEntityData::repdataitem(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityData.RepDataItem)
  return _internal_repdataitem(index);
}
inline ::message::UGCCustomReplicationDataItemInstance* UGCLogicEntityData::_internal_add_repdataitem() {
  return _impl_.repdataitem_.Add();
}
inline ::message::UGCCustomReplicationDataItemInstance* UGCLogicEntityData::add_repdataitem() {
  ::message::UGCCustomReplicationDataItemInstance* _add = _internal_add_repdataitem();
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityData.RepDataItem)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstance >&
UGCLogicEntityData::repdataitem() const {
  // @@protoc_insertion_point(field_list:message.UGCLogicEntityData.RepDataItem)
  return _impl_.repdataitem_;
}

// -------------------------------------------------------------------

// UGCCustomReplicationDataItem

// string Name = 1;
inline void UGCCustomReplicationDataItem::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCCustomReplicationDataItem::name() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItem.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCCustomReplicationDataItem::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataItem.Name)
}
inline std::string* UGCCustomReplicationDataItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataItem.Name)
  return _s;
}
inline const std::string& UGCCustomReplicationDataItem::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCCustomReplicationDataItem::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataItem::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataItem::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataItem.Name)
  return _impl_.name_.Release();
}
inline void UGCCustomReplicationDataItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataItem.Name)
}

// .message.UGCVarValueData Value = 2;
inline bool UGCCustomReplicationDataItem::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool UGCCustomReplicationDataItem::has_value() const {
  return _internal_has_value();
}
inline void UGCCustomReplicationDataItem::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::message::UGCVarValueData& UGCCustomReplicationDataItem::_internal_value() const {
  const ::message::UGCVarValueData* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCVarValueData&>(
      ::message::_UGCVarValueData_default_instance_);
}
inline const ::message::UGCVarValueData& UGCCustomReplicationDataItem::value() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItem.Value)
  return _internal_value();
}
inline void UGCCustomReplicationDataItem::unsafe_arena_set_allocated_value(
    ::message::UGCVarValueData* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCCustomReplicationDataItem.Value)
}
inline ::message::UGCVarValueData* UGCCustomReplicationDataItem::release_value() {
  
  ::message::UGCVarValueData* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCVarValueData* UGCCustomReplicationDataItem::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataItem.Value)
  
  ::message::UGCVarValueData* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::message::UGCVarValueData* UGCCustomReplicationDataItem::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCVarValueData>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::message::UGCVarValueData* UGCCustomReplicationDataItem::mutable_value() {
  ::message::UGCVarValueData* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataItem.Value)
  return _msg;
}
inline void UGCCustomReplicationDataItem::set_allocated_value(::message::UGCVarValueData* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataItem.Value)
}

// -------------------------------------------------------------------

// UGCCustomReplicationData

// .message.EUGCLogicEntityType EntityType = 1;
inline void UGCCustomReplicationData::clear_entitytype() {
  _impl_.entitytype_ = 0;
}
inline ::message::EUGCLogicEntityType UGCCustomReplicationData::_internal_entitytype() const {
  return static_cast< ::message::EUGCLogicEntityType >(_impl_.entitytype_);
}
inline ::message::EUGCLogicEntityType UGCCustomReplicationData::entitytype() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationData.EntityType)
  return _internal_entitytype();
}
inline void UGCCustomReplicationData::_internal_set_entitytype(::message::EUGCLogicEntityType value) {
  
  _impl_.entitytype_ = value;
}
inline void UGCCustomReplicationData::set_entitytype(::message::EUGCLogicEntityType value) {
  _internal_set_entitytype(value);
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationData.EntityType)
}

// repeated .message.UGCCustomReplicationDataItem ItemData = 2;
inline int UGCCustomReplicationData::_internal_itemdata_size() const {
  return _impl_.itemdata_.size();
}
inline int UGCCustomReplicationData::itemdata_size() const {
  return _internal_itemdata_size();
}
inline void UGCCustomReplicationData::clear_itemdata() {
  _impl_.itemdata_.Clear();
}
inline ::message::UGCCustomReplicationDataItem* UGCCustomReplicationData::mutable_itemdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationData.ItemData)
  return _impl_.itemdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItem >*
UGCCustomReplicationData::mutable_itemdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCCustomReplicationData.ItemData)
  return &_impl_.itemdata_;
}
inline const ::message::UGCCustomReplicationDataItem& UGCCustomReplicationData::_internal_itemdata(int index) const {
  return _impl_.itemdata_.Get(index);
}
inline const ::message::UGCCustomReplicationDataItem& UGCCustomReplicationData::itemdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationData.ItemData)
  return _internal_itemdata(index);
}
inline ::message::UGCCustomReplicationDataItem* UGCCustomReplicationData::_internal_add_itemdata() {
  return _impl_.itemdata_.Add();
}
inline ::message::UGCCustomReplicationDataItem* UGCCustomReplicationData::add_itemdata() {
  ::message::UGCCustomReplicationDataItem* _add = _internal_add_itemdata();
  // @@protoc_insertion_point(field_add:message.UGCCustomReplicationData.ItemData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItem >&
UGCCustomReplicationData::itemdata() const {
  // @@protoc_insertion_point(field_list:message.UGCCustomReplicationData.ItemData)
  return _impl_.itemdata_;
}

// -------------------------------------------------------------------

// UGCLevelData

// repeated .message.UGCGraphData GraphData = 1;
inline int UGCLevelData::_internal_graphdata_size() const {
  return _impl_.graphdata_.size();
}
inline int UGCLevelData::graphdata_size() const {
  return _internal_graphdata_size();
}
inline void UGCLevelData::clear_graphdata() {
  _impl_.graphdata_.Clear();
}
inline ::message::UGCGraphData* UGCLevelData::mutable_graphdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLevelData.GraphData)
  return _impl_.graphdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphData >*
UGCLevelData::mutable_graphdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLevelData.GraphData)
  return &_impl_.graphdata_;
}
inline const ::message::UGCGraphData& UGCLevelData::_internal_graphdata(int index) const {
  return _impl_.graphdata_.Get(index);
}
inline const ::message::UGCGraphData& UGCLevelData::graphdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLevelData.GraphData)
  return _internal_graphdata(index);
}
inline ::message::UGCGraphData* UGCLevelData::_internal_add_graphdata() {
  return _impl_.graphdata_.Add();
}
inline ::message::UGCGraphData* UGCLevelData::add_graphdata() {
  ::message::UGCGraphData* _add = _internal_add_graphdata();
  // @@protoc_insertion_point(field_add:message.UGCLevelData.GraphData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphData >&
UGCLevelData::graphdata() const {
  // @@protoc_insertion_point(field_list:message.UGCLevelData.GraphData)
  return _impl_.graphdata_;
}

// .message.UGCWorkflowData Workflow = 2;
inline bool UGCLevelData::_internal_has_workflow() const {
  return this != internal_default_instance() && _impl_.workflow_ != nullptr;
}
inline bool UGCLevelData::has_workflow() const {
  return _internal_has_workflow();
}
inline void UGCLevelData::clear_workflow() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
}
inline const ::message::UGCWorkflowData& UGCLevelData::_internal_workflow() const {
  const ::message::UGCWorkflowData* p = _impl_.workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCWorkflowData&>(
      ::message::_UGCWorkflowData_default_instance_);
}
inline const ::message::UGCWorkflowData& UGCLevelData::workflow() const {
  // @@protoc_insertion_point(field_get:message.UGCLevelData.Workflow)
  return _internal_workflow();
}
inline void UGCLevelData::unsafe_arena_set_allocated_workflow(
    ::message::UGCWorkflowData* workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workflow_);
  }
  _impl_.workflow_ = workflow;
  if (workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCLevelData.Workflow)
}
inline ::message::UGCWorkflowData* UGCLevelData::release_workflow() {
  
  ::message::UGCWorkflowData* temp = _impl_.workflow_;
  _impl_.workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCWorkflowData* UGCLevelData::unsafe_arena_release_workflow() {
  // @@protoc_insertion_point(field_release:message.UGCLevelData.Workflow)
  
  ::message::UGCWorkflowData* temp = _impl_.workflow_;
  _impl_.workflow_ = nullptr;
  return temp;
}
inline ::message::UGCWorkflowData* UGCLevelData::_internal_mutable_workflow() {
  
  if (_impl_.workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCWorkflowData>(GetArenaForAllocation());
    _impl_.workflow_ = p;
  }
  return _impl_.workflow_;
}
inline ::message::UGCWorkflowData* UGCLevelData::mutable_workflow() {
  ::message::UGCWorkflowData* _msg = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:message.UGCLevelData.Workflow)
  return _msg;
}
inline void UGCLevelData::set_allocated_workflow(::message::UGCWorkflowData* workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.workflow_;
  }
  if (workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(workflow);
    if (message_arena != submessage_arena) {
      workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.workflow_ = workflow;
  // @@protoc_insertion_point(field_set_allocated:message.UGCLevelData.Workflow)
}

// repeated .message.UGCLogicEntityData LogicEntityDatas = 3;
inline int UGCLevelData::_internal_logicentitydatas_size() const {
  return _impl_.logicentitydatas_.size();
}
inline int UGCLevelData::logicentitydatas_size() const {
  return _internal_logicentitydatas_size();
}
inline void UGCLevelData::clear_logicentitydatas() {
  _impl_.logicentitydatas_.Clear();
}
inline ::message::UGCLogicEntityData* UGCLevelData::mutable_logicentitydatas(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLevelData.LogicEntityDatas)
  return _impl_.logicentitydatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityData >*
UGCLevelData::mutable_logicentitydatas() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLevelData.LogicEntityDatas)
  return &_impl_.logicentitydatas_;
}
inline const ::message::UGCLogicEntityData& UGCLevelData::_internal_logicentitydatas(int index) const {
  return _impl_.logicentitydatas_.Get(index);
}
inline const ::message::UGCLogicEntityData& UGCLevelData::logicentitydatas(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLevelData.LogicEntityDatas)
  return _internal_logicentitydatas(index);
}
inline ::message::UGCLogicEntityData* UGCLevelData::_internal_add_logicentitydatas() {
  return _impl_.logicentitydatas_.Add();
}
inline ::message::UGCLogicEntityData* UGCLevelData::add_logicentitydatas() {
  ::message::UGCLogicEntityData* _add = _internal_add_logicentitydatas();
  // @@protoc_insertion_point(field_add:message.UGCLevelData.LogicEntityDatas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityData >&
UGCLevelData::logicentitydatas() const {
  // @@protoc_insertion_point(field_list:message.UGCLevelData.LogicEntityDatas)
  return _impl_.logicentitydatas_;
}

// repeated .message.UGCCustomReplicationData EntityReplicationData = 4;
inline int UGCLevelData::_internal_entityreplicationdata_size() const {
  return _impl_.entityreplicationdata_.size();
}
inline int UGCLevelData::entityreplicationdata_size() const {
  return _internal_entityreplicationdata_size();
}
inline void UGCLevelData::clear_entityreplicationdata() {
  _impl_.entityreplicationdata_.Clear();
}
inline ::message::UGCCustomReplicationData* UGCLevelData::mutable_entityreplicationdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLevelData.EntityReplicationData)
  return _impl_.entityreplicationdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationData >*
UGCLevelData::mutable_entityreplicationdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLevelData.EntityReplicationData)
  return &_impl_.entityreplicationdata_;
}
inline const ::message::UGCCustomReplicationData& UGCLevelData::_internal_entityreplicationdata(int index) const {
  return _impl_.entityreplicationdata_.Get(index);
}
inline const ::message::UGCCustomReplicationData& UGCLevelData::entityreplicationdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLevelData.EntityReplicationData)
  return _internal_entityreplicationdata(index);
}
inline ::message::UGCCustomReplicationData* UGCLevelData::_internal_add_entityreplicationdata() {
  return _impl_.entityreplicationdata_.Add();
}
inline ::message::UGCCustomReplicationData* UGCLevelData::add_entityreplicationdata() {
  ::message::UGCCustomReplicationData* _add = _internal_add_entityreplicationdata();
  // @@protoc_insertion_point(field_add:message.UGCLevelData.EntityReplicationData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationData >&
UGCLevelData::entityreplicationdata() const {
  // @@protoc_insertion_point(field_list:message.UGCLevelData.EntityReplicationData)
  return _impl_.entityreplicationdata_;
}

// .message.UGCMapRuntimeData MapData = 5;
inline bool UGCLevelData::_internal_has_mapdata() const {
  return this != internal_default_instance() && _impl_.mapdata_ != nullptr;
}
inline bool UGCLevelData::has_mapdata() const {
  return _internal_has_mapdata();
}
inline void UGCLevelData::clear_mapdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.mapdata_ != nullptr) {
    delete _impl_.mapdata_;
  }
  _impl_.mapdata_ = nullptr;
}
inline const ::message::UGCMapRuntimeData& UGCLevelData::_internal_mapdata() const {
  const ::message::UGCMapRuntimeData* p = _impl_.mapdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCMapRuntimeData&>(
      ::message::_UGCMapRuntimeData_default_instance_);
}
inline const ::message::UGCMapRuntimeData& UGCLevelData::mapdata() const {
  // @@protoc_insertion_point(field_get:message.UGCLevelData.MapData)
  return _internal_mapdata();
}
inline void UGCLevelData::unsafe_arena_set_allocated_mapdata(
    ::message::UGCMapRuntimeData* mapdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapdata_);
  }
  _impl_.mapdata_ = mapdata;
  if (mapdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCLevelData.MapData)
}
inline ::message::UGCMapRuntimeData* UGCLevelData::release_mapdata() {
  
  ::message::UGCMapRuntimeData* temp = _impl_.mapdata_;
  _impl_.mapdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCMapRuntimeData* UGCLevelData::unsafe_arena_release_mapdata() {
  // @@protoc_insertion_point(field_release:message.UGCLevelData.MapData)
  
  ::message::UGCMapRuntimeData* temp = _impl_.mapdata_;
  _impl_.mapdata_ = nullptr;
  return temp;
}
inline ::message::UGCMapRuntimeData* UGCLevelData::_internal_mutable_mapdata() {
  
  if (_impl_.mapdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCMapRuntimeData>(GetArenaForAllocation());
    _impl_.mapdata_ = p;
  }
  return _impl_.mapdata_;
}
inline ::message::UGCMapRuntimeData* UGCLevelData::mutable_mapdata() {
  ::message::UGCMapRuntimeData* _msg = _internal_mutable_mapdata();
  // @@protoc_insertion_point(field_mutable:message.UGCLevelData.MapData)
  return _msg;
}
inline void UGCLevelData::set_allocated_mapdata(::message::UGCMapRuntimeData* mapdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mapdata_;
  }
  if (mapdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mapdata);
    if (message_arena != submessage_arena) {
      mapdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mapdata_ = mapdata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCLevelData.MapData)
}

// .message.UGCHudPrefabDatas HudPrefabData = 6;
inline bool UGCLevelData::_internal_has_hudprefabdata() const {
  return this != internal_default_instance() && _impl_.hudprefabdata_ != nullptr;
}
inline bool UGCLevelData::has_hudprefabdata() const {
  return _internal_has_hudprefabdata();
}
inline void UGCLevelData::clear_hudprefabdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.hudprefabdata_ != nullptr) {
    delete _impl_.hudprefabdata_;
  }
  _impl_.hudprefabdata_ = nullptr;
}
inline const ::message::UGCHudPrefabDatas& UGCLevelData::_internal_hudprefabdata() const {
  const ::message::UGCHudPrefabDatas* p = _impl_.hudprefabdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudPrefabDatas&>(
      ::message::_UGCHudPrefabDatas_default_instance_);
}
inline const ::message::UGCHudPrefabDatas& UGCLevelData::hudprefabdata() const {
  // @@protoc_insertion_point(field_get:message.UGCLevelData.HudPrefabData)
  return _internal_hudprefabdata();
}
inline void UGCLevelData::unsafe_arena_set_allocated_hudprefabdata(
    ::message::UGCHudPrefabDatas* hudprefabdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hudprefabdata_);
  }
  _impl_.hudprefabdata_ = hudprefabdata;
  if (hudprefabdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCLevelData.HudPrefabData)
}
inline ::message::UGCHudPrefabDatas* UGCLevelData::release_hudprefabdata() {
  
  ::message::UGCHudPrefabDatas* temp = _impl_.hudprefabdata_;
  _impl_.hudprefabdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudPrefabDatas* UGCLevelData::unsafe_arena_release_hudprefabdata() {
  // @@protoc_insertion_point(field_release:message.UGCLevelData.HudPrefabData)
  
  ::message::UGCHudPrefabDatas* temp = _impl_.hudprefabdata_;
  _impl_.hudprefabdata_ = nullptr;
  return temp;
}
inline ::message::UGCHudPrefabDatas* UGCLevelData::_internal_mutable_hudprefabdata() {
  
  if (_impl_.hudprefabdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudPrefabDatas>(GetArenaForAllocation());
    _impl_.hudprefabdata_ = p;
  }
  return _impl_.hudprefabdata_;
}
inline ::message::UGCHudPrefabDatas* UGCLevelData::mutable_hudprefabdata() {
  ::message::UGCHudPrefabDatas* _msg = _internal_mutable_hudprefabdata();
  // @@protoc_insertion_point(field_mutable:message.UGCLevelData.HudPrefabData)
  return _msg;
}
inline void UGCLevelData::set_allocated_hudprefabdata(::message::UGCHudPrefabDatas* hudprefabdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hudprefabdata_;
  }
  if (hudprefabdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hudprefabdata);
    if (message_arena != submessage_arena) {
      hudprefabdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hudprefabdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hudprefabdata_ = hudprefabdata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCLevelData.HudPrefabData)
}

// -------------------------------------------------------------------

// UGCLogicEntityDataV2

// string ID = 1;
inline void UGCLogicEntityDataV2::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCLogicEntityDataV2::id() const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataV2.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCLogicEntityDataV2::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataV2.ID)
}
inline std::string* UGCLogicEntityDataV2::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataV2.ID)
  return _s;
}
inline const std::string& UGCLogicEntityDataV2::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCLogicEntityDataV2::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataV2::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataV2::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCLogicEntityDataV2.ID)
  return _impl_.id_.Release();
}
inline void UGCLogicEntityDataV2::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCLogicEntityDataV2.ID)
}

// int32 Type = 2;
inline void UGCLogicEntityDataV2::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t UGCLogicEntityDataV2::_internal_type() const {
  return _impl_.type_;
}
inline int32_t UGCLogicEntityDataV2::type() const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataV2.Type)
  return _internal_type();
}
inline void UGCLogicEntityDataV2::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void UGCLogicEntityDataV2::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataV2.Type)
}

// repeated string GraphIDs = 3;
inline int UGCLogicEntityDataV2::_internal_graphids_size() const {
  return _impl_.graphids_.size();
}
inline int UGCLogicEntityDataV2::graphids_size() const {
  return _internal_graphids_size();
}
inline void UGCLogicEntityDataV2::clear_graphids() {
  _impl_.graphids_.Clear();
}
inline std::string* UGCLogicEntityDataV2::add_graphids() {
  std::string* _s = _internal_add_graphids();
  // @@protoc_insertion_point(field_add_mutable:message.UGCLogicEntityDataV2.GraphIDs)
  return _s;
}
inline const std::string& UGCLogicEntityDataV2::_internal_graphids(int index) const {
  return _impl_.graphids_.Get(index);
}
inline const std::string& UGCLogicEntityDataV2::graphids(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataV2.GraphIDs)
  return _internal_graphids(index);
}
inline std::string* UGCLogicEntityDataV2::mutable_graphids(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataV2.GraphIDs)
  return _impl_.graphids_.Mutable(index);
}
inline void UGCLogicEntityDataV2::set_graphids(int index, const std::string& value) {
  _impl_.graphids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataV2.GraphIDs)
}
inline void UGCLogicEntityDataV2::set_graphids(int index, std::string&& value) {
  _impl_.graphids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataV2.GraphIDs)
}
inline void UGCLogicEntityDataV2::set_graphids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.graphids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCLogicEntityDataV2.GraphIDs)
}
inline void UGCLogicEntityDataV2::set_graphids(int index, const char* value, size_t size) {
  _impl_.graphids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCLogicEntityDataV2.GraphIDs)
}
inline std::string* UGCLogicEntityDataV2::_internal_add_graphids() {
  return _impl_.graphids_.Add();
}
inline void UGCLogicEntityDataV2::add_graphids(const std::string& value) {
  _impl_.graphids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataV2.GraphIDs)
}
inline void UGCLogicEntityDataV2::add_graphids(std::string&& value) {
  _impl_.graphids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataV2.GraphIDs)
}
inline void UGCLogicEntityDataV2::add_graphids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.graphids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCLogicEntityDataV2.GraphIDs)
}
inline void UGCLogicEntityDataV2::add_graphids(const char* value, size_t size) {
  _impl_.graphids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCLogicEntityDataV2.GraphIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCLogicEntityDataV2::graphids() const {
  // @@protoc_insertion_point(field_list:message.UGCLogicEntityDataV2.GraphIDs)
  return _impl_.graphids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCLogicEntityDataV2::mutable_graphids() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLogicEntityDataV2.GraphIDs)
  return &_impl_.graphids_;
}

// repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
inline int UGCLogicEntityDataV2::_internal_repdataitem_size() const {
  return _impl_.repdataitem_.size();
}
inline int UGCLogicEntityDataV2::repdataitem_size() const {
  return _internal_repdataitem_size();
}
inline void UGCLogicEntityDataV2::clear_repdataitem() {
  _impl_.repdataitem_.Clear();
}
inline ::message::UGCCustomReplicationDataItemInstanceV2* UGCLogicEntityDataV2::mutable_repdataitem(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataV2.RepDataItem)
  return _impl_.repdataitem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >*
UGCLogicEntityDataV2::mutable_repdataitem() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLogicEntityDataV2.RepDataItem)
  return &_impl_.repdataitem_;
}
inline const ::message::UGCCustomReplicationDataItemInstanceV2& UGCLogicEntityDataV2::_internal_repdataitem(int index) const {
  return _impl_.repdataitem_.Get(index);
}
inline const ::message::UGCCustomReplicationDataItemInstanceV2& UGCLogicEntityDataV2::repdataitem(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataV2.RepDataItem)
  return _internal_repdataitem(index);
}
inline ::message::UGCCustomReplicationDataItemInstanceV2* UGCLogicEntityDataV2::_internal_add_repdataitem() {
  return _impl_.repdataitem_.Add();
}
inline ::message::UGCCustomReplicationDataItemInstanceV2* UGCLogicEntityDataV2::add_repdataitem() {
  ::message::UGCCustomReplicationDataItemInstanceV2* _add = _internal_add_repdataitem();
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataV2.RepDataItem)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >&
UGCLogicEntityDataV2::repdataitem() const {
  // @@protoc_insertion_point(field_list:message.UGCLogicEntityDataV2.RepDataItem)
  return _impl_.repdataitem_;
}

// -------------------------------------------------------------------

// UGCLevelDataV2

// repeated .message.UGCGraphDataV2 GraphData = 1;
inline int UGCLevelDataV2::_internal_graphdata_size() const {
  return _impl_.graphdata_.size();
}
inline int UGCLevelDataV2::graphdata_size() const {
  return _internal_graphdata_size();
}
inline void UGCLevelDataV2::clear_graphdata() {
  _impl_.graphdata_.Clear();
}
inline ::message::UGCGraphDataV2* UGCLevelDataV2::mutable_graphdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLevelDataV2.GraphData)
  return _impl_.graphdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >*
UGCLevelDataV2::mutable_graphdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLevelDataV2.GraphData)
  return &_impl_.graphdata_;
}
inline const ::message::UGCGraphDataV2& UGCLevelDataV2::_internal_graphdata(int index) const {
  return _impl_.graphdata_.Get(index);
}
inline const ::message::UGCGraphDataV2& UGCLevelDataV2::graphdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLevelDataV2.GraphData)
  return _internal_graphdata(index);
}
inline ::message::UGCGraphDataV2* UGCLevelDataV2::_internal_add_graphdata() {
  return _impl_.graphdata_.Add();
}
inline ::message::UGCGraphDataV2* UGCLevelDataV2::add_graphdata() {
  ::message::UGCGraphDataV2* _add = _internal_add_graphdata();
  // @@protoc_insertion_point(field_add:message.UGCLevelDataV2.GraphData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >&
UGCLevelDataV2::graphdata() const {
  // @@protoc_insertion_point(field_list:message.UGCLevelDataV2.GraphData)
  return _impl_.graphdata_;
}

// .message.UGCWorkflowData Workflow = 2;
inline bool UGCLevelDataV2::_internal_has_workflow() const {
  return this != internal_default_instance() && _impl_.workflow_ != nullptr;
}
inline bool UGCLevelDataV2::has_workflow() const {
  return _internal_has_workflow();
}
inline void UGCLevelDataV2::clear_workflow() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
}
inline const ::message::UGCWorkflowData& UGCLevelDataV2::_internal_workflow() const {
  const ::message::UGCWorkflowData* p = _impl_.workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCWorkflowData&>(
      ::message::_UGCWorkflowData_default_instance_);
}
inline const ::message::UGCWorkflowData& UGCLevelDataV2::workflow() const {
  // @@protoc_insertion_point(field_get:message.UGCLevelDataV2.Workflow)
  return _internal_workflow();
}
inline void UGCLevelDataV2::unsafe_arena_set_allocated_workflow(
    ::message::UGCWorkflowData* workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workflow_);
  }
  _impl_.workflow_ = workflow;
  if (workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCLevelDataV2.Workflow)
}
inline ::message::UGCWorkflowData* UGCLevelDataV2::release_workflow() {
  
  ::message::UGCWorkflowData* temp = _impl_.workflow_;
  _impl_.workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCWorkflowData* UGCLevelDataV2::unsafe_arena_release_workflow() {
  // @@protoc_insertion_point(field_release:message.UGCLevelDataV2.Workflow)
  
  ::message::UGCWorkflowData* temp = _impl_.workflow_;
  _impl_.workflow_ = nullptr;
  return temp;
}
inline ::message::UGCWorkflowData* UGCLevelDataV2::_internal_mutable_workflow() {
  
  if (_impl_.workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCWorkflowData>(GetArenaForAllocation());
    _impl_.workflow_ = p;
  }
  return _impl_.workflow_;
}
inline ::message::UGCWorkflowData* UGCLevelDataV2::mutable_workflow() {
  ::message::UGCWorkflowData* _msg = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:message.UGCLevelDataV2.Workflow)
  return _msg;
}
inline void UGCLevelDataV2::set_allocated_workflow(::message::UGCWorkflowData* workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.workflow_;
  }
  if (workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(workflow);
    if (message_arena != submessage_arena) {
      workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.workflow_ = workflow;
  // @@protoc_insertion_point(field_set_allocated:message.UGCLevelDataV2.Workflow)
}

// repeated .message.UGCLogicEntityDataV2 LogicEntityDatas = 3;
inline int UGCLevelDataV2::_internal_logicentitydatas_size() const {
  return _impl_.logicentitydatas_.size();
}
inline int UGCLevelDataV2::logicentitydatas_size() const {
  return _internal_logicentitydatas_size();
}
inline void UGCLevelDataV2::clear_logicentitydatas() {
  _impl_.logicentitydatas_.Clear();
}
inline ::message::UGCLogicEntityDataV2* UGCLevelDataV2::mutable_logicentitydatas(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLevelDataV2.LogicEntityDatas)
  return _impl_.logicentitydatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV2 >*
UGCLevelDataV2::mutable_logicentitydatas() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLevelDataV2.LogicEntityDatas)
  return &_impl_.logicentitydatas_;
}
inline const ::message::UGCLogicEntityDataV2& UGCLevelDataV2::_internal_logicentitydatas(int index) const {
  return _impl_.logicentitydatas_.Get(index);
}
inline const ::message::UGCLogicEntityDataV2& UGCLevelDataV2::logicentitydatas(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLevelDataV2.LogicEntityDatas)
  return _internal_logicentitydatas(index);
}
inline ::message::UGCLogicEntityDataV2* UGCLevelDataV2::_internal_add_logicentitydatas() {
  return _impl_.logicentitydatas_.Add();
}
inline ::message::UGCLogicEntityDataV2* UGCLevelDataV2::add_logicentitydatas() {
  ::message::UGCLogicEntityDataV2* _add = _internal_add_logicentitydatas();
  // @@protoc_insertion_point(field_add:message.UGCLevelDataV2.LogicEntityDatas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV2 >&
UGCLevelDataV2::logicentitydatas() const {
  // @@protoc_insertion_point(field_list:message.UGCLevelDataV2.LogicEntityDatas)
  return _impl_.logicentitydatas_;
}

// repeated .message.UGCCustomReplicationDataV2 EntityReplicationData = 4;
inline int UGCLevelDataV2::_internal_entityreplicationdata_size() const {
  return _impl_.entityreplicationdata_.size();
}
inline int UGCLevelDataV2::entityreplicationdata_size() const {
  return _internal_entityreplicationdata_size();
}
inline void UGCLevelDataV2::clear_entityreplicationdata() {
  _impl_.entityreplicationdata_.Clear();
}
inline ::message::UGCCustomReplicationDataV2* UGCLevelDataV2::mutable_entityreplicationdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLevelDataV2.EntityReplicationData)
  return _impl_.entityreplicationdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 >*
UGCLevelDataV2::mutable_entityreplicationdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLevelDataV2.EntityReplicationData)
  return &_impl_.entityreplicationdata_;
}
inline const ::message::UGCCustomReplicationDataV2& UGCLevelDataV2::_internal_entityreplicationdata(int index) const {
  return _impl_.entityreplicationdata_.Get(index);
}
inline const ::message::UGCCustomReplicationDataV2& UGCLevelDataV2::entityreplicationdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLevelDataV2.EntityReplicationData)
  return _internal_entityreplicationdata(index);
}
inline ::message::UGCCustomReplicationDataV2* UGCLevelDataV2::_internal_add_entityreplicationdata() {
  return _impl_.entityreplicationdata_.Add();
}
inline ::message::UGCCustomReplicationDataV2* UGCLevelDataV2::add_entityreplicationdata() {
  ::message::UGCCustomReplicationDataV2* _add = _internal_add_entityreplicationdata();
  // @@protoc_insertion_point(field_add:message.UGCLevelDataV2.EntityReplicationData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 >&
UGCLevelDataV2::entityreplicationdata() const {
  // @@protoc_insertion_point(field_list:message.UGCLevelDataV2.EntityReplicationData)
  return _impl_.entityreplicationdata_;
}

// .message.UGCHudPrefabDatas HudPrefabData = 5;
inline bool UGCLevelDataV2::_internal_has_hudprefabdata() const {
  return this != internal_default_instance() && _impl_.hudprefabdata_ != nullptr;
}
inline bool UGCLevelDataV2::has_hudprefabdata() const {
  return _internal_has_hudprefabdata();
}
inline void UGCLevelDataV2::clear_hudprefabdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.hudprefabdata_ != nullptr) {
    delete _impl_.hudprefabdata_;
  }
  _impl_.hudprefabdata_ = nullptr;
}
inline const ::message::UGCHudPrefabDatas& UGCLevelDataV2::_internal_hudprefabdata() const {
  const ::message::UGCHudPrefabDatas* p = _impl_.hudprefabdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudPrefabDatas&>(
      ::message::_UGCHudPrefabDatas_default_instance_);
}
inline const ::message::UGCHudPrefabDatas& UGCLevelDataV2::hudprefabdata() const {
  // @@protoc_insertion_point(field_get:message.UGCLevelDataV2.HudPrefabData)
  return _internal_hudprefabdata();
}
inline void UGCLevelDataV2::unsafe_arena_set_allocated_hudprefabdata(
    ::message::UGCHudPrefabDatas* hudprefabdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hudprefabdata_);
  }
  _impl_.hudprefabdata_ = hudprefabdata;
  if (hudprefabdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCLevelDataV2.HudPrefabData)
}
inline ::message::UGCHudPrefabDatas* UGCLevelDataV2::release_hudprefabdata() {
  
  ::message::UGCHudPrefabDatas* temp = _impl_.hudprefabdata_;
  _impl_.hudprefabdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudPrefabDatas* UGCLevelDataV2::unsafe_arena_release_hudprefabdata() {
  // @@protoc_insertion_point(field_release:message.UGCLevelDataV2.HudPrefabData)
  
  ::message::UGCHudPrefabDatas* temp = _impl_.hudprefabdata_;
  _impl_.hudprefabdata_ = nullptr;
  return temp;
}
inline ::message::UGCHudPrefabDatas* UGCLevelDataV2::_internal_mutable_hudprefabdata() {
  
  if (_impl_.hudprefabdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudPrefabDatas>(GetArenaForAllocation());
    _impl_.hudprefabdata_ = p;
  }
  return _impl_.hudprefabdata_;
}
inline ::message::UGCHudPrefabDatas* UGCLevelDataV2::mutable_hudprefabdata() {
  ::message::UGCHudPrefabDatas* _msg = _internal_mutable_hudprefabdata();
  // @@protoc_insertion_point(field_mutable:message.UGCLevelDataV2.HudPrefabData)
  return _msg;
}
inline void UGCLevelDataV2::set_allocated_hudprefabdata(::message::UGCHudPrefabDatas* hudprefabdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hudprefabdata_;
  }
  if (hudprefabdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hudprefabdata);
    if (message_arena != submessage_arena) {
      hudprefabdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hudprefabdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hudprefabdata_ = hudprefabdata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCLevelDataV2.HudPrefabData)
}

// .message.UGCTypeTree CustomTypeMap = 6;
inline bool UGCLevelDataV2::_internal_has_customtypemap() const {
  return this != internal_default_instance() && _impl_.customtypemap_ != nullptr;
}
inline bool UGCLevelDataV2::has_customtypemap() const {
  return _internal_has_customtypemap();
}
inline void UGCLevelDataV2::clear_customtypemap() {
  if (GetArenaForAllocation() == nullptr && _impl_.customtypemap_ != nullptr) {
    delete _impl_.customtypemap_;
  }
  _impl_.customtypemap_ = nullptr;
}
inline const ::message::UGCTypeTree& UGCLevelDataV2::_internal_customtypemap() const {
  const ::message::UGCTypeTree* p = _impl_.customtypemap_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCTypeTree&>(
      ::message::_UGCTypeTree_default_instance_);
}
inline const ::message::UGCTypeTree& UGCLevelDataV2::customtypemap() const {
  // @@protoc_insertion_point(field_get:message.UGCLevelDataV2.CustomTypeMap)
  return _internal_customtypemap();
}
inline void UGCLevelDataV2::unsafe_arena_set_allocated_customtypemap(
    ::message::UGCTypeTree* customtypemap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customtypemap_);
  }
  _impl_.customtypemap_ = customtypemap;
  if (customtypemap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCLevelDataV2.CustomTypeMap)
}
inline ::message::UGCTypeTree* UGCLevelDataV2::release_customtypemap() {
  
  ::message::UGCTypeTree* temp = _impl_.customtypemap_;
  _impl_.customtypemap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCTypeTree* UGCLevelDataV2::unsafe_arena_release_customtypemap() {
  // @@protoc_insertion_point(field_release:message.UGCLevelDataV2.CustomTypeMap)
  
  ::message::UGCTypeTree* temp = _impl_.customtypemap_;
  _impl_.customtypemap_ = nullptr;
  return temp;
}
inline ::message::UGCTypeTree* UGCLevelDataV2::_internal_mutable_customtypemap() {
  
  if (_impl_.customtypemap_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCTypeTree>(GetArenaForAllocation());
    _impl_.customtypemap_ = p;
  }
  return _impl_.customtypemap_;
}
inline ::message::UGCTypeTree* UGCLevelDataV2::mutable_customtypemap() {
  ::message::UGCTypeTree* _msg = _internal_mutable_customtypemap();
  // @@protoc_insertion_point(field_mutable:message.UGCLevelDataV2.CustomTypeMap)
  return _msg;
}
inline void UGCLevelDataV2::set_allocated_customtypemap(::message::UGCTypeTree* customtypemap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.customtypemap_;
  }
  if (customtypemap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(customtypemap);
    if (message_arena != submessage_arena) {
      customtypemap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customtypemap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.customtypemap_ = customtypemap;
  // @@protoc_insertion_point(field_set_allocated:message.UGCLevelDataV2.CustomTypeMap)
}

// .message.SceneEditModeProtoData ModeSetting = 7;
inline bool UGCLevelDataV2::_internal_has_modesetting() const {
  return this != internal_default_instance() && _impl_.modesetting_ != nullptr;
}
inline bool UGCLevelDataV2::has_modesetting() const {
  return _internal_has_modesetting();
}
inline void UGCLevelDataV2::clear_modesetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.modesetting_ != nullptr) {
    delete _impl_.modesetting_;
  }
  _impl_.modesetting_ = nullptr;
}
inline const ::message::SceneEditModeProtoData& UGCLevelDataV2::_internal_modesetting() const {
  const ::message::SceneEditModeProtoData* p = _impl_.modesetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditModeProtoData&>(
      ::message::_SceneEditModeProtoData_default_instance_);
}
inline const ::message::SceneEditModeProtoData& UGCLevelDataV2::modesetting() const {
  // @@protoc_insertion_point(field_get:message.UGCLevelDataV2.ModeSetting)
  return _internal_modesetting();
}
inline void UGCLevelDataV2::unsafe_arena_set_allocated_modesetting(
    ::message::SceneEditModeProtoData* modesetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modesetting_);
  }
  _impl_.modesetting_ = modesetting;
  if (modesetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCLevelDataV2.ModeSetting)
}
inline ::message::SceneEditModeProtoData* UGCLevelDataV2::release_modesetting() {
  
  ::message::SceneEditModeProtoData* temp = _impl_.modesetting_;
  _impl_.modesetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditModeProtoData* UGCLevelDataV2::unsafe_arena_release_modesetting() {
  // @@protoc_insertion_point(field_release:message.UGCLevelDataV2.ModeSetting)
  
  ::message::SceneEditModeProtoData* temp = _impl_.modesetting_;
  _impl_.modesetting_ = nullptr;
  return temp;
}
inline ::message::SceneEditModeProtoData* UGCLevelDataV2::_internal_mutable_modesetting() {
  
  if (_impl_.modesetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditModeProtoData>(GetArenaForAllocation());
    _impl_.modesetting_ = p;
  }
  return _impl_.modesetting_;
}
inline ::message::SceneEditModeProtoData* UGCLevelDataV2::mutable_modesetting() {
  ::message::SceneEditModeProtoData* _msg = _internal_mutable_modesetting();
  // @@protoc_insertion_point(field_mutable:message.UGCLevelDataV2.ModeSetting)
  return _msg;
}
inline void UGCLevelDataV2::set_allocated_modesetting(::message::SceneEditModeProtoData* modesetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.modesetting_;
  }
  if (modesetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(modesetting);
    if (message_arena != submessage_arena) {
      modesetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modesetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.modesetting_ = modesetting;
  // @@protoc_insertion_point(field_set_allocated:message.UGCLevelDataV2.ModeSetting)
}

// .message.UGCAllSceneRuntimeData AllSceneData = 8;
inline bool UGCLevelDataV2::_internal_has_allscenedata() const {
  return this != internal_default_instance() && _impl_.allscenedata_ != nullptr;
}
inline bool UGCLevelDataV2::has_allscenedata() const {
  return _internal_has_allscenedata();
}
inline void UGCLevelDataV2::clear_allscenedata() {
  if (GetArenaForAllocation() == nullptr && _impl_.allscenedata_ != nullptr) {
    delete _impl_.allscenedata_;
  }
  _impl_.allscenedata_ = nullptr;
}
inline const ::message::UGCAllSceneRuntimeData& UGCLevelDataV2::_internal_allscenedata() const {
  const ::message::UGCAllSceneRuntimeData* p = _impl_.allscenedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCAllSceneRuntimeData&>(
      ::message::_UGCAllSceneRuntimeData_default_instance_);
}
inline const ::message::UGCAllSceneRuntimeData& UGCLevelDataV2::allscenedata() const {
  // @@protoc_insertion_point(field_get:message.UGCLevelDataV2.AllSceneData)
  return _internal_allscenedata();
}
inline void UGCLevelDataV2::unsafe_arena_set_allocated_allscenedata(
    ::message::UGCAllSceneRuntimeData* allscenedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allscenedata_);
  }
  _impl_.allscenedata_ = allscenedata;
  if (allscenedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCLevelDataV2.AllSceneData)
}
inline ::message::UGCAllSceneRuntimeData* UGCLevelDataV2::release_allscenedata() {
  
  ::message::UGCAllSceneRuntimeData* temp = _impl_.allscenedata_;
  _impl_.allscenedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCAllSceneRuntimeData* UGCLevelDataV2::unsafe_arena_release_allscenedata() {
  // @@protoc_insertion_point(field_release:message.UGCLevelDataV2.AllSceneData)
  
  ::message::UGCAllSceneRuntimeData* temp = _impl_.allscenedata_;
  _impl_.allscenedata_ = nullptr;
  return temp;
}
inline ::message::UGCAllSceneRuntimeData* UGCLevelDataV2::_internal_mutable_allscenedata() {
  
  if (_impl_.allscenedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCAllSceneRuntimeData>(GetArenaForAllocation());
    _impl_.allscenedata_ = p;
  }
  return _impl_.allscenedata_;
}
inline ::message::UGCAllSceneRuntimeData* UGCLevelDataV2::mutable_allscenedata() {
  ::message::UGCAllSceneRuntimeData* _msg = _internal_mutable_allscenedata();
  // @@protoc_insertion_point(field_mutable:message.UGCLevelDataV2.AllSceneData)
  return _msg;
}
inline void UGCLevelDataV2::set_allocated_allscenedata(::message::UGCAllSceneRuntimeData* allscenedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.allscenedata_;
  }
  if (allscenedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(allscenedata);
    if (message_arena != submessage_arena) {
      allscenedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allscenedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.allscenedata_ = allscenedata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCLevelDataV2.AllSceneData)
}

// -------------------------------------------------------------------

// UGCVersionControlData

// int32 CompatibleVersion = 1;
inline void UGCVersionControlData::clear_compatibleversion() {
  _impl_.compatibleversion_ = 0;
}
inline int32_t UGCVersionControlData::_internal_compatibleversion() const {
  return _impl_.compatibleversion_;
}
inline int32_t UGCVersionControlData::compatibleversion() const {
  // @@protoc_insertion_point(field_get:message.UGCVersionControlData.CompatibleVersion)
  return _internal_compatibleversion();
}
inline void UGCVersionControlData::_internal_set_compatibleversion(int32_t value) {
  
  _impl_.compatibleversion_ = value;
}
inline void UGCVersionControlData::set_compatibleversion(int32_t value) {
  _internal_set_compatibleversion(value);
  // @@protoc_insertion_point(field_set:message.UGCVersionControlData.CompatibleVersion)
}

// bytes ContentData = 2;
inline void UGCVersionControlData::clear_contentdata() {
  _impl_.contentdata_.ClearToEmpty();
}
inline const std::string& UGCVersionControlData::contentdata() const {
  // @@protoc_insertion_point(field_get:message.UGCVersionControlData.ContentData)
  return _internal_contentdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCVersionControlData::set_contentdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contentdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVersionControlData.ContentData)
}
inline std::string* UGCVersionControlData::mutable_contentdata() {
  std::string* _s = _internal_mutable_contentdata();
  // @@protoc_insertion_point(field_mutable:message.UGCVersionControlData.ContentData)
  return _s;
}
inline const std::string& UGCVersionControlData::_internal_contentdata() const {
  return _impl_.contentdata_.Get();
}
inline void UGCVersionControlData::_internal_set_contentdata(const std::string& value) {
  
  _impl_.contentdata_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVersionControlData::_internal_mutable_contentdata() {
  
  return _impl_.contentdata_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCVersionControlData::release_contentdata() {
  // @@protoc_insertion_point(field_release:message.UGCVersionControlData.ContentData)
  return _impl_.contentdata_.Release();
}
inline void UGCVersionControlData::set_allocated_contentdata(std::string* contentdata) {
  if (contentdata != nullptr) {
    
  } else {
    
  }
  _impl_.contentdata_.SetAllocated(contentdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contentdata_.IsDefault()) {
    _impl_.contentdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCVersionControlData.ContentData)
}

// int32 PublicVersion = 3;
inline void UGCVersionControlData::clear_publicversion() {
  _impl_.publicversion_ = 0;
}
inline int32_t UGCVersionControlData::_internal_publicversion() const {
  return _impl_.publicversion_;
}
inline int32_t UGCVersionControlData::publicversion() const {
  // @@protoc_insertion_point(field_get:message.UGCVersionControlData.PublicVersion)
  return _internal_publicversion();
}
inline void UGCVersionControlData::_internal_set_publicversion(int32_t value) {
  
  _impl_.publicversion_ = value;
}
inline void UGCVersionControlData::set_publicversion(int32_t value) {
  _internal_set_publicversion(value);
  // @@protoc_insertion_point(field_set:message.UGCVersionControlData.PublicVersion)
}

// bytes DownloadDesc = 4;
inline void UGCVersionControlData::clear_downloaddesc() {
  _impl_.downloaddesc_.ClearToEmpty();
}
inline const std::string& UGCVersionControlData::downloaddesc() const {
  // @@protoc_insertion_point(field_get:message.UGCVersionControlData.DownloadDesc)
  return _internal_downloaddesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCVersionControlData::set_downloaddesc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.downloaddesc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVersionControlData.DownloadDesc)
}
inline std::string* UGCVersionControlData::mutable_downloaddesc() {
  std::string* _s = _internal_mutable_downloaddesc();
  // @@protoc_insertion_point(field_mutable:message.UGCVersionControlData.DownloadDesc)
  return _s;
}
inline const std::string& UGCVersionControlData::_internal_downloaddesc() const {
  return _impl_.downloaddesc_.Get();
}
inline void UGCVersionControlData::_internal_set_downloaddesc(const std::string& value) {
  
  _impl_.downloaddesc_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVersionControlData::_internal_mutable_downloaddesc() {
  
  return _impl_.downloaddesc_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCVersionControlData::release_downloaddesc() {
  // @@protoc_insertion_point(field_release:message.UGCVersionControlData.DownloadDesc)
  return _impl_.downloaddesc_.Release();
}
inline void UGCVersionControlData::set_allocated_downloaddesc(std::string* downloaddesc) {
  if (downloaddesc != nullptr) {
    
  } else {
    
  }
  _impl_.downloaddesc_.SetAllocated(downloaddesc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloaddesc_.IsDefault()) {
    _impl_.downloaddesc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCVersionControlData.DownloadDesc)
}

// -------------------------------------------------------------------

// UGCMapValue

// repeated .message.UGCVarValueDataV2 Keys = 1;
inline int UGCMapValue::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int UGCMapValue::keys_size() const {
  return _internal_keys_size();
}
inline void UGCMapValue::clear_keys() {
  _impl_.keys_.Clear();
}
inline ::message::UGCVarValueDataV2* UGCMapValue::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCMapValue.Keys)
  return _impl_.keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >*
UGCMapValue::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCMapValue.Keys)
  return &_impl_.keys_;
}
inline const ::message::UGCVarValueDataV2& UGCMapValue::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const ::message::UGCVarValueDataV2& UGCMapValue::keys(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCMapValue.Keys)
  return _internal_keys(index);
}
inline ::message::UGCVarValueDataV2* UGCMapValue::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline ::message::UGCVarValueDataV2* UGCMapValue::add_keys() {
  ::message::UGCVarValueDataV2* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:message.UGCMapValue.Keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >&
UGCMapValue::keys() const {
  // @@protoc_insertion_point(field_list:message.UGCMapValue.Keys)
  return _impl_.keys_;
}

// repeated .message.UGCVarValueDataV2 Values = 2;
inline int UGCMapValue::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int UGCMapValue::values_size() const {
  return _internal_values_size();
}
inline void UGCMapValue::clear_values() {
  _impl_.values_.Clear();
}
inline ::message::UGCVarValueDataV2* UGCMapValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCMapValue.Values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >*
UGCMapValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCMapValue.Values)
  return &_impl_.values_;
}
inline const ::message::UGCVarValueDataV2& UGCMapValue::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::message::UGCVarValueDataV2& UGCMapValue::values(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCMapValue.Values)
  return _internal_values(index);
}
inline ::message::UGCVarValueDataV2* UGCMapValue::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::message::UGCVarValueDataV2* UGCMapValue::add_values() {
  ::message::UGCVarValueDataV2* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:message.UGCMapValue.Values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >&
UGCMapValue::values() const {
  // @@protoc_insertion_point(field_list:message.UGCMapValue.Values)
  return _impl_.values_;
}

// -------------------------------------------------------------------

// UGCVarValueDataV2

// bool IsList = 1;
inline bool UGCVarValueDataV2::_internal_has_islist() const {
  return Value_case() == kIsList;
}
inline bool UGCVarValueDataV2::has_islist() const {
  return _internal_has_islist();
}
inline void UGCVarValueDataV2::set_has_islist() {
  _impl_._oneof_case_[0] = kIsList;
}
inline void UGCVarValueDataV2::clear_islist() {
  if (_internal_has_islist()) {
    _impl_.Value_.islist_ = false;
    clear_has_Value();
  }
}
inline bool UGCVarValueDataV2::_internal_islist() const {
  if (_internal_has_islist()) {
    return _impl_.Value_.islist_;
  }
  return false;
}
inline void UGCVarValueDataV2::_internal_set_islist(bool value) {
  if (!_internal_has_islist()) {
    clear_Value();
    set_has_islist();
  }
  _impl_.Value_.islist_ = value;
}
inline bool UGCVarValueDataV2::islist() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.IsList)
  return _internal_islist();
}
inline void UGCVarValueDataV2::set_islist(bool value) {
  _internal_set_islist(value);
  // @@protoc_insertion_point(field_set:message.UGCVarValueDataV2.IsList)
}

// .message.UGCFuncCallerDataV2 FuncValue = 3;
inline bool UGCVarValueDataV2::_internal_has_funcvalue() const {
  return Value_case() == kFuncValue;
}
inline bool UGCVarValueDataV2::has_funcvalue() const {
  return _internal_has_funcvalue();
}
inline void UGCVarValueDataV2::set_has_funcvalue() {
  _impl_._oneof_case_[0] = kFuncValue;
}
inline void UGCVarValueDataV2::clear_funcvalue() {
  if (_internal_has_funcvalue()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.funcvalue_;
    }
    clear_has_Value();
  }
}
inline ::message::UGCFuncCallerDataV2* UGCVarValueDataV2::release_funcvalue() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueDataV2.FuncValue)
  if (_internal_has_funcvalue()) {
    clear_has_Value();
    ::message::UGCFuncCallerDataV2* temp = _impl_.Value_.funcvalue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.funcvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::UGCFuncCallerDataV2& UGCVarValueDataV2::_internal_funcvalue() const {
  return _internal_has_funcvalue()
      ? *_impl_.Value_.funcvalue_
      : reinterpret_cast< ::message::UGCFuncCallerDataV2&>(::message::_UGCFuncCallerDataV2_default_instance_);
}
inline const ::message::UGCFuncCallerDataV2& UGCVarValueDataV2::funcvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.FuncValue)
  return _internal_funcvalue();
}
inline ::message::UGCFuncCallerDataV2* UGCVarValueDataV2::unsafe_arena_release_funcvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.UGCVarValueDataV2.FuncValue)
  if (_internal_has_funcvalue()) {
    clear_has_Value();
    ::message::UGCFuncCallerDataV2* temp = _impl_.Value_.funcvalue_;
    _impl_.Value_.funcvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UGCVarValueDataV2::unsafe_arena_set_allocated_funcvalue(::message::UGCFuncCallerDataV2* funcvalue) {
  clear_Value();
  if (funcvalue) {
    set_has_funcvalue();
    _impl_.Value_.funcvalue_ = funcvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCVarValueDataV2.FuncValue)
}
inline ::message::UGCFuncCallerDataV2* UGCVarValueDataV2::_internal_mutable_funcvalue() {
  if (!_internal_has_funcvalue()) {
    clear_Value();
    set_has_funcvalue();
    _impl_.Value_.funcvalue_ = CreateMaybeMessage< ::message::UGCFuncCallerDataV2 >(GetArenaForAllocation());
  }
  return _impl_.Value_.funcvalue_;
}
inline ::message::UGCFuncCallerDataV2* UGCVarValueDataV2::mutable_funcvalue() {
  ::message::UGCFuncCallerDataV2* _msg = _internal_mutable_funcvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueDataV2.FuncValue)
  return _msg;
}

// bool BoolValue = 4;
inline bool UGCVarValueDataV2::_internal_has_boolvalue() const {
  return Value_case() == kBoolValue;
}
inline bool UGCVarValueDataV2::has_boolvalue() const {
  return _internal_has_boolvalue();
}
inline void UGCVarValueDataV2::set_has_boolvalue() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void UGCVarValueDataV2::clear_boolvalue() {
  if (_internal_has_boolvalue()) {
    _impl_.Value_.boolvalue_ = false;
    clear_has_Value();
  }
}
inline bool UGCVarValueDataV2::_internal_boolvalue() const {
  if (_internal_has_boolvalue()) {
    return _impl_.Value_.boolvalue_;
  }
  return false;
}
inline void UGCVarValueDataV2::_internal_set_boolvalue(bool value) {
  if (!_internal_has_boolvalue()) {
    clear_Value();
    set_has_boolvalue();
  }
  _impl_.Value_.boolvalue_ = value;
}
inline bool UGCVarValueDataV2::boolvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.BoolValue)
  return _internal_boolvalue();
}
inline void UGCVarValueDataV2::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCVarValueDataV2.BoolValue)
}

// int32 IntValue = 5;
inline bool UGCVarValueDataV2::_internal_has_intvalue() const {
  return Value_case() == kIntValue;
}
inline bool UGCVarValueDataV2::has_intvalue() const {
  return _internal_has_intvalue();
}
inline void UGCVarValueDataV2::set_has_intvalue() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void UGCVarValueDataV2::clear_intvalue() {
  if (_internal_has_intvalue()) {
    _impl_.Value_.intvalue_ = 0;
    clear_has_Value();
  }
}
inline int32_t UGCVarValueDataV2::_internal_intvalue() const {
  if (_internal_has_intvalue()) {
    return _impl_.Value_.intvalue_;
  }
  return 0;
}
inline void UGCVarValueDataV2::_internal_set_intvalue(int32_t value) {
  if (!_internal_has_intvalue()) {
    clear_Value();
    set_has_intvalue();
  }
  _impl_.Value_.intvalue_ = value;
}
inline int32_t UGCVarValueDataV2::intvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.IntValue)
  return _internal_intvalue();
}
inline void UGCVarValueDataV2::set_intvalue(int32_t value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCVarValueDataV2.IntValue)
}

// float FloatValue = 6;
inline bool UGCVarValueDataV2::_internal_has_floatvalue() const {
  return Value_case() == kFloatValue;
}
inline bool UGCVarValueDataV2::has_floatvalue() const {
  return _internal_has_floatvalue();
}
inline void UGCVarValueDataV2::set_has_floatvalue() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void UGCVarValueDataV2::clear_floatvalue() {
  if (_internal_has_floatvalue()) {
    _impl_.Value_.floatvalue_ = 0;
    clear_has_Value();
  }
}
inline float UGCVarValueDataV2::_internal_floatvalue() const {
  if (_internal_has_floatvalue()) {
    return _impl_.Value_.floatvalue_;
  }
  return 0;
}
inline void UGCVarValueDataV2::_internal_set_floatvalue(float value) {
  if (!_internal_has_floatvalue()) {
    clear_Value();
    set_has_floatvalue();
  }
  _impl_.Value_.floatvalue_ = value;
}
inline float UGCVarValueDataV2::floatvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.FloatValue)
  return _internal_floatvalue();
}
inline void UGCVarValueDataV2::set_floatvalue(float value) {
  _internal_set_floatvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCVarValueDataV2.FloatValue)
}

// string StringValue = 7;
inline bool UGCVarValueDataV2::_internal_has_stringvalue() const {
  return Value_case() == kStringValue;
}
inline bool UGCVarValueDataV2::has_stringvalue() const {
  return _internal_has_stringvalue();
}
inline void UGCVarValueDataV2::set_has_stringvalue() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void UGCVarValueDataV2::clear_stringvalue() {
  if (_internal_has_stringvalue()) {
    _impl_.Value_.stringvalue_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& UGCVarValueDataV2::stringvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.StringValue)
  return _internal_stringvalue();
}
template <typename ArgT0, typename... ArgT>
inline void UGCVarValueDataV2::set_stringvalue(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    _impl_.Value_.stringvalue_.InitDefault();
  }
  _impl_.Value_.stringvalue_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVarValueDataV2.StringValue)
}
inline std::string* UGCVarValueDataV2::mutable_stringvalue() {
  std::string* _s = _internal_mutable_stringvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueDataV2.StringValue)
  return _s;
}
inline const std::string& UGCVarValueDataV2::_internal_stringvalue() const {
  if (_internal_has_stringvalue()) {
    return _impl_.Value_.stringvalue_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UGCVarValueDataV2::_internal_set_stringvalue(const std::string& value) {
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    _impl_.Value_.stringvalue_.InitDefault();
  }
  _impl_.Value_.stringvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVarValueDataV2::_internal_mutable_stringvalue() {
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    _impl_.Value_.stringvalue_.InitDefault();
  }
  return _impl_.Value_.stringvalue_.Mutable(      GetArenaForAllocation());
}
inline std::string* UGCVarValueDataV2::release_stringvalue() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueDataV2.StringValue)
  if (_internal_has_stringvalue()) {
    clear_has_Value();
    return _impl_.Value_.stringvalue_.Release();
  } else {
    return nullptr;
  }
}
inline void UGCVarValueDataV2::set_allocated_stringvalue(std::string* stringvalue) {
  if (has_Value()) {
    clear_Value();
  }
  if (stringvalue != nullptr) {
    set_has_stringvalue();
    _impl_.Value_.stringvalue_.InitAllocated(stringvalue, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueDataV2.StringValue)
}

// .message.ProtoBuffVector3 Vector3Value = 8;
inline bool UGCVarValueDataV2::_internal_has_vector3value() const {
  return Value_case() == kVector3Value;
}
inline bool UGCVarValueDataV2::has_vector3value() const {
  return _internal_has_vector3value();
}
inline void UGCVarValueDataV2::set_has_vector3value() {
  _impl_._oneof_case_[0] = kVector3Value;
}
inline ::message::ProtoBuffVector3* UGCVarValueDataV2::release_vector3value() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueDataV2.Vector3Value)
  if (_internal_has_vector3value()) {
    clear_has_Value();
    ::message::ProtoBuffVector3* temp = _impl_.Value_.vector3value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.vector3value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ProtoBuffVector3& UGCVarValueDataV2::_internal_vector3value() const {
  return _internal_has_vector3value()
      ? *_impl_.Value_.vector3value_
      : reinterpret_cast< ::message::ProtoBuffVector3&>(::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCVarValueDataV2::vector3value() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.Vector3Value)
  return _internal_vector3value();
}
inline ::message::ProtoBuffVector3* UGCVarValueDataV2::unsafe_arena_release_vector3value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.UGCVarValueDataV2.Vector3Value)
  if (_internal_has_vector3value()) {
    clear_has_Value();
    ::message::ProtoBuffVector3* temp = _impl_.Value_.vector3value_;
    _impl_.Value_.vector3value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UGCVarValueDataV2::unsafe_arena_set_allocated_vector3value(::message::ProtoBuffVector3* vector3value) {
  clear_Value();
  if (vector3value) {
    set_has_vector3value();
    _impl_.Value_.vector3value_ = vector3value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCVarValueDataV2.Vector3Value)
}
inline ::message::ProtoBuffVector3* UGCVarValueDataV2::_internal_mutable_vector3value() {
  if (!_internal_has_vector3value()) {
    clear_Value();
    set_has_vector3value();
    _impl_.Value_.vector3value_ = CreateMaybeMessage< ::message::ProtoBuffVector3 >(GetArenaForAllocation());
  }
  return _impl_.Value_.vector3value_;
}
inline ::message::ProtoBuffVector3* UGCVarValueDataV2::mutable_vector3value() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_vector3value();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueDataV2.Vector3Value)
  return _msg;
}

// string EntityRefValue = 9;
inline bool UGCVarValueDataV2::_internal_has_entityrefvalue() const {
  return Value_case() == kEntityRefValue;
}
inline bool UGCVarValueDataV2::has_entityrefvalue() const {
  return _internal_has_entityrefvalue();
}
inline void UGCVarValueDataV2::set_has_entityrefvalue() {
  _impl_._oneof_case_[0] = kEntityRefValue;
}
inline void UGCVarValueDataV2::clear_entityrefvalue() {
  if (_internal_has_entityrefvalue()) {
    _impl_.Value_.entityrefvalue_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& UGCVarValueDataV2::entityrefvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.EntityRefValue)
  return _internal_entityrefvalue();
}
template <typename ArgT0, typename... ArgT>
inline void UGCVarValueDataV2::set_entityrefvalue(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_entityrefvalue()) {
    clear_Value();
    set_has_entityrefvalue();
    _impl_.Value_.entityrefvalue_.InitDefault();
  }
  _impl_.Value_.entityrefvalue_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVarValueDataV2.EntityRefValue)
}
inline std::string* UGCVarValueDataV2::mutable_entityrefvalue() {
  std::string* _s = _internal_mutable_entityrefvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueDataV2.EntityRefValue)
  return _s;
}
inline const std::string& UGCVarValueDataV2::_internal_entityrefvalue() const {
  if (_internal_has_entityrefvalue()) {
    return _impl_.Value_.entityrefvalue_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UGCVarValueDataV2::_internal_set_entityrefvalue(const std::string& value) {
  if (!_internal_has_entityrefvalue()) {
    clear_Value();
    set_has_entityrefvalue();
    _impl_.Value_.entityrefvalue_.InitDefault();
  }
  _impl_.Value_.entityrefvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVarValueDataV2::_internal_mutable_entityrefvalue() {
  if (!_internal_has_entityrefvalue()) {
    clear_Value();
    set_has_entityrefvalue();
    _impl_.Value_.entityrefvalue_.InitDefault();
  }
  return _impl_.Value_.entityrefvalue_.Mutable(      GetArenaForAllocation());
}
inline std::string* UGCVarValueDataV2::release_entityrefvalue() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueDataV2.EntityRefValue)
  if (_internal_has_entityrefvalue()) {
    clear_has_Value();
    return _impl_.Value_.entityrefvalue_.Release();
  } else {
    return nullptr;
  }
}
inline void UGCVarValueDataV2::set_allocated_entityrefvalue(std::string* entityrefvalue) {
  if (has_Value()) {
    clear_Value();
  }
  if (entityrefvalue != nullptr) {
    set_has_entityrefvalue();
    _impl_.Value_.entityrefvalue_.InitAllocated(entityrefvalue, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueDataV2.EntityRefValue)
}

// .message.ProtoBuffQuaternion QuaternionValue = 10;
inline bool UGCVarValueDataV2::_internal_has_quaternionvalue() const {
  return Value_case() == kQuaternionValue;
}
inline bool UGCVarValueDataV2::has_quaternionvalue() const {
  return _internal_has_quaternionvalue();
}
inline void UGCVarValueDataV2::set_has_quaternionvalue() {
  _impl_._oneof_case_[0] = kQuaternionValue;
}
inline ::message::ProtoBuffQuaternion* UGCVarValueDataV2::release_quaternionvalue() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueDataV2.QuaternionValue)
  if (_internal_has_quaternionvalue()) {
    clear_has_Value();
    ::message::ProtoBuffQuaternion* temp = _impl_.Value_.quaternionvalue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.quaternionvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ProtoBuffQuaternion& UGCVarValueDataV2::_internal_quaternionvalue() const {
  return _internal_has_quaternionvalue()
      ? *_impl_.Value_.quaternionvalue_
      : reinterpret_cast< ::message::ProtoBuffQuaternion&>(::message::_ProtoBuffQuaternion_default_instance_);
}
inline const ::message::ProtoBuffQuaternion& UGCVarValueDataV2::quaternionvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.QuaternionValue)
  return _internal_quaternionvalue();
}
inline ::message::ProtoBuffQuaternion* UGCVarValueDataV2::unsafe_arena_release_quaternionvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.UGCVarValueDataV2.QuaternionValue)
  if (_internal_has_quaternionvalue()) {
    clear_has_Value();
    ::message::ProtoBuffQuaternion* temp = _impl_.Value_.quaternionvalue_;
    _impl_.Value_.quaternionvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UGCVarValueDataV2::unsafe_arena_set_allocated_quaternionvalue(::message::ProtoBuffQuaternion* quaternionvalue) {
  clear_Value();
  if (quaternionvalue) {
    set_has_quaternionvalue();
    _impl_.Value_.quaternionvalue_ = quaternionvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCVarValueDataV2.QuaternionValue)
}
inline ::message::ProtoBuffQuaternion* UGCVarValueDataV2::_internal_mutable_quaternionvalue() {
  if (!_internal_has_quaternionvalue()) {
    clear_Value();
    set_has_quaternionvalue();
    _impl_.Value_.quaternionvalue_ = CreateMaybeMessage< ::message::ProtoBuffQuaternion >(GetArenaForAllocation());
  }
  return _impl_.Value_.quaternionvalue_;
}
inline ::message::ProtoBuffQuaternion* UGCVarValueDataV2::mutable_quaternionvalue() {
  ::message::ProtoBuffQuaternion* _msg = _internal_mutable_quaternionvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueDataV2.QuaternionValue)
  return _msg;
}

// .message.ProtoBuffVector2 Vector2Value = 11;
inline bool UGCVarValueDataV2::_internal_has_vector2value() const {
  return Value_case() == kVector2Value;
}
inline bool UGCVarValueDataV2::has_vector2value() const {
  return _internal_has_vector2value();
}
inline void UGCVarValueDataV2::set_has_vector2value() {
  _impl_._oneof_case_[0] = kVector2Value;
}
inline ::message::ProtoBuffVector2* UGCVarValueDataV2::release_vector2value() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueDataV2.Vector2Value)
  if (_internal_has_vector2value()) {
    clear_has_Value();
    ::message::ProtoBuffVector2* temp = _impl_.Value_.vector2value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.vector2value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ProtoBuffVector2& UGCVarValueDataV2::_internal_vector2value() const {
  return _internal_has_vector2value()
      ? *_impl_.Value_.vector2value_
      : reinterpret_cast< ::message::ProtoBuffVector2&>(::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCVarValueDataV2::vector2value() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.Vector2Value)
  return _internal_vector2value();
}
inline ::message::ProtoBuffVector2* UGCVarValueDataV2::unsafe_arena_release_vector2value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.UGCVarValueDataV2.Vector2Value)
  if (_internal_has_vector2value()) {
    clear_has_Value();
    ::message::ProtoBuffVector2* temp = _impl_.Value_.vector2value_;
    _impl_.Value_.vector2value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UGCVarValueDataV2::unsafe_arena_set_allocated_vector2value(::message::ProtoBuffVector2* vector2value) {
  clear_Value();
  if (vector2value) {
    set_has_vector2value();
    _impl_.Value_.vector2value_ = vector2value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCVarValueDataV2.Vector2Value)
}
inline ::message::ProtoBuffVector2* UGCVarValueDataV2::_internal_mutable_vector2value() {
  if (!_internal_has_vector2value()) {
    clear_Value();
    set_has_vector2value();
    _impl_.Value_.vector2value_ = CreateMaybeMessage< ::message::ProtoBuffVector2 >(GetArenaForAllocation());
  }
  return _impl_.Value_.vector2value_;
}
inline ::message::ProtoBuffVector2* UGCVarValueDataV2::mutable_vector2value() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_vector2value();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueDataV2.Vector2Value)
  return _msg;
}

// string LocStringValue = 12;
inline bool UGCVarValueDataV2::_internal_has_locstringvalue() const {
  return Value_case() == kLocStringValue;
}
inline bool UGCVarValueDataV2::has_locstringvalue() const {
  return _internal_has_locstringvalue();
}
inline void UGCVarValueDataV2::set_has_locstringvalue() {
  _impl_._oneof_case_[0] = kLocStringValue;
}
inline void UGCVarValueDataV2::clear_locstringvalue() {
  if (_internal_has_locstringvalue()) {
    _impl_.Value_.locstringvalue_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& UGCVarValueDataV2::locstringvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.LocStringValue)
  return _internal_locstringvalue();
}
template <typename ArgT0, typename... ArgT>
inline void UGCVarValueDataV2::set_locstringvalue(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_locstringvalue()) {
    clear_Value();
    set_has_locstringvalue();
    _impl_.Value_.locstringvalue_.InitDefault();
  }
  _impl_.Value_.locstringvalue_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVarValueDataV2.LocStringValue)
}
inline std::string* UGCVarValueDataV2::mutable_locstringvalue() {
  std::string* _s = _internal_mutable_locstringvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueDataV2.LocStringValue)
  return _s;
}
inline const std::string& UGCVarValueDataV2::_internal_locstringvalue() const {
  if (_internal_has_locstringvalue()) {
    return _impl_.Value_.locstringvalue_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UGCVarValueDataV2::_internal_set_locstringvalue(const std::string& value) {
  if (!_internal_has_locstringvalue()) {
    clear_Value();
    set_has_locstringvalue();
    _impl_.Value_.locstringvalue_.InitDefault();
  }
  _impl_.Value_.locstringvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVarValueDataV2::_internal_mutable_locstringvalue() {
  if (!_internal_has_locstringvalue()) {
    clear_Value();
    set_has_locstringvalue();
    _impl_.Value_.locstringvalue_.InitDefault();
  }
  return _impl_.Value_.locstringvalue_.Mutable(      GetArenaForAllocation());
}
inline std::string* UGCVarValueDataV2::release_locstringvalue() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueDataV2.LocStringValue)
  if (_internal_has_locstringvalue()) {
    clear_has_Value();
    return _impl_.Value_.locstringvalue_.Release();
  } else {
    return nullptr;
  }
}
inline void UGCVarValueDataV2::set_allocated_locstringvalue(std::string* locstringvalue) {
  if (has_Value()) {
    clear_Value();
  }
  if (locstringvalue != nullptr) {
    set_has_locstringvalue();
    _impl_.Value_.locstringvalue_.InitAllocated(locstringvalue, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueDataV2.LocStringValue)
}

// bool IsMap = 13;
inline bool UGCVarValueDataV2::_internal_has_ismap() const {
  return Value_case() == kIsMap;
}
inline bool UGCVarValueDataV2::has_ismap() const {
  return _internal_has_ismap();
}
inline void UGCVarValueDataV2::set_has_ismap() {
  _impl_._oneof_case_[0] = kIsMap;
}
inline void UGCVarValueDataV2::clear_ismap() {
  if (_internal_has_ismap()) {
    _impl_.Value_.ismap_ = false;
    clear_has_Value();
  }
}
inline bool UGCVarValueDataV2::_internal_ismap() const {
  if (_internal_has_ismap()) {
    return _impl_.Value_.ismap_;
  }
  return false;
}
inline void UGCVarValueDataV2::_internal_set_ismap(bool value) {
  if (!_internal_has_ismap()) {
    clear_Value();
    set_has_ismap();
  }
  _impl_.Value_.ismap_ = value;
}
inline bool UGCVarValueDataV2::ismap() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.IsMap)
  return _internal_ismap();
}
inline void UGCVarValueDataV2::set_ismap(bool value) {
  _internal_set_ismap(value);
  // @@protoc_insertion_point(field_set:message.UGCVarValueDataV2.IsMap)
}

// repeated .message.UGCVarValueDataV2 ListValue = 2;
inline int UGCVarValueDataV2::_internal_listvalue_size() const {
  return _impl_.listvalue_.size();
}
inline int UGCVarValueDataV2::listvalue_size() const {
  return _internal_listvalue_size();
}
inline void UGCVarValueDataV2::clear_listvalue() {
  _impl_.listvalue_.Clear();
}
inline ::message::UGCVarValueDataV2* UGCVarValueDataV2::mutable_listvalue(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueDataV2.ListValue)
  return _impl_.listvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >*
UGCVarValueDataV2::mutable_listvalue() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCVarValueDataV2.ListValue)
  return &_impl_.listvalue_;
}
inline const ::message::UGCVarValueDataV2& UGCVarValueDataV2::_internal_listvalue(int index) const {
  return _impl_.listvalue_.Get(index);
}
inline const ::message::UGCVarValueDataV2& UGCVarValueDataV2::listvalue(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.ListValue)
  return _internal_listvalue(index);
}
inline ::message::UGCVarValueDataV2* UGCVarValueDataV2::_internal_add_listvalue() {
  return _impl_.listvalue_.Add();
}
inline ::message::UGCVarValueDataV2* UGCVarValueDataV2::add_listvalue() {
  ::message::UGCVarValueDataV2* _add = _internal_add_listvalue();
  // @@protoc_insertion_point(field_add:message.UGCVarValueDataV2.ListValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >&
UGCVarValueDataV2::listvalue() const {
  // @@protoc_insertion_point(field_list:message.UGCVarValueDataV2.ListValue)
  return _impl_.listvalue_;
}

// .message.UGCMapValue MapValue = 14;
inline bool UGCVarValueDataV2::_internal_has_mapvalue() const {
  return this != internal_default_instance() && _impl_.mapvalue_ != nullptr;
}
inline bool UGCVarValueDataV2::has_mapvalue() const {
  return _internal_has_mapvalue();
}
inline void UGCVarValueDataV2::clear_mapvalue() {
  if (GetArenaForAllocation() == nullptr && _impl_.mapvalue_ != nullptr) {
    delete _impl_.mapvalue_;
  }
  _impl_.mapvalue_ = nullptr;
}
inline const ::message::UGCMapValue& UGCVarValueDataV2::_internal_mapvalue() const {
  const ::message::UGCMapValue* p = _impl_.mapvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCMapValue&>(
      ::message::_UGCMapValue_default_instance_);
}
inline const ::message::UGCMapValue& UGCVarValueDataV2::mapvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCVarValueDataV2.MapValue)
  return _internal_mapvalue();
}
inline void UGCVarValueDataV2::unsafe_arena_set_allocated_mapvalue(
    ::message::UGCMapValue* mapvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapvalue_);
  }
  _impl_.mapvalue_ = mapvalue;
  if (mapvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCVarValueDataV2.MapValue)
}
inline ::message::UGCMapValue* UGCVarValueDataV2::release_mapvalue() {
  
  ::message::UGCMapValue* temp = _impl_.mapvalue_;
  _impl_.mapvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCMapValue* UGCVarValueDataV2::unsafe_arena_release_mapvalue() {
  // @@protoc_insertion_point(field_release:message.UGCVarValueDataV2.MapValue)
  
  ::message::UGCMapValue* temp = _impl_.mapvalue_;
  _impl_.mapvalue_ = nullptr;
  return temp;
}
inline ::message::UGCMapValue* UGCVarValueDataV2::_internal_mutable_mapvalue() {
  
  if (_impl_.mapvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCMapValue>(GetArenaForAllocation());
    _impl_.mapvalue_ = p;
  }
  return _impl_.mapvalue_;
}
inline ::message::UGCMapValue* UGCVarValueDataV2::mutable_mapvalue() {
  ::message::UGCMapValue* _msg = _internal_mutable_mapvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCVarValueDataV2.MapValue)
  return _msg;
}
inline void UGCVarValueDataV2::set_allocated_mapvalue(::message::UGCMapValue* mapvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mapvalue_;
  }
  if (mapvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mapvalue);
    if (message_arena != submessage_arena) {
      mapvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapvalue, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mapvalue_ = mapvalue;
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueDataV2.MapValue)
}

inline bool UGCVarValueDataV2::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void UGCVarValueDataV2::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline UGCVarValueDataV2::ValueCase UGCVarValueDataV2::Value_case() const {
  return UGCVarValueDataV2::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UGCFuncDefParamData

// bool IsUpvalue = 1;
inline void UGCFuncDefParamData::clear_isupvalue() {
  _impl_.isupvalue_ = false;
}
inline bool UGCFuncDefParamData::_internal_isupvalue() const {
  return _impl_.isupvalue_;
}
inline bool UGCFuncDefParamData::isupvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncDefParamData.IsUpvalue)
  return _internal_isupvalue();
}
inline void UGCFuncDefParamData::_internal_set_isupvalue(bool value) {
  
  _impl_.isupvalue_ = value;
}
inline void UGCFuncDefParamData::set_isupvalue(bool value) {
  _internal_set_isupvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCFuncDefParamData.IsUpvalue)
}

// int32 Type = 2;
inline void UGCFuncDefParamData::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t UGCFuncDefParamData::_internal_type() const {
  return _impl_.type_;
}
inline int32_t UGCFuncDefParamData::type() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncDefParamData.Type)
  return _internal_type();
}
inline void UGCFuncDefParamData::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void UGCFuncDefParamData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.UGCFuncDefParamData.Type)
}

// int32 OutType = 3;
inline void UGCFuncDefParamData::clear_outtype() {
  _impl_.outtype_ = 0;
}
inline int32_t UGCFuncDefParamData::_internal_outtype() const {
  return _impl_.outtype_;
}
inline int32_t UGCFuncDefParamData::outtype() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncDefParamData.OutType)
  return _internal_outtype();
}
inline void UGCFuncDefParamData::_internal_set_outtype(int32_t value) {
  
  _impl_.outtype_ = value;
}
inline void UGCFuncDefParamData::set_outtype(int32_t value) {
  _internal_set_outtype(value);
  // @@protoc_insertion_point(field_set:message.UGCFuncDefParamData.OutType)
}

// -------------------------------------------------------------------

// UGCFuncCallerDataV2

// string ID = 1;
inline void UGCFuncCallerDataV2::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCFuncCallerDataV2::id() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerDataV2.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCFuncCallerDataV2::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCFuncCallerDataV2.ID)
}
inline std::string* UGCFuncCallerDataV2::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCFuncCallerDataV2.ID)
  return _s;
}
inline const std::string& UGCFuncCallerDataV2::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCFuncCallerDataV2::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCFuncCallerDataV2::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCFuncCallerDataV2::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCFuncCallerDataV2.ID)
  return _impl_.id_.Release();
}
inline void UGCFuncCallerDataV2::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCFuncCallerDataV2.ID)
}

// string Name = 2;
inline void UGCFuncCallerDataV2::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCFuncCallerDataV2::name() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerDataV2.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCFuncCallerDataV2::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCFuncCallerDataV2.Name)
}
inline std::string* UGCFuncCallerDataV2::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCFuncCallerDataV2.Name)
  return _s;
}
inline const std::string& UGCFuncCallerDataV2::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCFuncCallerDataV2::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCFuncCallerDataV2::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCFuncCallerDataV2::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCFuncCallerDataV2.Name)
  return _impl_.name_.Release();
}
inline void UGCFuncCallerDataV2::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCFuncCallerDataV2.Name)
}

// int32 Type = 3;
inline void UGCFuncCallerDataV2::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t UGCFuncCallerDataV2::_internal_type() const {
  return _impl_.type_;
}
inline int32_t UGCFuncCallerDataV2::type() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerDataV2.Type)
  return _internal_type();
}
inline void UGCFuncCallerDataV2::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void UGCFuncCallerDataV2::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.UGCFuncCallerDataV2.Type)
}

// repeated .message.UGCVarValueDataV2 Params = 4;
inline int UGCFuncCallerDataV2::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int UGCFuncCallerDataV2::params_size() const {
  return _internal_params_size();
}
inline void UGCFuncCallerDataV2::clear_params() {
  _impl_.params_.Clear();
}
inline ::message::UGCVarValueDataV2* UGCFuncCallerDataV2::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCFuncCallerDataV2.Params)
  return _impl_.params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >*
UGCFuncCallerDataV2::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCFuncCallerDataV2.Params)
  return &_impl_.params_;
}
inline const ::message::UGCVarValueDataV2& UGCFuncCallerDataV2::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const ::message::UGCVarValueDataV2& UGCFuncCallerDataV2::params(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerDataV2.Params)
  return _internal_params(index);
}
inline ::message::UGCVarValueDataV2* UGCFuncCallerDataV2::_internal_add_params() {
  return _impl_.params_.Add();
}
inline ::message::UGCVarValueDataV2* UGCFuncCallerDataV2::add_params() {
  ::message::UGCVarValueDataV2* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:message.UGCFuncCallerDataV2.Params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarValueDataV2 >&
UGCFuncCallerDataV2::params() const {
  // @@protoc_insertion_point(field_list:message.UGCFuncCallerDataV2.Params)
  return _impl_.params_;
}

// repeated .message.UGCFuncCallerDataV2 SubCallerData = 5;
inline int UGCFuncCallerDataV2::_internal_subcallerdata_size() const {
  return _impl_.subcallerdata_.size();
}
inline int UGCFuncCallerDataV2::subcallerdata_size() const {
  return _internal_subcallerdata_size();
}
inline void UGCFuncCallerDataV2::clear_subcallerdata() {
  _impl_.subcallerdata_.Clear();
}
inline ::message::UGCFuncCallerDataV2* UGCFuncCallerDataV2::mutable_subcallerdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCFuncCallerDataV2.SubCallerData)
  return _impl_.subcallerdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 >*
UGCFuncCallerDataV2::mutable_subcallerdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCFuncCallerDataV2.SubCallerData)
  return &_impl_.subcallerdata_;
}
inline const ::message::UGCFuncCallerDataV2& UGCFuncCallerDataV2::_internal_subcallerdata(int index) const {
  return _impl_.subcallerdata_.Get(index);
}
inline const ::message::UGCFuncCallerDataV2& UGCFuncCallerDataV2::subcallerdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerDataV2.SubCallerData)
  return _internal_subcallerdata(index);
}
inline ::message::UGCFuncCallerDataV2* UGCFuncCallerDataV2::_internal_add_subcallerdata() {
  return _impl_.subcallerdata_.Add();
}
inline ::message::UGCFuncCallerDataV2* UGCFuncCallerDataV2::add_subcallerdata() {
  ::message::UGCFuncCallerDataV2* _add = _internal_add_subcallerdata();
  // @@protoc_insertion_point(field_add:message.UGCFuncCallerDataV2.SubCallerData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 >&
UGCFuncCallerDataV2::subcallerdata() const {
  // @@protoc_insertion_point(field_list:message.UGCFuncCallerDataV2.SubCallerData)
  return _impl_.subcallerdata_;
}

// bool UseUpvalue = 6;
inline void UGCFuncCallerDataV2::clear_useupvalue() {
  _impl_.useupvalue_ = false;
}
inline bool UGCFuncCallerDataV2::_internal_useupvalue() const {
  return _impl_.useupvalue_;
}
inline bool UGCFuncCallerDataV2::useupvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerDataV2.UseUpvalue)
  return _internal_useupvalue();
}
inline void UGCFuncCallerDataV2::_internal_set_useupvalue(bool value) {
  
  _impl_.useupvalue_ = value;
}
inline void UGCFuncCallerDataV2::set_useupvalue(bool value) {
  _internal_set_useupvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCFuncCallerDataV2.UseUpvalue)
}

// repeated int32 ParamTypes = 7;
inline int UGCFuncCallerDataV2::_internal_paramtypes_size() const {
  return _impl_.paramtypes_.size();
}
inline int UGCFuncCallerDataV2::paramtypes_size() const {
  return _internal_paramtypes_size();
}
inline void UGCFuncCallerDataV2::clear_paramtypes() {
  _impl_.paramtypes_.Clear();
}
inline int32_t UGCFuncCallerDataV2::_internal_paramtypes(int index) const {
  return _impl_.paramtypes_.Get(index);
}
inline int32_t UGCFuncCallerDataV2::paramtypes(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerDataV2.ParamTypes)
  return _internal_paramtypes(index);
}
inline void UGCFuncCallerDataV2::set_paramtypes(int index, int32_t value) {
  _impl_.paramtypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCFuncCallerDataV2.ParamTypes)
}
inline void UGCFuncCallerDataV2::_internal_add_paramtypes(int32_t value) {
  _impl_.paramtypes_.Add(value);
}
inline void UGCFuncCallerDataV2::add_paramtypes(int32_t value) {
  _internal_add_paramtypes(value);
  // @@protoc_insertion_point(field_add:message.UGCFuncCallerDataV2.ParamTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCFuncCallerDataV2::_internal_paramtypes() const {
  return _impl_.paramtypes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCFuncCallerDataV2::paramtypes() const {
  // @@protoc_insertion_point(field_list:message.UGCFuncCallerDataV2.ParamTypes)
  return _internal_paramtypes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCFuncCallerDataV2::_internal_mutable_paramtypes() {
  return &_impl_.paramtypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCFuncCallerDataV2::mutable_paramtypes() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCFuncCallerDataV2.ParamTypes)
  return _internal_mutable_paramtypes();
}

// repeated .message.UGCFuncDefParamData DefParamInfos = 8;
inline int UGCFuncCallerDataV2::_internal_defparaminfos_size() const {
  return _impl_.defparaminfos_.size();
}
inline int UGCFuncCallerDataV2::defparaminfos_size() const {
  return _internal_defparaminfos_size();
}
inline void UGCFuncCallerDataV2::clear_defparaminfos() {
  _impl_.defparaminfos_.Clear();
}
inline ::message::UGCFuncDefParamData* UGCFuncCallerDataV2::mutable_defparaminfos(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCFuncCallerDataV2.DefParamInfos)
  return _impl_.defparaminfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncDefParamData >*
UGCFuncCallerDataV2::mutable_defparaminfos() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCFuncCallerDataV2.DefParamInfos)
  return &_impl_.defparaminfos_;
}
inline const ::message::UGCFuncDefParamData& UGCFuncCallerDataV2::_internal_defparaminfos(int index) const {
  return _impl_.defparaminfos_.Get(index);
}
inline const ::message::UGCFuncDefParamData& UGCFuncCallerDataV2::defparaminfos(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCFuncCallerDataV2.DefParamInfos)
  return _internal_defparaminfos(index);
}
inline ::message::UGCFuncDefParamData* UGCFuncCallerDataV2::_internal_add_defparaminfos() {
  return _impl_.defparaminfos_.Add();
}
inline ::message::UGCFuncDefParamData* UGCFuncCallerDataV2::add_defparaminfos() {
  ::message::UGCFuncDefParamData* _add = _internal_add_defparaminfos();
  // @@protoc_insertion_point(field_add:message.UGCFuncCallerDataV2.DefParamInfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncDefParamData >&
UGCFuncCallerDataV2::defparaminfos() const {
  // @@protoc_insertion_point(field_list:message.UGCFuncCallerDataV2.DefParamInfos)
  return _impl_.defparaminfos_;
}

// -------------------------------------------------------------------

// UGCVarDefineDataV2

// string ID = 1;
inline void UGCVarDefineDataV2::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCVarDefineDataV2::id() const {
  // @@protoc_insertion_point(field_get:message.UGCVarDefineDataV2.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCVarDefineDataV2::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVarDefineDataV2.ID)
}
inline std::string* UGCVarDefineDataV2::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCVarDefineDataV2.ID)
  return _s;
}
inline const std::string& UGCVarDefineDataV2::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCVarDefineDataV2::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVarDefineDataV2::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCVarDefineDataV2::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCVarDefineDataV2.ID)
  return _impl_.id_.Release();
}
inline void UGCVarDefineDataV2::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarDefineDataV2.ID)
}

// string Name = 2;
inline void UGCVarDefineDataV2::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCVarDefineDataV2::name() const {
  // @@protoc_insertion_point(field_get:message.UGCVarDefineDataV2.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCVarDefineDataV2::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCVarDefineDataV2.Name)
}
inline std::string* UGCVarDefineDataV2::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCVarDefineDataV2.Name)
  return _s;
}
inline const std::string& UGCVarDefineDataV2::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCVarDefineDataV2::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCVarDefineDataV2::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCVarDefineDataV2::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCVarDefineDataV2.Name)
  return _impl_.name_.Release();
}
inline void UGCVarDefineDataV2::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarDefineDataV2.Name)
}

// int32 TypeID = 3;
inline void UGCVarDefineDataV2::clear_typeid_() {
  _impl_.typeid__ = 0;
}
inline int32_t UGCVarDefineDataV2::_internal_typeid_() const {
  return _impl_.typeid__;
}
inline int32_t UGCVarDefineDataV2::typeid_() const {
  // @@protoc_insertion_point(field_get:message.UGCVarDefineDataV2.TypeID)
  return _internal_typeid_();
}
inline void UGCVarDefineDataV2::_internal_set_typeid_(int32_t value) {
  
  _impl_.typeid__ = value;
}
inline void UGCVarDefineDataV2::set_typeid_(int32_t value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:message.UGCVarDefineDataV2.TypeID)
}

// .message.UGCVarValueDataV2 Value = 4;
inline bool UGCVarDefineDataV2::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool UGCVarDefineDataV2::has_value() const {
  return _internal_has_value();
}
inline void UGCVarDefineDataV2::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::message::UGCVarValueDataV2& UGCVarDefineDataV2::_internal_value() const {
  const ::message::UGCVarValueDataV2* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCVarValueDataV2&>(
      ::message::_UGCVarValueDataV2_default_instance_);
}
inline const ::message::UGCVarValueDataV2& UGCVarDefineDataV2::value() const {
  // @@protoc_insertion_point(field_get:message.UGCVarDefineDataV2.Value)
  return _internal_value();
}
inline void UGCVarDefineDataV2::unsafe_arena_set_allocated_value(
    ::message::UGCVarValueDataV2* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCVarDefineDataV2.Value)
}
inline ::message::UGCVarValueDataV2* UGCVarDefineDataV2::release_value() {
  
  ::message::UGCVarValueDataV2* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCVarDefineDataV2::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:message.UGCVarDefineDataV2.Value)
  
  ::message::UGCVarValueDataV2* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCVarDefineDataV2::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCVarValueDataV2>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::message::UGCVarValueDataV2* UGCVarDefineDataV2::mutable_value() {
  ::message::UGCVarValueDataV2* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:message.UGCVarDefineDataV2.Value)
  return _msg;
}
inline void UGCVarDefineDataV2::set_allocated_value(::message::UGCVarValueDataV2* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarDefineDataV2.Value)
}

// -------------------------------------------------------------------

// UGCRuleDataV2

// int32 EventType = 1;
inline void UGCRuleDataV2::clear_eventtype() {
  _impl_.eventtype_ = 0;
}
inline int32_t UGCRuleDataV2::_internal_eventtype() const {
  return _impl_.eventtype_;
}
inline int32_t UGCRuleDataV2::eventtype() const {
  // @@protoc_insertion_point(field_get:message.UGCRuleDataV2.EventType)
  return _internal_eventtype();
}
inline void UGCRuleDataV2::_internal_set_eventtype(int32_t value) {
  
  _impl_.eventtype_ = value;
}
inline void UGCRuleDataV2::set_eventtype(int32_t value) {
  _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:message.UGCRuleDataV2.EventType)
}

// .message.UGCFuncCallerDataV2 CallerData = 2;
inline bool UGCRuleDataV2::_internal_has_callerdata() const {
  return this != internal_default_instance() && _impl_.callerdata_ != nullptr;
}
inline bool UGCRuleDataV2::has_callerdata() const {
  return _internal_has_callerdata();
}
inline void UGCRuleDataV2::clear_callerdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.callerdata_ != nullptr) {
    delete _impl_.callerdata_;
  }
  _impl_.callerdata_ = nullptr;
}
inline const ::message::UGCFuncCallerDataV2& UGCRuleDataV2::_internal_callerdata() const {
  const ::message::UGCFuncCallerDataV2* p = _impl_.callerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCFuncCallerDataV2&>(
      ::message::_UGCFuncCallerDataV2_default_instance_);
}
inline const ::message::UGCFuncCallerDataV2& UGCRuleDataV2::callerdata() const {
  // @@protoc_insertion_point(field_get:message.UGCRuleDataV2.CallerData)
  return _internal_callerdata();
}
inline void UGCRuleDataV2::unsafe_arena_set_allocated_callerdata(
    ::message::UGCFuncCallerDataV2* callerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.callerdata_);
  }
  _impl_.callerdata_ = callerdata;
  if (callerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCRuleDataV2.CallerData)
}
inline ::message::UGCFuncCallerDataV2* UGCRuleDataV2::release_callerdata() {
  
  ::message::UGCFuncCallerDataV2* temp = _impl_.callerdata_;
  _impl_.callerdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCFuncCallerDataV2* UGCRuleDataV2::unsafe_arena_release_callerdata() {
  // @@protoc_insertion_point(field_release:message.UGCRuleDataV2.CallerData)
  
  ::message::UGCFuncCallerDataV2* temp = _impl_.callerdata_;
  _impl_.callerdata_ = nullptr;
  return temp;
}
inline ::message::UGCFuncCallerDataV2* UGCRuleDataV2::_internal_mutable_callerdata() {
  
  if (_impl_.callerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCFuncCallerDataV2>(GetArenaForAllocation());
    _impl_.callerdata_ = p;
  }
  return _impl_.callerdata_;
}
inline ::message::UGCFuncCallerDataV2* UGCRuleDataV2::mutable_callerdata() {
  ::message::UGCFuncCallerDataV2* _msg = _internal_mutable_callerdata();
  // @@protoc_insertion_point(field_mutable:message.UGCRuleDataV2.CallerData)
  return _msg;
}
inline void UGCRuleDataV2::set_allocated_callerdata(::message::UGCFuncCallerDataV2* callerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.callerdata_;
  }
  if (callerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(callerdata);
    if (message_arena != submessage_arena) {
      callerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callerdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.callerdata_ = callerdata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCRuleDataV2.CallerData)
}

// -------------------------------------------------------------------

// UGCGraphDataV2

// string ID = 1;
inline void UGCGraphDataV2::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCGraphDataV2::id() const {
  // @@protoc_insertion_point(field_get:message.UGCGraphDataV2.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCGraphDataV2::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCGraphDataV2.ID)
}
inline std::string* UGCGraphDataV2::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCGraphDataV2.ID)
  return _s;
}
inline const std::string& UGCGraphDataV2::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCGraphDataV2::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCGraphDataV2::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCGraphDataV2::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCGraphDataV2.ID)
  return _impl_.id_.Release();
}
inline void UGCGraphDataV2::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCGraphDataV2.ID)
}

// repeated .message.UGCRuleDataV2 Rules = 2;
inline int UGCGraphDataV2::_internal_rules_size() const {
  return _impl_.rules_.size();
}
inline int UGCGraphDataV2::rules_size() const {
  return _internal_rules_size();
}
inline void UGCGraphDataV2::clear_rules() {
  _impl_.rules_.Clear();
}
inline ::message::UGCRuleDataV2* UGCGraphDataV2::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGraphDataV2.Rules)
  return _impl_.rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleDataV2 >*
UGCGraphDataV2::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGraphDataV2.Rules)
  return &_impl_.rules_;
}
inline const ::message::UGCRuleDataV2& UGCGraphDataV2::_internal_rules(int index) const {
  return _impl_.rules_.Get(index);
}
inline const ::message::UGCRuleDataV2& UGCGraphDataV2::rules(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGraphDataV2.Rules)
  return _internal_rules(index);
}
inline ::message::UGCRuleDataV2* UGCGraphDataV2::_internal_add_rules() {
  return _impl_.rules_.Add();
}
inline ::message::UGCRuleDataV2* UGCGraphDataV2::add_rules() {
  ::message::UGCRuleDataV2* _add = _internal_add_rules();
  // @@protoc_insertion_point(field_add:message.UGCGraphDataV2.Rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRuleDataV2 >&
UGCGraphDataV2::rules() const {
  // @@protoc_insertion_point(field_list:message.UGCGraphDataV2.Rules)
  return _impl_.rules_;
}

// repeated .message.UGCVarDefineDataV2 Variables = 3;
inline int UGCGraphDataV2::_internal_variables_size() const {
  return _impl_.variables_.size();
}
inline int UGCGraphDataV2::variables_size() const {
  return _internal_variables_size();
}
inline void UGCGraphDataV2::clear_variables() {
  _impl_.variables_.Clear();
}
inline ::message::UGCVarDefineDataV2* UGCGraphDataV2::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGraphDataV2.Variables)
  return _impl_.variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineDataV2 >*
UGCGraphDataV2::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGraphDataV2.Variables)
  return &_impl_.variables_;
}
inline const ::message::UGCVarDefineDataV2& UGCGraphDataV2::_internal_variables(int index) const {
  return _impl_.variables_.Get(index);
}
inline const ::message::UGCVarDefineDataV2& UGCGraphDataV2::variables(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGraphDataV2.Variables)
  return _internal_variables(index);
}
inline ::message::UGCVarDefineDataV2* UGCGraphDataV2::_internal_add_variables() {
  return _impl_.variables_.Add();
}
inline ::message::UGCVarDefineDataV2* UGCGraphDataV2::add_variables() {
  ::message::UGCVarDefineDataV2* _add = _internal_add_variables();
  // @@protoc_insertion_point(field_add:message.UGCGraphDataV2.Variables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCVarDefineDataV2 >&
UGCGraphDataV2::variables() const {
  // @@protoc_insertion_point(field_list:message.UGCGraphDataV2.Variables)
  return _impl_.variables_;
}

// repeated .message.UGCFuncCallerDataV2 Functions = 4;
inline int UGCGraphDataV2::_internal_functions_size() const {
  return _impl_.functions_.size();
}
inline int UGCGraphDataV2::functions_size() const {
  return _internal_functions_size();
}
inline void UGCGraphDataV2::clear_functions() {
  _impl_.functions_.Clear();
}
inline ::message::UGCFuncCallerDataV2* UGCGraphDataV2::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGraphDataV2.Functions)
  return _impl_.functions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 >*
UGCGraphDataV2::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGraphDataV2.Functions)
  return &_impl_.functions_;
}
inline const ::message::UGCFuncCallerDataV2& UGCGraphDataV2::_internal_functions(int index) const {
  return _impl_.functions_.Get(index);
}
inline const ::message::UGCFuncCallerDataV2& UGCGraphDataV2::functions(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGraphDataV2.Functions)
  return _internal_functions(index);
}
inline ::message::UGCFuncCallerDataV2* UGCGraphDataV2::_internal_add_functions() {
  return _impl_.functions_.Add();
}
inline ::message::UGCFuncCallerDataV2* UGCGraphDataV2::add_functions() {
  ::message::UGCFuncCallerDataV2* _add = _internal_add_functions();
  // @@protoc_insertion_point(field_add:message.UGCGraphDataV2.Functions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCFuncCallerDataV2 >&
UGCGraphDataV2::functions() const {
  // @@protoc_insertion_point(field_list:message.UGCGraphDataV2.Functions)
  return _impl_.functions_;
}

// string Name = 5;
inline void UGCGraphDataV2::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCGraphDataV2::name() const {
  // @@protoc_insertion_point(field_get:message.UGCGraphDataV2.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCGraphDataV2::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCGraphDataV2.Name)
}
inline std::string* UGCGraphDataV2::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCGraphDataV2.Name)
  return _s;
}
inline const std::string& UGCGraphDataV2::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCGraphDataV2::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCGraphDataV2::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCGraphDataV2::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCGraphDataV2.Name)
  return _impl_.name_.Release();
}
inline void UGCGraphDataV2::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCGraphDataV2.Name)
}

// int32 declare = 6;
inline void UGCGraphDataV2::clear_declare() {
  _impl_.declare_ = 0;
}
inline int32_t UGCGraphDataV2::_internal_declare() const {
  return _impl_.declare_;
}
inline int32_t UGCGraphDataV2::declare() const {
  // @@protoc_insertion_point(field_get:message.UGCGraphDataV2.declare)
  return _internal_declare();
}
inline void UGCGraphDataV2::_internal_set_declare(int32_t value) {
  
  _impl_.declare_ = value;
}
inline void UGCGraphDataV2::set_declare(int32_t value) {
  _internal_set_declare(value);
  // @@protoc_insertion_point(field_set:message.UGCGraphDataV2.declare)
}

// -------------------------------------------------------------------

// UGCCustomReplicationDataItemInstanceV2

// int32 PropID = 1;
inline void UGCCustomReplicationDataItemInstanceV2::clear_propid() {
  _impl_.propid_ = 0;
}
inline int32_t UGCCustomReplicationDataItemInstanceV2::_internal_propid() const {
  return _impl_.propid_;
}
inline int32_t UGCCustomReplicationDataItemInstanceV2::propid() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemInstanceV2.PropID)
  return _internal_propid();
}
inline void UGCCustomReplicationDataItemInstanceV2::_internal_set_propid(int32_t value) {
  
  _impl_.propid_ = value;
}
inline void UGCCustomReplicationDataItemInstanceV2::set_propid(int32_t value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataItemInstanceV2.PropID)
}

// .message.UGCVarValueDataV2 Value = 2;
inline bool UGCCustomReplicationDataItemInstanceV2::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool UGCCustomReplicationDataItemInstanceV2::has_value() const {
  return _internal_has_value();
}
inline void UGCCustomReplicationDataItemInstanceV2::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::message::UGCVarValueDataV2& UGCCustomReplicationDataItemInstanceV2::_internal_value() const {
  const ::message::UGCVarValueDataV2* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCVarValueDataV2&>(
      ::message::_UGCVarValueDataV2_default_instance_);
}
inline const ::message::UGCVarValueDataV2& UGCCustomReplicationDataItemInstanceV2::value() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemInstanceV2.Value)
  return _internal_value();
}
inline void UGCCustomReplicationDataItemInstanceV2::unsafe_arena_set_allocated_value(
    ::message::UGCVarValueDataV2* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCCustomReplicationDataItemInstanceV2.Value)
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemInstanceV2::release_value() {
  
  ::message::UGCVarValueDataV2* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemInstanceV2::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataItemInstanceV2.Value)
  
  ::message::UGCVarValueDataV2* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemInstanceV2::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCVarValueDataV2>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemInstanceV2::mutable_value() {
  ::message::UGCVarValueDataV2* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataItemInstanceV2.Value)
  return _msg;
}
inline void UGCCustomReplicationDataItemInstanceV2::set_allocated_value(::message::UGCVarValueDataV2* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataItemInstanceV2.Value)
}

// -------------------------------------------------------------------

// UGCLogicEntityDataV3

// string ID = 1;
inline void UGCLogicEntityDataV3::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCLogicEntityDataV3::id() const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataV3.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCLogicEntityDataV3::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataV3.ID)
}
inline std::string* UGCLogicEntityDataV3::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataV3.ID)
  return _s;
}
inline const std::string& UGCLogicEntityDataV3::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCLogicEntityDataV3::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataV3::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataV3::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCLogicEntityDataV3.ID)
  return _impl_.id_.Release();
}
inline void UGCLogicEntityDataV3::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCLogicEntityDataV3.ID)
}

// repeated int32 ComponentIDs = 2;
inline int UGCLogicEntityDataV3::_internal_componentids_size() const {
  return _impl_.componentids_.size();
}
inline int UGCLogicEntityDataV3::componentids_size() const {
  return _internal_componentids_size();
}
inline void UGCLogicEntityDataV3::clear_componentids() {
  _impl_.componentids_.Clear();
}
inline int32_t UGCLogicEntityDataV3::_internal_componentids(int index) const {
  return _impl_.componentids_.Get(index);
}
inline int32_t UGCLogicEntityDataV3::componentids(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataV3.ComponentIDs)
  return _internal_componentids(index);
}
inline void UGCLogicEntityDataV3::set_componentids(int index, int32_t value) {
  _impl_.componentids_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataV3.ComponentIDs)
}
inline void UGCLogicEntityDataV3::_internal_add_componentids(int32_t value) {
  _impl_.componentids_.Add(value);
}
inline void UGCLogicEntityDataV3::add_componentids(int32_t value) {
  _internal_add_componentids(value);
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataV3.ComponentIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCLogicEntityDataV3::_internal_componentids() const {
  return _impl_.componentids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCLogicEntityDataV3::componentids() const {
  // @@protoc_insertion_point(field_list:message.UGCLogicEntityDataV3.ComponentIDs)
  return _internal_componentids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCLogicEntityDataV3::_internal_mutable_componentids() {
  return &_impl_.componentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCLogicEntityDataV3::mutable_componentids() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLogicEntityDataV3.ComponentIDs)
  return _internal_mutable_componentids();
}

// repeated string GraphIDs = 3;
inline int UGCLogicEntityDataV3::_internal_graphids_size() const {
  return _impl_.graphids_.size();
}
inline int UGCLogicEntityDataV3::graphids_size() const {
  return _internal_graphids_size();
}
inline void UGCLogicEntityDataV3::clear_graphids() {
  _impl_.graphids_.Clear();
}
inline std::string* UGCLogicEntityDataV3::add_graphids() {
  std::string* _s = _internal_add_graphids();
  // @@protoc_insertion_point(field_add_mutable:message.UGCLogicEntityDataV3.GraphIDs)
  return _s;
}
inline const std::string& UGCLogicEntityDataV3::_internal_graphids(int index) const {
  return _impl_.graphids_.Get(index);
}
inline const std::string& UGCLogicEntityDataV3::graphids(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataV3.GraphIDs)
  return _internal_graphids(index);
}
inline std::string* UGCLogicEntityDataV3::mutable_graphids(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataV3.GraphIDs)
  return _impl_.graphids_.Mutable(index);
}
inline void UGCLogicEntityDataV3::set_graphids(int index, const std::string& value) {
  _impl_.graphids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataV3.GraphIDs)
}
inline void UGCLogicEntityDataV3::set_graphids(int index, std::string&& value) {
  _impl_.graphids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataV3.GraphIDs)
}
inline void UGCLogicEntityDataV3::set_graphids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.graphids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCLogicEntityDataV3.GraphIDs)
}
inline void UGCLogicEntityDataV3::set_graphids(int index, const char* value, size_t size) {
  _impl_.graphids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCLogicEntityDataV3.GraphIDs)
}
inline std::string* UGCLogicEntityDataV3::_internal_add_graphids() {
  return _impl_.graphids_.Add();
}
inline void UGCLogicEntityDataV3::add_graphids(const std::string& value) {
  _impl_.graphids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataV3.GraphIDs)
}
inline void UGCLogicEntityDataV3::add_graphids(std::string&& value) {
  _impl_.graphids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataV3.GraphIDs)
}
inline void UGCLogicEntityDataV3::add_graphids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.graphids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCLogicEntityDataV3.GraphIDs)
}
inline void UGCLogicEntityDataV3::add_graphids(const char* value, size_t size) {
  _impl_.graphids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCLogicEntityDataV3.GraphIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCLogicEntityDataV3::graphids() const {
  // @@protoc_insertion_point(field_list:message.UGCLogicEntityDataV3.GraphIDs)
  return _impl_.graphids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCLogicEntityDataV3::mutable_graphids() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLogicEntityDataV3.GraphIDs)
  return &_impl_.graphids_;
}

// repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
inline int UGCLogicEntityDataV3::_internal_repdataitem_size() const {
  return _impl_.repdataitem_.size();
}
inline int UGCLogicEntityDataV3::repdataitem_size() const {
  return _internal_repdataitem_size();
}
inline void UGCLogicEntityDataV3::clear_repdataitem() {
  _impl_.repdataitem_.Clear();
}
inline ::message::UGCCustomReplicationDataItemInstanceV2* UGCLogicEntityDataV3::mutable_repdataitem(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataV3.RepDataItem)
  return _impl_.repdataitem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >*
UGCLogicEntityDataV3::mutable_repdataitem() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLogicEntityDataV3.RepDataItem)
  return &_impl_.repdataitem_;
}
inline const ::message::UGCCustomReplicationDataItemInstanceV2& UGCLogicEntityDataV3::_internal_repdataitem(int index) const {
  return _impl_.repdataitem_.Get(index);
}
inline const ::message::UGCCustomReplicationDataItemInstanceV2& UGCLogicEntityDataV3::repdataitem(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataV3.RepDataItem)
  return _internal_repdataitem(index);
}
inline ::message::UGCCustomReplicationDataItemInstanceV2* UGCLogicEntityDataV3::_internal_add_repdataitem() {
  return _impl_.repdataitem_.Add();
}
inline ::message::UGCCustomReplicationDataItemInstanceV2* UGCLogicEntityDataV3::add_repdataitem() {
  ::message::UGCCustomReplicationDataItemInstanceV2* _add = _internal_add_repdataitem();
  // @@protoc_insertion_point(field_add:message.UGCLogicEntityDataV3.RepDataItem)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemInstanceV2 >&
UGCLogicEntityDataV3::repdataitem() const {
  // @@protoc_insertion_point(field_list:message.UGCLogicEntityDataV3.RepDataItem)
  return _impl_.repdataitem_;
}

// string RefPrefabID = 5;
inline void UGCLogicEntityDataV3::clear_refprefabid() {
  _impl_.refprefabid_.ClearToEmpty();
}
inline const std::string& UGCLogicEntityDataV3::refprefabid() const {
  // @@protoc_insertion_point(field_get:message.UGCLogicEntityDataV3.RefPrefabID)
  return _internal_refprefabid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCLogicEntityDataV3::set_refprefabid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.refprefabid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCLogicEntityDataV3.RefPrefabID)
}
inline std::string* UGCLogicEntityDataV3::mutable_refprefabid() {
  std::string* _s = _internal_mutable_refprefabid();
  // @@protoc_insertion_point(field_mutable:message.UGCLogicEntityDataV3.RefPrefabID)
  return _s;
}
inline const std::string& UGCLogicEntityDataV3::_internal_refprefabid() const {
  return _impl_.refprefabid_.Get();
}
inline void UGCLogicEntityDataV3::_internal_set_refprefabid(const std::string& value) {
  
  _impl_.refprefabid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataV3::_internal_mutable_refprefabid() {
  
  return _impl_.refprefabid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCLogicEntityDataV3::release_refprefabid() {
  // @@protoc_insertion_point(field_release:message.UGCLogicEntityDataV3.RefPrefabID)
  return _impl_.refprefabid_.Release();
}
inline void UGCLogicEntityDataV3::set_allocated_refprefabid(std::string* refprefabid) {
  if (refprefabid != nullptr) {
    
  } else {
    
  }
  _impl_.refprefabid_.SetAllocated(refprefabid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.refprefabid_.IsDefault()) {
    _impl_.refprefabid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCLogicEntityDataV3.RefPrefabID)
}

// -------------------------------------------------------------------

// UGCCustomReplicationDataItemV2

// string Name = 1;
inline void UGCCustomReplicationDataItemV2::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCCustomReplicationDataItemV2::name() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemV2.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCCustomReplicationDataItemV2::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataItemV2.Name)
}
inline std::string* UGCCustomReplicationDataItemV2::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataItemV2.Name)
  return _s;
}
inline const std::string& UGCCustomReplicationDataItemV2::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCCustomReplicationDataItemV2::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataItemV2::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCCustomReplicationDataItemV2::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataItemV2.Name)
  return _impl_.name_.Release();
}
inline void UGCCustomReplicationDataItemV2::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataItemV2.Name)
}

// int32 TypeID = 2;
inline void UGCCustomReplicationDataItemV2::clear_typeid_() {
  _impl_.typeid__ = 0;
}
inline int32_t UGCCustomReplicationDataItemV2::_internal_typeid_() const {
  return _impl_.typeid__;
}
inline int32_t UGCCustomReplicationDataItemV2::typeid_() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemV2.TypeID)
  return _internal_typeid_();
}
inline void UGCCustomReplicationDataItemV2::_internal_set_typeid_(int32_t value) {
  
  _impl_.typeid__ = value;
}
inline void UGCCustomReplicationDataItemV2::set_typeid_(int32_t value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataItemV2.TypeID)
}

// .message.UGCVarValueDataV2 Value = 3;
inline bool UGCCustomReplicationDataItemV2::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool UGCCustomReplicationDataItemV2::has_value() const {
  return _internal_has_value();
}
inline void UGCCustomReplicationDataItemV2::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::message::UGCVarValueDataV2& UGCCustomReplicationDataItemV2::_internal_value() const {
  const ::message::UGCVarValueDataV2* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCVarValueDataV2&>(
      ::message::_UGCVarValueDataV2_default_instance_);
}
inline const ::message::UGCVarValueDataV2& UGCCustomReplicationDataItemV2::value() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemV2.Value)
  return _internal_value();
}
inline void UGCCustomReplicationDataItemV2::unsafe_arena_set_allocated_value(
    ::message::UGCVarValueDataV2* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCCustomReplicationDataItemV2.Value)
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemV2::release_value() {
  
  ::message::UGCVarValueDataV2* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemV2::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:message.UGCCustomReplicationDataItemV2.Value)
  
  ::message::UGCVarValueDataV2* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemV2::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCVarValueDataV2>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::message::UGCVarValueDataV2* UGCCustomReplicationDataItemV2::mutable_value() {
  ::message::UGCVarValueDataV2* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataItemV2.Value)
  return _msg;
}
inline void UGCCustomReplicationDataItemV2::set_allocated_value(::message::UGCVarValueDataV2* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomReplicationDataItemV2.Value)
}

// int32 Index = 4;
inline void UGCCustomReplicationDataItemV2::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t UGCCustomReplicationDataItemV2::_internal_index() const {
  return _impl_.index_;
}
inline int32_t UGCCustomReplicationDataItemV2::index() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemV2.Index)
  return _internal_index();
}
inline void UGCCustomReplicationDataItemV2::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void UGCCustomReplicationDataItemV2::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataItemV2.Index)
}

// bool OnlyServer = 5;
inline void UGCCustomReplicationDataItemV2::clear_onlyserver() {
  _impl_.onlyserver_ = false;
}
inline bool UGCCustomReplicationDataItemV2::_internal_onlyserver() const {
  return _impl_.onlyserver_;
}
inline bool UGCCustomReplicationDataItemV2::onlyserver() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataItemV2.OnlyServer)
  return _internal_onlyserver();
}
inline void UGCCustomReplicationDataItemV2::_internal_set_onlyserver(bool value) {
  
  _impl_.onlyserver_ = value;
}
inline void UGCCustomReplicationDataItemV2::set_onlyserver(bool value) {
  _internal_set_onlyserver(value);
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataItemV2.OnlyServer)
}

// -------------------------------------------------------------------

// UGCCustomReplicationDataV2

// int32 ComponentTypeID = 1;
inline void UGCCustomReplicationDataV2::clear_componenttypeid() {
  _impl_.componenttypeid_ = 0;
}
inline int32_t UGCCustomReplicationDataV2::_internal_componenttypeid() const {
  return _impl_.componenttypeid_;
}
inline int32_t UGCCustomReplicationDataV2::componenttypeid() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataV2.ComponentTypeID)
  return _internal_componenttypeid();
}
inline void UGCCustomReplicationDataV2::_internal_set_componenttypeid(int32_t value) {
  
  _impl_.componenttypeid_ = value;
}
inline void UGCCustomReplicationDataV2::set_componenttypeid(int32_t value) {
  _internal_set_componenttypeid(value);
  // @@protoc_insertion_point(field_set:message.UGCCustomReplicationDataV2.ComponentTypeID)
}

// repeated .message.UGCCustomReplicationDataItemV2 ItemData = 2;
inline int UGCCustomReplicationDataV2::_internal_itemdata_size() const {
  return _impl_.itemdata_.size();
}
inline int UGCCustomReplicationDataV2::itemdata_size() const {
  return _internal_itemdata_size();
}
inline void UGCCustomReplicationDataV2::clear_itemdata() {
  _impl_.itemdata_.Clear();
}
inline ::message::UGCCustomReplicationDataItemV2* UGCCustomReplicationDataV2::mutable_itemdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCCustomReplicationDataV2.ItemData)
  return _impl_.itemdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemV2 >*
UGCCustomReplicationDataV2::mutable_itemdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCCustomReplicationDataV2.ItemData)
  return &_impl_.itemdata_;
}
inline const ::message::UGCCustomReplicationDataItemV2& UGCCustomReplicationDataV2::_internal_itemdata(int index) const {
  return _impl_.itemdata_.Get(index);
}
inline const ::message::UGCCustomReplicationDataItemV2& UGCCustomReplicationDataV2::itemdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCCustomReplicationDataV2.ItemData)
  return _internal_itemdata(index);
}
inline ::message::UGCCustomReplicationDataItemV2* UGCCustomReplicationDataV2::_internal_add_itemdata() {
  return _impl_.itemdata_.Add();
}
inline ::message::UGCCustomReplicationDataItemV2* UGCCustomReplicationDataV2::add_itemdata() {
  ::message::UGCCustomReplicationDataItemV2* _add = _internal_add_itemdata();
  // @@protoc_insertion_point(field_add:message.UGCCustomReplicationDataV2.ItemData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataItemV2 >&
UGCCustomReplicationDataV2::itemdata() const {
  // @@protoc_insertion_point(field_list:message.UGCCustomReplicationDataV2.ItemData)
  return _impl_.itemdata_;
}

// -------------------------------------------------------------------

// UGCInternalLibrary

// repeated .message.UGCGraphDataV2 GraphData = 1;
inline int UGCInternalLibrary::_internal_graphdata_size() const {
  return _impl_.graphdata_.size();
}
inline int UGCInternalLibrary::graphdata_size() const {
  return _internal_graphdata_size();
}
inline void UGCInternalLibrary::clear_graphdata() {
  _impl_.graphdata_.Clear();
}
inline ::message::UGCGraphDataV2* UGCInternalLibrary::mutable_graphdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCInternalLibrary.GraphData)
  return _impl_.graphdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >*
UGCInternalLibrary::mutable_graphdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCInternalLibrary.GraphData)
  return &_impl_.graphdata_;
}
inline const ::message::UGCGraphDataV2& UGCInternalLibrary::_internal_graphdata(int index) const {
  return _impl_.graphdata_.Get(index);
}
inline const ::message::UGCGraphDataV2& UGCInternalLibrary::graphdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCInternalLibrary.GraphData)
  return _internal_graphdata(index);
}
inline ::message::UGCGraphDataV2* UGCInternalLibrary::_internal_add_graphdata() {
  return _impl_.graphdata_.Add();
}
inline ::message::UGCGraphDataV2* UGCInternalLibrary::add_graphdata() {
  ::message::UGCGraphDataV2* _add = _internal_add_graphdata();
  // @@protoc_insertion_point(field_add:message.UGCInternalLibrary.GraphData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >&
UGCInternalLibrary::graphdata() const {
  // @@protoc_insertion_point(field_list:message.UGCInternalLibrary.GraphData)
  return _impl_.graphdata_;
}

// repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 2;
inline int UGCInternalLibrary::_internal_logicentitydatas_size() const {
  return _impl_.logicentitydatas_.size();
}
inline int UGCInternalLibrary::logicentitydatas_size() const {
  return _internal_logicentitydatas_size();
}
inline void UGCInternalLibrary::clear_logicentitydatas() {
  _impl_.logicentitydatas_.Clear();
}
inline ::message::UGCLogicEntityDataV3* UGCInternalLibrary::mutable_logicentitydatas(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCInternalLibrary.LogicEntityDatas)
  return _impl_.logicentitydatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 >*
UGCInternalLibrary::mutable_logicentitydatas() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCInternalLibrary.LogicEntityDatas)
  return &_impl_.logicentitydatas_;
}
inline const ::message::UGCLogicEntityDataV3& UGCInternalLibrary::_internal_logicentitydatas(int index) const {
  return _impl_.logicentitydatas_.Get(index);
}
inline const ::message::UGCLogicEntityDataV3& UGCInternalLibrary::logicentitydatas(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCInternalLibrary.LogicEntityDatas)
  return _internal_logicentitydatas(index);
}
inline ::message::UGCLogicEntityDataV3* UGCInternalLibrary::_internal_add_logicentitydatas() {
  return _impl_.logicentitydatas_.Add();
}
inline ::message::UGCLogicEntityDataV3* UGCInternalLibrary::add_logicentitydatas() {
  ::message::UGCLogicEntityDataV3* _add = _internal_add_logicentitydatas();
  // @@protoc_insertion_point(field_add:message.UGCInternalLibrary.LogicEntityDatas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 >&
UGCInternalLibrary::logicentitydatas() const {
  // @@protoc_insertion_point(field_list:message.UGCInternalLibrary.LogicEntityDatas)
  return _impl_.logicentitydatas_;
}

// -------------------------------------------------------------------

// UGCWorkflowData

// repeated .message.UGCPhaseData PhaseData = 1;
inline int UGCWorkflowData::_internal_phasedata_size() const {
  return _impl_.phasedata_.size();
}
inline int UGCWorkflowData::phasedata_size() const {
  return _internal_phasedata_size();
}
inline void UGCWorkflowData::clear_phasedata() {
  _impl_.phasedata_.Clear();
}
inline ::message::UGCPhaseData* UGCWorkflowData::mutable_phasedata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCWorkflowData.PhaseData)
  return _impl_.phasedata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData >*
UGCWorkflowData::mutable_phasedata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCWorkflowData.PhaseData)
  return &_impl_.phasedata_;
}
inline const ::message::UGCPhaseData& UGCWorkflowData::_internal_phasedata(int index) const {
  return _impl_.phasedata_.Get(index);
}
inline const ::message::UGCPhaseData& UGCWorkflowData::phasedata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCWorkflowData.PhaseData)
  return _internal_phasedata(index);
}
inline ::message::UGCPhaseData* UGCWorkflowData::_internal_add_phasedata() {
  return _impl_.phasedata_.Add();
}
inline ::message::UGCPhaseData* UGCWorkflowData::add_phasedata() {
  ::message::UGCPhaseData* _add = _internal_add_phasedata();
  // @@protoc_insertion_point(field_add:message.UGCWorkflowData.PhaseData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPhaseData >&
UGCWorkflowData::phasedata() const {
  // @@protoc_insertion_point(field_list:message.UGCWorkflowData.PhaseData)
  return _impl_.phasedata_;
}

// repeated .message.UGCRoundData RoundData = 2;
inline int UGCWorkflowData::_internal_rounddata_size() const {
  return _impl_.rounddata_.size();
}
inline int UGCWorkflowData::rounddata_size() const {
  return _internal_rounddata_size();
}
inline void UGCWorkflowData::clear_rounddata() {
  _impl_.rounddata_.Clear();
}
inline ::message::UGCRoundData* UGCWorkflowData::mutable_rounddata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCWorkflowData.RoundData)
  return _impl_.rounddata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRoundData >*
UGCWorkflowData::mutable_rounddata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCWorkflowData.RoundData)
  return &_impl_.rounddata_;
}
inline const ::message::UGCRoundData& UGCWorkflowData::_internal_rounddata(int index) const {
  return _impl_.rounddata_.Get(index);
}
inline const ::message::UGCRoundData& UGCWorkflowData::rounddata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCWorkflowData.RoundData)
  return _internal_rounddata(index);
}
inline ::message::UGCRoundData* UGCWorkflowData::_internal_add_rounddata() {
  return _impl_.rounddata_.Add();
}
inline ::message::UGCRoundData* UGCWorkflowData::add_rounddata() {
  ::message::UGCRoundData* _add = _internal_add_rounddata();
  // @@protoc_insertion_point(field_add:message.UGCWorkflowData.RoundData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCRoundData >&
UGCWorkflowData::rounddata() const {
  // @@protoc_insertion_point(field_list:message.UGCWorkflowData.RoundData)
  return _impl_.rounddata_;
}

// .message.UGCWorkflowSequence WorkflowSequence = 3;
inline bool UGCWorkflowData::_internal_has_workflowsequence() const {
  return this != internal_default_instance() && _impl_.workflowsequence_ != nullptr;
}
inline bool UGCWorkflowData::has_workflowsequence() const {
  return _internal_has_workflowsequence();
}
inline void UGCWorkflowData::clear_workflowsequence() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflowsequence_ != nullptr) {
    delete _impl_.workflowsequence_;
  }
  _impl_.workflowsequence_ = nullptr;
}
inline const ::message::UGCWorkflowSequence& UGCWorkflowData::_internal_workflowsequence() const {
  const ::message::UGCWorkflowSequence* p = _impl_.workflowsequence_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCWorkflowSequence&>(
      ::message::_UGCWorkflowSequence_default_instance_);
}
inline const ::message::UGCWorkflowSequence& UGCWorkflowData::workflowsequence() const {
  // @@protoc_insertion_point(field_get:message.UGCWorkflowData.WorkflowSequence)
  return _internal_workflowsequence();
}
inline void UGCWorkflowData::unsafe_arena_set_allocated_workflowsequence(
    ::message::UGCWorkflowSequence* workflowsequence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workflowsequence_);
  }
  _impl_.workflowsequence_ = workflowsequence;
  if (workflowsequence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCWorkflowData.WorkflowSequence)
}
inline ::message::UGCWorkflowSequence* UGCWorkflowData::release_workflowsequence() {
  
  ::message::UGCWorkflowSequence* temp = _impl_.workflowsequence_;
  _impl_.workflowsequence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCWorkflowSequence* UGCWorkflowData::unsafe_arena_release_workflowsequence() {
  // @@protoc_insertion_point(field_release:message.UGCWorkflowData.WorkflowSequence)
  
  ::message::UGCWorkflowSequence* temp = _impl_.workflowsequence_;
  _impl_.workflowsequence_ = nullptr;
  return temp;
}
inline ::message::UGCWorkflowSequence* UGCWorkflowData::_internal_mutable_workflowsequence() {
  
  if (_impl_.workflowsequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCWorkflowSequence>(GetArenaForAllocation());
    _impl_.workflowsequence_ = p;
  }
  return _impl_.workflowsequence_;
}
inline ::message::UGCWorkflowSequence* UGCWorkflowData::mutable_workflowsequence() {
  ::message::UGCWorkflowSequence* _msg = _internal_mutable_workflowsequence();
  // @@protoc_insertion_point(field_mutable:message.UGCWorkflowData.WorkflowSequence)
  return _msg;
}
inline void UGCWorkflowData::set_allocated_workflowsequence(::message::UGCWorkflowSequence* workflowsequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.workflowsequence_;
  }
  if (workflowsequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(workflowsequence);
    if (message_arena != submessage_arena) {
      workflowsequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflowsequence, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.workflowsequence_ = workflowsequence;
  // @@protoc_insertion_point(field_set_allocated:message.UGCWorkflowData.WorkflowSequence)
}

// -------------------------------------------------------------------

// UGCLocItem

// .message.EUGCLocLanguage Lang = 1;
inline void UGCLocItem::clear_lang() {
  _impl_.lang_ = 0;
}
inline ::message::EUGCLocLanguage UGCLocItem::_internal_lang() const {
  return static_cast< ::message::EUGCLocLanguage >(_impl_.lang_);
}
inline ::message::EUGCLocLanguage UGCLocItem::lang() const {
  // @@protoc_insertion_point(field_get:message.UGCLocItem.Lang)
  return _internal_lang();
}
inline void UGCLocItem::_internal_set_lang(::message::EUGCLocLanguage value) {
  
  _impl_.lang_ = value;
}
inline void UGCLocItem::set_lang(::message::EUGCLocLanguage value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:message.UGCLocItem.Lang)
}

// string Translation = 2;
inline void UGCLocItem::clear_translation() {
  _impl_.translation_.ClearToEmpty();
}
inline const std::string& UGCLocItem::translation() const {
  // @@protoc_insertion_point(field_get:message.UGCLocItem.Translation)
  return _internal_translation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCLocItem::set_translation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.translation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCLocItem.Translation)
}
inline std::string* UGCLocItem::mutable_translation() {
  std::string* _s = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:message.UGCLocItem.Translation)
  return _s;
}
inline const std::string& UGCLocItem::_internal_translation() const {
  return _impl_.translation_.Get();
}
inline void UGCLocItem::_internal_set_translation(const std::string& value) {
  
  _impl_.translation_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCLocItem::_internal_mutable_translation() {
  
  return _impl_.translation_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCLocItem::release_translation() {
  // @@protoc_insertion_point(field_release:message.UGCLocItem.Translation)
  return _impl_.translation_.Release();
}
inline void UGCLocItem::set_allocated_translation(std::string* translation) {
  if (translation != nullptr) {
    
  } else {
    
  }
  _impl_.translation_.SetAllocated(translation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.translation_.IsDefault()) {
    _impl_.translation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCLocItem.Translation)
}

// -------------------------------------------------------------------

// UGCLocKeyData

// string Key = 1;
inline void UGCLocKeyData::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& UGCLocKeyData::key() const {
  // @@protoc_insertion_point(field_get:message.UGCLocKeyData.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCLocKeyData::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCLocKeyData.Key)
}
inline std::string* UGCLocKeyData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:message.UGCLocKeyData.Key)
  return _s;
}
inline const std::string& UGCLocKeyData::_internal_key() const {
  return _impl_.key_.Get();
}
inline void UGCLocKeyData::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCLocKeyData::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCLocKeyData::release_key() {
  // @@protoc_insertion_point(field_release:message.UGCLocKeyData.Key)
  return _impl_.key_.Release();
}
inline void UGCLocKeyData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCLocKeyData.Key)
}

// repeated .message.UGCLocItem LocList = 2;
inline int UGCLocKeyData::_internal_loclist_size() const {
  return _impl_.loclist_.size();
}
inline int UGCLocKeyData::loclist_size() const {
  return _internal_loclist_size();
}
inline void UGCLocKeyData::clear_loclist() {
  _impl_.loclist_.Clear();
}
inline ::message::UGCLocItem* UGCLocKeyData::mutable_loclist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLocKeyData.LocList)
  return _impl_.loclist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocItem >*
UGCLocKeyData::mutable_loclist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLocKeyData.LocList)
  return &_impl_.loclist_;
}
inline const ::message::UGCLocItem& UGCLocKeyData::_internal_loclist(int index) const {
  return _impl_.loclist_.Get(index);
}
inline const ::message::UGCLocItem& UGCLocKeyData::loclist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLocKeyData.LocList)
  return _internal_loclist(index);
}
inline ::message::UGCLocItem* UGCLocKeyData::_internal_add_loclist() {
  return _impl_.loclist_.Add();
}
inline ::message::UGCLocItem* UGCLocKeyData::add_loclist() {
  ::message::UGCLocItem* _add = _internal_add_loclist();
  // @@protoc_insertion_point(field_add:message.UGCLocKeyData.LocList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocItem >&
UGCLocKeyData::loclist() const {
  // @@protoc_insertion_point(field_list:message.UGCLocKeyData.LocList)
  return _impl_.loclist_;
}

// -------------------------------------------------------------------

// UGCLocData

// .message.EUGCLocLanguage DefaultLang = 1;
inline void UGCLocData::clear_defaultlang() {
  _impl_.defaultlang_ = 0;
}
inline ::message::EUGCLocLanguage UGCLocData::_internal_defaultlang() const {
  return static_cast< ::message::EUGCLocLanguage >(_impl_.defaultlang_);
}
inline ::message::EUGCLocLanguage UGCLocData::defaultlang() const {
  // @@protoc_insertion_point(field_get:message.UGCLocData.DefaultLang)
  return _internal_defaultlang();
}
inline void UGCLocData::_internal_set_defaultlang(::message::EUGCLocLanguage value) {
  
  _impl_.defaultlang_ = value;
}
inline void UGCLocData::set_defaultlang(::message::EUGCLocLanguage value) {
  _internal_set_defaultlang(value);
  // @@protoc_insertion_point(field_set:message.UGCLocData.DefaultLang)
}

// repeated .message.UGCLocKeyData KeyList = 2;
inline int UGCLocData::_internal_keylist_size() const {
  return _impl_.keylist_.size();
}
inline int UGCLocData::keylist_size() const {
  return _internal_keylist_size();
}
inline void UGCLocData::clear_keylist() {
  _impl_.keylist_.Clear();
}
inline ::message::UGCLocKeyData* UGCLocData::mutable_keylist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCLocData.KeyList)
  return _impl_.keylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocKeyData >*
UGCLocData::mutable_keylist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCLocData.KeyList)
  return &_impl_.keylist_;
}
inline const ::message::UGCLocKeyData& UGCLocData::_internal_keylist(int index) const {
  return _impl_.keylist_.Get(index);
}
inline const ::message::UGCLocKeyData& UGCLocData::keylist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCLocData.KeyList)
  return _internal_keylist(index);
}
inline ::message::UGCLocKeyData* UGCLocData::_internal_add_keylist() {
  return _impl_.keylist_.Add();
}
inline ::message::UGCLocKeyData* UGCLocData::add_keylist() {
  ::message::UGCLocKeyData* _add = _internal_add_keylist();
  // @@protoc_insertion_point(field_add:message.UGCLocData.KeyList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocKeyData >&
UGCLocData::keylist() const {
  // @@protoc_insertion_point(field_list:message.UGCLocData.KeyList)
  return _impl_.keylist_;
}

// -------------------------------------------------------------------

// UGCPrefabData

// string ID = 1;
inline void UGCPrefabData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCPrefabData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCPrefabData.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCPrefabData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCPrefabData.ID)
}
inline std::string* UGCPrefabData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCPrefabData.ID)
  return _s;
}
inline const std::string& UGCPrefabData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCPrefabData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCPrefabData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCPrefabData::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCPrefabData.ID)
  return _impl_.id_.Release();
}
inline void UGCPrefabData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCPrefabData.ID)
}

// repeated .message.UGCTransformNodeData EntityHierachy = 2;
inline int UGCPrefabData::_internal_entityhierachy_size() const {
  return _impl_.entityhierachy_.size();
}
inline int UGCPrefabData::entityhierachy_size() const {
  return _internal_entityhierachy_size();
}
inline void UGCPrefabData::clear_entityhierachy() {
  _impl_.entityhierachy_.Clear();
}
inline ::message::UGCTransformNodeData* UGCPrefabData::mutable_entityhierachy(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCPrefabData.EntityHierachy)
  return _impl_.entityhierachy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData >*
UGCPrefabData::mutable_entityhierachy() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCPrefabData.EntityHierachy)
  return &_impl_.entityhierachy_;
}
inline const ::message::UGCTransformNodeData& UGCPrefabData::_internal_entityhierachy(int index) const {
  return _impl_.entityhierachy_.Get(index);
}
inline const ::message::UGCTransformNodeData& UGCPrefabData::entityhierachy(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCPrefabData.EntityHierachy)
  return _internal_entityhierachy(index);
}
inline ::message::UGCTransformNodeData* UGCPrefabData::_internal_add_entityhierachy() {
  return _impl_.entityhierachy_.Add();
}
inline ::message::UGCTransformNodeData* UGCPrefabData::add_entityhierachy() {
  ::message::UGCTransformNodeData* _add = _internal_add_entityhierachy();
  // @@protoc_insertion_point(field_add:message.UGCPrefabData.EntityHierachy)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData >&
UGCPrefabData::entityhierachy() const {
  // @@protoc_insertion_point(field_list:message.UGCPrefabData.EntityHierachy)
  return _impl_.entityhierachy_;
}

// -------------------------------------------------------------------

// UGCCustomEventData

// int32 ID = 1;
inline void UGCCustomEventData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t UGCCustomEventData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t UGCCustomEventData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomEventData.ID)
  return _internal_id();
}
inline void UGCCustomEventData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void UGCCustomEventData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:message.UGCCustomEventData.ID)
}

// string Name = 2;
inline void UGCCustomEventData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCCustomEventData::name() const {
  // @@protoc_insertion_point(field_get:message.UGCCustomEventData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCCustomEventData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCCustomEventData.Name)
}
inline std::string* UGCCustomEventData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCCustomEventData.Name)
  return _s;
}
inline const std::string& UGCCustomEventData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCCustomEventData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCCustomEventData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCCustomEventData::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCCustomEventData.Name)
  return _impl_.name_.Release();
}
inline void UGCCustomEventData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCCustomEventData.Name)
}

// -------------------------------------------------------------------

// UGCBTreeData

// string ID = 1;
inline void UGCBTreeData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCBTreeData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCBTreeData.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCBTreeData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCBTreeData.ID)
}
inline std::string* UGCBTreeData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCBTreeData.ID)
  return _s;
}
inline const std::string& UGCBTreeData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCBTreeData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCBTreeData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCBTreeData::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCBTreeData.ID)
  return _impl_.id_.Release();
}
inline void UGCBTreeData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCBTreeData.ID)
}

// bytes Data = 2;
inline void UGCBTreeData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& UGCBTreeData::data() const {
  // @@protoc_insertion_point(field_get:message.UGCBTreeData.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCBTreeData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCBTreeData.Data)
}
inline std::string* UGCBTreeData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:message.UGCBTreeData.Data)
  return _s;
}
inline const std::string& UGCBTreeData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void UGCBTreeData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCBTreeData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCBTreeData::release_data() {
  // @@protoc_insertion_point(field_release:message.UGCBTreeData.Data)
  return _impl_.data_.Release();
}
inline void UGCBTreeData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCBTreeData.Data)
}

// -------------------------------------------------------------------

// UGCGameData

// repeated .message.UGCGraphDataV2 GraphData = 1;
inline int UGCGameData::_internal_graphdata_size() const {
  return _impl_.graphdata_.size();
}
inline int UGCGameData::graphdata_size() const {
  return _internal_graphdata_size();
}
inline void UGCGameData::clear_graphdata() {
  _impl_.graphdata_.Clear();
}
inline ::message::UGCGraphDataV2* UGCGameData::mutable_graphdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.GraphData)
  return _impl_.graphdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >*
UGCGameData::mutable_graphdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameData.GraphData)
  return &_impl_.graphdata_;
}
inline const ::message::UGCGraphDataV2& UGCGameData::_internal_graphdata(int index) const {
  return _impl_.graphdata_.Get(index);
}
inline const ::message::UGCGraphDataV2& UGCGameData::graphdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.GraphData)
  return _internal_graphdata(index);
}
inline ::message::UGCGraphDataV2* UGCGameData::_internal_add_graphdata() {
  return _impl_.graphdata_.Add();
}
inline ::message::UGCGraphDataV2* UGCGameData::add_graphdata() {
  ::message::UGCGraphDataV2* _add = _internal_add_graphdata();
  // @@protoc_insertion_point(field_add:message.UGCGameData.GraphData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCGraphDataV2 >&
UGCGameData::graphdata() const {
  // @@protoc_insertion_point(field_list:message.UGCGameData.GraphData)
  return _impl_.graphdata_;
}

// .message.UGCWorkflowData Workflow = 2;
inline bool UGCGameData::_internal_has_workflow() const {
  return this != internal_default_instance() && _impl_.workflow_ != nullptr;
}
inline bool UGCGameData::has_workflow() const {
  return _internal_has_workflow();
}
inline void UGCGameData::clear_workflow() {
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
}
inline const ::message::UGCWorkflowData& UGCGameData::_internal_workflow() const {
  const ::message::UGCWorkflowData* p = _impl_.workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCWorkflowData&>(
      ::message::_UGCWorkflowData_default_instance_);
}
inline const ::message::UGCWorkflowData& UGCGameData::workflow() const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.Workflow)
  return _internal_workflow();
}
inline void UGCGameData::unsafe_arena_set_allocated_workflow(
    ::message::UGCWorkflowData* workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workflow_);
  }
  _impl_.workflow_ = workflow;
  if (workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCGameData.Workflow)
}
inline ::message::UGCWorkflowData* UGCGameData::release_workflow() {
  
  ::message::UGCWorkflowData* temp = _impl_.workflow_;
  _impl_.workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCWorkflowData* UGCGameData::unsafe_arena_release_workflow() {
  // @@protoc_insertion_point(field_release:message.UGCGameData.Workflow)
  
  ::message::UGCWorkflowData* temp = _impl_.workflow_;
  _impl_.workflow_ = nullptr;
  return temp;
}
inline ::message::UGCWorkflowData* UGCGameData::_internal_mutable_workflow() {
  
  if (_impl_.workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCWorkflowData>(GetArenaForAllocation());
    _impl_.workflow_ = p;
  }
  return _impl_.workflow_;
}
inline ::message::UGCWorkflowData* UGCGameData::mutable_workflow() {
  ::message::UGCWorkflowData* _msg = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.Workflow)
  return _msg;
}
inline void UGCGameData::set_allocated_workflow(::message::UGCWorkflowData* workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.workflow_;
  }
  if (workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(workflow);
    if (message_arena != submessage_arena) {
      workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.workflow_ = workflow;
  // @@protoc_insertion_point(field_set_allocated:message.UGCGameData.Workflow)
}

// repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 3;
inline int UGCGameData::_internal_logicentitydatas_size() const {
  return _impl_.logicentitydatas_.size();
}
inline int UGCGameData::logicentitydatas_size() const {
  return _internal_logicentitydatas_size();
}
inline void UGCGameData::clear_logicentitydatas() {
  _impl_.logicentitydatas_.Clear();
}
inline ::message::UGCLogicEntityDataV3* UGCGameData::mutable_logicentitydatas(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.LogicEntityDatas)
  return _impl_.logicentitydatas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 >*
UGCGameData::mutable_logicentitydatas() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameData.LogicEntityDatas)
  return &_impl_.logicentitydatas_;
}
inline const ::message::UGCLogicEntityDataV3& UGCGameData::_internal_logicentitydatas(int index) const {
  return _impl_.logicentitydatas_.Get(index);
}
inline const ::message::UGCLogicEntityDataV3& UGCGameData::logicentitydatas(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.LogicEntityDatas)
  return _internal_logicentitydatas(index);
}
inline ::message::UGCLogicEntityDataV3* UGCGameData::_internal_add_logicentitydatas() {
  return _impl_.logicentitydatas_.Add();
}
inline ::message::UGCLogicEntityDataV3* UGCGameData::add_logicentitydatas() {
  ::message::UGCLogicEntityDataV3* _add = _internal_add_logicentitydatas();
  // @@protoc_insertion_point(field_add:message.UGCGameData.LogicEntityDatas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataV3 >&
UGCGameData::logicentitydatas() const {
  // @@protoc_insertion_point(field_list:message.UGCGameData.LogicEntityDatas)
  return _impl_.logicentitydatas_;
}

// repeated .message.UGCCustomReplicationDataV2 ComponentRepData = 4;
inline int UGCGameData::_internal_componentrepdata_size() const {
  return _impl_.componentrepdata_.size();
}
inline int UGCGameData::componentrepdata_size() const {
  return _internal_componentrepdata_size();
}
inline void UGCGameData::clear_componentrepdata() {
  _impl_.componentrepdata_.Clear();
}
inline ::message::UGCCustomReplicationDataV2* UGCGameData::mutable_componentrepdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.ComponentRepData)
  return _impl_.componentrepdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 >*
UGCGameData::mutable_componentrepdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameData.ComponentRepData)
  return &_impl_.componentrepdata_;
}
inline const ::message::UGCCustomReplicationDataV2& UGCGameData::_internal_componentrepdata(int index) const {
  return _impl_.componentrepdata_.Get(index);
}
inline const ::message::UGCCustomReplicationDataV2& UGCGameData::componentrepdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.ComponentRepData)
  return _internal_componentrepdata(index);
}
inline ::message::UGCCustomReplicationDataV2* UGCGameData::_internal_add_componentrepdata() {
  return _impl_.componentrepdata_.Add();
}
inline ::message::UGCCustomReplicationDataV2* UGCGameData::add_componentrepdata() {
  ::message::UGCCustomReplicationDataV2* _add = _internal_add_componentrepdata();
  // @@protoc_insertion_point(field_add:message.UGCGameData.ComponentRepData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomReplicationDataV2 >&
UGCGameData::componentrepdata() const {
  // @@protoc_insertion_point(field_list:message.UGCGameData.ComponentRepData)
  return _impl_.componentrepdata_;
}

// .message.UGCHudPrefabDatas HudPrefabData = 5;
inline bool UGCGameData::_internal_has_hudprefabdata() const {
  return this != internal_default_instance() && _impl_.hudprefabdata_ != nullptr;
}
inline bool UGCGameData::has_hudprefabdata() const {
  return _internal_has_hudprefabdata();
}
inline void UGCGameData::clear_hudprefabdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.hudprefabdata_ != nullptr) {
    delete _impl_.hudprefabdata_;
  }
  _impl_.hudprefabdata_ = nullptr;
}
inline const ::message::UGCHudPrefabDatas& UGCGameData::_internal_hudprefabdata() const {
  const ::message::UGCHudPrefabDatas* p = _impl_.hudprefabdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudPrefabDatas&>(
      ::message::_UGCHudPrefabDatas_default_instance_);
}
inline const ::message::UGCHudPrefabDatas& UGCGameData::hudprefabdata() const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.HudPrefabData)
  return _internal_hudprefabdata();
}
inline void UGCGameData::unsafe_arena_set_allocated_hudprefabdata(
    ::message::UGCHudPrefabDatas* hudprefabdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hudprefabdata_);
  }
  _impl_.hudprefabdata_ = hudprefabdata;
  if (hudprefabdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCGameData.HudPrefabData)
}
inline ::message::UGCHudPrefabDatas* UGCGameData::release_hudprefabdata() {
  
  ::message::UGCHudPrefabDatas* temp = _impl_.hudprefabdata_;
  _impl_.hudprefabdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudPrefabDatas* UGCGameData::unsafe_arena_release_hudprefabdata() {
  // @@protoc_insertion_point(field_release:message.UGCGameData.HudPrefabData)
  
  ::message::UGCHudPrefabDatas* temp = _impl_.hudprefabdata_;
  _impl_.hudprefabdata_ = nullptr;
  return temp;
}
inline ::message::UGCHudPrefabDatas* UGCGameData::_internal_mutable_hudprefabdata() {
  
  if (_impl_.hudprefabdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudPrefabDatas>(GetArenaForAllocation());
    _impl_.hudprefabdata_ = p;
  }
  return _impl_.hudprefabdata_;
}
inline ::message::UGCHudPrefabDatas* UGCGameData::mutable_hudprefabdata() {
  ::message::UGCHudPrefabDatas* _msg = _internal_mutable_hudprefabdata();
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.HudPrefabData)
  return _msg;
}
inline void UGCGameData::set_allocated_hudprefabdata(::message::UGCHudPrefabDatas* hudprefabdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hudprefabdata_;
  }
  if (hudprefabdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hudprefabdata);
    if (message_arena != submessage_arena) {
      hudprefabdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hudprefabdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hudprefabdata_ = hudprefabdata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCGameData.HudPrefabData)
}

// .message.UGCTypeTree CustomTypeMap = 6;
inline bool UGCGameData::_internal_has_customtypemap() const {
  return this != internal_default_instance() && _impl_.customtypemap_ != nullptr;
}
inline bool UGCGameData::has_customtypemap() const {
  return _internal_has_customtypemap();
}
inline void UGCGameData::clear_customtypemap() {
  if (GetArenaForAllocation() == nullptr && _impl_.customtypemap_ != nullptr) {
    delete _impl_.customtypemap_;
  }
  _impl_.customtypemap_ = nullptr;
}
inline const ::message::UGCTypeTree& UGCGameData::_internal_customtypemap() const {
  const ::message::UGCTypeTree* p = _impl_.customtypemap_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCTypeTree&>(
      ::message::_UGCTypeTree_default_instance_);
}
inline const ::message::UGCTypeTree& UGCGameData::customtypemap() const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.CustomTypeMap)
  return _internal_customtypemap();
}
inline void UGCGameData::unsafe_arena_set_allocated_customtypemap(
    ::message::UGCTypeTree* customtypemap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customtypemap_);
  }
  _impl_.customtypemap_ = customtypemap;
  if (customtypemap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCGameData.CustomTypeMap)
}
inline ::message::UGCTypeTree* UGCGameData::release_customtypemap() {
  
  ::message::UGCTypeTree* temp = _impl_.customtypemap_;
  _impl_.customtypemap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCTypeTree* UGCGameData::unsafe_arena_release_customtypemap() {
  // @@protoc_insertion_point(field_release:message.UGCGameData.CustomTypeMap)
  
  ::message::UGCTypeTree* temp = _impl_.customtypemap_;
  _impl_.customtypemap_ = nullptr;
  return temp;
}
inline ::message::UGCTypeTree* UGCGameData::_internal_mutable_customtypemap() {
  
  if (_impl_.customtypemap_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCTypeTree>(GetArenaForAllocation());
    _impl_.customtypemap_ = p;
  }
  return _impl_.customtypemap_;
}
inline ::message::UGCTypeTree* UGCGameData::mutable_customtypemap() {
  ::message::UGCTypeTree* _msg = _internal_mutable_customtypemap();
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.CustomTypeMap)
  return _msg;
}
inline void UGCGameData::set_allocated_customtypemap(::message::UGCTypeTree* customtypemap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.customtypemap_;
  }
  if (customtypemap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(customtypemap);
    if (message_arena != submessage_arena) {
      customtypemap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customtypemap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.customtypemap_ = customtypemap;
  // @@protoc_insertion_point(field_set_allocated:message.UGCGameData.CustomTypeMap)
}

// .message.SceneEditModeProtoData ModeSetting = 7;
inline bool UGCGameData::_internal_has_modesetting() const {
  return this != internal_default_instance() && _impl_.modesetting_ != nullptr;
}
inline bool UGCGameData::has_modesetting() const {
  return _internal_has_modesetting();
}
inline void UGCGameData::clear_modesetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.modesetting_ != nullptr) {
    delete _impl_.modesetting_;
  }
  _impl_.modesetting_ = nullptr;
}
inline const ::message::SceneEditModeProtoData& UGCGameData::_internal_modesetting() const {
  const ::message::SceneEditModeProtoData* p = _impl_.modesetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditModeProtoData&>(
      ::message::_SceneEditModeProtoData_default_instance_);
}
inline const ::message::SceneEditModeProtoData& UGCGameData::modesetting() const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.ModeSetting)
  return _internal_modesetting();
}
inline void UGCGameData::unsafe_arena_set_allocated_modesetting(
    ::message::SceneEditModeProtoData* modesetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modesetting_);
  }
  _impl_.modesetting_ = modesetting;
  if (modesetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCGameData.ModeSetting)
}
inline ::message::SceneEditModeProtoData* UGCGameData::release_modesetting() {
  
  ::message::SceneEditModeProtoData* temp = _impl_.modesetting_;
  _impl_.modesetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditModeProtoData* UGCGameData::unsafe_arena_release_modesetting() {
  // @@protoc_insertion_point(field_release:message.UGCGameData.ModeSetting)
  
  ::message::SceneEditModeProtoData* temp = _impl_.modesetting_;
  _impl_.modesetting_ = nullptr;
  return temp;
}
inline ::message::SceneEditModeProtoData* UGCGameData::_internal_mutable_modesetting() {
  
  if (_impl_.modesetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditModeProtoData>(GetArenaForAllocation());
    _impl_.modesetting_ = p;
  }
  return _impl_.modesetting_;
}
inline ::message::SceneEditModeProtoData* UGCGameData::mutable_modesetting() {
  ::message::SceneEditModeProtoData* _msg = _internal_mutable_modesetting();
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.ModeSetting)
  return _msg;
}
inline void UGCGameData::set_allocated_modesetting(::message::SceneEditModeProtoData* modesetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.modesetting_;
  }
  if (modesetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(modesetting);
    if (message_arena != submessage_arena) {
      modesetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modesetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.modesetting_ = modesetting;
  // @@protoc_insertion_point(field_set_allocated:message.UGCGameData.ModeSetting)
}

// .message.UGCAllSceneRuntimeData AllSceneData = 8;
inline bool UGCGameData::_internal_has_allscenedata() const {
  return this != internal_default_instance() && _impl_.allscenedata_ != nullptr;
}
inline bool UGCGameData::has_allscenedata() const {
  return _internal_has_allscenedata();
}
inline void UGCGameData::clear_allscenedata() {
  if (GetArenaForAllocation() == nullptr && _impl_.allscenedata_ != nullptr) {
    delete _impl_.allscenedata_;
  }
  _impl_.allscenedata_ = nullptr;
}
inline const ::message::UGCAllSceneRuntimeData& UGCGameData::_internal_allscenedata() const {
  const ::message::UGCAllSceneRuntimeData* p = _impl_.allscenedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCAllSceneRuntimeData&>(
      ::message::_UGCAllSceneRuntimeData_default_instance_);
}
inline const ::message::UGCAllSceneRuntimeData& UGCGameData::allscenedata() const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.AllSceneData)
  return _internal_allscenedata();
}
inline void UGCGameData::unsafe_arena_set_allocated_allscenedata(
    ::message::UGCAllSceneRuntimeData* allscenedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allscenedata_);
  }
  _impl_.allscenedata_ = allscenedata;
  if (allscenedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCGameData.AllSceneData)
}
inline ::message::UGCAllSceneRuntimeData* UGCGameData::release_allscenedata() {
  
  ::message::UGCAllSceneRuntimeData* temp = _impl_.allscenedata_;
  _impl_.allscenedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCAllSceneRuntimeData* UGCGameData::unsafe_arena_release_allscenedata() {
  // @@protoc_insertion_point(field_release:message.UGCGameData.AllSceneData)
  
  ::message::UGCAllSceneRuntimeData* temp = _impl_.allscenedata_;
  _impl_.allscenedata_ = nullptr;
  return temp;
}
inline ::message::UGCAllSceneRuntimeData* UGCGameData::_internal_mutable_allscenedata() {
  
  if (_impl_.allscenedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCAllSceneRuntimeData>(GetArenaForAllocation());
    _impl_.allscenedata_ = p;
  }
  return _impl_.allscenedata_;
}
inline ::message::UGCAllSceneRuntimeData* UGCGameData::mutable_allscenedata() {
  ::message::UGCAllSceneRuntimeData* _msg = _internal_mutable_allscenedata();
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.AllSceneData)
  return _msg;
}
inline void UGCGameData::set_allocated_allscenedata(::message::UGCAllSceneRuntimeData* allscenedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.allscenedata_;
  }
  if (allscenedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(allscenedata);
    if (message_arena != submessage_arena) {
      allscenedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allscenedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.allscenedata_ = allscenedata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCGameData.AllSceneData)
}

// .message.UGCLocData LocData = 9;
inline bool UGCGameData::_internal_has_locdata() const {
  return this != internal_default_instance() && _impl_.locdata_ != nullptr;
}
inline bool UGCGameData::has_locdata() const {
  return _internal_has_locdata();
}
inline void UGCGameData::clear_locdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.locdata_ != nullptr) {
    delete _impl_.locdata_;
  }
  _impl_.locdata_ = nullptr;
}
inline const ::message::UGCLocData& UGCGameData::_internal_locdata() const {
  const ::message::UGCLocData* p = _impl_.locdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCLocData&>(
      ::message::_UGCLocData_default_instance_);
}
inline const ::message::UGCLocData& UGCGameData::locdata() const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.LocData)
  return _internal_locdata();
}
inline void UGCGameData::unsafe_arena_set_allocated_locdata(
    ::message::UGCLocData* locdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.locdata_);
  }
  _impl_.locdata_ = locdata;
  if (locdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCGameData.LocData)
}
inline ::message::UGCLocData* UGCGameData::release_locdata() {
  
  ::message::UGCLocData* temp = _impl_.locdata_;
  _impl_.locdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCLocData* UGCGameData::unsafe_arena_release_locdata() {
  // @@protoc_insertion_point(field_release:message.UGCGameData.LocData)
  
  ::message::UGCLocData* temp = _impl_.locdata_;
  _impl_.locdata_ = nullptr;
  return temp;
}
inline ::message::UGCLocData* UGCGameData::_internal_mutable_locdata() {
  
  if (_impl_.locdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCLocData>(GetArenaForAllocation());
    _impl_.locdata_ = p;
  }
  return _impl_.locdata_;
}
inline ::message::UGCLocData* UGCGameData::mutable_locdata() {
  ::message::UGCLocData* _msg = _internal_mutable_locdata();
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.LocData)
  return _msg;
}
inline void UGCGameData::set_allocated_locdata(::message::UGCLocData* locdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.locdata_;
  }
  if (locdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(locdata);
    if (message_arena != submessage_arena) {
      locdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.locdata_ = locdata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCGameData.LocData)
}

// .message.UGCResourceData ResourceData = 10;
inline bool UGCGameData::_internal_has_resourcedata() const {
  return this != internal_default_instance() && _impl_.resourcedata_ != nullptr;
}
inline bool UGCGameData::has_resourcedata() const {
  return _internal_has_resourcedata();
}
inline void UGCGameData::clear_resourcedata() {
  if (GetArenaForAllocation() == nullptr && _impl_.resourcedata_ != nullptr) {
    delete _impl_.resourcedata_;
  }
  _impl_.resourcedata_ = nullptr;
}
inline const ::message::UGCResourceData& UGCGameData::_internal_resourcedata() const {
  const ::message::UGCResourceData* p = _impl_.resourcedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCResourceData&>(
      ::message::_UGCResourceData_default_instance_);
}
inline const ::message::UGCResourceData& UGCGameData::resourcedata() const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.ResourceData)
  return _internal_resourcedata();
}
inline void UGCGameData::unsafe_arena_set_allocated_resourcedata(
    ::message::UGCResourceData* resourcedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourcedata_);
  }
  _impl_.resourcedata_ = resourcedata;
  if (resourcedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCGameData.ResourceData)
}
inline ::message::UGCResourceData* UGCGameData::release_resourcedata() {
  
  ::message::UGCResourceData* temp = _impl_.resourcedata_;
  _impl_.resourcedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCResourceData* UGCGameData::unsafe_arena_release_resourcedata() {
  // @@protoc_insertion_point(field_release:message.UGCGameData.ResourceData)
  
  ::message::UGCResourceData* temp = _impl_.resourcedata_;
  _impl_.resourcedata_ = nullptr;
  return temp;
}
inline ::message::UGCResourceData* UGCGameData::_internal_mutable_resourcedata() {
  
  if (_impl_.resourcedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCResourceData>(GetArenaForAllocation());
    _impl_.resourcedata_ = p;
  }
  return _impl_.resourcedata_;
}
inline ::message::UGCResourceData* UGCGameData::mutable_resourcedata() {
  ::message::UGCResourceData* _msg = _internal_mutable_resourcedata();
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.ResourceData)
  return _msg;
}
inline void UGCGameData::set_allocated_resourcedata(::message::UGCResourceData* resourcedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resourcedata_;
  }
  if (resourcedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resourcedata);
    if (message_arena != submessage_arena) {
      resourcedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resourcedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resourcedata_ = resourcedata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCGameData.ResourceData)
}

// repeated .message.UGCPrefabData PrefabData = 11;
inline int UGCGameData::_internal_prefabdata_size() const {
  return _impl_.prefabdata_.size();
}
inline int UGCGameData::prefabdata_size() const {
  return _internal_prefabdata_size();
}
inline void UGCGameData::clear_prefabdata() {
  _impl_.prefabdata_.Clear();
}
inline ::message::UGCPrefabData* UGCGameData::mutable_prefabdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.PrefabData)
  return _impl_.prefabdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPrefabData >*
UGCGameData::mutable_prefabdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameData.PrefabData)
  return &_impl_.prefabdata_;
}
inline const ::message::UGCPrefabData& UGCGameData::_internal_prefabdata(int index) const {
  return _impl_.prefabdata_.Get(index);
}
inline const ::message::UGCPrefabData& UGCGameData::prefabdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.PrefabData)
  return _internal_prefabdata(index);
}
inline ::message::UGCPrefabData* UGCGameData::_internal_add_prefabdata() {
  return _impl_.prefabdata_.Add();
}
inline ::message::UGCPrefabData* UGCGameData::add_prefabdata() {
  ::message::UGCPrefabData* _add = _internal_add_prefabdata();
  // @@protoc_insertion_point(field_add:message.UGCGameData.PrefabData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPrefabData >&
UGCGameData::prefabdata() const {
  // @@protoc_insertion_point(field_list:message.UGCGameData.PrefabData)
  return _impl_.prefabdata_;
}

// repeated .message.UGCCustomEventData CustomEventData = 12;
inline int UGCGameData::_internal_customeventdata_size() const {
  return _impl_.customeventdata_.size();
}
inline int UGCGameData::customeventdata_size() const {
  return _internal_customeventdata_size();
}
inline void UGCGameData::clear_customeventdata() {
  _impl_.customeventdata_.Clear();
}
inline ::message::UGCCustomEventData* UGCGameData::mutable_customeventdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.CustomEventData)
  return _impl_.customeventdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomEventData >*
UGCGameData::mutable_customeventdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameData.CustomEventData)
  return &_impl_.customeventdata_;
}
inline const ::message::UGCCustomEventData& UGCGameData::_internal_customeventdata(int index) const {
  return _impl_.customeventdata_.Get(index);
}
inline const ::message::UGCCustomEventData& UGCGameData::customeventdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.CustomEventData)
  return _internal_customeventdata(index);
}
inline ::message::UGCCustomEventData* UGCGameData::_internal_add_customeventdata() {
  return _impl_.customeventdata_.Add();
}
inline ::message::UGCCustomEventData* UGCGameData::add_customeventdata() {
  ::message::UGCCustomEventData* _add = _internal_add_customeventdata();
  // @@protoc_insertion_point(field_add:message.UGCGameData.CustomEventData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCustomEventData >&
UGCGameData::customeventdata() const {
  // @@protoc_insertion_point(field_list:message.UGCGameData.CustomEventData)
  return _impl_.customeventdata_;
}

// repeated .message.UGCBTreeData BTreeData = 13;
inline int UGCGameData::_internal_btreedata_size() const {
  return _impl_.btreedata_.size();
}
inline int UGCGameData::btreedata_size() const {
  return _internal_btreedata_size();
}
inline void UGCGameData::clear_btreedata() {
  _impl_.btreedata_.Clear();
}
inline ::message::UGCBTreeData* UGCGameData::mutable_btreedata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameData.BTreeData)
  return _impl_.btreedata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCBTreeData >*
UGCGameData::mutable_btreedata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameData.BTreeData)
  return &_impl_.btreedata_;
}
inline const ::message::UGCBTreeData& UGCGameData::_internal_btreedata(int index) const {
  return _impl_.btreedata_.Get(index);
}
inline const ::message::UGCBTreeData& UGCGameData::btreedata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameData.BTreeData)
  return _internal_btreedata(index);
}
inline ::message::UGCBTreeData* UGCGameData::_internal_add_btreedata() {
  return _impl_.btreedata_.Add();
}
inline ::message::UGCBTreeData* UGCGameData::add_btreedata() {
  ::message::UGCBTreeData* _add = _internal_add_btreedata();
  // @@protoc_insertion_point(field_add:message.UGCGameData.BTreeData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCBTreeData >&
UGCGameData::btreedata() const {
  // @@protoc_insertion_point(field_list:message.UGCGameData.BTreeData)
  return _impl_.btreedata_;
}

// -------------------------------------------------------------------

// UGCSubLevelItemRuntimeData

// uint32 static_type_id = 1;
inline void UGCSubLevelItemRuntimeData::clear_static_type_id() {
  _impl_.static_type_id_ = 0u;
}
inline uint32_t UGCSubLevelItemRuntimeData::_internal_static_type_id() const {
  return _impl_.static_type_id_;
}
inline uint32_t UGCSubLevelItemRuntimeData::static_type_id() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.static_type_id)
  return _internal_static_type_id();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_static_type_id(uint32_t value) {
  
  _impl_.static_type_id_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_static_type_id(uint32_t value) {
  _internal_set_static_type_id(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.static_type_id)
}

// float pos_x = 3;
inline void UGCSubLevelItemRuntimeData::clear_pos_x() {
  _impl_.pos_x_ = 0;
}
inline float UGCSubLevelItemRuntimeData::_internal_pos_x() const {
  return _impl_.pos_x_;
}
inline float UGCSubLevelItemRuntimeData::pos_x() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.pos_x)
  return _internal_pos_x();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_pos_x(float value) {
  
  _impl_.pos_x_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.pos_x)
}

// float pos_y = 4;
inline void UGCSubLevelItemRuntimeData::clear_pos_y() {
  _impl_.pos_y_ = 0;
}
inline float UGCSubLevelItemRuntimeData::_internal_pos_y() const {
  return _impl_.pos_y_;
}
inline float UGCSubLevelItemRuntimeData::pos_y() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.pos_y)
  return _internal_pos_y();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_pos_y(float value) {
  
  _impl_.pos_y_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.pos_y)
}

// float pos_z = 5;
inline void UGCSubLevelItemRuntimeData::clear_pos_z() {
  _impl_.pos_z_ = 0;
}
inline float UGCSubLevelItemRuntimeData::_internal_pos_z() const {
  return _impl_.pos_z_;
}
inline float UGCSubLevelItemRuntimeData::pos_z() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.pos_z)
  return _internal_pos_z();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_pos_z(float value) {
  
  _impl_.pos_z_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.pos_z)
}

// float scale_x = 6;
inline void UGCSubLevelItemRuntimeData::clear_scale_x() {
  _impl_.scale_x_ = 0;
}
inline float UGCSubLevelItemRuntimeData::_internal_scale_x() const {
  return _impl_.scale_x_;
}
inline float UGCSubLevelItemRuntimeData::scale_x() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.scale_x)
  return _internal_scale_x();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_scale_x(float value) {
  
  _impl_.scale_x_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_scale_x(float value) {
  _internal_set_scale_x(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.scale_x)
}

// float scale_y = 7;
inline void UGCSubLevelItemRuntimeData::clear_scale_y() {
  _impl_.scale_y_ = 0;
}
inline float UGCSubLevelItemRuntimeData::_internal_scale_y() const {
  return _impl_.scale_y_;
}
inline float UGCSubLevelItemRuntimeData::scale_y() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.scale_y)
  return _internal_scale_y();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_scale_y(float value) {
  
  _impl_.scale_y_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_scale_y(float value) {
  _internal_set_scale_y(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.scale_y)
}

// float scale_z = 8;
inline void UGCSubLevelItemRuntimeData::clear_scale_z() {
  _impl_.scale_z_ = 0;
}
inline float UGCSubLevelItemRuntimeData::_internal_scale_z() const {
  return _impl_.scale_z_;
}
inline float UGCSubLevelItemRuntimeData::scale_z() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.scale_z)
  return _internal_scale_z();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_scale_z(float value) {
  
  _impl_.scale_z_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_scale_z(float value) {
  _internal_set_scale_z(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.scale_z)
}

// float rot_yaw = 9;
inline void UGCSubLevelItemRuntimeData::clear_rot_yaw() {
  _impl_.rot_yaw_ = 0;
}
inline float UGCSubLevelItemRuntimeData::_internal_rot_yaw() const {
  return _impl_.rot_yaw_;
}
inline float UGCSubLevelItemRuntimeData::rot_yaw() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.rot_yaw)
  return _internal_rot_yaw();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_rot_yaw(float value) {
  
  _impl_.rot_yaw_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_rot_yaw(float value) {
  _internal_set_rot_yaw(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.rot_yaw)
}

// float rot_pitch = 10;
inline void UGCSubLevelItemRuntimeData::clear_rot_pitch() {
  _impl_.rot_pitch_ = 0;
}
inline float UGCSubLevelItemRuntimeData::_internal_rot_pitch() const {
  return _impl_.rot_pitch_;
}
inline float UGCSubLevelItemRuntimeData::rot_pitch() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.rot_pitch)
  return _internal_rot_pitch();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_rot_pitch(float value) {
  
  _impl_.rot_pitch_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_rot_pitch(float value) {
  _internal_set_rot_pitch(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.rot_pitch)
}

// float rot_roll = 11;
inline void UGCSubLevelItemRuntimeData::clear_rot_roll() {
  _impl_.rot_roll_ = 0;
}
inline float UGCSubLevelItemRuntimeData::_internal_rot_roll() const {
  return _impl_.rot_roll_;
}
inline float UGCSubLevelItemRuntimeData::rot_roll() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.rot_roll)
  return _internal_rot_roll();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_rot_roll(float value) {
  
  _impl_.rot_roll_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_rot_roll(float value) {
  _internal_set_rot_roll(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.rot_roll)
}

// uint32 extra_base_info_instance_id = 12;
inline void UGCSubLevelItemRuntimeData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t UGCSubLevelItemRuntimeData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t UGCSubLevelItemRuntimeData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.extra_base_info_instance_id)
}

// uint32 levelobject_id_by_tag = 13;
inline void UGCSubLevelItemRuntimeData::clear_levelobject_id_by_tag() {
  _impl_.levelobject_id_by_tag_ = 0u;
}
inline uint32_t UGCSubLevelItemRuntimeData::_internal_levelobject_id_by_tag() const {
  return _impl_.levelobject_id_by_tag_;
}
inline uint32_t UGCSubLevelItemRuntimeData::levelobject_id_by_tag() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.levelobject_id_by_tag)
  return _internal_levelobject_id_by_tag();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_levelobject_id_by_tag(uint32_t value) {
  
  _impl_.levelobject_id_by_tag_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_levelobject_id_by_tag(uint32_t value) {
  _internal_set_levelobject_id_by_tag(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.levelobject_id_by_tag)
}

// string logic_entity_id = 14;
inline void UGCSubLevelItemRuntimeData::clear_logic_entity_id() {
  _impl_.logic_entity_id_.ClearToEmpty();
}
inline const std::string& UGCSubLevelItemRuntimeData::logic_entity_id() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.logic_entity_id)
  return _internal_logic_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCSubLevelItemRuntimeData::set_logic_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logic_entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.logic_entity_id)
}
inline std::string* UGCSubLevelItemRuntimeData::mutable_logic_entity_id() {
  std::string* _s = _internal_mutable_logic_entity_id();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelItemRuntimeData.logic_entity_id)
  return _s;
}
inline const std::string& UGCSubLevelItemRuntimeData::_internal_logic_entity_id() const {
  return _impl_.logic_entity_id_.Get();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_logic_entity_id(const std::string& value) {
  
  _impl_.logic_entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::_internal_mutable_logic_entity_id() {
  
  return _impl_.logic_entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::release_logic_entity_id() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelItemRuntimeData.logic_entity_id)
  return _impl_.logic_entity_id_.Release();
}
inline void UGCSubLevelItemRuntimeData::set_allocated_logic_entity_id(std::string* logic_entity_id) {
  if (logic_entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.logic_entity_id_.SetAllocated(logic_entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logic_entity_id_.IsDefault()) {
    _impl_.logic_entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelItemRuntimeData.logic_entity_id)
}

// string customized_name = 15;
inline void UGCSubLevelItemRuntimeData::clear_customized_name() {
  _impl_.customized_name_.ClearToEmpty();
}
inline const std::string& UGCSubLevelItemRuntimeData::customized_name() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.customized_name)
  return _internal_customized_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCSubLevelItemRuntimeData::set_customized_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.customized_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.customized_name)
}
inline std::string* UGCSubLevelItemRuntimeData::mutable_customized_name() {
  std::string* _s = _internal_mutable_customized_name();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelItemRuntimeData.customized_name)
  return _s;
}
inline const std::string& UGCSubLevelItemRuntimeData::_internal_customized_name() const {
  return _impl_.customized_name_.Get();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_customized_name(const std::string& value) {
  
  _impl_.customized_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::_internal_mutable_customized_name() {
  
  return _impl_.customized_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::release_customized_name() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelItemRuntimeData.customized_name)
  return _impl_.customized_name_.Release();
}
inline void UGCSubLevelItemRuntimeData::set_allocated_customized_name(std::string* customized_name) {
  if (customized_name != nullptr) {
    
  } else {
    
  }
  _impl_.customized_name_.SetAllocated(customized_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.customized_name_.IsDefault()) {
    _impl_.customized_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelItemRuntimeData.customized_name)
}

// uint32 reset_per_round = 16;
inline void UGCSubLevelItemRuntimeData::clear_reset_per_round() {
  _impl_.reset_per_round_ = 0u;
}
inline uint32_t UGCSubLevelItemRuntimeData::_internal_reset_per_round() const {
  return _impl_.reset_per_round_;
}
inline uint32_t UGCSubLevelItemRuntimeData::reset_per_round() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.reset_per_round)
  return _internal_reset_per_round();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_reset_per_round(uint32_t value) {
  
  _impl_.reset_per_round_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_reset_per_round(uint32_t value) {
  _internal_set_reset_per_round(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.reset_per_round)
}

// string obj_color = 17 [deprecated = true];
inline void UGCSubLevelItemRuntimeData::clear_obj_color() {
  _impl_.obj_color_.ClearToEmpty();
}
inline const std::string& UGCSubLevelItemRuntimeData::obj_color() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.obj_color)
  return _internal_obj_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCSubLevelItemRuntimeData::set_obj_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.obj_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.obj_color)
}
inline std::string* UGCSubLevelItemRuntimeData::mutable_obj_color() {
  std::string* _s = _internal_mutable_obj_color();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelItemRuntimeData.obj_color)
  return _s;
}
inline const std::string& UGCSubLevelItemRuntimeData::_internal_obj_color() const {
  return _impl_.obj_color_.Get();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_obj_color(const std::string& value) {
  
  _impl_.obj_color_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::_internal_mutable_obj_color() {
  
  return _impl_.obj_color_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::release_obj_color() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelItemRuntimeData.obj_color)
  return _impl_.obj_color_.Release();
}
inline void UGCSubLevelItemRuntimeData::set_allocated_obj_color(std::string* obj_color) {
  if (obj_color != nullptr) {
    
  } else {
    
  }
  _impl_.obj_color_.SetAllocated(obj_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obj_color_.IsDefault()) {
    _impl_.obj_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelItemRuntimeData.obj_color)
}

// int32 group_id = 18;
inline void UGCSubLevelItemRuntimeData::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t UGCSubLevelItemRuntimeData::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t UGCSubLevelItemRuntimeData::group_id() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.group_id)
  return _internal_group_id();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.group_id)
}

// int32 surColor = 19;
inline void UGCSubLevelItemRuntimeData::clear_surcolor() {
  _impl_.surcolor_ = 0;
}
inline int32_t UGCSubLevelItemRuntimeData::_internal_surcolor() const {
  return _impl_.surcolor_;
}
inline int32_t UGCSubLevelItemRuntimeData::surcolor() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.surColor)
  return _internal_surcolor();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_surcolor(int32_t value) {
  
  _impl_.surcolor_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_surcolor(int32_t value) {
  _internal_set_surcolor(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.surColor)
}

// int32 borderColor = 20;
inline void UGCSubLevelItemRuntimeData::clear_bordercolor() {
  _impl_.bordercolor_ = 0;
}
inline int32_t UGCSubLevelItemRuntimeData::_internal_bordercolor() const {
  return _impl_.bordercolor_;
}
inline int32_t UGCSubLevelItemRuntimeData::bordercolor() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.borderColor)
  return _internal_bordercolor();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_bordercolor(int32_t value) {
  
  _impl_.bordercolor_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_bordercolor(int32_t value) {
  _internal_set_bordercolor(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.borderColor)
}

// string surTex = 21;
inline void UGCSubLevelItemRuntimeData::clear_surtex() {
  _impl_.surtex_.ClearToEmpty();
}
inline const std::string& UGCSubLevelItemRuntimeData::surtex() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.surTex)
  return _internal_surtex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCSubLevelItemRuntimeData::set_surtex(ArgT0&& arg0, ArgT... args) {
 
 _impl_.surtex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.surTex)
}
inline std::string* UGCSubLevelItemRuntimeData::mutable_surtex() {
  std::string* _s = _internal_mutable_surtex();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelItemRuntimeData.surTex)
  return _s;
}
inline const std::string& UGCSubLevelItemRuntimeData::_internal_surtex() const {
  return _impl_.surtex_.Get();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_surtex(const std::string& value) {
  
  _impl_.surtex_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::_internal_mutable_surtex() {
  
  return _impl_.surtex_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::release_surtex() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelItemRuntimeData.surTex)
  return _impl_.surtex_.Release();
}
inline void UGCSubLevelItemRuntimeData::set_allocated_surtex(std::string* surtex) {
  if (surtex != nullptr) {
    
  } else {
    
  }
  _impl_.surtex_.SetAllocated(surtex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.surtex_.IsDefault()) {
    _impl_.surtex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelItemRuntimeData.surTex)
}

// string borTex = 22;
inline void UGCSubLevelItemRuntimeData::clear_bortex() {
  _impl_.bortex_.ClearToEmpty();
}
inline const std::string& UGCSubLevelItemRuntimeData::bortex() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.borTex)
  return _internal_bortex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCSubLevelItemRuntimeData::set_bortex(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bortex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.borTex)
}
inline std::string* UGCSubLevelItemRuntimeData::mutable_bortex() {
  std::string* _s = _internal_mutable_bortex();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelItemRuntimeData.borTex)
  return _s;
}
inline const std::string& UGCSubLevelItemRuntimeData::_internal_bortex() const {
  return _impl_.bortex_.Get();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_bortex(const std::string& value) {
  
  _impl_.bortex_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::_internal_mutable_bortex() {
  
  return _impl_.bortex_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCSubLevelItemRuntimeData::release_bortex() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelItemRuntimeData.borTex)
  return _impl_.bortex_.Release();
}
inline void UGCSubLevelItemRuntimeData::set_allocated_bortex(std::string* bortex) {
  if (bortex != nullptr) {
    
  } else {
    
  }
  _impl_.bortex_.SetAllocated(bortex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bortex_.IsDefault()) {
    _impl_.bortex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelItemRuntimeData.borTex)
}

// bool isStatic = 23;
inline void UGCSubLevelItemRuntimeData::clear_isstatic() {
  _impl_.isstatic_ = false;
}
inline bool UGCSubLevelItemRuntimeData::_internal_isstatic() const {
  return _impl_.isstatic_;
}
inline bool UGCSubLevelItemRuntimeData::isstatic() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelItemRuntimeData.isStatic)
  return _internal_isstatic();
}
inline void UGCSubLevelItemRuntimeData::_internal_set_isstatic(bool value) {
  
  _impl_.isstatic_ = value;
}
inline void UGCSubLevelItemRuntimeData::set_isstatic(bool value) {
  _internal_set_isstatic(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelItemRuntimeData.isStatic)
}

// -------------------------------------------------------------------

// UGCSubLevelDescData

// float GridWidth = 1;
inline void UGCSubLevelDescData::clear_gridwidth() {
  _impl_.gridwidth_ = 0;
}
inline float UGCSubLevelDescData::_internal_gridwidth() const {
  return _impl_.gridwidth_;
}
inline float UGCSubLevelDescData::gridwidth() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelDescData.GridWidth)
  return _internal_gridwidth();
}
inline void UGCSubLevelDescData::_internal_set_gridwidth(float value) {
  
  _impl_.gridwidth_ = value;
}
inline void UGCSubLevelDescData::set_gridwidth(float value) {
  _internal_set_gridwidth(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelDescData.GridWidth)
}

// float GridHeight = 2;
inline void UGCSubLevelDescData::clear_gridheight() {
  _impl_.gridheight_ = 0;
}
inline float UGCSubLevelDescData::_internal_gridheight() const {
  return _impl_.gridheight_;
}
inline float UGCSubLevelDescData::gridheight() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelDescData.GridHeight)
  return _internal_gridheight();
}
inline void UGCSubLevelDescData::_internal_set_gridheight(float value) {
  
  _impl_.gridheight_ = value;
}
inline void UGCSubLevelDescData::set_gridheight(float value) {
  _internal_set_gridheight(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelDescData.GridHeight)
}

// float GridCenterX = 3;
inline void UGCSubLevelDescData::clear_gridcenterx() {
  _impl_.gridcenterx_ = 0;
}
inline float UGCSubLevelDescData::_internal_gridcenterx() const {
  return _impl_.gridcenterx_;
}
inline float UGCSubLevelDescData::gridcenterx() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelDescData.GridCenterX)
  return _internal_gridcenterx();
}
inline void UGCSubLevelDescData::_internal_set_gridcenterx(float value) {
  
  _impl_.gridcenterx_ = value;
}
inline void UGCSubLevelDescData::set_gridcenterx(float value) {
  _internal_set_gridcenterx(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelDescData.GridCenterX)
}

// float GridCenterZ = 4;
inline void UGCSubLevelDescData::clear_gridcenterz() {
  _impl_.gridcenterz_ = 0;
}
inline float UGCSubLevelDescData::_internal_gridcenterz() const {
  return _impl_.gridcenterz_;
}
inline float UGCSubLevelDescData::gridcenterz() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelDescData.GridCenterZ)
  return _internal_gridcenterz();
}
inline void UGCSubLevelDescData::_internal_set_gridcenterz(float value) {
  
  _impl_.gridcenterz_ = value;
}
inline void UGCSubLevelDescData::set_gridcenterz(float value) {
  _internal_set_gridcenterz(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelDescData.GridCenterZ)
}

// float GridUnit = 5;
inline void UGCSubLevelDescData::clear_gridunit() {
  _impl_.gridunit_ = 0;
}
inline float UGCSubLevelDescData::_internal_gridunit() const {
  return _impl_.gridunit_;
}
inline float UGCSubLevelDescData::gridunit() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelDescData.GridUnit)
  return _internal_gridunit();
}
inline void UGCSubLevelDescData::_internal_set_gridunit(float value) {
  
  _impl_.gridunit_ = value;
}
inline void UGCSubLevelDescData::set_gridunit(float value) {
  _internal_set_gridunit(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelDescData.GridUnit)
}

// -------------------------------------------------------------------

// UGCSubLevelSkyEnvData

// bool IsAdvanceMode = 1;
inline void UGCSubLevelSkyEnvData::clear_isadvancemode() {
  _impl_.isadvancemode_ = false;
}
inline bool UGCSubLevelSkyEnvData::_internal_isadvancemode() const {
  return _impl_.isadvancemode_;
}
inline bool UGCSubLevelSkyEnvData::isadvancemode() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.IsAdvanceMode)
  return _internal_isadvancemode();
}
inline void UGCSubLevelSkyEnvData::_internal_set_isadvancemode(bool value) {
  
  _impl_.isadvancemode_ = value;
}
inline void UGCSubLevelSkyEnvData::set_isadvancemode(bool value) {
  _internal_set_isadvancemode(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.IsAdvanceMode)
}

// string BaseSkyEnvRes = 2;
inline void UGCSubLevelSkyEnvData::clear_baseskyenvres() {
  _impl_.baseskyenvres_.ClearToEmpty();
}
inline const std::string& UGCSubLevelSkyEnvData::baseskyenvres() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.BaseSkyEnvRes)
  return _internal_baseskyenvres();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCSubLevelSkyEnvData::set_baseskyenvres(ArgT0&& arg0, ArgT... args) {
 
 _impl_.baseskyenvres_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.BaseSkyEnvRes)
}
inline std::string* UGCSubLevelSkyEnvData::mutable_baseskyenvres() {
  std::string* _s = _internal_mutable_baseskyenvres();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelSkyEnvData.BaseSkyEnvRes)
  return _s;
}
inline const std::string& UGCSubLevelSkyEnvData::_internal_baseskyenvres() const {
  return _impl_.baseskyenvres_.Get();
}
inline void UGCSubLevelSkyEnvData::_internal_set_baseskyenvres(const std::string& value) {
  
  _impl_.baseskyenvres_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCSubLevelSkyEnvData::_internal_mutable_baseskyenvres() {
  
  return _impl_.baseskyenvres_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCSubLevelSkyEnvData::release_baseskyenvres() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelSkyEnvData.BaseSkyEnvRes)
  return _impl_.baseskyenvres_.Release();
}
inline void UGCSubLevelSkyEnvData::set_allocated_baseskyenvres(std::string* baseskyenvres) {
  if (baseskyenvres != nullptr) {
    
  } else {
    
  }
  _impl_.baseskyenvres_.SetAllocated(baseskyenvres, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.baseskyenvres_.IsDefault()) {
    _impl_.baseskyenvres_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelSkyEnvData.BaseSkyEnvRes)
}

// int32 LightColor = 3;
inline void UGCSubLevelSkyEnvData::clear_lightcolor() {
  _impl_.lightcolor_ = 0;
}
inline int32_t UGCSubLevelSkyEnvData::_internal_lightcolor() const {
  return _impl_.lightcolor_;
}
inline int32_t UGCSubLevelSkyEnvData::lightcolor() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.LightColor)
  return _internal_lightcolor();
}
inline void UGCSubLevelSkyEnvData::_internal_set_lightcolor(int32_t value) {
  
  _impl_.lightcolor_ = value;
}
inline void UGCSubLevelSkyEnvData::set_lightcolor(int32_t value) {
  _internal_set_lightcolor(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.LightColor)
}

// float LightIntensity = 4;
inline void UGCSubLevelSkyEnvData::clear_lightintensity() {
  _impl_.lightintensity_ = 0;
}
inline float UGCSubLevelSkyEnvData::_internal_lightintensity() const {
  return _impl_.lightintensity_;
}
inline float UGCSubLevelSkyEnvData::lightintensity() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.LightIntensity)
  return _internal_lightintensity();
}
inline void UGCSubLevelSkyEnvData::_internal_set_lightintensity(float value) {
  
  _impl_.lightintensity_ = value;
}
inline void UGCSubLevelSkyEnvData::set_lightintensity(float value) {
  _internal_set_lightintensity(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.LightIntensity)
}

// float Darkness = 5;
inline void UGCSubLevelSkyEnvData::clear_darkness() {
  _impl_.darkness_ = 0;
}
inline float UGCSubLevelSkyEnvData::_internal_darkness() const {
  return _impl_.darkness_;
}
inline float UGCSubLevelSkyEnvData::darkness() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.Darkness)
  return _internal_darkness();
}
inline void UGCSubLevelSkyEnvData::_internal_set_darkness(float value) {
  
  _impl_.darkness_ = value;
}
inline void UGCSubLevelSkyEnvData::set_darkness(float value) {
  _internal_set_darkness(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.Darkness)
}

// float ShadowStrength = 6;
inline void UGCSubLevelSkyEnvData::clear_shadowstrength() {
  _impl_.shadowstrength_ = 0;
}
inline float UGCSubLevelSkyEnvData::_internal_shadowstrength() const {
  return _impl_.shadowstrength_;
}
inline float UGCSubLevelSkyEnvData::shadowstrength() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.ShadowStrength)
  return _internal_shadowstrength();
}
inline void UGCSubLevelSkyEnvData::_internal_set_shadowstrength(float value) {
  
  _impl_.shadowstrength_ = value;
}
inline void UGCSubLevelSkyEnvData::set_shadowstrength(float value) {
  _internal_set_shadowstrength(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.ShadowStrength)
}

// float TerrainWetness = 7;
inline void UGCSubLevelSkyEnvData::clear_terrainwetness() {
  _impl_.terrainwetness_ = 0;
}
inline float UGCSubLevelSkyEnvData::_internal_terrainwetness() const {
  return _impl_.terrainwetness_;
}
inline float UGCSubLevelSkyEnvData::terrainwetness() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.TerrainWetness)
  return _internal_terrainwetness();
}
inline void UGCSubLevelSkyEnvData::_internal_set_terrainwetness(float value) {
  
  _impl_.terrainwetness_ = value;
}
inline void UGCSubLevelSkyEnvData::set_terrainwetness(float value) {
  _internal_set_terrainwetness(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.TerrainWetness)
}

// float LensFlare = 8;
inline void UGCSubLevelSkyEnvData::clear_lensflare() {
  _impl_.lensflare_ = 0;
}
inline float UGCSubLevelSkyEnvData::_internal_lensflare() const {
  return _impl_.lensflare_;
}
inline float UGCSubLevelSkyEnvData::lensflare() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.LensFlare)
  return _internal_lensflare();
}
inline void UGCSubLevelSkyEnvData::_internal_set_lensflare(float value) {
  
  _impl_.lensflare_ = value;
}
inline void UGCSubLevelSkyEnvData::set_lensflare(float value) {
  _internal_set_lensflare(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.LensFlare)
}

// int32 FogColor = 9;
inline void UGCSubLevelSkyEnvData::clear_fogcolor() {
  _impl_.fogcolor_ = 0;
}
inline int32_t UGCSubLevelSkyEnvData::_internal_fogcolor() const {
  return _impl_.fogcolor_;
}
inline int32_t UGCSubLevelSkyEnvData::fogcolor() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.FogColor)
  return _internal_fogcolor();
}
inline void UGCSubLevelSkyEnvData::_internal_set_fogcolor(int32_t value) {
  
  _impl_.fogcolor_ = value;
}
inline void UGCSubLevelSkyEnvData::set_fogcolor(int32_t value) {
  _internal_set_fogcolor(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.FogColor)
}

// int32 AmbientColor = 10;
inline void UGCSubLevelSkyEnvData::clear_ambientcolor() {
  _impl_.ambientcolor_ = 0;
}
inline int32_t UGCSubLevelSkyEnvData::_internal_ambientcolor() const {
  return _impl_.ambientcolor_;
}
inline int32_t UGCSubLevelSkyEnvData::ambientcolor() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.AmbientColor)
  return _internal_ambientcolor();
}
inline void UGCSubLevelSkyEnvData::_internal_set_ambientcolor(int32_t value) {
  
  _impl_.ambientcolor_ = value;
}
inline void UGCSubLevelSkyEnvData::set_ambientcolor(int32_t value) {
  _internal_set_ambientcolor(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.AmbientColor)
}

// bool NightMode = 11;
inline void UGCSubLevelSkyEnvData::clear_nightmode() {
  _impl_.nightmode_ = false;
}
inline bool UGCSubLevelSkyEnvData::_internal_nightmode() const {
  return _impl_.nightmode_;
}
inline bool UGCSubLevelSkyEnvData::nightmode() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelSkyEnvData.NightMode)
  return _internal_nightmode();
}
inline void UGCSubLevelSkyEnvData::_internal_set_nightmode(bool value) {
  
  _impl_.nightmode_ = value;
}
inline void UGCSubLevelSkyEnvData::set_nightmode(bool value) {
  _internal_set_nightmode(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelSkyEnvData.NightMode)
}

// -------------------------------------------------------------------

// UGCSubLevelResourceData

// string SubLevelName = 1;
inline void UGCSubLevelResourceData::clear_sublevelname() {
  _impl_.sublevelname_.ClearToEmpty();
}
inline const std::string& UGCSubLevelResourceData::sublevelname() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.SubLevelName)
  return _internal_sublevelname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCSubLevelResourceData::set_sublevelname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sublevelname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCSubLevelResourceData.SubLevelName)
}
inline std::string* UGCSubLevelResourceData::mutable_sublevelname() {
  std::string* _s = _internal_mutable_sublevelname();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelResourceData.SubLevelName)
  return _s;
}
inline const std::string& UGCSubLevelResourceData::_internal_sublevelname() const {
  return _impl_.sublevelname_.Get();
}
inline void UGCSubLevelResourceData::_internal_set_sublevelname(const std::string& value) {
  
  _impl_.sublevelname_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCSubLevelResourceData::_internal_mutable_sublevelname() {
  
  return _impl_.sublevelname_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCSubLevelResourceData::release_sublevelname() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelResourceData.SubLevelName)
  return _impl_.sublevelname_.Release();
}
inline void UGCSubLevelResourceData::set_allocated_sublevelname(std::string* sublevelname) {
  if (sublevelname != nullptr) {
    
  } else {
    
  }
  _impl_.sublevelname_.SetAllocated(sublevelname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sublevelname_.IsDefault()) {
    _impl_.sublevelname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelResourceData.SubLevelName)
}

// string GUID = 2;
inline void UGCSubLevelResourceData::clear_guid() {
  _impl_.guid_.ClearToEmpty();
}
inline const std::string& UGCSubLevelResourceData::guid() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.GUID)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCSubLevelResourceData::set_guid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.guid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCSubLevelResourceData.GUID)
}
inline std::string* UGCSubLevelResourceData::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelResourceData.GUID)
  return _s;
}
inline const std::string& UGCSubLevelResourceData::_internal_guid() const {
  return _impl_.guid_.Get();
}
inline void UGCSubLevelResourceData::_internal_set_guid(const std::string& value) {
  
  _impl_.guid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCSubLevelResourceData::_internal_mutable_guid() {
  
  return _impl_.guid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCSubLevelResourceData::release_guid() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelResourceData.GUID)
  return _impl_.guid_.Release();
}
inline void UGCSubLevelResourceData::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    
  } else {
    
  }
  _impl_.guid_.SetAllocated(guid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guid_.IsDefault()) {
    _impl_.guid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelResourceData.GUID)
}

// bool IsMainLevel = 3;
inline void UGCSubLevelResourceData::clear_ismainlevel() {
  _impl_.ismainlevel_ = false;
}
inline bool UGCSubLevelResourceData::_internal_ismainlevel() const {
  return _impl_.ismainlevel_;
}
inline bool UGCSubLevelResourceData::ismainlevel() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.IsMainLevel)
  return _internal_ismainlevel();
}
inline void UGCSubLevelResourceData::_internal_set_ismainlevel(bool value) {
  
  _impl_.ismainlevel_ = value;
}
inline void UGCSubLevelResourceData::set_ismainlevel(bool value) {
  _internal_set_ismainlevel(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelResourceData.IsMainLevel)
}

// uint32 BaseMapID = 4;
inline void UGCSubLevelResourceData::clear_basemapid() {
  _impl_.basemapid_ = 0u;
}
inline uint32_t UGCSubLevelResourceData::_internal_basemapid() const {
  return _impl_.basemapid_;
}
inline uint32_t UGCSubLevelResourceData::basemapid() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.BaseMapID)
  return _internal_basemapid();
}
inline void UGCSubLevelResourceData::_internal_set_basemapid(uint32_t value) {
  
  _impl_.basemapid_ = value;
}
inline void UGCSubLevelResourceData::set_basemapid(uint32_t value) {
  _internal_set_basemapid(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelResourceData.BaseMapID)
}

// bool IsUseLevelDescData = 5;
inline void UGCSubLevelResourceData::clear_isuseleveldescdata() {
  _impl_.isuseleveldescdata_ = false;
}
inline bool UGCSubLevelResourceData::_internal_isuseleveldescdata() const {
  return _impl_.isuseleveldescdata_;
}
inline bool UGCSubLevelResourceData::isuseleveldescdata() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.IsUseLevelDescData)
  return _internal_isuseleveldescdata();
}
inline void UGCSubLevelResourceData::_internal_set_isuseleveldescdata(bool value) {
  
  _impl_.isuseleveldescdata_ = value;
}
inline void UGCSubLevelResourceData::set_isuseleveldescdata(bool value) {
  _internal_set_isuseleveldescdata(value);
  // @@protoc_insertion_point(field_set:message.UGCSubLevelResourceData.IsUseLevelDescData)
}

// .message.UGCSubLevelDescData DescInfo = 6;
inline bool UGCSubLevelResourceData::_internal_has_descinfo() const {
  return this != internal_default_instance() && _impl_.descinfo_ != nullptr;
}
inline bool UGCSubLevelResourceData::has_descinfo() const {
  return _internal_has_descinfo();
}
inline void UGCSubLevelResourceData::clear_descinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.descinfo_ != nullptr) {
    delete _impl_.descinfo_;
  }
  _impl_.descinfo_ = nullptr;
}
inline const ::message::UGCSubLevelDescData& UGCSubLevelResourceData::_internal_descinfo() const {
  const ::message::UGCSubLevelDescData* p = _impl_.descinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCSubLevelDescData&>(
      ::message::_UGCSubLevelDescData_default_instance_);
}
inline const ::message::UGCSubLevelDescData& UGCSubLevelResourceData::descinfo() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.DescInfo)
  return _internal_descinfo();
}
inline void UGCSubLevelResourceData::unsafe_arena_set_allocated_descinfo(
    ::message::UGCSubLevelDescData* descinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.descinfo_);
  }
  _impl_.descinfo_ = descinfo;
  if (descinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCSubLevelResourceData.DescInfo)
}
inline ::message::UGCSubLevelDescData* UGCSubLevelResourceData::release_descinfo() {
  
  ::message::UGCSubLevelDescData* temp = _impl_.descinfo_;
  _impl_.descinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCSubLevelDescData* UGCSubLevelResourceData::unsafe_arena_release_descinfo() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelResourceData.DescInfo)
  
  ::message::UGCSubLevelDescData* temp = _impl_.descinfo_;
  _impl_.descinfo_ = nullptr;
  return temp;
}
inline ::message::UGCSubLevelDescData* UGCSubLevelResourceData::_internal_mutable_descinfo() {
  
  if (_impl_.descinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCSubLevelDescData>(GetArenaForAllocation());
    _impl_.descinfo_ = p;
  }
  return _impl_.descinfo_;
}
inline ::message::UGCSubLevelDescData* UGCSubLevelResourceData::mutable_descinfo() {
  ::message::UGCSubLevelDescData* _msg = _internal_mutable_descinfo();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelResourceData.DescInfo)
  return _msg;
}
inline void UGCSubLevelResourceData::set_allocated_descinfo(::message::UGCSubLevelDescData* descinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.descinfo_;
  }
  if (descinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(descinfo);
    if (message_arena != submessage_arena) {
      descinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, descinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.descinfo_ = descinfo;
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelResourceData.DescInfo)
}

// repeated .message.UGCSubLevelItemRuntimeData ObjectList = 7;
inline int UGCSubLevelResourceData::_internal_objectlist_size() const {
  return _impl_.objectlist_.size();
}
inline int UGCSubLevelResourceData::objectlist_size() const {
  return _internal_objectlist_size();
}
inline void UGCSubLevelResourceData::clear_objectlist() {
  _impl_.objectlist_.Clear();
}
inline ::message::UGCSubLevelItemRuntimeData* UGCSubLevelResourceData::mutable_objectlist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelResourceData.ObjectList)
  return _impl_.objectlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelItemRuntimeData >*
UGCSubLevelResourceData::mutable_objectlist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCSubLevelResourceData.ObjectList)
  return &_impl_.objectlist_;
}
inline const ::message::UGCSubLevelItemRuntimeData& UGCSubLevelResourceData::_internal_objectlist(int index) const {
  return _impl_.objectlist_.Get(index);
}
inline const ::message::UGCSubLevelItemRuntimeData& UGCSubLevelResourceData::objectlist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.ObjectList)
  return _internal_objectlist(index);
}
inline ::message::UGCSubLevelItemRuntimeData* UGCSubLevelResourceData::_internal_add_objectlist() {
  return _impl_.objectlist_.Add();
}
inline ::message::UGCSubLevelItemRuntimeData* UGCSubLevelResourceData::add_objectlist() {
  ::message::UGCSubLevelItemRuntimeData* _add = _internal_add_objectlist();
  // @@protoc_insertion_point(field_add:message.UGCSubLevelResourceData.ObjectList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelItemRuntimeData >&
UGCSubLevelResourceData::objectlist() const {
  // @@protoc_insertion_point(field_list:message.UGCSubLevelResourceData.ObjectList)
  return _impl_.objectlist_;
}

// .message.SceneEditEntityAttributeProtoData ObjectAttrList = 8;
inline bool UGCSubLevelResourceData::_internal_has_objectattrlist() const {
  return this != internal_default_instance() && _impl_.objectattrlist_ != nullptr;
}
inline bool UGCSubLevelResourceData::has_objectattrlist() const {
  return _internal_has_objectattrlist();
}
inline void UGCSubLevelResourceData::clear_objectattrlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.objectattrlist_ != nullptr) {
    delete _impl_.objectattrlist_;
  }
  _impl_.objectattrlist_ = nullptr;
}
inline const ::message::SceneEditEntityAttributeProtoData& UGCSubLevelResourceData::_internal_objectattrlist() const {
  const ::message::SceneEditEntityAttributeProtoData* p = _impl_.objectattrlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditEntityAttributeProtoData&>(
      ::message::_SceneEditEntityAttributeProtoData_default_instance_);
}
inline const ::message::SceneEditEntityAttributeProtoData& UGCSubLevelResourceData::objectattrlist() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.ObjectAttrList)
  return _internal_objectattrlist();
}
inline void UGCSubLevelResourceData::unsafe_arena_set_allocated_objectattrlist(
    ::message::SceneEditEntityAttributeProtoData* objectattrlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectattrlist_);
  }
  _impl_.objectattrlist_ = objectattrlist;
  if (objectattrlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCSubLevelResourceData.ObjectAttrList)
}
inline ::message::SceneEditEntityAttributeProtoData* UGCSubLevelResourceData::release_objectattrlist() {
  
  ::message::SceneEditEntityAttributeProtoData* temp = _impl_.objectattrlist_;
  _impl_.objectattrlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditEntityAttributeProtoData* UGCSubLevelResourceData::unsafe_arena_release_objectattrlist() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelResourceData.ObjectAttrList)
  
  ::message::SceneEditEntityAttributeProtoData* temp = _impl_.objectattrlist_;
  _impl_.objectattrlist_ = nullptr;
  return temp;
}
inline ::message::SceneEditEntityAttributeProtoData* UGCSubLevelResourceData::_internal_mutable_objectattrlist() {
  
  if (_impl_.objectattrlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditEntityAttributeProtoData>(GetArenaForAllocation());
    _impl_.objectattrlist_ = p;
  }
  return _impl_.objectattrlist_;
}
inline ::message::SceneEditEntityAttributeProtoData* UGCSubLevelResourceData::mutable_objectattrlist() {
  ::message::SceneEditEntityAttributeProtoData* _msg = _internal_mutable_objectattrlist();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelResourceData.ObjectAttrList)
  return _msg;
}
inline void UGCSubLevelResourceData::set_allocated_objectattrlist(::message::SceneEditEntityAttributeProtoData* objectattrlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.objectattrlist_;
  }
  if (objectattrlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(objectattrlist);
    if (message_arena != submessage_arena) {
      objectattrlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectattrlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectattrlist_ = objectattrlist;
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelResourceData.ObjectAttrList)
}

// .message.UGCSubLevelSkyEnvData SkyEnv = 9;
inline bool UGCSubLevelResourceData::_internal_has_skyenv() const {
  return this != internal_default_instance() && _impl_.skyenv_ != nullptr;
}
inline bool UGCSubLevelResourceData::has_skyenv() const {
  return _internal_has_skyenv();
}
inline void UGCSubLevelResourceData::clear_skyenv() {
  if (GetArenaForAllocation() == nullptr && _impl_.skyenv_ != nullptr) {
    delete _impl_.skyenv_;
  }
  _impl_.skyenv_ = nullptr;
}
inline const ::message::UGCSubLevelSkyEnvData& UGCSubLevelResourceData::_internal_skyenv() const {
  const ::message::UGCSubLevelSkyEnvData* p = _impl_.skyenv_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCSubLevelSkyEnvData&>(
      ::message::_UGCSubLevelSkyEnvData_default_instance_);
}
inline const ::message::UGCSubLevelSkyEnvData& UGCSubLevelResourceData::skyenv() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.SkyEnv)
  return _internal_skyenv();
}
inline void UGCSubLevelResourceData::unsafe_arena_set_allocated_skyenv(
    ::message::UGCSubLevelSkyEnvData* skyenv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skyenv_);
  }
  _impl_.skyenv_ = skyenv;
  if (skyenv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCSubLevelResourceData.SkyEnv)
}
inline ::message::UGCSubLevelSkyEnvData* UGCSubLevelResourceData::release_skyenv() {
  
  ::message::UGCSubLevelSkyEnvData* temp = _impl_.skyenv_;
  _impl_.skyenv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCSubLevelSkyEnvData* UGCSubLevelResourceData::unsafe_arena_release_skyenv() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelResourceData.SkyEnv)
  
  ::message::UGCSubLevelSkyEnvData* temp = _impl_.skyenv_;
  _impl_.skyenv_ = nullptr;
  return temp;
}
inline ::message::UGCSubLevelSkyEnvData* UGCSubLevelResourceData::_internal_mutable_skyenv() {
  
  if (_impl_.skyenv_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCSubLevelSkyEnvData>(GetArenaForAllocation());
    _impl_.skyenv_ = p;
  }
  return _impl_.skyenv_;
}
inline ::message::UGCSubLevelSkyEnvData* UGCSubLevelResourceData::mutable_skyenv() {
  ::message::UGCSubLevelSkyEnvData* _msg = _internal_mutable_skyenv();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelResourceData.SkyEnv)
  return _msg;
}
inline void UGCSubLevelResourceData::set_allocated_skyenv(::message::UGCSubLevelSkyEnvData* skyenv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.skyenv_;
  }
  if (skyenv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(skyenv);
    if (message_arena != submessage_arena) {
      skyenv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skyenv, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skyenv_ = skyenv;
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelResourceData.SkyEnv)
}

// repeated .message.UGCTransformNodeData ObjectHierachy = 10;
inline int UGCSubLevelResourceData::_internal_objecthierachy_size() const {
  return _impl_.objecthierachy_.size();
}
inline int UGCSubLevelResourceData::objecthierachy_size() const {
  return _internal_objecthierachy_size();
}
inline void UGCSubLevelResourceData::clear_objecthierachy() {
  _impl_.objecthierachy_.Clear();
}
inline ::message::UGCTransformNodeData* UGCSubLevelResourceData::mutable_objecthierachy(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelResourceData.ObjectHierachy)
  return _impl_.objecthierachy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData >*
UGCSubLevelResourceData::mutable_objecthierachy() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCSubLevelResourceData.ObjectHierachy)
  return &_impl_.objecthierachy_;
}
inline const ::message::UGCTransformNodeData& UGCSubLevelResourceData::_internal_objecthierachy(int index) const {
  return _impl_.objecthierachy_.Get(index);
}
inline const ::message::UGCTransformNodeData& UGCSubLevelResourceData::objecthierachy(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.ObjectHierachy)
  return _internal_objecthierachy(index);
}
inline ::message::UGCTransformNodeData* UGCSubLevelResourceData::_internal_add_objecthierachy() {
  return _impl_.objecthierachy_.Add();
}
inline ::message::UGCTransformNodeData* UGCSubLevelResourceData::add_objecthierachy() {
  ::message::UGCTransformNodeData* _add = _internal_add_objecthierachy();
  // @@protoc_insertion_point(field_add:message.UGCSubLevelResourceData.ObjectHierachy)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCTransformNodeData >&
UGCSubLevelResourceData::objecthierachy() const {
  // @@protoc_insertion_point(field_list:message.UGCSubLevelResourceData.ObjectHierachy)
  return _impl_.objecthierachy_;
}

// string GrassResourceUUID = 11;
inline void UGCSubLevelResourceData::clear_grassresourceuuid() {
  _impl_.grassresourceuuid_.ClearToEmpty();
}
inline const std::string& UGCSubLevelResourceData::grassresourceuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCSubLevelResourceData.GrassResourceUUID)
  return _internal_grassresourceuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCSubLevelResourceData::set_grassresourceuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.grassresourceuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCSubLevelResourceData.GrassResourceUUID)
}
inline std::string* UGCSubLevelResourceData::mutable_grassresourceuuid() {
  std::string* _s = _internal_mutable_grassresourceuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCSubLevelResourceData.GrassResourceUUID)
  return _s;
}
inline const std::string& UGCSubLevelResourceData::_internal_grassresourceuuid() const {
  return _impl_.grassresourceuuid_.Get();
}
inline void UGCSubLevelResourceData::_internal_set_grassresourceuuid(const std::string& value) {
  
  _impl_.grassresourceuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCSubLevelResourceData::_internal_mutable_grassresourceuuid() {
  
  return _impl_.grassresourceuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCSubLevelResourceData::release_grassresourceuuid() {
  // @@protoc_insertion_point(field_release:message.UGCSubLevelResourceData.GrassResourceUUID)
  return _impl_.grassresourceuuid_.Release();
}
inline void UGCSubLevelResourceData::set_allocated_grassresourceuuid(std::string* grassresourceuuid) {
  if (grassresourceuuid != nullptr) {
    
  } else {
    
  }
  _impl_.grassresourceuuid_.SetAllocated(grassresourceuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.grassresourceuuid_.IsDefault()) {
    _impl_.grassresourceuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCSubLevelResourceData.GrassResourceUUID)
}

// -------------------------------------------------------------------

// UGCTransformNodeData

// string ID = 1;
inline void UGCTransformNodeData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCTransformNodeData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCTransformNodeData.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCTransformNodeData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCTransformNodeData.ID)
}
inline std::string* UGCTransformNodeData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCTransformNodeData.ID)
  return _s;
}
inline const std::string& UGCTransformNodeData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCTransformNodeData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCTransformNodeData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCTransformNodeData::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCTransformNodeData.ID)
  return _impl_.id_.Release();
}
inline void UGCTransformNodeData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCTransformNodeData.ID)
}

// string ParentID = 2;
inline void UGCTransformNodeData::clear_parentid() {
  _impl_.parentid_.ClearToEmpty();
}
inline const std::string& UGCTransformNodeData::parentid() const {
  // @@protoc_insertion_point(field_get:message.UGCTransformNodeData.ParentID)
  return _internal_parentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCTransformNodeData::set_parentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parentid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCTransformNodeData.ParentID)
}
inline std::string* UGCTransformNodeData::mutable_parentid() {
  std::string* _s = _internal_mutable_parentid();
  // @@protoc_insertion_point(field_mutable:message.UGCTransformNodeData.ParentID)
  return _s;
}
inline const std::string& UGCTransformNodeData::_internal_parentid() const {
  return _impl_.parentid_.Get();
}
inline void UGCTransformNodeData::_internal_set_parentid(const std::string& value) {
  
  _impl_.parentid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCTransformNodeData::_internal_mutable_parentid() {
  
  return _impl_.parentid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCTransformNodeData::release_parentid() {
  // @@protoc_insertion_point(field_release:message.UGCTransformNodeData.ParentID)
  return _impl_.parentid_.Release();
}
inline void UGCTransformNodeData::set_allocated_parentid(std::string* parentid) {
  if (parentid != nullptr) {
    
  } else {
    
  }
  _impl_.parentid_.SetAllocated(parentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parentid_.IsDefault()) {
    _impl_.parentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCTransformNodeData.ParentID)
}

// .message.ProtoBuffVector3 LocalPosition = 3;
inline bool UGCTransformNodeData::_internal_has_localposition() const {
  return this != internal_default_instance() && _impl_.localposition_ != nullptr;
}
inline bool UGCTransformNodeData::has_localposition() const {
  return _internal_has_localposition();
}
inline const ::message::ProtoBuffVector3& UGCTransformNodeData::_internal_localposition() const {
  const ::message::ProtoBuffVector3* p = _impl_.localposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCTransformNodeData::localposition() const {
  // @@protoc_insertion_point(field_get:message.UGCTransformNodeData.LocalPosition)
  return _internal_localposition();
}
inline void UGCTransformNodeData::unsafe_arena_set_allocated_localposition(
    ::message::ProtoBuffVector3* localposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localposition_);
  }
  _impl_.localposition_ = localposition;
  if (localposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCTransformNodeData.LocalPosition)
}
inline ::message::ProtoBuffVector3* UGCTransformNodeData::release_localposition() {
  
  ::message::ProtoBuffVector3* temp = _impl_.localposition_;
  _impl_.localposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCTransformNodeData::unsafe_arena_release_localposition() {
  // @@protoc_insertion_point(field_release:message.UGCTransformNodeData.LocalPosition)
  
  ::message::ProtoBuffVector3* temp = _impl_.localposition_;
  _impl_.localposition_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCTransformNodeData::_internal_mutable_localposition() {
  
  if (_impl_.localposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.localposition_ = p;
  }
  return _impl_.localposition_;
}
inline ::message::ProtoBuffVector3* UGCTransformNodeData::mutable_localposition() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_localposition();
  // @@protoc_insertion_point(field_mutable:message.UGCTransformNodeData.LocalPosition)
  return _msg;
}
inline void UGCTransformNodeData::set_allocated_localposition(::message::ProtoBuffVector3* localposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localposition_);
  }
  if (localposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localposition));
    if (message_arena != submessage_arena) {
      localposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localposition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localposition_ = localposition;
  // @@protoc_insertion_point(field_set_allocated:message.UGCTransformNodeData.LocalPosition)
}

// .message.ProtoBuffVector3 LocalScale = 4;
inline bool UGCTransformNodeData::_internal_has_localscale() const {
  return this != internal_default_instance() && _impl_.localscale_ != nullptr;
}
inline bool UGCTransformNodeData::has_localscale() const {
  return _internal_has_localscale();
}
inline const ::message::ProtoBuffVector3& UGCTransformNodeData::_internal_localscale() const {
  const ::message::ProtoBuffVector3* p = _impl_.localscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCTransformNodeData::localscale() const {
  // @@protoc_insertion_point(field_get:message.UGCTransformNodeData.LocalScale)
  return _internal_localscale();
}
inline void UGCTransformNodeData::unsafe_arena_set_allocated_localscale(
    ::message::ProtoBuffVector3* localscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localscale_);
  }
  _impl_.localscale_ = localscale;
  if (localscale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCTransformNodeData.LocalScale)
}
inline ::message::ProtoBuffVector3* UGCTransformNodeData::release_localscale() {
  
  ::message::ProtoBuffVector3* temp = _impl_.localscale_;
  _impl_.localscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCTransformNodeData::unsafe_arena_release_localscale() {
  // @@protoc_insertion_point(field_release:message.UGCTransformNodeData.LocalScale)
  
  ::message::ProtoBuffVector3* temp = _impl_.localscale_;
  _impl_.localscale_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCTransformNodeData::_internal_mutable_localscale() {
  
  if (_impl_.localscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.localscale_ = p;
  }
  return _impl_.localscale_;
}
inline ::message::ProtoBuffVector3* UGCTransformNodeData::mutable_localscale() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_localscale();
  // @@protoc_insertion_point(field_mutable:message.UGCTransformNodeData.LocalScale)
  return _msg;
}
inline void UGCTransformNodeData::set_allocated_localscale(::message::ProtoBuffVector3* localscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localscale_);
  }
  if (localscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localscale));
    if (message_arena != submessage_arena) {
      localscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localscale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localscale_ = localscale;
  // @@protoc_insertion_point(field_set_allocated:message.UGCTransformNodeData.LocalScale)
}

// .message.ProtoBuffQuaternion LocalRotation = 5;
inline bool UGCTransformNodeData::_internal_has_localrotation() const {
  return this != internal_default_instance() && _impl_.localrotation_ != nullptr;
}
inline bool UGCTransformNodeData::has_localrotation() const {
  return _internal_has_localrotation();
}
inline const ::message::ProtoBuffQuaternion& UGCTransformNodeData::_internal_localrotation() const {
  const ::message::ProtoBuffQuaternion* p = _impl_.localrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffQuaternion&>(
      ::message::_ProtoBuffQuaternion_default_instance_);
}
inline const ::message::ProtoBuffQuaternion& UGCTransformNodeData::localrotation() const {
  // @@protoc_insertion_point(field_get:message.UGCTransformNodeData.LocalRotation)
  return _internal_localrotation();
}
inline void UGCTransformNodeData::unsafe_arena_set_allocated_localrotation(
    ::message::ProtoBuffQuaternion* localrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localrotation_);
  }
  _impl_.localrotation_ = localrotation;
  if (localrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCTransformNodeData.LocalRotation)
}
inline ::message::ProtoBuffQuaternion* UGCTransformNodeData::release_localrotation() {
  
  ::message::ProtoBuffQuaternion* temp = _impl_.localrotation_;
  _impl_.localrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCTransformNodeData::unsafe_arena_release_localrotation() {
  // @@protoc_insertion_point(field_release:message.UGCTransformNodeData.LocalRotation)
  
  ::message::ProtoBuffQuaternion* temp = _impl_.localrotation_;
  _impl_.localrotation_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCTransformNodeData::_internal_mutable_localrotation() {
  
  if (_impl_.localrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffQuaternion>(GetArenaForAllocation());
    _impl_.localrotation_ = p;
  }
  return _impl_.localrotation_;
}
inline ::message::ProtoBuffQuaternion* UGCTransformNodeData::mutable_localrotation() {
  ::message::ProtoBuffQuaternion* _msg = _internal_mutable_localrotation();
  // @@protoc_insertion_point(field_mutable:message.UGCTransformNodeData.LocalRotation)
  return _msg;
}
inline void UGCTransformNodeData::set_allocated_localrotation(::message::ProtoBuffQuaternion* localrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localrotation_);
  }
  if (localrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localrotation));
    if (message_arena != submessage_arena) {
      localrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localrotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localrotation_ = localrotation;
  // @@protoc_insertion_point(field_set_allocated:message.UGCTransformNodeData.LocalRotation)
}

// -------------------------------------------------------------------

// UGCAllSceneRuntimeData

// repeated .message.UGCSubLevelResourceData SubLevelList = 1;
inline int UGCAllSceneRuntimeData::_internal_sublevellist_size() const {
  return _impl_.sublevellist_.size();
}
inline int UGCAllSceneRuntimeData::sublevellist_size() const {
  return _internal_sublevellist_size();
}
inline void UGCAllSceneRuntimeData::clear_sublevellist() {
  _impl_.sublevellist_.Clear();
}
inline ::message::UGCSubLevelResourceData* UGCAllSceneRuntimeData::mutable_sublevellist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCAllSceneRuntimeData.SubLevelList)
  return _impl_.sublevellist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelResourceData >*
UGCAllSceneRuntimeData::mutable_sublevellist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCAllSceneRuntimeData.SubLevelList)
  return &_impl_.sublevellist_;
}
inline const ::message::UGCSubLevelResourceData& UGCAllSceneRuntimeData::_internal_sublevellist(int index) const {
  return _impl_.sublevellist_.Get(index);
}
inline const ::message::UGCSubLevelResourceData& UGCAllSceneRuntimeData::sublevellist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCAllSceneRuntimeData.SubLevelList)
  return _internal_sublevellist(index);
}
inline ::message::UGCSubLevelResourceData* UGCAllSceneRuntimeData::_internal_add_sublevellist() {
  return _impl_.sublevellist_.Add();
}
inline ::message::UGCSubLevelResourceData* UGCAllSceneRuntimeData::add_sublevellist() {
  ::message::UGCSubLevelResourceData* _add = _internal_add_sublevellist();
  // @@protoc_insertion_point(field_add:message.UGCAllSceneRuntimeData.SubLevelList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCSubLevelResourceData >&
UGCAllSceneRuntimeData::sublevellist() const {
  // @@protoc_insertion_point(field_list:message.UGCAllSceneRuntimeData.SubLevelList)
  return _impl_.sublevellist_;
}

// -------------------------------------------------------------------

// UGCMapRuntimeData

// .message.SceneEditEntityProtoData Entities = 1;
inline bool UGCMapRuntimeData::_internal_has_entities() const {
  return this != internal_default_instance() && _impl_.entities_ != nullptr;
}
inline bool UGCMapRuntimeData::has_entities() const {
  return _internal_has_entities();
}
inline void UGCMapRuntimeData::clear_entities() {
  if (GetArenaForAllocation() == nullptr && _impl_.entities_ != nullptr) {
    delete _impl_.entities_;
  }
  _impl_.entities_ = nullptr;
}
inline const ::message::SceneEditEntityProtoData& UGCMapRuntimeData::_internal_entities() const {
  const ::message::SceneEditEntityProtoData* p = _impl_.entities_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditEntityProtoData&>(
      ::message::_SceneEditEntityProtoData_default_instance_);
}
inline const ::message::SceneEditEntityProtoData& UGCMapRuntimeData::entities() const {
  // @@protoc_insertion_point(field_get:message.UGCMapRuntimeData.Entities)
  return _internal_entities();
}
inline void UGCMapRuntimeData::unsafe_arena_set_allocated_entities(
    ::message::SceneEditEntityProtoData* entities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entities_);
  }
  _impl_.entities_ = entities;
  if (entities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCMapRuntimeData.Entities)
}
inline ::message::SceneEditEntityProtoData* UGCMapRuntimeData::release_entities() {
  
  ::message::SceneEditEntityProtoData* temp = _impl_.entities_;
  _impl_.entities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditEntityProtoData* UGCMapRuntimeData::unsafe_arena_release_entities() {
  // @@protoc_insertion_point(field_release:message.UGCMapRuntimeData.Entities)
  
  ::message::SceneEditEntityProtoData* temp = _impl_.entities_;
  _impl_.entities_ = nullptr;
  return temp;
}
inline ::message::SceneEditEntityProtoData* UGCMapRuntimeData::_internal_mutable_entities() {
  
  if (_impl_.entities_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditEntityProtoData>(GetArenaForAllocation());
    _impl_.entities_ = p;
  }
  return _impl_.entities_;
}
inline ::message::SceneEditEntityProtoData* UGCMapRuntimeData::mutable_entities() {
  ::message::SceneEditEntityProtoData* _msg = _internal_mutable_entities();
  // @@protoc_insertion_point(field_mutable:message.UGCMapRuntimeData.Entities)
  return _msg;
}
inline void UGCMapRuntimeData::set_allocated_entities(::message::SceneEditEntityProtoData* entities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entities_;
  }
  if (entities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entities);
    if (message_arena != submessage_arena) {
      entities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entities, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entities_ = entities;
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapRuntimeData.Entities)
}

// .message.SceneEditModeProtoData ModeSetting = 2;
inline bool UGCMapRuntimeData::_internal_has_modesetting() const {
  return this != internal_default_instance() && _impl_.modesetting_ != nullptr;
}
inline bool UGCMapRuntimeData::has_modesetting() const {
  return _internal_has_modesetting();
}
inline void UGCMapRuntimeData::clear_modesetting() {
  if (GetArenaForAllocation() == nullptr && _impl_.modesetting_ != nullptr) {
    delete _impl_.modesetting_;
  }
  _impl_.modesetting_ = nullptr;
}
inline const ::message::SceneEditModeProtoData& UGCMapRuntimeData::_internal_modesetting() const {
  const ::message::SceneEditModeProtoData* p = _impl_.modesetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditModeProtoData&>(
      ::message::_SceneEditModeProtoData_default_instance_);
}
inline const ::message::SceneEditModeProtoData& UGCMapRuntimeData::modesetting() const {
  // @@protoc_insertion_point(field_get:message.UGCMapRuntimeData.ModeSetting)
  return _internal_modesetting();
}
inline void UGCMapRuntimeData::unsafe_arena_set_allocated_modesetting(
    ::message::SceneEditModeProtoData* modesetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modesetting_);
  }
  _impl_.modesetting_ = modesetting;
  if (modesetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCMapRuntimeData.ModeSetting)
}
inline ::message::SceneEditModeProtoData* UGCMapRuntimeData::release_modesetting() {
  
  ::message::SceneEditModeProtoData* temp = _impl_.modesetting_;
  _impl_.modesetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditModeProtoData* UGCMapRuntimeData::unsafe_arena_release_modesetting() {
  // @@protoc_insertion_point(field_release:message.UGCMapRuntimeData.ModeSetting)
  
  ::message::SceneEditModeProtoData* temp = _impl_.modesetting_;
  _impl_.modesetting_ = nullptr;
  return temp;
}
inline ::message::SceneEditModeProtoData* UGCMapRuntimeData::_internal_mutable_modesetting() {
  
  if (_impl_.modesetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditModeProtoData>(GetArenaForAllocation());
    _impl_.modesetting_ = p;
  }
  return _impl_.modesetting_;
}
inline ::message::SceneEditModeProtoData* UGCMapRuntimeData::mutable_modesetting() {
  ::message::SceneEditModeProtoData* _msg = _internal_mutable_modesetting();
  // @@protoc_insertion_point(field_mutable:message.UGCMapRuntimeData.ModeSetting)
  return _msg;
}
inline void UGCMapRuntimeData::set_allocated_modesetting(::message::SceneEditModeProtoData* modesetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.modesetting_;
  }
  if (modesetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(modesetting);
    if (message_arena != submessage_arena) {
      modesetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modesetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.modesetting_ = modesetting;
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapRuntimeData.ModeSetting)
}

// .message.SceneEditEntityAttributeProtoData EntityAttributes = 3;
inline bool UGCMapRuntimeData::_internal_has_entityattributes() const {
  return this != internal_default_instance() && _impl_.entityattributes_ != nullptr;
}
inline bool UGCMapRuntimeData::has_entityattributes() const {
  return _internal_has_entityattributes();
}
inline void UGCMapRuntimeData::clear_entityattributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.entityattributes_ != nullptr) {
    delete _impl_.entityattributes_;
  }
  _impl_.entityattributes_ = nullptr;
}
inline const ::message::SceneEditEntityAttributeProtoData& UGCMapRuntimeData::_internal_entityattributes() const {
  const ::message::SceneEditEntityAttributeProtoData* p = _impl_.entityattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditEntityAttributeProtoData&>(
      ::message::_SceneEditEntityAttributeProtoData_default_instance_);
}
inline const ::message::SceneEditEntityAttributeProtoData& UGCMapRuntimeData::entityattributes() const {
  // @@protoc_insertion_point(field_get:message.UGCMapRuntimeData.EntityAttributes)
  return _internal_entityattributes();
}
inline void UGCMapRuntimeData::unsafe_arena_set_allocated_entityattributes(
    ::message::SceneEditEntityAttributeProtoData* entityattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entityattributes_);
  }
  _impl_.entityattributes_ = entityattributes;
  if (entityattributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCMapRuntimeData.EntityAttributes)
}
inline ::message::SceneEditEntityAttributeProtoData* UGCMapRuntimeData::release_entityattributes() {
  
  ::message::SceneEditEntityAttributeProtoData* temp = _impl_.entityattributes_;
  _impl_.entityattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditEntityAttributeProtoData* UGCMapRuntimeData::unsafe_arena_release_entityattributes() {
  // @@protoc_insertion_point(field_release:message.UGCMapRuntimeData.EntityAttributes)
  
  ::message::SceneEditEntityAttributeProtoData* temp = _impl_.entityattributes_;
  _impl_.entityattributes_ = nullptr;
  return temp;
}
inline ::message::SceneEditEntityAttributeProtoData* UGCMapRuntimeData::_internal_mutable_entityattributes() {
  
  if (_impl_.entityattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditEntityAttributeProtoData>(GetArenaForAllocation());
    _impl_.entityattributes_ = p;
  }
  return _impl_.entityattributes_;
}
inline ::message::SceneEditEntityAttributeProtoData* UGCMapRuntimeData::mutable_entityattributes() {
  ::message::SceneEditEntityAttributeProtoData* _msg = _internal_mutable_entityattributes();
  // @@protoc_insertion_point(field_mutable:message.UGCMapRuntimeData.EntityAttributes)
  return _msg;
}
inline void UGCMapRuntimeData::set_allocated_entityattributes(::message::SceneEditEntityAttributeProtoData* entityattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entityattributes_;
  }
  if (entityattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entityattributes);
    if (message_arena != submessage_arena) {
      entityattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entityattributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entityattributes_ = entityattributes;
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapRuntimeData.EntityAttributes)
}

// -------------------------------------------------------------------

// SceneEditObjectProtoData

// uint32 id_dir_posy = 1;
inline void SceneEditObjectProtoData::clear_id_dir_posy() {
  _impl_.id_dir_posy_ = 0u;
}
inline uint32_t SceneEditObjectProtoData::_internal_id_dir_posy() const {
  return _impl_.id_dir_posy_;
}
inline uint32_t SceneEditObjectProtoData::id_dir_posy() const {
  // @@protoc_insertion_point(field_get:message.SceneEditObjectProtoData.id_dir_posy)
  return _internal_id_dir_posy();
}
inline void SceneEditObjectProtoData::_internal_set_id_dir_posy(uint32_t value) {
  
  _impl_.id_dir_posy_ = value;
}
inline void SceneEditObjectProtoData::set_id_dir_posy(uint32_t value) {
  _internal_set_id_dir_posy(value);
  // @@protoc_insertion_point(field_set:message.SceneEditObjectProtoData.id_dir_posy)
}

// uint32 pos_xz = 2;
inline void SceneEditObjectProtoData::clear_pos_xz() {
  _impl_.pos_xz_ = 0u;
}
inline uint32_t SceneEditObjectProtoData::_internal_pos_xz() const {
  return _impl_.pos_xz_;
}
inline uint32_t SceneEditObjectProtoData::pos_xz() const {
  // @@protoc_insertion_point(field_get:message.SceneEditObjectProtoData.pos_xz)
  return _internal_pos_xz();
}
inline void SceneEditObjectProtoData::_internal_set_pos_xz(uint32_t value) {
  
  _impl_.pos_xz_ = value;
}
inline void SceneEditObjectProtoData::set_pos_xz(uint32_t value) {
  _internal_set_pos_xz(value);
  // @@protoc_insertion_point(field_set:message.SceneEditObjectProtoData.pos_xz)
}

// uint32 extra_base_info_instance_id = 3;
inline void SceneEditObjectProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditObjectProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditObjectProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditObjectProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditObjectProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditObjectProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditObjectProtoData.extra_base_info_instance_id)
}

// uint32 extra_base_info_free_dir = 4;
inline void SceneEditObjectProtoData::clear_extra_base_info_free_dir() {
  _impl_.extra_base_info_free_dir_ = 0u;
}
inline uint32_t SceneEditObjectProtoData::_internal_extra_base_info_free_dir() const {
  return _impl_.extra_base_info_free_dir_;
}
inline uint32_t SceneEditObjectProtoData::extra_base_info_free_dir() const {
  // @@protoc_insertion_point(field_get:message.SceneEditObjectProtoData.extra_base_info_free_dir)
  return _internal_extra_base_info_free_dir();
}
inline void SceneEditObjectProtoData::_internal_set_extra_base_info_free_dir(uint32_t value) {
  
  _impl_.extra_base_info_free_dir_ = value;
}
inline void SceneEditObjectProtoData::set_extra_base_info_free_dir(uint32_t value) {
  _internal_set_extra_base_info_free_dir(value);
  // @@protoc_insertion_point(field_set:message.SceneEditObjectProtoData.extra_base_info_free_dir)
}

// uint32 levelobject_id_by_tag = 5;
inline void SceneEditObjectProtoData::clear_levelobject_id_by_tag() {
  _impl_.levelobject_id_by_tag_ = 0u;
}
inline uint32_t SceneEditObjectProtoData::_internal_levelobject_id_by_tag() const {
  return _impl_.levelobject_id_by_tag_;
}
inline uint32_t SceneEditObjectProtoData::levelobject_id_by_tag() const {
  // @@protoc_insertion_point(field_get:message.SceneEditObjectProtoData.levelobject_id_by_tag)
  return _internal_levelobject_id_by_tag();
}
inline void SceneEditObjectProtoData::_internal_set_levelobject_id_by_tag(uint32_t value) {
  
  _impl_.levelobject_id_by_tag_ = value;
}
inline void SceneEditObjectProtoData::set_levelobject_id_by_tag(uint32_t value) {
  _internal_set_levelobject_id_by_tag(value);
  // @@protoc_insertion_point(field_set:message.SceneEditObjectProtoData.levelobject_id_by_tag)
}

// string logic_entity_id = 6;
inline void SceneEditObjectProtoData::clear_logic_entity_id() {
  _impl_.logic_entity_id_.ClearToEmpty();
}
inline const std::string& SceneEditObjectProtoData::logic_entity_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditObjectProtoData.logic_entity_id)
  return _internal_logic_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneEditObjectProtoData::set_logic_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logic_entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.SceneEditObjectProtoData.logic_entity_id)
}
inline std::string* SceneEditObjectProtoData::mutable_logic_entity_id() {
  std::string* _s = _internal_mutable_logic_entity_id();
  // @@protoc_insertion_point(field_mutable:message.SceneEditObjectProtoData.logic_entity_id)
  return _s;
}
inline const std::string& SceneEditObjectProtoData::_internal_logic_entity_id() const {
  return _impl_.logic_entity_id_.Get();
}
inline void SceneEditObjectProtoData::_internal_set_logic_entity_id(const std::string& value) {
  
  _impl_.logic_entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneEditObjectProtoData::_internal_mutable_logic_entity_id() {
  
  return _impl_.logic_entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneEditObjectProtoData::release_logic_entity_id() {
  // @@protoc_insertion_point(field_release:message.SceneEditObjectProtoData.logic_entity_id)
  return _impl_.logic_entity_id_.Release();
}
inline void SceneEditObjectProtoData::set_allocated_logic_entity_id(std::string* logic_entity_id) {
  if (logic_entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.logic_entity_id_.SetAllocated(logic_entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logic_entity_id_.IsDefault()) {
    _impl_.logic_entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditObjectProtoData.logic_entity_id)
}

// string customized_name = 7;
inline void SceneEditObjectProtoData::clear_customized_name() {
  _impl_.customized_name_.ClearToEmpty();
}
inline const std::string& SceneEditObjectProtoData::customized_name() const {
  // @@protoc_insertion_point(field_get:message.SceneEditObjectProtoData.customized_name)
  return _internal_customized_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneEditObjectProtoData::set_customized_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.customized_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.SceneEditObjectProtoData.customized_name)
}
inline std::string* SceneEditObjectProtoData::mutable_customized_name() {
  std::string* _s = _internal_mutable_customized_name();
  // @@protoc_insertion_point(field_mutable:message.SceneEditObjectProtoData.customized_name)
  return _s;
}
inline const std::string& SceneEditObjectProtoData::_internal_customized_name() const {
  return _impl_.customized_name_.Get();
}
inline void SceneEditObjectProtoData::_internal_set_customized_name(const std::string& value) {
  
  _impl_.customized_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneEditObjectProtoData::_internal_mutable_customized_name() {
  
  return _impl_.customized_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneEditObjectProtoData::release_customized_name() {
  // @@protoc_insertion_point(field_release:message.SceneEditObjectProtoData.customized_name)
  return _impl_.customized_name_.Release();
}
inline void SceneEditObjectProtoData::set_allocated_customized_name(std::string* customized_name) {
  if (customized_name != nullptr) {
    
  } else {
    
  }
  _impl_.customized_name_.SetAllocated(customized_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.customized_name_.IsDefault()) {
    _impl_.customized_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditObjectProtoData.customized_name)
}

// uint32 reset_per_round = 8;
inline void SceneEditObjectProtoData::clear_reset_per_round() {
  _impl_.reset_per_round_ = 0u;
}
inline uint32_t SceneEditObjectProtoData::_internal_reset_per_round() const {
  return _impl_.reset_per_round_;
}
inline uint32_t SceneEditObjectProtoData::reset_per_round() const {
  // @@protoc_insertion_point(field_get:message.SceneEditObjectProtoData.reset_per_round)
  return _internal_reset_per_round();
}
inline void SceneEditObjectProtoData::_internal_set_reset_per_round(uint32_t value) {
  
  _impl_.reset_per_round_ = value;
}
inline void SceneEditObjectProtoData::set_reset_per_round(uint32_t value) {
  _internal_set_reset_per_round(value);
  // @@protoc_insertion_point(field_set:message.SceneEditObjectProtoData.reset_per_round)
}

// string obj_color = 9 [deprecated = true];
inline void SceneEditObjectProtoData::clear_obj_color() {
  _impl_.obj_color_.ClearToEmpty();
}
inline const std::string& SceneEditObjectProtoData::obj_color() const {
  // @@protoc_insertion_point(field_get:message.SceneEditObjectProtoData.obj_color)
  return _internal_obj_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneEditObjectProtoData::set_obj_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.obj_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.SceneEditObjectProtoData.obj_color)
}
inline std::string* SceneEditObjectProtoData::mutable_obj_color() {
  std::string* _s = _internal_mutable_obj_color();
  // @@protoc_insertion_point(field_mutable:message.SceneEditObjectProtoData.obj_color)
  return _s;
}
inline const std::string& SceneEditObjectProtoData::_internal_obj_color() const {
  return _impl_.obj_color_.Get();
}
inline void SceneEditObjectProtoData::_internal_set_obj_color(const std::string& value) {
  
  _impl_.obj_color_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneEditObjectProtoData::_internal_mutable_obj_color() {
  
  return _impl_.obj_color_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneEditObjectProtoData::release_obj_color() {
  // @@protoc_insertion_point(field_release:message.SceneEditObjectProtoData.obj_color)
  return _impl_.obj_color_.Release();
}
inline void SceneEditObjectProtoData::set_allocated_obj_color(std::string* obj_color) {
  if (obj_color != nullptr) {
    
  } else {
    
  }
  _impl_.obj_color_.SetAllocated(obj_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obj_color_.IsDefault()) {
    _impl_.obj_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditObjectProtoData.obj_color)
}

// -------------------------------------------------------------------

// SceneEditEntityProtoData

// repeated .message.SceneEditObjectProtoData objects = 1;
inline int SceneEditEntityProtoData::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int SceneEditEntityProtoData::objects_size() const {
  return _internal_objects_size();
}
inline void SceneEditEntityProtoData::clear_objects() {
  _impl_.objects_.Clear();
}
inline ::message::SceneEditObjectProtoData* SceneEditEntityProtoData::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityProtoData.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditObjectProtoData >*
SceneEditEntityProtoData::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityProtoData.objects)
  return &_impl_.objects_;
}
inline const ::message::SceneEditObjectProtoData& SceneEditEntityProtoData::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::message::SceneEditObjectProtoData& SceneEditEntityProtoData::objects(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityProtoData.objects)
  return _internal_objects(index);
}
inline ::message::SceneEditObjectProtoData* SceneEditEntityProtoData::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::message::SceneEditObjectProtoData* SceneEditEntityProtoData::add_objects() {
  ::message::SceneEditObjectProtoData* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityProtoData.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditObjectProtoData >&
SceneEditEntityProtoData::objects() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityProtoData.objects)
  return _impl_.objects_;
}

// -------------------------------------------------------------------

// SceneEditTeleportDoorProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditTeleportDoorProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditTeleportDoorProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditTeleportDoorProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTeleportDoorProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditTeleportDoorProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditTeleportDoorProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTeleportDoorProtoData.extra_base_info_instance_id)
}

// uint32 group_id = 2;
inline void SceneEditTeleportDoorProtoData::clear_group_id() {
  _impl_.group_id_ = 0u;
}
inline uint32_t SceneEditTeleportDoorProtoData::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint32_t SceneEditTeleportDoorProtoData::group_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTeleportDoorProtoData.group_id)
  return _internal_group_id();
}
inline void SceneEditTeleportDoorProtoData::_internal_set_group_id(uint32_t value) {
  
  _impl_.group_id_ = value;
}
inline void SceneEditTeleportDoorProtoData::set_group_id(uint32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTeleportDoorProtoData.group_id)
}

// uint32 teleport_door_type = 3;
inline void SceneEditTeleportDoorProtoData::clear_teleport_door_type() {
  _impl_.teleport_door_type_ = 0u;
}
inline uint32_t SceneEditTeleportDoorProtoData::_internal_teleport_door_type() const {
  return _impl_.teleport_door_type_;
}
inline uint32_t SceneEditTeleportDoorProtoData::teleport_door_type() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTeleportDoorProtoData.teleport_door_type)
  return _internal_teleport_door_type();
}
inline void SceneEditTeleportDoorProtoData::_internal_set_teleport_door_type(uint32_t value) {
  
  _impl_.teleport_door_type_ = value;
}
inline void SceneEditTeleportDoorProtoData::set_teleport_door_type(uint32_t value) {
  _internal_set_teleport_door_type(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTeleportDoorProtoData.teleport_door_type)
}

// uint32 target_door_id = 4;
inline void SceneEditTeleportDoorProtoData::clear_target_door_id() {
  _impl_.target_door_id_ = 0u;
}
inline uint32_t SceneEditTeleportDoorProtoData::_internal_target_door_id() const {
  return _impl_.target_door_id_;
}
inline uint32_t SceneEditTeleportDoorProtoData::target_door_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTeleportDoorProtoData.target_door_id)
  return _internal_target_door_id();
}
inline void SceneEditTeleportDoorProtoData::_internal_set_target_door_id(uint32_t value) {
  
  _impl_.target_door_id_ = value;
}
inline void SceneEditTeleportDoorProtoData::set_target_door_id(uint32_t value) {
  _internal_set_target_door_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTeleportDoorProtoData.target_door_id)
}

// uint32 trigger_type = 5;
inline void SceneEditTeleportDoorProtoData::clear_trigger_type() {
  _impl_.trigger_type_ = 0u;
}
inline uint32_t SceneEditTeleportDoorProtoData::_internal_trigger_type() const {
  return _impl_.trigger_type_;
}
inline uint32_t SceneEditTeleportDoorProtoData::trigger_type() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTeleportDoorProtoData.trigger_type)
  return _internal_trigger_type();
}
inline void SceneEditTeleportDoorProtoData::_internal_set_trigger_type(uint32_t value) {
  
  _impl_.trigger_type_ = value;
}
inline void SceneEditTeleportDoorProtoData::set_trigger_type(uint32_t value) {
  _internal_set_trigger_type(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTeleportDoorProtoData.trigger_type)
}

// bool teleport_active = 6;
inline void SceneEditTeleportDoorProtoData::clear_teleport_active() {
  _impl_.teleport_active_ = false;
}
inline bool SceneEditTeleportDoorProtoData::_internal_teleport_active() const {
  return _impl_.teleport_active_;
}
inline bool SceneEditTeleportDoorProtoData::teleport_active() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTeleportDoorProtoData.teleport_active)
  return _internal_teleport_active();
}
inline void SceneEditTeleportDoorProtoData::_internal_set_teleport_active(bool value) {
  
  _impl_.teleport_active_ = value;
}
inline void SceneEditTeleportDoorProtoData::set_teleport_active(bool value) {
  _internal_set_teleport_active(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTeleportDoorProtoData.teleport_active)
}

// bool isvalid_teleport_door_type = 7;
inline void SceneEditTeleportDoorProtoData::clear_isvalid_teleport_door_type() {
  _impl_.isvalid_teleport_door_type_ = false;
}
inline bool SceneEditTeleportDoorProtoData::_internal_isvalid_teleport_door_type() const {
  return _impl_.isvalid_teleport_door_type_;
}
inline bool SceneEditTeleportDoorProtoData::isvalid_teleport_door_type() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTeleportDoorProtoData.isvalid_teleport_door_type)
  return _internal_isvalid_teleport_door_type();
}
inline void SceneEditTeleportDoorProtoData::_internal_set_isvalid_teleport_door_type(bool value) {
  
  _impl_.isvalid_teleport_door_type_ = value;
}
inline void SceneEditTeleportDoorProtoData::set_isvalid_teleport_door_type(bool value) {
  _internal_set_isvalid_teleport_door_type(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTeleportDoorProtoData.isvalid_teleport_door_type)
}

// -------------------------------------------------------------------

// SceneEditPianoKeyProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditPianoKeyProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditPianoKeyProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditPianoKeyProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditPianoKeyProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditPianoKeyProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditPianoKeyProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditPianoKeyProtoData.extra_base_info_instance_id)
}

// uint32 key_id = 2;
inline void SceneEditPianoKeyProtoData::clear_key_id() {
  _impl_.key_id_ = 0u;
}
inline uint32_t SceneEditPianoKeyProtoData::_internal_key_id() const {
  return _impl_.key_id_;
}
inline uint32_t SceneEditPianoKeyProtoData::key_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditPianoKeyProtoData.key_id)
  return _internal_key_id();
}
inline void SceneEditPianoKeyProtoData::_internal_set_key_id(uint32_t value) {
  
  _impl_.key_id_ = value;
}
inline void SceneEditPianoKeyProtoData::set_key_id(uint32_t value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditPianoKeyProtoData.key_id)
}

// -------------------------------------------------------------------

// SceneEditBuffProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditBuffProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditBuffProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditBuffProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBuffProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditBuffProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditBuffProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBuffProtoData.extra_base_info_instance_id)
}

// uint32 buff_type = 2;
inline void SceneEditBuffProtoData::clear_buff_type() {
  _impl_.buff_type_ = 0u;
}
inline uint32_t SceneEditBuffProtoData::_internal_buff_type() const {
  return _impl_.buff_type_;
}
inline uint32_t SceneEditBuffProtoData::buff_type() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBuffProtoData.buff_type)
  return _internal_buff_type();
}
inline void SceneEditBuffProtoData::_internal_set_buff_type(uint32_t value) {
  
  _impl_.buff_type_ = value;
}
inline void SceneEditBuffProtoData::set_buff_type(uint32_t value) {
  _internal_set_buff_type(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBuffProtoData.buff_type)
}

// uint32 buff_refresh_time_sec = 3;
inline void SceneEditBuffProtoData::clear_buff_refresh_time_sec() {
  _impl_.buff_refresh_time_sec_ = 0u;
}
inline uint32_t SceneEditBuffProtoData::_internal_buff_refresh_time_sec() const {
  return _impl_.buff_refresh_time_sec_;
}
inline uint32_t SceneEditBuffProtoData::buff_refresh_time_sec() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBuffProtoData.buff_refresh_time_sec)
  return _internal_buff_refresh_time_sec();
}
inline void SceneEditBuffProtoData::_internal_set_buff_refresh_time_sec(uint32_t value) {
  
  _impl_.buff_refresh_time_sec_ = value;
}
inline void SceneEditBuffProtoData::set_buff_refresh_time_sec(uint32_t value) {
  _internal_set_buff_refresh_time_sec(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBuffProtoData.buff_refresh_time_sec)
}

// -------------------------------------------------------------------

// SceneEditMoveObjectProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditMoveObjectProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditMoveObjectProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditMoveObjectProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditMoveObjectProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditMoveObjectProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.extra_base_info_instance_id)
}

// uint32 moveConfigID = 2;
inline void SceneEditMoveObjectProtoData::clear_moveconfigid() {
  _impl_.moveconfigid_ = 0u;
}
inline uint32_t SceneEditMoveObjectProtoData::_internal_moveconfigid() const {
  return _impl_.moveconfigid_;
}
inline uint32_t SceneEditMoveObjectProtoData::moveconfigid() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.moveConfigID)
  return _internal_moveconfigid();
}
inline void SceneEditMoveObjectProtoData::_internal_set_moveconfigid(uint32_t value) {
  
  _impl_.moveconfigid_ = value;
}
inline void SceneEditMoveObjectProtoData::set_moveconfigid(uint32_t value) {
  _internal_set_moveconfigid(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.moveConfigID)
}

// bool motionEditMode = 3;
inline void SceneEditMoveObjectProtoData::clear_motioneditmode() {
  _impl_.motioneditmode_ = false;
}
inline bool SceneEditMoveObjectProtoData::_internal_motioneditmode() const {
  return _impl_.motioneditmode_;
}
inline bool SceneEditMoveObjectProtoData::motioneditmode() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.motionEditMode)
  return _internal_motioneditmode();
}
inline void SceneEditMoveObjectProtoData::_internal_set_motioneditmode(bool value) {
  
  _impl_.motioneditmode_ = value;
}
inline void SceneEditMoveObjectProtoData::set_motioneditmode(bool value) {
  _internal_set_motioneditmode(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.motionEditMode)
}

// uint32 motionValue = 4;
inline void SceneEditMoveObjectProtoData::clear_motionvalue() {
  _impl_.motionvalue_ = 0u;
}
inline uint32_t SceneEditMoveObjectProtoData::_internal_motionvalue() const {
  return _impl_.motionvalue_;
}
inline uint32_t SceneEditMoveObjectProtoData::motionvalue() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.motionValue)
  return _internal_motionvalue();
}
inline void SceneEditMoveObjectProtoData::_internal_set_motionvalue(uint32_t value) {
  
  _impl_.motionvalue_ = value;
}
inline void SceneEditMoveObjectProtoData::set_motionvalue(uint32_t value) {
  _internal_set_motionvalue(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.motionValue)
}

// bool motionCustomized = 5;
inline void SceneEditMoveObjectProtoData::clear_motioncustomized() {
  _impl_.motioncustomized_ = false;
}
inline bool SceneEditMoveObjectProtoData::_internal_motioncustomized() const {
  return _impl_.motioncustomized_;
}
inline bool SceneEditMoveObjectProtoData::motioncustomized() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.motionCustomized)
  return _internal_motioncustomized();
}
inline void SceneEditMoveObjectProtoData::_internal_set_motioncustomized(bool value) {
  
  _impl_.motioncustomized_ = value;
}
inline void SceneEditMoveObjectProtoData::set_motioncustomized(bool value) {
  _internal_set_motioncustomized(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.motionCustomized)
}

// uint32 motionType = 6;
inline void SceneEditMoveObjectProtoData::clear_motiontype() {
  _impl_.motiontype_ = 0u;
}
inline uint32_t SceneEditMoveObjectProtoData::_internal_motiontype() const {
  return _impl_.motiontype_;
}
inline uint32_t SceneEditMoveObjectProtoData::motiontype() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.motionType)
  return _internal_motiontype();
}
inline void SceneEditMoveObjectProtoData::_internal_set_motiontype(uint32_t value) {
  
  _impl_.motiontype_ = value;
}
inline void SceneEditMoveObjectProtoData::set_motiontype(uint32_t value) {
  _internal_set_motiontype(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.motionType)
}

// uint32 motionValueX = 7;
inline void SceneEditMoveObjectProtoData::clear_motionvaluex() {
  _impl_.motionvaluex_ = 0u;
}
inline uint32_t SceneEditMoveObjectProtoData::_internal_motionvaluex() const {
  return _impl_.motionvaluex_;
}
inline uint32_t SceneEditMoveObjectProtoData::motionvaluex() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.motionValueX)
  return _internal_motionvaluex();
}
inline void SceneEditMoveObjectProtoData::_internal_set_motionvaluex(uint32_t value) {
  
  _impl_.motionvaluex_ = value;
}
inline void SceneEditMoveObjectProtoData::set_motionvaluex(uint32_t value) {
  _internal_set_motionvaluex(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.motionValueX)
}

// uint32 motionValueY = 8;
inline void SceneEditMoveObjectProtoData::clear_motionvaluey() {
  _impl_.motionvaluey_ = 0u;
}
inline uint32_t SceneEditMoveObjectProtoData::_internal_motionvaluey() const {
  return _impl_.motionvaluey_;
}
inline uint32_t SceneEditMoveObjectProtoData::motionvaluey() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.motionValueY)
  return _internal_motionvaluey();
}
inline void SceneEditMoveObjectProtoData::_internal_set_motionvaluey(uint32_t value) {
  
  _impl_.motionvaluey_ = value;
}
inline void SceneEditMoveObjectProtoData::set_motionvaluey(uint32_t value) {
  _internal_set_motionvaluey(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.motionValueY)
}

// uint32 motionValueZ = 9;
inline void SceneEditMoveObjectProtoData::clear_motionvaluez() {
  _impl_.motionvaluez_ = 0u;
}
inline uint32_t SceneEditMoveObjectProtoData::_internal_motionvaluez() const {
  return _impl_.motionvaluez_;
}
inline uint32_t SceneEditMoveObjectProtoData::motionvaluez() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.motionValueZ)
  return _internal_motionvaluez();
}
inline void SceneEditMoveObjectProtoData::_internal_set_motionvaluez(uint32_t value) {
  
  _impl_.motionvaluez_ = value;
}
inline void SceneEditMoveObjectProtoData::set_motionvaluez(uint32_t value) {
  _internal_set_motionvaluez(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.motionValueZ)
}

// uint32 motionTime = 10;
inline void SceneEditMoveObjectProtoData::clear_motiontime() {
  _impl_.motiontime_ = 0u;
}
inline uint32_t SceneEditMoveObjectProtoData::_internal_motiontime() const {
  return _impl_.motiontime_;
}
inline uint32_t SceneEditMoveObjectProtoData::motiontime() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.motionTime)
  return _internal_motiontime();
}
inline void SceneEditMoveObjectProtoData::_internal_set_motiontime(uint32_t value) {
  
  _impl_.motiontime_ = value;
}
inline void SceneEditMoveObjectProtoData::set_motiontime(uint32_t value) {
  _internal_set_motiontime(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.motionTime)
}

// uint32 StayTime = 11;
inline void SceneEditMoveObjectProtoData::clear_staytime() {
  _impl_.staytime_ = 0u;
}
inline uint32_t SceneEditMoveObjectProtoData::_internal_staytime() const {
  return _impl_.staytime_;
}
inline uint32_t SceneEditMoveObjectProtoData::staytime() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.StayTime)
  return _internal_staytime();
}
inline void SceneEditMoveObjectProtoData::_internal_set_staytime(uint32_t value) {
  
  _impl_.staytime_ = value;
}
inline void SceneEditMoveObjectProtoData::set_staytime(uint32_t value) {
  _internal_set_staytime(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.StayTime)
}

// bool IsReset = 12;
inline void SceneEditMoveObjectProtoData::clear_isreset() {
  _impl_.isreset_ = false;
}
inline bool SceneEditMoveObjectProtoData::_internal_isreset() const {
  return _impl_.isreset_;
}
inline bool SceneEditMoveObjectProtoData::isreset() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMoveObjectProtoData.IsReset)
  return _internal_isreset();
}
inline void SceneEditMoveObjectProtoData::_internal_set_isreset(bool value) {
  
  _impl_.isreset_ = value;
}
inline void SceneEditMoveObjectProtoData::set_isreset(bool value) {
  _internal_set_isreset(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMoveObjectProtoData.IsReset)
}

// -------------------------------------------------------------------

// SceneEditScalableItemProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditScalableItemProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditScalableItemProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditScalableItemProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditScalableItemProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditScalableItemProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditScalableItemProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditScalableItemProtoData.extra_base_info_instance_id)
}

// uint32 ScaleX = 2;
inline void SceneEditScalableItemProtoData::clear_scalex() {
  _impl_.scalex_ = 0u;
}
inline uint32_t SceneEditScalableItemProtoData::_internal_scalex() const {
  return _impl_.scalex_;
}
inline uint32_t SceneEditScalableItemProtoData::scalex() const {
  // @@protoc_insertion_point(field_get:message.SceneEditScalableItemProtoData.ScaleX)
  return _internal_scalex();
}
inline void SceneEditScalableItemProtoData::_internal_set_scalex(uint32_t value) {
  
  _impl_.scalex_ = value;
}
inline void SceneEditScalableItemProtoData::set_scalex(uint32_t value) {
  _internal_set_scalex(value);
  // @@protoc_insertion_point(field_set:message.SceneEditScalableItemProtoData.ScaleX)
}

// uint32 ScaleY = 3;
inline void SceneEditScalableItemProtoData::clear_scaley() {
  _impl_.scaley_ = 0u;
}
inline uint32_t SceneEditScalableItemProtoData::_internal_scaley() const {
  return _impl_.scaley_;
}
inline uint32_t SceneEditScalableItemProtoData::scaley() const {
  // @@protoc_insertion_point(field_get:message.SceneEditScalableItemProtoData.ScaleY)
  return _internal_scaley();
}
inline void SceneEditScalableItemProtoData::_internal_set_scaley(uint32_t value) {
  
  _impl_.scaley_ = value;
}
inline void SceneEditScalableItemProtoData::set_scaley(uint32_t value) {
  _internal_set_scaley(value);
  // @@protoc_insertion_point(field_set:message.SceneEditScalableItemProtoData.ScaleY)
}

// uint32 ScaleZ = 4;
inline void SceneEditScalableItemProtoData::clear_scalez() {
  _impl_.scalez_ = 0u;
}
inline uint32_t SceneEditScalableItemProtoData::_internal_scalez() const {
  return _impl_.scalez_;
}
inline uint32_t SceneEditScalableItemProtoData::scalez() const {
  // @@protoc_insertion_point(field_get:message.SceneEditScalableItemProtoData.ScaleZ)
  return _internal_scalez();
}
inline void SceneEditScalableItemProtoData::_internal_set_scalez(uint32_t value) {
  
  _impl_.scalez_ = value;
}
inline void SceneEditScalableItemProtoData::set_scalez(uint32_t value) {
  _internal_set_scalez(value);
  // @@protoc_insertion_point(field_set:message.SceneEditScalableItemProtoData.ScaleZ)
}

// -------------------------------------------------------------------

// SceneEditItemBoxProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditItemBoxProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditItemBoxProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditItemBoxProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditItemBoxProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditItemBoxProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditItemBoxProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditItemBoxProtoData.extra_base_info_instance_id)
}

// uint32 dropid = 2;
inline void SceneEditItemBoxProtoData::clear_dropid() {
  _impl_.dropid_ = 0u;
}
inline uint32_t SceneEditItemBoxProtoData::_internal_dropid() const {
  return _impl_.dropid_;
}
inline uint32_t SceneEditItemBoxProtoData::dropid() const {
  // @@protoc_insertion_point(field_get:message.SceneEditItemBoxProtoData.dropid)
  return _internal_dropid();
}
inline void SceneEditItemBoxProtoData::_internal_set_dropid(uint32_t value) {
  
  _impl_.dropid_ = value;
}
inline void SceneEditItemBoxProtoData::set_dropid(uint32_t value) {
  _internal_set_dropid(value);
  // @@protoc_insertion_point(field_set:message.SceneEditItemBoxProtoData.dropid)
}

// .message.SceneEditCustomItemBoxProtoData customData = 3;
inline bool SceneEditItemBoxProtoData::_internal_has_customdata() const {
  return this != internal_default_instance() && _impl_.customdata_ != nullptr;
}
inline bool SceneEditItemBoxProtoData::has_customdata() const {
  return _internal_has_customdata();
}
inline void SceneEditItemBoxProtoData::clear_customdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.customdata_ != nullptr) {
    delete _impl_.customdata_;
  }
  _impl_.customdata_ = nullptr;
}
inline const ::message::SceneEditCustomItemBoxProtoData& SceneEditItemBoxProtoData::_internal_customdata() const {
  const ::message::SceneEditCustomItemBoxProtoData* p = _impl_.customdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditCustomItemBoxProtoData&>(
      ::message::_SceneEditCustomItemBoxProtoData_default_instance_);
}
inline const ::message::SceneEditCustomItemBoxProtoData& SceneEditItemBoxProtoData::customdata() const {
  // @@protoc_insertion_point(field_get:message.SceneEditItemBoxProtoData.customData)
  return _internal_customdata();
}
inline void SceneEditItemBoxProtoData::unsafe_arena_set_allocated_customdata(
    ::message::SceneEditCustomItemBoxProtoData* customdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customdata_);
  }
  _impl_.customdata_ = customdata;
  if (customdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.SceneEditItemBoxProtoData.customData)
}
inline ::message::SceneEditCustomItemBoxProtoData* SceneEditItemBoxProtoData::release_customdata() {
  
  ::message::SceneEditCustomItemBoxProtoData* temp = _impl_.customdata_;
  _impl_.customdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditCustomItemBoxProtoData* SceneEditItemBoxProtoData::unsafe_arena_release_customdata() {
  // @@protoc_insertion_point(field_release:message.SceneEditItemBoxProtoData.customData)
  
  ::message::SceneEditCustomItemBoxProtoData* temp = _impl_.customdata_;
  _impl_.customdata_ = nullptr;
  return temp;
}
inline ::message::SceneEditCustomItemBoxProtoData* SceneEditItemBoxProtoData::_internal_mutable_customdata() {
  
  if (_impl_.customdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditCustomItemBoxProtoData>(GetArenaForAllocation());
    _impl_.customdata_ = p;
  }
  return _impl_.customdata_;
}
inline ::message::SceneEditCustomItemBoxProtoData* SceneEditItemBoxProtoData::mutable_customdata() {
  ::message::SceneEditCustomItemBoxProtoData* _msg = _internal_mutable_customdata();
  // @@protoc_insertion_point(field_mutable:message.SceneEditItemBoxProtoData.customData)
  return _msg;
}
inline void SceneEditItemBoxProtoData::set_allocated_customdata(::message::SceneEditCustomItemBoxProtoData* customdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.customdata_;
  }
  if (customdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(customdata);
    if (message_arena != submessage_arena) {
      customdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.customdata_ = customdata;
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditItemBoxProtoData.customData)
}

// -------------------------------------------------------------------

// SceneEditCustomItemBoxProtoData

// uint32 refreshCount = 1;
inline void SceneEditCustomItemBoxProtoData::clear_refreshcount() {
  _impl_.refreshcount_ = 0u;
}
inline uint32_t SceneEditCustomItemBoxProtoData::_internal_refreshcount() const {
  return _impl_.refreshcount_;
}
inline uint32_t SceneEditCustomItemBoxProtoData::refreshcount() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomItemBoxProtoData.refreshCount)
  return _internal_refreshcount();
}
inline void SceneEditCustomItemBoxProtoData::_internal_set_refreshcount(uint32_t value) {
  
  _impl_.refreshcount_ = value;
}
inline void SceneEditCustomItemBoxProtoData::set_refreshcount(uint32_t value) {
  _internal_set_refreshcount(value);
  // @@protoc_insertion_point(field_set:message.SceneEditCustomItemBoxProtoData.refreshCount)
}

// repeated .message.SceneEditCustomItemBoxGroupProtoData lootGroups = 2;
inline int SceneEditCustomItemBoxProtoData::_internal_lootgroups_size() const {
  return _impl_.lootgroups_.size();
}
inline int SceneEditCustomItemBoxProtoData::lootgroups_size() const {
  return _internal_lootgroups_size();
}
inline void SceneEditCustomItemBoxProtoData::clear_lootgroups() {
  _impl_.lootgroups_.Clear();
}
inline ::message::SceneEditCustomItemBoxGroupProtoData* SceneEditCustomItemBoxProtoData::mutable_lootgroups(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditCustomItemBoxProtoData.lootGroups)
  return _impl_.lootgroups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxGroupProtoData >*
SceneEditCustomItemBoxProtoData::mutable_lootgroups() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditCustomItemBoxProtoData.lootGroups)
  return &_impl_.lootgroups_;
}
inline const ::message::SceneEditCustomItemBoxGroupProtoData& SceneEditCustomItemBoxProtoData::_internal_lootgroups(int index) const {
  return _impl_.lootgroups_.Get(index);
}
inline const ::message::SceneEditCustomItemBoxGroupProtoData& SceneEditCustomItemBoxProtoData::lootgroups(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomItemBoxProtoData.lootGroups)
  return _internal_lootgroups(index);
}
inline ::message::SceneEditCustomItemBoxGroupProtoData* SceneEditCustomItemBoxProtoData::_internal_add_lootgroups() {
  return _impl_.lootgroups_.Add();
}
inline ::message::SceneEditCustomItemBoxGroupProtoData* SceneEditCustomItemBoxProtoData::add_lootgroups() {
  ::message::SceneEditCustomItemBoxGroupProtoData* _add = _internal_add_lootgroups();
  // @@protoc_insertion_point(field_add:message.SceneEditCustomItemBoxProtoData.lootGroups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxGroupProtoData >&
SceneEditCustomItemBoxProtoData::lootgroups() const {
  // @@protoc_insertion_point(field_list:message.SceneEditCustomItemBoxProtoData.lootGroups)
  return _impl_.lootgroups_;
}

// -------------------------------------------------------------------

// SceneEditCustomItemBoxGroupProtoData

// uint32 refreshCount = 1;
inline void SceneEditCustomItemBoxGroupProtoData::clear_refreshcount() {
  _impl_.refreshcount_ = 0u;
}
inline uint32_t SceneEditCustomItemBoxGroupProtoData::_internal_refreshcount() const {
  return _impl_.refreshcount_;
}
inline uint32_t SceneEditCustomItemBoxGroupProtoData::refreshcount() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomItemBoxGroupProtoData.refreshCount)
  return _internal_refreshcount();
}
inline void SceneEditCustomItemBoxGroupProtoData::_internal_set_refreshcount(uint32_t value) {
  
  _impl_.refreshcount_ = value;
}
inline void SceneEditCustomItemBoxGroupProtoData::set_refreshcount(uint32_t value) {
  _internal_set_refreshcount(value);
  // @@protoc_insertion_point(field_set:message.SceneEditCustomItemBoxGroupProtoData.refreshCount)
}

// repeated .message.SceneEditCustomItemBoxItemProtoData lootItems = 2;
inline int SceneEditCustomItemBoxGroupProtoData::_internal_lootitems_size() const {
  return _impl_.lootitems_.size();
}
inline int SceneEditCustomItemBoxGroupProtoData::lootitems_size() const {
  return _internal_lootitems_size();
}
inline void SceneEditCustomItemBoxGroupProtoData::clear_lootitems() {
  _impl_.lootitems_.Clear();
}
inline ::message::SceneEditCustomItemBoxItemProtoData* SceneEditCustomItemBoxGroupProtoData::mutable_lootitems(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditCustomItemBoxGroupProtoData.lootItems)
  return _impl_.lootitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxItemProtoData >*
SceneEditCustomItemBoxGroupProtoData::mutable_lootitems() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditCustomItemBoxGroupProtoData.lootItems)
  return &_impl_.lootitems_;
}
inline const ::message::SceneEditCustomItemBoxItemProtoData& SceneEditCustomItemBoxGroupProtoData::_internal_lootitems(int index) const {
  return _impl_.lootitems_.Get(index);
}
inline const ::message::SceneEditCustomItemBoxItemProtoData& SceneEditCustomItemBoxGroupProtoData::lootitems(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomItemBoxGroupProtoData.lootItems)
  return _internal_lootitems(index);
}
inline ::message::SceneEditCustomItemBoxItemProtoData* SceneEditCustomItemBoxGroupProtoData::_internal_add_lootitems() {
  return _impl_.lootitems_.Add();
}
inline ::message::SceneEditCustomItemBoxItemProtoData* SceneEditCustomItemBoxGroupProtoData::add_lootitems() {
  ::message::SceneEditCustomItemBoxItemProtoData* _add = _internal_add_lootitems();
  // @@protoc_insertion_point(field_add:message.SceneEditCustomItemBoxGroupProtoData.lootItems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomItemBoxItemProtoData >&
SceneEditCustomItemBoxGroupProtoData::lootitems() const {
  // @@protoc_insertion_point(field_list:message.SceneEditCustomItemBoxGroupProtoData.lootItems)
  return _impl_.lootitems_;
}

// bool marked = 3;
inline void SceneEditCustomItemBoxGroupProtoData::clear_marked() {
  _impl_.marked_ = false;
}
inline bool SceneEditCustomItemBoxGroupProtoData::_internal_marked() const {
  return _impl_.marked_;
}
inline bool SceneEditCustomItemBoxGroupProtoData::marked() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomItemBoxGroupProtoData.marked)
  return _internal_marked();
}
inline void SceneEditCustomItemBoxGroupProtoData::_internal_set_marked(bool value) {
  
  _impl_.marked_ = value;
}
inline void SceneEditCustomItemBoxGroupProtoData::set_marked(bool value) {
  _internal_set_marked(value);
  // @@protoc_insertion_point(field_set:message.SceneEditCustomItemBoxGroupProtoData.marked)
}

// -------------------------------------------------------------------

// SceneEditCustomItemBoxItemProtoData

// uint32 itemid = 1;
inline void SceneEditCustomItemBoxItemProtoData::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t SceneEditCustomItemBoxItemProtoData::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t SceneEditCustomItemBoxItemProtoData::itemid() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomItemBoxItemProtoData.itemid)
  return _internal_itemid();
}
inline void SceneEditCustomItemBoxItemProtoData::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void SceneEditCustomItemBoxItemProtoData::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:message.SceneEditCustomItemBoxItemProtoData.itemid)
}

// uint32 num = 2;
inline void SceneEditCustomItemBoxItemProtoData::clear_num() {
  _impl_.num_ = 0u;
}
inline uint32_t SceneEditCustomItemBoxItemProtoData::_internal_num() const {
  return _impl_.num_;
}
inline uint32_t SceneEditCustomItemBoxItemProtoData::num() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomItemBoxItemProtoData.num)
  return _internal_num();
}
inline void SceneEditCustomItemBoxItemProtoData::_internal_set_num(uint32_t value) {
  
  _impl_.num_ = value;
}
inline void SceneEditCustomItemBoxItemProtoData::set_num(uint32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:message.SceneEditCustomItemBoxItemProtoData.num)
}

// bool marked = 3;
inline void SceneEditCustomItemBoxItemProtoData::clear_marked() {
  _impl_.marked_ = false;
}
inline bool SceneEditCustomItemBoxItemProtoData::_internal_marked() const {
  return _impl_.marked_;
}
inline bool SceneEditCustomItemBoxItemProtoData::marked() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomItemBoxItemProtoData.marked)
  return _internal_marked();
}
inline void SceneEditCustomItemBoxItemProtoData::_internal_set_marked(bool value) {
  
  _impl_.marked_ = value;
}
inline void SceneEditCustomItemBoxItemProtoData::set_marked(bool value) {
  _internal_set_marked(value);
  // @@protoc_insertion_point(field_set:message.SceneEditCustomItemBoxItemProtoData.marked)
}

// -------------------------------------------------------------------

// SceneEditTriggerProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditTriggerProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditTriggerProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditTriggerProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTriggerProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditTriggerProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditTriggerProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTriggerProtoData.extra_base_info_instance_id)
}

// uint32 trigger_type = 2;
inline void SceneEditTriggerProtoData::clear_trigger_type() {
  _impl_.trigger_type_ = 0u;
}
inline uint32_t SceneEditTriggerProtoData::_internal_trigger_type() const {
  return _impl_.trigger_type_;
}
inline uint32_t SceneEditTriggerProtoData::trigger_type() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTriggerProtoData.trigger_type)
  return _internal_trigger_type();
}
inline void SceneEditTriggerProtoData::_internal_set_trigger_type(uint32_t value) {
  
  _impl_.trigger_type_ = value;
}
inline void SceneEditTriggerProtoData::set_trigger_type(uint32_t value) {
  _internal_set_trigger_type(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTriggerProtoData.trigger_type)
}

// bool isShow = 3;
inline void SceneEditTriggerProtoData::clear_isshow() {
  _impl_.isshow_ = false;
}
inline bool SceneEditTriggerProtoData::_internal_isshow() const {
  return _impl_.isshow_;
}
inline bool SceneEditTriggerProtoData::isshow() const {
  // @@protoc_insertion_point(field_get:message.SceneEditTriggerProtoData.isShow)
  return _internal_isshow();
}
inline void SceneEditTriggerProtoData::_internal_set_isshow(bool value) {
  
  _impl_.isshow_ = value;
}
inline void SceneEditTriggerProtoData::set_isshow(bool value) {
  _internal_set_isshow(value);
  // @@protoc_insertion_point(field_set:message.SceneEditTriggerProtoData.isShow)
}

// -------------------------------------------------------------------

// SceneEditShapeTriggerProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditShapeTriggerProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditShapeTriggerProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditShapeTriggerProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditShapeTriggerProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditShapeTriggerProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditShapeTriggerProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditShapeTriggerProtoData.extra_base_info_instance_id)
}

// float radius = 2;
inline void SceneEditShapeTriggerProtoData::clear_radius() {
  _impl_.radius_ = 0;
}
inline float SceneEditShapeTriggerProtoData::_internal_radius() const {
  return _impl_.radius_;
}
inline float SceneEditShapeTriggerProtoData::radius() const {
  // @@protoc_insertion_point(field_get:message.SceneEditShapeTriggerProtoData.radius)
  return _internal_radius();
}
inline void SceneEditShapeTriggerProtoData::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void SceneEditShapeTriggerProtoData::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:message.SceneEditShapeTriggerProtoData.radius)
}

// float height = 3;
inline void SceneEditShapeTriggerProtoData::clear_height() {
  _impl_.height_ = 0;
}
inline float SceneEditShapeTriggerProtoData::_internal_height() const {
  return _impl_.height_;
}
inline float SceneEditShapeTriggerProtoData::height() const {
  // @@protoc_insertion_point(field_get:message.SceneEditShapeTriggerProtoData.height)
  return _internal_height();
}
inline void SceneEditShapeTriggerProtoData::_internal_set_height(float value) {
  
  _impl_.height_ = value;
}
inline void SceneEditShapeTriggerProtoData::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:message.SceneEditShapeTriggerProtoData.height)
}

// -------------------------------------------------------------------

// SceneEditBigToyBallProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditBigToyBallProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditBigToyBallProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditBigToyBallProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBigToyBallProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditBigToyBallProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditBigToyBallProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBigToyBallProtoData.extra_base_info_instance_id)
}

// float velocity_xz = 2;
inline void SceneEditBigToyBallProtoData::clear_velocity_xz() {
  _impl_.velocity_xz_ = 0;
}
inline float SceneEditBigToyBallProtoData::_internal_velocity_xz() const {
  return _impl_.velocity_xz_;
}
inline float SceneEditBigToyBallProtoData::velocity_xz() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBigToyBallProtoData.velocity_xz)
  return _internal_velocity_xz();
}
inline void SceneEditBigToyBallProtoData::_internal_set_velocity_xz(float value) {
  
  _impl_.velocity_xz_ = value;
}
inline void SceneEditBigToyBallProtoData::set_velocity_xz(float value) {
  _internal_set_velocity_xz(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBigToyBallProtoData.velocity_xz)
}

// float velocity_y = 3;
inline void SceneEditBigToyBallProtoData::clear_velocity_y() {
  _impl_.velocity_y_ = 0;
}
inline float SceneEditBigToyBallProtoData::_internal_velocity_y() const {
  return _impl_.velocity_y_;
}
inline float SceneEditBigToyBallProtoData::velocity_y() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBigToyBallProtoData.velocity_y)
  return _internal_velocity_y();
}
inline void SceneEditBigToyBallProtoData::_internal_set_velocity_y(float value) {
  
  _impl_.velocity_y_ = value;
}
inline void SceneEditBigToyBallProtoData::set_velocity_y(float value) {
  _internal_set_velocity_y(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBigToyBallProtoData.velocity_y)
}

// -------------------------------------------------------------------

// SceneEditMiniSentryProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditMiniSentryProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditMiniSentryProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditMiniSentryProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMiniSentryProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditMiniSentryProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditMiniSentryProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMiniSentryProtoData.extra_base_info_instance_id)
}

// uint32 hp = 2;
inline void SceneEditMiniSentryProtoData::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t SceneEditMiniSentryProtoData::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t SceneEditMiniSentryProtoData::hp() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMiniSentryProtoData.hp)
  return _internal_hp();
}
inline void SceneEditMiniSentryProtoData::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void SceneEditMiniSentryProtoData::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMiniSentryProtoData.hp)
}

// float defense = 3;
inline void SceneEditMiniSentryProtoData::clear_defense() {
  _impl_.defense_ = 0;
}
inline float SceneEditMiniSentryProtoData::_internal_defense() const {
  return _impl_.defense_;
}
inline float SceneEditMiniSentryProtoData::defense() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMiniSentryProtoData.defense)
  return _internal_defense();
}
inline void SceneEditMiniSentryProtoData::_internal_set_defense(float value) {
  
  _impl_.defense_ = value;
}
inline void SceneEditMiniSentryProtoData::set_defense(float value) {
  _internal_set_defense(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMiniSentryProtoData.defense)
}

// uint32 attack = 4;
inline void SceneEditMiniSentryProtoData::clear_attack() {
  _impl_.attack_ = 0u;
}
inline uint32_t SceneEditMiniSentryProtoData::_internal_attack() const {
  return _impl_.attack_;
}
inline uint32_t SceneEditMiniSentryProtoData::attack() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMiniSentryProtoData.attack)
  return _internal_attack();
}
inline void SceneEditMiniSentryProtoData::_internal_set_attack(uint32_t value) {
  
  _impl_.attack_ = value;
}
inline void SceneEditMiniSentryProtoData::set_attack(uint32_t value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMiniSentryProtoData.attack)
}

// float attack_interval = 5;
inline void SceneEditMiniSentryProtoData::clear_attack_interval() {
  _impl_.attack_interval_ = 0;
}
inline float SceneEditMiniSentryProtoData::_internal_attack_interval() const {
  return _impl_.attack_interval_;
}
inline float SceneEditMiniSentryProtoData::attack_interval() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMiniSentryProtoData.attack_interval)
  return _internal_attack_interval();
}
inline void SceneEditMiniSentryProtoData::_internal_set_attack_interval(float value) {
  
  _impl_.attack_interval_ = value;
}
inline void SceneEditMiniSentryProtoData::set_attack_interval(float value) {
  _internal_set_attack_interval(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMiniSentryProtoData.attack_interval)
}

// uint32 attack_range = 6;
inline void SceneEditMiniSentryProtoData::clear_attack_range() {
  _impl_.attack_range_ = 0u;
}
inline uint32_t SceneEditMiniSentryProtoData::_internal_attack_range() const {
  return _impl_.attack_range_;
}
inline uint32_t SceneEditMiniSentryProtoData::attack_range() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMiniSentryProtoData.attack_range)
  return _internal_attack_range();
}
inline void SceneEditMiniSentryProtoData::_internal_set_attack_range(uint32_t value) {
  
  _impl_.attack_range_ = value;
}
inline void SceneEditMiniSentryProtoData::set_attack_range(uint32_t value) {
  _internal_set_attack_range(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMiniSentryProtoData.attack_range)
}

// uint32 team_id = 7;
inline void SceneEditMiniSentryProtoData::clear_team_id() {
  _impl_.team_id_ = 0u;
}
inline uint32_t SceneEditMiniSentryProtoData::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t SceneEditMiniSentryProtoData::team_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditMiniSentryProtoData.team_id)
  return _internal_team_id();
}
inline void SceneEditMiniSentryProtoData::_internal_set_team_id(uint32_t value) {
  
  _impl_.team_id_ = value;
}
inline void SceneEditMiniSentryProtoData::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditMiniSentryProtoData.team_id)
}

// -------------------------------------------------------------------

// SceneEditBotGeneratorProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditBotGeneratorProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditBotGeneratorProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditBotGeneratorProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBotGeneratorProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditBotGeneratorProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditBotGeneratorProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBotGeneratorProtoData.extra_base_info_instance_id)
}

// uint32 count_each_batch = 2;
inline void SceneEditBotGeneratorProtoData::clear_count_each_batch() {
  _impl_.count_each_batch_ = 0u;
}
inline uint32_t SceneEditBotGeneratorProtoData::_internal_count_each_batch() const {
  return _impl_.count_each_batch_;
}
inline uint32_t SceneEditBotGeneratorProtoData::count_each_batch() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBotGeneratorProtoData.count_each_batch)
  return _internal_count_each_batch();
}
inline void SceneEditBotGeneratorProtoData::_internal_set_count_each_batch(uint32_t value) {
  
  _impl_.count_each_batch_ = value;
}
inline void SceneEditBotGeneratorProtoData::set_count_each_batch(uint32_t value) {
  _internal_set_count_each_batch(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBotGeneratorProtoData.count_each_batch)
}

// uint32 batch_count = 3;
inline void SceneEditBotGeneratorProtoData::clear_batch_count() {
  _impl_.batch_count_ = 0u;
}
inline uint32_t SceneEditBotGeneratorProtoData::_internal_batch_count() const {
  return _impl_.batch_count_;
}
inline uint32_t SceneEditBotGeneratorProtoData::batch_count() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBotGeneratorProtoData.batch_count)
  return _internal_batch_count();
}
inline void SceneEditBotGeneratorProtoData::_internal_set_batch_count(uint32_t value) {
  
  _impl_.batch_count_ = value;
}
inline void SceneEditBotGeneratorProtoData::set_batch_count(uint32_t value) {
  _internal_set_batch_count(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBotGeneratorProtoData.batch_count)
}

// uint32 batch_interval = 4;
inline void SceneEditBotGeneratorProtoData::clear_batch_interval() {
  _impl_.batch_interval_ = 0u;
}
inline uint32_t SceneEditBotGeneratorProtoData::_internal_batch_interval() const {
  return _impl_.batch_interval_;
}
inline uint32_t SceneEditBotGeneratorProtoData::batch_interval() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBotGeneratorProtoData.batch_interval)
  return _internal_batch_interval();
}
inline void SceneEditBotGeneratorProtoData::_internal_set_batch_interval(uint32_t value) {
  
  _impl_.batch_interval_ = value;
}
inline void SceneEditBotGeneratorProtoData::set_batch_interval(uint32_t value) {
  _internal_set_batch_interval(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBotGeneratorProtoData.batch_interval)
}

// .message.UGCAIConfigParams bot_config = 5;
inline bool SceneEditBotGeneratorProtoData::_internal_has_bot_config() const {
  return this != internal_default_instance() && _impl_.bot_config_ != nullptr;
}
inline bool SceneEditBotGeneratorProtoData::has_bot_config() const {
  return _internal_has_bot_config();
}
inline void SceneEditBotGeneratorProtoData::clear_bot_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.bot_config_ != nullptr) {
    delete _impl_.bot_config_;
  }
  _impl_.bot_config_ = nullptr;
}
inline const ::message::UGCAIConfigParams& SceneEditBotGeneratorProtoData::_internal_bot_config() const {
  const ::message::UGCAIConfigParams* p = _impl_.bot_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCAIConfigParams&>(
      ::message::_UGCAIConfigParams_default_instance_);
}
inline const ::message::UGCAIConfigParams& SceneEditBotGeneratorProtoData::bot_config() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBotGeneratorProtoData.bot_config)
  return _internal_bot_config();
}
inline void SceneEditBotGeneratorProtoData::unsafe_arena_set_allocated_bot_config(
    ::message::UGCAIConfigParams* bot_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bot_config_);
  }
  _impl_.bot_config_ = bot_config;
  if (bot_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.SceneEditBotGeneratorProtoData.bot_config)
}
inline ::message::UGCAIConfigParams* SceneEditBotGeneratorProtoData::release_bot_config() {
  
  ::message::UGCAIConfigParams* temp = _impl_.bot_config_;
  _impl_.bot_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCAIConfigParams* SceneEditBotGeneratorProtoData::unsafe_arena_release_bot_config() {
  // @@protoc_insertion_point(field_release:message.SceneEditBotGeneratorProtoData.bot_config)
  
  ::message::UGCAIConfigParams* temp = _impl_.bot_config_;
  _impl_.bot_config_ = nullptr;
  return temp;
}
inline ::message::UGCAIConfigParams* SceneEditBotGeneratorProtoData::_internal_mutable_bot_config() {
  
  if (_impl_.bot_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCAIConfigParams>(GetArenaForAllocation());
    _impl_.bot_config_ = p;
  }
  return _impl_.bot_config_;
}
inline ::message::UGCAIConfigParams* SceneEditBotGeneratorProtoData::mutable_bot_config() {
  ::message::UGCAIConfigParams* _msg = _internal_mutable_bot_config();
  // @@protoc_insertion_point(field_mutable:message.SceneEditBotGeneratorProtoData.bot_config)
  return _msg;
}
inline void SceneEditBotGeneratorProtoData::set_allocated_bot_config(::message::UGCAIConfigParams* bot_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bot_config_;
  }
  if (bot_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_config);
    if (message_arena != submessage_arena) {
      bot_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bot_config_ = bot_config;
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditBotGeneratorProtoData.bot_config)
}

// uint32 enable_dead_drop = 6;
inline void SceneEditBotGeneratorProtoData::clear_enable_dead_drop() {
  _impl_.enable_dead_drop_ = 0u;
}
inline uint32_t SceneEditBotGeneratorProtoData::_internal_enable_dead_drop() const {
  return _impl_.enable_dead_drop_;
}
inline uint32_t SceneEditBotGeneratorProtoData::enable_dead_drop() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBotGeneratorProtoData.enable_dead_drop)
  return _internal_enable_dead_drop();
}
inline void SceneEditBotGeneratorProtoData::_internal_set_enable_dead_drop(uint32_t value) {
  
  _impl_.enable_dead_drop_ = value;
}
inline void SceneEditBotGeneratorProtoData::set_enable_dead_drop(uint32_t value) {
  _internal_set_enable_dead_drop(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBotGeneratorProtoData.enable_dead_drop)
}

// bool is_continuous = 7;
inline void SceneEditBotGeneratorProtoData::clear_is_continuous() {
  _impl_.is_continuous_ = false;
}
inline bool SceneEditBotGeneratorProtoData::_internal_is_continuous() const {
  return _impl_.is_continuous_;
}
inline bool SceneEditBotGeneratorProtoData::is_continuous() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBotGeneratorProtoData.is_continuous)
  return _internal_is_continuous();
}
inline void SceneEditBotGeneratorProtoData::_internal_set_is_continuous(bool value) {
  
  _impl_.is_continuous_ = value;
}
inline void SceneEditBotGeneratorProtoData::set_is_continuous(bool value) {
  _internal_set_is_continuous(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBotGeneratorProtoData.is_continuous)
}

// float batch_interval_float = 8;
inline void SceneEditBotGeneratorProtoData::clear_batch_interval_float() {
  _impl_.batch_interval_float_ = 0;
}
inline float SceneEditBotGeneratorProtoData::_internal_batch_interval_float() const {
  return _impl_.batch_interval_float_;
}
inline float SceneEditBotGeneratorProtoData::batch_interval_float() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBotGeneratorProtoData.batch_interval_float)
  return _internal_batch_interval_float();
}
inline void SceneEditBotGeneratorProtoData::_internal_set_batch_interval_float(float value) {
  
  _impl_.batch_interval_float_ = value;
}
inline void SceneEditBotGeneratorProtoData::set_batch_interval_float(float value) {
  _internal_set_batch_interval_float(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBotGeneratorProtoData.batch_interval_float)
}

// float start_gen_time = 9;
inline void SceneEditBotGeneratorProtoData::clear_start_gen_time() {
  _impl_.start_gen_time_ = 0;
}
inline float SceneEditBotGeneratorProtoData::_internal_start_gen_time() const {
  return _impl_.start_gen_time_;
}
inline float SceneEditBotGeneratorProtoData::start_gen_time() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBotGeneratorProtoData.start_gen_time)
  return _internal_start_gen_time();
}
inline void SceneEditBotGeneratorProtoData::_internal_set_start_gen_time(float value) {
  
  _impl_.start_gen_time_ = value;
}
inline void SceneEditBotGeneratorProtoData::set_start_gen_time(float value) {
  _internal_set_start_gen_time(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBotGeneratorProtoData.start_gen_time)
}

// -------------------------------------------------------------------

// SceneEditUGCVendingMachineProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditUGCVendingMachineProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditUGCVendingMachineProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditUGCVendingMachineProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCVendingMachineProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditUGCVendingMachineProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditUGCVendingMachineProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCVendingMachineProtoData.extra_base_info_instance_id)
}

// string binding_shop_entity_id = 2;
inline void SceneEditUGCVendingMachineProtoData::clear_binding_shop_entity_id() {
  _impl_.binding_shop_entity_id_.ClearToEmpty();
}
inline const std::string& SceneEditUGCVendingMachineProtoData::binding_shop_entity_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCVendingMachineProtoData.binding_shop_entity_id)
  return _internal_binding_shop_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneEditUGCVendingMachineProtoData::set_binding_shop_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.binding_shop_entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.SceneEditUGCVendingMachineProtoData.binding_shop_entity_id)
}
inline std::string* SceneEditUGCVendingMachineProtoData::mutable_binding_shop_entity_id() {
  std::string* _s = _internal_mutable_binding_shop_entity_id();
  // @@protoc_insertion_point(field_mutable:message.SceneEditUGCVendingMachineProtoData.binding_shop_entity_id)
  return _s;
}
inline const std::string& SceneEditUGCVendingMachineProtoData::_internal_binding_shop_entity_id() const {
  return _impl_.binding_shop_entity_id_.Get();
}
inline void SceneEditUGCVendingMachineProtoData::_internal_set_binding_shop_entity_id(const std::string& value) {
  
  _impl_.binding_shop_entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneEditUGCVendingMachineProtoData::_internal_mutable_binding_shop_entity_id() {
  
  return _impl_.binding_shop_entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneEditUGCVendingMachineProtoData::release_binding_shop_entity_id() {
  // @@protoc_insertion_point(field_release:message.SceneEditUGCVendingMachineProtoData.binding_shop_entity_id)
  return _impl_.binding_shop_entity_id_.Release();
}
inline void SceneEditUGCVendingMachineProtoData::set_allocated_binding_shop_entity_id(std::string* binding_shop_entity_id) {
  if (binding_shop_entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.binding_shop_entity_id_.SetAllocated(binding_shop_entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.binding_shop_entity_id_.IsDefault()) {
    _impl_.binding_shop_entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditUGCVendingMachineProtoData.binding_shop_entity_id)
}

// float trigger_radius = 3;
inline void SceneEditUGCVendingMachineProtoData::clear_trigger_radius() {
  _impl_.trigger_radius_ = 0;
}
inline float SceneEditUGCVendingMachineProtoData::_internal_trigger_radius() const {
  return _impl_.trigger_radius_;
}
inline float SceneEditUGCVendingMachineProtoData::trigger_radius() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCVendingMachineProtoData.trigger_radius)
  return _internal_trigger_radius();
}
inline void SceneEditUGCVendingMachineProtoData::_internal_set_trigger_radius(float value) {
  
  _impl_.trigger_radius_ = value;
}
inline void SceneEditUGCVendingMachineProtoData::set_trigger_radius(float value) {
  _internal_set_trigger_radius(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCVendingMachineProtoData.trigger_radius)
}

// bool model_show = 4;
inline void SceneEditUGCVendingMachineProtoData::clear_model_show() {
  _impl_.model_show_ = false;
}
inline bool SceneEditUGCVendingMachineProtoData::_internal_model_show() const {
  return _impl_.model_show_;
}
inline bool SceneEditUGCVendingMachineProtoData::model_show() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCVendingMachineProtoData.model_show)
  return _internal_model_show();
}
inline void SceneEditUGCVendingMachineProtoData::_internal_set_model_show(bool value) {
  
  _impl_.model_show_ = value;
}
inline void SceneEditUGCVendingMachineProtoData::set_model_show(bool value) {
  _internal_set_model_show(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCVendingMachineProtoData.model_show)
}

// -------------------------------------------------------------------

// SceneEditUGCWardrobeProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditUGCWardrobeProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditUGCWardrobeProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditUGCWardrobeProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCWardrobeProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditUGCWardrobeProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditUGCWardrobeProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCWardrobeProtoData.extra_base_info_instance_id)
}

// float trigger_radius = 2;
inline void SceneEditUGCWardrobeProtoData::clear_trigger_radius() {
  _impl_.trigger_radius_ = 0;
}
inline float SceneEditUGCWardrobeProtoData::_internal_trigger_radius() const {
  return _impl_.trigger_radius_;
}
inline float SceneEditUGCWardrobeProtoData::trigger_radius() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCWardrobeProtoData.trigger_radius)
  return _internal_trigger_radius();
}
inline void SceneEditUGCWardrobeProtoData::_internal_set_trigger_radius(float value) {
  
  _impl_.trigger_radius_ = value;
}
inline void SceneEditUGCWardrobeProtoData::set_trigger_radius(float value) {
  _internal_set_trigger_radius(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCWardrobeProtoData.trigger_radius)
}

// bool model_show = 3;
inline void SceneEditUGCWardrobeProtoData::clear_model_show() {
  _impl_.model_show_ = false;
}
inline bool SceneEditUGCWardrobeProtoData::_internal_model_show() const {
  return _impl_.model_show_;
}
inline bool SceneEditUGCWardrobeProtoData::model_show() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCWardrobeProtoData.model_show)
  return _internal_model_show();
}
inline void SceneEditUGCWardrobeProtoData::_internal_set_model_show(bool value) {
  
  _impl_.model_show_ = value;
}
inline void SceneEditUGCWardrobeProtoData::set_model_show(bool value) {
  _internal_set_model_show(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCWardrobeProtoData.model_show)
}

// -------------------------------------------------------------------

// SceneEditUGCPointLightProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditUGCPointLightProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditUGCPointLightProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditUGCPointLightProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCPointLightProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditUGCPointLightProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditUGCPointLightProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCPointLightProtoData.extra_base_info_instance_id)
}

// float intensity = 2;
inline void SceneEditUGCPointLightProtoData::clear_intensity() {
  _impl_.intensity_ = 0;
}
inline float SceneEditUGCPointLightProtoData::_internal_intensity() const {
  return _impl_.intensity_;
}
inline float SceneEditUGCPointLightProtoData::intensity() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCPointLightProtoData.intensity)
  return _internal_intensity();
}
inline void SceneEditUGCPointLightProtoData::_internal_set_intensity(float value) {
  
  _impl_.intensity_ = value;
}
inline void SceneEditUGCPointLightProtoData::set_intensity(float value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCPointLightProtoData.intensity)
}

// float range = 3;
inline void SceneEditUGCPointLightProtoData::clear_range() {
  _impl_.range_ = 0;
}
inline float SceneEditUGCPointLightProtoData::_internal_range() const {
  return _impl_.range_;
}
inline float SceneEditUGCPointLightProtoData::range() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCPointLightProtoData.range)
  return _internal_range();
}
inline void SceneEditUGCPointLightProtoData::_internal_set_range(float value) {
  
  _impl_.range_ = value;
}
inline void SceneEditUGCPointLightProtoData::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCPointLightProtoData.range)
}

// uint32 color = 4;
inline void SceneEditUGCPointLightProtoData::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t SceneEditUGCPointLightProtoData::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t SceneEditUGCPointLightProtoData::color() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCPointLightProtoData.color)
  return _internal_color();
}
inline void SceneEditUGCPointLightProtoData::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void SceneEditUGCPointLightProtoData::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCPointLightProtoData.color)
}

// -------------------------------------------------------------------

// SceneEditUGCFootballProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditUGCFootballProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditUGCFootballProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditUGCFootballProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCFootballProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditUGCFootballProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditUGCFootballProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCFootballProtoData.extra_base_info_instance_id)
}

// float radius = 2;
inline void SceneEditUGCFootballProtoData::clear_radius() {
  _impl_.radius_ = 0;
}
inline float SceneEditUGCFootballProtoData::_internal_radius() const {
  return _impl_.radius_;
}
inline float SceneEditUGCFootballProtoData::radius() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCFootballProtoData.radius)
  return _internal_radius();
}
inline void SceneEditUGCFootballProtoData::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void SceneEditUGCFootballProtoData::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCFootballProtoData.radius)
}

// float friction = 3;
inline void SceneEditUGCFootballProtoData::clear_friction() {
  _impl_.friction_ = 0;
}
inline float SceneEditUGCFootballProtoData::_internal_friction() const {
  return _impl_.friction_;
}
inline float SceneEditUGCFootballProtoData::friction() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCFootballProtoData.friction)
  return _internal_friction();
}
inline void SceneEditUGCFootballProtoData::_internal_set_friction(float value) {
  
  _impl_.friction_ = value;
}
inline void SceneEditUGCFootballProtoData::set_friction(float value) {
  _internal_set_friction(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCFootballProtoData.friction)
}

// float friction_rush = 4;
inline void SceneEditUGCFootballProtoData::clear_friction_rush() {
  _impl_.friction_rush_ = 0;
}
inline float SceneEditUGCFootballProtoData::_internal_friction_rush() const {
  return _impl_.friction_rush_;
}
inline float SceneEditUGCFootballProtoData::friction_rush() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCFootballProtoData.friction_rush)
  return _internal_friction_rush();
}
inline void SceneEditUGCFootballProtoData::_internal_set_friction_rush(float value) {
  
  _impl_.friction_rush_ = value;
}
inline void SceneEditUGCFootballProtoData::set_friction_rush(float value) {
  _internal_set_friction_rush(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCFootballProtoData.friction_rush)
}

// float shoot_angle_min = 5;
inline void SceneEditUGCFootballProtoData::clear_shoot_angle_min() {
  _impl_.shoot_angle_min_ = 0;
}
inline float SceneEditUGCFootballProtoData::_internal_shoot_angle_min() const {
  return _impl_.shoot_angle_min_;
}
inline float SceneEditUGCFootballProtoData::shoot_angle_min() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCFootballProtoData.shoot_angle_min)
  return _internal_shoot_angle_min();
}
inline void SceneEditUGCFootballProtoData::_internal_set_shoot_angle_min(float value) {
  
  _impl_.shoot_angle_min_ = value;
}
inline void SceneEditUGCFootballProtoData::set_shoot_angle_min(float value) {
  _internal_set_shoot_angle_min(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCFootballProtoData.shoot_angle_min)
}

// float high_shoot_angle_min = 6;
inline void SceneEditUGCFootballProtoData::clear_high_shoot_angle_min() {
  _impl_.high_shoot_angle_min_ = 0;
}
inline float SceneEditUGCFootballProtoData::_internal_high_shoot_angle_min() const {
  return _impl_.high_shoot_angle_min_;
}
inline float SceneEditUGCFootballProtoData::high_shoot_angle_min() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCFootballProtoData.high_shoot_angle_min)
  return _internal_high_shoot_angle_min();
}
inline void SceneEditUGCFootballProtoData::_internal_set_high_shoot_angle_min(float value) {
  
  _impl_.high_shoot_angle_min_ = value;
}
inline void SceneEditUGCFootballProtoData::set_high_shoot_angle_min(float value) {
  _internal_set_high_shoot_angle_min(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCFootballProtoData.high_shoot_angle_min)
}

// float hide_time = 7;
inline void SceneEditUGCFootballProtoData::clear_hide_time() {
  _impl_.hide_time_ = 0;
}
inline float SceneEditUGCFootballProtoData::_internal_hide_time() const {
  return _impl_.hide_time_;
}
inline float SceneEditUGCFootballProtoData::hide_time() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCFootballProtoData.hide_time)
  return _internal_hide_time();
}
inline void SceneEditUGCFootballProtoData::_internal_set_hide_time(float value) {
  
  _impl_.hide_time_ = value;
}
inline void SceneEditUGCFootballProtoData::set_hide_time(float value) {
  _internal_set_hide_time(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCFootballProtoData.hide_time)
}

// -------------------------------------------------------------------

// SceneEditUGCCoinGeneratorProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditUGCCoinGeneratorProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditUGCCoinGeneratorProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditUGCCoinGeneratorProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCCoinGeneratorProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditUGCCoinGeneratorProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditUGCCoinGeneratorProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCCoinGeneratorProtoData.extra_base_info_instance_id)
}

// float coint_cnt = 2;
inline void SceneEditUGCCoinGeneratorProtoData::clear_coint_cnt() {
  _impl_.coint_cnt_ = 0;
}
inline float SceneEditUGCCoinGeneratorProtoData::_internal_coint_cnt() const {
  return _impl_.coint_cnt_;
}
inline float SceneEditUGCCoinGeneratorProtoData::coint_cnt() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCCoinGeneratorProtoData.coint_cnt)
  return _internal_coint_cnt();
}
inline void SceneEditUGCCoinGeneratorProtoData::_internal_set_coint_cnt(float value) {
  
  _impl_.coint_cnt_ = value;
}
inline void SceneEditUGCCoinGeneratorProtoData::set_coint_cnt(float value) {
  _internal_set_coint_cnt(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCCoinGeneratorProtoData.coint_cnt)
}

// -------------------------------------------------------------------

// SceneEditUGCEntityGeneratorProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditUGCEntityGeneratorProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditUGCEntityGeneratorProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditUGCEntityGeneratorProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCEntityGeneratorProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditUGCEntityGeneratorProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditUGCEntityGeneratorProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCEntityGeneratorProtoData.extra_base_info_instance_id)
}

// uint32 count_each_batch = 2;
inline void SceneEditUGCEntityGeneratorProtoData::clear_count_each_batch() {
  _impl_.count_each_batch_ = 0u;
}
inline uint32_t SceneEditUGCEntityGeneratorProtoData::_internal_count_each_batch() const {
  return _impl_.count_each_batch_;
}
inline uint32_t SceneEditUGCEntityGeneratorProtoData::count_each_batch() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCEntityGeneratorProtoData.count_each_batch)
  return _internal_count_each_batch();
}
inline void SceneEditUGCEntityGeneratorProtoData::_internal_set_count_each_batch(uint32_t value) {
  
  _impl_.count_each_batch_ = value;
}
inline void SceneEditUGCEntityGeneratorProtoData::set_count_each_batch(uint32_t value) {
  _internal_set_count_each_batch(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCEntityGeneratorProtoData.count_each_batch)
}

// uint32 batch_count = 3;
inline void SceneEditUGCEntityGeneratorProtoData::clear_batch_count() {
  _impl_.batch_count_ = 0u;
}
inline uint32_t SceneEditUGCEntityGeneratorProtoData::_internal_batch_count() const {
  return _impl_.batch_count_;
}
inline uint32_t SceneEditUGCEntityGeneratorProtoData::batch_count() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCEntityGeneratorProtoData.batch_count)
  return _internal_batch_count();
}
inline void SceneEditUGCEntityGeneratorProtoData::_internal_set_batch_count(uint32_t value) {
  
  _impl_.batch_count_ = value;
}
inline void SceneEditUGCEntityGeneratorProtoData::set_batch_count(uint32_t value) {
  _internal_set_batch_count(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCEntityGeneratorProtoData.batch_count)
}

// uint32 batch_interval = 4;
inline void SceneEditUGCEntityGeneratorProtoData::clear_batch_interval() {
  _impl_.batch_interval_ = 0u;
}
inline uint32_t SceneEditUGCEntityGeneratorProtoData::_internal_batch_interval() const {
  return _impl_.batch_interval_;
}
inline uint32_t SceneEditUGCEntityGeneratorProtoData::batch_interval() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCEntityGeneratorProtoData.batch_interval)
  return _internal_batch_interval();
}
inline void SceneEditUGCEntityGeneratorProtoData::_internal_set_batch_interval(uint32_t value) {
  
  _impl_.batch_interval_ = value;
}
inline void SceneEditUGCEntityGeneratorProtoData::set_batch_interval(uint32_t value) {
  _internal_set_batch_interval(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCEntityGeneratorProtoData.batch_interval)
}

// string entity_id = 5;
inline void SceneEditUGCEntityGeneratorProtoData::clear_entity_id() {
  _impl_.entity_id_.ClearToEmpty();
}
inline const std::string& SceneEditUGCEntityGeneratorProtoData::entity_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCEntityGeneratorProtoData.entity_id)
  return _internal_entity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneEditUGCEntityGeneratorProtoData::set_entity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.SceneEditUGCEntityGeneratorProtoData.entity_id)
}
inline std::string* SceneEditUGCEntityGeneratorProtoData::mutable_entity_id() {
  std::string* _s = _internal_mutable_entity_id();
  // @@protoc_insertion_point(field_mutable:message.SceneEditUGCEntityGeneratorProtoData.entity_id)
  return _s;
}
inline const std::string& SceneEditUGCEntityGeneratorProtoData::_internal_entity_id() const {
  return _impl_.entity_id_.Get();
}
inline void SceneEditUGCEntityGeneratorProtoData::_internal_set_entity_id(const std::string& value) {
  
  _impl_.entity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneEditUGCEntityGeneratorProtoData::_internal_mutable_entity_id() {
  
  return _impl_.entity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneEditUGCEntityGeneratorProtoData::release_entity_id() {
  // @@protoc_insertion_point(field_release:message.SceneEditUGCEntityGeneratorProtoData.entity_id)
  return _impl_.entity_id_.Release();
}
inline void SceneEditUGCEntityGeneratorProtoData::set_allocated_entity_id(std::string* entity_id) {
  if (entity_id != nullptr) {
    
  } else {
    
  }
  _impl_.entity_id_.SetAllocated(entity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entity_id_.IsDefault()) {
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditUGCEntityGeneratorProtoData.entity_id)
}

// float batch_interval_float = 6;
inline void SceneEditUGCEntityGeneratorProtoData::clear_batch_interval_float() {
  _impl_.batch_interval_float_ = 0;
}
inline float SceneEditUGCEntityGeneratorProtoData::_internal_batch_interval_float() const {
  return _impl_.batch_interval_float_;
}
inline float SceneEditUGCEntityGeneratorProtoData::batch_interval_float() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCEntityGeneratorProtoData.batch_interval_float)
  return _internal_batch_interval_float();
}
inline void SceneEditUGCEntityGeneratorProtoData::_internal_set_batch_interval_float(float value) {
  
  _impl_.batch_interval_float_ = value;
}
inline void SceneEditUGCEntityGeneratorProtoData::set_batch_interval_float(float value) {
  _internal_set_batch_interval_float(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCEntityGeneratorProtoData.batch_interval_float)
}

// bool is_continuous = 7;
inline void SceneEditUGCEntityGeneratorProtoData::clear_is_continuous() {
  _impl_.is_continuous_ = false;
}
inline bool SceneEditUGCEntityGeneratorProtoData::_internal_is_continuous() const {
  return _impl_.is_continuous_;
}
inline bool SceneEditUGCEntityGeneratorProtoData::is_continuous() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCEntityGeneratorProtoData.is_continuous)
  return _internal_is_continuous();
}
inline void SceneEditUGCEntityGeneratorProtoData::_internal_set_is_continuous(bool value) {
  
  _impl_.is_continuous_ = value;
}
inline void SceneEditUGCEntityGeneratorProtoData::set_is_continuous(bool value) {
  _internal_set_is_continuous(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCEntityGeneratorProtoData.is_continuous)
}

// float start_gen_time = 8;
inline void SceneEditUGCEntityGeneratorProtoData::clear_start_gen_time() {
  _impl_.start_gen_time_ = 0;
}
inline float SceneEditUGCEntityGeneratorProtoData::_internal_start_gen_time() const {
  return _impl_.start_gen_time_;
}
inline float SceneEditUGCEntityGeneratorProtoData::start_gen_time() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCEntityGeneratorProtoData.start_gen_time)
  return _internal_start_gen_time();
}
inline void SceneEditUGCEntityGeneratorProtoData::_internal_set_start_gen_time(float value) {
  
  _impl_.start_gen_time_ = value;
}
inline void SceneEditUGCEntityGeneratorProtoData::set_start_gen_time(float value) {
  _internal_set_start_gen_time(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCEntityGeneratorProtoData.start_gen_time)
}

// -------------------------------------------------------------------

// SceneEditUGCAIProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditUGCAIProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditUGCAIProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditUGCAIProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCAIProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditUGCAIProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditUGCAIProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCAIProtoData.extra_base_info_instance_id)
}

// .message.UGCAIConfigParams param = 2;
inline bool SceneEditUGCAIProtoData::_internal_has_param() const {
  return this != internal_default_instance() && _impl_.param_ != nullptr;
}
inline bool SceneEditUGCAIProtoData::has_param() const {
  return _internal_has_param();
}
inline void SceneEditUGCAIProtoData::clear_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.param_ != nullptr) {
    delete _impl_.param_;
  }
  _impl_.param_ = nullptr;
}
inline const ::message::UGCAIConfigParams& SceneEditUGCAIProtoData::_internal_param() const {
  const ::message::UGCAIConfigParams* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCAIConfigParams&>(
      ::message::_UGCAIConfigParams_default_instance_);
}
inline const ::message::UGCAIConfigParams& SceneEditUGCAIProtoData::param() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCAIProtoData.param)
  return _internal_param();
}
inline void SceneEditUGCAIProtoData::unsafe_arena_set_allocated_param(
    ::message::UGCAIConfigParams* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.SceneEditUGCAIProtoData.param)
}
inline ::message::UGCAIConfigParams* SceneEditUGCAIProtoData::release_param() {
  
  ::message::UGCAIConfigParams* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCAIConfigParams* SceneEditUGCAIProtoData::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:message.SceneEditUGCAIProtoData.param)
  
  ::message::UGCAIConfigParams* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::message::UGCAIConfigParams* SceneEditUGCAIProtoData::_internal_mutable_param() {
  
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCAIConfigParams>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::message::UGCAIConfigParams* SceneEditUGCAIProtoData::mutable_param() {
  ::message::UGCAIConfigParams* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:message.SceneEditUGCAIProtoData.param)
  return _msg;
}
inline void SceneEditUGCAIProtoData::set_allocated_param(::message::UGCAIConfigParams* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditUGCAIProtoData.param)
}

// -------------------------------------------------------------------

// UGCAIConfigParams

// uint32 hp = 1;
inline void UGCAIConfigParams::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t UGCAIConfigParams::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t UGCAIConfigParams::hp() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.hp)
  return _internal_hp();
}
inline void UGCAIConfigParams::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void UGCAIConfigParams::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.hp)
}

// uint32 attack = 2;
inline void UGCAIConfigParams::clear_attack() {
  _impl_.attack_ = 0u;
}
inline uint32_t UGCAIConfigParams::_internal_attack() const {
  return _impl_.attack_;
}
inline uint32_t UGCAIConfigParams::attack() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.attack)
  return _internal_attack();
}
inline void UGCAIConfigParams::_internal_set_attack(uint32_t value) {
  
  _impl_.attack_ = value;
}
inline void UGCAIConfigParams::set_attack(uint32_t value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.attack)
}

// float defense = 3;
inline void UGCAIConfigParams::clear_defense() {
  _impl_.defense_ = 0;
}
inline float UGCAIConfigParams::_internal_defense() const {
  return _impl_.defense_;
}
inline float UGCAIConfigParams::defense() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.defense)
  return _internal_defense();
}
inline void UGCAIConfigParams::_internal_set_defense(float value) {
  
  _impl_.defense_ = value;
}
inline void UGCAIConfigParams::set_defense(float value) {
  _internal_set_defense(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.defense)
}

// float move_speed = 4;
inline void UGCAIConfigParams::clear_move_speed() {
  _impl_.move_speed_ = 0;
}
inline float UGCAIConfigParams::_internal_move_speed() const {
  return _impl_.move_speed_;
}
inline float UGCAIConfigParams::move_speed() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.move_speed)
  return _internal_move_speed();
}
inline void UGCAIConfigParams::_internal_set_move_speed(float value) {
  
  _impl_.move_speed_ = value;
}
inline void UGCAIConfigParams::set_move_speed(float value) {
  _internal_set_move_speed(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.move_speed)
}

// bool can_chase_enemy = 5;
inline void UGCAIConfigParams::clear_can_chase_enemy() {
  _impl_.can_chase_enemy_ = false;
}
inline bool UGCAIConfigParams::_internal_can_chase_enemy() const {
  return _impl_.can_chase_enemy_;
}
inline bool UGCAIConfigParams::can_chase_enemy() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.can_chase_enemy)
  return _internal_can_chase_enemy();
}
inline void UGCAIConfigParams::_internal_set_can_chase_enemy(bool value) {
  
  _impl_.can_chase_enemy_ = value;
}
inline void UGCAIConfigParams::set_can_chase_enemy(bool value) {
  _internal_set_can_chase_enemy(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.can_chase_enemy)
}

// float detect_range = 6;
inline void UGCAIConfigParams::clear_detect_range() {
  _impl_.detect_range_ = 0;
}
inline float UGCAIConfigParams::_internal_detect_range() const {
  return _impl_.detect_range_;
}
inline float UGCAIConfigParams::detect_range() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.detect_range)
  return _internal_detect_range();
}
inline void UGCAIConfigParams::_internal_set_detect_range(float value) {
  
  _impl_.detect_range_ = value;
}
inline void UGCAIConfigParams::set_detect_range(float value) {
  _internal_set_detect_range(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.detect_range)
}

// float attack_range = 7;
inline void UGCAIConfigParams::clear_attack_range() {
  _impl_.attack_range_ = 0;
}
inline float UGCAIConfigParams::_internal_attack_range() const {
  return _impl_.attack_range_;
}
inline float UGCAIConfigParams::attack_range() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.attack_range)
  return _internal_attack_range();
}
inline void UGCAIConfigParams::_internal_set_attack_range(float value) {
  
  _impl_.attack_range_ = value;
}
inline void UGCAIConfigParams::set_attack_range(float value) {
  _internal_set_attack_range(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.attack_range)
}

// uint32 team_id = 8;
inline void UGCAIConfigParams::clear_team_id() {
  _impl_.team_id_ = 0u;
}
inline uint32_t UGCAIConfigParams::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t UGCAIConfigParams::team_id() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.team_id)
  return _internal_team_id();
}
inline void UGCAIConfigParams::_internal_set_team_id(uint32_t value) {
  
  _impl_.team_id_ = value;
}
inline void UGCAIConfigParams::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.team_id)
}

// uint32 action_type = 9;
inline void UGCAIConfigParams::clear_action_type() {
  _impl_.action_type_ = 0u;
}
inline uint32_t UGCAIConfigParams::_internal_action_type() const {
  return _impl_.action_type_;
}
inline uint32_t UGCAIConfigParams::action_type() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.action_type)
  return _internal_action_type();
}
inline void UGCAIConfigParams::_internal_set_action_type(uint32_t value) {
  
  _impl_.action_type_ = value;
}
inline void UGCAIConfigParams::set_action_type(uint32_t value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.action_type)
}

// uint32 ai_type = 10;
inline void UGCAIConfigParams::clear_ai_type() {
  _impl_.ai_type_ = 0u;
}
inline uint32_t UGCAIConfigParams::_internal_ai_type() const {
  return _impl_.ai_type_;
}
inline uint32_t UGCAIConfigParams::ai_type() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.ai_type)
  return _internal_ai_type();
}
inline void UGCAIConfigParams::_internal_set_ai_type(uint32_t value) {
  
  _impl_.ai_type_ = value;
}
inline void UGCAIConfigParams::set_ai_type(uint32_t value) {
  _internal_set_ai_type(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.ai_type)
}

// uint32 path_instance_id = 11;
inline void UGCAIConfigParams::clear_path_instance_id() {
  _impl_.path_instance_id_ = 0u;
}
inline uint32_t UGCAIConfigParams::_internal_path_instance_id() const {
  return _impl_.path_instance_id_;
}
inline uint32_t UGCAIConfigParams::path_instance_id() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.path_instance_id)
  return _internal_path_instance_id();
}
inline void UGCAIConfigParams::_internal_set_path_instance_id(uint32_t value) {
  
  _impl_.path_instance_id_ = value;
}
inline void UGCAIConfigParams::set_path_instance_id(uint32_t value) {
  _internal_set_path_instance_id(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.path_instance_id)
}

// bool enable_dead_drop = 12;
inline void UGCAIConfigParams::clear_enable_dead_drop() {
  _impl_.enable_dead_drop_ = false;
}
inline bool UGCAIConfigParams::_internal_enable_dead_drop() const {
  return _impl_.enable_dead_drop_;
}
inline bool UGCAIConfigParams::enable_dead_drop() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.enable_dead_drop)
  return _internal_enable_dead_drop();
}
inline void UGCAIConfigParams::_internal_set_enable_dead_drop(bool value) {
  
  _impl_.enable_dead_drop_ = value;
}
inline void UGCAIConfigParams::set_enable_dead_drop(bool value) {
  _internal_set_enable_dead_drop(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.enable_dead_drop)
}

// float injury_scale = 13;
inline void UGCAIConfigParams::clear_injury_scale() {
  _impl_.injury_scale_ = 0;
}
inline float UGCAIConfigParams::_internal_injury_scale() const {
  return _impl_.injury_scale_;
}
inline float UGCAIConfigParams::injury_scale() const {
  // @@protoc_insertion_point(field_get:message.UGCAIConfigParams.injury_scale)
  return _internal_injury_scale();
}
inline void UGCAIConfigParams::_internal_set_injury_scale(float value) {
  
  _impl_.injury_scale_ = value;
}
inline void UGCAIConfigParams::set_injury_scale(float value) {
  _internal_set_injury_scale(value);
  // @@protoc_insertion_point(field_set:message.UGCAIConfigParams.injury_scale)
}

// -------------------------------------------------------------------

// SceneEditUGCCustomPathProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditUGCCustomPathProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditUGCCustomPathProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditUGCCustomPathProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCCustomPathProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditUGCCustomPathProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditUGCCustomPathProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditUGCCustomPathProtoData.extra_base_info_instance_id)
}

// repeated .message.ProtoBuffVector3 control_points = 2;
inline int SceneEditUGCCustomPathProtoData::_internal_control_points_size() const {
  return _impl_.control_points_.size();
}
inline int SceneEditUGCCustomPathProtoData::control_points_size() const {
  return _internal_control_points_size();
}
inline ::message::ProtoBuffVector3* SceneEditUGCCustomPathProtoData::mutable_control_points(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditUGCCustomPathProtoData.control_points)
  return _impl_.control_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 >*
SceneEditUGCCustomPathProtoData::mutable_control_points() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditUGCCustomPathProtoData.control_points)
  return &_impl_.control_points_;
}
inline const ::message::ProtoBuffVector3& SceneEditUGCCustomPathProtoData::_internal_control_points(int index) const {
  return _impl_.control_points_.Get(index);
}
inline const ::message::ProtoBuffVector3& SceneEditUGCCustomPathProtoData::control_points(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditUGCCustomPathProtoData.control_points)
  return _internal_control_points(index);
}
inline ::message::ProtoBuffVector3* SceneEditUGCCustomPathProtoData::_internal_add_control_points() {
  return _impl_.control_points_.Add();
}
inline ::message::ProtoBuffVector3* SceneEditUGCCustomPathProtoData::add_control_points() {
  ::message::ProtoBuffVector3* _add = _internal_add_control_points();
  // @@protoc_insertion_point(field_add:message.SceneEditUGCCustomPathProtoData.control_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 >&
SceneEditUGCCustomPathProtoData::control_points() const {
  // @@protoc_insertion_point(field_list:message.SceneEditUGCCustomPathProtoData.control_points)
  return _impl_.control_points_;
}

// -------------------------------------------------------------------

// SceneEditEntityAttributeProtoData

// repeated .message.SceneEditTeleportDoorProtoData teleport_doors = 1;
inline int SceneEditEntityAttributeProtoData::_internal_teleport_doors_size() const {
  return _impl_.teleport_doors_.size();
}
inline int SceneEditEntityAttributeProtoData::teleport_doors_size() const {
  return _internal_teleport_doors_size();
}
inline void SceneEditEntityAttributeProtoData::clear_teleport_doors() {
  _impl_.teleport_doors_.Clear();
}
inline ::message::SceneEditTeleportDoorProtoData* SceneEditEntityAttributeProtoData::mutable_teleport_doors(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.teleport_doors)
  return _impl_.teleport_doors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTeleportDoorProtoData >*
SceneEditEntityAttributeProtoData::mutable_teleport_doors() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.teleport_doors)
  return &_impl_.teleport_doors_;
}
inline const ::message::SceneEditTeleportDoorProtoData& SceneEditEntityAttributeProtoData::_internal_teleport_doors(int index) const {
  return _impl_.teleport_doors_.Get(index);
}
inline const ::message::SceneEditTeleportDoorProtoData& SceneEditEntityAttributeProtoData::teleport_doors(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.teleport_doors)
  return _internal_teleport_doors(index);
}
inline ::message::SceneEditTeleportDoorProtoData* SceneEditEntityAttributeProtoData::_internal_add_teleport_doors() {
  return _impl_.teleport_doors_.Add();
}
inline ::message::SceneEditTeleportDoorProtoData* SceneEditEntityAttributeProtoData::add_teleport_doors() {
  ::message::SceneEditTeleportDoorProtoData* _add = _internal_add_teleport_doors();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.teleport_doors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTeleportDoorProtoData >&
SceneEditEntityAttributeProtoData::teleport_doors() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.teleport_doors)
  return _impl_.teleport_doors_;
}

// repeated .message.SceneEditPianoKeyProtoData piano_keys = 2;
inline int SceneEditEntityAttributeProtoData::_internal_piano_keys_size() const {
  return _impl_.piano_keys_.size();
}
inline int SceneEditEntityAttributeProtoData::piano_keys_size() const {
  return _internal_piano_keys_size();
}
inline void SceneEditEntityAttributeProtoData::clear_piano_keys() {
  _impl_.piano_keys_.Clear();
}
inline ::message::SceneEditPianoKeyProtoData* SceneEditEntityAttributeProtoData::mutable_piano_keys(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.piano_keys)
  return _impl_.piano_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditPianoKeyProtoData >*
SceneEditEntityAttributeProtoData::mutable_piano_keys() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.piano_keys)
  return &_impl_.piano_keys_;
}
inline const ::message::SceneEditPianoKeyProtoData& SceneEditEntityAttributeProtoData::_internal_piano_keys(int index) const {
  return _impl_.piano_keys_.Get(index);
}
inline const ::message::SceneEditPianoKeyProtoData& SceneEditEntityAttributeProtoData::piano_keys(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.piano_keys)
  return _internal_piano_keys(index);
}
inline ::message::SceneEditPianoKeyProtoData* SceneEditEntityAttributeProtoData::_internal_add_piano_keys() {
  return _impl_.piano_keys_.Add();
}
inline ::message::SceneEditPianoKeyProtoData* SceneEditEntityAttributeProtoData::add_piano_keys() {
  ::message::SceneEditPianoKeyProtoData* _add = _internal_add_piano_keys();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.piano_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditPianoKeyProtoData >&
SceneEditEntityAttributeProtoData::piano_keys() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.piano_keys)
  return _impl_.piano_keys_;
}

// repeated .message.SceneEditBuffProtoData buffs = 3;
inline int SceneEditEntityAttributeProtoData::_internal_buffs_size() const {
  return _impl_.buffs_.size();
}
inline int SceneEditEntityAttributeProtoData::buffs_size() const {
  return _internal_buffs_size();
}
inline void SceneEditEntityAttributeProtoData::clear_buffs() {
  _impl_.buffs_.Clear();
}
inline ::message::SceneEditBuffProtoData* SceneEditEntityAttributeProtoData::mutable_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.buffs)
  return _impl_.buffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBuffProtoData >*
SceneEditEntityAttributeProtoData::mutable_buffs() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.buffs)
  return &_impl_.buffs_;
}
inline const ::message::SceneEditBuffProtoData& SceneEditEntityAttributeProtoData::_internal_buffs(int index) const {
  return _impl_.buffs_.Get(index);
}
inline const ::message::SceneEditBuffProtoData& SceneEditEntityAttributeProtoData::buffs(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.buffs)
  return _internal_buffs(index);
}
inline ::message::SceneEditBuffProtoData* SceneEditEntityAttributeProtoData::_internal_add_buffs() {
  return _impl_.buffs_.Add();
}
inline ::message::SceneEditBuffProtoData* SceneEditEntityAttributeProtoData::add_buffs() {
  ::message::SceneEditBuffProtoData* _add = _internal_add_buffs();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.buffs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBuffProtoData >&
SceneEditEntityAttributeProtoData::buffs() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.buffs)
  return _impl_.buffs_;
}

// repeated .message.SceneEditMoveObjectProtoData move_objects = 4;
inline int SceneEditEntityAttributeProtoData::_internal_move_objects_size() const {
  return _impl_.move_objects_.size();
}
inline int SceneEditEntityAttributeProtoData::move_objects_size() const {
  return _internal_move_objects_size();
}
inline void SceneEditEntityAttributeProtoData::clear_move_objects() {
  _impl_.move_objects_.Clear();
}
inline ::message::SceneEditMoveObjectProtoData* SceneEditEntityAttributeProtoData::mutable_move_objects(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.move_objects)
  return _impl_.move_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMoveObjectProtoData >*
SceneEditEntityAttributeProtoData::mutable_move_objects() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.move_objects)
  return &_impl_.move_objects_;
}
inline const ::message::SceneEditMoveObjectProtoData& SceneEditEntityAttributeProtoData::_internal_move_objects(int index) const {
  return _impl_.move_objects_.Get(index);
}
inline const ::message::SceneEditMoveObjectProtoData& SceneEditEntityAttributeProtoData::move_objects(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.move_objects)
  return _internal_move_objects(index);
}
inline ::message::SceneEditMoveObjectProtoData* SceneEditEntityAttributeProtoData::_internal_add_move_objects() {
  return _impl_.move_objects_.Add();
}
inline ::message::SceneEditMoveObjectProtoData* SceneEditEntityAttributeProtoData::add_move_objects() {
  ::message::SceneEditMoveObjectProtoData* _add = _internal_add_move_objects();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.move_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMoveObjectProtoData >&
SceneEditEntityAttributeProtoData::move_objects() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.move_objects)
  return _impl_.move_objects_;
}

// repeated .message.SceneEditScalableItemProtoData scale_items = 5;
inline int SceneEditEntityAttributeProtoData::_internal_scale_items_size() const {
  return _impl_.scale_items_.size();
}
inline int SceneEditEntityAttributeProtoData::scale_items_size() const {
  return _internal_scale_items_size();
}
inline void SceneEditEntityAttributeProtoData::clear_scale_items() {
  _impl_.scale_items_.Clear();
}
inline ::message::SceneEditScalableItemProtoData* SceneEditEntityAttributeProtoData::mutable_scale_items(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.scale_items)
  return _impl_.scale_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditScalableItemProtoData >*
SceneEditEntityAttributeProtoData::mutable_scale_items() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.scale_items)
  return &_impl_.scale_items_;
}
inline const ::message::SceneEditScalableItemProtoData& SceneEditEntityAttributeProtoData::_internal_scale_items(int index) const {
  return _impl_.scale_items_.Get(index);
}
inline const ::message::SceneEditScalableItemProtoData& SceneEditEntityAttributeProtoData::scale_items(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.scale_items)
  return _internal_scale_items(index);
}
inline ::message::SceneEditScalableItemProtoData* SceneEditEntityAttributeProtoData::_internal_add_scale_items() {
  return _impl_.scale_items_.Add();
}
inline ::message::SceneEditScalableItemProtoData* SceneEditEntityAttributeProtoData::add_scale_items() {
  ::message::SceneEditScalableItemProtoData* _add = _internal_add_scale_items();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.scale_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditScalableItemProtoData >&
SceneEditEntityAttributeProtoData::scale_items() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.scale_items)
  return _impl_.scale_items_;
}

// repeated .message.SceneEditItemBoxProtoData itemboxs = 6;
inline int SceneEditEntityAttributeProtoData::_internal_itemboxs_size() const {
  return _impl_.itemboxs_.size();
}
inline int SceneEditEntityAttributeProtoData::itemboxs_size() const {
  return _internal_itemboxs_size();
}
inline void SceneEditEntityAttributeProtoData::clear_itemboxs() {
  _impl_.itemboxs_.Clear();
}
inline ::message::SceneEditItemBoxProtoData* SceneEditEntityAttributeProtoData::mutable_itemboxs(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.itemboxs)
  return _impl_.itemboxs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditItemBoxProtoData >*
SceneEditEntityAttributeProtoData::mutable_itemboxs() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.itemboxs)
  return &_impl_.itemboxs_;
}
inline const ::message::SceneEditItemBoxProtoData& SceneEditEntityAttributeProtoData::_internal_itemboxs(int index) const {
  return _impl_.itemboxs_.Get(index);
}
inline const ::message::SceneEditItemBoxProtoData& SceneEditEntityAttributeProtoData::itemboxs(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.itemboxs)
  return _internal_itemboxs(index);
}
inline ::message::SceneEditItemBoxProtoData* SceneEditEntityAttributeProtoData::_internal_add_itemboxs() {
  return _impl_.itemboxs_.Add();
}
inline ::message::SceneEditItemBoxProtoData* SceneEditEntityAttributeProtoData::add_itemboxs() {
  ::message::SceneEditItemBoxProtoData* _add = _internal_add_itemboxs();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.itemboxs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditItemBoxProtoData >&
SceneEditEntityAttributeProtoData::itemboxs() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.itemboxs)
  return _impl_.itemboxs_;
}

// repeated .message.SceneEditTriggerProtoData triggers = 7;
inline int SceneEditEntityAttributeProtoData::_internal_triggers_size() const {
  return _impl_.triggers_.size();
}
inline int SceneEditEntityAttributeProtoData::triggers_size() const {
  return _internal_triggers_size();
}
inline void SceneEditEntityAttributeProtoData::clear_triggers() {
  _impl_.triggers_.Clear();
}
inline ::message::SceneEditTriggerProtoData* SceneEditEntityAttributeProtoData::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.triggers)
  return _impl_.triggers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTriggerProtoData >*
SceneEditEntityAttributeProtoData::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.triggers)
  return &_impl_.triggers_;
}
inline const ::message::SceneEditTriggerProtoData& SceneEditEntityAttributeProtoData::_internal_triggers(int index) const {
  return _impl_.triggers_.Get(index);
}
inline const ::message::SceneEditTriggerProtoData& SceneEditEntityAttributeProtoData::triggers(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.triggers)
  return _internal_triggers(index);
}
inline ::message::SceneEditTriggerProtoData* SceneEditEntityAttributeProtoData::_internal_add_triggers() {
  return _impl_.triggers_.Add();
}
inline ::message::SceneEditTriggerProtoData* SceneEditEntityAttributeProtoData::add_triggers() {
  ::message::SceneEditTriggerProtoData* _add = _internal_add_triggers();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.triggers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditTriggerProtoData >&
SceneEditEntityAttributeProtoData::triggers() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.triggers)
  return _impl_.triggers_;
}

// repeated .message.SceneEditBigToyBallProtoData big_toy_balls = 8;
inline int SceneEditEntityAttributeProtoData::_internal_big_toy_balls_size() const {
  return _impl_.big_toy_balls_.size();
}
inline int SceneEditEntityAttributeProtoData::big_toy_balls_size() const {
  return _internal_big_toy_balls_size();
}
inline void SceneEditEntityAttributeProtoData::clear_big_toy_balls() {
  _impl_.big_toy_balls_.Clear();
}
inline ::message::SceneEditBigToyBallProtoData* SceneEditEntityAttributeProtoData::mutable_big_toy_balls(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.big_toy_balls)
  return _impl_.big_toy_balls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBigToyBallProtoData >*
SceneEditEntityAttributeProtoData::mutable_big_toy_balls() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.big_toy_balls)
  return &_impl_.big_toy_balls_;
}
inline const ::message::SceneEditBigToyBallProtoData& SceneEditEntityAttributeProtoData::_internal_big_toy_balls(int index) const {
  return _impl_.big_toy_balls_.Get(index);
}
inline const ::message::SceneEditBigToyBallProtoData& SceneEditEntityAttributeProtoData::big_toy_balls(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.big_toy_balls)
  return _internal_big_toy_balls(index);
}
inline ::message::SceneEditBigToyBallProtoData* SceneEditEntityAttributeProtoData::_internal_add_big_toy_balls() {
  return _impl_.big_toy_balls_.Add();
}
inline ::message::SceneEditBigToyBallProtoData* SceneEditEntityAttributeProtoData::add_big_toy_balls() {
  ::message::SceneEditBigToyBallProtoData* _add = _internal_add_big_toy_balls();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.big_toy_balls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBigToyBallProtoData >&
SceneEditEntityAttributeProtoData::big_toy_balls() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.big_toy_balls)
  return _impl_.big_toy_balls_;
}

// repeated .message.SceneEditMiniSentryProtoData minisentris = 9;
inline int SceneEditEntityAttributeProtoData::_internal_minisentris_size() const {
  return _impl_.minisentris_.size();
}
inline int SceneEditEntityAttributeProtoData::minisentris_size() const {
  return _internal_minisentris_size();
}
inline void SceneEditEntityAttributeProtoData::clear_minisentris() {
  _impl_.minisentris_.Clear();
}
inline ::message::SceneEditMiniSentryProtoData* SceneEditEntityAttributeProtoData::mutable_minisentris(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.minisentris)
  return _impl_.minisentris_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMiniSentryProtoData >*
SceneEditEntityAttributeProtoData::mutable_minisentris() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.minisentris)
  return &_impl_.minisentris_;
}
inline const ::message::SceneEditMiniSentryProtoData& SceneEditEntityAttributeProtoData::_internal_minisentris(int index) const {
  return _impl_.minisentris_.Get(index);
}
inline const ::message::SceneEditMiniSentryProtoData& SceneEditEntityAttributeProtoData::minisentris(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.minisentris)
  return _internal_minisentris(index);
}
inline ::message::SceneEditMiniSentryProtoData* SceneEditEntityAttributeProtoData::_internal_add_minisentris() {
  return _impl_.minisentris_.Add();
}
inline ::message::SceneEditMiniSentryProtoData* SceneEditEntityAttributeProtoData::add_minisentris() {
  ::message::SceneEditMiniSentryProtoData* _add = _internal_add_minisentris();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.minisentris)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditMiniSentryProtoData >&
SceneEditEntityAttributeProtoData::minisentris() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.minisentris)
  return _impl_.minisentris_;
}

// repeated .message.SceneEditUGCCustomPathProtoData custom_paths = 10;
inline int SceneEditEntityAttributeProtoData::_internal_custom_paths_size() const {
  return _impl_.custom_paths_.size();
}
inline int SceneEditEntityAttributeProtoData::custom_paths_size() const {
  return _internal_custom_paths_size();
}
inline void SceneEditEntityAttributeProtoData::clear_custom_paths() {
  _impl_.custom_paths_.Clear();
}
inline ::message::SceneEditUGCCustomPathProtoData* SceneEditEntityAttributeProtoData::mutable_custom_paths(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.custom_paths)
  return _impl_.custom_paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCustomPathProtoData >*
SceneEditEntityAttributeProtoData::mutable_custom_paths() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.custom_paths)
  return &_impl_.custom_paths_;
}
inline const ::message::SceneEditUGCCustomPathProtoData& SceneEditEntityAttributeProtoData::_internal_custom_paths(int index) const {
  return _impl_.custom_paths_.Get(index);
}
inline const ::message::SceneEditUGCCustomPathProtoData& SceneEditEntityAttributeProtoData::custom_paths(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.custom_paths)
  return _internal_custom_paths(index);
}
inline ::message::SceneEditUGCCustomPathProtoData* SceneEditEntityAttributeProtoData::_internal_add_custom_paths() {
  return _impl_.custom_paths_.Add();
}
inline ::message::SceneEditUGCCustomPathProtoData* SceneEditEntityAttributeProtoData::add_custom_paths() {
  ::message::SceneEditUGCCustomPathProtoData* _add = _internal_add_custom_paths();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.custom_paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCustomPathProtoData >&
SceneEditEntityAttributeProtoData::custom_paths() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.custom_paths)
  return _impl_.custom_paths_;
}

// repeated .message.SceneEditBotGeneratorProtoData bot_generators = 11;
inline int SceneEditEntityAttributeProtoData::_internal_bot_generators_size() const {
  return _impl_.bot_generators_.size();
}
inline int SceneEditEntityAttributeProtoData::bot_generators_size() const {
  return _internal_bot_generators_size();
}
inline void SceneEditEntityAttributeProtoData::clear_bot_generators() {
  _impl_.bot_generators_.Clear();
}
inline ::message::SceneEditBotGeneratorProtoData* SceneEditEntityAttributeProtoData::mutable_bot_generators(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.bot_generators)
  return _impl_.bot_generators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBotGeneratorProtoData >*
SceneEditEntityAttributeProtoData::mutable_bot_generators() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.bot_generators)
  return &_impl_.bot_generators_;
}
inline const ::message::SceneEditBotGeneratorProtoData& SceneEditEntityAttributeProtoData::_internal_bot_generators(int index) const {
  return _impl_.bot_generators_.Get(index);
}
inline const ::message::SceneEditBotGeneratorProtoData& SceneEditEntityAttributeProtoData::bot_generators(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.bot_generators)
  return _internal_bot_generators(index);
}
inline ::message::SceneEditBotGeneratorProtoData* SceneEditEntityAttributeProtoData::_internal_add_bot_generators() {
  return _impl_.bot_generators_.Add();
}
inline ::message::SceneEditBotGeneratorProtoData* SceneEditEntityAttributeProtoData::add_bot_generators() {
  ::message::SceneEditBotGeneratorProtoData* _add = _internal_add_bot_generators();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.bot_generators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBotGeneratorProtoData >&
SceneEditEntityAttributeProtoData::bot_generators() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.bot_generators)
  return _impl_.bot_generators_;
}

// repeated .message.SceneEditUGCVendingMachineProtoData vending_machines = 12;
inline int SceneEditEntityAttributeProtoData::_internal_vending_machines_size() const {
  return _impl_.vending_machines_.size();
}
inline int SceneEditEntityAttributeProtoData::vending_machines_size() const {
  return _internal_vending_machines_size();
}
inline void SceneEditEntityAttributeProtoData::clear_vending_machines() {
  _impl_.vending_machines_.Clear();
}
inline ::message::SceneEditUGCVendingMachineProtoData* SceneEditEntityAttributeProtoData::mutable_vending_machines(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.vending_machines)
  return _impl_.vending_machines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCVendingMachineProtoData >*
SceneEditEntityAttributeProtoData::mutable_vending_machines() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.vending_machines)
  return &_impl_.vending_machines_;
}
inline const ::message::SceneEditUGCVendingMachineProtoData& SceneEditEntityAttributeProtoData::_internal_vending_machines(int index) const {
  return _impl_.vending_machines_.Get(index);
}
inline const ::message::SceneEditUGCVendingMachineProtoData& SceneEditEntityAttributeProtoData::vending_machines(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.vending_machines)
  return _internal_vending_machines(index);
}
inline ::message::SceneEditUGCVendingMachineProtoData* SceneEditEntityAttributeProtoData::_internal_add_vending_machines() {
  return _impl_.vending_machines_.Add();
}
inline ::message::SceneEditUGCVendingMachineProtoData* SceneEditEntityAttributeProtoData::add_vending_machines() {
  ::message::SceneEditUGCVendingMachineProtoData* _add = _internal_add_vending_machines();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.vending_machines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCVendingMachineProtoData >&
SceneEditEntityAttributeProtoData::vending_machines() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.vending_machines)
  return _impl_.vending_machines_;
}

// repeated .message.SceneEditUGCAIProtoData ugc_ais = 13;
inline int SceneEditEntityAttributeProtoData::_internal_ugc_ais_size() const {
  return _impl_.ugc_ais_.size();
}
inline int SceneEditEntityAttributeProtoData::ugc_ais_size() const {
  return _internal_ugc_ais_size();
}
inline void SceneEditEntityAttributeProtoData::clear_ugc_ais() {
  _impl_.ugc_ais_.Clear();
}
inline ::message::SceneEditUGCAIProtoData* SceneEditEntityAttributeProtoData::mutable_ugc_ais(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.ugc_ais)
  return _impl_.ugc_ais_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCAIProtoData >*
SceneEditEntityAttributeProtoData::mutable_ugc_ais() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.ugc_ais)
  return &_impl_.ugc_ais_;
}
inline const ::message::SceneEditUGCAIProtoData& SceneEditEntityAttributeProtoData::_internal_ugc_ais(int index) const {
  return _impl_.ugc_ais_.Get(index);
}
inline const ::message::SceneEditUGCAIProtoData& SceneEditEntityAttributeProtoData::ugc_ais(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.ugc_ais)
  return _internal_ugc_ais(index);
}
inline ::message::SceneEditUGCAIProtoData* SceneEditEntityAttributeProtoData::_internal_add_ugc_ais() {
  return _impl_.ugc_ais_.Add();
}
inline ::message::SceneEditUGCAIProtoData* SceneEditEntityAttributeProtoData::add_ugc_ais() {
  ::message::SceneEditUGCAIProtoData* _add = _internal_add_ugc_ais();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.ugc_ais)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCAIProtoData >&
SceneEditEntityAttributeProtoData::ugc_ais() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.ugc_ais)
  return _impl_.ugc_ais_;
}

// repeated .message.SceneEditUGCEntityGeneratorProtoData entity_generators = 14;
inline int SceneEditEntityAttributeProtoData::_internal_entity_generators_size() const {
  return _impl_.entity_generators_.size();
}
inline int SceneEditEntityAttributeProtoData::entity_generators_size() const {
  return _internal_entity_generators_size();
}
inline void SceneEditEntityAttributeProtoData::clear_entity_generators() {
  _impl_.entity_generators_.Clear();
}
inline ::message::SceneEditUGCEntityGeneratorProtoData* SceneEditEntityAttributeProtoData::mutable_entity_generators(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.entity_generators)
  return _impl_.entity_generators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCEntityGeneratorProtoData >*
SceneEditEntityAttributeProtoData::mutable_entity_generators() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.entity_generators)
  return &_impl_.entity_generators_;
}
inline const ::message::SceneEditUGCEntityGeneratorProtoData& SceneEditEntityAttributeProtoData::_internal_entity_generators(int index) const {
  return _impl_.entity_generators_.Get(index);
}
inline const ::message::SceneEditUGCEntityGeneratorProtoData& SceneEditEntityAttributeProtoData::entity_generators(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.entity_generators)
  return _internal_entity_generators(index);
}
inline ::message::SceneEditUGCEntityGeneratorProtoData* SceneEditEntityAttributeProtoData::_internal_add_entity_generators() {
  return _impl_.entity_generators_.Add();
}
inline ::message::SceneEditUGCEntityGeneratorProtoData* SceneEditEntityAttributeProtoData::add_entity_generators() {
  ::message::SceneEditUGCEntityGeneratorProtoData* _add = _internal_add_entity_generators();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.entity_generators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCEntityGeneratorProtoData >&
SceneEditEntityAttributeProtoData::entity_generators() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.entity_generators)
  return _impl_.entity_generators_;
}

// repeated .message.SceneEditUGCCoinGeneratorProtoData coin_generators = 15;
inline int SceneEditEntityAttributeProtoData::_internal_coin_generators_size() const {
  return _impl_.coin_generators_.size();
}
inline int SceneEditEntityAttributeProtoData::coin_generators_size() const {
  return _internal_coin_generators_size();
}
inline void SceneEditEntityAttributeProtoData::clear_coin_generators() {
  _impl_.coin_generators_.Clear();
}
inline ::message::SceneEditUGCCoinGeneratorProtoData* SceneEditEntityAttributeProtoData::mutable_coin_generators(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.coin_generators)
  return _impl_.coin_generators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCoinGeneratorProtoData >*
SceneEditEntityAttributeProtoData::mutable_coin_generators() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.coin_generators)
  return &_impl_.coin_generators_;
}
inline const ::message::SceneEditUGCCoinGeneratorProtoData& SceneEditEntityAttributeProtoData::_internal_coin_generators(int index) const {
  return _impl_.coin_generators_.Get(index);
}
inline const ::message::SceneEditUGCCoinGeneratorProtoData& SceneEditEntityAttributeProtoData::coin_generators(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.coin_generators)
  return _internal_coin_generators(index);
}
inline ::message::SceneEditUGCCoinGeneratorProtoData* SceneEditEntityAttributeProtoData::_internal_add_coin_generators() {
  return _impl_.coin_generators_.Add();
}
inline ::message::SceneEditUGCCoinGeneratorProtoData* SceneEditEntityAttributeProtoData::add_coin_generators() {
  ::message::SceneEditUGCCoinGeneratorProtoData* _add = _internal_add_coin_generators();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.coin_generators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCCoinGeneratorProtoData >&
SceneEditEntityAttributeProtoData::coin_generators() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.coin_generators)
  return _impl_.coin_generators_;
}

// repeated .message.SceneEditUGCWardrobeProtoData wardrobes = 16;
inline int SceneEditEntityAttributeProtoData::_internal_wardrobes_size() const {
  return _impl_.wardrobes_.size();
}
inline int SceneEditEntityAttributeProtoData::wardrobes_size() const {
  return _internal_wardrobes_size();
}
inline void SceneEditEntityAttributeProtoData::clear_wardrobes() {
  _impl_.wardrobes_.Clear();
}
inline ::message::SceneEditUGCWardrobeProtoData* SceneEditEntityAttributeProtoData::mutable_wardrobes(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.wardrobes)
  return _impl_.wardrobes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCWardrobeProtoData >*
SceneEditEntityAttributeProtoData::mutable_wardrobes() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.wardrobes)
  return &_impl_.wardrobes_;
}
inline const ::message::SceneEditUGCWardrobeProtoData& SceneEditEntityAttributeProtoData::_internal_wardrobes(int index) const {
  return _impl_.wardrobes_.Get(index);
}
inline const ::message::SceneEditUGCWardrobeProtoData& SceneEditEntityAttributeProtoData::wardrobes(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.wardrobes)
  return _internal_wardrobes(index);
}
inline ::message::SceneEditUGCWardrobeProtoData* SceneEditEntityAttributeProtoData::_internal_add_wardrobes() {
  return _impl_.wardrobes_.Add();
}
inline ::message::SceneEditUGCWardrobeProtoData* SceneEditEntityAttributeProtoData::add_wardrobes() {
  ::message::SceneEditUGCWardrobeProtoData* _add = _internal_add_wardrobes();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.wardrobes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCWardrobeProtoData >&
SceneEditEntityAttributeProtoData::wardrobes() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.wardrobes)
  return _impl_.wardrobes_;
}

// repeated .message.SceneEditSpawnBoxData spawn_boxs = 17;
inline int SceneEditEntityAttributeProtoData::_internal_spawn_boxs_size() const {
  return _impl_.spawn_boxs_.size();
}
inline int SceneEditEntityAttributeProtoData::spawn_boxs_size() const {
  return _internal_spawn_boxs_size();
}
inline void SceneEditEntityAttributeProtoData::clear_spawn_boxs() {
  _impl_.spawn_boxs_.Clear();
}
inline ::message::SceneEditSpawnBoxData* SceneEditEntityAttributeProtoData::mutable_spawn_boxs(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.spawn_boxs)
  return _impl_.spawn_boxs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditSpawnBoxData >*
SceneEditEntityAttributeProtoData::mutable_spawn_boxs() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.spawn_boxs)
  return &_impl_.spawn_boxs_;
}
inline const ::message::SceneEditSpawnBoxData& SceneEditEntityAttributeProtoData::_internal_spawn_boxs(int index) const {
  return _impl_.spawn_boxs_.Get(index);
}
inline const ::message::SceneEditSpawnBoxData& SceneEditEntityAttributeProtoData::spawn_boxs(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.spawn_boxs)
  return _internal_spawn_boxs(index);
}
inline ::message::SceneEditSpawnBoxData* SceneEditEntityAttributeProtoData::_internal_add_spawn_boxs() {
  return _impl_.spawn_boxs_.Add();
}
inline ::message::SceneEditSpawnBoxData* SceneEditEntityAttributeProtoData::add_spawn_boxs() {
  ::message::SceneEditSpawnBoxData* _add = _internal_add_spawn_boxs();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.spawn_boxs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditSpawnBoxData >&
SceneEditEntityAttributeProtoData::spawn_boxs() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.spawn_boxs)
  return _impl_.spawn_boxs_;
}

// repeated .message.SceneEditUGCFootballProtoData footballs = 18;
inline int SceneEditEntityAttributeProtoData::_internal_footballs_size() const {
  return _impl_.footballs_.size();
}
inline int SceneEditEntityAttributeProtoData::footballs_size() const {
  return _internal_footballs_size();
}
inline void SceneEditEntityAttributeProtoData::clear_footballs() {
  _impl_.footballs_.Clear();
}
inline ::message::SceneEditUGCFootballProtoData* SceneEditEntityAttributeProtoData::mutable_footballs(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.footballs)
  return _impl_.footballs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCFootballProtoData >*
SceneEditEntityAttributeProtoData::mutable_footballs() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.footballs)
  return &_impl_.footballs_;
}
inline const ::message::SceneEditUGCFootballProtoData& SceneEditEntityAttributeProtoData::_internal_footballs(int index) const {
  return _impl_.footballs_.Get(index);
}
inline const ::message::SceneEditUGCFootballProtoData& SceneEditEntityAttributeProtoData::footballs(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.footballs)
  return _internal_footballs(index);
}
inline ::message::SceneEditUGCFootballProtoData* SceneEditEntityAttributeProtoData::_internal_add_footballs() {
  return _impl_.footballs_.Add();
}
inline ::message::SceneEditUGCFootballProtoData* SceneEditEntityAttributeProtoData::add_footballs() {
  ::message::SceneEditUGCFootballProtoData* _add = _internal_add_footballs();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.footballs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCFootballProtoData >&
SceneEditEntityAttributeProtoData::footballs() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.footballs)
  return _impl_.footballs_;
}

// repeated .message.SceneEditGoalData goals = 19;
inline int SceneEditEntityAttributeProtoData::_internal_goals_size() const {
  return _impl_.goals_.size();
}
inline int SceneEditEntityAttributeProtoData::goals_size() const {
  return _internal_goals_size();
}
inline void SceneEditEntityAttributeProtoData::clear_goals() {
  _impl_.goals_.Clear();
}
inline ::message::SceneEditGoalData* SceneEditEntityAttributeProtoData::mutable_goals(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.goals)
  return _impl_.goals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditGoalData >*
SceneEditEntityAttributeProtoData::mutable_goals() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.goals)
  return &_impl_.goals_;
}
inline const ::message::SceneEditGoalData& SceneEditEntityAttributeProtoData::_internal_goals(int index) const {
  return _impl_.goals_.Get(index);
}
inline const ::message::SceneEditGoalData& SceneEditEntityAttributeProtoData::goals(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.goals)
  return _internal_goals(index);
}
inline ::message::SceneEditGoalData* SceneEditEntityAttributeProtoData::_internal_add_goals() {
  return _impl_.goals_.Add();
}
inline ::message::SceneEditGoalData* SceneEditEntityAttributeProtoData::add_goals() {
  ::message::SceneEditGoalData* _add = _internal_add_goals();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.goals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditGoalData >&
SceneEditEntityAttributeProtoData::goals() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.goals)
  return _impl_.goals_;
}

// repeated .message.SceneEditOildrumData oildrums = 20;
inline int SceneEditEntityAttributeProtoData::_internal_oildrums_size() const {
  return _impl_.oildrums_.size();
}
inline int SceneEditEntityAttributeProtoData::oildrums_size() const {
  return _internal_oildrums_size();
}
inline void SceneEditEntityAttributeProtoData::clear_oildrums() {
  _impl_.oildrums_.Clear();
}
inline ::message::SceneEditOildrumData* SceneEditEntityAttributeProtoData::mutable_oildrums(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.oildrums)
  return _impl_.oildrums_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditOildrumData >*
SceneEditEntityAttributeProtoData::mutable_oildrums() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.oildrums)
  return &_impl_.oildrums_;
}
inline const ::message::SceneEditOildrumData& SceneEditEntityAttributeProtoData::_internal_oildrums(int index) const {
  return _impl_.oildrums_.Get(index);
}
inline const ::message::SceneEditOildrumData& SceneEditEntityAttributeProtoData::oildrums(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.oildrums)
  return _internal_oildrums(index);
}
inline ::message::SceneEditOildrumData* SceneEditEntityAttributeProtoData::_internal_add_oildrums() {
  return _impl_.oildrums_.Add();
}
inline ::message::SceneEditOildrumData* SceneEditEntityAttributeProtoData::add_oildrums() {
  ::message::SceneEditOildrumData* _add = _internal_add_oildrums();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.oildrums)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditOildrumData >&
SceneEditEntityAttributeProtoData::oildrums() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.oildrums)
  return _impl_.oildrums_;
}

// repeated .message.SceneEditBasicSphereProtoData basic_sphere = 21;
inline int SceneEditEntityAttributeProtoData::_internal_basic_sphere_size() const {
  return _impl_.basic_sphere_.size();
}
inline int SceneEditEntityAttributeProtoData::basic_sphere_size() const {
  return _internal_basic_sphere_size();
}
inline void SceneEditEntityAttributeProtoData::clear_basic_sphere() {
  _impl_.basic_sphere_.Clear();
}
inline ::message::SceneEditBasicSphereProtoData* SceneEditEntityAttributeProtoData::mutable_basic_sphere(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.basic_sphere)
  return _impl_.basic_sphere_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBasicSphereProtoData >*
SceneEditEntityAttributeProtoData::mutable_basic_sphere() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.basic_sphere)
  return &_impl_.basic_sphere_;
}
inline const ::message::SceneEditBasicSphereProtoData& SceneEditEntityAttributeProtoData::_internal_basic_sphere(int index) const {
  return _impl_.basic_sphere_.Get(index);
}
inline const ::message::SceneEditBasicSphereProtoData& SceneEditEntityAttributeProtoData::basic_sphere(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.basic_sphere)
  return _internal_basic_sphere(index);
}
inline ::message::SceneEditBasicSphereProtoData* SceneEditEntityAttributeProtoData::_internal_add_basic_sphere() {
  return _impl_.basic_sphere_.Add();
}
inline ::message::SceneEditBasicSphereProtoData* SceneEditEntityAttributeProtoData::add_basic_sphere() {
  ::message::SceneEditBasicSphereProtoData* _add = _internal_add_basic_sphere();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.basic_sphere)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditBasicSphereProtoData >&
SceneEditEntityAttributeProtoData::basic_sphere() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.basic_sphere)
  return _impl_.basic_sphere_;
}

// repeated .message.SceneEditCustomLevelObjectProtoData custom_levelobject = 22;
inline int SceneEditEntityAttributeProtoData::_internal_custom_levelobject_size() const {
  return _impl_.custom_levelobject_.size();
}
inline int SceneEditEntityAttributeProtoData::custom_levelobject_size() const {
  return _internal_custom_levelobject_size();
}
inline void SceneEditEntityAttributeProtoData::clear_custom_levelobject() {
  _impl_.custom_levelobject_.Clear();
}
inline ::message::SceneEditCustomLevelObjectProtoData* SceneEditEntityAttributeProtoData::mutable_custom_levelobject(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.custom_levelobject)
  return _impl_.custom_levelobject_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomLevelObjectProtoData >*
SceneEditEntityAttributeProtoData::mutable_custom_levelobject() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.custom_levelobject)
  return &_impl_.custom_levelobject_;
}
inline const ::message::SceneEditCustomLevelObjectProtoData& SceneEditEntityAttributeProtoData::_internal_custom_levelobject(int index) const {
  return _impl_.custom_levelobject_.Get(index);
}
inline const ::message::SceneEditCustomLevelObjectProtoData& SceneEditEntityAttributeProtoData::custom_levelobject(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.custom_levelobject)
  return _internal_custom_levelobject(index);
}
inline ::message::SceneEditCustomLevelObjectProtoData* SceneEditEntityAttributeProtoData::_internal_add_custom_levelobject() {
  return _impl_.custom_levelobject_.Add();
}
inline ::message::SceneEditCustomLevelObjectProtoData* SceneEditEntityAttributeProtoData::add_custom_levelobject() {
  ::message::SceneEditCustomLevelObjectProtoData* _add = _internal_add_custom_levelobject();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.custom_levelobject)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditCustomLevelObjectProtoData >&
SceneEditEntityAttributeProtoData::custom_levelobject() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.custom_levelobject)
  return _impl_.custom_levelobject_;
}

// repeated .message.SceneEditUGCPointLightProtoData point_lights = 23;
inline int SceneEditEntityAttributeProtoData::_internal_point_lights_size() const {
  return _impl_.point_lights_.size();
}
inline int SceneEditEntityAttributeProtoData::point_lights_size() const {
  return _internal_point_lights_size();
}
inline void SceneEditEntityAttributeProtoData::clear_point_lights() {
  _impl_.point_lights_.Clear();
}
inline ::message::SceneEditUGCPointLightProtoData* SceneEditEntityAttributeProtoData::mutable_point_lights(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.point_lights)
  return _impl_.point_lights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCPointLightProtoData >*
SceneEditEntityAttributeProtoData::mutable_point_lights() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.point_lights)
  return &_impl_.point_lights_;
}
inline const ::message::SceneEditUGCPointLightProtoData& SceneEditEntityAttributeProtoData::_internal_point_lights(int index) const {
  return _impl_.point_lights_.Get(index);
}
inline const ::message::SceneEditUGCPointLightProtoData& SceneEditEntityAttributeProtoData::point_lights(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.point_lights)
  return _internal_point_lights(index);
}
inline ::message::SceneEditUGCPointLightProtoData* SceneEditEntityAttributeProtoData::_internal_add_point_lights() {
  return _impl_.point_lights_.Add();
}
inline ::message::SceneEditUGCPointLightProtoData* SceneEditEntityAttributeProtoData::add_point_lights() {
  ::message::SceneEditUGCPointLightProtoData* _add = _internal_add_point_lights();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.point_lights)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditUGCPointLightProtoData >&
SceneEditEntityAttributeProtoData::point_lights() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.point_lights)
  return _impl_.point_lights_;
}

// repeated .message.SceneEditShapeTriggerProtoData shape_triggers = 24;
inline int SceneEditEntityAttributeProtoData::_internal_shape_triggers_size() const {
  return _impl_.shape_triggers_.size();
}
inline int SceneEditEntityAttributeProtoData::shape_triggers_size() const {
  return _internal_shape_triggers_size();
}
inline void SceneEditEntityAttributeProtoData::clear_shape_triggers() {
  _impl_.shape_triggers_.Clear();
}
inline ::message::SceneEditShapeTriggerProtoData* SceneEditEntityAttributeProtoData::mutable_shape_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditEntityAttributeProtoData.shape_triggers)
  return _impl_.shape_triggers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditShapeTriggerProtoData >*
SceneEditEntityAttributeProtoData::mutable_shape_triggers() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditEntityAttributeProtoData.shape_triggers)
  return &_impl_.shape_triggers_;
}
inline const ::message::SceneEditShapeTriggerProtoData& SceneEditEntityAttributeProtoData::_internal_shape_triggers(int index) const {
  return _impl_.shape_triggers_.Get(index);
}
inline const ::message::SceneEditShapeTriggerProtoData& SceneEditEntityAttributeProtoData::shape_triggers(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditEntityAttributeProtoData.shape_triggers)
  return _internal_shape_triggers(index);
}
inline ::message::SceneEditShapeTriggerProtoData* SceneEditEntityAttributeProtoData::_internal_add_shape_triggers() {
  return _impl_.shape_triggers_.Add();
}
inline ::message::SceneEditShapeTriggerProtoData* SceneEditEntityAttributeProtoData::add_shape_triggers() {
  ::message::SceneEditShapeTriggerProtoData* _add = _internal_add_shape_triggers();
  // @@protoc_insertion_point(field_add:message.SceneEditEntityAttributeProtoData.shape_triggers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::SceneEditShapeTriggerProtoData >&
SceneEditEntityAttributeProtoData::shape_triggers() const {
  // @@protoc_insertion_point(field_list:message.SceneEditEntityAttributeProtoData.shape_triggers)
  return _impl_.shape_triggers_;
}

// -------------------------------------------------------------------

// SceneEditModeProtoData

// bytes mode_data = 1;
inline void SceneEditModeProtoData::clear_mode_data() {
  _impl_.mode_data_.ClearToEmpty();
}
inline const std::string& SceneEditModeProtoData::mode_data() const {
  // @@protoc_insertion_point(field_get:message.SceneEditModeProtoData.mode_data)
  return _internal_mode_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneEditModeProtoData::set_mode_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mode_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.SceneEditModeProtoData.mode_data)
}
inline std::string* SceneEditModeProtoData::mutable_mode_data() {
  std::string* _s = _internal_mutable_mode_data();
  // @@protoc_insertion_point(field_mutable:message.SceneEditModeProtoData.mode_data)
  return _s;
}
inline const std::string& SceneEditModeProtoData::_internal_mode_data() const {
  return _impl_.mode_data_.Get();
}
inline void SceneEditModeProtoData::_internal_set_mode_data(const std::string& value) {
  
  _impl_.mode_data_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneEditModeProtoData::_internal_mutable_mode_data() {
  
  return _impl_.mode_data_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneEditModeProtoData::release_mode_data() {
  // @@protoc_insertion_point(field_release:message.SceneEditModeProtoData.mode_data)
  return _impl_.mode_data_.Release();
}
inline void SceneEditModeProtoData::set_allocated_mode_data(std::string* mode_data) {
  if (mode_data != nullptr) {
    
  } else {
    
  }
  _impl_.mode_data_.SetAllocated(mode_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mode_data_.IsDefault()) {
    _impl_.mode_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditModeProtoData.mode_data)
}

// .message.SceneEditGeneralProtoData general_data = 2;
inline bool SceneEditModeProtoData::_internal_has_general_data() const {
  return this != internal_default_instance() && _impl_.general_data_ != nullptr;
}
inline bool SceneEditModeProtoData::has_general_data() const {
  return _internal_has_general_data();
}
inline void SceneEditModeProtoData::clear_general_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.general_data_ != nullptr) {
    delete _impl_.general_data_;
  }
  _impl_.general_data_ = nullptr;
}
inline const ::message::SceneEditGeneralProtoData& SceneEditModeProtoData::_internal_general_data() const {
  const ::message::SceneEditGeneralProtoData* p = _impl_.general_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditGeneralProtoData&>(
      ::message::_SceneEditGeneralProtoData_default_instance_);
}
inline const ::message::SceneEditGeneralProtoData& SceneEditModeProtoData::general_data() const {
  // @@protoc_insertion_point(field_get:message.SceneEditModeProtoData.general_data)
  return _internal_general_data();
}
inline void SceneEditModeProtoData::unsafe_arena_set_allocated_general_data(
    ::message::SceneEditGeneralProtoData* general_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.general_data_);
  }
  _impl_.general_data_ = general_data;
  if (general_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.SceneEditModeProtoData.general_data)
}
inline ::message::SceneEditGeneralProtoData* SceneEditModeProtoData::release_general_data() {
  
  ::message::SceneEditGeneralProtoData* temp = _impl_.general_data_;
  _impl_.general_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditGeneralProtoData* SceneEditModeProtoData::unsafe_arena_release_general_data() {
  // @@protoc_insertion_point(field_release:message.SceneEditModeProtoData.general_data)
  
  ::message::SceneEditGeneralProtoData* temp = _impl_.general_data_;
  _impl_.general_data_ = nullptr;
  return temp;
}
inline ::message::SceneEditGeneralProtoData* SceneEditModeProtoData::_internal_mutable_general_data() {
  
  if (_impl_.general_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditGeneralProtoData>(GetArenaForAllocation());
    _impl_.general_data_ = p;
  }
  return _impl_.general_data_;
}
inline ::message::SceneEditGeneralProtoData* SceneEditModeProtoData::mutable_general_data() {
  ::message::SceneEditGeneralProtoData* _msg = _internal_mutable_general_data();
  // @@protoc_insertion_point(field_mutable:message.SceneEditModeProtoData.general_data)
  return _msg;
}
inline void SceneEditModeProtoData::set_allocated_general_data(::message::SceneEditGeneralProtoData* general_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.general_data_;
  }
  if (general_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(general_data);
    if (message_arena != submessage_arena) {
      general_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, general_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.general_data_ = general_data;
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditModeProtoData.general_data)
}

// uint32 version = 3;
inline void SceneEditModeProtoData::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t SceneEditModeProtoData::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t SceneEditModeProtoData::version() const {
  // @@protoc_insertion_point(field_get:message.SceneEditModeProtoData.version)
  return _internal_version();
}
inline void SceneEditModeProtoData::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void SceneEditModeProtoData::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:message.SceneEditModeProtoData.version)
}

// repeated uint32 collision_matrix = 4;
inline int SceneEditModeProtoData::_internal_collision_matrix_size() const {
  return _impl_.collision_matrix_.size();
}
inline int SceneEditModeProtoData::collision_matrix_size() const {
  return _internal_collision_matrix_size();
}
inline void SceneEditModeProtoData::clear_collision_matrix() {
  _impl_.collision_matrix_.Clear();
}
inline uint32_t SceneEditModeProtoData::_internal_collision_matrix(int index) const {
  return _impl_.collision_matrix_.Get(index);
}
inline uint32_t SceneEditModeProtoData::collision_matrix(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditModeProtoData.collision_matrix)
  return _internal_collision_matrix(index);
}
inline void SceneEditModeProtoData::set_collision_matrix(int index, uint32_t value) {
  _impl_.collision_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.SceneEditModeProtoData.collision_matrix)
}
inline void SceneEditModeProtoData::_internal_add_collision_matrix(uint32_t value) {
  _impl_.collision_matrix_.Add(value);
}
inline void SceneEditModeProtoData::add_collision_matrix(uint32_t value) {
  _internal_add_collision_matrix(value);
  // @@protoc_insertion_point(field_add:message.SceneEditModeProtoData.collision_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SceneEditModeProtoData::_internal_collision_matrix() const {
  return _impl_.collision_matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SceneEditModeProtoData::collision_matrix() const {
  // @@protoc_insertion_point(field_list:message.SceneEditModeProtoData.collision_matrix)
  return _internal_collision_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SceneEditModeProtoData::_internal_mutable_collision_matrix() {
  return &_impl_.collision_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SceneEditModeProtoData::mutable_collision_matrix() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditModeProtoData.collision_matrix)
  return _internal_mutable_collision_matrix();
}

// -------------------------------------------------------------------

// SceneEditOildrumData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditOildrumData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditOildrumData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditOildrumData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditOildrumData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditOildrumData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditOildrumData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditOildrumData.extra_base_info_instance_id)
}

// uint32 hp = 2;
inline void SceneEditOildrumData::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t SceneEditOildrumData::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t SceneEditOildrumData::hp() const {
  // @@protoc_insertion_point(field_get:message.SceneEditOildrumData.hp)
  return _internal_hp();
}
inline void SceneEditOildrumData::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void SceneEditOildrumData::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:message.SceneEditOildrumData.hp)
}

// float range = 3;
inline void SceneEditOildrumData::clear_range() {
  _impl_.range_ = 0;
}
inline float SceneEditOildrumData::_internal_range() const {
  return _impl_.range_;
}
inline float SceneEditOildrumData::range() const {
  // @@protoc_insertion_point(field_get:message.SceneEditOildrumData.range)
  return _internal_range();
}
inline void SceneEditOildrumData::_internal_set_range(float value) {
  
  _impl_.range_ = value;
}
inline void SceneEditOildrumData::set_range(float value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:message.SceneEditOildrumData.range)
}

// float damage = 4;
inline void SceneEditOildrumData::clear_damage() {
  _impl_.damage_ = 0;
}
inline float SceneEditOildrumData::_internal_damage() const {
  return _impl_.damage_;
}
inline float SceneEditOildrumData::damage() const {
  // @@protoc_insertion_point(field_get:message.SceneEditOildrumData.damage)
  return _internal_damage();
}
inline void SceneEditOildrumData::_internal_set_damage(float value) {
  
  _impl_.damage_ = value;
}
inline void SceneEditOildrumData::set_damage(float value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:message.SceneEditOildrumData.damage)
}

// -------------------------------------------------------------------

// SceneEditBasicSphereProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditBasicSphereProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditBasicSphereProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditBasicSphereProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBasicSphereProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditBasicSphereProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditBasicSphereProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBasicSphereProtoData.extra_base_info_instance_id)
}

// float radius = 2;
inline void SceneEditBasicSphereProtoData::clear_radius() {
  _impl_.radius_ = 0;
}
inline float SceneEditBasicSphereProtoData::_internal_radius() const {
  return _impl_.radius_;
}
inline float SceneEditBasicSphereProtoData::radius() const {
  // @@protoc_insertion_point(field_get:message.SceneEditBasicSphereProtoData.radius)
  return _internal_radius();
}
inline void SceneEditBasicSphereProtoData::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void SceneEditBasicSphereProtoData::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:message.SceneEditBasicSphereProtoData.radius)
}

// -------------------------------------------------------------------

// SceneEditCustomLevelObjectProtoData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditCustomLevelObjectProtoData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditCustomLevelObjectProtoData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditCustomLevelObjectProtoData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomLevelObjectProtoData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditCustomLevelObjectProtoData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditCustomLevelObjectProtoData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditCustomLevelObjectProtoData.extra_base_info_instance_id)
}

// string res_uuid = 2;
inline void SceneEditCustomLevelObjectProtoData::clear_res_uuid() {
  _impl_.res_uuid_.ClearToEmpty();
}
inline const std::string& SceneEditCustomLevelObjectProtoData::res_uuid() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomLevelObjectProtoData.res_uuid)
  return _internal_res_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneEditCustomLevelObjectProtoData::set_res_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.res_uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.SceneEditCustomLevelObjectProtoData.res_uuid)
}
inline std::string* SceneEditCustomLevelObjectProtoData::mutable_res_uuid() {
  std::string* _s = _internal_mutable_res_uuid();
  // @@protoc_insertion_point(field_mutable:message.SceneEditCustomLevelObjectProtoData.res_uuid)
  return _s;
}
inline const std::string& SceneEditCustomLevelObjectProtoData::_internal_res_uuid() const {
  return _impl_.res_uuid_.Get();
}
inline void SceneEditCustomLevelObjectProtoData::_internal_set_res_uuid(const std::string& value) {
  
  _impl_.res_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SceneEditCustomLevelObjectProtoData::_internal_mutable_res_uuid() {
  
  return _impl_.res_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SceneEditCustomLevelObjectProtoData::release_res_uuid() {
  // @@protoc_insertion_point(field_release:message.SceneEditCustomLevelObjectProtoData.res_uuid)
  return _impl_.res_uuid_.Release();
}
inline void SceneEditCustomLevelObjectProtoData::set_allocated_res_uuid(std::string* res_uuid) {
  if (res_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.res_uuid_.SetAllocated(res_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.res_uuid_.IsDefault()) {
    _impl_.res_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditCustomLevelObjectProtoData.res_uuid)
}

// -------------------------------------------------------------------

// SceneEditGoalData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditGoalData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditGoalData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditGoalData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGoalData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditGoalData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditGoalData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGoalData.extra_base_info_instance_id)
}

// uint32 team_id = 2;
inline void SceneEditGoalData::clear_team_id() {
  _impl_.team_id_ = 0u;
}
inline uint32_t SceneEditGoalData::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t SceneEditGoalData::team_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGoalData.team_id)
  return _internal_team_id();
}
inline void SceneEditGoalData::_internal_set_team_id(uint32_t value) {
  
  _impl_.team_id_ = value;
}
inline void SceneEditGoalData::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGoalData.team_id)
}

// -------------------------------------------------------------------

// SceneEditSpawnBoxData

// uint32 extra_base_info_instance_id = 1;
inline void SceneEditSpawnBoxData::clear_extra_base_info_instance_id() {
  _impl_.extra_base_info_instance_id_ = 0u;
}
inline uint32_t SceneEditSpawnBoxData::_internal_extra_base_info_instance_id() const {
  return _impl_.extra_base_info_instance_id_;
}
inline uint32_t SceneEditSpawnBoxData::extra_base_info_instance_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditSpawnBoxData.extra_base_info_instance_id)
  return _internal_extra_base_info_instance_id();
}
inline void SceneEditSpawnBoxData::_internal_set_extra_base_info_instance_id(uint32_t value) {
  
  _impl_.extra_base_info_instance_id_ = value;
}
inline void SceneEditSpawnBoxData::set_extra_base_info_instance_id(uint32_t value) {
  _internal_set_extra_base_info_instance_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditSpawnBoxData.extra_base_info_instance_id)
}

// uint32 x = 2;
inline void SceneEditSpawnBoxData::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t SceneEditSpawnBoxData::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t SceneEditSpawnBoxData::x() const {
  // @@protoc_insertion_point(field_get:message.SceneEditSpawnBoxData.x)
  return _internal_x();
}
inline void SceneEditSpawnBoxData::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void SceneEditSpawnBoxData::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:message.SceneEditSpawnBoxData.x)
}

// uint32 y = 3;
inline void SceneEditSpawnBoxData::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t SceneEditSpawnBoxData::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t SceneEditSpawnBoxData::y() const {
  // @@protoc_insertion_point(field_get:message.SceneEditSpawnBoxData.y)
  return _internal_y();
}
inline void SceneEditSpawnBoxData::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void SceneEditSpawnBoxData::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:message.SceneEditSpawnBoxData.y)
}

// uint32 z = 4;
inline void SceneEditSpawnBoxData::clear_z() {
  _impl_.z_ = 0u;
}
inline uint32_t SceneEditSpawnBoxData::_internal_z() const {
  return _impl_.z_;
}
inline uint32_t SceneEditSpawnBoxData::z() const {
  // @@protoc_insertion_point(field_get:message.SceneEditSpawnBoxData.z)
  return _internal_z();
}
inline void SceneEditSpawnBoxData::_internal_set_z(uint32_t value) {
  
  _impl_.z_ = value;
}
inline void SceneEditSpawnBoxData::set_z(uint32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:message.SceneEditSpawnBoxData.z)
}

// uint32 spawn_point_count = 5;
inline void SceneEditSpawnBoxData::clear_spawn_point_count() {
  _impl_.spawn_point_count_ = 0u;
}
inline uint32_t SceneEditSpawnBoxData::_internal_spawn_point_count() const {
  return _impl_.spawn_point_count_;
}
inline uint32_t SceneEditSpawnBoxData::spawn_point_count() const {
  // @@protoc_insertion_point(field_get:message.SceneEditSpawnBoxData.spawn_point_count)
  return _internal_spawn_point_count();
}
inline void SceneEditSpawnBoxData::_internal_set_spawn_point_count(uint32_t value) {
  
  _impl_.spawn_point_count_ = value;
}
inline void SceneEditSpawnBoxData::set_spawn_point_count(uint32_t value) {
  _internal_set_spawn_point_count(value);
  // @@protoc_insertion_point(field_set:message.SceneEditSpawnBoxData.spawn_point_count)
}

// int32 team_id = 6;
inline void SceneEditSpawnBoxData::clear_team_id() {
  _impl_.team_id_ = 0;
}
inline int32_t SceneEditSpawnBoxData::_internal_team_id() const {
  return _impl_.team_id_;
}
inline int32_t SceneEditSpawnBoxData::team_id() const {
  // @@protoc_insertion_point(field_get:message.SceneEditSpawnBoxData.team_id)
  return _internal_team_id();
}
inline void SceneEditSpawnBoxData::_internal_set_team_id(int32_t value) {
  
  _impl_.team_id_ = value;
}
inline void SceneEditSpawnBoxData::set_team_id(int32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:message.SceneEditSpawnBoxData.team_id)
}

// -------------------------------------------------------------------

// SceneEditGeneralProtoData

// uint32 max_hp = 1;
inline void SceneEditGeneralProtoData::clear_max_hp() {
  _impl_.max_hp_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline uint32_t SceneEditGeneralProtoData::max_hp() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.max_hp)
  return _internal_max_hp();
}
inline void SceneEditGeneralProtoData::_internal_set_max_hp(uint32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void SceneEditGeneralProtoData::set_max_hp(uint32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.max_hp)
}

// uint32 max_ep = 2;
inline void SceneEditGeneralProtoData::clear_max_ep() {
  _impl_.max_ep_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_max_ep() const {
  return _impl_.max_ep_;
}
inline uint32_t SceneEditGeneralProtoData::max_ep() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.max_ep)
  return _internal_max_ep();
}
inline void SceneEditGeneralProtoData::_internal_set_max_ep(uint32_t value) {
  
  _impl_.max_ep_ = value;
}
inline void SceneEditGeneralProtoData::set_max_ep(uint32_t value) {
  _internal_set_max_ep(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.max_ep)
}

// uint32 start_ep = 3;
inline void SceneEditGeneralProtoData::clear_start_ep() {
  _impl_.start_ep_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_start_ep() const {
  return _impl_.start_ep_;
}
inline uint32_t SceneEditGeneralProtoData::start_ep() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.start_ep)
  return _internal_start_ep();
}
inline void SceneEditGeneralProtoData::_internal_set_start_ep(uint32_t value) {
  
  _impl_.start_ep_ = value;
}
inline void SceneEditGeneralProtoData::set_start_ep(uint32_t value) {
  _internal_set_start_ep(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.start_ep)
}

// bool auto_healing = 4;
inline void SceneEditGeneralProtoData::clear_auto_healing() {
  _impl_.auto_healing_ = false;
}
inline bool SceneEditGeneralProtoData::_internal_auto_healing() const {
  return _impl_.auto_healing_;
}
inline bool SceneEditGeneralProtoData::auto_healing() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.auto_healing)
  return _internal_auto_healing();
}
inline void SceneEditGeneralProtoData::_internal_set_auto_healing(bool value) {
  
  _impl_.auto_healing_ = value;
}
inline void SceneEditGeneralProtoData::set_auto_healing(bool value) {
  _internal_set_auto_healing(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.auto_healing)
}

// uint32 damage = 5;
inline void SceneEditGeneralProtoData::clear_damage() {
  _impl_.damage_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t SceneEditGeneralProtoData::damage() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.damage)
  return _internal_damage();
}
inline void SceneEditGeneralProtoData::_internal_set_damage(uint32_t value) {
  
  _impl_.damage_ = value;
}
inline void SceneEditGeneralProtoData::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.damage)
}

// uint32 receive_damage = 6;
inline void SceneEditGeneralProtoData::clear_receive_damage() {
  _impl_.receive_damage_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_receive_damage() const {
  return _impl_.receive_damage_;
}
inline uint32_t SceneEditGeneralProtoData::receive_damage() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.receive_damage)
  return _internal_receive_damage();
}
inline void SceneEditGeneralProtoData::_internal_set_receive_damage(uint32_t value) {
  
  _impl_.receive_damage_ = value;
}
inline void SceneEditGeneralProtoData::set_receive_damage(uint32_t value) {
  _internal_set_receive_damage(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.receive_damage)
}

// float move_speed = 7;
inline void SceneEditGeneralProtoData::clear_move_speed() {
  _impl_.move_speed_ = 0;
}
inline float SceneEditGeneralProtoData::_internal_move_speed() const {
  return _impl_.move_speed_;
}
inline float SceneEditGeneralProtoData::move_speed() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.move_speed)
  return _internal_move_speed();
}
inline void SceneEditGeneralProtoData::_internal_set_move_speed(float value) {
  
  _impl_.move_speed_ = value;
}
inline void SceneEditGeneralProtoData::set_move_speed(float value) {
  _internal_set_move_speed(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.move_speed)
}

// float jump_height = 8;
inline void SceneEditGeneralProtoData::clear_jump_height() {
  _impl_.jump_height_ = 0;
}
inline float SceneEditGeneralProtoData::_internal_jump_height() const {
  return _impl_.jump_height_;
}
inline float SceneEditGeneralProtoData::jump_height() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.jump_height)
  return _internal_jump_height();
}
inline void SceneEditGeneralProtoData::_internal_set_jump_height(float value) {
  
  _impl_.jump_height_ = value;
}
inline void SceneEditGeneralProtoData::set_jump_height(float value) {
  _internal_set_jump_height(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.jump_height)
}

// bool limited_ammo = 9;
inline void SceneEditGeneralProtoData::clear_limited_ammo() {
  _impl_.limited_ammo_ = false;
}
inline bool SceneEditGeneralProtoData::_internal_limited_ammo() const {
  return _impl_.limited_ammo_;
}
inline bool SceneEditGeneralProtoData::limited_ammo() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.limited_ammo)
  return _internal_limited_ammo();
}
inline void SceneEditGeneralProtoData::_internal_set_limited_ammo(bool value) {
  
  _impl_.limited_ammo_ = value;
}
inline void SceneEditGeneralProtoData::set_limited_ammo(bool value) {
  _internal_set_limited_ammo(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.limited_ammo)
}

// bool enable_active_skill = 10;
inline void SceneEditGeneralProtoData::clear_enable_active_skill() {
  _impl_.enable_active_skill_ = false;
}
inline bool SceneEditGeneralProtoData::_internal_enable_active_skill() const {
  return _impl_.enable_active_skill_;
}
inline bool SceneEditGeneralProtoData::enable_active_skill() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.enable_active_skill)
  return _internal_enable_active_skill();
}
inline void SceneEditGeneralProtoData::_internal_set_enable_active_skill(bool value) {
  
  _impl_.enable_active_skill_ = value;
}
inline void SceneEditGeneralProtoData::set_enable_active_skill(bool value) {
  _internal_set_enable_active_skill(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.enable_active_skill)
}

// bool enable_passive_skill = 11;
inline void SceneEditGeneralProtoData::clear_enable_passive_skill() {
  _impl_.enable_passive_skill_ = false;
}
inline bool SceneEditGeneralProtoData::_internal_enable_passive_skill() const {
  return _impl_.enable_passive_skill_;
}
inline bool SceneEditGeneralProtoData::enable_passive_skill() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.enable_passive_skill)
  return _internal_enable_passive_skill();
}
inline void SceneEditGeneralProtoData::_internal_set_enable_passive_skill(bool value) {
  
  _impl_.enable_passive_skill_ = value;
}
inline void SceneEditGeneralProtoData::set_enable_passive_skill(bool value) {
  _internal_set_enable_passive_skill(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.enable_passive_skill)
}

// uint32 global_active_skill_cd_percent = 12;
inline void SceneEditGeneralProtoData::clear_global_active_skill_cd_percent() {
  _impl_.global_active_skill_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_global_active_skill_cd_percent() const {
  return _impl_.global_active_skill_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::global_active_skill_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.global_active_skill_cd_percent)
  return _internal_global_active_skill_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_global_active_skill_cd_percent(uint32_t value) {
  
  _impl_.global_active_skill_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_global_active_skill_cd_percent(uint32_t value) {
  _internal_set_global_active_skill_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.global_active_skill_cd_percent)
}

// uint32 playerskill_transform_cd_percent = 13;
inline void SceneEditGeneralProtoData::clear_playerskill_transform_cd_percent() {
  _impl_.playerskill_transform_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_transform_cd_percent() const {
  return _impl_.playerskill_transform_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_transform_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_transform_cd_percent)
  return _internal_playerskill_transform_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_transform_cd_percent(uint32_t value) {
  
  _impl_.playerskill_transform_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_transform_cd_percent(uint32_t value) {
  _internal_set_playerskill_transform_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_transform_cd_percent)
}

// uint32 playerskill_epchangetohp_cd_percent = 14;
inline void SceneEditGeneralProtoData::clear_playerskill_epchangetohp_cd_percent() {
  _impl_.playerskill_epchangetohp_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_epchangetohp_cd_percent() const {
  return _impl_.playerskill_epchangetohp_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_epchangetohp_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_epchangetohp_cd_percent)
  return _internal_playerskill_epchangetohp_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_epchangetohp_cd_percent(uint32_t value) {
  
  _impl_.playerskill_epchangetohp_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_epchangetohp_cd_percent(uint32_t value) {
  _internal_set_playerskill_epchangetohp_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_epchangetohp_cd_percent)
}

// uint32 playerskill_healingdance_cd_percent = 15;
inline void SceneEditGeneralProtoData::clear_playerskill_healingdance_cd_percent() {
  _impl_.playerskill_healingdance_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_healingdance_cd_percent() const {
  return _impl_.playerskill_healingdance_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_healingdance_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_healingdance_cd_percent)
  return _internal_playerskill_healingdance_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_healingdance_cd_percent(uint32_t value) {
  
  _impl_.playerskill_healingdance_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_healingdance_cd_percent(uint32_t value) {
  _internal_set_playerskill_healingdance_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_healingdance_cd_percent)
}

// uint32 playerskill_graffitimonitor_cd_percent = 16;
inline void SceneEditGeneralProtoData::clear_playerskill_graffitimonitor_cd_percent() {
  _impl_.playerskill_graffitimonitor_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_graffitimonitor_cd_percent() const {
  return _impl_.playerskill_graffitimonitor_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_graffitimonitor_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_graffitimonitor_cd_percent)
  return _internal_playerskill_graffitimonitor_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_graffitimonitor_cd_percent(uint32_t value) {
  
  _impl_.playerskill_graffitimonitor_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_graffitimonitor_cd_percent(uint32_t value) {
  _internal_set_playerskill_graffitimonitor_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_graffitimonitor_cd_percent)
}

// uint32 playerskill_detective_cd_percent = 17;
inline void SceneEditGeneralProtoData::clear_playerskill_detective_cd_percent() {
  _impl_.playerskill_detective_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_detective_cd_percent() const {
  return _impl_.playerskill_detective_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_detective_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_detective_cd_percent)
  return _internal_playerskill_detective_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_detective_cd_percent(uint32_t value) {
  
  _impl_.playerskill_detective_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_detective_cd_percent(uint32_t value) {
  _internal_set_playerskill_detective_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_detective_cd_percent)
}

// uint32 playerskill_epfastandupper_cd_percent = 18;
inline void SceneEditGeneralProtoData::clear_playerskill_epfastandupper_cd_percent() {
  _impl_.playerskill_epfastandupper_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_epfastandupper_cd_percent() const {
  return _impl_.playerskill_epfastandupper_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_epfastandupper_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_epfastandupper_cd_percent)
  return _internal_playerskill_epfastandupper_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_epfastandupper_cd_percent(uint32_t value) {
  
  _impl_.playerskill_epfastandupper_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_epfastandupper_cd_percent(uint32_t value) {
  _internal_set_playerskill_epfastandupper_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_epfastandupper_cd_percent)
}

// uint32 playerskill_adddamagebycosthp_cd_percent = 19;
inline void SceneEditGeneralProtoData::clear_playerskill_adddamagebycosthp_cd_percent() {
  _impl_.playerskill_adddamagebycosthp_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_adddamagebycosthp_cd_percent() const {
  return _impl_.playerskill_adddamagebycosthp_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_adddamagebycosthp_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_adddamagebycosthp_cd_percent)
  return _internal_playerskill_adddamagebycosthp_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_adddamagebycosthp_cd_percent(uint32_t value) {
  
  _impl_.playerskill_adddamagebycosthp_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_adddamagebycosthp_cd_percent(uint32_t value) {
  _internal_set_playerskill_adddamagebycosthp_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_adddamagebycosthp_cd_percent)
}

// uint32 playerskill_spaceshield_cd_percent = 20;
inline void SceneEditGeneralProtoData::clear_playerskill_spaceshield_cd_percent() {
  _impl_.playerskill_spaceshield_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_spaceshield_cd_percent() const {
  return _impl_.playerskill_spaceshield_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_spaceshield_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_spaceshield_cd_percent)
  return _internal_playerskill_spaceshield_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_spaceshield_cd_percent(uint32_t value) {
  
  _impl_.playerskill_spaceshield_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_spaceshield_cd_percent(uint32_t value) {
  _internal_set_playerskill_spaceshield_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_spaceshield_cd_percent)
}

// uint32 playerskill_blowupicewall_cd_percent = 21;
inline void SceneEditGeneralProtoData::clear_playerskill_blowupicewall_cd_percent() {
  _impl_.playerskill_blowupicewall_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_blowupicewall_cd_percent() const {
  return _impl_.playerskill_blowupicewall_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_blowupicewall_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_blowupicewall_cd_percent)
  return _internal_playerskill_blowupicewall_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_blowupicewall_cd_percent(uint32_t value) {
  
  _impl_.playerskill_blowupicewall_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_blowupicewall_cd_percent(uint32_t value) {
  _internal_set_playerskill_blowupicewall_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_blowupicewall_cd_percent)
}

// uint32 playerskill_tempincreasehp_cd_percent = 22;
inline void SceneEditGeneralProtoData::clear_playerskill_tempincreasehp_cd_percent() {
  _impl_.playerskill_tempincreasehp_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_tempincreasehp_cd_percent() const {
  return _impl_.playerskill_tempincreasehp_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_tempincreasehp_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_tempincreasehp_cd_percent)
  return _internal_playerskill_tempincreasehp_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_tempincreasehp_cd_percent(uint32_t value) {
  
  _impl_.playerskill_tempincreasehp_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_tempincreasehp_cd_percent(uint32_t value) {
  _internal_set_playerskill_tempincreasehp_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_tempincreasehp_cd_percent)
}

// uint32 playerskill_addhpandrescure_cd_percent = 23;
inline void SceneEditGeneralProtoData::clear_playerskill_addhpandrescure_cd_percent() {
  _impl_.playerskill_addhpandrescure_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_addhpandrescure_cd_percent() const {
  return _impl_.playerskill_addhpandrescure_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_addhpandrescure_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_addhpandrescure_cd_percent)
  return _internal_playerskill_addhpandrescure_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_addhpandrescure_cd_percent(uint32_t value) {
  
  _impl_.playerskill_addhpandrescure_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_addhpandrescure_cd_percent(uint32_t value) {
  _internal_set_playerskill_addhpandrescure_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_addhpandrescure_cd_percent)
}

// uint32 playerskill_dwshield_cd_percent = 25;
inline void SceneEditGeneralProtoData::clear_playerskill_dwshield_cd_percent() {
  _impl_.playerskill_dwshield_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_dwshield_cd_percent() const {
  return _impl_.playerskill_dwshield_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_dwshield_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_dwshield_cd_percent)
  return _internal_playerskill_dwshield_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_dwshield_cd_percent(uint32_t value) {
  
  _impl_.playerskill_dwshield_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_dwshield_cd_percent(uint32_t value) {
  _internal_set_playerskill_dwshield_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_dwshield_cd_percent)
}

// uint32 playerskill_throwsilence_cd_percent = 26;
inline void SceneEditGeneralProtoData::clear_playerskill_throwsilence_cd_percent() {
  _impl_.playerskill_throwsilence_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_throwsilence_cd_percent() const {
  return _impl_.playerskill_throwsilence_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_throwsilence_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_throwsilence_cd_percent)
  return _internal_playerskill_throwsilence_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_throwsilence_cd_percent(uint32_t value) {
  
  _impl_.playerskill_throwsilence_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_throwsilence_cd_percent(uint32_t value) {
  _internal_set_playerskill_throwsilence_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_throwsilence_cd_percent)
}

// uint32 playerskill_createflightbomb_cd_percent = 27;
inline void SceneEditGeneralProtoData::clear_playerskill_createflightbomb_cd_percent() {
  _impl_.playerskill_createflightbomb_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_createflightbomb_cd_percent() const {
  return _impl_.playerskill_createflightbomb_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_createflightbomb_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_createflightbomb_cd_percent)
  return _internal_playerskill_createflightbomb_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_createflightbomb_cd_percent(uint32_t value) {
  
  _impl_.playerskill_createflightbomb_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_createflightbomb_cd_percent(uint32_t value) {
  _internal_set_playerskill_createflightbomb_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_createflightbomb_cd_percent)
}

// uint32 playerskill_markicewall_cd_percent = 28;
inline void SceneEditGeneralProtoData::clear_playerskill_markicewall_cd_percent() {
  _impl_.playerskill_markicewall_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_markicewall_cd_percent() const {
  return _impl_.playerskill_markicewall_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_markicewall_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_markicewall_cd_percent)
  return _internal_playerskill_markicewall_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_markicewall_cd_percent(uint32_t value) {
  
  _impl_.playerskill_markicewall_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_markicewall_cd_percent(uint32_t value) {
  _internal_set_playerskill_markicewall_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_markicewall_cd_percent)
}

// uint32 playerskill_runspeedup_cd_percent = 29;
inline void SceneEditGeneralProtoData::clear_playerskill_runspeedup_cd_percent() {
  _impl_.playerskill_runspeedup_cd_percent_ = 0u;
}
inline uint32_t SceneEditGeneralProtoData::_internal_playerskill_runspeedup_cd_percent() const {
  return _impl_.playerskill_runspeedup_cd_percent_;
}
inline uint32_t SceneEditGeneralProtoData::playerskill_runspeedup_cd_percent() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.playerskill_runspeedup_cd_percent)
  return _internal_playerskill_runspeedup_cd_percent();
}
inline void SceneEditGeneralProtoData::_internal_set_playerskill_runspeedup_cd_percent(uint32_t value) {
  
  _impl_.playerskill_runspeedup_cd_percent_ = value;
}
inline void SceneEditGeneralProtoData::set_playerskill_runspeedup_cd_percent(uint32_t value) {
  _internal_set_playerskill_runspeedup_cd_percent(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.playerskill_runspeedup_cd_percent)
}

// bool unlimited_bullet = 30;
inline void SceneEditGeneralProtoData::clear_unlimited_bullet() {
  _impl_.unlimited_bullet_ = false;
}
inline bool SceneEditGeneralProtoData::_internal_unlimited_bullet() const {
  return _impl_.unlimited_bullet_;
}
inline bool SceneEditGeneralProtoData::unlimited_bullet() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.unlimited_bullet)
  return _internal_unlimited_bullet();
}
inline void SceneEditGeneralProtoData::_internal_set_unlimited_bullet(bool value) {
  
  _impl_.unlimited_bullet_ = value;
}
inline void SceneEditGeneralProtoData::set_unlimited_bullet(bool value) {
  _internal_set_unlimited_bullet(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.unlimited_bullet)
}

// bool unlimited_gloowall = 31;
inline void SceneEditGeneralProtoData::clear_unlimited_gloowall() {
  _impl_.unlimited_gloowall_ = false;
}
inline bool SceneEditGeneralProtoData::_internal_unlimited_gloowall() const {
  return _impl_.unlimited_gloowall_;
}
inline bool SceneEditGeneralProtoData::unlimited_gloowall() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.unlimited_gloowall)
  return _internal_unlimited_gloowall();
}
inline void SceneEditGeneralProtoData::_internal_set_unlimited_gloowall(bool value) {
  
  _impl_.unlimited_gloowall_ = value;
}
inline void SceneEditGeneralProtoData::set_unlimited_gloowall(bool value) {
  _internal_set_unlimited_gloowall(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.unlimited_gloowall)
}

// bool unlimited_throwables = 32;
inline void SceneEditGeneralProtoData::clear_unlimited_throwables() {
  _impl_.unlimited_throwables_ = false;
}
inline bool SceneEditGeneralProtoData::_internal_unlimited_throwables() const {
  return _impl_.unlimited_throwables_;
}
inline bool SceneEditGeneralProtoData::unlimited_throwables() const {
  // @@protoc_insertion_point(field_get:message.SceneEditGeneralProtoData.unlimited_throwables)
  return _internal_unlimited_throwables();
}
inline void SceneEditGeneralProtoData::_internal_set_unlimited_throwables(bool value) {
  
  _impl_.unlimited_throwables_ = value;
}
inline void SceneEditGeneralProtoData::set_unlimited_throwables(bool value) {
  _internal_set_unlimited_throwables(value);
  // @@protoc_insertion_point(field_set:message.SceneEditGeneralProtoData.unlimited_throwables)
}

// -------------------------------------------------------------------

// SceneEditCSModeProtoData

// .message.SceneEditEndConditionProtoData end_condition = 1;
inline bool SceneEditCSModeProtoData::_internal_has_end_condition() const {
  return this != internal_default_instance() && _impl_.end_condition_ != nullptr;
}
inline bool SceneEditCSModeProtoData::has_end_condition() const {
  return _internal_has_end_condition();
}
inline void SceneEditCSModeProtoData::clear_end_condition() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_condition_ != nullptr) {
    delete _impl_.end_condition_;
  }
  _impl_.end_condition_ = nullptr;
}
inline const ::message::SceneEditEndConditionProtoData& SceneEditCSModeProtoData::_internal_end_condition() const {
  const ::message::SceneEditEndConditionProtoData* p = _impl_.end_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditEndConditionProtoData&>(
      ::message::_SceneEditEndConditionProtoData_default_instance_);
}
inline const ::message::SceneEditEndConditionProtoData& SceneEditCSModeProtoData::end_condition() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCSModeProtoData.end_condition)
  return _internal_end_condition();
}
inline void SceneEditCSModeProtoData::unsafe_arena_set_allocated_end_condition(
    ::message::SceneEditEndConditionProtoData* end_condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_condition_);
  }
  _impl_.end_condition_ = end_condition;
  if (end_condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.SceneEditCSModeProtoData.end_condition)
}
inline ::message::SceneEditEndConditionProtoData* SceneEditCSModeProtoData::release_end_condition() {
  
  ::message::SceneEditEndConditionProtoData* temp = _impl_.end_condition_;
  _impl_.end_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditEndConditionProtoData* SceneEditCSModeProtoData::unsafe_arena_release_end_condition() {
  // @@protoc_insertion_point(field_release:message.SceneEditCSModeProtoData.end_condition)
  
  ::message::SceneEditEndConditionProtoData* temp = _impl_.end_condition_;
  _impl_.end_condition_ = nullptr;
  return temp;
}
inline ::message::SceneEditEndConditionProtoData* SceneEditCSModeProtoData::_internal_mutable_end_condition() {
  
  if (_impl_.end_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditEndConditionProtoData>(GetArenaForAllocation());
    _impl_.end_condition_ = p;
  }
  return _impl_.end_condition_;
}
inline ::message::SceneEditEndConditionProtoData* SceneEditCSModeProtoData::mutable_end_condition() {
  ::message::SceneEditEndConditionProtoData* _msg = _internal_mutable_end_condition();
  // @@protoc_insertion_point(field_mutable:message.SceneEditCSModeProtoData.end_condition)
  return _msg;
}
inline void SceneEditCSModeProtoData::set_allocated_end_condition(::message::SceneEditEndConditionProtoData* end_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_condition_;
  }
  if (end_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_condition);
    if (message_arena != submessage_arena) {
      end_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_condition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_condition_ = end_condition;
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditCSModeProtoData.end_condition)
}

// float safe_zone_size = 2;
inline void SceneEditCSModeProtoData::clear_safe_zone_size() {
  _impl_.safe_zone_size_ = 0;
}
inline float SceneEditCSModeProtoData::_internal_safe_zone_size() const {
  return _impl_.safe_zone_size_;
}
inline float SceneEditCSModeProtoData::safe_zone_size() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCSModeProtoData.safe_zone_size)
  return _internal_safe_zone_size();
}
inline void SceneEditCSModeProtoData::_internal_set_safe_zone_size(float value) {
  
  _impl_.safe_zone_size_ = value;
}
inline void SceneEditCSModeProtoData::set_safe_zone_size(float value) {
  _internal_set_safe_zone_size(value);
  // @@protoc_insertion_point(field_set:message.SceneEditCSModeProtoData.safe_zone_size)
}

// uint32 safe_zone_start_time = 3;
inline void SceneEditCSModeProtoData::clear_safe_zone_start_time() {
  _impl_.safe_zone_start_time_ = 0u;
}
inline uint32_t SceneEditCSModeProtoData::_internal_safe_zone_start_time() const {
  return _impl_.safe_zone_start_time_;
}
inline uint32_t SceneEditCSModeProtoData::safe_zone_start_time() const {
  // @@protoc_insertion_point(field_get:message.SceneEditCSModeProtoData.safe_zone_start_time)
  return _internal_safe_zone_start_time();
}
inline void SceneEditCSModeProtoData::_internal_set_safe_zone_start_time(uint32_t value) {
  
  _impl_.safe_zone_start_time_ = value;
}
inline void SceneEditCSModeProtoData::set_safe_zone_start_time(uint32_t value) {
  _internal_set_safe_zone_start_time(value);
  // @@protoc_insertion_point(field_set:message.SceneEditCSModeProtoData.safe_zone_start_time)
}

// -------------------------------------------------------------------

// SceneEditIntegralModeProtoData

// .message.SceneEditEndConditionProtoData end_condition = 1;
inline bool SceneEditIntegralModeProtoData::_internal_has_end_condition() const {
  return this != internal_default_instance() && _impl_.end_condition_ != nullptr;
}
inline bool SceneEditIntegralModeProtoData::has_end_condition() const {
  return _internal_has_end_condition();
}
inline void SceneEditIntegralModeProtoData::clear_end_condition() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_condition_ != nullptr) {
    delete _impl_.end_condition_;
  }
  _impl_.end_condition_ = nullptr;
}
inline const ::message::SceneEditEndConditionProtoData& SceneEditIntegralModeProtoData::_internal_end_condition() const {
  const ::message::SceneEditEndConditionProtoData* p = _impl_.end_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditEndConditionProtoData&>(
      ::message::_SceneEditEndConditionProtoData_default_instance_);
}
inline const ::message::SceneEditEndConditionProtoData& SceneEditIntegralModeProtoData::end_condition() const {
  // @@protoc_insertion_point(field_get:message.SceneEditIntegralModeProtoData.end_condition)
  return _internal_end_condition();
}
inline void SceneEditIntegralModeProtoData::unsafe_arena_set_allocated_end_condition(
    ::message::SceneEditEndConditionProtoData* end_condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_condition_);
  }
  _impl_.end_condition_ = end_condition;
  if (end_condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.SceneEditIntegralModeProtoData.end_condition)
}
inline ::message::SceneEditEndConditionProtoData* SceneEditIntegralModeProtoData::release_end_condition() {
  
  ::message::SceneEditEndConditionProtoData* temp = _impl_.end_condition_;
  _impl_.end_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditEndConditionProtoData* SceneEditIntegralModeProtoData::unsafe_arena_release_end_condition() {
  // @@protoc_insertion_point(field_release:message.SceneEditIntegralModeProtoData.end_condition)
  
  ::message::SceneEditEndConditionProtoData* temp = _impl_.end_condition_;
  _impl_.end_condition_ = nullptr;
  return temp;
}
inline ::message::SceneEditEndConditionProtoData* SceneEditIntegralModeProtoData::_internal_mutable_end_condition() {
  
  if (_impl_.end_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditEndConditionProtoData>(GetArenaForAllocation());
    _impl_.end_condition_ = p;
  }
  return _impl_.end_condition_;
}
inline ::message::SceneEditEndConditionProtoData* SceneEditIntegralModeProtoData::mutable_end_condition() {
  ::message::SceneEditEndConditionProtoData* _msg = _internal_mutable_end_condition();
  // @@protoc_insertion_point(field_mutable:message.SceneEditIntegralModeProtoData.end_condition)
  return _msg;
}
inline void SceneEditIntegralModeProtoData::set_allocated_end_condition(::message::SceneEditEndConditionProtoData* end_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_condition_;
  }
  if (end_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_condition);
    if (message_arena != submessage_arena) {
      end_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_condition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_condition_ = end_condition;
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditIntegralModeProtoData.end_condition)
}

// uint32 kill_score = 2;
inline void SceneEditIntegralModeProtoData::clear_kill_score() {
  _impl_.kill_score_ = 0u;
}
inline uint32_t SceneEditIntegralModeProtoData::_internal_kill_score() const {
  return _impl_.kill_score_;
}
inline uint32_t SceneEditIntegralModeProtoData::kill_score() const {
  // @@protoc_insertion_point(field_get:message.SceneEditIntegralModeProtoData.kill_score)
  return _internal_kill_score();
}
inline void SceneEditIntegralModeProtoData::_internal_set_kill_score(uint32_t value) {
  
  _impl_.kill_score_ = value;
}
inline void SceneEditIntegralModeProtoData::set_kill_score(uint32_t value) {
  _internal_set_kill_score(value);
  // @@protoc_insertion_point(field_set:message.SceneEditIntegralModeProtoData.kill_score)
}

// uint32 revive_rule = 3;
inline void SceneEditIntegralModeProtoData::clear_revive_rule() {
  _impl_.revive_rule_ = 0u;
}
inline uint32_t SceneEditIntegralModeProtoData::_internal_revive_rule() const {
  return _impl_.revive_rule_;
}
inline uint32_t SceneEditIntegralModeProtoData::revive_rule() const {
  // @@protoc_insertion_point(field_get:message.SceneEditIntegralModeProtoData.revive_rule)
  return _internal_revive_rule();
}
inline void SceneEditIntegralModeProtoData::_internal_set_revive_rule(uint32_t value) {
  
  _impl_.revive_rule_ = value;
}
inline void SceneEditIntegralModeProtoData::set_revive_rule(uint32_t value) {
  _internal_set_revive_rule(value);
  // @@protoc_insertion_point(field_set:message.SceneEditIntegralModeProtoData.revive_rule)
}

// uint32 revive_time = 4;
inline void SceneEditIntegralModeProtoData::clear_revive_time() {
  _impl_.revive_time_ = 0u;
}
inline uint32_t SceneEditIntegralModeProtoData::_internal_revive_time() const {
  return _impl_.revive_time_;
}
inline uint32_t SceneEditIntegralModeProtoData::revive_time() const {
  // @@protoc_insertion_point(field_get:message.SceneEditIntegralModeProtoData.revive_time)
  return _internal_revive_time();
}
inline void SceneEditIntegralModeProtoData::_internal_set_revive_time(uint32_t value) {
  
  _impl_.revive_time_ = value;
}
inline void SceneEditIntegralModeProtoData::set_revive_time(uint32_t value) {
  _internal_set_revive_time(value);
  // @@protoc_insertion_point(field_set:message.SceneEditIntegralModeProtoData.revive_time)
}

// -------------------------------------------------------------------

// SceneEditPartyModeProtoData

// .message.SceneEditEndConditionProtoData end_condition = 1;
inline bool SceneEditPartyModeProtoData::_internal_has_end_condition() const {
  return this != internal_default_instance() && _impl_.end_condition_ != nullptr;
}
inline bool SceneEditPartyModeProtoData::has_end_condition() const {
  return _internal_has_end_condition();
}
inline void SceneEditPartyModeProtoData::clear_end_condition() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_condition_ != nullptr) {
    delete _impl_.end_condition_;
  }
  _impl_.end_condition_ = nullptr;
}
inline const ::message::SceneEditEndConditionProtoData& SceneEditPartyModeProtoData::_internal_end_condition() const {
  const ::message::SceneEditEndConditionProtoData* p = _impl_.end_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditEndConditionProtoData&>(
      ::message::_SceneEditEndConditionProtoData_default_instance_);
}
inline const ::message::SceneEditEndConditionProtoData& SceneEditPartyModeProtoData::end_condition() const {
  // @@protoc_insertion_point(field_get:message.SceneEditPartyModeProtoData.end_condition)
  return _internal_end_condition();
}
inline void SceneEditPartyModeProtoData::unsafe_arena_set_allocated_end_condition(
    ::message::SceneEditEndConditionProtoData* end_condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_condition_);
  }
  _impl_.end_condition_ = end_condition;
  if (end_condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.SceneEditPartyModeProtoData.end_condition)
}
inline ::message::SceneEditEndConditionProtoData* SceneEditPartyModeProtoData::release_end_condition() {
  
  ::message::SceneEditEndConditionProtoData* temp = _impl_.end_condition_;
  _impl_.end_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditEndConditionProtoData* SceneEditPartyModeProtoData::unsafe_arena_release_end_condition() {
  // @@protoc_insertion_point(field_release:message.SceneEditPartyModeProtoData.end_condition)
  
  ::message::SceneEditEndConditionProtoData* temp = _impl_.end_condition_;
  _impl_.end_condition_ = nullptr;
  return temp;
}
inline ::message::SceneEditEndConditionProtoData* SceneEditPartyModeProtoData::_internal_mutable_end_condition() {
  
  if (_impl_.end_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditEndConditionProtoData>(GetArenaForAllocation());
    _impl_.end_condition_ = p;
  }
  return _impl_.end_condition_;
}
inline ::message::SceneEditEndConditionProtoData* SceneEditPartyModeProtoData::mutable_end_condition() {
  ::message::SceneEditEndConditionProtoData* _msg = _internal_mutable_end_condition();
  // @@protoc_insertion_point(field_mutable:message.SceneEditPartyModeProtoData.end_condition)
  return _msg;
}
inline void SceneEditPartyModeProtoData::set_allocated_end_condition(::message::SceneEditEndConditionProtoData* end_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_condition_;
  }
  if (end_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_condition);
    if (message_arena != submessage_arena) {
      end_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_condition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_condition_ = end_condition;
  // @@protoc_insertion_point(field_set_allocated:message.SceneEditPartyModeProtoData.end_condition)
}

// -------------------------------------------------------------------

// SceneEditCustomModeProtoData

// repeated .message.ModeVariable variables = 1;
inline int SceneEditCustomModeProtoData::_internal_variables_size() const {
  return _impl_.variables_.size();
}
inline int SceneEditCustomModeProtoData::variables_size() const {
  return _internal_variables_size();
}
inline void SceneEditCustomModeProtoData::clear_variables() {
  _impl_.variables_.Clear();
}
inline ::message::ModeVariable* SceneEditCustomModeProtoData::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:message.SceneEditCustomModeProtoData.variables)
  return _impl_.variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ModeVariable >*
SceneEditCustomModeProtoData::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:message.SceneEditCustomModeProtoData.variables)
  return &_impl_.variables_;
}
inline const ::message::ModeVariable& SceneEditCustomModeProtoData::_internal_variables(int index) const {
  return _impl_.variables_.Get(index);
}
inline const ::message::ModeVariable& SceneEditCustomModeProtoData::variables(int index) const {
  // @@protoc_insertion_point(field_get:message.SceneEditCustomModeProtoData.variables)
  return _internal_variables(index);
}
inline ::message::ModeVariable* SceneEditCustomModeProtoData::_internal_add_variables() {
  return _impl_.variables_.Add();
}
inline ::message::ModeVariable* SceneEditCustomModeProtoData::add_variables() {
  ::message::ModeVariable* _add = _internal_add_variables();
  // @@protoc_insertion_point(field_add:message.SceneEditCustomModeProtoData.variables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ModeVariable >&
SceneEditCustomModeProtoData::variables() const {
  // @@protoc_insertion_point(field_list:message.SceneEditCustomModeProtoData.variables)
  return _impl_.variables_;
}

// -------------------------------------------------------------------

// SceneEditEndConditionProtoData

// uint32 time_up = 1;
inline void SceneEditEndConditionProtoData::clear_time_up() {
  _impl_.time_up_ = 0u;
}
inline uint32_t SceneEditEndConditionProtoData::_internal_time_up() const {
  return _impl_.time_up_;
}
inline uint32_t SceneEditEndConditionProtoData::time_up() const {
  // @@protoc_insertion_point(field_get:message.SceneEditEndConditionProtoData.time_up)
  return _internal_time_up();
}
inline void SceneEditEndConditionProtoData::_internal_set_time_up(uint32_t value) {
  
  _impl_.time_up_ = value;
}
inline void SceneEditEndConditionProtoData::set_time_up(uint32_t value) {
  _internal_set_time_up(value);
  // @@protoc_insertion_point(field_set:message.SceneEditEndConditionProtoData.time_up)
}

// uint32 score = 2;
inline void SceneEditEndConditionProtoData::clear_score() {
  _impl_.score_ = 0u;
}
inline uint32_t SceneEditEndConditionProtoData::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t SceneEditEndConditionProtoData::score() const {
  // @@protoc_insertion_point(field_get:message.SceneEditEndConditionProtoData.score)
  return _internal_score();
}
inline void SceneEditEndConditionProtoData::_internal_set_score(uint32_t value) {
  
  _impl_.score_ = value;
}
inline void SceneEditEndConditionProtoData::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:message.SceneEditEndConditionProtoData.score)
}

// uint32 cs_rounds = 3;
inline void SceneEditEndConditionProtoData::clear_cs_rounds() {
  _impl_.cs_rounds_ = 0u;
}
inline uint32_t SceneEditEndConditionProtoData::_internal_cs_rounds() const {
  return _impl_.cs_rounds_;
}
inline uint32_t SceneEditEndConditionProtoData::cs_rounds() const {
  // @@protoc_insertion_point(field_get:message.SceneEditEndConditionProtoData.cs_rounds)
  return _internal_cs_rounds();
}
inline void SceneEditEndConditionProtoData::_internal_set_cs_rounds(uint32_t value) {
  
  _impl_.cs_rounds_ = value;
}
inline void SceneEditEndConditionProtoData::set_cs_rounds(uint32_t value) {
  _internal_set_cs_rounds(value);
  // @@protoc_insertion_point(field_set:message.SceneEditEndConditionProtoData.cs_rounds)
}

// -------------------------------------------------------------------

// UGCMoveObjectExportExtraInfo

// .message.ProtoBuffVector3 MoveRootLocPos = 1;
inline bool UGCMoveObjectExportExtraInfo::_internal_has_moverootlocpos() const {
  return this != internal_default_instance() && _impl_.moverootlocpos_ != nullptr;
}
inline bool UGCMoveObjectExportExtraInfo::has_moverootlocpos() const {
  return _internal_has_moverootlocpos();
}
inline const ::message::ProtoBuffVector3& UGCMoveObjectExportExtraInfo::_internal_moverootlocpos() const {
  const ::message::ProtoBuffVector3* p = _impl_.moverootlocpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCMoveObjectExportExtraInfo::moverootlocpos() const {
  // @@protoc_insertion_point(field_get:message.UGCMoveObjectExportExtraInfo.MoveRootLocPos)
  return _internal_moverootlocpos();
}
inline void UGCMoveObjectExportExtraInfo::unsafe_arena_set_allocated_moverootlocpos(
    ::message::ProtoBuffVector3* moverootlocpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moverootlocpos_);
  }
  _impl_.moverootlocpos_ = moverootlocpos;
  if (moverootlocpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCMoveObjectExportExtraInfo.MoveRootLocPos)
}
inline ::message::ProtoBuffVector3* UGCMoveObjectExportExtraInfo::release_moverootlocpos() {
  
  ::message::ProtoBuffVector3* temp = _impl_.moverootlocpos_;
  _impl_.moverootlocpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCMoveObjectExportExtraInfo::unsafe_arena_release_moverootlocpos() {
  // @@protoc_insertion_point(field_release:message.UGCMoveObjectExportExtraInfo.MoveRootLocPos)
  
  ::message::ProtoBuffVector3* temp = _impl_.moverootlocpos_;
  _impl_.moverootlocpos_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCMoveObjectExportExtraInfo::_internal_mutable_moverootlocpos() {
  
  if (_impl_.moverootlocpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.moverootlocpos_ = p;
  }
  return _impl_.moverootlocpos_;
}
inline ::message::ProtoBuffVector3* UGCMoveObjectExportExtraInfo::mutable_moverootlocpos() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_moverootlocpos();
  // @@protoc_insertion_point(field_mutable:message.UGCMoveObjectExportExtraInfo.MoveRootLocPos)
  return _msg;
}
inline void UGCMoveObjectExportExtraInfo::set_allocated_moverootlocpos(::message::ProtoBuffVector3* moverootlocpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moverootlocpos_);
  }
  if (moverootlocpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(moverootlocpos));
    if (message_arena != submessage_arena) {
      moverootlocpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moverootlocpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.moverootlocpos_ = moverootlocpos;
  // @@protoc_insertion_point(field_set_allocated:message.UGCMoveObjectExportExtraInfo.MoveRootLocPos)
}

// .message.ProtoBuffQuaternion MoveRooLoctRot = 2;
inline bool UGCMoveObjectExportExtraInfo::_internal_has_moverooloctrot() const {
  return this != internal_default_instance() && _impl_.moverooloctrot_ != nullptr;
}
inline bool UGCMoveObjectExportExtraInfo::has_moverooloctrot() const {
  return _internal_has_moverooloctrot();
}
inline const ::message::ProtoBuffQuaternion& UGCMoveObjectExportExtraInfo::_internal_moverooloctrot() const {
  const ::message::ProtoBuffQuaternion* p = _impl_.moverooloctrot_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffQuaternion&>(
      ::message::_ProtoBuffQuaternion_default_instance_);
}
inline const ::message::ProtoBuffQuaternion& UGCMoveObjectExportExtraInfo::moverooloctrot() const {
  // @@protoc_insertion_point(field_get:message.UGCMoveObjectExportExtraInfo.MoveRooLoctRot)
  return _internal_moverooloctrot();
}
inline void UGCMoveObjectExportExtraInfo::unsafe_arena_set_allocated_moverooloctrot(
    ::message::ProtoBuffQuaternion* moverooloctrot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moverooloctrot_);
  }
  _impl_.moverooloctrot_ = moverooloctrot;
  if (moverooloctrot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCMoveObjectExportExtraInfo.MoveRooLoctRot)
}
inline ::message::ProtoBuffQuaternion* UGCMoveObjectExportExtraInfo::release_moverooloctrot() {
  
  ::message::ProtoBuffQuaternion* temp = _impl_.moverooloctrot_;
  _impl_.moverooloctrot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCMoveObjectExportExtraInfo::unsafe_arena_release_moverooloctrot() {
  // @@protoc_insertion_point(field_release:message.UGCMoveObjectExportExtraInfo.MoveRooLoctRot)
  
  ::message::ProtoBuffQuaternion* temp = _impl_.moverooloctrot_;
  _impl_.moverooloctrot_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCMoveObjectExportExtraInfo::_internal_mutable_moverooloctrot() {
  
  if (_impl_.moverooloctrot_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffQuaternion>(GetArenaForAllocation());
    _impl_.moverooloctrot_ = p;
  }
  return _impl_.moverooloctrot_;
}
inline ::message::ProtoBuffQuaternion* UGCMoveObjectExportExtraInfo::mutable_moverooloctrot() {
  ::message::ProtoBuffQuaternion* _msg = _internal_mutable_moverooloctrot();
  // @@protoc_insertion_point(field_mutable:message.UGCMoveObjectExportExtraInfo.MoveRooLoctRot)
  return _msg;
}
inline void UGCMoveObjectExportExtraInfo::set_allocated_moverooloctrot(::message::ProtoBuffQuaternion* moverooloctrot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.moverooloctrot_);
  }
  if (moverooloctrot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(moverooloctrot));
    if (message_arena != submessage_arena) {
      moverooloctrot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moverooloctrot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.moverooloctrot_ = moverooloctrot;
  // @@protoc_insertion_point(field_set_allocated:message.UGCMoveObjectExportExtraInfo.MoveRooLoctRot)
}

// -------------------------------------------------------------------

// UGCCheckPointExportExtraInfo

// repeated .message.ProtoBuffVector3 spawnPointPos = 1;
inline int UGCCheckPointExportExtraInfo::_internal_spawnpointpos_size() const {
  return _impl_.spawnpointpos_.size();
}
inline int UGCCheckPointExportExtraInfo::spawnpointpos_size() const {
  return _internal_spawnpointpos_size();
}
inline ::message::ProtoBuffVector3* UGCCheckPointExportExtraInfo::mutable_spawnpointpos(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCCheckPointExportExtraInfo.spawnPointPos)
  return _impl_.spawnpointpos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 >*
UGCCheckPointExportExtraInfo::mutable_spawnpointpos() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCCheckPointExportExtraInfo.spawnPointPos)
  return &_impl_.spawnpointpos_;
}
inline const ::message::ProtoBuffVector3& UGCCheckPointExportExtraInfo::_internal_spawnpointpos(int index) const {
  return _impl_.spawnpointpos_.Get(index);
}
inline const ::message::ProtoBuffVector3& UGCCheckPointExportExtraInfo::spawnpointpos(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCCheckPointExportExtraInfo.spawnPointPos)
  return _internal_spawnpointpos(index);
}
inline ::message::ProtoBuffVector3* UGCCheckPointExportExtraInfo::_internal_add_spawnpointpos() {
  return _impl_.spawnpointpos_.Add();
}
inline ::message::ProtoBuffVector3* UGCCheckPointExportExtraInfo::add_spawnpointpos() {
  ::message::ProtoBuffVector3* _add = _internal_add_spawnpointpos();
  // @@protoc_insertion_point(field_add:message.UGCCheckPointExportExtraInfo.spawnPointPos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ProtoBuffVector3 >&
UGCCheckPointExportExtraInfo::spawnpointpos() const {
  // @@protoc_insertion_point(field_list:message.UGCCheckPointExportExtraInfo.spawnPointPos)
  return _impl_.spawnpointpos_;
}

// -------------------------------------------------------------------

// UGCBigToyBallExportExtraInfo

// float MoveRange = 1;
inline void UGCBigToyBallExportExtraInfo::clear_moverange() {
  _impl_.moverange_ = 0;
}
inline float UGCBigToyBallExportExtraInfo::_internal_moverange() const {
  return _impl_.moverange_;
}
inline float UGCBigToyBallExportExtraInfo::moverange() const {
  // @@protoc_insertion_point(field_get:message.UGCBigToyBallExportExtraInfo.MoveRange)
  return _internal_moverange();
}
inline void UGCBigToyBallExportExtraInfo::_internal_set_moverange(float value) {
  
  _impl_.moverange_ = value;
}
inline void UGCBigToyBallExportExtraInfo::set_moverange(float value) {
  _internal_set_moverange(value);
  // @@protoc_insertion_point(field_set:message.UGCBigToyBallExportExtraInfo.MoveRange)
}

// float TriggerRadius = 2;
inline void UGCBigToyBallExportExtraInfo::clear_triggerradius() {
  _impl_.triggerradius_ = 0;
}
inline float UGCBigToyBallExportExtraInfo::_internal_triggerradius() const {
  return _impl_.triggerradius_;
}
inline float UGCBigToyBallExportExtraInfo::triggerradius() const {
  // @@protoc_insertion_point(field_get:message.UGCBigToyBallExportExtraInfo.TriggerRadius)
  return _internal_triggerradius();
}
inline void UGCBigToyBallExportExtraInfo::_internal_set_triggerradius(float value) {
  
  _impl_.triggerradius_ = value;
}
inline void UGCBigToyBallExportExtraInfo::set_triggerradius(float value) {
  _internal_set_triggerradius(value);
  // @@protoc_insertion_point(field_set:message.UGCBigToyBallExportExtraInfo.TriggerRadius)
}

// -------------------------------------------------------------------

// UGCMiniSentryExportInfo

// float AngleSpeed = 1;
inline void UGCMiniSentryExportInfo::clear_anglespeed() {
  _impl_.anglespeed_ = 0;
}
inline float UGCMiniSentryExportInfo::_internal_anglespeed() const {
  return _impl_.anglespeed_;
}
inline float UGCMiniSentryExportInfo::anglespeed() const {
  // @@protoc_insertion_point(field_get:message.UGCMiniSentryExportInfo.AngleSpeed)
  return _internal_anglespeed();
}
inline void UGCMiniSentryExportInfo::_internal_set_anglespeed(float value) {
  
  _impl_.anglespeed_ = value;
}
inline void UGCMiniSentryExportInfo::set_anglespeed(float value) {
  _internal_set_anglespeed(value);
  // @@protoc_insertion_point(field_set:message.UGCMiniSentryExportInfo.AngleSpeed)
}

// float AngleUp = 2;
inline void UGCMiniSentryExportInfo::clear_angleup() {
  _impl_.angleup_ = 0;
}
inline float UGCMiniSentryExportInfo::_internal_angleup() const {
  return _impl_.angleup_;
}
inline float UGCMiniSentryExportInfo::angleup() const {
  // @@protoc_insertion_point(field_get:message.UGCMiniSentryExportInfo.AngleUp)
  return _internal_angleup();
}
inline void UGCMiniSentryExportInfo::_internal_set_angleup(float value) {
  
  _impl_.angleup_ = value;
}
inline void UGCMiniSentryExportInfo::set_angleup(float value) {
  _internal_set_angleup(value);
  // @@protoc_insertion_point(field_set:message.UGCMiniSentryExportInfo.AngleUp)
}

// float AngleDown = 3;
inline void UGCMiniSentryExportInfo::clear_angledown() {
  _impl_.angledown_ = 0;
}
inline float UGCMiniSentryExportInfo::_internal_angledown() const {
  return _impl_.angledown_;
}
inline float UGCMiniSentryExportInfo::angledown() const {
  // @@protoc_insertion_point(field_get:message.UGCMiniSentryExportInfo.AngleDown)
  return _internal_angledown();
}
inline void UGCMiniSentryExportInfo::_internal_set_angledown(float value) {
  
  _impl_.angledown_ = value;
}
inline void UGCMiniSentryExportInfo::set_angledown(float value) {
  _internal_set_angledown(value);
  // @@protoc_insertion_point(field_set:message.UGCMiniSentryExportInfo.AngleDown)
}

// .message.ProtoBuffVector3 FirePos = 4;
inline bool UGCMiniSentryExportInfo::_internal_has_firepos() const {
  return this != internal_default_instance() && _impl_.firepos_ != nullptr;
}
inline bool UGCMiniSentryExportInfo::has_firepos() const {
  return _internal_has_firepos();
}
inline const ::message::ProtoBuffVector3& UGCMiniSentryExportInfo::_internal_firepos() const {
  const ::message::ProtoBuffVector3* p = _impl_.firepos_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCMiniSentryExportInfo::firepos() const {
  // @@protoc_insertion_point(field_get:message.UGCMiniSentryExportInfo.FirePos)
  return _internal_firepos();
}
inline void UGCMiniSentryExportInfo::unsafe_arena_set_allocated_firepos(
    ::message::ProtoBuffVector3* firepos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.firepos_);
  }
  _impl_.firepos_ = firepos;
  if (firepos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCMiniSentryExportInfo.FirePos)
}
inline ::message::ProtoBuffVector3* UGCMiniSentryExportInfo::release_firepos() {
  
  ::message::ProtoBuffVector3* temp = _impl_.firepos_;
  _impl_.firepos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCMiniSentryExportInfo::unsafe_arena_release_firepos() {
  // @@protoc_insertion_point(field_release:message.UGCMiniSentryExportInfo.FirePos)
  
  ::message::ProtoBuffVector3* temp = _impl_.firepos_;
  _impl_.firepos_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCMiniSentryExportInfo::_internal_mutable_firepos() {
  
  if (_impl_.firepos_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.firepos_ = p;
  }
  return _impl_.firepos_;
}
inline ::message::ProtoBuffVector3* UGCMiniSentryExportInfo::mutable_firepos() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_firepos();
  // @@protoc_insertion_point(field_mutable:message.UGCMiniSentryExportInfo.FirePos)
  return _msg;
}
inline void UGCMiniSentryExportInfo::set_allocated_firepos(::message::ProtoBuffVector3* firepos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.firepos_);
  }
  if (firepos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(firepos));
    if (message_arena != submessage_arena) {
      firepos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firepos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.firepos_ = firepos;
  // @@protoc_insertion_point(field_set_allocated:message.UGCMiniSentryExportInfo.FirePos)
}

// float FireAngle = 5;
inline void UGCMiniSentryExportInfo::clear_fireangle() {
  _impl_.fireangle_ = 0;
}
inline float UGCMiniSentryExportInfo::_internal_fireangle() const {
  return _impl_.fireangle_;
}
inline float UGCMiniSentryExportInfo::fireangle() const {
  // @@protoc_insertion_point(field_get:message.UGCMiniSentryExportInfo.FireAngle)
  return _internal_fireangle();
}
inline void UGCMiniSentryExportInfo::_internal_set_fireangle(float value) {
  
  _impl_.fireangle_ = value;
}
inline void UGCMiniSentryExportInfo::set_fireangle(float value) {
  _internal_set_fireangle(value);
  // @@protoc_insertion_point(field_set:message.UGCMiniSentryExportInfo.FireAngle)
}

// -------------------------------------------------------------------

// ModeVariable

// int32 id = 1;
inline void ModeVariable::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ModeVariable::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ModeVariable::id() const {
  // @@protoc_insertion_point(field_get:message.ModeVariable.id)
  return _internal_id();
}
inline void ModeVariable::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ModeVariable::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:message.ModeVariable.id)
}

// bool boolValue = 2;
inline void ModeVariable::clear_boolvalue() {
  _impl_.boolvalue_ = false;
}
inline bool ModeVariable::_internal_boolvalue() const {
  return _impl_.boolvalue_;
}
inline bool ModeVariable::boolvalue() const {
  // @@protoc_insertion_point(field_get:message.ModeVariable.boolValue)
  return _internal_boolvalue();
}
inline void ModeVariable::_internal_set_boolvalue(bool value) {
  
  _impl_.boolvalue_ = value;
}
inline void ModeVariable::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:message.ModeVariable.boolValue)
}

// int32 intValue = 3;
inline void ModeVariable::clear_intvalue() {
  _impl_.intvalue_ = 0;
}
inline int32_t ModeVariable::_internal_intvalue() const {
  return _impl_.intvalue_;
}
inline int32_t ModeVariable::intvalue() const {
  // @@protoc_insertion_point(field_get:message.ModeVariable.intValue)
  return _internal_intvalue();
}
inline void ModeVariable::_internal_set_intvalue(int32_t value) {
  
  _impl_.intvalue_ = value;
}
inline void ModeVariable::set_intvalue(int32_t value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:message.ModeVariable.intValue)
}

// float floatValue = 4;
inline void ModeVariable::clear_floatvalue() {
  _impl_.floatvalue_ = 0;
}
inline float ModeVariable::_internal_floatvalue() const {
  return _impl_.floatvalue_;
}
inline float ModeVariable::floatvalue() const {
  // @@protoc_insertion_point(field_get:message.ModeVariable.floatValue)
  return _internal_floatvalue();
}
inline void ModeVariable::_internal_set_floatvalue(float value) {
  
  _impl_.floatvalue_ = value;
}
inline void ModeVariable::set_floatvalue(float value) {
  _internal_set_floatvalue(value);
  // @@protoc_insertion_point(field_set:message.ModeVariable.floatValue)
}

// repeated float floatArrValue = 5;
inline int ModeVariable::_internal_floatarrvalue_size() const {
  return _impl_.floatarrvalue_.size();
}
inline int ModeVariable::floatarrvalue_size() const {
  return _internal_floatarrvalue_size();
}
inline void ModeVariable::clear_floatarrvalue() {
  _impl_.floatarrvalue_.Clear();
}
inline float ModeVariable::_internal_floatarrvalue(int index) const {
  return _impl_.floatarrvalue_.Get(index);
}
inline float ModeVariable::floatarrvalue(int index) const {
  // @@protoc_insertion_point(field_get:message.ModeVariable.floatArrValue)
  return _internal_floatarrvalue(index);
}
inline void ModeVariable::set_floatarrvalue(int index, float value) {
  _impl_.floatarrvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.ModeVariable.floatArrValue)
}
inline void ModeVariable::_internal_add_floatarrvalue(float value) {
  _impl_.floatarrvalue_.Add(value);
}
inline void ModeVariable::add_floatarrvalue(float value) {
  _internal_add_floatarrvalue(value);
  // @@protoc_insertion_point(field_add:message.ModeVariable.floatArrValue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModeVariable::_internal_floatarrvalue() const {
  return _impl_.floatarrvalue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ModeVariable::floatarrvalue() const {
  // @@protoc_insertion_point(field_list:message.ModeVariable.floatArrValue)
  return _internal_floatarrvalue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModeVariable::_internal_mutable_floatarrvalue() {
  return &_impl_.floatarrvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ModeVariable::mutable_floatarrvalue() {
  // @@protoc_insertion_point(field_mutable_list:message.ModeVariable.floatArrValue)
  return _internal_mutable_floatarrvalue();
}

// -------------------------------------------------------------------

// UGCBlockEditProjectData

// bytes Data = 1;
inline void UGCBlockEditProjectData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& UGCBlockEditProjectData::data() const {
  // @@protoc_insertion_point(field_get:message.UGCBlockEditProjectData.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCBlockEditProjectData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCBlockEditProjectData.Data)
}
inline std::string* UGCBlockEditProjectData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:message.UGCBlockEditProjectData.Data)
  return _s;
}
inline const std::string& UGCBlockEditProjectData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void UGCBlockEditProjectData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCBlockEditProjectData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCBlockEditProjectData::release_data() {
  // @@protoc_insertion_point(field_release:message.UGCBlockEditProjectData.Data)
  return _impl_.data_.Release();
}
inline void UGCBlockEditProjectData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCBlockEditProjectData.Data)
}

// int32 SaveType = 2;
inline void UGCBlockEditProjectData::clear_savetype() {
  _impl_.savetype_ = 0;
}
inline int32_t UGCBlockEditProjectData::_internal_savetype() const {
  return _impl_.savetype_;
}
inline int32_t UGCBlockEditProjectData::savetype() const {
  // @@protoc_insertion_point(field_get:message.UGCBlockEditProjectData.SaveType)
  return _internal_savetype();
}
inline void UGCBlockEditProjectData::_internal_set_savetype(int32_t value) {
  
  _impl_.savetype_ = value;
}
inline void UGCBlockEditProjectData::set_savetype(int32_t value) {
  _internal_set_savetype(value);
  // @@protoc_insertion_point(field_set:message.UGCBlockEditProjectData.SaveType)
}

// -------------------------------------------------------------------

// UGCHudTransformData

// .message.ProtoBuffVector3 LocalPosition = 1;
inline bool UGCHudTransformData::_internal_has_localposition() const {
  return this != internal_default_instance() && _impl_.localposition_ != nullptr;
}
inline bool UGCHudTransformData::has_localposition() const {
  return _internal_has_localposition();
}
inline const ::message::ProtoBuffVector3& UGCHudTransformData::_internal_localposition() const {
  const ::message::ProtoBuffVector3* p = _impl_.localposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCHudTransformData::localposition() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTransformData.LocalPosition)
  return _internal_localposition();
}
inline void UGCHudTransformData::unsafe_arena_set_allocated_localposition(
    ::message::ProtoBuffVector3* localposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localposition_);
  }
  _impl_.localposition_ = localposition;
  if (localposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudTransformData.LocalPosition)
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::release_localposition() {
  
  ::message::ProtoBuffVector3* temp = _impl_.localposition_;
  _impl_.localposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::unsafe_arena_release_localposition() {
  // @@protoc_insertion_point(field_release:message.UGCHudTransformData.LocalPosition)
  
  ::message::ProtoBuffVector3* temp = _impl_.localposition_;
  _impl_.localposition_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::_internal_mutable_localposition() {
  
  if (_impl_.localposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.localposition_ = p;
  }
  return _impl_.localposition_;
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::mutable_localposition() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_localposition();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTransformData.LocalPosition)
  return _msg;
}
inline void UGCHudTransformData::set_allocated_localposition(::message::ProtoBuffVector3* localposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localposition_);
  }
  if (localposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localposition));
    if (message_arena != submessage_arena) {
      localposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localposition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localposition_ = localposition;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTransformData.LocalPosition)
}

// .message.ProtoBuffVector3 LocalEulerAngles = 2;
inline bool UGCHudTransformData::_internal_has_localeulerangles() const {
  return this != internal_default_instance() && _impl_.localeulerangles_ != nullptr;
}
inline bool UGCHudTransformData::has_localeulerangles() const {
  return _internal_has_localeulerangles();
}
inline const ::message::ProtoBuffVector3& UGCHudTransformData::_internal_localeulerangles() const {
  const ::message::ProtoBuffVector3* p = _impl_.localeulerangles_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCHudTransformData::localeulerangles() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTransformData.LocalEulerAngles)
  return _internal_localeulerangles();
}
inline void UGCHudTransformData::unsafe_arena_set_allocated_localeulerangles(
    ::message::ProtoBuffVector3* localeulerangles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localeulerangles_);
  }
  _impl_.localeulerangles_ = localeulerangles;
  if (localeulerangles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudTransformData.LocalEulerAngles)
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::release_localeulerangles() {
  
  ::message::ProtoBuffVector3* temp = _impl_.localeulerangles_;
  _impl_.localeulerangles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::unsafe_arena_release_localeulerangles() {
  // @@protoc_insertion_point(field_release:message.UGCHudTransformData.LocalEulerAngles)
  
  ::message::ProtoBuffVector3* temp = _impl_.localeulerangles_;
  _impl_.localeulerangles_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::_internal_mutable_localeulerangles() {
  
  if (_impl_.localeulerangles_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.localeulerangles_ = p;
  }
  return _impl_.localeulerangles_;
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::mutable_localeulerangles() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_localeulerangles();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTransformData.LocalEulerAngles)
  return _msg;
}
inline void UGCHudTransformData::set_allocated_localeulerangles(::message::ProtoBuffVector3* localeulerangles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localeulerangles_);
  }
  if (localeulerangles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localeulerangles));
    if (message_arena != submessage_arena) {
      localeulerangles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localeulerangles, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localeulerangles_ = localeulerangles;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTransformData.LocalEulerAngles)
}

// .message.ProtoBuffVector3 LocalScale = 3;
inline bool UGCHudTransformData::_internal_has_localscale() const {
  return this != internal_default_instance() && _impl_.localscale_ != nullptr;
}
inline bool UGCHudTransformData::has_localscale() const {
  return _internal_has_localscale();
}
inline const ::message::ProtoBuffVector3& UGCHudTransformData::_internal_localscale() const {
  const ::message::ProtoBuffVector3* p = _impl_.localscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCHudTransformData::localscale() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTransformData.LocalScale)
  return _internal_localscale();
}
inline void UGCHudTransformData::unsafe_arena_set_allocated_localscale(
    ::message::ProtoBuffVector3* localscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localscale_);
  }
  _impl_.localscale_ = localscale;
  if (localscale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudTransformData.LocalScale)
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::release_localscale() {
  
  ::message::ProtoBuffVector3* temp = _impl_.localscale_;
  _impl_.localscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::unsafe_arena_release_localscale() {
  // @@protoc_insertion_point(field_release:message.UGCHudTransformData.LocalScale)
  
  ::message::ProtoBuffVector3* temp = _impl_.localscale_;
  _impl_.localscale_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::_internal_mutable_localscale() {
  
  if (_impl_.localscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.localscale_ = p;
  }
  return _impl_.localscale_;
}
inline ::message::ProtoBuffVector3* UGCHudTransformData::mutable_localscale() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_localscale();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTransformData.LocalScale)
  return _msg;
}
inline void UGCHudTransformData::set_allocated_localscale(::message::ProtoBuffVector3* localscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localscale_);
  }
  if (localscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localscale));
    if (message_arena != submessage_arena) {
      localscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localscale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localscale_ = localscale;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTransformData.LocalScale)
}

// -------------------------------------------------------------------

// UGCHudRectTransformData

// .message.UGCHudTransformData Transform = 1;
inline bool UGCHudRectTransformData::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool UGCHudRectTransformData::has_transform() const {
  return _internal_has_transform();
}
inline void UGCHudRectTransformData::clear_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
}
inline const ::message::UGCHudTransformData& UGCHudRectTransformData::_internal_transform() const {
  const ::message::UGCHudTransformData* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudTransformData&>(
      ::message::_UGCHudTransformData_default_instance_);
}
inline const ::message::UGCHudTransformData& UGCHudRectTransformData::transform() const {
  // @@protoc_insertion_point(field_get:message.UGCHudRectTransformData.Transform)
  return _internal_transform();
}
inline void UGCHudRectTransformData::unsafe_arena_set_allocated_transform(
    ::message::UGCHudTransformData* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudRectTransformData.Transform)
}
inline ::message::UGCHudTransformData* UGCHudRectTransformData::release_transform() {
  
  ::message::UGCHudTransformData* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudTransformData* UGCHudRectTransformData::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:message.UGCHudRectTransformData.Transform)
  
  ::message::UGCHudTransformData* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::message::UGCHudTransformData* UGCHudRectTransformData::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudTransformData>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::message::UGCHudTransformData* UGCHudRectTransformData::mutable_transform() {
  ::message::UGCHudTransformData* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:message.UGCHudRectTransformData.Transform)
  return _msg;
}
inline void UGCHudRectTransformData::set_allocated_transform(::message::UGCHudTransformData* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudRectTransformData.Transform)
}

// .message.ProtoBuffVector3 AnchorPosition = 2;
inline bool UGCHudRectTransformData::_internal_has_anchorposition() const {
  return this != internal_default_instance() && _impl_.anchorposition_ != nullptr;
}
inline bool UGCHudRectTransformData::has_anchorposition() const {
  return _internal_has_anchorposition();
}
inline const ::message::ProtoBuffVector3& UGCHudRectTransformData::_internal_anchorposition() const {
  const ::message::ProtoBuffVector3* p = _impl_.anchorposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCHudRectTransformData::anchorposition() const {
  // @@protoc_insertion_point(field_get:message.UGCHudRectTransformData.AnchorPosition)
  return _internal_anchorposition();
}
inline void UGCHudRectTransformData::unsafe_arena_set_allocated_anchorposition(
    ::message::ProtoBuffVector3* anchorposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchorposition_);
  }
  _impl_.anchorposition_ = anchorposition;
  if (anchorposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudRectTransformData.AnchorPosition)
}
inline ::message::ProtoBuffVector3* UGCHudRectTransformData::release_anchorposition() {
  
  ::message::ProtoBuffVector3* temp = _impl_.anchorposition_;
  _impl_.anchorposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudRectTransformData::unsafe_arena_release_anchorposition() {
  // @@protoc_insertion_point(field_release:message.UGCHudRectTransformData.AnchorPosition)
  
  ::message::ProtoBuffVector3* temp = _impl_.anchorposition_;
  _impl_.anchorposition_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudRectTransformData::_internal_mutable_anchorposition() {
  
  if (_impl_.anchorposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.anchorposition_ = p;
  }
  return _impl_.anchorposition_;
}
inline ::message::ProtoBuffVector3* UGCHudRectTransformData::mutable_anchorposition() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_anchorposition();
  // @@protoc_insertion_point(field_mutable:message.UGCHudRectTransformData.AnchorPosition)
  return _msg;
}
inline void UGCHudRectTransformData::set_allocated_anchorposition(::message::ProtoBuffVector3* anchorposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchorposition_);
  }
  if (anchorposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchorposition));
    if (message_arena != submessage_arena) {
      anchorposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchorposition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.anchorposition_ = anchorposition;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudRectTransformData.AnchorPosition)
}

// -------------------------------------------------------------------

// UGCHudWidgetData

// int32 Width = 1;
inline void UGCHudWidgetData::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t UGCHudWidgetData::_internal_width() const {
  return _impl_.width_;
}
inline int32_t UGCHudWidgetData::width() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.Width)
  return _internal_width();
}
inline void UGCHudWidgetData::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void UGCHudWidgetData::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:message.UGCHudWidgetData.Width)
}

// int32 Height = 2;
inline void UGCHudWidgetData::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t UGCHudWidgetData::_internal_height() const {
  return _impl_.height_;
}
inline int32_t UGCHudWidgetData::height() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.Height)
  return _internal_height();
}
inline void UGCHudWidgetData::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void UGCHudWidgetData::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:message.UGCHudWidgetData.Height)
}

// int32 Depth = 3;
inline void UGCHudWidgetData::clear_depth() {
  _impl_.depth_ = 0;
}
inline int32_t UGCHudWidgetData::_internal_depth() const {
  return _impl_.depth_;
}
inline int32_t UGCHudWidgetData::depth() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.Depth)
  return _internal_depth();
}
inline void UGCHudWidgetData::_internal_set_depth(int32_t value) {
  
  _impl_.depth_ = value;
}
inline void UGCHudWidgetData::set_depth(int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:message.UGCHudWidgetData.Depth)
}

// int32 HorizontalAlignment = 4;
inline void UGCHudWidgetData::clear_horizontalalignment() {
  _impl_.horizontalalignment_ = 0;
}
inline int32_t UGCHudWidgetData::_internal_horizontalalignment() const {
  return _impl_.horizontalalignment_;
}
inline int32_t UGCHudWidgetData::horizontalalignment() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.HorizontalAlignment)
  return _internal_horizontalalignment();
}
inline void UGCHudWidgetData::_internal_set_horizontalalignment(int32_t value) {
  
  _impl_.horizontalalignment_ = value;
}
inline void UGCHudWidgetData::set_horizontalalignment(int32_t value) {
  _internal_set_horizontalalignment(value);
  // @@protoc_insertion_point(field_set:message.UGCHudWidgetData.HorizontalAlignment)
}

// int32 VerticalAlignment = 5;
inline void UGCHudWidgetData::clear_verticalalignment() {
  _impl_.verticalalignment_ = 0;
}
inline int32_t UGCHudWidgetData::_internal_verticalalignment() const {
  return _impl_.verticalalignment_;
}
inline int32_t UGCHudWidgetData::verticalalignment() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.VerticalAlignment)
  return _internal_verticalalignment();
}
inline void UGCHudWidgetData::_internal_set_verticalalignment(int32_t value) {
  
  _impl_.verticalalignment_ = value;
}
inline void UGCHudWidgetData::set_verticalalignment(int32_t value) {
  _internal_set_verticalalignment(value);
  // @@protoc_insertion_point(field_set:message.UGCHudWidgetData.VerticalAlignment)
}

// int32 Color = 6;
inline void UGCHudWidgetData::clear_color() {
  _impl_.color_ = 0;
}
inline int32_t UGCHudWidgetData::_internal_color() const {
  return _impl_.color_;
}
inline int32_t UGCHudWidgetData::color() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.Color)
  return _internal_color();
}
inline void UGCHudWidgetData::_internal_set_color(int32_t value) {
  
  _impl_.color_ = value;
}
inline void UGCHudWidgetData::set_color(int32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:message.UGCHudWidgetData.Color)
}

// .message.ProtoBuffVector2 AnchorMin = 7;
inline bool UGCHudWidgetData::_internal_has_anchormin() const {
  return this != internal_default_instance() && _impl_.anchormin_ != nullptr;
}
inline bool UGCHudWidgetData::has_anchormin() const {
  return _internal_has_anchormin();
}
inline const ::message::ProtoBuffVector2& UGCHudWidgetData::_internal_anchormin() const {
  const ::message::ProtoBuffVector2* p = _impl_.anchormin_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudWidgetData::anchormin() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.AnchorMin)
  return _internal_anchormin();
}
inline void UGCHudWidgetData::unsafe_arena_set_allocated_anchormin(
    ::message::ProtoBuffVector2* anchormin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchormin_);
  }
  _impl_.anchormin_ = anchormin;
  if (anchormin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudWidgetData.AnchorMin)
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::release_anchormin() {
  
  ::message::ProtoBuffVector2* temp = _impl_.anchormin_;
  _impl_.anchormin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::unsafe_arena_release_anchormin() {
  // @@protoc_insertion_point(field_release:message.UGCHudWidgetData.AnchorMin)
  
  ::message::ProtoBuffVector2* temp = _impl_.anchormin_;
  _impl_.anchormin_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::_internal_mutable_anchormin() {
  
  if (_impl_.anchormin_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.anchormin_ = p;
  }
  return _impl_.anchormin_;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::mutable_anchormin() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_anchormin();
  // @@protoc_insertion_point(field_mutable:message.UGCHudWidgetData.AnchorMin)
  return _msg;
}
inline void UGCHudWidgetData::set_allocated_anchormin(::message::ProtoBuffVector2* anchormin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchormin_);
  }
  if (anchormin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchormin));
    if (message_arena != submessage_arena) {
      anchormin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchormin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.anchormin_ = anchormin;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudWidgetData.AnchorMin)
}

// .message.ProtoBuffVector2 AnchorMax = 8;
inline bool UGCHudWidgetData::_internal_has_anchormax() const {
  return this != internal_default_instance() && _impl_.anchormax_ != nullptr;
}
inline bool UGCHudWidgetData::has_anchormax() const {
  return _internal_has_anchormax();
}
inline const ::message::ProtoBuffVector2& UGCHudWidgetData::_internal_anchormax() const {
  const ::message::ProtoBuffVector2* p = _impl_.anchormax_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudWidgetData::anchormax() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.AnchorMax)
  return _internal_anchormax();
}
inline void UGCHudWidgetData::unsafe_arena_set_allocated_anchormax(
    ::message::ProtoBuffVector2* anchormax) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchormax_);
  }
  _impl_.anchormax_ = anchormax;
  if (anchormax) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudWidgetData.AnchorMax)
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::release_anchormax() {
  
  ::message::ProtoBuffVector2* temp = _impl_.anchormax_;
  _impl_.anchormax_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::unsafe_arena_release_anchormax() {
  // @@protoc_insertion_point(field_release:message.UGCHudWidgetData.AnchorMax)
  
  ::message::ProtoBuffVector2* temp = _impl_.anchormax_;
  _impl_.anchormax_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::_internal_mutable_anchormax() {
  
  if (_impl_.anchormax_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.anchormax_ = p;
  }
  return _impl_.anchormax_;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::mutable_anchormax() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_anchormax();
  // @@protoc_insertion_point(field_mutable:message.UGCHudWidgetData.AnchorMax)
  return _msg;
}
inline void UGCHudWidgetData::set_allocated_anchormax(::message::ProtoBuffVector2* anchormax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchormax_);
  }
  if (anchormax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchormax));
    if (message_arena != submessage_arena) {
      anchormax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchormax, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.anchormax_ = anchormax;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudWidgetData.AnchorMax)
}

// .message.ProtoBuffVector2 SizeDelta = 9;
inline bool UGCHudWidgetData::_internal_has_sizedelta() const {
  return this != internal_default_instance() && _impl_.sizedelta_ != nullptr;
}
inline bool UGCHudWidgetData::has_sizedelta() const {
  return _internal_has_sizedelta();
}
inline const ::message::ProtoBuffVector2& UGCHudWidgetData::_internal_sizedelta() const {
  const ::message::ProtoBuffVector2* p = _impl_.sizedelta_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudWidgetData::sizedelta() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.SizeDelta)
  return _internal_sizedelta();
}
inline void UGCHudWidgetData::unsafe_arena_set_allocated_sizedelta(
    ::message::ProtoBuffVector2* sizedelta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizedelta_);
  }
  _impl_.sizedelta_ = sizedelta;
  if (sizedelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudWidgetData.SizeDelta)
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::release_sizedelta() {
  
  ::message::ProtoBuffVector2* temp = _impl_.sizedelta_;
  _impl_.sizedelta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::unsafe_arena_release_sizedelta() {
  // @@protoc_insertion_point(field_release:message.UGCHudWidgetData.SizeDelta)
  
  ::message::ProtoBuffVector2* temp = _impl_.sizedelta_;
  _impl_.sizedelta_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::_internal_mutable_sizedelta() {
  
  if (_impl_.sizedelta_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.sizedelta_ = p;
  }
  return _impl_.sizedelta_;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::mutable_sizedelta() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_sizedelta();
  // @@protoc_insertion_point(field_mutable:message.UGCHudWidgetData.SizeDelta)
  return _msg;
}
inline void UGCHudWidgetData::set_allocated_sizedelta(::message::ProtoBuffVector2* sizedelta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizedelta_);
  }
  if (sizedelta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizedelta));
    if (message_arena != submessage_arena) {
      sizedelta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizedelta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sizedelta_ = sizedelta;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudWidgetData.SizeDelta)
}

// .message.ProtoBuffVector2 Pivot = 10;
inline bool UGCHudWidgetData::_internal_has_pivot() const {
  return this != internal_default_instance() && _impl_.pivot_ != nullptr;
}
inline bool UGCHudWidgetData::has_pivot() const {
  return _internal_has_pivot();
}
inline const ::message::ProtoBuffVector2& UGCHudWidgetData::_internal_pivot() const {
  const ::message::ProtoBuffVector2* p = _impl_.pivot_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudWidgetData::pivot() const {
  // @@protoc_insertion_point(field_get:message.UGCHudWidgetData.Pivot)
  return _internal_pivot();
}
inline void UGCHudWidgetData::unsafe_arena_set_allocated_pivot(
    ::message::ProtoBuffVector2* pivot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pivot_);
  }
  _impl_.pivot_ = pivot;
  if (pivot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudWidgetData.Pivot)
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::release_pivot() {
  
  ::message::ProtoBuffVector2* temp = _impl_.pivot_;
  _impl_.pivot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::unsafe_arena_release_pivot() {
  // @@protoc_insertion_point(field_release:message.UGCHudWidgetData.Pivot)
  
  ::message::ProtoBuffVector2* temp = _impl_.pivot_;
  _impl_.pivot_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::_internal_mutable_pivot() {
  
  if (_impl_.pivot_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.pivot_ = p;
  }
  return _impl_.pivot_;
}
inline ::message::ProtoBuffVector2* UGCHudWidgetData::mutable_pivot() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_pivot();
  // @@protoc_insertion_point(field_mutable:message.UGCHudWidgetData.Pivot)
  return _msg;
}
inline void UGCHudWidgetData::set_allocated_pivot(::message::ProtoBuffVector2* pivot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pivot_);
  }
  if (pivot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pivot));
    if (message_arena != submessage_arena) {
      pivot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pivot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pivot_ = pivot;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudWidgetData.Pivot)
}

// -------------------------------------------------------------------

// UGCHudLabelData

// .message.UGCHudWidgetData Widget = 1;
inline bool UGCHudLabelData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHudLabelData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHudLabelData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHudLabelData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHudLabelData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.Widget)
  return _internal_widget();
}
inline void UGCHudLabelData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudLabelData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHudLabelData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudLabelData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHudLabelData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudLabelData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHudLabelData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLabelData.Widget)
  return _msg;
}
inline void UGCHudLabelData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLabelData.Widget)
}

// string Text = 2;
inline void UGCHudLabelData::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& UGCHudLabelData::text() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.Text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudLabelData::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.Text)
}
inline std::string* UGCHudLabelData::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLabelData.Text)
  return _s;
}
inline const std::string& UGCHudLabelData::_internal_text() const {
  return _impl_.text_.Get();
}
inline void UGCHudLabelData::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudLabelData::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudLabelData::release_text() {
  // @@protoc_insertion_point(field_release:message.UGCHudLabelData.Text)
  return _impl_.text_.Release();
}
inline void UGCHudLabelData::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLabelData.Text)
}

// int32 FontSize = 3;
inline void UGCHudLabelData::clear_fontsize() {
  _impl_.fontsize_ = 0;
}
inline int32_t UGCHudLabelData::_internal_fontsize() const {
  return _impl_.fontsize_;
}
inline int32_t UGCHudLabelData::fontsize() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.FontSize)
  return _internal_fontsize();
}
inline void UGCHudLabelData::_internal_set_fontsize(int32_t value) {
  
  _impl_.fontsize_ = value;
}
inline void UGCHudLabelData::set_fontsize(int32_t value) {
  _internal_set_fontsize(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.FontSize)
}

// int32 Alignment = 4;
inline void UGCHudLabelData::clear_alignment() {
  _impl_.alignment_ = 0;
}
inline int32_t UGCHudLabelData::_internal_alignment() const {
  return _impl_.alignment_;
}
inline int32_t UGCHudLabelData::alignment() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.Alignment)
  return _internal_alignment();
}
inline void UGCHudLabelData::_internal_set_alignment(int32_t value) {
  
  _impl_.alignment_ = value;
}
inline void UGCHudLabelData::set_alignment(int32_t value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.Alignment)
}

// int32 AlignmentVertical = 5;
inline void UGCHudLabelData::clear_alignmentvertical() {
  _impl_.alignmentvertical_ = 0;
}
inline int32_t UGCHudLabelData::_internal_alignmentvertical() const {
  return _impl_.alignmentvertical_;
}
inline int32_t UGCHudLabelData::alignmentvertical() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.AlignmentVertical)
  return _internal_alignmentvertical();
}
inline void UGCHudLabelData::_internal_set_alignmentvertical(int32_t value) {
  
  _impl_.alignmentvertical_ = value;
}
inline void UGCHudLabelData::set_alignmentvertical(int32_t value) {
  _internal_set_alignmentvertical(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.AlignmentVertical)
}

// string Font = 6;
inline void UGCHudLabelData::clear_font() {
  _impl_.font_.ClearToEmpty();
}
inline const std::string& UGCHudLabelData::font() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.Font)
  return _internal_font();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudLabelData::set_font(ArgT0&& arg0, ArgT... args) {
 
 _impl_.font_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.Font)
}
inline std::string* UGCHudLabelData::mutable_font() {
  std::string* _s = _internal_mutable_font();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLabelData.Font)
  return _s;
}
inline const std::string& UGCHudLabelData::_internal_font() const {
  return _impl_.font_.Get();
}
inline void UGCHudLabelData::_internal_set_font(const std::string& value) {
  
  _impl_.font_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudLabelData::_internal_mutable_font() {
  
  return _impl_.font_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudLabelData::release_font() {
  // @@protoc_insertion_point(field_release:message.UGCHudLabelData.Font)
  return _impl_.font_.Release();
}
inline void UGCHudLabelData::set_allocated_font(std::string* font) {
  if (font != nullptr) {
    
  } else {
    
  }
  _impl_.font_.SetAllocated(font, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.font_.IsDefault()) {
    _impl_.font_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLabelData.Font)
}

// bool IsBold = 7;
inline void UGCHudLabelData::clear_isbold() {
  _impl_.isbold_ = false;
}
inline bool UGCHudLabelData::_internal_isbold() const {
  return _impl_.isbold_;
}
inline bool UGCHudLabelData::isbold() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.IsBold)
  return _internal_isbold();
}
inline void UGCHudLabelData::_internal_set_isbold(bool value) {
  
  _impl_.isbold_ = value;
}
inline void UGCHudLabelData::set_isbold(bool value) {
  _internal_set_isbold(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.IsBold)
}

// bool IsItalic = 8;
inline void UGCHudLabelData::clear_isitalic() {
  _impl_.isitalic_ = false;
}
inline bool UGCHudLabelData::_internal_isitalic() const {
  return _impl_.isitalic_;
}
inline bool UGCHudLabelData::isitalic() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.IsItalic)
  return _internal_isitalic();
}
inline void UGCHudLabelData::_internal_set_isitalic(bool value) {
  
  _impl_.isitalic_ = value;
}
inline void UGCHudLabelData::set_isitalic(bool value) {
  _internal_set_isitalic(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.IsItalic)
}

// bool IsUnderline = 9;
inline void UGCHudLabelData::clear_isunderline() {
  _impl_.isunderline_ = false;
}
inline bool UGCHudLabelData::_internal_isunderline() const {
  return _impl_.isunderline_;
}
inline bool UGCHudLabelData::isunderline() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.IsUnderline)
  return _internal_isunderline();
}
inline void UGCHudLabelData::_internal_set_isunderline(bool value) {
  
  _impl_.isunderline_ = value;
}
inline void UGCHudLabelData::set_isunderline(bool value) {
  _internal_set_isunderline(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.IsUnderline)
}

// float LineSpacing = 10;
inline void UGCHudLabelData::clear_linespacing() {
  _impl_.linespacing_ = 0;
}
inline float UGCHudLabelData::_internal_linespacing() const {
  return _impl_.linespacing_;
}
inline float UGCHudLabelData::linespacing() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.LineSpacing)
  return _internal_linespacing();
}
inline void UGCHudLabelData::_internal_set_linespacing(float value) {
  
  _impl_.linespacing_ = value;
}
inline void UGCHudLabelData::set_linespacing(float value) {
  _internal_set_linespacing(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.LineSpacing)
}

// int32 Overflow = 11;
inline void UGCHudLabelData::clear_overflow() {
  _impl_.overflow_ = 0;
}
inline int32_t UGCHudLabelData::_internal_overflow() const {
  return _impl_.overflow_;
}
inline int32_t UGCHudLabelData::overflow() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.Overflow)
  return _internal_overflow();
}
inline void UGCHudLabelData::_internal_set_overflow(int32_t value) {
  
  _impl_.overflow_ = value;
}
inline void UGCHudLabelData::set_overflow(int32_t value) {
  _internal_set_overflow(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.Overflow)
}

// string LocKey = 12;
inline void UGCHudLabelData::clear_lockey() {
  _impl_.lockey_.ClearToEmpty();
}
inline const std::string& UGCHudLabelData::lockey() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLabelData.LocKey)
  return _internal_lockey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudLabelData::set_lockey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lockey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudLabelData.LocKey)
}
inline std::string* UGCHudLabelData::mutable_lockey() {
  std::string* _s = _internal_mutable_lockey();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLabelData.LocKey)
  return _s;
}
inline const std::string& UGCHudLabelData::_internal_lockey() const {
  return _impl_.lockey_.Get();
}
inline void UGCHudLabelData::_internal_set_lockey(const std::string& value) {
  
  _impl_.lockey_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudLabelData::_internal_mutable_lockey() {
  
  return _impl_.lockey_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudLabelData::release_lockey() {
  // @@protoc_insertion_point(field_release:message.UGCHudLabelData.LocKey)
  return _impl_.lockey_.Release();
}
inline void UGCHudLabelData::set_allocated_lockey(std::string* lockey) {
  if (lockey != nullptr) {
    
  } else {
    
  }
  _impl_.lockey_.SetAllocated(lockey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lockey_.IsDefault()) {
    _impl_.lockey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLabelData.LocKey)
}

// -------------------------------------------------------------------

// UGCHudImageData

// .message.UGCHudWidgetData Widget = 1;
inline bool UGCHudImageData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHudImageData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHudImageData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHudImageData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHudImageData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.Widget)
  return _internal_widget();
}
inline void UGCHudImageData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudImageData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHudImageData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudImageData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHudImageData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudImageData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHudImageData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHudImageData.Widget)
  return _msg;
}
inline void UGCHudImageData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudImageData.Widget)
}

// string SpriteName = 2;
inline void UGCHudImageData::clear_spritename() {
  _impl_.spritename_.ClearToEmpty();
}
inline const std::string& UGCHudImageData::spritename() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.SpriteName)
  return _internal_spritename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudImageData::set_spritename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.spritename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.SpriteName)
}
inline std::string* UGCHudImageData::mutable_spritename() {
  std::string* _s = _internal_mutable_spritename();
  // @@protoc_insertion_point(field_mutable:message.UGCHudImageData.SpriteName)
  return _s;
}
inline const std::string& UGCHudImageData::_internal_spritename() const {
  return _impl_.spritename_.Get();
}
inline void UGCHudImageData::_internal_set_spritename(const std::string& value) {
  
  _impl_.spritename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudImageData::_internal_mutable_spritename() {
  
  return _impl_.spritename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudImageData::release_spritename() {
  // @@protoc_insertion_point(field_release:message.UGCHudImageData.SpriteName)
  return _impl_.spritename_.Release();
}
inline void UGCHudImageData::set_allocated_spritename(std::string* spritename) {
  if (spritename != nullptr) {
    
  } else {
    
  }
  _impl_.spritename_.SetAllocated(spritename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spritename_.IsDefault()) {
    _impl_.spritename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudImageData.SpriteName)
}

// int32 SpriteFlip = 3;
inline void UGCHudImageData::clear_spriteflip() {
  _impl_.spriteflip_ = 0;
}
inline int32_t UGCHudImageData::_internal_spriteflip() const {
  return _impl_.spriteflip_;
}
inline int32_t UGCHudImageData::spriteflip() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.SpriteFlip)
  return _internal_spriteflip();
}
inline void UGCHudImageData::_internal_set_spriteflip(int32_t value) {
  
  _impl_.spriteflip_ = value;
}
inline void UGCHudImageData::set_spriteflip(int32_t value) {
  _internal_set_spriteflip(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.SpriteFlip)
}

// int32 SpriteType = 4;
inline void UGCHudImageData::clear_spritetype() {
  _impl_.spritetype_ = 0;
}
inline int32_t UGCHudImageData::_internal_spritetype() const {
  return _impl_.spritetype_;
}
inline int32_t UGCHudImageData::spritetype() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.SpriteType)
  return _internal_spritetype();
}
inline void UGCHudImageData::_internal_set_spritetype(int32_t value) {
  
  _impl_.spritetype_ = value;
}
inline void UGCHudImageData::set_spritetype(int32_t value) {
  _internal_set_spritetype(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.SpriteType)
}

// int32 BorderTop = 5;
inline void UGCHudImageData::clear_bordertop() {
  _impl_.bordertop_ = 0;
}
inline int32_t UGCHudImageData::_internal_bordertop() const {
  return _impl_.bordertop_;
}
inline int32_t UGCHudImageData::bordertop() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.BorderTop)
  return _internal_bordertop();
}
inline void UGCHudImageData::_internal_set_bordertop(int32_t value) {
  
  _impl_.bordertop_ = value;
}
inline void UGCHudImageData::set_bordertop(int32_t value) {
  _internal_set_bordertop(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.BorderTop)
}

// int32 BorderBottom = 6;
inline void UGCHudImageData::clear_borderbottom() {
  _impl_.borderbottom_ = 0;
}
inline int32_t UGCHudImageData::_internal_borderbottom() const {
  return _impl_.borderbottom_;
}
inline int32_t UGCHudImageData::borderbottom() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.BorderBottom)
  return _internal_borderbottom();
}
inline void UGCHudImageData::_internal_set_borderbottom(int32_t value) {
  
  _impl_.borderbottom_ = value;
}
inline void UGCHudImageData::set_borderbottom(int32_t value) {
  _internal_set_borderbottom(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.BorderBottom)
}

// int32 BorderLeft = 7;
inline void UGCHudImageData::clear_borderleft() {
  _impl_.borderleft_ = 0;
}
inline int32_t UGCHudImageData::_internal_borderleft() const {
  return _impl_.borderleft_;
}
inline int32_t UGCHudImageData::borderleft() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.BorderLeft)
  return _internal_borderleft();
}
inline void UGCHudImageData::_internal_set_borderleft(int32_t value) {
  
  _impl_.borderleft_ = value;
}
inline void UGCHudImageData::set_borderleft(int32_t value) {
  _internal_set_borderleft(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.BorderLeft)
}

// int32 BorderRight = 8;
inline void UGCHudImageData::clear_borderright() {
  _impl_.borderright_ = 0;
}
inline int32_t UGCHudImageData::_internal_borderright() const {
  return _impl_.borderright_;
}
inline int32_t UGCHudImageData::borderright() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.BorderRight)
  return _internal_borderright();
}
inline void UGCHudImageData::_internal_set_borderright(int32_t value) {
  
  _impl_.borderright_ = value;
}
inline void UGCHudImageData::set_borderright(int32_t value) {
  _internal_set_borderright(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.BorderRight)
}

// bool CenterInvisible = 9;
inline void UGCHudImageData::clear_centerinvisible() {
  _impl_.centerinvisible_ = false;
}
inline bool UGCHudImageData::_internal_centerinvisible() const {
  return _impl_.centerinvisible_;
}
inline bool UGCHudImageData::centerinvisible() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.CenterInvisible)
  return _internal_centerinvisible();
}
inline void UGCHudImageData::_internal_set_centerinvisible(bool value) {
  
  _impl_.centerinvisible_ = value;
}
inline void UGCHudImageData::set_centerinvisible(bool value) {
  _internal_set_centerinvisible(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.CenterInvisible)
}

// int32 FillDir = 10;
inline void UGCHudImageData::clear_filldir() {
  _impl_.filldir_ = 0;
}
inline int32_t UGCHudImageData::_internal_filldir() const {
  return _impl_.filldir_;
}
inline int32_t UGCHudImageData::filldir() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.FillDir)
  return _internal_filldir();
}
inline void UGCHudImageData::_internal_set_filldir(int32_t value) {
  
  _impl_.filldir_ = value;
}
inline void UGCHudImageData::set_filldir(int32_t value) {
  _internal_set_filldir(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.FillDir)
}

// float FillAmount = 11;
inline void UGCHudImageData::clear_fillamount() {
  _impl_.fillamount_ = 0;
}
inline float UGCHudImageData::_internal_fillamount() const {
  return _impl_.fillamount_;
}
inline float UGCHudImageData::fillamount() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.FillAmount)
  return _internal_fillamount();
}
inline void UGCHudImageData::_internal_set_fillamount(float value) {
  
  _impl_.fillamount_ = value;
}
inline void UGCHudImageData::set_fillamount(float value) {
  _internal_set_fillamount(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.FillAmount)
}

// bool InvertFill = 12;
inline void UGCHudImageData::clear_invertfill() {
  _impl_.invertfill_ = false;
}
inline bool UGCHudImageData::_internal_invertfill() const {
  return _impl_.invertfill_;
}
inline bool UGCHudImageData::invertfill() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.InvertFill)
  return _internal_invertfill();
}
inline void UGCHudImageData::_internal_set_invertfill(bool value) {
  
  _impl_.invertfill_ = value;
}
inline void UGCHudImageData::set_invertfill(bool value) {
  _internal_set_invertfill(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.InvertFill)
}

// int32 Gradient = 13;
inline void UGCHudImageData::clear_gradient() {
  _impl_.gradient_ = 0;
}
inline int32_t UGCHudImageData::_internal_gradient() const {
  return _impl_.gradient_;
}
inline int32_t UGCHudImageData::gradient() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.Gradient)
  return _internal_gradient();
}
inline void UGCHudImageData::_internal_set_gradient(int32_t value) {
  
  _impl_.gradient_ = value;
}
inline void UGCHudImageData::set_gradient(int32_t value) {
  _internal_set_gradient(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.Gradient)
}

// int32 GradientTop = 14;
inline void UGCHudImageData::clear_gradienttop() {
  _impl_.gradienttop_ = 0;
}
inline int32_t UGCHudImageData::_internal_gradienttop() const {
  return _impl_.gradienttop_;
}
inline int32_t UGCHudImageData::gradienttop() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.GradientTop)
  return _internal_gradienttop();
}
inline void UGCHudImageData::_internal_set_gradienttop(int32_t value) {
  
  _impl_.gradienttop_ = value;
}
inline void UGCHudImageData::set_gradienttop(int32_t value) {
  _internal_set_gradienttop(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.GradientTop)
}

// int32 GradientBottom = 15;
inline void UGCHudImageData::clear_gradientbottom() {
  _impl_.gradientbottom_ = 0;
}
inline int32_t UGCHudImageData::_internal_gradientbottom() const {
  return _impl_.gradientbottom_;
}
inline int32_t UGCHudImageData::gradientbottom() const {
  // @@protoc_insertion_point(field_get:message.UGCHudImageData.GradientBottom)
  return _internal_gradientbottom();
}
inline void UGCHudImageData::_internal_set_gradientbottom(int32_t value) {
  
  _impl_.gradientbottom_ = value;
}
inline void UGCHudImageData::set_gradientbottom(int32_t value) {
  _internal_set_gradientbottom(value);
  // @@protoc_insertion_point(field_set:message.UGCHudImageData.GradientBottom)
}

// -------------------------------------------------------------------

// UGCHudButtonData

// .message.UGCHudWidgetData Widget = 1;
inline bool UGCHudButtonData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHudButtonData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHudButtonData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHudButtonData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHudButtonData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.Widget)
  return _internal_widget();
}
inline void UGCHudButtonData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudButtonData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHudButtonData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudButtonData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHudButtonData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudButtonData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHudButtonData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHudButtonData.Widget)
  return _msg;
}
inline void UGCHudButtonData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudButtonData.Widget)
}

// string SpriteName = 2;
inline void UGCHudButtonData::clear_spritename() {
  _impl_.spritename_.ClearToEmpty();
}
inline const std::string& UGCHudButtonData::spritename() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.SpriteName)
  return _internal_spritename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudButtonData::set_spritename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.spritename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.SpriteName)
}
inline std::string* UGCHudButtonData::mutable_spritename() {
  std::string* _s = _internal_mutable_spritename();
  // @@protoc_insertion_point(field_mutable:message.UGCHudButtonData.SpriteName)
  return _s;
}
inline const std::string& UGCHudButtonData::_internal_spritename() const {
  return _impl_.spritename_.Get();
}
inline void UGCHudButtonData::_internal_set_spritename(const std::string& value) {
  
  _impl_.spritename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudButtonData::_internal_mutable_spritename() {
  
  return _impl_.spritename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudButtonData::release_spritename() {
  // @@protoc_insertion_point(field_release:message.UGCHudButtonData.SpriteName)
  return _impl_.spritename_.Release();
}
inline void UGCHudButtonData::set_allocated_spritename(std::string* spritename) {
  if (spritename != nullptr) {
    
  } else {
    
  }
  _impl_.spritename_.SetAllocated(spritename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spritename_.IsDefault()) {
    _impl_.spritename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudButtonData.SpriteName)
}

// int32 DisableColor = 3;
inline void UGCHudButtonData::clear_disablecolor() {
  _impl_.disablecolor_ = 0;
}
inline int32_t UGCHudButtonData::_internal_disablecolor() const {
  return _impl_.disablecolor_;
}
inline int32_t UGCHudButtonData::disablecolor() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.DisableColor)
  return _internal_disablecolor();
}
inline void UGCHudButtonData::_internal_set_disablecolor(int32_t value) {
  
  _impl_.disablecolor_ = value;
}
inline void UGCHudButtonData::set_disablecolor(int32_t value) {
  _internal_set_disablecolor(value);
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.DisableColor)
}

// int32 SpriteType = 4;
inline void UGCHudButtonData::clear_spritetype() {
  _impl_.spritetype_ = 0;
}
inline int32_t UGCHudButtonData::_internal_spritetype() const {
  return _impl_.spritetype_;
}
inline int32_t UGCHudButtonData::spritetype() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.SpriteType)
  return _internal_spritetype();
}
inline void UGCHudButtonData::_internal_set_spritetype(int32_t value) {
  
  _impl_.spritetype_ = value;
}
inline void UGCHudButtonData::set_spritetype(int32_t value) {
  _internal_set_spritetype(value);
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.SpriteType)
}

// int32 NormalColor = 5;
inline void UGCHudButtonData::clear_normalcolor() {
  _impl_.normalcolor_ = 0;
}
inline int32_t UGCHudButtonData::_internal_normalcolor() const {
  return _impl_.normalcolor_;
}
inline int32_t UGCHudButtonData::normalcolor() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.NormalColor)
  return _internal_normalcolor();
}
inline void UGCHudButtonData::_internal_set_normalcolor(int32_t value) {
  
  _impl_.normalcolor_ = value;
}
inline void UGCHudButtonData::set_normalcolor(int32_t value) {
  _internal_set_normalcolor(value);
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.NormalColor)
}

// int32 PressedColor = 6;
inline void UGCHudButtonData::clear_pressedcolor() {
  _impl_.pressedcolor_ = 0;
}
inline int32_t UGCHudButtonData::_internal_pressedcolor() const {
  return _impl_.pressedcolor_;
}
inline int32_t UGCHudButtonData::pressedcolor() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.PressedColor)
  return _internal_pressedcolor();
}
inline void UGCHudButtonData::_internal_set_pressedcolor(int32_t value) {
  
  _impl_.pressedcolor_ = value;
}
inline void UGCHudButtonData::set_pressedcolor(int32_t value) {
  _internal_set_pressedcolor(value);
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.PressedColor)
}

// bool IsFEButton = 7;
inline void UGCHudButtonData::clear_isfebutton() {
  _impl_.isfebutton_ = false;
}
inline bool UGCHudButtonData::_internal_isfebutton() const {
  return _impl_.isfebutton_;
}
inline bool UGCHudButtonData::isfebutton() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.IsFEButton)
  return _internal_isfebutton();
}
inline void UGCHudButtonData::_internal_set_isfebutton(bool value) {
  
  _impl_.isfebutton_ = value;
}
inline void UGCHudButtonData::set_isfebutton(bool value) {
  _internal_set_isfebutton(value);
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.IsFEButton)
}

// int32 BorderTop = 8;
inline void UGCHudButtonData::clear_bordertop() {
  _impl_.bordertop_ = 0;
}
inline int32_t UGCHudButtonData::_internal_bordertop() const {
  return _impl_.bordertop_;
}
inline int32_t UGCHudButtonData::bordertop() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.BorderTop)
  return _internal_bordertop();
}
inline void UGCHudButtonData::_internal_set_bordertop(int32_t value) {
  
  _impl_.bordertop_ = value;
}
inline void UGCHudButtonData::set_bordertop(int32_t value) {
  _internal_set_bordertop(value);
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.BorderTop)
}

// int32 BorderBottom = 9;
inline void UGCHudButtonData::clear_borderbottom() {
  _impl_.borderbottom_ = 0;
}
inline int32_t UGCHudButtonData::_internal_borderbottom() const {
  return _impl_.borderbottom_;
}
inline int32_t UGCHudButtonData::borderbottom() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.BorderBottom)
  return _internal_borderbottom();
}
inline void UGCHudButtonData::_internal_set_borderbottom(int32_t value) {
  
  _impl_.borderbottom_ = value;
}
inline void UGCHudButtonData::set_borderbottom(int32_t value) {
  _internal_set_borderbottom(value);
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.BorderBottom)
}

// int32 BorderLeft = 10;
inline void UGCHudButtonData::clear_borderleft() {
  _impl_.borderleft_ = 0;
}
inline int32_t UGCHudButtonData::_internal_borderleft() const {
  return _impl_.borderleft_;
}
inline int32_t UGCHudButtonData::borderleft() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.BorderLeft)
  return _internal_borderleft();
}
inline void UGCHudButtonData::_internal_set_borderleft(int32_t value) {
  
  _impl_.borderleft_ = value;
}
inline void UGCHudButtonData::set_borderleft(int32_t value) {
  _internal_set_borderleft(value);
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.BorderLeft)
}

// int32 BorderRight = 11;
inline void UGCHudButtonData::clear_borderright() {
  _impl_.borderright_ = 0;
}
inline int32_t UGCHudButtonData::_internal_borderright() const {
  return _impl_.borderright_;
}
inline int32_t UGCHudButtonData::borderright() const {
  // @@protoc_insertion_point(field_get:message.UGCHudButtonData.BorderRight)
  return _internal_borderright();
}
inline void UGCHudButtonData::_internal_set_borderright(int32_t value) {
  
  _impl_.borderright_ = value;
}
inline void UGCHudButtonData::set_borderright(int32_t value) {
  _internal_set_borderright(value);
  // @@protoc_insertion_point(field_set:message.UGCHudButtonData.BorderRight)
}

// -------------------------------------------------------------------

// UGCHudInputData

// .message.UGCHudWidgetData Widget = 1;
inline bool UGCHudInputData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHudInputData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHudInputData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHudInputData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHudInputData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.Widget)
  return _internal_widget();
}
inline void UGCHudInputData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudInputData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHudInputData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudInputData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHudInputData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudInputData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHudInputData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHudInputData.Widget)
  return _msg;
}
inline void UGCHudInputData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudInputData.Widget)
}

// string Font = 2;
inline void UGCHudInputData::clear_font() {
  _impl_.font_.ClearToEmpty();
}
inline const std::string& UGCHudInputData::font() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.Font)
  return _internal_font();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudInputData::set_font(ArgT0&& arg0, ArgT... args) {
 
 _impl_.font_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.Font)
}
inline std::string* UGCHudInputData::mutable_font() {
  std::string* _s = _internal_mutable_font();
  // @@protoc_insertion_point(field_mutable:message.UGCHudInputData.Font)
  return _s;
}
inline const std::string& UGCHudInputData::_internal_font() const {
  return _impl_.font_.Get();
}
inline void UGCHudInputData::_internal_set_font(const std::string& value) {
  
  _impl_.font_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudInputData::_internal_mutable_font() {
  
  return _impl_.font_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudInputData::release_font() {
  // @@protoc_insertion_point(field_release:message.UGCHudInputData.Font)
  return _impl_.font_.Release();
}
inline void UGCHudInputData::set_allocated_font(std::string* font) {
  if (font != nullptr) {
    
  } else {
    
  }
  _impl_.font_.SetAllocated(font, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.font_.IsDefault()) {
    _impl_.font_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudInputData.Font)
}

// int32 FontSize = 3;
inline void UGCHudInputData::clear_fontsize() {
  _impl_.fontsize_ = 0;
}
inline int32_t UGCHudInputData::_internal_fontsize() const {
  return _impl_.fontsize_;
}
inline int32_t UGCHudInputData::fontsize() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.FontSize)
  return _internal_fontsize();
}
inline void UGCHudInputData::_internal_set_fontsize(int32_t value) {
  
  _impl_.fontsize_ = value;
}
inline void UGCHudInputData::set_fontsize(int32_t value) {
  _internal_set_fontsize(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.FontSize)
}

// bool IsBold = 4;
inline void UGCHudInputData::clear_isbold() {
  _impl_.isbold_ = false;
}
inline bool UGCHudInputData::_internal_isbold() const {
  return _impl_.isbold_;
}
inline bool UGCHudInputData::isbold() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.IsBold)
  return _internal_isbold();
}
inline void UGCHudInputData::_internal_set_isbold(bool value) {
  
  _impl_.isbold_ = value;
}
inline void UGCHudInputData::set_isbold(bool value) {
  _internal_set_isbold(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.IsBold)
}

// bool IsItalic = 5;
inline void UGCHudInputData::clear_isitalic() {
  _impl_.isitalic_ = false;
}
inline bool UGCHudInputData::_internal_isitalic() const {
  return _impl_.isitalic_;
}
inline bool UGCHudInputData::isitalic() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.IsItalic)
  return _internal_isitalic();
}
inline void UGCHudInputData::_internal_set_isitalic(bool value) {
  
  _impl_.isitalic_ = value;
}
inline void UGCHudInputData::set_isitalic(bool value) {
  _internal_set_isitalic(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.IsItalic)
}

// bool IsUnderline = 6;
inline void UGCHudInputData::clear_isunderline() {
  _impl_.isunderline_ = false;
}
inline bool UGCHudInputData::_internal_isunderline() const {
  return _impl_.isunderline_;
}
inline bool UGCHudInputData::isunderline() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.IsUnderline)
  return _internal_isunderline();
}
inline void UGCHudInputData::_internal_set_isunderline(bool value) {
  
  _impl_.isunderline_ = value;
}
inline void UGCHudInputData::set_isunderline(bool value) {
  _internal_set_isunderline(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.IsUnderline)
}

// int32 Alignment = 7;
inline void UGCHudInputData::clear_alignment() {
  _impl_.alignment_ = 0;
}
inline int32_t UGCHudInputData::_internal_alignment() const {
  return _impl_.alignment_;
}
inline int32_t UGCHudInputData::alignment() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.Alignment)
  return _internal_alignment();
}
inline void UGCHudInputData::_internal_set_alignment(int32_t value) {
  
  _impl_.alignment_ = value;
}
inline void UGCHudInputData::set_alignment(int32_t value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.Alignment)
}

// int32 AlignmentVertical = 8;
inline void UGCHudInputData::clear_alignmentvertical() {
  _impl_.alignmentvertical_ = 0;
}
inline int32_t UGCHudInputData::_internal_alignmentvertical() const {
  return _impl_.alignmentvertical_;
}
inline int32_t UGCHudInputData::alignmentvertical() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.AlignmentVertical)
  return _internal_alignmentvertical();
}
inline void UGCHudInputData::_internal_set_alignmentvertical(int32_t value) {
  
  _impl_.alignmentvertical_ = value;
}
inline void UGCHudInputData::set_alignmentvertical(int32_t value) {
  _internal_set_alignmentvertical(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.AlignmentVertical)
}

// float LineSpacing = 9;
inline void UGCHudInputData::clear_linespacing() {
  _impl_.linespacing_ = 0;
}
inline float UGCHudInputData::_internal_linespacing() const {
  return _impl_.linespacing_;
}
inline float UGCHudInputData::linespacing() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.LineSpacing)
  return _internal_linespacing();
}
inline void UGCHudInputData::_internal_set_linespacing(float value) {
  
  _impl_.linespacing_ = value;
}
inline void UGCHudInputData::set_linespacing(float value) {
  _internal_set_linespacing(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.LineSpacing)
}

// int32 WordWrap = 10;
inline void UGCHudInputData::clear_wordwrap() {
  _impl_.wordwrap_ = 0;
}
inline int32_t UGCHudInputData::_internal_wordwrap() const {
  return _impl_.wordwrap_;
}
inline int32_t UGCHudInputData::wordwrap() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.WordWrap)
  return _internal_wordwrap();
}
inline void UGCHudInputData::_internal_set_wordwrap(int32_t value) {
  
  _impl_.wordwrap_ = value;
}
inline void UGCHudInputData::set_wordwrap(int32_t value) {
  _internal_set_wordwrap(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.WordWrap)
}

// int32 MaxLength = 11;
inline void UGCHudInputData::clear_maxlength() {
  _impl_.maxlength_ = 0;
}
inline int32_t UGCHudInputData::_internal_maxlength() const {
  return _impl_.maxlength_;
}
inline int32_t UGCHudInputData::maxlength() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.MaxLength)
  return _internal_maxlength();
}
inline void UGCHudInputData::_internal_set_maxlength(int32_t value) {
  
  _impl_.maxlength_ = value;
}
inline void UGCHudInputData::set_maxlength(int32_t value) {
  _internal_set_maxlength(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.MaxLength)
}

// string text = 12;
inline void UGCHudInputData::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& UGCHudInputData::text() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudInputData::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.text)
}
inline std::string* UGCHudInputData::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:message.UGCHudInputData.text)
  return _s;
}
inline const std::string& UGCHudInputData::_internal_text() const {
  return _impl_.text_.Get();
}
inline void UGCHudInputData::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudInputData::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudInputData::release_text() {
  // @@protoc_insertion_point(field_release:message.UGCHudInputData.text)
  return _impl_.text_.Release();
}
inline void UGCHudInputData::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudInputData.text)
}

// int32 TransitionType = 13;
inline void UGCHudInputData::clear_transitiontype() {
  _impl_.transitiontype_ = 0;
}
inline int32_t UGCHudInputData::_internal_transitiontype() const {
  return _impl_.transitiontype_;
}
inline int32_t UGCHudInputData::transitiontype() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.TransitionType)
  return _internal_transitiontype();
}
inline void UGCHudInputData::_internal_set_transitiontype(int32_t value) {
  
  _impl_.transitiontype_ = value;
}
inline void UGCHudInputData::set_transitiontype(int32_t value) {
  _internal_set_transitiontype(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.TransitionType)
}

// int32 NormalColor = 14;
inline void UGCHudInputData::clear_normalcolor() {
  _impl_.normalcolor_ = 0;
}
inline int32_t UGCHudInputData::_internal_normalcolor() const {
  return _impl_.normalcolor_;
}
inline int32_t UGCHudInputData::normalcolor() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.NormalColor)
  return _internal_normalcolor();
}
inline void UGCHudInputData::_internal_set_normalcolor(int32_t value) {
  
  _impl_.normalcolor_ = value;
}
inline void UGCHudInputData::set_normalcolor(int32_t value) {
  _internal_set_normalcolor(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.NormalColor)
}

// int32 PressedColor = 15;
inline void UGCHudInputData::clear_pressedcolor() {
  _impl_.pressedcolor_ = 0;
}
inline int32_t UGCHudInputData::_internal_pressedcolor() const {
  return _impl_.pressedcolor_;
}
inline int32_t UGCHudInputData::pressedcolor() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.PressedColor)
  return _internal_pressedcolor();
}
inline void UGCHudInputData::_internal_set_pressedcolor(int32_t value) {
  
  _impl_.pressedcolor_ = value;
}
inline void UGCHudInputData::set_pressedcolor(int32_t value) {
  _internal_set_pressedcolor(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.PressedColor)
}

// int32 DisableColor = 16;
inline void UGCHudInputData::clear_disablecolor() {
  _impl_.disablecolor_ = 0;
}
inline int32_t UGCHudInputData::_internal_disablecolor() const {
  return _impl_.disablecolor_;
}
inline int32_t UGCHudInputData::disablecolor() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.DisableColor)
  return _internal_disablecolor();
}
inline void UGCHudInputData::_internal_set_disablecolor(int32_t value) {
  
  _impl_.disablecolor_ = value;
}
inline void UGCHudInputData::set_disablecolor(int32_t value) {
  _internal_set_disablecolor(value);
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.DisableColor)
}

// string LocKey = 17;
inline void UGCHudInputData::clear_lockey() {
  _impl_.lockey_.ClearToEmpty();
}
inline const std::string& UGCHudInputData::lockey() const {
  // @@protoc_insertion_point(field_get:message.UGCHudInputData.LocKey)
  return _internal_lockey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudInputData::set_lockey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lockey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudInputData.LocKey)
}
inline std::string* UGCHudInputData::mutable_lockey() {
  std::string* _s = _internal_mutable_lockey();
  // @@protoc_insertion_point(field_mutable:message.UGCHudInputData.LocKey)
  return _s;
}
inline const std::string& UGCHudInputData::_internal_lockey() const {
  return _impl_.lockey_.Get();
}
inline void UGCHudInputData::_internal_set_lockey(const std::string& value) {
  
  _impl_.lockey_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudInputData::_internal_mutable_lockey() {
  
  return _impl_.lockey_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudInputData::release_lockey() {
  // @@protoc_insertion_point(field_release:message.UGCHudInputData.LocKey)
  return _impl_.lockey_.Release();
}
inline void UGCHudInputData::set_allocated_lockey(std::string* lockey) {
  if (lockey != nullptr) {
    
  } else {
    
  }
  _impl_.lockey_.SetAllocated(lockey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lockey_.IsDefault()) {
    _impl_.lockey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudInputData.LocKey)
}

// -------------------------------------------------------------------

// UGCHudLayoutData

// .message.UGCHudWidgetData Widget = 1;
inline bool UGCHudLayoutData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHudLayoutData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHudLayoutData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHudLayoutData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHudLayoutData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutData.Widget)
  return _internal_widget();
}
inline void UGCHudLayoutData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudLayoutData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHudLayoutData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudLayoutData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHudLayoutData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudLayoutData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHudLayoutData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLayoutData.Widget)
  return _msg;
}
inline void UGCHudLayoutData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLayoutData.Widget)
}

// -------------------------------------------------------------------

// UGCHudGridData

// .message.UGCHudPanelData Panel = 1;
inline bool UGCHudGridData::_internal_has_panel() const {
  return this != internal_default_instance() && _impl_.panel_ != nullptr;
}
inline bool UGCHudGridData::has_panel() const {
  return _internal_has_panel();
}
inline void UGCHudGridData::clear_panel() {
  if (GetArenaForAllocation() == nullptr && _impl_.panel_ != nullptr) {
    delete _impl_.panel_;
  }
  _impl_.panel_ = nullptr;
}
inline const ::message::UGCHudPanelData& UGCHudGridData::_internal_panel() const {
  const ::message::UGCHudPanelData* p = _impl_.panel_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudPanelData&>(
      ::message::_UGCHudPanelData_default_instance_);
}
inline const ::message::UGCHudPanelData& UGCHudGridData::panel() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.Panel)
  return _internal_panel();
}
inline void UGCHudGridData::unsafe_arena_set_allocated_panel(
    ::message::UGCHudPanelData* panel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.panel_);
  }
  _impl_.panel_ = panel;
  if (panel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGridData.Panel)
}
inline ::message::UGCHudPanelData* UGCHudGridData::release_panel() {
  
  ::message::UGCHudPanelData* temp = _impl_.panel_;
  _impl_.panel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudPanelData* UGCHudGridData::unsafe_arena_release_panel() {
  // @@protoc_insertion_point(field_release:message.UGCHudGridData.Panel)
  
  ::message::UGCHudPanelData* temp = _impl_.panel_;
  _impl_.panel_ = nullptr;
  return temp;
}
inline ::message::UGCHudPanelData* UGCHudGridData::_internal_mutable_panel() {
  
  if (_impl_.panel_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudPanelData>(GetArenaForAllocation());
    _impl_.panel_ = p;
  }
  return _impl_.panel_;
}
inline ::message::UGCHudPanelData* UGCHudGridData::mutable_panel() {
  ::message::UGCHudPanelData* _msg = _internal_mutable_panel();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGridData.Panel)
  return _msg;
}
inline void UGCHudGridData::set_allocated_panel(::message::UGCHudPanelData* panel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.panel_;
  }
  if (panel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(panel);
    if (message_arena != submessage_arena) {
      panel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.panel_ = panel;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGridData.Panel)
}

// int32 LayoutType = 2;
inline void UGCHudGridData::clear_layouttype() {
  _impl_.layouttype_ = 0;
}
inline int32_t UGCHudGridData::_internal_layouttype() const {
  return _impl_.layouttype_;
}
inline int32_t UGCHudGridData::layouttype() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.LayoutType)
  return _internal_layouttype();
}
inline void UGCHudGridData::_internal_set_layouttype(int32_t value) {
  
  _impl_.layouttype_ = value;
}
inline void UGCHudGridData::set_layouttype(int32_t value) {
  _internal_set_layouttype(value);
  // @@protoc_insertion_point(field_set:message.UGCHudGridData.LayoutType)
}

// int32 ContentOrigin = 3;
inline void UGCHudGridData::clear_contentorigin() {
  _impl_.contentorigin_ = 0;
}
inline int32_t UGCHudGridData::_internal_contentorigin() const {
  return _impl_.contentorigin_;
}
inline int32_t UGCHudGridData::contentorigin() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.ContentOrigin)
  return _internal_contentorigin();
}
inline void UGCHudGridData::_internal_set_contentorigin(int32_t value) {
  
  _impl_.contentorigin_ = value;
}
inline void UGCHudGridData::set_contentorigin(int32_t value) {
  _internal_set_contentorigin(value);
  // @@protoc_insertion_point(field_set:message.UGCHudGridData.ContentOrigin)
}

// int32 FillDirection = 4;
inline void UGCHudGridData::clear_filldirection() {
  _impl_.filldirection_ = 0;
}
inline int32_t UGCHudGridData::_internal_filldirection() const {
  return _impl_.filldirection_;
}
inline int32_t UGCHudGridData::filldirection() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.FillDirection)
  return _internal_filldirection();
}
inline void UGCHudGridData::_internal_set_filldirection(int32_t value) {
  
  _impl_.filldirection_ = value;
}
inline void UGCHudGridData::set_filldirection(int32_t value) {
  _internal_set_filldirection(value);
  // @@protoc_insertion_point(field_set:message.UGCHudGridData.FillDirection)
}

// .message.ProtoBuffVector2 CellSize = 5;
inline bool UGCHudGridData::_internal_has_cellsize() const {
  return this != internal_default_instance() && _impl_.cellsize_ != nullptr;
}
inline bool UGCHudGridData::has_cellsize() const {
  return _internal_has_cellsize();
}
inline const ::message::ProtoBuffVector2& UGCHudGridData::_internal_cellsize() const {
  const ::message::ProtoBuffVector2* p = _impl_.cellsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudGridData::cellsize() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.CellSize)
  return _internal_cellsize();
}
inline void UGCHudGridData::unsafe_arena_set_allocated_cellsize(
    ::message::ProtoBuffVector2* cellsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellsize_);
  }
  _impl_.cellsize_ = cellsize;
  if (cellsize) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGridData.CellSize)
}
inline ::message::ProtoBuffVector2* UGCHudGridData::release_cellsize() {
  
  ::message::ProtoBuffVector2* temp = _impl_.cellsize_;
  _impl_.cellsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::unsafe_arena_release_cellsize() {
  // @@protoc_insertion_point(field_release:message.UGCHudGridData.CellSize)
  
  ::message::ProtoBuffVector2* temp = _impl_.cellsize_;
  _impl_.cellsize_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::_internal_mutable_cellsize() {
  
  if (_impl_.cellsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.cellsize_ = p;
  }
  return _impl_.cellsize_;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::mutable_cellsize() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_cellsize();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGridData.CellSize)
  return _msg;
}
inline void UGCHudGridData::set_allocated_cellsize(::message::ProtoBuffVector2* cellsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellsize_);
  }
  if (cellsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellsize));
    if (message_arena != submessage_arena) {
      cellsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellsize, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cellsize_ = cellsize;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGridData.CellSize)
}

// .message.ProtoBuffVector2 Space = 6;
inline bool UGCHudGridData::_internal_has_space() const {
  return this != internal_default_instance() && _impl_.space_ != nullptr;
}
inline bool UGCHudGridData::has_space() const {
  return _internal_has_space();
}
inline const ::message::ProtoBuffVector2& UGCHudGridData::_internal_space() const {
  const ::message::ProtoBuffVector2* p = _impl_.space_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudGridData::space() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.Space)
  return _internal_space();
}
inline void UGCHudGridData::unsafe_arena_set_allocated_space(
    ::message::ProtoBuffVector2* space) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.space_);
  }
  _impl_.space_ = space;
  if (space) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGridData.Space)
}
inline ::message::ProtoBuffVector2* UGCHudGridData::release_space() {
  
  ::message::ProtoBuffVector2* temp = _impl_.space_;
  _impl_.space_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::unsafe_arena_release_space() {
  // @@protoc_insertion_point(field_release:message.UGCHudGridData.Space)
  
  ::message::ProtoBuffVector2* temp = _impl_.space_;
  _impl_.space_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::_internal_mutable_space() {
  
  if (_impl_.space_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.space_ = p;
  }
  return _impl_.space_;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::mutable_space() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_space();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGridData.Space)
  return _msg;
}
inline void UGCHudGridData::set_allocated_space(::message::ProtoBuffVector2* space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.space_);
  }
  if (space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(space));
    if (message_arena != submessage_arena) {
      space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, space, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.space_ = space;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGridData.Space)
}

// int32 Constraint = 7;
inline void UGCHudGridData::clear_constraint() {
  _impl_.constraint_ = 0;
}
inline int32_t UGCHudGridData::_internal_constraint() const {
  return _impl_.constraint_;
}
inline int32_t UGCHudGridData::constraint() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.Constraint)
  return _internal_constraint();
}
inline void UGCHudGridData::_internal_set_constraint(int32_t value) {
  
  _impl_.constraint_ = value;
}
inline void UGCHudGridData::set_constraint(int32_t value) {
  _internal_set_constraint(value);
  // @@protoc_insertion_point(field_set:message.UGCHudGridData.Constraint)
}

// .message.ProtoBuffVector2 OffsetUpDown = 8;
inline bool UGCHudGridData::_internal_has_offsetupdown() const {
  return this != internal_default_instance() && _impl_.offsetupdown_ != nullptr;
}
inline bool UGCHudGridData::has_offsetupdown() const {
  return _internal_has_offsetupdown();
}
inline const ::message::ProtoBuffVector2& UGCHudGridData::_internal_offsetupdown() const {
  const ::message::ProtoBuffVector2* p = _impl_.offsetupdown_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudGridData::offsetupdown() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.OffsetUpDown)
  return _internal_offsetupdown();
}
inline void UGCHudGridData::unsafe_arena_set_allocated_offsetupdown(
    ::message::ProtoBuffVector2* offsetupdown) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetupdown_);
  }
  _impl_.offsetupdown_ = offsetupdown;
  if (offsetupdown) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGridData.OffsetUpDown)
}
inline ::message::ProtoBuffVector2* UGCHudGridData::release_offsetupdown() {
  
  ::message::ProtoBuffVector2* temp = _impl_.offsetupdown_;
  _impl_.offsetupdown_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::unsafe_arena_release_offsetupdown() {
  // @@protoc_insertion_point(field_release:message.UGCHudGridData.OffsetUpDown)
  
  ::message::ProtoBuffVector2* temp = _impl_.offsetupdown_;
  _impl_.offsetupdown_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::_internal_mutable_offsetupdown() {
  
  if (_impl_.offsetupdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.offsetupdown_ = p;
  }
  return _impl_.offsetupdown_;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::mutable_offsetupdown() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_offsetupdown();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGridData.OffsetUpDown)
  return _msg;
}
inline void UGCHudGridData::set_allocated_offsetupdown(::message::ProtoBuffVector2* offsetupdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetupdown_);
  }
  if (offsetupdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offsetupdown));
    if (message_arena != submessage_arena) {
      offsetupdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offsetupdown, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offsetupdown_ = offsetupdown;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGridData.OffsetUpDown)
}

// .message.ProtoBuffVector2 OffsetLeftRight = 9;
inline bool UGCHudGridData::_internal_has_offsetleftright() const {
  return this != internal_default_instance() && _impl_.offsetleftright_ != nullptr;
}
inline bool UGCHudGridData::has_offsetleftright() const {
  return _internal_has_offsetleftright();
}
inline const ::message::ProtoBuffVector2& UGCHudGridData::_internal_offsetleftright() const {
  const ::message::ProtoBuffVector2* p = _impl_.offsetleftright_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudGridData::offsetleftright() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.OffsetLeftRight)
  return _internal_offsetleftright();
}
inline void UGCHudGridData::unsafe_arena_set_allocated_offsetleftright(
    ::message::ProtoBuffVector2* offsetleftright) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetleftright_);
  }
  _impl_.offsetleftright_ = offsetleftright;
  if (offsetleftright) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGridData.OffsetLeftRight)
}
inline ::message::ProtoBuffVector2* UGCHudGridData::release_offsetleftright() {
  
  ::message::ProtoBuffVector2* temp = _impl_.offsetleftright_;
  _impl_.offsetleftright_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::unsafe_arena_release_offsetleftright() {
  // @@protoc_insertion_point(field_release:message.UGCHudGridData.OffsetLeftRight)
  
  ::message::ProtoBuffVector2* temp = _impl_.offsetleftright_;
  _impl_.offsetleftright_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::_internal_mutable_offsetleftright() {
  
  if (_impl_.offsetleftright_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.offsetleftright_ = p;
  }
  return _impl_.offsetleftright_;
}
inline ::message::ProtoBuffVector2* UGCHudGridData::mutable_offsetleftright() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_offsetleftright();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGridData.OffsetLeftRight)
  return _msg;
}
inline void UGCHudGridData::set_allocated_offsetleftright(::message::ProtoBuffVector2* offsetleftright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetleftright_);
  }
  if (offsetleftright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offsetleftright));
    if (message_arena != submessage_arena) {
      offsetleftright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offsetleftright, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offsetleftright_ = offsetleftright;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGridData.OffsetLeftRight)
}

// int32 ConstraintCount = 10;
inline void UGCHudGridData::clear_constraintcount() {
  _impl_.constraintcount_ = 0;
}
inline int32_t UGCHudGridData::_internal_constraintcount() const {
  return _impl_.constraintcount_;
}
inline int32_t UGCHudGridData::constraintcount() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGridData.ConstraintCount)
  return _internal_constraintcount();
}
inline void UGCHudGridData::_internal_set_constraintcount(int32_t value) {
  
  _impl_.constraintcount_ = value;
}
inline void UGCHudGridData::set_constraintcount(int32_t value) {
  _internal_set_constraintcount(value);
  // @@protoc_insertion_point(field_set:message.UGCHudGridData.ConstraintCount)
}

// -------------------------------------------------------------------

// UGCHudLayoutNewData

// .message.UGCHudWidgetData Widget = 1;
inline bool UGCHudLayoutNewData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHudLayoutNewData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHudLayoutNewData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHudLayoutNewData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHudLayoutNewData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.Widget)
  return _internal_widget();
}
inline void UGCHudLayoutNewData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudLayoutNewData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHudLayoutNewData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudLayoutNewData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHudLayoutNewData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudLayoutNewData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHudLayoutNewData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLayoutNewData.Widget)
  return _msg;
}
inline void UGCHudLayoutNewData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLayoutNewData.Widget)
}

// int32 LayoutType = 2;
inline void UGCHudLayoutNewData::clear_layouttype() {
  _impl_.layouttype_ = 0;
}
inline int32_t UGCHudLayoutNewData::_internal_layouttype() const {
  return _impl_.layouttype_;
}
inline int32_t UGCHudLayoutNewData::layouttype() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.LayoutType)
  return _internal_layouttype();
}
inline void UGCHudLayoutNewData::_internal_set_layouttype(int32_t value) {
  
  _impl_.layouttype_ = value;
}
inline void UGCHudLayoutNewData::set_layouttype(int32_t value) {
  _internal_set_layouttype(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLayoutNewData.LayoutType)
}

// int32 ContentOrigin = 3;
inline void UGCHudLayoutNewData::clear_contentorigin() {
  _impl_.contentorigin_ = 0;
}
inline int32_t UGCHudLayoutNewData::_internal_contentorigin() const {
  return _impl_.contentorigin_;
}
inline int32_t UGCHudLayoutNewData::contentorigin() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.ContentOrigin)
  return _internal_contentorigin();
}
inline void UGCHudLayoutNewData::_internal_set_contentorigin(int32_t value) {
  
  _impl_.contentorigin_ = value;
}
inline void UGCHudLayoutNewData::set_contentorigin(int32_t value) {
  _internal_set_contentorigin(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLayoutNewData.ContentOrigin)
}

// int32 FillDirection = 4;
inline void UGCHudLayoutNewData::clear_filldirection() {
  _impl_.filldirection_ = 0;
}
inline int32_t UGCHudLayoutNewData::_internal_filldirection() const {
  return _impl_.filldirection_;
}
inline int32_t UGCHudLayoutNewData::filldirection() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.FillDirection)
  return _internal_filldirection();
}
inline void UGCHudLayoutNewData::_internal_set_filldirection(int32_t value) {
  
  _impl_.filldirection_ = value;
}
inline void UGCHudLayoutNewData::set_filldirection(int32_t value) {
  _internal_set_filldirection(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLayoutNewData.FillDirection)
}

// .message.ProtoBuffVector2 CellSize = 5;
inline bool UGCHudLayoutNewData::_internal_has_cellsize() const {
  return this != internal_default_instance() && _impl_.cellsize_ != nullptr;
}
inline bool UGCHudLayoutNewData::has_cellsize() const {
  return _internal_has_cellsize();
}
inline const ::message::ProtoBuffVector2& UGCHudLayoutNewData::_internal_cellsize() const {
  const ::message::ProtoBuffVector2* p = _impl_.cellsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudLayoutNewData::cellsize() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.CellSize)
  return _internal_cellsize();
}
inline void UGCHudLayoutNewData::unsafe_arena_set_allocated_cellsize(
    ::message::ProtoBuffVector2* cellsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellsize_);
  }
  _impl_.cellsize_ = cellsize;
  if (cellsize) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudLayoutNewData.CellSize)
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::release_cellsize() {
  
  ::message::ProtoBuffVector2* temp = _impl_.cellsize_;
  _impl_.cellsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::unsafe_arena_release_cellsize() {
  // @@protoc_insertion_point(field_release:message.UGCHudLayoutNewData.CellSize)
  
  ::message::ProtoBuffVector2* temp = _impl_.cellsize_;
  _impl_.cellsize_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::_internal_mutable_cellsize() {
  
  if (_impl_.cellsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.cellsize_ = p;
  }
  return _impl_.cellsize_;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::mutable_cellsize() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_cellsize();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLayoutNewData.CellSize)
  return _msg;
}
inline void UGCHudLayoutNewData::set_allocated_cellsize(::message::ProtoBuffVector2* cellsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellsize_);
  }
  if (cellsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellsize));
    if (message_arena != submessage_arena) {
      cellsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellsize, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cellsize_ = cellsize;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLayoutNewData.CellSize)
}

// .message.ProtoBuffVector2 Space = 6;
inline bool UGCHudLayoutNewData::_internal_has_space() const {
  return this != internal_default_instance() && _impl_.space_ != nullptr;
}
inline bool UGCHudLayoutNewData::has_space() const {
  return _internal_has_space();
}
inline const ::message::ProtoBuffVector2& UGCHudLayoutNewData::_internal_space() const {
  const ::message::ProtoBuffVector2* p = _impl_.space_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudLayoutNewData::space() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.Space)
  return _internal_space();
}
inline void UGCHudLayoutNewData::unsafe_arena_set_allocated_space(
    ::message::ProtoBuffVector2* space) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.space_);
  }
  _impl_.space_ = space;
  if (space) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudLayoutNewData.Space)
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::release_space() {
  
  ::message::ProtoBuffVector2* temp = _impl_.space_;
  _impl_.space_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::unsafe_arena_release_space() {
  // @@protoc_insertion_point(field_release:message.UGCHudLayoutNewData.Space)
  
  ::message::ProtoBuffVector2* temp = _impl_.space_;
  _impl_.space_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::_internal_mutable_space() {
  
  if (_impl_.space_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.space_ = p;
  }
  return _impl_.space_;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::mutable_space() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_space();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLayoutNewData.Space)
  return _msg;
}
inline void UGCHudLayoutNewData::set_allocated_space(::message::ProtoBuffVector2* space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.space_);
  }
  if (space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(space));
    if (message_arena != submessage_arena) {
      space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, space, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.space_ = space;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLayoutNewData.Space)
}

// int32 Constraint = 7;
inline void UGCHudLayoutNewData::clear_constraint() {
  _impl_.constraint_ = 0;
}
inline int32_t UGCHudLayoutNewData::_internal_constraint() const {
  return _impl_.constraint_;
}
inline int32_t UGCHudLayoutNewData::constraint() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.Constraint)
  return _internal_constraint();
}
inline void UGCHudLayoutNewData::_internal_set_constraint(int32_t value) {
  
  _impl_.constraint_ = value;
}
inline void UGCHudLayoutNewData::set_constraint(int32_t value) {
  _internal_set_constraint(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLayoutNewData.Constraint)
}

// .message.ProtoBuffVector2 OffsetUpDown = 8;
inline bool UGCHudLayoutNewData::_internal_has_offsetupdown() const {
  return this != internal_default_instance() && _impl_.offsetupdown_ != nullptr;
}
inline bool UGCHudLayoutNewData::has_offsetupdown() const {
  return _internal_has_offsetupdown();
}
inline const ::message::ProtoBuffVector2& UGCHudLayoutNewData::_internal_offsetupdown() const {
  const ::message::ProtoBuffVector2* p = _impl_.offsetupdown_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudLayoutNewData::offsetupdown() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.OffsetUpDown)
  return _internal_offsetupdown();
}
inline void UGCHudLayoutNewData::unsafe_arena_set_allocated_offsetupdown(
    ::message::ProtoBuffVector2* offsetupdown) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetupdown_);
  }
  _impl_.offsetupdown_ = offsetupdown;
  if (offsetupdown) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudLayoutNewData.OffsetUpDown)
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::release_offsetupdown() {
  
  ::message::ProtoBuffVector2* temp = _impl_.offsetupdown_;
  _impl_.offsetupdown_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::unsafe_arena_release_offsetupdown() {
  // @@protoc_insertion_point(field_release:message.UGCHudLayoutNewData.OffsetUpDown)
  
  ::message::ProtoBuffVector2* temp = _impl_.offsetupdown_;
  _impl_.offsetupdown_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::_internal_mutable_offsetupdown() {
  
  if (_impl_.offsetupdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.offsetupdown_ = p;
  }
  return _impl_.offsetupdown_;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::mutable_offsetupdown() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_offsetupdown();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLayoutNewData.OffsetUpDown)
  return _msg;
}
inline void UGCHudLayoutNewData::set_allocated_offsetupdown(::message::ProtoBuffVector2* offsetupdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetupdown_);
  }
  if (offsetupdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offsetupdown));
    if (message_arena != submessage_arena) {
      offsetupdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offsetupdown, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offsetupdown_ = offsetupdown;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLayoutNewData.OffsetUpDown)
}

// .message.ProtoBuffVector2 OffsetLeftRight = 9;
inline bool UGCHudLayoutNewData::_internal_has_offsetleftright() const {
  return this != internal_default_instance() && _impl_.offsetleftright_ != nullptr;
}
inline bool UGCHudLayoutNewData::has_offsetleftright() const {
  return _internal_has_offsetleftright();
}
inline const ::message::ProtoBuffVector2& UGCHudLayoutNewData::_internal_offsetleftright() const {
  const ::message::ProtoBuffVector2* p = _impl_.offsetleftright_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudLayoutNewData::offsetleftright() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.OffsetLeftRight)
  return _internal_offsetleftright();
}
inline void UGCHudLayoutNewData::unsafe_arena_set_allocated_offsetleftright(
    ::message::ProtoBuffVector2* offsetleftright) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetleftright_);
  }
  _impl_.offsetleftright_ = offsetleftright;
  if (offsetleftright) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudLayoutNewData.OffsetLeftRight)
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::release_offsetleftright() {
  
  ::message::ProtoBuffVector2* temp = _impl_.offsetleftright_;
  _impl_.offsetleftright_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::unsafe_arena_release_offsetleftright() {
  // @@protoc_insertion_point(field_release:message.UGCHudLayoutNewData.OffsetLeftRight)
  
  ::message::ProtoBuffVector2* temp = _impl_.offsetleftright_;
  _impl_.offsetleftright_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::_internal_mutable_offsetleftright() {
  
  if (_impl_.offsetleftright_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.offsetleftright_ = p;
  }
  return _impl_.offsetleftright_;
}
inline ::message::ProtoBuffVector2* UGCHudLayoutNewData::mutable_offsetleftright() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_offsetleftright();
  // @@protoc_insertion_point(field_mutable:message.UGCHudLayoutNewData.OffsetLeftRight)
  return _msg;
}
inline void UGCHudLayoutNewData::set_allocated_offsetleftright(::message::ProtoBuffVector2* offsetleftright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetleftright_);
  }
  if (offsetleftright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offsetleftright));
    if (message_arena != submessage_arena) {
      offsetleftright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offsetleftright, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offsetleftright_ = offsetleftright;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudLayoutNewData.OffsetLeftRight)
}

// int32 ConstraintCount = 10;
inline void UGCHudLayoutNewData::clear_constraintcount() {
  _impl_.constraintcount_ = 0;
}
inline int32_t UGCHudLayoutNewData::_internal_constraintcount() const {
  return _impl_.constraintcount_;
}
inline int32_t UGCHudLayoutNewData::constraintcount() const {
  // @@protoc_insertion_point(field_get:message.UGCHudLayoutNewData.ConstraintCount)
  return _internal_constraintcount();
}
inline void UGCHudLayoutNewData::_internal_set_constraintcount(int32_t value) {
  
  _impl_.constraintcount_ = value;
}
inline void UGCHudLayoutNewData::set_constraintcount(int32_t value) {
  _internal_set_constraintcount(value);
  // @@protoc_insertion_point(field_set:message.UGCHudLayoutNewData.ConstraintCount)
}

// -------------------------------------------------------------------

// UGCHudPanelData

// int32 Width = 1;
inline void UGCHudPanelData::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t UGCHudPanelData::_internal_width() const {
  return _impl_.width_;
}
inline int32_t UGCHudPanelData::width() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.Width)
  return _internal_width();
}
inline void UGCHudPanelData::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void UGCHudPanelData::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPanelData.Width)
}

// int32 Height = 2;
inline void UGCHudPanelData::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t UGCHudPanelData::_internal_height() const {
  return _impl_.height_;
}
inline int32_t UGCHudPanelData::height() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.Height)
  return _internal_height();
}
inline void UGCHudPanelData::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void UGCHudPanelData::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPanelData.Height)
}

// int32 Depth = 3;
inline void UGCHudPanelData::clear_depth() {
  _impl_.depth_ = 0;
}
inline int32_t UGCHudPanelData::_internal_depth() const {
  return _impl_.depth_;
}
inline int32_t UGCHudPanelData::depth() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.Depth)
  return _internal_depth();
}
inline void UGCHudPanelData::_internal_set_depth(int32_t value) {
  
  _impl_.depth_ = value;
}
inline void UGCHudPanelData::set_depth(int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPanelData.Depth)
}

// bool BgFill = 4;
inline void UGCHudPanelData::clear_bgfill() {
  _impl_.bgfill_ = false;
}
inline bool UGCHudPanelData::_internal_bgfill() const {
  return _impl_.bgfill_;
}
inline bool UGCHudPanelData::bgfill() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.BgFill)
  return _internal_bgfill();
}
inline void UGCHudPanelData::_internal_set_bgfill(bool value) {
  
  _impl_.bgfill_ = value;
}
inline void UGCHudPanelData::set_bgfill(bool value) {
  _internal_set_bgfill(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPanelData.BgFill)
}

// string BgName = 5;
inline void UGCHudPanelData::clear_bgname() {
  _impl_.bgname_.ClearToEmpty();
}
inline const std::string& UGCHudPanelData::bgname() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.BgName)
  return _internal_bgname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudPanelData::set_bgname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bgname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudPanelData.BgName)
}
inline std::string* UGCHudPanelData::mutable_bgname() {
  std::string* _s = _internal_mutable_bgname();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPanelData.BgName)
  return _s;
}
inline const std::string& UGCHudPanelData::_internal_bgname() const {
  return _impl_.bgname_.Get();
}
inline void UGCHudPanelData::_internal_set_bgname(const std::string& value) {
  
  _impl_.bgname_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudPanelData::_internal_mutable_bgname() {
  
  return _impl_.bgname_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudPanelData::release_bgname() {
  // @@protoc_insertion_point(field_release:message.UGCHudPanelData.BgName)
  return _impl_.bgname_.Release();
}
inline void UGCHudPanelData::set_allocated_bgname(std::string* bgname) {
  if (bgname != nullptr) {
    
  } else {
    
  }
  _impl_.bgname_.SetAllocated(bgname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bgname_.IsDefault()) {
    _impl_.bgname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPanelData.BgName)
}

// int32 BgColor = 6;
inline void UGCHudPanelData::clear_bgcolor() {
  _impl_.bgcolor_ = 0;
}
inline int32_t UGCHudPanelData::_internal_bgcolor() const {
  return _impl_.bgcolor_;
}
inline int32_t UGCHudPanelData::bgcolor() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.BgColor)
  return _internal_bgcolor();
}
inline void UGCHudPanelData::_internal_set_bgcolor(int32_t value) {
  
  _impl_.bgcolor_ = value;
}
inline void UGCHudPanelData::set_bgcolor(int32_t value) {
  _internal_set_bgcolor(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPanelData.BgColor)
}

// .message.ProtoBuffVector2 BgSizeDelta = 7;
inline bool UGCHudPanelData::_internal_has_bgsizedelta() const {
  return this != internal_default_instance() && _impl_.bgsizedelta_ != nullptr;
}
inline bool UGCHudPanelData::has_bgsizedelta() const {
  return _internal_has_bgsizedelta();
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::_internal_bgsizedelta() const {
  const ::message::ProtoBuffVector2* p = _impl_.bgsizedelta_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::bgsizedelta() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.BgSizeDelta)
  return _internal_bgsizedelta();
}
inline void UGCHudPanelData::unsafe_arena_set_allocated_bgsizedelta(
    ::message::ProtoBuffVector2* bgsizedelta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bgsizedelta_);
  }
  _impl_.bgsizedelta_ = bgsizedelta;
  if (bgsizedelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudPanelData.BgSizeDelta)
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::release_bgsizedelta() {
  
  ::message::ProtoBuffVector2* temp = _impl_.bgsizedelta_;
  _impl_.bgsizedelta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::unsafe_arena_release_bgsizedelta() {
  // @@protoc_insertion_point(field_release:message.UGCHudPanelData.BgSizeDelta)
  
  ::message::ProtoBuffVector2* temp = _impl_.bgsizedelta_;
  _impl_.bgsizedelta_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::_internal_mutable_bgsizedelta() {
  
  if (_impl_.bgsizedelta_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.bgsizedelta_ = p;
  }
  return _impl_.bgsizedelta_;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::mutable_bgsizedelta() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_bgsizedelta();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPanelData.BgSizeDelta)
  return _msg;
}
inline void UGCHudPanelData::set_allocated_bgsizedelta(::message::ProtoBuffVector2* bgsizedelta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bgsizedelta_);
  }
  if (bgsizedelta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bgsizedelta));
    if (message_arena != submessage_arena) {
      bgsizedelta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bgsizedelta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bgsizedelta_ = bgsizedelta;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPanelData.BgSizeDelta)
}

// int32 ClippingType = 8;
inline void UGCHudPanelData::clear_clippingtype() {
  _impl_.clippingtype_ = 0;
}
inline int32_t UGCHudPanelData::_internal_clippingtype() const {
  return _impl_.clippingtype_;
}
inline int32_t UGCHudPanelData::clippingtype() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.ClippingType)
  return _internal_clippingtype();
}
inline void UGCHudPanelData::_internal_set_clippingtype(int32_t value) {
  
  _impl_.clippingtype_ = value;
}
inline void UGCHudPanelData::set_clippingtype(int32_t value) {
  _internal_set_clippingtype(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPanelData.ClippingType)
}

// string MaskName = 9;
inline void UGCHudPanelData::clear_maskname() {
  _impl_.maskname_.ClearToEmpty();
}
inline const std::string& UGCHudPanelData::maskname() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.MaskName)
  return _internal_maskname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudPanelData::set_maskname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.maskname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudPanelData.MaskName)
}
inline std::string* UGCHudPanelData::mutable_maskname() {
  std::string* _s = _internal_mutable_maskname();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPanelData.MaskName)
  return _s;
}
inline const std::string& UGCHudPanelData::_internal_maskname() const {
  return _impl_.maskname_.Get();
}
inline void UGCHudPanelData::_internal_set_maskname(const std::string& value) {
  
  _impl_.maskname_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudPanelData::_internal_mutable_maskname() {
  
  return _impl_.maskname_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudPanelData::release_maskname() {
  // @@protoc_insertion_point(field_release:message.UGCHudPanelData.MaskName)
  return _impl_.maskname_.Release();
}
inline void UGCHudPanelData::set_allocated_maskname(std::string* maskname) {
  if (maskname != nullptr) {
    
  } else {
    
  }
  _impl_.maskname_.SetAllocated(maskname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.maskname_.IsDefault()) {
    _impl_.maskname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPanelData.MaskName)
}

// .message.ProtoBuffVector2 Softness = 10;
inline bool UGCHudPanelData::_internal_has_softness() const {
  return this != internal_default_instance() && _impl_.softness_ != nullptr;
}
inline bool UGCHudPanelData::has_softness() const {
  return _internal_has_softness();
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::_internal_softness() const {
  const ::message::ProtoBuffVector2* p = _impl_.softness_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::softness() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.Softness)
  return _internal_softness();
}
inline void UGCHudPanelData::unsafe_arena_set_allocated_softness(
    ::message::ProtoBuffVector2* softness) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.softness_);
  }
  _impl_.softness_ = softness;
  if (softness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudPanelData.Softness)
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::release_softness() {
  
  ::message::ProtoBuffVector2* temp = _impl_.softness_;
  _impl_.softness_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::unsafe_arena_release_softness() {
  // @@protoc_insertion_point(field_release:message.UGCHudPanelData.Softness)
  
  ::message::ProtoBuffVector2* temp = _impl_.softness_;
  _impl_.softness_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::_internal_mutable_softness() {
  
  if (_impl_.softness_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.softness_ = p;
  }
  return _impl_.softness_;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::mutable_softness() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_softness();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPanelData.Softness)
  return _msg;
}
inline void UGCHudPanelData::set_allocated_softness(::message::ProtoBuffVector2* softness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.softness_);
  }
  if (softness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softness));
    if (message_arena != submessage_arena) {
      softness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softness, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.softness_ = softness;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPanelData.Softness)
}

// .message.ProtoBuffVector2 AnchorMin = 11;
inline bool UGCHudPanelData::_internal_has_anchormin() const {
  return this != internal_default_instance() && _impl_.anchormin_ != nullptr;
}
inline bool UGCHudPanelData::has_anchormin() const {
  return _internal_has_anchormin();
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::_internal_anchormin() const {
  const ::message::ProtoBuffVector2* p = _impl_.anchormin_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::anchormin() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.AnchorMin)
  return _internal_anchormin();
}
inline void UGCHudPanelData::unsafe_arena_set_allocated_anchormin(
    ::message::ProtoBuffVector2* anchormin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchormin_);
  }
  _impl_.anchormin_ = anchormin;
  if (anchormin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudPanelData.AnchorMin)
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::release_anchormin() {
  
  ::message::ProtoBuffVector2* temp = _impl_.anchormin_;
  _impl_.anchormin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::unsafe_arena_release_anchormin() {
  // @@protoc_insertion_point(field_release:message.UGCHudPanelData.AnchorMin)
  
  ::message::ProtoBuffVector2* temp = _impl_.anchormin_;
  _impl_.anchormin_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::_internal_mutable_anchormin() {
  
  if (_impl_.anchormin_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.anchormin_ = p;
  }
  return _impl_.anchormin_;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::mutable_anchormin() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_anchormin();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPanelData.AnchorMin)
  return _msg;
}
inline void UGCHudPanelData::set_allocated_anchormin(::message::ProtoBuffVector2* anchormin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchormin_);
  }
  if (anchormin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchormin));
    if (message_arena != submessage_arena) {
      anchormin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchormin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.anchormin_ = anchormin;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPanelData.AnchorMin)
}

// .message.ProtoBuffVector2 AnchorMax = 12;
inline bool UGCHudPanelData::_internal_has_anchormax() const {
  return this != internal_default_instance() && _impl_.anchormax_ != nullptr;
}
inline bool UGCHudPanelData::has_anchormax() const {
  return _internal_has_anchormax();
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::_internal_anchormax() const {
  const ::message::ProtoBuffVector2* p = _impl_.anchormax_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::anchormax() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.AnchorMax)
  return _internal_anchormax();
}
inline void UGCHudPanelData::unsafe_arena_set_allocated_anchormax(
    ::message::ProtoBuffVector2* anchormax) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchormax_);
  }
  _impl_.anchormax_ = anchormax;
  if (anchormax) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudPanelData.AnchorMax)
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::release_anchormax() {
  
  ::message::ProtoBuffVector2* temp = _impl_.anchormax_;
  _impl_.anchormax_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::unsafe_arena_release_anchormax() {
  // @@protoc_insertion_point(field_release:message.UGCHudPanelData.AnchorMax)
  
  ::message::ProtoBuffVector2* temp = _impl_.anchormax_;
  _impl_.anchormax_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::_internal_mutable_anchormax() {
  
  if (_impl_.anchormax_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.anchormax_ = p;
  }
  return _impl_.anchormax_;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::mutable_anchormax() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_anchormax();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPanelData.AnchorMax)
  return _msg;
}
inline void UGCHudPanelData::set_allocated_anchormax(::message::ProtoBuffVector2* anchormax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchormax_);
  }
  if (anchormax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchormax));
    if (message_arena != submessage_arena) {
      anchormax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchormax, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.anchormax_ = anchormax;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPanelData.AnchorMax)
}

// .message.ProtoBuffVector2 SizeDelta = 13;
inline bool UGCHudPanelData::_internal_has_sizedelta() const {
  return this != internal_default_instance() && _impl_.sizedelta_ != nullptr;
}
inline bool UGCHudPanelData::has_sizedelta() const {
  return _internal_has_sizedelta();
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::_internal_sizedelta() const {
  const ::message::ProtoBuffVector2* p = _impl_.sizedelta_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::sizedelta() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.SizeDelta)
  return _internal_sizedelta();
}
inline void UGCHudPanelData::unsafe_arena_set_allocated_sizedelta(
    ::message::ProtoBuffVector2* sizedelta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizedelta_);
  }
  _impl_.sizedelta_ = sizedelta;
  if (sizedelta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudPanelData.SizeDelta)
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::release_sizedelta() {
  
  ::message::ProtoBuffVector2* temp = _impl_.sizedelta_;
  _impl_.sizedelta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::unsafe_arena_release_sizedelta() {
  // @@protoc_insertion_point(field_release:message.UGCHudPanelData.SizeDelta)
  
  ::message::ProtoBuffVector2* temp = _impl_.sizedelta_;
  _impl_.sizedelta_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::_internal_mutable_sizedelta() {
  
  if (_impl_.sizedelta_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.sizedelta_ = p;
  }
  return _impl_.sizedelta_;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::mutable_sizedelta() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_sizedelta();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPanelData.SizeDelta)
  return _msg;
}
inline void UGCHudPanelData::set_allocated_sizedelta(::message::ProtoBuffVector2* sizedelta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizedelta_);
  }
  if (sizedelta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizedelta));
    if (message_arena != submessage_arena) {
      sizedelta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizedelta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sizedelta_ = sizedelta;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPanelData.SizeDelta)
}

// .message.ProtoBuffVector2 Pivot = 14;
inline bool UGCHudPanelData::_internal_has_pivot() const {
  return this != internal_default_instance() && _impl_.pivot_ != nullptr;
}
inline bool UGCHudPanelData::has_pivot() const {
  return _internal_has_pivot();
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::_internal_pivot() const {
  const ::message::ProtoBuffVector2* p = _impl_.pivot_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudPanelData::pivot() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.Pivot)
  return _internal_pivot();
}
inline void UGCHudPanelData::unsafe_arena_set_allocated_pivot(
    ::message::ProtoBuffVector2* pivot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pivot_);
  }
  _impl_.pivot_ = pivot;
  if (pivot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudPanelData.Pivot)
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::release_pivot() {
  
  ::message::ProtoBuffVector2* temp = _impl_.pivot_;
  _impl_.pivot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::unsafe_arena_release_pivot() {
  // @@protoc_insertion_point(field_release:message.UGCHudPanelData.Pivot)
  
  ::message::ProtoBuffVector2* temp = _impl_.pivot_;
  _impl_.pivot_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::_internal_mutable_pivot() {
  
  if (_impl_.pivot_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.pivot_ = p;
  }
  return _impl_.pivot_;
}
inline ::message::ProtoBuffVector2* UGCHudPanelData::mutable_pivot() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_pivot();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPanelData.Pivot)
  return _msg;
}
inline void UGCHudPanelData::set_allocated_pivot(::message::ProtoBuffVector2* pivot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pivot_);
  }
  if (pivot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pivot));
    if (message_arena != submessage_arena) {
      pivot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pivot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pivot_ = pivot;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPanelData.Pivot)
}

// float BgAlpha = 15;
inline void UGCHudPanelData::clear_bgalpha() {
  _impl_.bgalpha_ = 0;
}
inline float UGCHudPanelData::_internal_bgalpha() const {
  return _impl_.bgalpha_;
}
inline float UGCHudPanelData::bgalpha() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPanelData.BgAlpha)
  return _internal_bgalpha();
}
inline void UGCHudPanelData::_internal_set_bgalpha(float value) {
  
  _impl_.bgalpha_ = value;
}
inline void UGCHudPanelData::set_bgalpha(float value) {
  _internal_set_bgalpha(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPanelData.BgAlpha)
}

// -------------------------------------------------------------------

// UGCHudScrollViewData

// .message.UGCHudPanelData Panel = 1;
inline bool UGCHudScrollViewData::_internal_has_panel() const {
  return this != internal_default_instance() && _impl_.panel_ != nullptr;
}
inline bool UGCHudScrollViewData::has_panel() const {
  return _internal_has_panel();
}
inline void UGCHudScrollViewData::clear_panel() {
  if (GetArenaForAllocation() == nullptr && _impl_.panel_ != nullptr) {
    delete _impl_.panel_;
  }
  _impl_.panel_ = nullptr;
}
inline const ::message::UGCHudPanelData& UGCHudScrollViewData::_internal_panel() const {
  const ::message::UGCHudPanelData* p = _impl_.panel_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudPanelData&>(
      ::message::_UGCHudPanelData_default_instance_);
}
inline const ::message::UGCHudPanelData& UGCHudScrollViewData::panel() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.Panel)
  return _internal_panel();
}
inline void UGCHudScrollViewData::unsafe_arena_set_allocated_panel(
    ::message::UGCHudPanelData* panel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.panel_);
  }
  _impl_.panel_ = panel;
  if (panel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudScrollViewData.Panel)
}
inline ::message::UGCHudPanelData* UGCHudScrollViewData::release_panel() {
  
  ::message::UGCHudPanelData* temp = _impl_.panel_;
  _impl_.panel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudPanelData* UGCHudScrollViewData::unsafe_arena_release_panel() {
  // @@protoc_insertion_point(field_release:message.UGCHudScrollViewData.Panel)
  
  ::message::UGCHudPanelData* temp = _impl_.panel_;
  _impl_.panel_ = nullptr;
  return temp;
}
inline ::message::UGCHudPanelData* UGCHudScrollViewData::_internal_mutable_panel() {
  
  if (_impl_.panel_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudPanelData>(GetArenaForAllocation());
    _impl_.panel_ = p;
  }
  return _impl_.panel_;
}
inline ::message::UGCHudPanelData* UGCHudScrollViewData::mutable_panel() {
  ::message::UGCHudPanelData* _msg = _internal_mutable_panel();
  // @@protoc_insertion_point(field_mutable:message.UGCHudScrollViewData.Panel)
  return _msg;
}
inline void UGCHudScrollViewData::set_allocated_panel(::message::UGCHudPanelData* panel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.panel_;
  }
  if (panel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(panel);
    if (message_arena != submessage_arena) {
      panel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.panel_ = panel;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudScrollViewData.Panel)
}

// int32 ContentOrigin = 2;
inline void UGCHudScrollViewData::clear_contentorigin() {
  _impl_.contentorigin_ = 0;
}
inline int32_t UGCHudScrollViewData::_internal_contentorigin() const {
  return _impl_.contentorigin_;
}
inline int32_t UGCHudScrollViewData::contentorigin() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.ContentOrigin)
  return _internal_contentorigin();
}
inline void UGCHudScrollViewData::_internal_set_contentorigin(int32_t value) {
  
  _impl_.contentorigin_ = value;
}
inline void UGCHudScrollViewData::set_contentorigin(int32_t value) {
  _internal_set_contentorigin(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.ContentOrigin)
}

// int32 ScrollDirection = 3;
inline void UGCHudScrollViewData::clear_scrolldirection() {
  _impl_.scrolldirection_ = 0;
}
inline int32_t UGCHudScrollViewData::_internal_scrolldirection() const {
  return _impl_.scrolldirection_;
}
inline int32_t UGCHudScrollViewData::scrolldirection() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.ScrollDirection)
  return _internal_scrolldirection();
}
inline void UGCHudScrollViewData::_internal_set_scrolldirection(int32_t value) {
  
  _impl_.scrolldirection_ = value;
}
inline void UGCHudScrollViewData::set_scrolldirection(int32_t value) {
  _internal_set_scrolldirection(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.ScrollDirection)
}

// .message.ProtoBuffVector2 CustomXY = 4;
inline bool UGCHudScrollViewData::_internal_has_customxy() const {
  return this != internal_default_instance() && _impl_.customxy_ != nullptr;
}
inline bool UGCHudScrollViewData::has_customxy() const {
  return _internal_has_customxy();
}
inline const ::message::ProtoBuffVector2& UGCHudScrollViewData::_internal_customxy() const {
  const ::message::ProtoBuffVector2* p = _impl_.customxy_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudScrollViewData::customxy() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.CustomXY)
  return _internal_customxy();
}
inline void UGCHudScrollViewData::unsafe_arena_set_allocated_customxy(
    ::message::ProtoBuffVector2* customxy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customxy_);
  }
  _impl_.customxy_ = customxy;
  if (customxy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudScrollViewData.CustomXY)
}
inline ::message::ProtoBuffVector2* UGCHudScrollViewData::release_customxy() {
  
  ::message::ProtoBuffVector2* temp = _impl_.customxy_;
  _impl_.customxy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudScrollViewData::unsafe_arena_release_customxy() {
  // @@protoc_insertion_point(field_release:message.UGCHudScrollViewData.CustomXY)
  
  ::message::ProtoBuffVector2* temp = _impl_.customxy_;
  _impl_.customxy_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudScrollViewData::_internal_mutable_customxy() {
  
  if (_impl_.customxy_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.customxy_ = p;
  }
  return _impl_.customxy_;
}
inline ::message::ProtoBuffVector2* UGCHudScrollViewData::mutable_customxy() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_customxy();
  // @@protoc_insertion_point(field_mutable:message.UGCHudScrollViewData.CustomXY)
  return _msg;
}
inline void UGCHudScrollViewData::set_allocated_customxy(::message::ProtoBuffVector2* customxy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customxy_);
  }
  if (customxy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customxy));
    if (message_arena != submessage_arena) {
      customxy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customxy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.customxy_ = customxy;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudScrollViewData.CustomXY)
}

// int32 DragEffect = 5;
inline void UGCHudScrollViewData::clear_drageffect() {
  _impl_.drageffect_ = 0;
}
inline int32_t UGCHudScrollViewData::_internal_drageffect() const {
  return _impl_.drageffect_;
}
inline int32_t UGCHudScrollViewData::drageffect() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.DragEffect)
  return _internal_drageffect();
}
inline void UGCHudScrollViewData::_internal_set_drageffect(int32_t value) {
  
  _impl_.drageffect_ = value;
}
inline void UGCHudScrollViewData::set_drageffect(int32_t value) {
  _internal_set_drageffect(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.DragEffect)
}

// float ScrollWheelFactor = 6;
inline void UGCHudScrollViewData::clear_scrollwheelfactor() {
  _impl_.scrollwheelfactor_ = 0;
}
inline float UGCHudScrollViewData::_internal_scrollwheelfactor() const {
  return _impl_.scrollwheelfactor_;
}
inline float UGCHudScrollViewData::scrollwheelfactor() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.ScrollWheelFactor)
  return _internal_scrollwheelfactor();
}
inline void UGCHudScrollViewData::_internal_set_scrollwheelfactor(float value) {
  
  _impl_.scrollwheelfactor_ = value;
}
inline void UGCHudScrollViewData::set_scrollwheelfactor(float value) {
  _internal_set_scrollwheelfactor(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.ScrollWheelFactor)
}

// float MomentumAmount = 7;
inline void UGCHudScrollViewData::clear_momentumamount() {
  _impl_.momentumamount_ = 0;
}
inline float UGCHudScrollViewData::_internal_momentumamount() const {
  return _impl_.momentumamount_;
}
inline float UGCHudScrollViewData::momentumamount() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.MomentumAmount)
  return _internal_momentumamount();
}
inline void UGCHudScrollViewData::_internal_set_momentumamount(float value) {
  
  _impl_.momentumamount_ = value;
}
inline void UGCHudScrollViewData::set_momentumamount(float value) {
  _internal_set_momentumamount(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.MomentumAmount)
}

// bool RestrictWithinPanel = 8;
inline void UGCHudScrollViewData::clear_restrictwithinpanel() {
  _impl_.restrictwithinpanel_ = false;
}
inline bool UGCHudScrollViewData::_internal_restrictwithinpanel() const {
  return _impl_.restrictwithinpanel_;
}
inline bool UGCHudScrollViewData::restrictwithinpanel() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.RestrictWithinPanel)
  return _internal_restrictwithinpanel();
}
inline void UGCHudScrollViewData::_internal_set_restrictwithinpanel(bool value) {
  
  _impl_.restrictwithinpanel_ = value;
}
inline void UGCHudScrollViewData::set_restrictwithinpanel(bool value) {
  _internal_set_restrictwithinpanel(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.RestrictWithinPanel)
}

// bool SmoothDragStart = 9;
inline void UGCHudScrollViewData::clear_smoothdragstart() {
  _impl_.smoothdragstart_ = false;
}
inline bool UGCHudScrollViewData::_internal_smoothdragstart() const {
  return _impl_.smoothdragstart_;
}
inline bool UGCHudScrollViewData::smoothdragstart() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.SmoothDragStart)
  return _internal_smoothdragstart();
}
inline void UGCHudScrollViewData::_internal_set_smoothdragstart(bool value) {
  
  _impl_.smoothdragstart_ = value;
}
inline void UGCHudScrollViewData::set_smoothdragstart(bool value) {
  _internal_set_smoothdragstart(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.SmoothDragStart)
}

// bool CancelDragIfFits = 10;
inline void UGCHudScrollViewData::clear_canceldragiffits() {
  _impl_.canceldragiffits_ = false;
}
inline bool UGCHudScrollViewData::_internal_canceldragiffits() const {
  return _impl_.canceldragiffits_;
}
inline bool UGCHudScrollViewData::canceldragiffits() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.CancelDragIfFits)
  return _internal_canceldragiffits();
}
inline void UGCHudScrollViewData::_internal_set_canceldragiffits(bool value) {
  
  _impl_.canceldragiffits_ = value;
}
inline void UGCHudScrollViewData::set_canceldragiffits(bool value) {
  _internal_set_canceldragiffits(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.CancelDragIfFits)
}

// int32 VerticalBar = 11;
inline void UGCHudScrollViewData::clear_verticalbar() {
  _impl_.verticalbar_ = 0;
}
inline int32_t UGCHudScrollViewData::_internal_verticalbar() const {
  return _impl_.verticalbar_;
}
inline int32_t UGCHudScrollViewData::verticalbar() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.VerticalBar)
  return _internal_verticalbar();
}
inline void UGCHudScrollViewData::_internal_set_verticalbar(int32_t value) {
  
  _impl_.verticalbar_ = value;
}
inline void UGCHudScrollViewData::set_verticalbar(int32_t value) {
  _internal_set_verticalbar(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.VerticalBar)
}

// int32 HorizontalBar = 12;
inline void UGCHudScrollViewData::clear_horizontalbar() {
  _impl_.horizontalbar_ = 0;
}
inline int32_t UGCHudScrollViewData::_internal_horizontalbar() const {
  return _impl_.horizontalbar_;
}
inline int32_t UGCHudScrollViewData::horizontalbar() const {
  // @@protoc_insertion_point(field_get:message.UGCHudScrollViewData.HorizontalBar)
  return _internal_horizontalbar();
}
inline void UGCHudScrollViewData::_internal_set_horizontalbar(int32_t value) {
  
  _impl_.horizontalbar_ = value;
}
inline void UGCHudScrollViewData::set_horizontalbar(int32_t value) {
  _internal_set_horizontalbar(value);
  // @@protoc_insertion_point(field_set:message.UGCHudScrollViewData.HorizontalBar)
}

// -------------------------------------------------------------------

// UGCHud3DContainerData

// .message.UGCHudWidgetData Widget = 1;
inline bool UGCHud3DContainerData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHud3DContainerData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHud3DContainerData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHud3DContainerData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHud3DContainerData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHud3DContainerData.Widget)
  return _internal_widget();
}
inline void UGCHud3DContainerData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHud3DContainerData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHud3DContainerData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHud3DContainerData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHud3DContainerData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHud3DContainerData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHud3DContainerData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHud3DContainerData.Widget)
  return _msg;
}
inline void UGCHud3DContainerData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHud3DContainerData.Widget)
}

// string ResourceID = 2;
inline void UGCHud3DContainerData::clear_resourceid() {
  _impl_.resourceid_.ClearToEmpty();
}
inline const std::string& UGCHud3DContainerData::resourceid() const {
  // @@protoc_insertion_point(field_get:message.UGCHud3DContainerData.ResourceID)
  return _internal_resourceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHud3DContainerData::set_resourceid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resourceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHud3DContainerData.ResourceID)
}
inline std::string* UGCHud3DContainerData::mutable_resourceid() {
  std::string* _s = _internal_mutable_resourceid();
  // @@protoc_insertion_point(field_mutable:message.UGCHud3DContainerData.ResourceID)
  return _s;
}
inline const std::string& UGCHud3DContainerData::_internal_resourceid() const {
  return _impl_.resourceid_.Get();
}
inline void UGCHud3DContainerData::_internal_set_resourceid(const std::string& value) {
  
  _impl_.resourceid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHud3DContainerData::_internal_mutable_resourceid() {
  
  return _impl_.resourceid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHud3DContainerData::release_resourceid() {
  // @@protoc_insertion_point(field_release:message.UGCHud3DContainerData.ResourceID)
  return _impl_.resourceid_.Release();
}
inline void UGCHud3DContainerData::set_allocated_resourceid(std::string* resourceid) {
  if (resourceid != nullptr) {
    
  } else {
    
  }
  _impl_.resourceid_.SetAllocated(resourceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resourceid_.IsDefault()) {
    _impl_.resourceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHud3DContainerData.ResourceID)
}

// .message.ProtoBuffVector3 Scale = 3;
inline bool UGCHud3DContainerData::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool UGCHud3DContainerData::has_scale() const {
  return _internal_has_scale();
}
inline const ::message::ProtoBuffVector3& UGCHud3DContainerData::_internal_scale() const {
  const ::message::ProtoBuffVector3* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCHud3DContainerData::scale() const {
  // @@protoc_insertion_point(field_get:message.UGCHud3DContainerData.Scale)
  return _internal_scale();
}
inline void UGCHud3DContainerData::unsafe_arena_set_allocated_scale(
    ::message::ProtoBuffVector3* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHud3DContainerData.Scale)
}
inline ::message::ProtoBuffVector3* UGCHud3DContainerData::release_scale() {
  
  ::message::ProtoBuffVector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHud3DContainerData::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:message.UGCHud3DContainerData.Scale)
  
  ::message::ProtoBuffVector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHud3DContainerData::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::message::ProtoBuffVector3* UGCHud3DContainerData::mutable_scale() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:message.UGCHud3DContainerData.Scale)
  return _msg;
}
inline void UGCHud3DContainerData::set_allocated_scale(::message::ProtoBuffVector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale));
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHud3DContainerData.Scale)
}

// .message.ProtoBuffVector3 Rotation = 4;
inline bool UGCHud3DContainerData::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool UGCHud3DContainerData::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::message::ProtoBuffVector3& UGCHud3DContainerData::_internal_rotation() const {
  const ::message::ProtoBuffVector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCHud3DContainerData::rotation() const {
  // @@protoc_insertion_point(field_get:message.UGCHud3DContainerData.Rotation)
  return _internal_rotation();
}
inline void UGCHud3DContainerData::unsafe_arena_set_allocated_rotation(
    ::message::ProtoBuffVector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHud3DContainerData.Rotation)
}
inline ::message::ProtoBuffVector3* UGCHud3DContainerData::release_rotation() {
  
  ::message::ProtoBuffVector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHud3DContainerData::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:message.UGCHud3DContainerData.Rotation)
  
  ::message::ProtoBuffVector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHud3DContainerData::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::message::ProtoBuffVector3* UGCHud3DContainerData::mutable_rotation() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:message.UGCHud3DContainerData.Rotation)
  return _msg;
}
inline void UGCHud3DContainerData::set_allocated_rotation(::message::ProtoBuffVector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHud3DContainerData.Rotation)
}

// -------------------------------------------------------------------

// UGCHudTextureData

// .message.UGCHudWidgetData Widget = 1;
inline bool UGCHudTextureData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHudTextureData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHudTextureData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHudTextureData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHudTextureData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.Widget)
  return _internal_widget();
}
inline void UGCHudTextureData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudTextureData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHudTextureData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudTextureData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHudTextureData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudTextureData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHudTextureData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTextureData.Widget)
  return _msg;
}
inline void UGCHudTextureData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTextureData.Widget)
}

// string TextureName = 2;
inline void UGCHudTextureData::clear_texturename() {
  _impl_.texturename_.ClearToEmpty();
}
inline const std::string& UGCHudTextureData::texturename() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.TextureName)
  return _internal_texturename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudTextureData::set_texturename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.texturename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.TextureName)
}
inline std::string* UGCHudTextureData::mutable_texturename() {
  std::string* _s = _internal_mutable_texturename();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTextureData.TextureName)
  return _s;
}
inline const std::string& UGCHudTextureData::_internal_texturename() const {
  return _impl_.texturename_.Get();
}
inline void UGCHudTextureData::_internal_set_texturename(const std::string& value) {
  
  _impl_.texturename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudTextureData::_internal_mutable_texturename() {
  
  return _impl_.texturename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudTextureData::release_texturename() {
  // @@protoc_insertion_point(field_release:message.UGCHudTextureData.TextureName)
  return _impl_.texturename_.Release();
}
inline void UGCHudTextureData::set_allocated_texturename(std::string* texturename) {
  if (texturename != nullptr) {
    
  } else {
    
  }
  _impl_.texturename_.SetAllocated(texturename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.texturename_.IsDefault()) {
    _impl_.texturename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTextureData.TextureName)
}

// string ShaderName = 3;
inline void UGCHudTextureData::clear_shadername() {
  _impl_.shadername_.ClearToEmpty();
}
inline const std::string& UGCHudTextureData::shadername() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.ShaderName)
  return _internal_shadername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudTextureData::set_shadername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shadername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.ShaderName)
}
inline std::string* UGCHudTextureData::mutable_shadername() {
  std::string* _s = _internal_mutable_shadername();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTextureData.ShaderName)
  return _s;
}
inline const std::string& UGCHudTextureData::_internal_shadername() const {
  return _impl_.shadername_.Get();
}
inline void UGCHudTextureData::_internal_set_shadername(const std::string& value) {
  
  _impl_.shadername_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudTextureData::_internal_mutable_shadername() {
  
  return _impl_.shadername_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudTextureData::release_shadername() {
  // @@protoc_insertion_point(field_release:message.UGCHudTextureData.ShaderName)
  return _impl_.shadername_.Release();
}
inline void UGCHudTextureData::set_allocated_shadername(std::string* shadername) {
  if (shadername != nullptr) {
    
  } else {
    
  }
  _impl_.shadername_.SetAllocated(shadername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shadername_.IsDefault()) {
    _impl_.shadername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTextureData.ShaderName)
}

// .message.ProtoBuffVector2 UVRectXY = 4;
inline bool UGCHudTextureData::_internal_has_uvrectxy() const {
  return this != internal_default_instance() && _impl_.uvrectxy_ != nullptr;
}
inline bool UGCHudTextureData::has_uvrectxy() const {
  return _internal_has_uvrectxy();
}
inline const ::message::ProtoBuffVector2& UGCHudTextureData::_internal_uvrectxy() const {
  const ::message::ProtoBuffVector2* p = _impl_.uvrectxy_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudTextureData::uvrectxy() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.UVRectXY)
  return _internal_uvrectxy();
}
inline void UGCHudTextureData::unsafe_arena_set_allocated_uvrectxy(
    ::message::ProtoBuffVector2* uvrectxy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uvrectxy_);
  }
  _impl_.uvrectxy_ = uvrectxy;
  if (uvrectxy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudTextureData.UVRectXY)
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::release_uvrectxy() {
  
  ::message::ProtoBuffVector2* temp = _impl_.uvrectxy_;
  _impl_.uvrectxy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::unsafe_arena_release_uvrectxy() {
  // @@protoc_insertion_point(field_release:message.UGCHudTextureData.UVRectXY)
  
  ::message::ProtoBuffVector2* temp = _impl_.uvrectxy_;
  _impl_.uvrectxy_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::_internal_mutable_uvrectxy() {
  
  if (_impl_.uvrectxy_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.uvrectxy_ = p;
  }
  return _impl_.uvrectxy_;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::mutable_uvrectxy() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_uvrectxy();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTextureData.UVRectXY)
  return _msg;
}
inline void UGCHudTextureData::set_allocated_uvrectxy(::message::ProtoBuffVector2* uvrectxy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uvrectxy_);
  }
  if (uvrectxy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uvrectxy));
    if (message_arena != submessage_arena) {
      uvrectxy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uvrectxy, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uvrectxy_ = uvrectxy;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTextureData.UVRectXY)
}

// .message.ProtoBuffVector2 UVRectWH = 5;
inline bool UGCHudTextureData::_internal_has_uvrectwh() const {
  return this != internal_default_instance() && _impl_.uvrectwh_ != nullptr;
}
inline bool UGCHudTextureData::has_uvrectwh() const {
  return _internal_has_uvrectwh();
}
inline const ::message::ProtoBuffVector2& UGCHudTextureData::_internal_uvrectwh() const {
  const ::message::ProtoBuffVector2* p = _impl_.uvrectwh_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudTextureData::uvrectwh() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.UVRectWH)
  return _internal_uvrectwh();
}
inline void UGCHudTextureData::unsafe_arena_set_allocated_uvrectwh(
    ::message::ProtoBuffVector2* uvrectwh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uvrectwh_);
  }
  _impl_.uvrectwh_ = uvrectwh;
  if (uvrectwh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudTextureData.UVRectWH)
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::release_uvrectwh() {
  
  ::message::ProtoBuffVector2* temp = _impl_.uvrectwh_;
  _impl_.uvrectwh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::unsafe_arena_release_uvrectwh() {
  // @@protoc_insertion_point(field_release:message.UGCHudTextureData.UVRectWH)
  
  ::message::ProtoBuffVector2* temp = _impl_.uvrectwh_;
  _impl_.uvrectwh_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::_internal_mutable_uvrectwh() {
  
  if (_impl_.uvrectwh_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.uvrectwh_ = p;
  }
  return _impl_.uvrectwh_;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::mutable_uvrectwh() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_uvrectwh();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTextureData.UVRectWH)
  return _msg;
}
inline void UGCHudTextureData::set_allocated_uvrectwh(::message::ProtoBuffVector2* uvrectwh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uvrectwh_);
  }
  if (uvrectwh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uvrectwh));
    if (message_arena != submessage_arena) {
      uvrectwh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uvrectwh, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uvrectwh_ = uvrectwh;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTextureData.UVRectWH)
}

// int32 FillType = 6;
inline void UGCHudTextureData::clear_filltype() {
  _impl_.filltype_ = 0;
}
inline int32_t UGCHudTextureData::_internal_filltype() const {
  return _impl_.filltype_;
}
inline int32_t UGCHudTextureData::filltype() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.FillType)
  return _internal_filltype();
}
inline void UGCHudTextureData::_internal_set_filltype(int32_t value) {
  
  _impl_.filltype_ = value;
}
inline void UGCHudTextureData::set_filltype(int32_t value) {
  _internal_set_filltype(value);
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.FillType)
}

// .message.ProtoBuffVector2 BorderLR = 7;
inline bool UGCHudTextureData::_internal_has_borderlr() const {
  return this != internal_default_instance() && _impl_.borderlr_ != nullptr;
}
inline bool UGCHudTextureData::has_borderlr() const {
  return _internal_has_borderlr();
}
inline const ::message::ProtoBuffVector2& UGCHudTextureData::_internal_borderlr() const {
  const ::message::ProtoBuffVector2* p = _impl_.borderlr_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudTextureData::borderlr() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.BorderLR)
  return _internal_borderlr();
}
inline void UGCHudTextureData::unsafe_arena_set_allocated_borderlr(
    ::message::ProtoBuffVector2* borderlr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.borderlr_);
  }
  _impl_.borderlr_ = borderlr;
  if (borderlr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudTextureData.BorderLR)
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::release_borderlr() {
  
  ::message::ProtoBuffVector2* temp = _impl_.borderlr_;
  _impl_.borderlr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::unsafe_arena_release_borderlr() {
  // @@protoc_insertion_point(field_release:message.UGCHudTextureData.BorderLR)
  
  ::message::ProtoBuffVector2* temp = _impl_.borderlr_;
  _impl_.borderlr_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::_internal_mutable_borderlr() {
  
  if (_impl_.borderlr_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.borderlr_ = p;
  }
  return _impl_.borderlr_;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::mutable_borderlr() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_borderlr();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTextureData.BorderLR)
  return _msg;
}
inline void UGCHudTextureData::set_allocated_borderlr(::message::ProtoBuffVector2* borderlr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.borderlr_);
  }
  if (borderlr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(borderlr));
    if (message_arena != submessage_arena) {
      borderlr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, borderlr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.borderlr_ = borderlr;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTextureData.BorderLR)
}

// .message.ProtoBuffVector2 BorderTB = 8;
inline bool UGCHudTextureData::_internal_has_bordertb() const {
  return this != internal_default_instance() && _impl_.bordertb_ != nullptr;
}
inline bool UGCHudTextureData::has_bordertb() const {
  return _internal_has_bordertb();
}
inline const ::message::ProtoBuffVector2& UGCHudTextureData::_internal_bordertb() const {
  const ::message::ProtoBuffVector2* p = _impl_.bordertb_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector2&>(
      ::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCHudTextureData::bordertb() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.BorderTB)
  return _internal_bordertb();
}
inline void UGCHudTextureData::unsafe_arena_set_allocated_bordertb(
    ::message::ProtoBuffVector2* bordertb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bordertb_);
  }
  _impl_.bordertb_ = bordertb;
  if (bordertb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudTextureData.BorderTB)
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::release_bordertb() {
  
  ::message::ProtoBuffVector2* temp = _impl_.bordertb_;
  _impl_.bordertb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::unsafe_arena_release_bordertb() {
  // @@protoc_insertion_point(field_release:message.UGCHudTextureData.BorderTB)
  
  ::message::ProtoBuffVector2* temp = _impl_.bordertb_;
  _impl_.bordertb_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::_internal_mutable_bordertb() {
  
  if (_impl_.bordertb_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector2>(GetArenaForAllocation());
    _impl_.bordertb_ = p;
  }
  return _impl_.bordertb_;
}
inline ::message::ProtoBuffVector2* UGCHudTextureData::mutable_bordertb() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_bordertb();
  // @@protoc_insertion_point(field_mutable:message.UGCHudTextureData.BorderTB)
  return _msg;
}
inline void UGCHudTextureData::set_allocated_bordertb(::message::ProtoBuffVector2* bordertb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bordertb_);
  }
  if (bordertb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bordertb));
    if (message_arena != submessage_arena) {
      bordertb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bordertb, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bordertb_ = bordertb;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudTextureData.BorderTB)
}

// bool CenterInvisible = 9;
inline void UGCHudTextureData::clear_centerinvisible() {
  _impl_.centerinvisible_ = false;
}
inline bool UGCHudTextureData::_internal_centerinvisible() const {
  return _impl_.centerinvisible_;
}
inline bool UGCHudTextureData::centerinvisible() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.CenterInvisible)
  return _internal_centerinvisible();
}
inline void UGCHudTextureData::_internal_set_centerinvisible(bool value) {
  
  _impl_.centerinvisible_ = value;
}
inline void UGCHudTextureData::set_centerinvisible(bool value) {
  _internal_set_centerinvisible(value);
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.CenterInvisible)
}

// int32 FillDir = 10;
inline void UGCHudTextureData::clear_filldir() {
  _impl_.filldir_ = 0;
}
inline int32_t UGCHudTextureData::_internal_filldir() const {
  return _impl_.filldir_;
}
inline int32_t UGCHudTextureData::filldir() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.FillDir)
  return _internal_filldir();
}
inline void UGCHudTextureData::_internal_set_filldir(int32_t value) {
  
  _impl_.filldir_ = value;
}
inline void UGCHudTextureData::set_filldir(int32_t value) {
  _internal_set_filldir(value);
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.FillDir)
}

// float FillAmount = 11;
inline void UGCHudTextureData::clear_fillamount() {
  _impl_.fillamount_ = 0;
}
inline float UGCHudTextureData::_internal_fillamount() const {
  return _impl_.fillamount_;
}
inline float UGCHudTextureData::fillamount() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.FillAmount)
  return _internal_fillamount();
}
inline void UGCHudTextureData::_internal_set_fillamount(float value) {
  
  _impl_.fillamount_ = value;
}
inline void UGCHudTextureData::set_fillamount(float value) {
  _internal_set_fillamount(value);
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.FillAmount)
}

// bool InvertFill = 12;
inline void UGCHudTextureData::clear_invertfill() {
  _impl_.invertfill_ = false;
}
inline bool UGCHudTextureData::_internal_invertfill() const {
  return _impl_.invertfill_;
}
inline bool UGCHudTextureData::invertfill() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.InvertFill)
  return _internal_invertfill();
}
inline void UGCHudTextureData::_internal_set_invertfill(bool value) {
  
  _impl_.invertfill_ = value;
}
inline void UGCHudTextureData::set_invertfill(bool value) {
  _internal_set_invertfill(value);
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.InvertFill)
}

// int32 Flip = 13;
inline void UGCHudTextureData::clear_flip() {
  _impl_.flip_ = 0;
}
inline int32_t UGCHudTextureData::_internal_flip() const {
  return _impl_.flip_;
}
inline int32_t UGCHudTextureData::flip() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.Flip)
  return _internal_flip();
}
inline void UGCHudTextureData::_internal_set_flip(int32_t value) {
  
  _impl_.flip_ = value;
}
inline void UGCHudTextureData::set_flip(int32_t value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.Flip)
}

// int32 Gradient = 14;
inline void UGCHudTextureData::clear_gradient() {
  _impl_.gradient_ = 0;
}
inline int32_t UGCHudTextureData::_internal_gradient() const {
  return _impl_.gradient_;
}
inline int32_t UGCHudTextureData::gradient() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.Gradient)
  return _internal_gradient();
}
inline void UGCHudTextureData::_internal_set_gradient(int32_t value) {
  
  _impl_.gradient_ = value;
}
inline void UGCHudTextureData::set_gradient(int32_t value) {
  _internal_set_gradient(value);
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.Gradient)
}

// int32 GradientTop = 15;
inline void UGCHudTextureData::clear_gradienttop() {
  _impl_.gradienttop_ = 0;
}
inline int32_t UGCHudTextureData::_internal_gradienttop() const {
  return _impl_.gradienttop_;
}
inline int32_t UGCHudTextureData::gradienttop() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.GradientTop)
  return _internal_gradienttop();
}
inline void UGCHudTextureData::_internal_set_gradienttop(int32_t value) {
  
  _impl_.gradienttop_ = value;
}
inline void UGCHudTextureData::set_gradienttop(int32_t value) {
  _internal_set_gradienttop(value);
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.GradientTop)
}

// int32 GradientBottom = 16;
inline void UGCHudTextureData::clear_gradientbottom() {
  _impl_.gradientbottom_ = 0;
}
inline int32_t UGCHudTextureData::_internal_gradientbottom() const {
  return _impl_.gradientbottom_;
}
inline int32_t UGCHudTextureData::gradientbottom() const {
  // @@protoc_insertion_point(field_get:message.UGCHudTextureData.GradientBottom)
  return _internal_gradientbottom();
}
inline void UGCHudTextureData::_internal_set_gradientbottom(int32_t value) {
  
  _impl_.gradientbottom_ = value;
}
inline void UGCHudTextureData::set_gradientbottom(int32_t value) {
  _internal_set_gradientbottom(value);
  // @@protoc_insertion_point(field_set:message.UGCHudTextureData.GradientBottom)
}

// -------------------------------------------------------------------

// UGCHudProfileInfoData

// .message.UGCHudWidgetData Widget = 1;
inline bool UGCHudProfileInfoData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHudProfileInfoData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHudProfileInfoData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHudProfileInfoData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHudProfileInfoData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHudProfileInfoData.Widget)
  return _internal_widget();
}
inline void UGCHudProfileInfoData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudProfileInfoData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHudProfileInfoData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudProfileInfoData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHudProfileInfoData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudProfileInfoData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHudProfileInfoData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHudProfileInfoData.Widget)
  return _msg;
}
inline void UGCHudProfileInfoData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudProfileInfoData.Widget)
}

// .message.ProtoBuffVector3 Scale = 2;
inline bool UGCHudProfileInfoData::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool UGCHudProfileInfoData::has_scale() const {
  return _internal_has_scale();
}
inline const ::message::ProtoBuffVector3& UGCHudProfileInfoData::_internal_scale() const {
  const ::message::ProtoBuffVector3* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCHudProfileInfoData::scale() const {
  // @@protoc_insertion_point(field_get:message.UGCHudProfileInfoData.Scale)
  return _internal_scale();
}
inline void UGCHudProfileInfoData::unsafe_arena_set_allocated_scale(
    ::message::ProtoBuffVector3* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudProfileInfoData.Scale)
}
inline ::message::ProtoBuffVector3* UGCHudProfileInfoData::release_scale() {
  
  ::message::ProtoBuffVector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudProfileInfoData::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:message.UGCHudProfileInfoData.Scale)
  
  ::message::ProtoBuffVector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCHudProfileInfoData::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::message::ProtoBuffVector3* UGCHudProfileInfoData::mutable_scale() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:message.UGCHudProfileInfoData.Scale)
  return _msg;
}
inline void UGCHudProfileInfoData::set_allocated_scale(::message::ProtoBuffVector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale));
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudProfileInfoData.Scale)
}

// int32 ShowType = 3;
inline void UGCHudProfileInfoData::clear_showtype() {
  _impl_.showtype_ = 0;
}
inline int32_t UGCHudProfileInfoData::_internal_showtype() const {
  return _impl_.showtype_;
}
inline int32_t UGCHudProfileInfoData::showtype() const {
  // @@protoc_insertion_point(field_get:message.UGCHudProfileInfoData.ShowType)
  return _internal_showtype();
}
inline void UGCHudProfileInfoData::_internal_set_showtype(int32_t value) {
  
  _impl_.showtype_ = value;
}
inline void UGCHudProfileInfoData::set_showtype(int32_t value) {
  _internal_set_showtype(value);
  // @@protoc_insertion_point(field_set:message.UGCHudProfileInfoData.ShowType)
}

// int32 ShowRank = 5;
inline void UGCHudProfileInfoData::clear_showrank() {
  _impl_.showrank_ = 0;
}
inline int32_t UGCHudProfileInfoData::_internal_showrank() const {
  return _impl_.showrank_;
}
inline int32_t UGCHudProfileInfoData::showrank() const {
  // @@protoc_insertion_point(field_get:message.UGCHudProfileInfoData.ShowRank)
  return _internal_showrank();
}
inline void UGCHudProfileInfoData::_internal_set_showrank(int32_t value) {
  
  _impl_.showrank_ = value;
}
inline void UGCHudProfileInfoData::set_showrank(int32_t value) {
  _internal_set_showrank(value);
  // @@protoc_insertion_point(field_set:message.UGCHudProfileInfoData.ShowRank)
}

// bool ShowPin = 4;
inline void UGCHudProfileInfoData::clear_showpin() {
  _impl_.showpin_ = false;
}
inline bool UGCHudProfileInfoData::_internal_showpin() const {
  return _impl_.showpin_;
}
inline bool UGCHudProfileInfoData::showpin() const {
  // @@protoc_insertion_point(field_get:message.UGCHudProfileInfoData.ShowPin)
  return _internal_showpin();
}
inline void UGCHudProfileInfoData::_internal_set_showpin(bool value) {
  
  _impl_.showpin_ = value;
}
inline void UGCHudProfileInfoData::set_showpin(bool value) {
  _internal_set_showpin(value);
  // @@protoc_insertion_point(field_set:message.UGCHudProfileInfoData.ShowPin)
}

// bool ShowName = 6;
inline void UGCHudProfileInfoData::clear_showname() {
  _impl_.showname_ = false;
}
inline bool UGCHudProfileInfoData::_internal_showname() const {
  return _impl_.showname_;
}
inline bool UGCHudProfileInfoData::showname() const {
  // @@protoc_insertion_point(field_get:message.UGCHudProfileInfoData.ShowName)
  return _internal_showname();
}
inline void UGCHudProfileInfoData::_internal_set_showname(bool value) {
  
  _impl_.showname_ = value;
}
inline void UGCHudProfileInfoData::set_showname(bool value) {
  _internal_set_showname(value);
  // @@protoc_insertion_point(field_set:message.UGCHudProfileInfoData.ShowName)
}

// -------------------------------------------------------------------

// UGCHudGameObjectCommonData

// uint32 ID = 1;
inline void UGCHudGameObjectCommonData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t UGCHudGameObjectCommonData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t UGCHudGameObjectCommonData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.ID)
  return _internal_id();
}
inline void UGCHudGameObjectCommonData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void UGCHudGameObjectCommonData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:message.UGCHudGameObjectCommonData.ID)
}

// bool Actived = 2;
inline void UGCHudGameObjectCommonData::clear_actived() {
  _impl_.actived_ = false;
}
inline bool UGCHudGameObjectCommonData::_internal_actived() const {
  return _impl_.actived_;
}
inline bool UGCHudGameObjectCommonData::actived() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Actived)
  return _internal_actived();
}
inline void UGCHudGameObjectCommonData::_internal_set_actived(bool value) {
  
  _impl_.actived_ = value;
}
inline void UGCHudGameObjectCommonData::set_actived(bool value) {
  _internal_set_actived(value);
  // @@protoc_insertion_point(field_set:message.UGCHudGameObjectCommonData.Actived)
}

// .message.UGCHudRectTransformData RectTransform = 3;
inline bool UGCHudGameObjectCommonData::_internal_has_recttransform() const {
  return this != internal_default_instance() && _impl_.recttransform_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_recttransform() const {
  return _internal_has_recttransform();
}
inline void UGCHudGameObjectCommonData::clear_recttransform() {
  if (GetArenaForAllocation() == nullptr && _impl_.recttransform_ != nullptr) {
    delete _impl_.recttransform_;
  }
  _impl_.recttransform_ = nullptr;
}
inline const ::message::UGCHudRectTransformData& UGCHudGameObjectCommonData::_internal_recttransform() const {
  const ::message::UGCHudRectTransformData* p = _impl_.recttransform_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudRectTransformData&>(
      ::message::_UGCHudRectTransformData_default_instance_);
}
inline const ::message::UGCHudRectTransformData& UGCHudGameObjectCommonData::recttransform() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.RectTransform)
  return _internal_recttransform();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_recttransform(
    ::message::UGCHudRectTransformData* recttransform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recttransform_);
  }
  _impl_.recttransform_ = recttransform;
  if (recttransform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.RectTransform)
}
inline ::message::UGCHudRectTransformData* UGCHudGameObjectCommonData::release_recttransform() {
  
  ::message::UGCHudRectTransformData* temp = _impl_.recttransform_;
  _impl_.recttransform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudRectTransformData* UGCHudGameObjectCommonData::unsafe_arena_release_recttransform() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.RectTransform)
  
  ::message::UGCHudRectTransformData* temp = _impl_.recttransform_;
  _impl_.recttransform_ = nullptr;
  return temp;
}
inline ::message::UGCHudRectTransformData* UGCHudGameObjectCommonData::_internal_mutable_recttransform() {
  
  if (_impl_.recttransform_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudRectTransformData>(GetArenaForAllocation());
    _impl_.recttransform_ = p;
  }
  return _impl_.recttransform_;
}
inline ::message::UGCHudRectTransformData* UGCHudGameObjectCommonData::mutable_recttransform() {
  ::message::UGCHudRectTransformData* _msg = _internal_mutable_recttransform();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.RectTransform)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_recttransform(::message::UGCHudRectTransformData* recttransform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recttransform_;
  }
  if (recttransform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recttransform);
    if (message_arena != submessage_arena) {
      recttransform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recttransform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recttransform_ = recttransform;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.RectTransform)
}

// uint32 WidgetType = 4;
inline void UGCHudGameObjectCommonData::clear_widgettype() {
  _impl_.widgettype_ = 0u;
}
inline uint32_t UGCHudGameObjectCommonData::_internal_widgettype() const {
  return _impl_.widgettype_;
}
inline uint32_t UGCHudGameObjectCommonData::widgettype() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.WidgetType)
  return _internal_widgettype();
}
inline void UGCHudGameObjectCommonData::_internal_set_widgettype(uint32_t value) {
  
  _impl_.widgettype_ = value;
}
inline void UGCHudGameObjectCommonData::set_widgettype(uint32_t value) {
  _internal_set_widgettype(value);
  // @@protoc_insertion_point(field_set:message.UGCHudGameObjectCommonData.WidgetType)
}

// .message.UGCHudWidgetData Widget = 5;
inline bool UGCHudGameObjectCommonData::_internal_has_widget() const {
  return this != internal_default_instance() && _impl_.widget_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_widget() const {
  return _internal_has_widget();
}
inline void UGCHudGameObjectCommonData::clear_widget() {
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
}
inline const ::message::UGCHudWidgetData& UGCHudGameObjectCommonData::_internal_widget() const {
  const ::message::UGCHudWidgetData* p = _impl_.widget_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudWidgetData&>(
      ::message::_UGCHudWidgetData_default_instance_);
}
inline const ::message::UGCHudWidgetData& UGCHudGameObjectCommonData::widget() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Widget)
  return _internal_widget();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_widget(
    ::message::UGCHudWidgetData* widget) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widget_);
  }
  _impl_.widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Widget)
}
inline ::message::UGCHudWidgetData* UGCHudGameObjectCommonData::release_widget() {
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudGameObjectCommonData::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Widget)
  
  ::message::UGCHudWidgetData* temp = _impl_.widget_;
  _impl_.widget_ = nullptr;
  return temp;
}
inline ::message::UGCHudWidgetData* UGCHudGameObjectCommonData::_internal_mutable_widget() {
  
  if (_impl_.widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudWidgetData>(GetArenaForAllocation());
    _impl_.widget_ = p;
  }
  return _impl_.widget_;
}
inline ::message::UGCHudWidgetData* UGCHudGameObjectCommonData::mutable_widget() {
  ::message::UGCHudWidgetData* _msg = _internal_mutable_widget();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Widget)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_widget(::message::UGCHudWidgetData* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Widget)
}

// .message.UGCHudLabelData Label = 6;
inline bool UGCHudGameObjectCommonData::_internal_has_label() const {
  return this != internal_default_instance() && _impl_.label_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_label() const {
  return _internal_has_label();
}
inline void UGCHudGameObjectCommonData::clear_label() {
  if (GetArenaForAllocation() == nullptr && _impl_.label_ != nullptr) {
    delete _impl_.label_;
  }
  _impl_.label_ = nullptr;
}
inline const ::message::UGCHudLabelData& UGCHudGameObjectCommonData::_internal_label() const {
  const ::message::UGCHudLabelData* p = _impl_.label_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudLabelData&>(
      ::message::_UGCHudLabelData_default_instance_);
}
inline const ::message::UGCHudLabelData& UGCHudGameObjectCommonData::label() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Label)
  return _internal_label();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_label(
    ::message::UGCHudLabelData* label) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.label_);
  }
  _impl_.label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Label)
}
inline ::message::UGCHudLabelData* UGCHudGameObjectCommonData::release_label() {
  
  ::message::UGCHudLabelData* temp = _impl_.label_;
  _impl_.label_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudLabelData* UGCHudGameObjectCommonData::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Label)
  
  ::message::UGCHudLabelData* temp = _impl_.label_;
  _impl_.label_ = nullptr;
  return temp;
}
inline ::message::UGCHudLabelData* UGCHudGameObjectCommonData::_internal_mutable_label() {
  
  if (_impl_.label_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudLabelData>(GetArenaForAllocation());
    _impl_.label_ = p;
  }
  return _impl_.label_;
}
inline ::message::UGCHudLabelData* UGCHudGameObjectCommonData::mutable_label() {
  ::message::UGCHudLabelData* _msg = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Label)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_label(::message::UGCHudLabelData* label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.label_;
  }
  if (label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(label);
    if (message_arena != submessage_arena) {
      label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.label_ = label;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Label)
}

// .message.UGCHudImageData Image = 7;
inline bool UGCHudGameObjectCommonData::_internal_has_image() const {
  return this != internal_default_instance() && _impl_.image_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_image() const {
  return _internal_has_image();
}
inline void UGCHudGameObjectCommonData::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
inline const ::message::UGCHudImageData& UGCHudGameObjectCommonData::_internal_image() const {
  const ::message::UGCHudImageData* p = _impl_.image_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudImageData&>(
      ::message::_UGCHudImageData_default_instance_);
}
inline const ::message::UGCHudImageData& UGCHudGameObjectCommonData::image() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Image)
  return _internal_image();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_image(
    ::message::UGCHudImageData* image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_);
  }
  _impl_.image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Image)
}
inline ::message::UGCHudImageData* UGCHudGameObjectCommonData::release_image() {
  
  ::message::UGCHudImageData* temp = _impl_.image_;
  _impl_.image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudImageData* UGCHudGameObjectCommonData::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Image)
  
  ::message::UGCHudImageData* temp = _impl_.image_;
  _impl_.image_ = nullptr;
  return temp;
}
inline ::message::UGCHudImageData* UGCHudGameObjectCommonData::_internal_mutable_image() {
  
  if (_impl_.image_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudImageData>(GetArenaForAllocation());
    _impl_.image_ = p;
  }
  return _impl_.image_;
}
inline ::message::UGCHudImageData* UGCHudGameObjectCommonData::mutable_image() {
  ::message::UGCHudImageData* _msg = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Image)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_image(::message::UGCHudImageData* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.image_ = image;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Image)
}

// .message.UGCHudButtonData Button = 8;
inline bool UGCHudGameObjectCommonData::_internal_has_button() const {
  return this != internal_default_instance() && _impl_.button_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_button() const {
  return _internal_has_button();
}
inline void UGCHudGameObjectCommonData::clear_button() {
  if (GetArenaForAllocation() == nullptr && _impl_.button_ != nullptr) {
    delete _impl_.button_;
  }
  _impl_.button_ = nullptr;
}
inline const ::message::UGCHudButtonData& UGCHudGameObjectCommonData::_internal_button() const {
  const ::message::UGCHudButtonData* p = _impl_.button_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudButtonData&>(
      ::message::_UGCHudButtonData_default_instance_);
}
inline const ::message::UGCHudButtonData& UGCHudGameObjectCommonData::button() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Button)
  return _internal_button();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_button(
    ::message::UGCHudButtonData* button) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.button_);
  }
  _impl_.button_ = button;
  if (button) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Button)
}
inline ::message::UGCHudButtonData* UGCHudGameObjectCommonData::release_button() {
  
  ::message::UGCHudButtonData* temp = _impl_.button_;
  _impl_.button_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudButtonData* UGCHudGameObjectCommonData::unsafe_arena_release_button() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Button)
  
  ::message::UGCHudButtonData* temp = _impl_.button_;
  _impl_.button_ = nullptr;
  return temp;
}
inline ::message::UGCHudButtonData* UGCHudGameObjectCommonData::_internal_mutable_button() {
  
  if (_impl_.button_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudButtonData>(GetArenaForAllocation());
    _impl_.button_ = p;
  }
  return _impl_.button_;
}
inline ::message::UGCHudButtonData* UGCHudGameObjectCommonData::mutable_button() {
  ::message::UGCHudButtonData* _msg = _internal_mutable_button();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Button)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_button(::message::UGCHudButtonData* button) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.button_;
  }
  if (button) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(button);
    if (message_arena != submessage_arena) {
      button = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, button, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.button_ = button;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Button)
}

// .message.UGCHudInputData Input = 9;
inline bool UGCHudGameObjectCommonData::_internal_has_input() const {
  return this != internal_default_instance() && _impl_.input_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_input() const {
  return _internal_has_input();
}
inline void UGCHudGameObjectCommonData::clear_input() {
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
}
inline const ::message::UGCHudInputData& UGCHudGameObjectCommonData::_internal_input() const {
  const ::message::UGCHudInputData* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudInputData&>(
      ::message::_UGCHudInputData_default_instance_);
}
inline const ::message::UGCHudInputData& UGCHudGameObjectCommonData::input() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Input)
  return _internal_input();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_input(
    ::message::UGCHudInputData* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Input)
}
inline ::message::UGCHudInputData* UGCHudGameObjectCommonData::release_input() {
  
  ::message::UGCHudInputData* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudInputData* UGCHudGameObjectCommonData::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Input)
  
  ::message::UGCHudInputData* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::message::UGCHudInputData* UGCHudGameObjectCommonData::_internal_mutable_input() {
  
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudInputData>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::message::UGCHudInputData* UGCHudGameObjectCommonData::mutable_input() {
  ::message::UGCHudInputData* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Input)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_input(::message::UGCHudInputData* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Input)
}

// .message.UGCHudLayoutData Layout = 10;
inline bool UGCHudGameObjectCommonData::_internal_has_layout() const {
  return this != internal_default_instance() && _impl_.layout_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_layout() const {
  return _internal_has_layout();
}
inline void UGCHudGameObjectCommonData::clear_layout() {
  if (GetArenaForAllocation() == nullptr && _impl_.layout_ != nullptr) {
    delete _impl_.layout_;
  }
  _impl_.layout_ = nullptr;
}
inline const ::message::UGCHudLayoutData& UGCHudGameObjectCommonData::_internal_layout() const {
  const ::message::UGCHudLayoutData* p = _impl_.layout_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudLayoutData&>(
      ::message::_UGCHudLayoutData_default_instance_);
}
inline const ::message::UGCHudLayoutData& UGCHudGameObjectCommonData::layout() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Layout)
  return _internal_layout();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_layout(
    ::message::UGCHudLayoutData* layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layout_);
  }
  _impl_.layout_ = layout;
  if (layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Layout)
}
inline ::message::UGCHudLayoutData* UGCHudGameObjectCommonData::release_layout() {
  
  ::message::UGCHudLayoutData* temp = _impl_.layout_;
  _impl_.layout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudLayoutData* UGCHudGameObjectCommonData::unsafe_arena_release_layout() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Layout)
  
  ::message::UGCHudLayoutData* temp = _impl_.layout_;
  _impl_.layout_ = nullptr;
  return temp;
}
inline ::message::UGCHudLayoutData* UGCHudGameObjectCommonData::_internal_mutable_layout() {
  
  if (_impl_.layout_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudLayoutData>(GetArenaForAllocation());
    _impl_.layout_ = p;
  }
  return _impl_.layout_;
}
inline ::message::UGCHudLayoutData* UGCHudGameObjectCommonData::mutable_layout() {
  ::message::UGCHudLayoutData* _msg = _internal_mutable_layout();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Layout)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_layout(::message::UGCHudLayoutData* layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.layout_;
  }
  if (layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layout);
    if (message_arena != submessage_arena) {
      layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.layout_ = layout;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Layout)
}

// string Name = 11;
inline void UGCHudGameObjectCommonData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCHudGameObjectCommonData::name() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudGameObjectCommonData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudGameObjectCommonData.Name)
}
inline std::string* UGCHudGameObjectCommonData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Name)
  return _s;
}
inline const std::string& UGCHudGameObjectCommonData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCHudGameObjectCommonData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudGameObjectCommonData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudGameObjectCommonData::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Name)
  return _impl_.name_.Release();
}
inline void UGCHudGameObjectCommonData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Name)
}

// .message.UGCHudPanelData Panel = 12;
inline bool UGCHudGameObjectCommonData::_internal_has_panel() const {
  return this != internal_default_instance() && _impl_.panel_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_panel() const {
  return _internal_has_panel();
}
inline void UGCHudGameObjectCommonData::clear_panel() {
  if (GetArenaForAllocation() == nullptr && _impl_.panel_ != nullptr) {
    delete _impl_.panel_;
  }
  _impl_.panel_ = nullptr;
}
inline const ::message::UGCHudPanelData& UGCHudGameObjectCommonData::_internal_panel() const {
  const ::message::UGCHudPanelData* p = _impl_.panel_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudPanelData&>(
      ::message::_UGCHudPanelData_default_instance_);
}
inline const ::message::UGCHudPanelData& UGCHudGameObjectCommonData::panel() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Panel)
  return _internal_panel();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_panel(
    ::message::UGCHudPanelData* panel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.panel_);
  }
  _impl_.panel_ = panel;
  if (panel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Panel)
}
inline ::message::UGCHudPanelData* UGCHudGameObjectCommonData::release_panel() {
  
  ::message::UGCHudPanelData* temp = _impl_.panel_;
  _impl_.panel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudPanelData* UGCHudGameObjectCommonData::unsafe_arena_release_panel() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Panel)
  
  ::message::UGCHudPanelData* temp = _impl_.panel_;
  _impl_.panel_ = nullptr;
  return temp;
}
inline ::message::UGCHudPanelData* UGCHudGameObjectCommonData::_internal_mutable_panel() {
  
  if (_impl_.panel_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudPanelData>(GetArenaForAllocation());
    _impl_.panel_ = p;
  }
  return _impl_.panel_;
}
inline ::message::UGCHudPanelData* UGCHudGameObjectCommonData::mutable_panel() {
  ::message::UGCHudPanelData* _msg = _internal_mutable_panel();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Panel)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_panel(::message::UGCHudPanelData* panel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.panel_;
  }
  if (panel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(panel);
    if (message_arena != submessage_arena) {
      panel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.panel_ = panel;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Panel)
}

// .message.UGCHudScrollViewData ScrollView = 13;
inline bool UGCHudGameObjectCommonData::_internal_has_scrollview() const {
  return this != internal_default_instance() && _impl_.scrollview_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_scrollview() const {
  return _internal_has_scrollview();
}
inline void UGCHudGameObjectCommonData::clear_scrollview() {
  if (GetArenaForAllocation() == nullptr && _impl_.scrollview_ != nullptr) {
    delete _impl_.scrollview_;
  }
  _impl_.scrollview_ = nullptr;
}
inline const ::message::UGCHudScrollViewData& UGCHudGameObjectCommonData::_internal_scrollview() const {
  const ::message::UGCHudScrollViewData* p = _impl_.scrollview_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudScrollViewData&>(
      ::message::_UGCHudScrollViewData_default_instance_);
}
inline const ::message::UGCHudScrollViewData& UGCHudGameObjectCommonData::scrollview() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.ScrollView)
  return _internal_scrollview();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_scrollview(
    ::message::UGCHudScrollViewData* scrollview) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scrollview_);
  }
  _impl_.scrollview_ = scrollview;
  if (scrollview) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.ScrollView)
}
inline ::message::UGCHudScrollViewData* UGCHudGameObjectCommonData::release_scrollview() {
  
  ::message::UGCHudScrollViewData* temp = _impl_.scrollview_;
  _impl_.scrollview_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudScrollViewData* UGCHudGameObjectCommonData::unsafe_arena_release_scrollview() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.ScrollView)
  
  ::message::UGCHudScrollViewData* temp = _impl_.scrollview_;
  _impl_.scrollview_ = nullptr;
  return temp;
}
inline ::message::UGCHudScrollViewData* UGCHudGameObjectCommonData::_internal_mutable_scrollview() {
  
  if (_impl_.scrollview_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudScrollViewData>(GetArenaForAllocation());
    _impl_.scrollview_ = p;
  }
  return _impl_.scrollview_;
}
inline ::message::UGCHudScrollViewData* UGCHudGameObjectCommonData::mutable_scrollview() {
  ::message::UGCHudScrollViewData* _msg = _internal_mutable_scrollview();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.ScrollView)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_scrollview(::message::UGCHudScrollViewData* scrollview) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scrollview_;
  }
  if (scrollview) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scrollview);
    if (message_arena != submessage_arena) {
      scrollview = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scrollview, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scrollview_ = scrollview;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.ScrollView)
}

// .message.UGCHudGridData Grid = 14;
inline bool UGCHudGameObjectCommonData::_internal_has_grid() const {
  return this != internal_default_instance() && _impl_.grid_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_grid() const {
  return _internal_has_grid();
}
inline void UGCHudGameObjectCommonData::clear_grid() {
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
}
inline const ::message::UGCHudGridData& UGCHudGameObjectCommonData::_internal_grid() const {
  const ::message::UGCHudGridData* p = _impl_.grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudGridData&>(
      ::message::_UGCHudGridData_default_instance_);
}
inline const ::message::UGCHudGridData& UGCHudGameObjectCommonData::grid() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Grid)
  return _internal_grid();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_grid(
    ::message::UGCHudGridData* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grid_);
  }
  _impl_.grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Grid)
}
inline ::message::UGCHudGridData* UGCHudGameObjectCommonData::release_grid() {
  
  ::message::UGCHudGridData* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudGridData* UGCHudGameObjectCommonData::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Grid)
  
  ::message::UGCHudGridData* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
  return temp;
}
inline ::message::UGCHudGridData* UGCHudGameObjectCommonData::_internal_mutable_grid() {
  
  if (_impl_.grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudGridData>(GetArenaForAllocation());
    _impl_.grid_ = p;
  }
  return _impl_.grid_;
}
inline ::message::UGCHudGridData* UGCHudGameObjectCommonData::mutable_grid() {
  ::message::UGCHudGridData* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Grid)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_grid(::message::UGCHudGridData* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Grid)
}

// .message.UGCHudLayoutNewData LayoutNew = 15;
inline bool UGCHudGameObjectCommonData::_internal_has_layoutnew() const {
  return this != internal_default_instance() && _impl_.layoutnew_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_layoutnew() const {
  return _internal_has_layoutnew();
}
inline void UGCHudGameObjectCommonData::clear_layoutnew() {
  if (GetArenaForAllocation() == nullptr && _impl_.layoutnew_ != nullptr) {
    delete _impl_.layoutnew_;
  }
  _impl_.layoutnew_ = nullptr;
}
inline const ::message::UGCHudLayoutNewData& UGCHudGameObjectCommonData::_internal_layoutnew() const {
  const ::message::UGCHudLayoutNewData* p = _impl_.layoutnew_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudLayoutNewData&>(
      ::message::_UGCHudLayoutNewData_default_instance_);
}
inline const ::message::UGCHudLayoutNewData& UGCHudGameObjectCommonData::layoutnew() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.LayoutNew)
  return _internal_layoutnew();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_layoutnew(
    ::message::UGCHudLayoutNewData* layoutnew) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.layoutnew_);
  }
  _impl_.layoutnew_ = layoutnew;
  if (layoutnew) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.LayoutNew)
}
inline ::message::UGCHudLayoutNewData* UGCHudGameObjectCommonData::release_layoutnew() {
  
  ::message::UGCHudLayoutNewData* temp = _impl_.layoutnew_;
  _impl_.layoutnew_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudLayoutNewData* UGCHudGameObjectCommonData::unsafe_arena_release_layoutnew() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.LayoutNew)
  
  ::message::UGCHudLayoutNewData* temp = _impl_.layoutnew_;
  _impl_.layoutnew_ = nullptr;
  return temp;
}
inline ::message::UGCHudLayoutNewData* UGCHudGameObjectCommonData::_internal_mutable_layoutnew() {
  
  if (_impl_.layoutnew_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudLayoutNewData>(GetArenaForAllocation());
    _impl_.layoutnew_ = p;
  }
  return _impl_.layoutnew_;
}
inline ::message::UGCHudLayoutNewData* UGCHudGameObjectCommonData::mutable_layoutnew() {
  ::message::UGCHudLayoutNewData* _msg = _internal_mutable_layoutnew();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.LayoutNew)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_layoutnew(::message::UGCHudLayoutNewData* layoutnew) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.layoutnew_;
  }
  if (layoutnew) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(layoutnew);
    if (message_arena != submessage_arena) {
      layoutnew = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layoutnew, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.layoutnew_ = layoutnew;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.LayoutNew)
}

// .message.UGCHud3DContainerData Container3D = 16;
inline bool UGCHudGameObjectCommonData::_internal_has_container3d() const {
  return this != internal_default_instance() && _impl_.container3d_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_container3d() const {
  return _internal_has_container3d();
}
inline void UGCHudGameObjectCommonData::clear_container3d() {
  if (GetArenaForAllocation() == nullptr && _impl_.container3d_ != nullptr) {
    delete _impl_.container3d_;
  }
  _impl_.container3d_ = nullptr;
}
inline const ::message::UGCHud3DContainerData& UGCHudGameObjectCommonData::_internal_container3d() const {
  const ::message::UGCHud3DContainerData* p = _impl_.container3d_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHud3DContainerData&>(
      ::message::_UGCHud3DContainerData_default_instance_);
}
inline const ::message::UGCHud3DContainerData& UGCHudGameObjectCommonData::container3d() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Container3D)
  return _internal_container3d();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_container3d(
    ::message::UGCHud3DContainerData* container3d) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.container3d_);
  }
  _impl_.container3d_ = container3d;
  if (container3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Container3D)
}
inline ::message::UGCHud3DContainerData* UGCHudGameObjectCommonData::release_container3d() {
  
  ::message::UGCHud3DContainerData* temp = _impl_.container3d_;
  _impl_.container3d_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHud3DContainerData* UGCHudGameObjectCommonData::unsafe_arena_release_container3d() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Container3D)
  
  ::message::UGCHud3DContainerData* temp = _impl_.container3d_;
  _impl_.container3d_ = nullptr;
  return temp;
}
inline ::message::UGCHud3DContainerData* UGCHudGameObjectCommonData::_internal_mutable_container3d() {
  
  if (_impl_.container3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHud3DContainerData>(GetArenaForAllocation());
    _impl_.container3d_ = p;
  }
  return _impl_.container3d_;
}
inline ::message::UGCHud3DContainerData* UGCHudGameObjectCommonData::mutable_container3d() {
  ::message::UGCHud3DContainerData* _msg = _internal_mutable_container3d();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Container3D)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_container3d(::message::UGCHud3DContainerData* container3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.container3d_;
  }
  if (container3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(container3d);
    if (message_arena != submessage_arena) {
      container3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container3d, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.container3d_ = container3d;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Container3D)
}

// .message.UGCHudTextureData Texture = 17;
inline bool UGCHudGameObjectCommonData::_internal_has_texture() const {
  return this != internal_default_instance() && _impl_.texture_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_texture() const {
  return _internal_has_texture();
}
inline void UGCHudGameObjectCommonData::clear_texture() {
  if (GetArenaForAllocation() == nullptr && _impl_.texture_ != nullptr) {
    delete _impl_.texture_;
  }
  _impl_.texture_ = nullptr;
}
inline const ::message::UGCHudTextureData& UGCHudGameObjectCommonData::_internal_texture() const {
  const ::message::UGCHudTextureData* p = _impl_.texture_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudTextureData&>(
      ::message::_UGCHudTextureData_default_instance_);
}
inline const ::message::UGCHudTextureData& UGCHudGameObjectCommonData::texture() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.Texture)
  return _internal_texture();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_texture(
    ::message::UGCHudTextureData* texture) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.texture_);
  }
  _impl_.texture_ = texture;
  if (texture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.Texture)
}
inline ::message::UGCHudTextureData* UGCHudGameObjectCommonData::release_texture() {
  
  ::message::UGCHudTextureData* temp = _impl_.texture_;
  _impl_.texture_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudTextureData* UGCHudGameObjectCommonData::unsafe_arena_release_texture() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.Texture)
  
  ::message::UGCHudTextureData* temp = _impl_.texture_;
  _impl_.texture_ = nullptr;
  return temp;
}
inline ::message::UGCHudTextureData* UGCHudGameObjectCommonData::_internal_mutable_texture() {
  
  if (_impl_.texture_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudTextureData>(GetArenaForAllocation());
    _impl_.texture_ = p;
  }
  return _impl_.texture_;
}
inline ::message::UGCHudTextureData* UGCHudGameObjectCommonData::mutable_texture() {
  ::message::UGCHudTextureData* _msg = _internal_mutable_texture();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.Texture)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_texture(::message::UGCHudTextureData* texture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.texture_;
  }
  if (texture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(texture);
    if (message_arena != submessage_arena) {
      texture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.texture_ = texture;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.Texture)
}

// .message.UGCHudProfileInfoData ProfileInfo = 18;
inline bool UGCHudGameObjectCommonData::_internal_has_profileinfo() const {
  return this != internal_default_instance() && _impl_.profileinfo_ != nullptr;
}
inline bool UGCHudGameObjectCommonData::has_profileinfo() const {
  return _internal_has_profileinfo();
}
inline void UGCHudGameObjectCommonData::clear_profileinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.profileinfo_ != nullptr) {
    delete _impl_.profileinfo_;
  }
  _impl_.profileinfo_ = nullptr;
}
inline const ::message::UGCHudProfileInfoData& UGCHudGameObjectCommonData::_internal_profileinfo() const {
  const ::message::UGCHudProfileInfoData* p = _impl_.profileinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudProfileInfoData&>(
      ::message::_UGCHudProfileInfoData_default_instance_);
}
inline const ::message::UGCHudProfileInfoData& UGCHudGameObjectCommonData::profileinfo() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectCommonData.ProfileInfo)
  return _internal_profileinfo();
}
inline void UGCHudGameObjectCommonData::unsafe_arena_set_allocated_profileinfo(
    ::message::UGCHudProfileInfoData* profileinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profileinfo_);
  }
  _impl_.profileinfo_ = profileinfo;
  if (profileinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectCommonData.ProfileInfo)
}
inline ::message::UGCHudProfileInfoData* UGCHudGameObjectCommonData::release_profileinfo() {
  
  ::message::UGCHudProfileInfoData* temp = _impl_.profileinfo_;
  _impl_.profileinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudProfileInfoData* UGCHudGameObjectCommonData::unsafe_arena_release_profileinfo() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectCommonData.ProfileInfo)
  
  ::message::UGCHudProfileInfoData* temp = _impl_.profileinfo_;
  _impl_.profileinfo_ = nullptr;
  return temp;
}
inline ::message::UGCHudProfileInfoData* UGCHudGameObjectCommonData::_internal_mutable_profileinfo() {
  
  if (_impl_.profileinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudProfileInfoData>(GetArenaForAllocation());
    _impl_.profileinfo_ = p;
  }
  return _impl_.profileinfo_;
}
inline ::message::UGCHudProfileInfoData* UGCHudGameObjectCommonData::mutable_profileinfo() {
  ::message::UGCHudProfileInfoData* _msg = _internal_mutable_profileinfo();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectCommonData.ProfileInfo)
  return _msg;
}
inline void UGCHudGameObjectCommonData::set_allocated_profileinfo(::message::UGCHudProfileInfoData* profileinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.profileinfo_;
  }
  if (profileinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(profileinfo);
    if (message_arena != submessage_arena) {
      profileinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profileinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.profileinfo_ = profileinfo;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectCommonData.ProfileInfo)
}

// -------------------------------------------------------------------

// UGCHudGameObjectData

// .message.UGCHudGameObjectCommonData CommonData = 1;
inline bool UGCHudGameObjectData::_internal_has_commondata() const {
  return this != internal_default_instance() && _impl_.commondata_ != nullptr;
}
inline bool UGCHudGameObjectData::has_commondata() const {
  return _internal_has_commondata();
}
inline void UGCHudGameObjectData::clear_commondata() {
  if (GetArenaForAllocation() == nullptr && _impl_.commondata_ != nullptr) {
    delete _impl_.commondata_;
  }
  _impl_.commondata_ = nullptr;
}
inline const ::message::UGCHudGameObjectCommonData& UGCHudGameObjectData::_internal_commondata() const {
  const ::message::UGCHudGameObjectCommonData* p = _impl_.commondata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudGameObjectCommonData&>(
      ::message::_UGCHudGameObjectCommonData_default_instance_);
}
inline const ::message::UGCHudGameObjectCommonData& UGCHudGameObjectData::commondata() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectData.CommonData)
  return _internal_commondata();
}
inline void UGCHudGameObjectData::unsafe_arena_set_allocated_commondata(
    ::message::UGCHudGameObjectCommonData* commondata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commondata_);
  }
  _impl_.commondata_ = commondata;
  if (commondata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectData.CommonData)
}
inline ::message::UGCHudGameObjectCommonData* UGCHudGameObjectData::release_commondata() {
  
  ::message::UGCHudGameObjectCommonData* temp = _impl_.commondata_;
  _impl_.commondata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudGameObjectCommonData* UGCHudGameObjectData::unsafe_arena_release_commondata() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectData.CommonData)
  
  ::message::UGCHudGameObjectCommonData* temp = _impl_.commondata_;
  _impl_.commondata_ = nullptr;
  return temp;
}
inline ::message::UGCHudGameObjectCommonData* UGCHudGameObjectData::_internal_mutable_commondata() {
  
  if (_impl_.commondata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudGameObjectCommonData>(GetArenaForAllocation());
    _impl_.commondata_ = p;
  }
  return _impl_.commondata_;
}
inline ::message::UGCHudGameObjectCommonData* UGCHudGameObjectData::mutable_commondata() {
  ::message::UGCHudGameObjectCommonData* _msg = _internal_mutable_commondata();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectData.CommonData)
  return _msg;
}
inline void UGCHudGameObjectData::set_allocated_commondata(::message::UGCHudGameObjectCommonData* commondata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.commondata_;
  }
  if (commondata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(commondata);
    if (message_arena != submessage_arena) {
      commondata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commondata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commondata_ = commondata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectData.CommonData)
}

// repeated .message.UGCHudGameObjectData Children = 2;
inline int UGCHudGameObjectData::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int UGCHudGameObjectData::children_size() const {
  return _internal_children_size();
}
inline void UGCHudGameObjectData::clear_children() {
  _impl_.children_.Clear();
}
inline ::message::UGCHudGameObjectData* UGCHudGameObjectData::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectData.Children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData >*
UGCHudGameObjectData::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCHudGameObjectData.Children)
  return &_impl_.children_;
}
inline const ::message::UGCHudGameObjectData& UGCHudGameObjectData::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::message::UGCHudGameObjectData& UGCHudGameObjectData::children(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectData.Children)
  return _internal_children(index);
}
inline ::message::UGCHudGameObjectData* UGCHudGameObjectData::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::message::UGCHudGameObjectData* UGCHudGameObjectData::add_children() {
  ::message::UGCHudGameObjectData* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:message.UGCHudGameObjectData.Children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData >&
UGCHudGameObjectData::children() const {
  // @@protoc_insertion_point(field_list:message.UGCHudGameObjectData.Children)
  return _impl_.children_;
}

// -------------------------------------------------------------------

// UGCHudGameObjectDataForEditor

// .message.UGCHudGameObjectCommonData CommonData = 1;
inline bool UGCHudGameObjectDataForEditor::_internal_has_commondata() const {
  return this != internal_default_instance() && _impl_.commondata_ != nullptr;
}
inline bool UGCHudGameObjectDataForEditor::has_commondata() const {
  return _internal_has_commondata();
}
inline void UGCHudGameObjectDataForEditor::clear_commondata() {
  if (GetArenaForAllocation() == nullptr && _impl_.commondata_ != nullptr) {
    delete _impl_.commondata_;
  }
  _impl_.commondata_ = nullptr;
}
inline const ::message::UGCHudGameObjectCommonData& UGCHudGameObjectDataForEditor::_internal_commondata() const {
  const ::message::UGCHudGameObjectCommonData* p = _impl_.commondata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudGameObjectCommonData&>(
      ::message::_UGCHudGameObjectCommonData_default_instance_);
}
inline const ::message::UGCHudGameObjectCommonData& UGCHudGameObjectDataForEditor::commondata() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectDataForEditor.CommonData)
  return _internal_commondata();
}
inline void UGCHudGameObjectDataForEditor::unsafe_arena_set_allocated_commondata(
    ::message::UGCHudGameObjectCommonData* commondata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commondata_);
  }
  _impl_.commondata_ = commondata;
  if (commondata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudGameObjectDataForEditor.CommonData)
}
inline ::message::UGCHudGameObjectCommonData* UGCHudGameObjectDataForEditor::release_commondata() {
  
  ::message::UGCHudGameObjectCommonData* temp = _impl_.commondata_;
  _impl_.commondata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudGameObjectCommonData* UGCHudGameObjectDataForEditor::unsafe_arena_release_commondata() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectDataForEditor.CommonData)
  
  ::message::UGCHudGameObjectCommonData* temp = _impl_.commondata_;
  _impl_.commondata_ = nullptr;
  return temp;
}
inline ::message::UGCHudGameObjectCommonData* UGCHudGameObjectDataForEditor::_internal_mutable_commondata() {
  
  if (_impl_.commondata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudGameObjectCommonData>(GetArenaForAllocation());
    _impl_.commondata_ = p;
  }
  return _impl_.commondata_;
}
inline ::message::UGCHudGameObjectCommonData* UGCHudGameObjectDataForEditor::mutable_commondata() {
  ::message::UGCHudGameObjectCommonData* _msg = _internal_mutable_commondata();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectDataForEditor.CommonData)
  return _msg;
}
inline void UGCHudGameObjectDataForEditor::set_allocated_commondata(::message::UGCHudGameObjectCommonData* commondata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.commondata_;
  }
  if (commondata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(commondata);
    if (message_arena != submessage_arena) {
      commondata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commondata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commondata_ = commondata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectDataForEditor.CommonData)
}

// string Name = 2;
inline void UGCHudGameObjectDataForEditor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCHudGameObjectDataForEditor::name() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectDataForEditor.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudGameObjectDataForEditor::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudGameObjectDataForEditor.Name)
}
inline std::string* UGCHudGameObjectDataForEditor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectDataForEditor.Name)
  return _s;
}
inline const std::string& UGCHudGameObjectDataForEditor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCHudGameObjectDataForEditor::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudGameObjectDataForEditor::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudGameObjectDataForEditor::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCHudGameObjectDataForEditor.Name)
  return _impl_.name_.Release();
}
inline void UGCHudGameObjectDataForEditor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudGameObjectDataForEditor.Name)
}

// repeated .message.UGCHudGameObjectDataForEditor Children = 3;
inline int UGCHudGameObjectDataForEditor::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int UGCHudGameObjectDataForEditor::children_size() const {
  return _internal_children_size();
}
inline void UGCHudGameObjectDataForEditor::clear_children() {
  _impl_.children_.Clear();
}
inline ::message::UGCHudGameObjectDataForEditor* UGCHudGameObjectDataForEditor::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCHudGameObjectDataForEditor.Children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor >*
UGCHudGameObjectDataForEditor::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCHudGameObjectDataForEditor.Children)
  return &_impl_.children_;
}
inline const ::message::UGCHudGameObjectDataForEditor& UGCHudGameObjectDataForEditor::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::message::UGCHudGameObjectDataForEditor& UGCHudGameObjectDataForEditor::children(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectDataForEditor.Children)
  return _internal_children(index);
}
inline ::message::UGCHudGameObjectDataForEditor* UGCHudGameObjectDataForEditor::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::message::UGCHudGameObjectDataForEditor* UGCHudGameObjectDataForEditor::add_children() {
  ::message::UGCHudGameObjectDataForEditor* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:message.UGCHudGameObjectDataForEditor.Children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor >&
UGCHudGameObjectDataForEditor::children() const {
  // @@protoc_insertion_point(field_list:message.UGCHudGameObjectDataForEditor.Children)
  return _impl_.children_;
}

// bool CustomAdapt = 4;
inline void UGCHudGameObjectDataForEditor::clear_customadapt() {
  _impl_.customadapt_ = false;
}
inline bool UGCHudGameObjectDataForEditor::_internal_customadapt() const {
  return _impl_.customadapt_;
}
inline bool UGCHudGameObjectDataForEditor::customadapt() const {
  // @@protoc_insertion_point(field_get:message.UGCHudGameObjectDataForEditor.CustomAdapt)
  return _internal_customadapt();
}
inline void UGCHudGameObjectDataForEditor::_internal_set_customadapt(bool value) {
  
  _impl_.customadapt_ = value;
}
inline void UGCHudGameObjectDataForEditor::set_customadapt(bool value) {
  _internal_set_customadapt(value);
  // @@protoc_insertion_point(field_set:message.UGCHudGameObjectDataForEditor.CustomAdapt)
}

// -------------------------------------------------------------------

// UGCHudPrefabCommonData

// int32 ScreenWidth = 1;
inline void UGCHudPrefabCommonData::clear_screenwidth() {
  _impl_.screenwidth_ = 0;
}
inline int32_t UGCHudPrefabCommonData::_internal_screenwidth() const {
  return _impl_.screenwidth_;
}
inline int32_t UGCHudPrefabCommonData::screenwidth() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabCommonData.ScreenWidth)
  return _internal_screenwidth();
}
inline void UGCHudPrefabCommonData::_internal_set_screenwidth(int32_t value) {
  
  _impl_.screenwidth_ = value;
}
inline void UGCHudPrefabCommonData::set_screenwidth(int32_t value) {
  _internal_set_screenwidth(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPrefabCommonData.ScreenWidth)
}

// int32 ScreenHeight = 2;
inline void UGCHudPrefabCommonData::clear_screenheight() {
  _impl_.screenheight_ = 0;
}
inline int32_t UGCHudPrefabCommonData::_internal_screenheight() const {
  return _impl_.screenheight_;
}
inline int32_t UGCHudPrefabCommonData::screenheight() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabCommonData.ScreenHeight)
  return _internal_screenheight();
}
inline void UGCHudPrefabCommonData::_internal_set_screenheight(int32_t value) {
  
  _impl_.screenheight_ = value;
}
inline void UGCHudPrefabCommonData::set_screenheight(int32_t value) {
  _internal_set_screenheight(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPrefabCommonData.ScreenHeight)
}

// uint32 ID = 3;
inline void UGCHudPrefabCommonData::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t UGCHudPrefabCommonData::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t UGCHudPrefabCommonData::id() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabCommonData.ID)
  return _internal_id();
}
inline void UGCHudPrefabCommonData::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void UGCHudPrefabCommonData::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPrefabCommonData.ID)
}

// .message.UGCHudTransformData Transform = 4;
inline bool UGCHudPrefabCommonData::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool UGCHudPrefabCommonData::has_transform() const {
  return _internal_has_transform();
}
inline void UGCHudPrefabCommonData::clear_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
}
inline const ::message::UGCHudTransformData& UGCHudPrefabCommonData::_internal_transform() const {
  const ::message::UGCHudTransformData* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudTransformData&>(
      ::message::_UGCHudTransformData_default_instance_);
}
inline const ::message::UGCHudTransformData& UGCHudPrefabCommonData::transform() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabCommonData.Transform)
  return _internal_transform();
}
inline void UGCHudPrefabCommonData::unsafe_arena_set_allocated_transform(
    ::message::UGCHudTransformData* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudPrefabCommonData.Transform)
}
inline ::message::UGCHudTransformData* UGCHudPrefabCommonData::release_transform() {
  
  ::message::UGCHudTransformData* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudTransformData* UGCHudPrefabCommonData::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:message.UGCHudPrefabCommonData.Transform)
  
  ::message::UGCHudTransformData* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::message::UGCHudTransformData* UGCHudPrefabCommonData::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudTransformData>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::message::UGCHudTransformData* UGCHudPrefabCommonData::mutable_transform() {
  ::message::UGCHudTransformData* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPrefabCommonData.Transform)
  return _msg;
}
inline void UGCHudPrefabCommonData::set_allocated_transform(::message::UGCHudTransformData* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPrefabCommonData.Transform)
}

// -------------------------------------------------------------------

// UGCHudPrefabData

// .message.UGCHudPrefabCommonData CommonData = 1;
inline bool UGCHudPrefabData::_internal_has_commondata() const {
  return this != internal_default_instance() && _impl_.commondata_ != nullptr;
}
inline bool UGCHudPrefabData::has_commondata() const {
  return _internal_has_commondata();
}
inline void UGCHudPrefabData::clear_commondata() {
  if (GetArenaForAllocation() == nullptr && _impl_.commondata_ != nullptr) {
    delete _impl_.commondata_;
  }
  _impl_.commondata_ = nullptr;
}
inline const ::message::UGCHudPrefabCommonData& UGCHudPrefabData::_internal_commondata() const {
  const ::message::UGCHudPrefabCommonData* p = _impl_.commondata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudPrefabCommonData&>(
      ::message::_UGCHudPrefabCommonData_default_instance_);
}
inline const ::message::UGCHudPrefabCommonData& UGCHudPrefabData::commondata() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabData.CommonData)
  return _internal_commondata();
}
inline void UGCHudPrefabData::unsafe_arena_set_allocated_commondata(
    ::message::UGCHudPrefabCommonData* commondata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commondata_);
  }
  _impl_.commondata_ = commondata;
  if (commondata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudPrefabData.CommonData)
}
inline ::message::UGCHudPrefabCommonData* UGCHudPrefabData::release_commondata() {
  
  ::message::UGCHudPrefabCommonData* temp = _impl_.commondata_;
  _impl_.commondata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudPrefabCommonData* UGCHudPrefabData::unsafe_arena_release_commondata() {
  // @@protoc_insertion_point(field_release:message.UGCHudPrefabData.CommonData)
  
  ::message::UGCHudPrefabCommonData* temp = _impl_.commondata_;
  _impl_.commondata_ = nullptr;
  return temp;
}
inline ::message::UGCHudPrefabCommonData* UGCHudPrefabData::_internal_mutable_commondata() {
  
  if (_impl_.commondata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudPrefabCommonData>(GetArenaForAllocation());
    _impl_.commondata_ = p;
  }
  return _impl_.commondata_;
}
inline ::message::UGCHudPrefabCommonData* UGCHudPrefabData::mutable_commondata() {
  ::message::UGCHudPrefabCommonData* _msg = _internal_mutable_commondata();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPrefabData.CommonData)
  return _msg;
}
inline void UGCHudPrefabData::set_allocated_commondata(::message::UGCHudPrefabCommonData* commondata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.commondata_;
  }
  if (commondata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(commondata);
    if (message_arena != submessage_arena) {
      commondata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commondata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commondata_ = commondata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPrefabData.CommonData)
}

// repeated .message.UGCHudGameObjectData Children = 2;
inline int UGCHudPrefabData::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int UGCHudPrefabData::children_size() const {
  return _internal_children_size();
}
inline void UGCHudPrefabData::clear_children() {
  _impl_.children_.Clear();
}
inline ::message::UGCHudGameObjectData* UGCHudPrefabData::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCHudPrefabData.Children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData >*
UGCHudPrefabData::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCHudPrefabData.Children)
  return &_impl_.children_;
}
inline const ::message::UGCHudGameObjectData& UGCHudPrefabData::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::message::UGCHudGameObjectData& UGCHudPrefabData::children(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabData.Children)
  return _internal_children(index);
}
inline ::message::UGCHudGameObjectData* UGCHudPrefabData::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::message::UGCHudGameObjectData* UGCHudPrefabData::add_children() {
  ::message::UGCHudGameObjectData* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:message.UGCHudPrefabData.Children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectData >&
UGCHudPrefabData::children() const {
  // @@protoc_insertion_point(field_list:message.UGCHudPrefabData.Children)
  return _impl_.children_;
}

// uint32 MaxWidgetID = 3;
inline void UGCHudPrefabData::clear_maxwidgetid() {
  _impl_.maxwidgetid_ = 0u;
}
inline uint32_t UGCHudPrefabData::_internal_maxwidgetid() const {
  return _impl_.maxwidgetid_;
}
inline uint32_t UGCHudPrefabData::maxwidgetid() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabData.MaxWidgetID)
  return _internal_maxwidgetid();
}
inline void UGCHudPrefabData::_internal_set_maxwidgetid(uint32_t value) {
  
  _impl_.maxwidgetid_ = value;
}
inline void UGCHudPrefabData::set_maxwidgetid(uint32_t value) {
  _internal_set_maxwidgetid(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPrefabData.MaxWidgetID)
}

// -------------------------------------------------------------------

// UGCHudPrefabDataForEditor

// .message.UGCHudPrefabCommonData CommonData = 1;
inline bool UGCHudPrefabDataForEditor::_internal_has_commondata() const {
  return this != internal_default_instance() && _impl_.commondata_ != nullptr;
}
inline bool UGCHudPrefabDataForEditor::has_commondata() const {
  return _internal_has_commondata();
}
inline void UGCHudPrefabDataForEditor::clear_commondata() {
  if (GetArenaForAllocation() == nullptr && _impl_.commondata_ != nullptr) {
    delete _impl_.commondata_;
  }
  _impl_.commondata_ = nullptr;
}
inline const ::message::UGCHudPrefabCommonData& UGCHudPrefabDataForEditor::_internal_commondata() const {
  const ::message::UGCHudPrefabCommonData* p = _impl_.commondata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCHudPrefabCommonData&>(
      ::message::_UGCHudPrefabCommonData_default_instance_);
}
inline const ::message::UGCHudPrefabCommonData& UGCHudPrefabDataForEditor::commondata() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabDataForEditor.CommonData)
  return _internal_commondata();
}
inline void UGCHudPrefabDataForEditor::unsafe_arena_set_allocated_commondata(
    ::message::UGCHudPrefabCommonData* commondata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commondata_);
  }
  _impl_.commondata_ = commondata;
  if (commondata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCHudPrefabDataForEditor.CommonData)
}
inline ::message::UGCHudPrefabCommonData* UGCHudPrefabDataForEditor::release_commondata() {
  
  ::message::UGCHudPrefabCommonData* temp = _impl_.commondata_;
  _impl_.commondata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCHudPrefabCommonData* UGCHudPrefabDataForEditor::unsafe_arena_release_commondata() {
  // @@protoc_insertion_point(field_release:message.UGCHudPrefabDataForEditor.CommonData)
  
  ::message::UGCHudPrefabCommonData* temp = _impl_.commondata_;
  _impl_.commondata_ = nullptr;
  return temp;
}
inline ::message::UGCHudPrefabCommonData* UGCHudPrefabDataForEditor::_internal_mutable_commondata() {
  
  if (_impl_.commondata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCHudPrefabCommonData>(GetArenaForAllocation());
    _impl_.commondata_ = p;
  }
  return _impl_.commondata_;
}
inline ::message::UGCHudPrefabCommonData* UGCHudPrefabDataForEditor::mutable_commondata() {
  ::message::UGCHudPrefabCommonData* _msg = _internal_mutable_commondata();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPrefabDataForEditor.CommonData)
  return _msg;
}
inline void UGCHudPrefabDataForEditor::set_allocated_commondata(::message::UGCHudPrefabCommonData* commondata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.commondata_;
  }
  if (commondata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(commondata);
    if (message_arena != submessage_arena) {
      commondata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commondata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.commondata_ = commondata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPrefabDataForEditor.CommonData)
}

// repeated .message.UGCHudGameObjectDataForEditor Children = 2;
inline int UGCHudPrefabDataForEditor::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int UGCHudPrefabDataForEditor::children_size() const {
  return _internal_children_size();
}
inline void UGCHudPrefabDataForEditor::clear_children() {
  _impl_.children_.Clear();
}
inline ::message::UGCHudGameObjectDataForEditor* UGCHudPrefabDataForEditor::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCHudPrefabDataForEditor.Children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor >*
UGCHudPrefabDataForEditor::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCHudPrefabDataForEditor.Children)
  return &_impl_.children_;
}
inline const ::message::UGCHudGameObjectDataForEditor& UGCHudPrefabDataForEditor::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::message::UGCHudGameObjectDataForEditor& UGCHudPrefabDataForEditor::children(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabDataForEditor.Children)
  return _internal_children(index);
}
inline ::message::UGCHudGameObjectDataForEditor* UGCHudPrefabDataForEditor::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::message::UGCHudGameObjectDataForEditor* UGCHudPrefabDataForEditor::add_children() {
  ::message::UGCHudGameObjectDataForEditor* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:message.UGCHudPrefabDataForEditor.Children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudGameObjectDataForEditor >&
UGCHudPrefabDataForEditor::children() const {
  // @@protoc_insertion_point(field_list:message.UGCHudPrefabDataForEditor.Children)
  return _impl_.children_;
}

// string Name = 3;
inline void UGCHudPrefabDataForEditor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCHudPrefabDataForEditor::name() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabDataForEditor.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCHudPrefabDataForEditor::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCHudPrefabDataForEditor.Name)
}
inline std::string* UGCHudPrefabDataForEditor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCHudPrefabDataForEditor.Name)
  return _s;
}
inline const std::string& UGCHudPrefabDataForEditor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCHudPrefabDataForEditor::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCHudPrefabDataForEditor::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCHudPrefabDataForEditor::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCHudPrefabDataForEditor.Name)
  return _impl_.name_.Release();
}
inline void UGCHudPrefabDataForEditor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCHudPrefabDataForEditor.Name)
}

// uint32 Index = 4;
inline void UGCHudPrefabDataForEditor::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t UGCHudPrefabDataForEditor::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t UGCHudPrefabDataForEditor::index() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabDataForEditor.Index)
  return _internal_index();
}
inline void UGCHudPrefabDataForEditor::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void UGCHudPrefabDataForEditor::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPrefabDataForEditor.Index)
}

// uint32 MaxWidgetID = 5;
inline void UGCHudPrefabDataForEditor::clear_maxwidgetid() {
  _impl_.maxwidgetid_ = 0u;
}
inline uint32_t UGCHudPrefabDataForEditor::_internal_maxwidgetid() const {
  return _impl_.maxwidgetid_;
}
inline uint32_t UGCHudPrefabDataForEditor::maxwidgetid() const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabDataForEditor.MaxWidgetID)
  return _internal_maxwidgetid();
}
inline void UGCHudPrefabDataForEditor::_internal_set_maxwidgetid(uint32_t value) {
  
  _impl_.maxwidgetid_ = value;
}
inline void UGCHudPrefabDataForEditor::set_maxwidgetid(uint32_t value) {
  _internal_set_maxwidgetid(value);
  // @@protoc_insertion_point(field_set:message.UGCHudPrefabDataForEditor.MaxWidgetID)
}

// -------------------------------------------------------------------

// UGCHudPrefabDatas

// repeated .message.UGCHudPrefabData Prefabs = 1;
inline int UGCHudPrefabDatas::_internal_prefabs_size() const {
  return _impl_.prefabs_.size();
}
inline int UGCHudPrefabDatas::prefabs_size() const {
  return _internal_prefabs_size();
}
inline void UGCHudPrefabDatas::clear_prefabs() {
  _impl_.prefabs_.Clear();
}
inline ::message::UGCHudPrefabData* UGCHudPrefabDatas::mutable_prefabs(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCHudPrefabDatas.Prefabs)
  return _impl_.prefabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabData >*
UGCHudPrefabDatas::mutable_prefabs() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCHudPrefabDatas.Prefabs)
  return &_impl_.prefabs_;
}
inline const ::message::UGCHudPrefabData& UGCHudPrefabDatas::_internal_prefabs(int index) const {
  return _impl_.prefabs_.Get(index);
}
inline const ::message::UGCHudPrefabData& UGCHudPrefabDatas::prefabs(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabDatas.Prefabs)
  return _internal_prefabs(index);
}
inline ::message::UGCHudPrefabData* UGCHudPrefabDatas::_internal_add_prefabs() {
  return _impl_.prefabs_.Add();
}
inline ::message::UGCHudPrefabData* UGCHudPrefabDatas::add_prefabs() {
  ::message::UGCHudPrefabData* _add = _internal_add_prefabs();
  // @@protoc_insertion_point(field_add:message.UGCHudPrefabDatas.Prefabs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabData >&
UGCHudPrefabDatas::prefabs() const {
  // @@protoc_insertion_point(field_list:message.UGCHudPrefabDatas.Prefabs)
  return _impl_.prefabs_;
}

// -------------------------------------------------------------------

// UGCHudPrefabDatasForEditor

// repeated .message.UGCHudPrefabDataForEditor Prefabs = 1;
inline int UGCHudPrefabDatasForEditor::_internal_prefabs_size() const {
  return _impl_.prefabs_.size();
}
inline int UGCHudPrefabDatasForEditor::prefabs_size() const {
  return _internal_prefabs_size();
}
inline void UGCHudPrefabDatasForEditor::clear_prefabs() {
  _impl_.prefabs_.Clear();
}
inline ::message::UGCHudPrefabDataForEditor* UGCHudPrefabDatasForEditor::mutable_prefabs(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCHudPrefabDatasForEditor.Prefabs)
  return _impl_.prefabs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabDataForEditor >*
UGCHudPrefabDatasForEditor::mutable_prefabs() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCHudPrefabDatasForEditor.Prefabs)
  return &_impl_.prefabs_;
}
inline const ::message::UGCHudPrefabDataForEditor& UGCHudPrefabDatasForEditor::_internal_prefabs(int index) const {
  return _impl_.prefabs_.Get(index);
}
inline const ::message::UGCHudPrefabDataForEditor& UGCHudPrefabDatasForEditor::prefabs(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCHudPrefabDatasForEditor.Prefabs)
  return _internal_prefabs(index);
}
inline ::message::UGCHudPrefabDataForEditor* UGCHudPrefabDatasForEditor::_internal_add_prefabs() {
  return _impl_.prefabs_.Add();
}
inline ::message::UGCHudPrefabDataForEditor* UGCHudPrefabDatasForEditor::add_prefabs() {
  ::message::UGCHudPrefabDataForEditor* _add = _internal_add_prefabs();
  // @@protoc_insertion_point(field_add:message.UGCHudPrefabDatasForEditor.Prefabs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCHudPrefabDataForEditor >&
UGCHudPrefabDatasForEditor::prefabs() const {
  // @@protoc_insertion_point(field_list:message.UGCHudPrefabDatasForEditor.Prefabs)
  return _impl_.prefabs_;
}

// -------------------------------------------------------------------

// UGCProjectData

// bytes GraphEditorProject = 1;
inline void UGCProjectData::clear_grapheditorproject() {
  _impl_.grapheditorproject_.ClearToEmpty();
}
inline const std::string& UGCProjectData::grapheditorproject() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectData.GraphEditorProject)
  return _internal_grapheditorproject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectData::set_grapheditorproject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.grapheditorproject_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectData.GraphEditorProject)
}
inline std::string* UGCProjectData::mutable_grapheditorproject() {
  std::string* _s = _internal_mutable_grapheditorproject();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectData.GraphEditorProject)
  return _s;
}
inline const std::string& UGCProjectData::_internal_grapheditorproject() const {
  return _impl_.grapheditorproject_.Get();
}
inline void UGCProjectData::_internal_set_grapheditorproject(const std::string& value) {
  
  _impl_.grapheditorproject_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectData::_internal_mutable_grapheditorproject() {
  
  return _impl_.grapheditorproject_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectData::release_grapheditorproject() {
  // @@protoc_insertion_point(field_release:message.UGCProjectData.GraphEditorProject)
  return _impl_.grapheditorproject_.Release();
}
inline void UGCProjectData::set_allocated_grapheditorproject(std::string* grapheditorproject) {
  if (grapheditorproject != nullptr) {
    
  } else {
    
  }
  _impl_.grapheditorproject_.SetAllocated(grapheditorproject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.grapheditorproject_.IsDefault()) {
    _impl_.grapheditorproject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectData.GraphEditorProject)
}

// bytes WorkflowEditorProject = 2;
inline void UGCProjectData::clear_workfloweditorproject() {
  _impl_.workfloweditorproject_.ClearToEmpty();
}
inline const std::string& UGCProjectData::workfloweditorproject() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectData.WorkflowEditorProject)
  return _internal_workfloweditorproject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectData::set_workfloweditorproject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.workfloweditorproject_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectData.WorkflowEditorProject)
}
inline std::string* UGCProjectData::mutable_workfloweditorproject() {
  std::string* _s = _internal_mutable_workfloweditorproject();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectData.WorkflowEditorProject)
  return _s;
}
inline const std::string& UGCProjectData::_internal_workfloweditorproject() const {
  return _impl_.workfloweditorproject_.Get();
}
inline void UGCProjectData::_internal_set_workfloweditorproject(const std::string& value) {
  
  _impl_.workfloweditorproject_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectData::_internal_mutable_workfloweditorproject() {
  
  return _impl_.workfloweditorproject_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectData::release_workfloweditorproject() {
  // @@protoc_insertion_point(field_release:message.UGCProjectData.WorkflowEditorProject)
  return _impl_.workfloweditorproject_.Release();
}
inline void UGCProjectData::set_allocated_workfloweditorproject(std::string* workfloweditorproject) {
  if (workfloweditorproject != nullptr) {
    
  } else {
    
  }
  _impl_.workfloweditorproject_.SetAllocated(workfloweditorproject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.workfloweditorproject_.IsDefault()) {
    _impl_.workfloweditorproject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectData.WorkflowEditorProject)
}

// bytes EntityEditorProject = 3;
inline void UGCProjectData::clear_entityeditorproject() {
  _impl_.entityeditorproject_.ClearToEmpty();
}
inline const std::string& UGCProjectData::entityeditorproject() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectData.EntityEditorProject)
  return _internal_entityeditorproject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectData::set_entityeditorproject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entityeditorproject_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectData.EntityEditorProject)
}
inline std::string* UGCProjectData::mutable_entityeditorproject() {
  std::string* _s = _internal_mutable_entityeditorproject();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectData.EntityEditorProject)
  return _s;
}
inline const std::string& UGCProjectData::_internal_entityeditorproject() const {
  return _impl_.entityeditorproject_.Get();
}
inline void UGCProjectData::_internal_set_entityeditorproject(const std::string& value) {
  
  _impl_.entityeditorproject_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectData::_internal_mutable_entityeditorproject() {
  
  return _impl_.entityeditorproject_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectData::release_entityeditorproject() {
  // @@protoc_insertion_point(field_release:message.UGCProjectData.EntityEditorProject)
  return _impl_.entityeditorproject_.Release();
}
inline void UGCProjectData::set_allocated_entityeditorproject(std::string* entityeditorproject) {
  if (entityeditorproject != nullptr) {
    
  } else {
    
  }
  _impl_.entityeditorproject_.SetAllocated(entityeditorproject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entityeditorproject_.IsDefault()) {
    _impl_.entityeditorproject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectData.EntityEditorProject)
}

// bytes HudEditorProject = 4;
inline void UGCProjectData::clear_hudeditorproject() {
  _impl_.hudeditorproject_.ClearToEmpty();
}
inline const std::string& UGCProjectData::hudeditorproject() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectData.HudEditorProject)
  return _internal_hudeditorproject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectData::set_hudeditorproject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hudeditorproject_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectData.HudEditorProject)
}
inline std::string* UGCProjectData::mutable_hudeditorproject() {
  std::string* _s = _internal_mutable_hudeditorproject();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectData.HudEditorProject)
  return _s;
}
inline const std::string& UGCProjectData::_internal_hudeditorproject() const {
  return _impl_.hudeditorproject_.Get();
}
inline void UGCProjectData::_internal_set_hudeditorproject(const std::string& value) {
  
  _impl_.hudeditorproject_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectData::_internal_mutable_hudeditorproject() {
  
  return _impl_.hudeditorproject_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectData::release_hudeditorproject() {
  // @@protoc_insertion_point(field_release:message.UGCProjectData.HudEditorProject)
  return _impl_.hudeditorproject_.Release();
}
inline void UGCProjectData::set_allocated_hudeditorproject(std::string* hudeditorproject) {
  if (hudeditorproject != nullptr) {
    
  } else {
    
  }
  _impl_.hudeditorproject_.SetAllocated(hudeditorproject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hudeditorproject_.IsDefault()) {
    _impl_.hudeditorproject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectData.HudEditorProject)
}

// bytes MapEditorProject = 5;
inline void UGCProjectData::clear_mapeditorproject() {
  _impl_.mapeditorproject_.ClearToEmpty();
}
inline const std::string& UGCProjectData::mapeditorproject() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectData.MapEditorProject)
  return _internal_mapeditorproject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectData::set_mapeditorproject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapeditorproject_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectData.MapEditorProject)
}
inline std::string* UGCProjectData::mutable_mapeditorproject() {
  std::string* _s = _internal_mutable_mapeditorproject();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectData.MapEditorProject)
  return _s;
}
inline const std::string& UGCProjectData::_internal_mapeditorproject() const {
  return _impl_.mapeditorproject_.Get();
}
inline void UGCProjectData::_internal_set_mapeditorproject(const std::string& value) {
  
  _impl_.mapeditorproject_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectData::_internal_mutable_mapeditorproject() {
  
  return _impl_.mapeditorproject_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectData::release_mapeditorproject() {
  // @@protoc_insertion_point(field_release:message.UGCProjectData.MapEditorProject)
  return _impl_.mapeditorproject_.Release();
}
inline void UGCProjectData::set_allocated_mapeditorproject(std::string* mapeditorproject) {
  if (mapeditorproject != nullptr) {
    
  } else {
    
  }
  _impl_.mapeditorproject_.SetAllocated(mapeditorproject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapeditorproject_.IsDefault()) {
    _impl_.mapeditorproject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectData.MapEditorProject)
}

// bytes ModeSettingEditorProject = 6;
inline void UGCProjectData::clear_modesettingeditorproject() {
  _impl_.modesettingeditorproject_.ClearToEmpty();
}
inline const std::string& UGCProjectData::modesettingeditorproject() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectData.ModeSettingEditorProject)
  return _internal_modesettingeditorproject();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectData::set_modesettingeditorproject(ArgT0&& arg0, ArgT... args) {
 
 _impl_.modesettingeditorproject_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectData.ModeSettingEditorProject)
}
inline std::string* UGCProjectData::mutable_modesettingeditorproject() {
  std::string* _s = _internal_mutable_modesettingeditorproject();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectData.ModeSettingEditorProject)
  return _s;
}
inline const std::string& UGCProjectData::_internal_modesettingeditorproject() const {
  return _impl_.modesettingeditorproject_.Get();
}
inline void UGCProjectData::_internal_set_modesettingeditorproject(const std::string& value) {
  
  _impl_.modesettingeditorproject_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectData::_internal_mutable_modesettingeditorproject() {
  
  return _impl_.modesettingeditorproject_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectData::release_modesettingeditorproject() {
  // @@protoc_insertion_point(field_release:message.UGCProjectData.ModeSettingEditorProject)
  return _impl_.modesettingeditorproject_.Release();
}
inline void UGCProjectData::set_allocated_modesettingeditorproject(std::string* modesettingeditorproject) {
  if (modesettingeditorproject != nullptr) {
    
  } else {
    
  }
  _impl_.modesettingeditorproject_.SetAllocated(modesettingeditorproject, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.modesettingeditorproject_.IsDefault()) {
    _impl_.modesettingeditorproject_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectData.ModeSettingEditorProject)
}

// .message.EUGCProjectVersion CompatibleVersion = 999;
inline void UGCProjectData::clear_compatibleversion() {
  _impl_.compatibleversion_ = 0;
}
inline ::message::EUGCProjectVersion UGCProjectData::_internal_compatibleversion() const {
  return static_cast< ::message::EUGCProjectVersion >(_impl_.compatibleversion_);
}
inline ::message::EUGCProjectVersion UGCProjectData::compatibleversion() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectData.CompatibleVersion)
  return _internal_compatibleversion();
}
inline void UGCProjectData::_internal_set_compatibleversion(::message::EUGCProjectVersion value) {
  
  _impl_.compatibleversion_ = value;
}
inline void UGCProjectData::set_compatibleversion(::message::EUGCProjectVersion value) {
  _internal_set_compatibleversion(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectData.CompatibleVersion)
}

// int32 PublicVersion = 1000;
inline void UGCProjectData::clear_publicversion() {
  _impl_.publicversion_ = 0;
}
inline int32_t UGCProjectData::_internal_publicversion() const {
  return _impl_.publicversion_;
}
inline int32_t UGCProjectData::publicversion() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectData.PublicVersion)
  return _internal_publicversion();
}
inline void UGCProjectData::_internal_set_publicversion(int32_t value) {
  
  _impl_.publicversion_ = value;
}
inline void UGCProjectData::set_publicversion(int32_t value) {
  _internal_set_publicversion(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectData.PublicVersion)
}

// -------------------------------------------------------------------

// UGCProjectMetaData

// uint32 SlotID = 1;
inline void UGCProjectMetaData::clear_slotid() {
  _impl_.slotid_ = 0u;
}
inline uint32_t UGCProjectMetaData::_internal_slotid() const {
  return _impl_.slotid_;
}
inline uint32_t UGCProjectMetaData::slotid() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.SlotID)
  return _internal_slotid();
}
inline void UGCProjectMetaData::_internal_set_slotid(uint32_t value) {
  
  _impl_.slotid_ = value;
}
inline void UGCProjectMetaData::set_slotid(uint32_t value) {
  _internal_set_slotid(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.SlotID)
}

// string GameName = 2;
inline void UGCProjectMetaData::clear_gamename() {
  _impl_.gamename_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::gamename() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.GameName)
  return _internal_gamename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_gamename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gamename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.GameName)
}
inline std::string* UGCProjectMetaData::mutable_gamename() {
  std::string* _s = _internal_mutable_gamename();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.GameName)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_gamename() const {
  return _impl_.gamename_.Get();
}
inline void UGCProjectMetaData::_internal_set_gamename(const std::string& value) {
  
  _impl_.gamename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_gamename() {
  
  return _impl_.gamename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_gamename() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.GameName)
  return _impl_.gamename_.Release();
}
inline void UGCProjectMetaData::set_allocated_gamename(std::string* gamename) {
  if (gamename != nullptr) {
    
  } else {
    
  }
  _impl_.gamename_.SetAllocated(gamename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamename_.IsDefault()) {
    _impl_.gamename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.GameName)
}

// string GameDesc = 3;
inline void UGCProjectMetaData::clear_gamedesc() {
  _impl_.gamedesc_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::gamedesc() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.GameDesc)
  return _internal_gamedesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_gamedesc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gamedesc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.GameDesc)
}
inline std::string* UGCProjectMetaData::mutable_gamedesc() {
  std::string* _s = _internal_mutable_gamedesc();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.GameDesc)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_gamedesc() const {
  return _impl_.gamedesc_.Get();
}
inline void UGCProjectMetaData::_internal_set_gamedesc(const std::string& value) {
  
  _impl_.gamedesc_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_gamedesc() {
  
  return _impl_.gamedesc_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_gamedesc() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.GameDesc)
  return _impl_.gamedesc_.Release();
}
inline void UGCProjectMetaData::set_allocated_gamedesc(std::string* gamedesc) {
  if (gamedesc != nullptr) {
    
  } else {
    
  }
  _impl_.gamedesc_.SetAllocated(gamedesc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamedesc_.IsDefault()) {
    _impl_.gamedesc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.GameDesc)
}

// uint32 GameMode = 4;
inline void UGCProjectMetaData::clear_gamemode() {
  _impl_.gamemode_ = 0u;
}
inline uint32_t UGCProjectMetaData::_internal_gamemode() const {
  return _impl_.gamemode_;
}
inline uint32_t UGCProjectMetaData::gamemode() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.GameMode)
  return _internal_gamemode();
}
inline void UGCProjectMetaData::_internal_set_gamemode(uint32_t value) {
  
  _impl_.gamemode_ = value;
}
inline void UGCProjectMetaData::set_gamemode(uint32_t value) {
  _internal_set_gamemode(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.GameMode)
}

// uint32 GroupMode = 5;
inline void UGCProjectMetaData::clear_groupmode() {
  _impl_.groupmode_ = 0u;
}
inline uint32_t UGCProjectMetaData::_internal_groupmode() const {
  return _impl_.groupmode_;
}
inline uint32_t UGCProjectMetaData::groupmode() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.GroupMode)
  return _internal_groupmode();
}
inline void UGCProjectMetaData::_internal_set_groupmode(uint32_t value) {
  
  _impl_.groupmode_ = value;
}
inline void UGCProjectMetaData::set_groupmode(uint32_t value) {
  _internal_set_groupmode(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.GroupMode)
}

// uint32 TeamCount = 6;
inline void UGCProjectMetaData::clear_teamcount() {
  _impl_.teamcount_ = 0u;
}
inline uint32_t UGCProjectMetaData::_internal_teamcount() const {
  return _impl_.teamcount_;
}
inline uint32_t UGCProjectMetaData::teamcount() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.TeamCount)
  return _internal_teamcount();
}
inline void UGCProjectMetaData::_internal_set_teamcount(uint32_t value) {
  
  _impl_.teamcount_ = value;
}
inline void UGCProjectMetaData::set_teamcount(uint32_t value) {
  _internal_set_teamcount(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.TeamCount)
}

// uint64 GameResourceCount = 7;
inline void UGCProjectMetaData::clear_gameresourcecount() {
  _impl_.gameresourcecount_ = uint64_t{0u};
}
inline uint64_t UGCProjectMetaData::_internal_gameresourcecount() const {
  return _impl_.gameresourcecount_;
}
inline uint64_t UGCProjectMetaData::gameresourcecount() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.GameResourceCount)
  return _internal_gameresourcecount();
}
inline void UGCProjectMetaData::_internal_set_gameresourcecount(uint64_t value) {
  
  _impl_.gameresourcecount_ = value;
}
inline void UGCProjectMetaData::set_gameresourcecount(uint64_t value) {
  _internal_set_gameresourcecount(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.GameResourceCount)
}

// uint64 GameTotalCost = 8;
inline void UGCProjectMetaData::clear_gametotalcost() {
  _impl_.gametotalcost_ = uint64_t{0u};
}
inline uint64_t UGCProjectMetaData::_internal_gametotalcost() const {
  return _impl_.gametotalcost_;
}
inline uint64_t UGCProjectMetaData::gametotalcost() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.GameTotalCost)
  return _internal_gametotalcost();
}
inline void UGCProjectMetaData::_internal_set_gametotalcost(uint64_t value) {
  
  _impl_.gametotalcost_ = value;
}
inline void UGCProjectMetaData::set_gametotalcost(uint64_t value) {
  _internal_set_gametotalcost(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.GameTotalCost)
}

// uint64 UpdateTime = 9;
inline void UGCProjectMetaData::clear_updatetime() {
  _impl_.updatetime_ = uint64_t{0u};
}
inline uint64_t UGCProjectMetaData::_internal_updatetime() const {
  return _impl_.updatetime_;
}
inline uint64_t UGCProjectMetaData::updatetime() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.UpdateTime)
  return _internal_updatetime();
}
inline void UGCProjectMetaData::_internal_set_updatetime(uint64_t value) {
  
  _impl_.updatetime_ = value;
}
inline void UGCProjectMetaData::set_updatetime(uint64_t value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.UpdateTime)
}

// repeated uint32 Tags = 10;
inline int UGCProjectMetaData::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int UGCProjectMetaData::tags_size() const {
  return _internal_tags_size();
}
inline void UGCProjectMetaData::clear_tags() {
  _impl_.tags_.Clear();
}
inline uint32_t UGCProjectMetaData::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline uint32_t UGCProjectMetaData::tags(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.Tags)
  return _internal_tags(index);
}
inline void UGCProjectMetaData::set_tags(int index, uint32_t value) {
  _impl_.tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.Tags)
}
inline void UGCProjectMetaData::_internal_add_tags(uint32_t value) {
  _impl_.tags_.Add(value);
}
inline void UGCProjectMetaData::add_tags(uint32_t value) {
  _internal_add_tags(value);
  // @@protoc_insertion_point(field_add:message.UGCProjectMetaData.Tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCProjectMetaData::_internal_tags() const {
  return _impl_.tags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCProjectMetaData::tags() const {
  // @@protoc_insertion_point(field_list:message.UGCProjectMetaData.Tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCProjectMetaData::_internal_mutable_tags() {
  return &_impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCProjectMetaData::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCProjectMetaData.Tags)
  return _internal_mutable_tags();
}

// bytes WorkshopBitMap = 11;
inline void UGCProjectMetaData::clear_workshopbitmap() {
  _impl_.workshopbitmap_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::workshopbitmap() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.WorkshopBitMap)
  return _internal_workshopbitmap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_workshopbitmap(ArgT0&& arg0, ArgT... args) {
 
 _impl_.workshopbitmap_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.WorkshopBitMap)
}
inline std::string* UGCProjectMetaData::mutable_workshopbitmap() {
  std::string* _s = _internal_mutable_workshopbitmap();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.WorkshopBitMap)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_workshopbitmap() const {
  return _impl_.workshopbitmap_.Get();
}
inline void UGCProjectMetaData::_internal_set_workshopbitmap(const std::string& value) {
  
  _impl_.workshopbitmap_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_workshopbitmap() {
  
  return _impl_.workshopbitmap_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_workshopbitmap() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.WorkshopBitMap)
  return _impl_.workshopbitmap_.Release();
}
inline void UGCProjectMetaData::set_allocated_workshopbitmap(std::string* workshopbitmap) {
  if (workshopbitmap != nullptr) {
    
  } else {
    
  }
  _impl_.workshopbitmap_.SetAllocated(workshopbitmap, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.workshopbitmap_.IsDefault()) {
    _impl_.workshopbitmap_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.WorkshopBitMap)
}

// bytes WorkshopIconMap = 12;
inline void UGCProjectMetaData::clear_workshopiconmap() {
  _impl_.workshopiconmap_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::workshopiconmap() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.WorkshopIconMap)
  return _internal_workshopiconmap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_workshopiconmap(ArgT0&& arg0, ArgT... args) {
 
 _impl_.workshopiconmap_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.WorkshopIconMap)
}
inline std::string* UGCProjectMetaData::mutable_workshopiconmap() {
  std::string* _s = _internal_mutable_workshopiconmap();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.WorkshopIconMap)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_workshopiconmap() const {
  return _impl_.workshopiconmap_.Get();
}
inline void UGCProjectMetaData::_internal_set_workshopiconmap(const std::string& value) {
  
  _impl_.workshopiconmap_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_workshopiconmap() {
  
  return _impl_.workshopiconmap_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_workshopiconmap() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.WorkshopIconMap)
  return _impl_.workshopiconmap_.Release();
}
inline void UGCProjectMetaData::set_allocated_workshopiconmap(std::string* workshopiconmap) {
  if (workshopiconmap != nullptr) {
    
  } else {
    
  }
  _impl_.workshopiconmap_.SetAllocated(workshopiconmap, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.workshopiconmap_.IsDefault()) {
    _impl_.workshopiconmap_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.WorkshopIconMap)
}

// .message.SceneEditModeProtoData ModeSettings = 13;
inline bool UGCProjectMetaData::_internal_has_modesettings() const {
  return this != internal_default_instance() && _impl_.modesettings_ != nullptr;
}
inline bool UGCProjectMetaData::has_modesettings() const {
  return _internal_has_modesettings();
}
inline void UGCProjectMetaData::clear_modesettings() {
  if (GetArenaForAllocation() == nullptr && _impl_.modesettings_ != nullptr) {
    delete _impl_.modesettings_;
  }
  _impl_.modesettings_ = nullptr;
}
inline const ::message::SceneEditModeProtoData& UGCProjectMetaData::_internal_modesettings() const {
  const ::message::SceneEditModeProtoData* p = _impl_.modesettings_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::SceneEditModeProtoData&>(
      ::message::_SceneEditModeProtoData_default_instance_);
}
inline const ::message::SceneEditModeProtoData& UGCProjectMetaData::modesettings() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.ModeSettings)
  return _internal_modesettings();
}
inline void UGCProjectMetaData::unsafe_arena_set_allocated_modesettings(
    ::message::SceneEditModeProtoData* modesettings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modesettings_);
  }
  _impl_.modesettings_ = modesettings;
  if (modesettings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCProjectMetaData.ModeSettings)
}
inline ::message::SceneEditModeProtoData* UGCProjectMetaData::release_modesettings() {
  
  ::message::SceneEditModeProtoData* temp = _impl_.modesettings_;
  _impl_.modesettings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::SceneEditModeProtoData* UGCProjectMetaData::unsafe_arena_release_modesettings() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.ModeSettings)
  
  ::message::SceneEditModeProtoData* temp = _impl_.modesettings_;
  _impl_.modesettings_ = nullptr;
  return temp;
}
inline ::message::SceneEditModeProtoData* UGCProjectMetaData::_internal_mutable_modesettings() {
  
  if (_impl_.modesettings_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::SceneEditModeProtoData>(GetArenaForAllocation());
    _impl_.modesettings_ = p;
  }
  return _impl_.modesettings_;
}
inline ::message::SceneEditModeProtoData* UGCProjectMetaData::mutable_modesettings() {
  ::message::SceneEditModeProtoData* _msg = _internal_mutable_modesettings();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.ModeSettings)
  return _msg;
}
inline void UGCProjectMetaData::set_allocated_modesettings(::message::SceneEditModeProtoData* modesettings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.modesettings_;
  }
  if (modesettings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(modesettings);
    if (message_arena != submessage_arena) {
      modesettings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modesettings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.modesettings_ = modesettings;
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.ModeSettings)
}

// uint64 RuntimeDataLength = 14;
inline void UGCProjectMetaData::clear_runtimedatalength() {
  _impl_.runtimedatalength_ = uint64_t{0u};
}
inline uint64_t UGCProjectMetaData::_internal_runtimedatalength() const {
  return _impl_.runtimedatalength_;
}
inline uint64_t UGCProjectMetaData::runtimedatalength() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.RuntimeDataLength)
  return _internal_runtimedatalength();
}
inline void UGCProjectMetaData::_internal_set_runtimedatalength(uint64_t value) {
  
  _impl_.runtimedatalength_ = value;
}
inline void UGCProjectMetaData::set_runtimedatalength(uint64_t value) {
  _internal_set_runtimedatalength(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.RuntimeDataLength)
}

// uint64 ProjectDataLength = 15;
inline void UGCProjectMetaData::clear_projectdatalength() {
  _impl_.projectdatalength_ = uint64_t{0u};
}
inline uint64_t UGCProjectMetaData::_internal_projectdatalength() const {
  return _impl_.projectdatalength_;
}
inline uint64_t UGCProjectMetaData::projectdatalength() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.ProjectDataLength)
  return _internal_projectdatalength();
}
inline void UGCProjectMetaData::_internal_set_projectdatalength(uint64_t value) {
  
  _impl_.projectdatalength_ = value;
}
inline void UGCProjectMetaData::set_projectdatalength(uint64_t value) {
  _internal_set_projectdatalength(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.ProjectDataLength)
}

// .message.UGCUserDataForCensorship UserDataForCensorship = 16;
inline bool UGCProjectMetaData::_internal_has_userdataforcensorship() const {
  return this != internal_default_instance() && _impl_.userdataforcensorship_ != nullptr;
}
inline bool UGCProjectMetaData::has_userdataforcensorship() const {
  return _internal_has_userdataforcensorship();
}
inline void UGCProjectMetaData::clear_userdataforcensorship() {
  if (GetArenaForAllocation() == nullptr && _impl_.userdataforcensorship_ != nullptr) {
    delete _impl_.userdataforcensorship_;
  }
  _impl_.userdataforcensorship_ = nullptr;
}
inline const ::message::UGCUserDataForCensorship& UGCProjectMetaData::_internal_userdataforcensorship() const {
  const ::message::UGCUserDataForCensorship* p = _impl_.userdataforcensorship_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCUserDataForCensorship&>(
      ::message::_UGCUserDataForCensorship_default_instance_);
}
inline const ::message::UGCUserDataForCensorship& UGCProjectMetaData::userdataforcensorship() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.UserDataForCensorship)
  return _internal_userdataforcensorship();
}
inline void UGCProjectMetaData::unsafe_arena_set_allocated_userdataforcensorship(
    ::message::UGCUserDataForCensorship* userdataforcensorship) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userdataforcensorship_);
  }
  _impl_.userdataforcensorship_ = userdataforcensorship;
  if (userdataforcensorship) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCProjectMetaData.UserDataForCensorship)
}
inline ::message::UGCUserDataForCensorship* UGCProjectMetaData::release_userdataforcensorship() {
  
  ::message::UGCUserDataForCensorship* temp = _impl_.userdataforcensorship_;
  _impl_.userdataforcensorship_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCUserDataForCensorship* UGCProjectMetaData::unsafe_arena_release_userdataforcensorship() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.UserDataForCensorship)
  
  ::message::UGCUserDataForCensorship* temp = _impl_.userdataforcensorship_;
  _impl_.userdataforcensorship_ = nullptr;
  return temp;
}
inline ::message::UGCUserDataForCensorship* UGCProjectMetaData::_internal_mutable_userdataforcensorship() {
  
  if (_impl_.userdataforcensorship_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCUserDataForCensorship>(GetArenaForAllocation());
    _impl_.userdataforcensorship_ = p;
  }
  return _impl_.userdataforcensorship_;
}
inline ::message::UGCUserDataForCensorship* UGCProjectMetaData::mutable_userdataforcensorship() {
  ::message::UGCUserDataForCensorship* _msg = _internal_mutable_userdataforcensorship();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.UserDataForCensorship)
  return _msg;
}
inline void UGCProjectMetaData::set_allocated_userdataforcensorship(::message::UGCUserDataForCensorship* userdataforcensorship) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.userdataforcensorship_;
  }
  if (userdataforcensorship) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userdataforcensorship);
    if (message_arena != submessage_arena) {
      userdataforcensorship = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userdataforcensorship, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userdataforcensorship_ = userdataforcensorship;
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.UserDataForCensorship)
}

// uint32 MapID = 17;
inline void UGCProjectMetaData::clear_mapid() {
  _impl_.mapid_ = 0u;
}
inline uint32_t UGCProjectMetaData::_internal_mapid() const {
  return _impl_.mapid_;
}
inline uint32_t UGCProjectMetaData::mapid() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.MapID)
  return _internal_mapid();
}
inline void UGCProjectMetaData::_internal_set_mapid(uint32_t value) {
  
  _impl_.mapid_ = value;
}
inline void UGCProjectMetaData::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.MapID)
}

// .message.EUGCProjectVersion CompatibleVersion = 18;
inline void UGCProjectMetaData::clear_compatibleversion() {
  _impl_.compatibleversion_ = 0;
}
inline ::message::EUGCProjectVersion UGCProjectMetaData::_internal_compatibleversion() const {
  return static_cast< ::message::EUGCProjectVersion >(_impl_.compatibleversion_);
}
inline ::message::EUGCProjectVersion UGCProjectMetaData::compatibleversion() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.CompatibleVersion)
  return _internal_compatibleversion();
}
inline void UGCProjectMetaData::_internal_set_compatibleversion(::message::EUGCProjectVersion value) {
  
  _impl_.compatibleversion_ = value;
}
inline void UGCProjectMetaData::set_compatibleversion(::message::EUGCProjectVersion value) {
  _internal_set_compatibleversion(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.CompatibleVersion)
}

// bytes RuntimeDataMD5 = 19;
inline void UGCProjectMetaData::clear_runtimedatamd5() {
  _impl_.runtimedatamd5_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::runtimedatamd5() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.RuntimeDataMD5)
  return _internal_runtimedatamd5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_runtimedatamd5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.runtimedatamd5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.RuntimeDataMD5)
}
inline std::string* UGCProjectMetaData::mutable_runtimedatamd5() {
  std::string* _s = _internal_mutable_runtimedatamd5();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.RuntimeDataMD5)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_runtimedatamd5() const {
  return _impl_.runtimedatamd5_.Get();
}
inline void UGCProjectMetaData::_internal_set_runtimedatamd5(const std::string& value) {
  
  _impl_.runtimedatamd5_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_runtimedatamd5() {
  
  return _impl_.runtimedatamd5_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_runtimedatamd5() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.RuntimeDataMD5)
  return _impl_.runtimedatamd5_.Release();
}
inline void UGCProjectMetaData::set_allocated_runtimedatamd5(std::string* runtimedatamd5) {
  if (runtimedatamd5 != nullptr) {
    
  } else {
    
  }
  _impl_.runtimedatamd5_.SetAllocated(runtimedatamd5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.runtimedatamd5_.IsDefault()) {
    _impl_.runtimedatamd5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.RuntimeDataMD5)
}

// bytes ProjectDataMD5 = 20;
inline void UGCProjectMetaData::clear_projectdatamd5() {
  _impl_.projectdatamd5_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::projectdatamd5() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.ProjectDataMD5)
  return _internal_projectdatamd5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_projectdatamd5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.projectdatamd5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.ProjectDataMD5)
}
inline std::string* UGCProjectMetaData::mutable_projectdatamd5() {
  std::string* _s = _internal_mutable_projectdatamd5();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.ProjectDataMD5)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_projectdatamd5() const {
  return _impl_.projectdatamd5_.Get();
}
inline void UGCProjectMetaData::_internal_set_projectdatamd5(const std::string& value) {
  
  _impl_.projectdatamd5_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_projectdatamd5() {
  
  return _impl_.projectdatamd5_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_projectdatamd5() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.ProjectDataMD5)
  return _impl_.projectdatamd5_.Release();
}
inline void UGCProjectMetaData::set_allocated_projectdatamd5(std::string* projectdatamd5) {
  if (projectdatamd5 != nullptr) {
    
  } else {
    
  }
  _impl_.projectdatamd5_.SetAllocated(projectdatamd5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectdatamd5_.IsDefault()) {
    _impl_.projectdatamd5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.ProjectDataMD5)
}

// uint32 ModeTemplateId = 21;
inline void UGCProjectMetaData::clear_modetemplateid() {
  _impl_.modetemplateid_ = 0u;
}
inline uint32_t UGCProjectMetaData::_internal_modetemplateid() const {
  return _impl_.modetemplateid_;
}
inline uint32_t UGCProjectMetaData::modetemplateid() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.ModeTemplateId)
  return _internal_modetemplateid();
}
inline void UGCProjectMetaData::_internal_set_modetemplateid(uint32_t value) {
  
  _impl_.modetemplateid_ = value;
}
inline void UGCProjectMetaData::set_modetemplateid(uint32_t value) {
  _internal_set_modetemplateid(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.ModeTemplateId)
}

// .message.UGCEditorError.ErrorSeverity Severity = 22;
inline void UGCProjectMetaData::clear_severity() {
  _impl_.severity_ = 0;
}
inline ::message::UGCEditorError_ErrorSeverity UGCProjectMetaData::_internal_severity() const {
  return static_cast< ::message::UGCEditorError_ErrorSeverity >(_impl_.severity_);
}
inline ::message::UGCEditorError_ErrorSeverity UGCProjectMetaData::severity() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.Severity)
  return _internal_severity();
}
inline void UGCProjectMetaData::_internal_set_severity(::message::UGCEditorError_ErrorSeverity value) {
  
  _impl_.severity_ = value;
}
inline void UGCProjectMetaData::set_severity(::message::UGCEditorError_ErrorSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.Severity)
}

// bool SecEdit = 23;
inline void UGCProjectMetaData::clear_secedit() {
  _impl_.secedit_ = false;
}
inline bool UGCProjectMetaData::_internal_secedit() const {
  return _impl_.secedit_;
}
inline bool UGCProjectMetaData::secedit() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.SecEdit)
  return _internal_secedit();
}
inline void UGCProjectMetaData::_internal_set_secedit(bool value) {
  
  _impl_.secedit_ = value;
}
inline void UGCProjectMetaData::set_secedit(bool value) {
  _internal_set_secedit(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.SecEdit)
}

// int32 PublicVersion = 24;
inline void UGCProjectMetaData::clear_publicversion() {
  _impl_.publicversion_ = 0;
}
inline int32_t UGCProjectMetaData::_internal_publicversion() const {
  return _impl_.publicversion_;
}
inline int32_t UGCProjectMetaData::publicversion() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.PublicVersion)
  return _internal_publicversion();
}
inline void UGCProjectMetaData::_internal_set_publicversion(int32_t value) {
  
  _impl_.publicversion_ = value;
}
inline void UGCProjectMetaData::set_publicversion(int32_t value) {
  _internal_set_publicversion(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.PublicVersion)
}

// string OriginalWorkshopCode = 25;
inline void UGCProjectMetaData::clear_originalworkshopcode() {
  _impl_.originalworkshopcode_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::originalworkshopcode() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.OriginalWorkshopCode)
  return _internal_originalworkshopcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_originalworkshopcode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.originalworkshopcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.OriginalWorkshopCode)
}
inline std::string* UGCProjectMetaData::mutable_originalworkshopcode() {
  std::string* _s = _internal_mutable_originalworkshopcode();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.OriginalWorkshopCode)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_originalworkshopcode() const {
  return _impl_.originalworkshopcode_.Get();
}
inline void UGCProjectMetaData::_internal_set_originalworkshopcode(const std::string& value) {
  
  _impl_.originalworkshopcode_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_originalworkshopcode() {
  
  return _impl_.originalworkshopcode_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_originalworkshopcode() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.OriginalWorkshopCode)
  return _impl_.originalworkshopcode_.Release();
}
inline void UGCProjectMetaData::set_allocated_originalworkshopcode(std::string* originalworkshopcode) {
  if (originalworkshopcode != nullptr) {
    
  } else {
    
  }
  _impl_.originalworkshopcode_.SetAllocated(originalworkshopcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.originalworkshopcode_.IsDefault()) {
    _impl_.originalworkshopcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.OriginalWorkshopCode)
}

// string GameNameKey = 26;
inline void UGCProjectMetaData::clear_gamenamekey() {
  _impl_.gamenamekey_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::gamenamekey() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.GameNameKey)
  return _internal_gamenamekey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_gamenamekey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gamenamekey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.GameNameKey)
}
inline std::string* UGCProjectMetaData::mutable_gamenamekey() {
  std::string* _s = _internal_mutable_gamenamekey();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.GameNameKey)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_gamenamekey() const {
  return _impl_.gamenamekey_.Get();
}
inline void UGCProjectMetaData::_internal_set_gamenamekey(const std::string& value) {
  
  _impl_.gamenamekey_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_gamenamekey() {
  
  return _impl_.gamenamekey_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_gamenamekey() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.GameNameKey)
  return _impl_.gamenamekey_.Release();
}
inline void UGCProjectMetaData::set_allocated_gamenamekey(std::string* gamenamekey) {
  if (gamenamekey != nullptr) {
    
  } else {
    
  }
  _impl_.gamenamekey_.SetAllocated(gamenamekey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamenamekey_.IsDefault()) {
    _impl_.gamenamekey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.GameNameKey)
}

// string GameDescKey = 27;
inline void UGCProjectMetaData::clear_gamedesckey() {
  _impl_.gamedesckey_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::gamedesckey() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.GameDescKey)
  return _internal_gamedesckey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_gamedesckey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gamedesckey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.GameDescKey)
}
inline std::string* UGCProjectMetaData::mutable_gamedesckey() {
  std::string* _s = _internal_mutable_gamedesckey();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.GameDescKey)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_gamedesckey() const {
  return _impl_.gamedesckey_.Get();
}
inline void UGCProjectMetaData::_internal_set_gamedesckey(const std::string& value) {
  
  _impl_.gamedesckey_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_gamedesckey() {
  
  return _impl_.gamedesckey_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_gamedesckey() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.GameDescKey)
  return _impl_.gamedesckey_.Release();
}
inline void UGCProjectMetaData::set_allocated_gamedesckey(std::string* gamedesckey) {
  if (gamedesckey != nullptr) {
    
  } else {
    
  }
  _impl_.gamedesckey_.SetAllocated(gamedesckey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamedesckey_.IsDefault()) {
    _impl_.gamedesckey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.GameDescKey)
}

// repeated .message.UGCLocData LocData = 28;
inline int UGCProjectMetaData::_internal_locdata_size() const {
  return _impl_.locdata_.size();
}
inline int UGCProjectMetaData::locdata_size() const {
  return _internal_locdata_size();
}
inline void UGCProjectMetaData::clear_locdata() {
  _impl_.locdata_.Clear();
}
inline ::message::UGCLocData* UGCProjectMetaData::mutable_locdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.LocData)
  return _impl_.locdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData >*
UGCProjectMetaData::mutable_locdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCProjectMetaData.LocData)
  return &_impl_.locdata_;
}
inline const ::message::UGCLocData& UGCProjectMetaData::_internal_locdata(int index) const {
  return _impl_.locdata_.Get(index);
}
inline const ::message::UGCLocData& UGCProjectMetaData::locdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.LocData)
  return _internal_locdata(index);
}
inline ::message::UGCLocData* UGCProjectMetaData::_internal_add_locdata() {
  return _impl_.locdata_.Add();
}
inline ::message::UGCLocData* UGCProjectMetaData::add_locdata() {
  ::message::UGCLocData* _add = _internal_add_locdata();
  // @@protoc_insertion_point(field_add:message.UGCProjectMetaData.LocData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData >&
UGCProjectMetaData::locdata() const {
  // @@protoc_insertion_point(field_list:message.UGCProjectMetaData.LocData)
  return _impl_.locdata_;
}

// bytes CustomCover = 29;
inline void UGCProjectMetaData::clear_customcover() {
  _impl_.customcover_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::customcover() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.CustomCover)
  return _internal_customcover();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_customcover(ArgT0&& arg0, ArgT... args) {
 
 _impl_.customcover_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.CustomCover)
}
inline std::string* UGCProjectMetaData::mutable_customcover() {
  std::string* _s = _internal_mutable_customcover();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.CustomCover)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_customcover() const {
  return _impl_.customcover_.Get();
}
inline void UGCProjectMetaData::_internal_set_customcover(const std::string& value) {
  
  _impl_.customcover_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_customcover() {
  
  return _impl_.customcover_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_customcover() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.CustomCover)
  return _impl_.customcover_.Release();
}
inline void UGCProjectMetaData::set_allocated_customcover(std::string* customcover) {
  if (customcover != nullptr) {
    
  } else {
    
  }
  _impl_.customcover_.SetAllocated(customcover, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.customcover_.IsDefault()) {
    _impl_.customcover_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.CustomCover)
}

// string CustomCoverUrl = 30;
inline void UGCProjectMetaData::clear_customcoverurl() {
  _impl_.customcoverurl_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::customcoverurl() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.CustomCoverUrl)
  return _internal_customcoverurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_customcoverurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.customcoverurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.CustomCoverUrl)
}
inline std::string* UGCProjectMetaData::mutable_customcoverurl() {
  std::string* _s = _internal_mutable_customcoverurl();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.CustomCoverUrl)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_customcoverurl() const {
  return _impl_.customcoverurl_.Get();
}
inline void UGCProjectMetaData::_internal_set_customcoverurl(const std::string& value) {
  
  _impl_.customcoverurl_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_customcoverurl() {
  
  return _impl_.customcoverurl_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_customcoverurl() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.CustomCoverUrl)
  return _impl_.customcoverurl_.Release();
}
inline void UGCProjectMetaData::set_allocated_customcoverurl(std::string* customcoverurl) {
  if (customcoverurl != nullptr) {
    
  } else {
    
  }
  _impl_.customcoverurl_.SetAllocated(customcoverurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.customcoverurl_.IsDefault()) {
    _impl_.customcoverurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.CustomCoverUrl)
}

// bytes RoomParams = 31;
inline void UGCProjectMetaData::clear_roomparams() {
  _impl_.roomparams_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::roomparams() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.RoomParams)
  return _internal_roomparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_roomparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roomparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.RoomParams)
}
inline std::string* UGCProjectMetaData::mutable_roomparams() {
  std::string* _s = _internal_mutable_roomparams();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.RoomParams)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_roomparams() const {
  return _impl_.roomparams_.Get();
}
inline void UGCProjectMetaData::_internal_set_roomparams(const std::string& value) {
  
  _impl_.roomparams_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_roomparams() {
  
  return _impl_.roomparams_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_roomparams() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.RoomParams)
  return _impl_.roomparams_.Release();
}
inline void UGCProjectMetaData::set_allocated_roomparams(std::string* roomparams) {
  if (roomparams != nullptr) {
    
  } else {
    
  }
  _impl_.roomparams_.SetAllocated(roomparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roomparams_.IsDefault()) {
    _impl_.roomparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.RoomParams)
}

// bytes PackageDataMD5 = 32;
inline void UGCProjectMetaData::clear_packagedatamd5() {
  _impl_.packagedatamd5_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::packagedatamd5() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.PackageDataMD5)
  return _internal_packagedatamd5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_packagedatamd5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packagedatamd5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.PackageDataMD5)
}
inline std::string* UGCProjectMetaData::mutable_packagedatamd5() {
  std::string* _s = _internal_mutable_packagedatamd5();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.PackageDataMD5)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_packagedatamd5() const {
  return _impl_.packagedatamd5_.Get();
}
inline void UGCProjectMetaData::_internal_set_packagedatamd5(const std::string& value) {
  
  _impl_.packagedatamd5_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_packagedatamd5() {
  
  return _impl_.packagedatamd5_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_packagedatamd5() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.PackageDataMD5)
  return _impl_.packagedatamd5_.Release();
}
inline void UGCProjectMetaData::set_allocated_packagedatamd5(std::string* packagedatamd5) {
  if (packagedatamd5 != nullptr) {
    
  } else {
    
  }
  _impl_.packagedatamd5_.SetAllocated(packagedatamd5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packagedatamd5_.IsDefault()) {
    _impl_.packagedatamd5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.PackageDataMD5)
}

// bytes OpenRoomLocDataMD5 = 33;
inline void UGCProjectMetaData::clear_openroomlocdatamd5() {
  _impl_.openroomlocdatamd5_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::openroomlocdatamd5() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.OpenRoomLocDataMD5)
  return _internal_openroomlocdatamd5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_openroomlocdatamd5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.openroomlocdatamd5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.OpenRoomLocDataMD5)
}
inline std::string* UGCProjectMetaData::mutable_openroomlocdatamd5() {
  std::string* _s = _internal_mutable_openroomlocdatamd5();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.OpenRoomLocDataMD5)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_openroomlocdatamd5() const {
  return _impl_.openroomlocdatamd5_.Get();
}
inline void UGCProjectMetaData::_internal_set_openroomlocdatamd5(const std::string& value) {
  
  _impl_.openroomlocdatamd5_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_openroomlocdatamd5() {
  
  return _impl_.openroomlocdatamd5_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_openroomlocdatamd5() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.OpenRoomLocDataMD5)
  return _impl_.openroomlocdatamd5_.Release();
}
inline void UGCProjectMetaData::set_allocated_openroomlocdatamd5(std::string* openroomlocdatamd5) {
  if (openroomlocdatamd5 != nullptr) {
    
  } else {
    
  }
  _impl_.openroomlocdatamd5_.SetAllocated(openroomlocdatamd5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.openroomlocdatamd5_.IsDefault()) {
    _impl_.openroomlocdatamd5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.OpenRoomLocDataMD5)
}

// .message.UGCRoomHalfWayJoinRule halfWayJoinRule = 34;
inline bool UGCProjectMetaData::_internal_has_halfwayjoinrule() const {
  return this != internal_default_instance() && _impl_.halfwayjoinrule_ != nullptr;
}
inline bool UGCProjectMetaData::has_halfwayjoinrule() const {
  return _internal_has_halfwayjoinrule();
}
inline void UGCProjectMetaData::clear_halfwayjoinrule() {
  if (GetArenaForAllocation() == nullptr && _impl_.halfwayjoinrule_ != nullptr) {
    delete _impl_.halfwayjoinrule_;
  }
  _impl_.halfwayjoinrule_ = nullptr;
}
inline const ::message::UGCRoomHalfWayJoinRule& UGCProjectMetaData::_internal_halfwayjoinrule() const {
  const ::message::UGCRoomHalfWayJoinRule* p = _impl_.halfwayjoinrule_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCRoomHalfWayJoinRule&>(
      ::message::_UGCRoomHalfWayJoinRule_default_instance_);
}
inline const ::message::UGCRoomHalfWayJoinRule& UGCProjectMetaData::halfwayjoinrule() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.halfWayJoinRule)
  return _internal_halfwayjoinrule();
}
inline void UGCProjectMetaData::unsafe_arena_set_allocated_halfwayjoinrule(
    ::message::UGCRoomHalfWayJoinRule* halfwayjoinrule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.halfwayjoinrule_);
  }
  _impl_.halfwayjoinrule_ = halfwayjoinrule;
  if (halfwayjoinrule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCProjectMetaData.halfWayJoinRule)
}
inline ::message::UGCRoomHalfWayJoinRule* UGCProjectMetaData::release_halfwayjoinrule() {
  
  ::message::UGCRoomHalfWayJoinRule* temp = _impl_.halfwayjoinrule_;
  _impl_.halfwayjoinrule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCRoomHalfWayJoinRule* UGCProjectMetaData::unsafe_arena_release_halfwayjoinrule() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.halfWayJoinRule)
  
  ::message::UGCRoomHalfWayJoinRule* temp = _impl_.halfwayjoinrule_;
  _impl_.halfwayjoinrule_ = nullptr;
  return temp;
}
inline ::message::UGCRoomHalfWayJoinRule* UGCProjectMetaData::_internal_mutable_halfwayjoinrule() {
  
  if (_impl_.halfwayjoinrule_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCRoomHalfWayJoinRule>(GetArenaForAllocation());
    _impl_.halfwayjoinrule_ = p;
  }
  return _impl_.halfwayjoinrule_;
}
inline ::message::UGCRoomHalfWayJoinRule* UGCProjectMetaData::mutable_halfwayjoinrule() {
  ::message::UGCRoomHalfWayJoinRule* _msg = _internal_mutable_halfwayjoinrule();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.halfWayJoinRule)
  return _msg;
}
inline void UGCProjectMetaData::set_allocated_halfwayjoinrule(::message::UGCRoomHalfWayJoinRule* halfwayjoinrule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.halfwayjoinrule_;
  }
  if (halfwayjoinrule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(halfwayjoinrule);
    if (message_arena != submessage_arena) {
      halfwayjoinrule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, halfwayjoinrule, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.halfwayjoinrule_ = halfwayjoinrule;
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.halfWayJoinRule)
}

// string SubDesc = 35;
inline void UGCProjectMetaData::clear_subdesc() {
  _impl_.subdesc_.ClearToEmpty();
}
inline const std::string& UGCProjectMetaData::subdesc() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.SubDesc)
  return _internal_subdesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCProjectMetaData::set_subdesc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subdesc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.SubDesc)
}
inline std::string* UGCProjectMetaData::mutable_subdesc() {
  std::string* _s = _internal_mutable_subdesc();
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.SubDesc)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_subdesc() const {
  return _impl_.subdesc_.Get();
}
inline void UGCProjectMetaData::_internal_set_subdesc(const std::string& value) {
  
  _impl_.subdesc_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::_internal_mutable_subdesc() {
  
  return _impl_.subdesc_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCProjectMetaData::release_subdesc() {
  // @@protoc_insertion_point(field_release:message.UGCProjectMetaData.SubDesc)
  return _impl_.subdesc_.Release();
}
inline void UGCProjectMetaData::set_allocated_subdesc(std::string* subdesc) {
  if (subdesc != nullptr) {
    
  } else {
    
  }
  _impl_.subdesc_.SetAllocated(subdesc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subdesc_.IsDefault()) {
    _impl_.subdesc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCProjectMetaData.SubDesc)
}

// repeated bytes DataStorage = 36;
inline int UGCProjectMetaData::_internal_datastorage_size() const {
  return _impl_.datastorage_.size();
}
inline int UGCProjectMetaData::datastorage_size() const {
  return _internal_datastorage_size();
}
inline void UGCProjectMetaData::clear_datastorage() {
  _impl_.datastorage_.Clear();
}
inline std::string* UGCProjectMetaData::add_datastorage() {
  std::string* _s = _internal_add_datastorage();
  // @@protoc_insertion_point(field_add_mutable:message.UGCProjectMetaData.DataStorage)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_datastorage(int index) const {
  return _impl_.datastorage_.Get(index);
}
inline const std::string& UGCProjectMetaData::datastorage(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.DataStorage)
  return _internal_datastorage(index);
}
inline std::string* UGCProjectMetaData::mutable_datastorage(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.DataStorage)
  return _impl_.datastorage_.Mutable(index);
}
inline void UGCProjectMetaData::set_datastorage(int index, const std::string& value) {
  _impl_.datastorage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.DataStorage)
}
inline void UGCProjectMetaData::set_datastorage(int index, std::string&& value) {
  _impl_.datastorage_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.DataStorage)
}
inline void UGCProjectMetaData::set_datastorage(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datastorage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCProjectMetaData.DataStorage)
}
inline void UGCProjectMetaData::set_datastorage(int index, const void* value, size_t size) {
  _impl_.datastorage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCProjectMetaData.DataStorage)
}
inline std::string* UGCProjectMetaData::_internal_add_datastorage() {
  return _impl_.datastorage_.Add();
}
inline void UGCProjectMetaData::add_datastorage(const std::string& value) {
  _impl_.datastorage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCProjectMetaData.DataStorage)
}
inline void UGCProjectMetaData::add_datastorage(std::string&& value) {
  _impl_.datastorage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCProjectMetaData.DataStorage)
}
inline void UGCProjectMetaData::add_datastorage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datastorage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCProjectMetaData.DataStorage)
}
inline void UGCProjectMetaData::add_datastorage(const void* value, size_t size) {
  _impl_.datastorage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCProjectMetaData.DataStorage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCProjectMetaData::datastorage() const {
  // @@protoc_insertion_point(field_list:message.UGCProjectMetaData.DataStorage)
  return _impl_.datastorage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCProjectMetaData::mutable_datastorage() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCProjectMetaData.DataStorage)
  return &_impl_.datastorage_;
}

// repeated bytes LeaderBoard = 37;
inline int UGCProjectMetaData::_internal_leaderboard_size() const {
  return _impl_.leaderboard_.size();
}
inline int UGCProjectMetaData::leaderboard_size() const {
  return _internal_leaderboard_size();
}
inline void UGCProjectMetaData::clear_leaderboard() {
  _impl_.leaderboard_.Clear();
}
inline std::string* UGCProjectMetaData::add_leaderboard() {
  std::string* _s = _internal_add_leaderboard();
  // @@protoc_insertion_point(field_add_mutable:message.UGCProjectMetaData.LeaderBoard)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_leaderboard(int index) const {
  return _impl_.leaderboard_.Get(index);
}
inline const std::string& UGCProjectMetaData::leaderboard(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.LeaderBoard)
  return _internal_leaderboard(index);
}
inline std::string* UGCProjectMetaData::mutable_leaderboard(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.LeaderBoard)
  return _impl_.leaderboard_.Mutable(index);
}
inline void UGCProjectMetaData::set_leaderboard(int index, const std::string& value) {
  _impl_.leaderboard_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.LeaderBoard)
}
inline void UGCProjectMetaData::set_leaderboard(int index, std::string&& value) {
  _impl_.leaderboard_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.LeaderBoard)
}
inline void UGCProjectMetaData::set_leaderboard(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.leaderboard_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCProjectMetaData.LeaderBoard)
}
inline void UGCProjectMetaData::set_leaderboard(int index, const void* value, size_t size) {
  _impl_.leaderboard_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCProjectMetaData.LeaderBoard)
}
inline std::string* UGCProjectMetaData::_internal_add_leaderboard() {
  return _impl_.leaderboard_.Add();
}
inline void UGCProjectMetaData::add_leaderboard(const std::string& value) {
  _impl_.leaderboard_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCProjectMetaData.LeaderBoard)
}
inline void UGCProjectMetaData::add_leaderboard(std::string&& value) {
  _impl_.leaderboard_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCProjectMetaData.LeaderBoard)
}
inline void UGCProjectMetaData::add_leaderboard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.leaderboard_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCProjectMetaData.LeaderBoard)
}
inline void UGCProjectMetaData::add_leaderboard(const void* value, size_t size) {
  _impl_.leaderboard_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCProjectMetaData.LeaderBoard)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCProjectMetaData::leaderboard() const {
  // @@protoc_insertion_point(field_list:message.UGCProjectMetaData.LeaderBoard)
  return _impl_.leaderboard_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCProjectMetaData::mutable_leaderboard() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCProjectMetaData.LeaderBoard)
  return &_impl_.leaderboard_;
}

// bool notify_subscriber = 38;
inline void UGCProjectMetaData::clear_notify_subscriber() {
  _impl_.notify_subscriber_ = false;
}
inline bool UGCProjectMetaData::_internal_notify_subscriber() const {
  return _impl_.notify_subscriber_;
}
inline bool UGCProjectMetaData::notify_subscriber() const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.notify_subscriber)
  return _internal_notify_subscriber();
}
inline void UGCProjectMetaData::_internal_set_notify_subscriber(bool value) {
  
  _impl_.notify_subscriber_ = value;
}
inline void UGCProjectMetaData::set_notify_subscriber(bool value) {
  _internal_set_notify_subscriber(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.notify_subscriber)
}

// repeated bytes Statistic = 39;
inline int UGCProjectMetaData::_internal_statistic_size() const {
  return _impl_.statistic_.size();
}
inline int UGCProjectMetaData::statistic_size() const {
  return _internal_statistic_size();
}
inline void UGCProjectMetaData::clear_statistic() {
  _impl_.statistic_.Clear();
}
inline std::string* UGCProjectMetaData::add_statistic() {
  std::string* _s = _internal_add_statistic();
  // @@protoc_insertion_point(field_add_mutable:message.UGCProjectMetaData.Statistic)
  return _s;
}
inline const std::string& UGCProjectMetaData::_internal_statistic(int index) const {
  return _impl_.statistic_.Get(index);
}
inline const std::string& UGCProjectMetaData::statistic(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCProjectMetaData.Statistic)
  return _internal_statistic(index);
}
inline std::string* UGCProjectMetaData::mutable_statistic(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCProjectMetaData.Statistic)
  return _impl_.statistic_.Mutable(index);
}
inline void UGCProjectMetaData::set_statistic(int index, const std::string& value) {
  _impl_.statistic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.Statistic)
}
inline void UGCProjectMetaData::set_statistic(int index, std::string&& value) {
  _impl_.statistic_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCProjectMetaData.Statistic)
}
inline void UGCProjectMetaData::set_statistic(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.statistic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCProjectMetaData.Statistic)
}
inline void UGCProjectMetaData::set_statistic(int index, const void* value, size_t size) {
  _impl_.statistic_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCProjectMetaData.Statistic)
}
inline std::string* UGCProjectMetaData::_internal_add_statistic() {
  return _impl_.statistic_.Add();
}
inline void UGCProjectMetaData::add_statistic(const std::string& value) {
  _impl_.statistic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCProjectMetaData.Statistic)
}
inline void UGCProjectMetaData::add_statistic(std::string&& value) {
  _impl_.statistic_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCProjectMetaData.Statistic)
}
inline void UGCProjectMetaData::add_statistic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.statistic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCProjectMetaData.Statistic)
}
inline void UGCProjectMetaData::add_statistic(const void* value, size_t size) {
  _impl_.statistic_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCProjectMetaData.Statistic)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCProjectMetaData::statistic() const {
  // @@protoc_insertion_point(field_list:message.UGCProjectMetaData.Statistic)
  return _impl_.statistic_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCProjectMetaData::mutable_statistic() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCProjectMetaData.Statistic)
  return &_impl_.statistic_;
}

// -------------------------------------------------------------------

// UGCUserDataForCensorship_BlobOfCustomStrings

// repeated string StringList = 1;
inline int UGCUserDataForCensorship_BlobOfCustomStrings::_internal_stringlist_size() const {
  return _impl_.stringlist_.size();
}
inline int UGCUserDataForCensorship_BlobOfCustomStrings::stringlist_size() const {
  return _internal_stringlist_size();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::clear_stringlist() {
  _impl_.stringlist_.Clear();
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::add_stringlist() {
  std::string* _s = _internal_add_stringlist();
  // @@protoc_insertion_point(field_add_mutable:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
  return _s;
}
inline const std::string& UGCUserDataForCensorship_BlobOfCustomStrings::_internal_stringlist(int index) const {
  return _impl_.stringlist_.Get(index);
}
inline const std::string& UGCUserDataForCensorship_BlobOfCustomStrings::stringlist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
  return _internal_stringlist(index);
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::mutable_stringlist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
  return _impl_.stringlist_.Mutable(index);
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::set_stringlist(int index, const std::string& value) {
  _impl_.stringlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::set_stringlist(int index, std::string&& value) {
  _impl_.stringlist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::set_stringlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stringlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::set_stringlist(int index, const char* value, size_t size) {
  _impl_.stringlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::_internal_add_stringlist() {
  return _impl_.stringlist_.Add();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::add_stringlist(const std::string& value) {
  _impl_.stringlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::add_stringlist(std::string&& value) {
  _impl_.stringlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::add_stringlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.stringlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::add_stringlist(const char* value, size_t size) {
  _impl_.stringlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCUserDataForCensorship_BlobOfCustomStrings::stringlist() const {
  // @@protoc_insertion_point(field_list:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
  return _impl_.stringlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCUserDataForCensorship_BlobOfCustomStrings::mutable_stringlist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList)
  return &_impl_.stringlist_;
}

// uint32 EntityType = 2;
inline void UGCUserDataForCensorship_BlobOfCustomStrings::clear_entitytype() {
  _impl_.entitytype_ = 0u;
}
inline uint32_t UGCUserDataForCensorship_BlobOfCustomStrings::_internal_entitytype() const {
  return _impl_.entitytype_;
}
inline uint32_t UGCUserDataForCensorship_BlobOfCustomStrings::entitytype() const {
  // @@protoc_insertion_point(field_get:message.UGCUserDataForCensorship.BlobOfCustomStrings.EntityType)
  return _internal_entitytype();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::_internal_set_entitytype(uint32_t value) {
  
  _impl_.entitytype_ = value;
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::set_entitytype(uint32_t value) {
  _internal_set_entitytype(value);
  // @@protoc_insertion_point(field_set:message.UGCUserDataForCensorship.BlobOfCustomStrings.EntityType)
}

// string EntityTypeName = 3;
inline void UGCUserDataForCensorship_BlobOfCustomStrings::clear_entitytypename() {
  _impl_.entitytypename_.ClearToEmpty();
}
inline const std::string& UGCUserDataForCensorship_BlobOfCustomStrings::entitytypename() const {
  // @@protoc_insertion_point(field_get:message.UGCUserDataForCensorship.BlobOfCustomStrings.EntityTypeName)
  return _internal_entitytypename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCUserDataForCensorship_BlobOfCustomStrings::set_entitytypename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entitytypename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCUserDataForCensorship.BlobOfCustomStrings.EntityTypeName)
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::mutable_entitytypename() {
  std::string* _s = _internal_mutable_entitytypename();
  // @@protoc_insertion_point(field_mutable:message.UGCUserDataForCensorship.BlobOfCustomStrings.EntityTypeName)
  return _s;
}
inline const std::string& UGCUserDataForCensorship_BlobOfCustomStrings::_internal_entitytypename() const {
  return _impl_.entitytypename_.Get();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::_internal_set_entitytypename(const std::string& value) {
  
  _impl_.entitytypename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::_internal_mutable_entitytypename() {
  
  return _impl_.entitytypename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::release_entitytypename() {
  // @@protoc_insertion_point(field_release:message.UGCUserDataForCensorship.BlobOfCustomStrings.EntityTypeName)
  return _impl_.entitytypename_.Release();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::set_allocated_entitytypename(std::string* entitytypename) {
  if (entitytypename != nullptr) {
    
  } else {
    
  }
  _impl_.entitytypename_.SetAllocated(entitytypename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entitytypename_.IsDefault()) {
    _impl_.entitytypename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCUserDataForCensorship.BlobOfCustomStrings.EntityTypeName)
}

// uint32 WordFilterType = 4;
inline void UGCUserDataForCensorship_BlobOfCustomStrings::clear_wordfiltertype() {
  _impl_.wordfiltertype_ = 0u;
}
inline uint32_t UGCUserDataForCensorship_BlobOfCustomStrings::_internal_wordfiltertype() const {
  return _impl_.wordfiltertype_;
}
inline uint32_t UGCUserDataForCensorship_BlobOfCustomStrings::wordfiltertype() const {
  // @@protoc_insertion_point(field_get:message.UGCUserDataForCensorship.BlobOfCustomStrings.WordFilterType)
  return _internal_wordfiltertype();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::_internal_set_wordfiltertype(uint32_t value) {
  
  _impl_.wordfiltertype_ = value;
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::set_wordfiltertype(uint32_t value) {
  _internal_set_wordfiltertype(value);
  // @@protoc_insertion_point(field_set:message.UGCUserDataForCensorship.BlobOfCustomStrings.WordFilterType)
}

// string GraphID = 5;
inline void UGCUserDataForCensorship_BlobOfCustomStrings::clear_graphid() {
  _impl_.graphid_.ClearToEmpty();
}
inline const std::string& UGCUserDataForCensorship_BlobOfCustomStrings::graphid() const {
  // @@protoc_insertion_point(field_get:message.UGCUserDataForCensorship.BlobOfCustomStrings.GraphID)
  return _internal_graphid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCUserDataForCensorship_BlobOfCustomStrings::set_graphid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.graphid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCUserDataForCensorship.BlobOfCustomStrings.GraphID)
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::mutable_graphid() {
  std::string* _s = _internal_mutable_graphid();
  // @@protoc_insertion_point(field_mutable:message.UGCUserDataForCensorship.BlobOfCustomStrings.GraphID)
  return _s;
}
inline const std::string& UGCUserDataForCensorship_BlobOfCustomStrings::_internal_graphid() const {
  return _impl_.graphid_.Get();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::_internal_set_graphid(const std::string& value) {
  
  _impl_.graphid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::_internal_mutable_graphid() {
  
  return _impl_.graphid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::release_graphid() {
  // @@protoc_insertion_point(field_release:message.UGCUserDataForCensorship.BlobOfCustomStrings.GraphID)
  return _impl_.graphid_.Release();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::set_allocated_graphid(std::string* graphid) {
  if (graphid != nullptr) {
    
  } else {
    
  }
  _impl_.graphid_.SetAllocated(graphid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.graphid_.IsDefault()) {
    _impl_.graphid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCUserDataForCensorship.BlobOfCustomStrings.GraphID)
}

// string ID = 6;
inline void UGCUserDataForCensorship_BlobOfCustomStrings::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UGCUserDataForCensorship_BlobOfCustomStrings::id() const {
  // @@protoc_insertion_point(field_get:message.UGCUserDataForCensorship.BlobOfCustomStrings.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCUserDataForCensorship_BlobOfCustomStrings::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCUserDataForCensorship.BlobOfCustomStrings.ID)
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:message.UGCUserDataForCensorship.BlobOfCustomStrings.ID)
  return _s;
}
inline const std::string& UGCUserDataForCensorship_BlobOfCustomStrings::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCUserDataForCensorship_BlobOfCustomStrings::release_id() {
  // @@protoc_insertion_point(field_release:message.UGCUserDataForCensorship.BlobOfCustomStrings.ID)
  return _impl_.id_.Release();
}
inline void UGCUserDataForCensorship_BlobOfCustomStrings::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCUserDataForCensorship.BlobOfCustomStrings.ID)
}

// -------------------------------------------------------------------

// UGCUserDataForCensorship

// repeated .message.UGCUserDataForCensorship.BlobOfCustomStrings CustomStrings = 1;
inline int UGCUserDataForCensorship::_internal_customstrings_size() const {
  return _impl_.customstrings_.size();
}
inline int UGCUserDataForCensorship::customstrings_size() const {
  return _internal_customstrings_size();
}
inline void UGCUserDataForCensorship::clear_customstrings() {
  _impl_.customstrings_.Clear();
}
inline ::message::UGCUserDataForCensorship_BlobOfCustomStrings* UGCUserDataForCensorship::mutable_customstrings(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCUserDataForCensorship.CustomStrings)
  return _impl_.customstrings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCUserDataForCensorship_BlobOfCustomStrings >*
UGCUserDataForCensorship::mutable_customstrings() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCUserDataForCensorship.CustomStrings)
  return &_impl_.customstrings_;
}
inline const ::message::UGCUserDataForCensorship_BlobOfCustomStrings& UGCUserDataForCensorship::_internal_customstrings(int index) const {
  return _impl_.customstrings_.Get(index);
}
inline const ::message::UGCUserDataForCensorship_BlobOfCustomStrings& UGCUserDataForCensorship::customstrings(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCUserDataForCensorship.CustomStrings)
  return _internal_customstrings(index);
}
inline ::message::UGCUserDataForCensorship_BlobOfCustomStrings* UGCUserDataForCensorship::_internal_add_customstrings() {
  return _impl_.customstrings_.Add();
}
inline ::message::UGCUserDataForCensorship_BlobOfCustomStrings* UGCUserDataForCensorship::add_customstrings() {
  ::message::UGCUserDataForCensorship_BlobOfCustomStrings* _add = _internal_add_customstrings();
  // @@protoc_insertion_point(field_add:message.UGCUserDataForCensorship.CustomStrings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCUserDataForCensorship_BlobOfCustomStrings >&
UGCUserDataForCensorship::customstrings() const {
  // @@protoc_insertion_point(field_list:message.UGCUserDataForCensorship.CustomStrings)
  return _impl_.customstrings_;
}

// -------------------------------------------------------------------

// UGCMapProjectData_OB35_And_Earlier

// bytes EntityBindingDataBytes = 1;
inline void UGCMapProjectData_OB35_And_Earlier::clear_entitybindingdatabytes() {
  _impl_.entitybindingdatabytes_.ClearToEmpty();
}
inline const std::string& UGCMapProjectData_OB35_And_Earlier::entitybindingdatabytes() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData_OB35_And_Earlier.EntityBindingDataBytes)
  return _internal_entitybindingdatabytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCMapProjectData_OB35_And_Earlier::set_entitybindingdatabytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entitybindingdatabytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData_OB35_And_Earlier.EntityBindingDataBytes)
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::mutable_entitybindingdatabytes() {
  std::string* _s = _internal_mutable_entitybindingdatabytes();
  // @@protoc_insertion_point(field_mutable:message.UGCMapProjectData_OB35_And_Earlier.EntityBindingDataBytes)
  return _s;
}
inline const std::string& UGCMapProjectData_OB35_And_Earlier::_internal_entitybindingdatabytes() const {
  return _impl_.entitybindingdatabytes_.Get();
}
inline void UGCMapProjectData_OB35_And_Earlier::_internal_set_entitybindingdatabytes(const std::string& value) {
  
  _impl_.entitybindingdatabytes_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::_internal_mutable_entitybindingdatabytes() {
  
  return _impl_.entitybindingdatabytes_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::release_entitybindingdatabytes() {
  // @@protoc_insertion_point(field_release:message.UGCMapProjectData_OB35_And_Earlier.EntityBindingDataBytes)
  return _impl_.entitybindingdatabytes_.Release();
}
inline void UGCMapProjectData_OB35_And_Earlier::set_allocated_entitybindingdatabytes(std::string* entitybindingdatabytes) {
  if (entitybindingdatabytes != nullptr) {
    
  } else {
    
  }
  _impl_.entitybindingdatabytes_.SetAllocated(entitybindingdatabytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entitybindingdatabytes_.IsDefault()) {
    _impl_.entitybindingdatabytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapProjectData_OB35_And_Earlier.EntityBindingDataBytes)
}

// bytes RuntimeDataBytes = 2;
inline void UGCMapProjectData_OB35_And_Earlier::clear_runtimedatabytes() {
  _impl_.runtimedatabytes_.ClearToEmpty();
}
inline const std::string& UGCMapProjectData_OB35_And_Earlier::runtimedatabytes() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData_OB35_And_Earlier.RuntimeDataBytes)
  return _internal_runtimedatabytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCMapProjectData_OB35_And_Earlier::set_runtimedatabytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.runtimedatabytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData_OB35_And_Earlier.RuntimeDataBytes)
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::mutable_runtimedatabytes() {
  std::string* _s = _internal_mutable_runtimedatabytes();
  // @@protoc_insertion_point(field_mutable:message.UGCMapProjectData_OB35_And_Earlier.RuntimeDataBytes)
  return _s;
}
inline const std::string& UGCMapProjectData_OB35_And_Earlier::_internal_runtimedatabytes() const {
  return _impl_.runtimedatabytes_.Get();
}
inline void UGCMapProjectData_OB35_And_Earlier::_internal_set_runtimedatabytes(const std::string& value) {
  
  _impl_.runtimedatabytes_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::_internal_mutable_runtimedatabytes() {
  
  return _impl_.runtimedatabytes_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::release_runtimedatabytes() {
  // @@protoc_insertion_point(field_release:message.UGCMapProjectData_OB35_And_Earlier.RuntimeDataBytes)
  return _impl_.runtimedatabytes_.Release();
}
inline void UGCMapProjectData_OB35_And_Earlier::set_allocated_runtimedatabytes(std::string* runtimedatabytes) {
  if (runtimedatabytes != nullptr) {
    
  } else {
    
  }
  _impl_.runtimedatabytes_.SetAllocated(runtimedatabytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.runtimedatabytes_.IsDefault()) {
    _impl_.runtimedatabytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapProjectData_OB35_And_Earlier.RuntimeDataBytes)
}

// string GameName = 3;
inline void UGCMapProjectData_OB35_And_Earlier::clear_gamename() {
  _impl_.gamename_.ClearToEmpty();
}
inline const std::string& UGCMapProjectData_OB35_And_Earlier::gamename() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData_OB35_And_Earlier.GameName)
  return _internal_gamename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCMapProjectData_OB35_And_Earlier::set_gamename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gamename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData_OB35_And_Earlier.GameName)
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::mutable_gamename() {
  std::string* _s = _internal_mutable_gamename();
  // @@protoc_insertion_point(field_mutable:message.UGCMapProjectData_OB35_And_Earlier.GameName)
  return _s;
}
inline const std::string& UGCMapProjectData_OB35_And_Earlier::_internal_gamename() const {
  return _impl_.gamename_.Get();
}
inline void UGCMapProjectData_OB35_And_Earlier::_internal_set_gamename(const std::string& value) {
  
  _impl_.gamename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::_internal_mutable_gamename() {
  
  return _impl_.gamename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::release_gamename() {
  // @@protoc_insertion_point(field_release:message.UGCMapProjectData_OB35_And_Earlier.GameName)
  return _impl_.gamename_.Release();
}
inline void UGCMapProjectData_OB35_And_Earlier::set_allocated_gamename(std::string* gamename) {
  if (gamename != nullptr) {
    
  } else {
    
  }
  _impl_.gamename_.SetAllocated(gamename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamename_.IsDefault()) {
    _impl_.gamename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapProjectData_OB35_And_Earlier.GameName)
}

// string GameDesc = 4;
inline void UGCMapProjectData_OB35_And_Earlier::clear_gamedesc() {
  _impl_.gamedesc_.ClearToEmpty();
}
inline const std::string& UGCMapProjectData_OB35_And_Earlier::gamedesc() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData_OB35_And_Earlier.GameDesc)
  return _internal_gamedesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCMapProjectData_OB35_And_Earlier::set_gamedesc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gamedesc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData_OB35_And_Earlier.GameDesc)
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::mutable_gamedesc() {
  std::string* _s = _internal_mutable_gamedesc();
  // @@protoc_insertion_point(field_mutable:message.UGCMapProjectData_OB35_And_Earlier.GameDesc)
  return _s;
}
inline const std::string& UGCMapProjectData_OB35_And_Earlier::_internal_gamedesc() const {
  return _impl_.gamedesc_.Get();
}
inline void UGCMapProjectData_OB35_And_Earlier::_internal_set_gamedesc(const std::string& value) {
  
  _impl_.gamedesc_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::_internal_mutable_gamedesc() {
  
  return _impl_.gamedesc_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCMapProjectData_OB35_And_Earlier::release_gamedesc() {
  // @@protoc_insertion_point(field_release:message.UGCMapProjectData_OB35_And_Earlier.GameDesc)
  return _impl_.gamedesc_.Release();
}
inline void UGCMapProjectData_OB35_And_Earlier::set_allocated_gamedesc(std::string* gamedesc) {
  if (gamedesc != nullptr) {
    
  } else {
    
  }
  _impl_.gamedesc_.SetAllocated(gamedesc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamedesc_.IsDefault()) {
    _impl_.gamedesc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapProjectData_OB35_And_Earlier.GameDesc)
}

// uint32 GameMode = 5;
inline void UGCMapProjectData_OB35_And_Earlier::clear_gamemode() {
  _impl_.gamemode_ = 0u;
}
inline uint32_t UGCMapProjectData_OB35_And_Earlier::_internal_gamemode() const {
  return _impl_.gamemode_;
}
inline uint32_t UGCMapProjectData_OB35_And_Earlier::gamemode() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData_OB35_And_Earlier.GameMode)
  return _internal_gamemode();
}
inline void UGCMapProjectData_OB35_And_Earlier::_internal_set_gamemode(uint32_t value) {
  
  _impl_.gamemode_ = value;
}
inline void UGCMapProjectData_OB35_And_Earlier::set_gamemode(uint32_t value) {
  _internal_set_gamemode(value);
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData_OB35_And_Earlier.GameMode)
}

// uint32 GroupMode = 6;
inline void UGCMapProjectData_OB35_And_Earlier::clear_groupmode() {
  _impl_.groupmode_ = 0u;
}
inline uint32_t UGCMapProjectData_OB35_And_Earlier::_internal_groupmode() const {
  return _impl_.groupmode_;
}
inline uint32_t UGCMapProjectData_OB35_And_Earlier::groupmode() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData_OB35_And_Earlier.GroupMode)
  return _internal_groupmode();
}
inline void UGCMapProjectData_OB35_And_Earlier::_internal_set_groupmode(uint32_t value) {
  
  _impl_.groupmode_ = value;
}
inline void UGCMapProjectData_OB35_And_Earlier::set_groupmode(uint32_t value) {
  _internal_set_groupmode(value);
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData_OB35_And_Earlier.GroupMode)
}

// uint32 TeamCount = 7;
inline void UGCMapProjectData_OB35_And_Earlier::clear_teamcount() {
  _impl_.teamcount_ = 0u;
}
inline uint32_t UGCMapProjectData_OB35_And_Earlier::_internal_teamcount() const {
  return _impl_.teamcount_;
}
inline uint32_t UGCMapProjectData_OB35_And_Earlier::teamcount() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData_OB35_And_Earlier.TeamCount)
  return _internal_teamcount();
}
inline void UGCMapProjectData_OB35_And_Earlier::_internal_set_teamcount(uint32_t value) {
  
  _impl_.teamcount_ = value;
}
inline void UGCMapProjectData_OB35_And_Earlier::set_teamcount(uint32_t value) {
  _internal_set_teamcount(value);
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData_OB35_And_Earlier.TeamCount)
}

// -------------------------------------------------------------------

// UGCMapProjectData

// repeated .message.UGCLogicEntityDataForEditor AllEntityData = 1;
inline int UGCMapProjectData::_internal_allentitydata_size() const {
  return _impl_.allentitydata_.size();
}
inline int UGCMapProjectData::allentitydata_size() const {
  return _internal_allentitydata_size();
}
inline void UGCMapProjectData::clear_allentitydata() {
  _impl_.allentitydata_.Clear();
}
inline ::message::UGCLogicEntityDataForEditor* UGCMapProjectData::mutable_allentitydata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCMapProjectData.AllEntityData)
  return _impl_.allentitydata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataForEditor >*
UGCMapProjectData::mutable_allentitydata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCMapProjectData.AllEntityData)
  return &_impl_.allentitydata_;
}
inline const ::message::UGCLogicEntityDataForEditor& UGCMapProjectData::_internal_allentitydata(int index) const {
  return _impl_.allentitydata_.Get(index);
}
inline const ::message::UGCLogicEntityDataForEditor& UGCMapProjectData::allentitydata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData.AllEntityData)
  return _internal_allentitydata(index);
}
inline ::message::UGCLogicEntityDataForEditor* UGCMapProjectData::_internal_add_allentitydata() {
  return _impl_.allentitydata_.Add();
}
inline ::message::UGCLogicEntityDataForEditor* UGCMapProjectData::add_allentitydata() {
  ::message::UGCLogicEntityDataForEditor* _add = _internal_add_allentitydata();
  // @@protoc_insertion_point(field_add:message.UGCMapProjectData.AllEntityData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLogicEntityDataForEditor >&
UGCMapProjectData::allentitydata() const {
  // @@protoc_insertion_point(field_list:message.UGCMapProjectData.AllEntityData)
  return _impl_.allentitydata_;
}

// bytes RuntimeDataBytes = 2;
inline void UGCMapProjectData::clear_runtimedatabytes() {
  _impl_.runtimedatabytes_.ClearToEmpty();
}
inline const std::string& UGCMapProjectData::runtimedatabytes() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData.RuntimeDataBytes)
  return _internal_runtimedatabytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCMapProjectData::set_runtimedatabytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.runtimedatabytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData.RuntimeDataBytes)
}
inline std::string* UGCMapProjectData::mutable_runtimedatabytes() {
  std::string* _s = _internal_mutable_runtimedatabytes();
  // @@protoc_insertion_point(field_mutable:message.UGCMapProjectData.RuntimeDataBytes)
  return _s;
}
inline const std::string& UGCMapProjectData::_internal_runtimedatabytes() const {
  return _impl_.runtimedatabytes_.Get();
}
inline void UGCMapProjectData::_internal_set_runtimedatabytes(const std::string& value) {
  
  _impl_.runtimedatabytes_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMapProjectData::_internal_mutable_runtimedatabytes() {
  
  return _impl_.runtimedatabytes_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCMapProjectData::release_runtimedatabytes() {
  // @@protoc_insertion_point(field_release:message.UGCMapProjectData.RuntimeDataBytes)
  return _impl_.runtimedatabytes_.Release();
}
inline void UGCMapProjectData::set_allocated_runtimedatabytes(std::string* runtimedatabytes) {
  if (runtimedatabytes != nullptr) {
    
  } else {
    
  }
  _impl_.runtimedatabytes_.SetAllocated(runtimedatabytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.runtimedatabytes_.IsDefault()) {
    _impl_.runtimedatabytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapProjectData.RuntimeDataBytes)
}

// string GameName = 3;
inline void UGCMapProjectData::clear_gamename() {
  _impl_.gamename_.ClearToEmpty();
}
inline const std::string& UGCMapProjectData::gamename() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData.GameName)
  return _internal_gamename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCMapProjectData::set_gamename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gamename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData.GameName)
}
inline std::string* UGCMapProjectData::mutable_gamename() {
  std::string* _s = _internal_mutable_gamename();
  // @@protoc_insertion_point(field_mutable:message.UGCMapProjectData.GameName)
  return _s;
}
inline const std::string& UGCMapProjectData::_internal_gamename() const {
  return _impl_.gamename_.Get();
}
inline void UGCMapProjectData::_internal_set_gamename(const std::string& value) {
  
  _impl_.gamename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMapProjectData::_internal_mutable_gamename() {
  
  return _impl_.gamename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCMapProjectData::release_gamename() {
  // @@protoc_insertion_point(field_release:message.UGCMapProjectData.GameName)
  return _impl_.gamename_.Release();
}
inline void UGCMapProjectData::set_allocated_gamename(std::string* gamename) {
  if (gamename != nullptr) {
    
  } else {
    
  }
  _impl_.gamename_.SetAllocated(gamename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamename_.IsDefault()) {
    _impl_.gamename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapProjectData.GameName)
}

// string GameDesc = 4;
inline void UGCMapProjectData::clear_gamedesc() {
  _impl_.gamedesc_.ClearToEmpty();
}
inline const std::string& UGCMapProjectData::gamedesc() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData.GameDesc)
  return _internal_gamedesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCMapProjectData::set_gamedesc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gamedesc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData.GameDesc)
}
inline std::string* UGCMapProjectData::mutable_gamedesc() {
  std::string* _s = _internal_mutable_gamedesc();
  // @@protoc_insertion_point(field_mutable:message.UGCMapProjectData.GameDesc)
  return _s;
}
inline const std::string& UGCMapProjectData::_internal_gamedesc() const {
  return _impl_.gamedesc_.Get();
}
inline void UGCMapProjectData::_internal_set_gamedesc(const std::string& value) {
  
  _impl_.gamedesc_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMapProjectData::_internal_mutable_gamedesc() {
  
  return _impl_.gamedesc_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCMapProjectData::release_gamedesc() {
  // @@protoc_insertion_point(field_release:message.UGCMapProjectData.GameDesc)
  return _impl_.gamedesc_.Release();
}
inline void UGCMapProjectData::set_allocated_gamedesc(std::string* gamedesc) {
  if (gamedesc != nullptr) {
    
  } else {
    
  }
  _impl_.gamedesc_.SetAllocated(gamedesc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gamedesc_.IsDefault()) {
    _impl_.gamedesc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCMapProjectData.GameDesc)
}

// uint32 GameMode = 5;
inline void UGCMapProjectData::clear_gamemode() {
  _impl_.gamemode_ = 0u;
}
inline uint32_t UGCMapProjectData::_internal_gamemode() const {
  return _impl_.gamemode_;
}
inline uint32_t UGCMapProjectData::gamemode() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData.GameMode)
  return _internal_gamemode();
}
inline void UGCMapProjectData::_internal_set_gamemode(uint32_t value) {
  
  _impl_.gamemode_ = value;
}
inline void UGCMapProjectData::set_gamemode(uint32_t value) {
  _internal_set_gamemode(value);
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData.GameMode)
}

// uint32 GroupMode = 6;
inline void UGCMapProjectData::clear_groupmode() {
  _impl_.groupmode_ = 0u;
}
inline uint32_t UGCMapProjectData::_internal_groupmode() const {
  return _impl_.groupmode_;
}
inline uint32_t UGCMapProjectData::groupmode() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData.GroupMode)
  return _internal_groupmode();
}
inline void UGCMapProjectData::_internal_set_groupmode(uint32_t value) {
  
  _impl_.groupmode_ = value;
}
inline void UGCMapProjectData::set_groupmode(uint32_t value) {
  _internal_set_groupmode(value);
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData.GroupMode)
}

// uint32 TeamCount = 7;
inline void UGCMapProjectData::clear_teamcount() {
  _impl_.teamcount_ = 0u;
}
inline uint32_t UGCMapProjectData::_internal_teamcount() const {
  return _impl_.teamcount_;
}
inline uint32_t UGCMapProjectData::teamcount() const {
  // @@protoc_insertion_point(field_get:message.UGCMapProjectData.TeamCount)
  return _internal_teamcount();
}
inline void UGCMapProjectData::_internal_set_teamcount(uint32_t value) {
  
  _impl_.teamcount_ = value;
}
inline void UGCMapProjectData::set_teamcount(uint32_t value) {
  _internal_set_teamcount(value);
  // @@protoc_insertion_point(field_set:message.UGCMapProjectData.TeamCount)
}

// -------------------------------------------------------------------

// UGCEditorError_ErrorCodeData

// .message.UGCEditorError.ErrorCode ErrorCode = 1;
inline void UGCEditorError_ErrorCodeData::clear_errorcode() {
  _impl_.errorcode_ = 0;
}
inline ::message::UGCEditorError_ErrorCode UGCEditorError_ErrorCodeData::_internal_errorcode() const {
  return static_cast< ::message::UGCEditorError_ErrorCode >(_impl_.errorcode_);
}
inline ::message::UGCEditorError_ErrorCode UGCEditorError_ErrorCodeData::errorcode() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorCodeData.ErrorCode)
  return _internal_errorcode();
}
inline void UGCEditorError_ErrorCodeData::_internal_set_errorcode(::message::UGCEditorError_ErrorCode value) {
  
  _impl_.errorcode_ = value;
}
inline void UGCEditorError_ErrorCodeData::set_errorcode(::message::UGCEditorError_ErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorCodeData.ErrorCode)
}

// .message.UGCEditorError.ErrorSeverity Severity = 2;
inline void UGCEditorError_ErrorCodeData::clear_severity() {
  _impl_.severity_ = 0;
}
inline ::message::UGCEditorError_ErrorSeverity UGCEditorError_ErrorCodeData::_internal_severity() const {
  return static_cast< ::message::UGCEditorError_ErrorSeverity >(_impl_.severity_);
}
inline ::message::UGCEditorError_ErrorSeverity UGCEditorError_ErrorCodeData::severity() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorCodeData.Severity)
  return _internal_severity();
}
inline void UGCEditorError_ErrorCodeData::_internal_set_severity(::message::UGCEditorError_ErrorSeverity value) {
  
  _impl_.severity_ = value;
}
inline void UGCEditorError_ErrorCodeData::set_severity(::message::UGCEditorError_ErrorSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorCodeData.Severity)
}

// uint32 Priority = 3;
inline void UGCEditorError_ErrorCodeData::clear_priority() {
  _impl_.priority_ = 0u;
}
inline uint32_t UGCEditorError_ErrorCodeData::_internal_priority() const {
  return _impl_.priority_;
}
inline uint32_t UGCEditorError_ErrorCodeData::priority() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorCodeData.Priority)
  return _internal_priority();
}
inline void UGCEditorError_ErrorCodeData::_internal_set_priority(uint32_t value) {
  
  _impl_.priority_ = value;
}
inline void UGCEditorError_ErrorCodeData::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorCodeData.Priority)
}

// string LocKey = 4;
inline void UGCEditorError_ErrorCodeData::clear_lockey() {
  _impl_.lockey_.ClearToEmpty();
}
inline const std::string& UGCEditorError_ErrorCodeData::lockey() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorCodeData.LocKey)
  return _internal_lockey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCEditorError_ErrorCodeData::set_lockey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lockey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorCodeData.LocKey)
}
inline std::string* UGCEditorError_ErrorCodeData::mutable_lockey() {
  std::string* _s = _internal_mutable_lockey();
  // @@protoc_insertion_point(field_mutable:message.UGCEditorError.ErrorCodeData.LocKey)
  return _s;
}
inline const std::string& UGCEditorError_ErrorCodeData::_internal_lockey() const {
  return _impl_.lockey_.Get();
}
inline void UGCEditorError_ErrorCodeData::_internal_set_lockey(const std::string& value) {
  
  _impl_.lockey_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorCodeData::_internal_mutable_lockey() {
  
  return _impl_.lockey_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorCodeData::release_lockey() {
  // @@protoc_insertion_point(field_release:message.UGCEditorError.ErrorCodeData.LocKey)
  return _impl_.lockey_.Release();
}
inline void UGCEditorError_ErrorCodeData::set_allocated_lockey(std::string* lockey) {
  if (lockey != nullptr) {
    
  } else {
    
  }
  _impl_.lockey_.SetAllocated(lockey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lockey_.IsDefault()) {
    _impl_.lockey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCEditorError.ErrorCodeData.LocKey)
}

// string ConsoleKEY = 5;
inline void UGCEditorError_ErrorCodeData::clear_consolekey() {
  _impl_.consolekey_.ClearToEmpty();
}
inline const std::string& UGCEditorError_ErrorCodeData::consolekey() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorCodeData.ConsoleKEY)
  return _internal_consolekey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCEditorError_ErrorCodeData::set_consolekey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.consolekey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorCodeData.ConsoleKEY)
}
inline std::string* UGCEditorError_ErrorCodeData::mutable_consolekey() {
  std::string* _s = _internal_mutable_consolekey();
  // @@protoc_insertion_point(field_mutable:message.UGCEditorError.ErrorCodeData.ConsoleKEY)
  return _s;
}
inline const std::string& UGCEditorError_ErrorCodeData::_internal_consolekey() const {
  return _impl_.consolekey_.Get();
}
inline void UGCEditorError_ErrorCodeData::_internal_set_consolekey(const std::string& value) {
  
  _impl_.consolekey_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorCodeData::_internal_mutable_consolekey() {
  
  return _impl_.consolekey_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorCodeData::release_consolekey() {
  // @@protoc_insertion_point(field_release:message.UGCEditorError.ErrorCodeData.ConsoleKEY)
  return _impl_.consolekey_.Release();
}
inline void UGCEditorError_ErrorCodeData::set_allocated_consolekey(std::string* consolekey) {
  if (consolekey != nullptr) {
    
  } else {
    
  }
  _impl_.consolekey_.SetAllocated(consolekey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.consolekey_.IsDefault()) {
    _impl_.consolekey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCEditorError.ErrorCodeData.ConsoleKEY)
}

// -------------------------------------------------------------------

// UGCEditorError_ErrorEntry

// .message.UGCEditorError.ErrorCode ErrorCode = 1;
inline void UGCEditorError_ErrorEntry::clear_errorcode() {
  _impl_.errorcode_ = 0;
}
inline ::message::UGCEditorError_ErrorCode UGCEditorError_ErrorEntry::_internal_errorcode() const {
  return static_cast< ::message::UGCEditorError_ErrorCode >(_impl_.errorcode_);
}
inline ::message::UGCEditorError_ErrorCode UGCEditorError_ErrorEntry::errorcode() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorEntry.ErrorCode)
  return _internal_errorcode();
}
inline void UGCEditorError_ErrorEntry::_internal_set_errorcode(::message::UGCEditorError_ErrorCode value) {
  
  _impl_.errorcode_ = value;
}
inline void UGCEditorError_ErrorEntry::set_errorcode(::message::UGCEditorError_ErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorEntry.ErrorCode)
}

// string EntityType = 2;
inline void UGCEditorError_ErrorEntry::clear_entitytype() {
  _impl_.entitytype_.ClearToEmpty();
}
inline const std::string& UGCEditorError_ErrorEntry::entitytype() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorEntry.EntityType)
  return _internal_entitytype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCEditorError_ErrorEntry::set_entitytype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entitytype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorEntry.EntityType)
}
inline std::string* UGCEditorError_ErrorEntry::mutable_entitytype() {
  std::string* _s = _internal_mutable_entitytype();
  // @@protoc_insertion_point(field_mutable:message.UGCEditorError.ErrorEntry.EntityType)
  return _s;
}
inline const std::string& UGCEditorError_ErrorEntry::_internal_entitytype() const {
  return _impl_.entitytype_.Get();
}
inline void UGCEditorError_ErrorEntry::_internal_set_entitytype(const std::string& value) {
  
  _impl_.entitytype_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorEntry::_internal_mutable_entitytype() {
  
  return _impl_.entitytype_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorEntry::release_entitytype() {
  // @@protoc_insertion_point(field_release:message.UGCEditorError.ErrorEntry.EntityType)
  return _impl_.entitytype_.Release();
}
inline void UGCEditorError_ErrorEntry::set_allocated_entitytype(std::string* entitytype) {
  if (entitytype != nullptr) {
    
  } else {
    
  }
  _impl_.entitytype_.SetAllocated(entitytype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entitytype_.IsDefault()) {
    _impl_.entitytype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCEditorError.ErrorEntry.EntityType)
}

// string EntityID = 3;
inline void UGCEditorError_ErrorEntry::clear_entityid() {
  _impl_.entityid_.ClearToEmpty();
}
inline const std::string& UGCEditorError_ErrorEntry::entityid() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorEntry.EntityID)
  return _internal_entityid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCEditorError_ErrorEntry::set_entityid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.entityid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorEntry.EntityID)
}
inline std::string* UGCEditorError_ErrorEntry::mutable_entityid() {
  std::string* _s = _internal_mutable_entityid();
  // @@protoc_insertion_point(field_mutable:message.UGCEditorError.ErrorEntry.EntityID)
  return _s;
}
inline const std::string& UGCEditorError_ErrorEntry::_internal_entityid() const {
  return _impl_.entityid_.Get();
}
inline void UGCEditorError_ErrorEntry::_internal_set_entityid(const std::string& value) {
  
  _impl_.entityid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorEntry::_internal_mutable_entityid() {
  
  return _impl_.entityid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorEntry::release_entityid() {
  // @@protoc_insertion_point(field_release:message.UGCEditorError.ErrorEntry.EntityID)
  return _impl_.entityid_.Release();
}
inline void UGCEditorError_ErrorEntry::set_allocated_entityid(std::string* entityid) {
  if (entityid != nullptr) {
    
  } else {
    
  }
  _impl_.entityid_.SetAllocated(entityid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.entityid_.IsDefault()) {
    _impl_.entityid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCEditorError.ErrorEntry.EntityID)
}

// string GraphID = 4;
inline void UGCEditorError_ErrorEntry::clear_graphid() {
  _impl_.graphid_.ClearToEmpty();
}
inline const std::string& UGCEditorError_ErrorEntry::graphid() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorEntry.GraphID)
  return _internal_graphid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCEditorError_ErrorEntry::set_graphid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.graphid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorEntry.GraphID)
}
inline std::string* UGCEditorError_ErrorEntry::mutable_graphid() {
  std::string* _s = _internal_mutable_graphid();
  // @@protoc_insertion_point(field_mutable:message.UGCEditorError.ErrorEntry.GraphID)
  return _s;
}
inline const std::string& UGCEditorError_ErrorEntry::_internal_graphid() const {
  return _impl_.graphid_.Get();
}
inline void UGCEditorError_ErrorEntry::_internal_set_graphid(const std::string& value) {
  
  _impl_.graphid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorEntry::_internal_mutable_graphid() {
  
  return _impl_.graphid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorEntry::release_graphid() {
  // @@protoc_insertion_point(field_release:message.UGCEditorError.ErrorEntry.GraphID)
  return _impl_.graphid_.Release();
}
inline void UGCEditorError_ErrorEntry::set_allocated_graphid(std::string* graphid) {
  if (graphid != nullptr) {
    
  } else {
    
  }
  _impl_.graphid_.SetAllocated(graphid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.graphid_.IsDefault()) {
    _impl_.graphid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCEditorError.ErrorEntry.GraphID)
}

// uint32 SceneEditItemType = 5;
inline void UGCEditorError_ErrorEntry::clear_sceneedititemtype() {
  _impl_.sceneedititemtype_ = 0u;
}
inline uint32_t UGCEditorError_ErrorEntry::_internal_sceneedititemtype() const {
  return _impl_.sceneedititemtype_;
}
inline uint32_t UGCEditorError_ErrorEntry::sceneedititemtype() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorEntry.SceneEditItemType)
  return _internal_sceneedititemtype();
}
inline void UGCEditorError_ErrorEntry::_internal_set_sceneedititemtype(uint32_t value) {
  
  _impl_.sceneedititemtype_ = value;
}
inline void UGCEditorError_ErrorEntry::set_sceneedititemtype(uint32_t value) {
  _internal_set_sceneedititemtype(value);
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorEntry.SceneEditItemType)
}

// string BlockID = 6;
inline void UGCEditorError_ErrorEntry::clear_blockid() {
  _impl_.blockid_.ClearToEmpty();
}
inline const std::string& UGCEditorError_ErrorEntry::blockid() const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorEntry.BlockID)
  return _internal_blockid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCEditorError_ErrorEntry::set_blockid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blockid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorEntry.BlockID)
}
inline std::string* UGCEditorError_ErrorEntry::mutable_blockid() {
  std::string* _s = _internal_mutable_blockid();
  // @@protoc_insertion_point(field_mutable:message.UGCEditorError.ErrorEntry.BlockID)
  return _s;
}
inline const std::string& UGCEditorError_ErrorEntry::_internal_blockid() const {
  return _impl_.blockid_.Get();
}
inline void UGCEditorError_ErrorEntry::_internal_set_blockid(const std::string& value) {
  
  _impl_.blockid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorEntry::_internal_mutable_blockid() {
  
  return _impl_.blockid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCEditorError_ErrorEntry::release_blockid() {
  // @@protoc_insertion_point(field_release:message.UGCEditorError.ErrorEntry.BlockID)
  return _impl_.blockid_.Release();
}
inline void UGCEditorError_ErrorEntry::set_allocated_blockid(std::string* blockid) {
  if (blockid != nullptr) {
    
  } else {
    
  }
  _impl_.blockid_.SetAllocated(blockid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blockid_.IsDefault()) {
    _impl_.blockid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCEditorError.ErrorEntry.BlockID)
}

// repeated string ExtraParams = 7;
inline int UGCEditorError_ErrorEntry::_internal_extraparams_size() const {
  return _impl_.extraparams_.size();
}
inline int UGCEditorError_ErrorEntry::extraparams_size() const {
  return _internal_extraparams_size();
}
inline void UGCEditorError_ErrorEntry::clear_extraparams() {
  _impl_.extraparams_.Clear();
}
inline std::string* UGCEditorError_ErrorEntry::add_extraparams() {
  std::string* _s = _internal_add_extraparams();
  // @@protoc_insertion_point(field_add_mutable:message.UGCEditorError.ErrorEntry.ExtraParams)
  return _s;
}
inline const std::string& UGCEditorError_ErrorEntry::_internal_extraparams(int index) const {
  return _impl_.extraparams_.Get(index);
}
inline const std::string& UGCEditorError_ErrorEntry::extraparams(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCEditorError.ErrorEntry.ExtraParams)
  return _internal_extraparams(index);
}
inline std::string* UGCEditorError_ErrorEntry::mutable_extraparams(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCEditorError.ErrorEntry.ExtraParams)
  return _impl_.extraparams_.Mutable(index);
}
inline void UGCEditorError_ErrorEntry::set_extraparams(int index, const std::string& value) {
  _impl_.extraparams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorEntry.ExtraParams)
}
inline void UGCEditorError_ErrorEntry::set_extraparams(int index, std::string&& value) {
  _impl_.extraparams_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCEditorError.ErrorEntry.ExtraParams)
}
inline void UGCEditorError_ErrorEntry::set_extraparams(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.extraparams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCEditorError.ErrorEntry.ExtraParams)
}
inline void UGCEditorError_ErrorEntry::set_extraparams(int index, const char* value, size_t size) {
  _impl_.extraparams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCEditorError.ErrorEntry.ExtraParams)
}
inline std::string* UGCEditorError_ErrorEntry::_internal_add_extraparams() {
  return _impl_.extraparams_.Add();
}
inline void UGCEditorError_ErrorEntry::add_extraparams(const std::string& value) {
  _impl_.extraparams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCEditorError.ErrorEntry.ExtraParams)
}
inline void UGCEditorError_ErrorEntry::add_extraparams(std::string&& value) {
  _impl_.extraparams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCEditorError.ErrorEntry.ExtraParams)
}
inline void UGCEditorError_ErrorEntry::add_extraparams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.extraparams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCEditorError.ErrorEntry.ExtraParams)
}
inline void UGCEditorError_ErrorEntry::add_extraparams(const char* value, size_t size) {
  _impl_.extraparams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCEditorError.ErrorEntry.ExtraParams)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCEditorError_ErrorEntry::extraparams() const {
  // @@protoc_insertion_point(field_list:message.UGCEditorError.ErrorEntry.ExtraParams)
  return _impl_.extraparams_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCEditorError_ErrorEntry::mutable_extraparams() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCEditorError.ErrorEntry.ExtraParams)
  return &_impl_.extraparams_;
}

// -------------------------------------------------------------------

// UGCEditorError

// -------------------------------------------------------------------

// RoomCustomParamSingleIntItem

// int32 Value = 1;
inline void RoomCustomParamSingleIntItem::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t RoomCustomParamSingleIntItem::_internal_value() const {
  return _impl_.value_;
}
inline int32_t RoomCustomParamSingleIntItem::value() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleIntItem.Value)
  return _internal_value();
}
inline void RoomCustomParamSingleIntItem::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void RoomCustomParamSingleIntItem::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSingleIntItem.Value)
}

// string LabelKey = 2;
inline void RoomCustomParamSingleIntItem::clear_labelkey() {
  _impl_.labelkey_.ClearToEmpty();
}
inline const std::string& RoomCustomParamSingleIntItem::labelkey() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleIntItem.LabelKey)
  return _internal_labelkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomCustomParamSingleIntItem::set_labelkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.labelkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSingleIntItem.LabelKey)
}
inline std::string* RoomCustomParamSingleIntItem::mutable_labelkey() {
  std::string* _s = _internal_mutable_labelkey();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamSingleIntItem.LabelKey)
  return _s;
}
inline const std::string& RoomCustomParamSingleIntItem::_internal_labelkey() const {
  return _impl_.labelkey_.Get();
}
inline void RoomCustomParamSingleIntItem::_internal_set_labelkey(const std::string& value) {
  
  _impl_.labelkey_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomCustomParamSingleIntItem::_internal_mutable_labelkey() {
  
  return _impl_.labelkey_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomCustomParamSingleIntItem::release_labelkey() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamSingleIntItem.LabelKey)
  return _impl_.labelkey_.Release();
}
inline void RoomCustomParamSingleIntItem::set_allocated_labelkey(std::string* labelkey) {
  if (labelkey != nullptr) {
    
  } else {
    
  }
  _impl_.labelkey_.SetAllocated(labelkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.labelkey_.IsDefault()) {
    _impl_.labelkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamSingleIntItem.LabelKey)
}

// string DefaultText = 3;
inline void RoomCustomParamSingleIntItem::clear_defaulttext() {
  _impl_.defaulttext_.ClearToEmpty();
}
inline const std::string& RoomCustomParamSingleIntItem::defaulttext() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleIntItem.DefaultText)
  return _internal_defaulttext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomCustomParamSingleIntItem::set_defaulttext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.defaulttext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSingleIntItem.DefaultText)
}
inline std::string* RoomCustomParamSingleIntItem::mutable_defaulttext() {
  std::string* _s = _internal_mutable_defaulttext();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamSingleIntItem.DefaultText)
  return _s;
}
inline const std::string& RoomCustomParamSingleIntItem::_internal_defaulttext() const {
  return _impl_.defaulttext_.Get();
}
inline void RoomCustomParamSingleIntItem::_internal_set_defaulttext(const std::string& value) {
  
  _impl_.defaulttext_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomCustomParamSingleIntItem::_internal_mutable_defaulttext() {
  
  return _impl_.defaulttext_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomCustomParamSingleIntItem::release_defaulttext() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamSingleIntItem.DefaultText)
  return _impl_.defaulttext_.Release();
}
inline void RoomCustomParamSingleIntItem::set_allocated_defaulttext(std::string* defaulttext) {
  if (defaulttext != nullptr) {
    
  } else {
    
  }
  _impl_.defaulttext_.SetAllocated(defaulttext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.defaulttext_.IsDefault()) {
    _impl_.defaulttext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamSingleIntItem.DefaultText)
}

// -------------------------------------------------------------------

// RoomCustomParamSingleFloatItem

// float Value = 1;
inline void RoomCustomParamSingleFloatItem::clear_value() {
  _impl_.value_ = 0;
}
inline float RoomCustomParamSingleFloatItem::_internal_value() const {
  return _impl_.value_;
}
inline float RoomCustomParamSingleFloatItem::value() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleFloatItem.Value)
  return _internal_value();
}
inline void RoomCustomParamSingleFloatItem::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void RoomCustomParamSingleFloatItem::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSingleFloatItem.Value)
}

// string LabelKey = 2;
inline void RoomCustomParamSingleFloatItem::clear_labelkey() {
  _impl_.labelkey_.ClearToEmpty();
}
inline const std::string& RoomCustomParamSingleFloatItem::labelkey() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleFloatItem.LabelKey)
  return _internal_labelkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomCustomParamSingleFloatItem::set_labelkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.labelkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSingleFloatItem.LabelKey)
}
inline std::string* RoomCustomParamSingleFloatItem::mutable_labelkey() {
  std::string* _s = _internal_mutable_labelkey();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamSingleFloatItem.LabelKey)
  return _s;
}
inline const std::string& RoomCustomParamSingleFloatItem::_internal_labelkey() const {
  return _impl_.labelkey_.Get();
}
inline void RoomCustomParamSingleFloatItem::_internal_set_labelkey(const std::string& value) {
  
  _impl_.labelkey_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomCustomParamSingleFloatItem::_internal_mutable_labelkey() {
  
  return _impl_.labelkey_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomCustomParamSingleFloatItem::release_labelkey() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamSingleFloatItem.LabelKey)
  return _impl_.labelkey_.Release();
}
inline void RoomCustomParamSingleFloatItem::set_allocated_labelkey(std::string* labelkey) {
  if (labelkey != nullptr) {
    
  } else {
    
  }
  _impl_.labelkey_.SetAllocated(labelkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.labelkey_.IsDefault()) {
    _impl_.labelkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamSingleFloatItem.LabelKey)
}

// string DefaultText = 3;
inline void RoomCustomParamSingleFloatItem::clear_defaulttext() {
  _impl_.defaulttext_.ClearToEmpty();
}
inline const std::string& RoomCustomParamSingleFloatItem::defaulttext() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleFloatItem.DefaultText)
  return _internal_defaulttext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomCustomParamSingleFloatItem::set_defaulttext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.defaulttext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSingleFloatItem.DefaultText)
}
inline std::string* RoomCustomParamSingleFloatItem::mutable_defaulttext() {
  std::string* _s = _internal_mutable_defaulttext();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamSingleFloatItem.DefaultText)
  return _s;
}
inline const std::string& RoomCustomParamSingleFloatItem::_internal_defaulttext() const {
  return _impl_.defaulttext_.Get();
}
inline void RoomCustomParamSingleFloatItem::_internal_set_defaulttext(const std::string& value) {
  
  _impl_.defaulttext_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomCustomParamSingleFloatItem::_internal_mutable_defaulttext() {
  
  return _impl_.defaulttext_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomCustomParamSingleFloatItem::release_defaulttext() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamSingleFloatItem.DefaultText)
  return _impl_.defaulttext_.Release();
}
inline void RoomCustomParamSingleFloatItem::set_allocated_defaulttext(std::string* defaulttext) {
  if (defaulttext != nullptr) {
    
  } else {
    
  }
  _impl_.defaulttext_.SetAllocated(defaulttext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.defaulttext_.IsDefault()) {
    _impl_.defaulttext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamSingleFloatItem.DefaultText)
}

// -------------------------------------------------------------------

// RoomCustomParamSliderInt

// int32 MinValue = 1;
inline void RoomCustomParamSliderInt::clear_minvalue() {
  _impl_.minvalue_ = 0;
}
inline int32_t RoomCustomParamSliderInt::_internal_minvalue() const {
  return _impl_.minvalue_;
}
inline int32_t RoomCustomParamSliderInt::minvalue() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSliderInt.MinValue)
  return _internal_minvalue();
}
inline void RoomCustomParamSliderInt::_internal_set_minvalue(int32_t value) {
  
  _impl_.minvalue_ = value;
}
inline void RoomCustomParamSliderInt::set_minvalue(int32_t value) {
  _internal_set_minvalue(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSliderInt.MinValue)
}

// int32 MaxValue = 2;
inline void RoomCustomParamSliderInt::clear_maxvalue() {
  _impl_.maxvalue_ = 0;
}
inline int32_t RoomCustomParamSliderInt::_internal_maxvalue() const {
  return _impl_.maxvalue_;
}
inline int32_t RoomCustomParamSliderInt::maxvalue() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSliderInt.MaxValue)
  return _internal_maxvalue();
}
inline void RoomCustomParamSliderInt::_internal_set_maxvalue(int32_t value) {
  
  _impl_.maxvalue_ = value;
}
inline void RoomCustomParamSliderInt::set_maxvalue(int32_t value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSliderInt.MaxValue)
}

// int32 Value = 3;
inline void RoomCustomParamSliderInt::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t RoomCustomParamSliderInt::_internal_value() const {
  return _impl_.value_;
}
inline int32_t RoomCustomParamSliderInt::value() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSliderInt.Value)
  return _internal_value();
}
inline void RoomCustomParamSliderInt::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void RoomCustomParamSliderInt::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSliderInt.Value)
}

// -------------------------------------------------------------------

// RoomCustomParamSliderFloat

// float MinValue = 1;
inline void RoomCustomParamSliderFloat::clear_minvalue() {
  _impl_.minvalue_ = 0;
}
inline float RoomCustomParamSliderFloat::_internal_minvalue() const {
  return _impl_.minvalue_;
}
inline float RoomCustomParamSliderFloat::minvalue() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSliderFloat.MinValue)
  return _internal_minvalue();
}
inline void RoomCustomParamSliderFloat::_internal_set_minvalue(float value) {
  
  _impl_.minvalue_ = value;
}
inline void RoomCustomParamSliderFloat::set_minvalue(float value) {
  _internal_set_minvalue(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSliderFloat.MinValue)
}

// float MaxValue = 2;
inline void RoomCustomParamSliderFloat::clear_maxvalue() {
  _impl_.maxvalue_ = 0;
}
inline float RoomCustomParamSliderFloat::_internal_maxvalue() const {
  return _impl_.maxvalue_;
}
inline float RoomCustomParamSliderFloat::maxvalue() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSliderFloat.MaxValue)
  return _internal_maxvalue();
}
inline void RoomCustomParamSliderFloat::_internal_set_maxvalue(float value) {
  
  _impl_.maxvalue_ = value;
}
inline void RoomCustomParamSliderFloat::set_maxvalue(float value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSliderFloat.MaxValue)
}

// float Value = 3;
inline void RoomCustomParamSliderFloat::clear_value() {
  _impl_.value_ = 0;
}
inline float RoomCustomParamSliderFloat::_internal_value() const {
  return _impl_.value_;
}
inline float RoomCustomParamSliderFloat::value() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSliderFloat.Value)
  return _internal_value();
}
inline void RoomCustomParamSliderFloat::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void RoomCustomParamSliderFloat::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSliderFloat.Value)
}

// -------------------------------------------------------------------

// RoomCustomParamSingleChooseInt

// int32 Index = 1;
inline void RoomCustomParamSingleChooseInt::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t RoomCustomParamSingleChooseInt::_internal_index() const {
  return _impl_.index_;
}
inline int32_t RoomCustomParamSingleChooseInt::index() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleChooseInt.Index)
  return _internal_index();
}
inline void RoomCustomParamSingleChooseInt::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void RoomCustomParamSingleChooseInt::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSingleChooseInt.Index)
}

// repeated .message.RoomCustomParamSingleIntItem items = 2;
inline int RoomCustomParamSingleChooseInt::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RoomCustomParamSingleChooseInt::items_size() const {
  return _internal_items_size();
}
inline void RoomCustomParamSingleChooseInt::clear_items() {
  _impl_.items_.Clear();
}
inline ::message::RoomCustomParamSingleIntItem* RoomCustomParamSingleChooseInt::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamSingleChooseInt.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem >*
RoomCustomParamSingleChooseInt::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:message.RoomCustomParamSingleChooseInt.items)
  return &_impl_.items_;
}
inline const ::message::RoomCustomParamSingleIntItem& RoomCustomParamSingleChooseInt::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::message::RoomCustomParamSingleIntItem& RoomCustomParamSingleChooseInt::items(int index) const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleChooseInt.items)
  return _internal_items(index);
}
inline ::message::RoomCustomParamSingleIntItem* RoomCustomParamSingleChooseInt::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::message::RoomCustomParamSingleIntItem* RoomCustomParamSingleChooseInt::add_items() {
  ::message::RoomCustomParamSingleIntItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:message.RoomCustomParamSingleChooseInt.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem >&
RoomCustomParamSingleChooseInt::items() const {
  // @@protoc_insertion_point(field_list:message.RoomCustomParamSingleChooseInt.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// RoomCustomParamSingleChooseFloat

// int32 Index = 1;
inline void RoomCustomParamSingleChooseFloat::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t RoomCustomParamSingleChooseFloat::_internal_index() const {
  return _impl_.index_;
}
inline int32_t RoomCustomParamSingleChooseFloat::index() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleChooseFloat.Index)
  return _internal_index();
}
inline void RoomCustomParamSingleChooseFloat::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void RoomCustomParamSingleChooseFloat::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamSingleChooseFloat.Index)
}

// repeated .message.RoomCustomParamSingleFloatItem items = 2;
inline int RoomCustomParamSingleChooseFloat::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RoomCustomParamSingleChooseFloat::items_size() const {
  return _internal_items_size();
}
inline void RoomCustomParamSingleChooseFloat::clear_items() {
  _impl_.items_.Clear();
}
inline ::message::RoomCustomParamSingleFloatItem* RoomCustomParamSingleChooseFloat::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamSingleChooseFloat.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleFloatItem >*
RoomCustomParamSingleChooseFloat::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:message.RoomCustomParamSingleChooseFloat.items)
  return &_impl_.items_;
}
inline const ::message::RoomCustomParamSingleFloatItem& RoomCustomParamSingleChooseFloat::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::message::RoomCustomParamSingleFloatItem& RoomCustomParamSingleChooseFloat::items(int index) const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamSingleChooseFloat.items)
  return _internal_items(index);
}
inline ::message::RoomCustomParamSingleFloatItem* RoomCustomParamSingleChooseFloat::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::message::RoomCustomParamSingleFloatItem* RoomCustomParamSingleChooseFloat::add_items() {
  ::message::RoomCustomParamSingleFloatItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:message.RoomCustomParamSingleChooseFloat.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleFloatItem >&
RoomCustomParamSingleChooseFloat::items() const {
  // @@protoc_insertion_point(field_list:message.RoomCustomParamSingleChooseFloat.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// RoomCustomParamMultiChooseInt

// repeated int32 IndexList = 1;
inline int RoomCustomParamMultiChooseInt::_internal_indexlist_size() const {
  return _impl_.indexlist_.size();
}
inline int RoomCustomParamMultiChooseInt::indexlist_size() const {
  return _internal_indexlist_size();
}
inline void RoomCustomParamMultiChooseInt::clear_indexlist() {
  _impl_.indexlist_.Clear();
}
inline int32_t RoomCustomParamMultiChooseInt::_internal_indexlist(int index) const {
  return _impl_.indexlist_.Get(index);
}
inline int32_t RoomCustomParamMultiChooseInt::indexlist(int index) const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamMultiChooseInt.IndexList)
  return _internal_indexlist(index);
}
inline void RoomCustomParamMultiChooseInt::set_indexlist(int index, int32_t value) {
  _impl_.indexlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamMultiChooseInt.IndexList)
}
inline void RoomCustomParamMultiChooseInt::_internal_add_indexlist(int32_t value) {
  _impl_.indexlist_.Add(value);
}
inline void RoomCustomParamMultiChooseInt::add_indexlist(int32_t value) {
  _internal_add_indexlist(value);
  // @@protoc_insertion_point(field_add:message.RoomCustomParamMultiChooseInt.IndexList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoomCustomParamMultiChooseInt::_internal_indexlist() const {
  return _impl_.indexlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoomCustomParamMultiChooseInt::indexlist() const {
  // @@protoc_insertion_point(field_list:message.RoomCustomParamMultiChooseInt.IndexList)
  return _internal_indexlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoomCustomParamMultiChooseInt::_internal_mutable_indexlist() {
  return &_impl_.indexlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoomCustomParamMultiChooseInt::mutable_indexlist() {
  // @@protoc_insertion_point(field_mutable_list:message.RoomCustomParamMultiChooseInt.IndexList)
  return _internal_mutable_indexlist();
}

// repeated .message.RoomCustomParamSingleIntItem items = 2;
inline int RoomCustomParamMultiChooseInt::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int RoomCustomParamMultiChooseInt::items_size() const {
  return _internal_items_size();
}
inline void RoomCustomParamMultiChooseInt::clear_items() {
  _impl_.items_.Clear();
}
inline ::message::RoomCustomParamSingleIntItem* RoomCustomParamMultiChooseInt::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamMultiChooseInt.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem >*
RoomCustomParamMultiChooseInt::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:message.RoomCustomParamMultiChooseInt.items)
  return &_impl_.items_;
}
inline const ::message::RoomCustomParamSingleIntItem& RoomCustomParamMultiChooseInt::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::message::RoomCustomParamSingleIntItem& RoomCustomParamMultiChooseInt::items(int index) const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamMultiChooseInt.items)
  return _internal_items(index);
}
inline ::message::RoomCustomParamSingleIntItem* RoomCustomParamMultiChooseInt::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::message::RoomCustomParamSingleIntItem* RoomCustomParamMultiChooseInt::add_items() {
  ::message::RoomCustomParamSingleIntItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:message.RoomCustomParamMultiChooseInt.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamSingleIntItem >&
RoomCustomParamMultiChooseInt::items() const {
  // @@protoc_insertion_point(field_list:message.RoomCustomParamMultiChooseInt.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// RoomCustomParamData

// int32 ID = 1;
inline void RoomCustomParamData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t RoomCustomParamData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t RoomCustomParamData::id() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.ID)
  return _internal_id();
}
inline void RoomCustomParamData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void RoomCustomParamData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamData.ID)
}

// string LabelKey = 2;
inline void RoomCustomParamData::clear_labelkey() {
  _impl_.labelkey_.ClearToEmpty();
}
inline const std::string& RoomCustomParamData::labelkey() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.LabelKey)
  return _internal_labelkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomCustomParamData::set_labelkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.labelkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.RoomCustomParamData.LabelKey)
}
inline std::string* RoomCustomParamData::mutable_labelkey() {
  std::string* _s = _internal_mutable_labelkey();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamData.LabelKey)
  return _s;
}
inline const std::string& RoomCustomParamData::_internal_labelkey() const {
  return _impl_.labelkey_.Get();
}
inline void RoomCustomParamData::_internal_set_labelkey(const std::string& value) {
  
  _impl_.labelkey_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomCustomParamData::_internal_mutable_labelkey() {
  
  return _impl_.labelkey_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomCustomParamData::release_labelkey() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamData.LabelKey)
  return _impl_.labelkey_.Release();
}
inline void RoomCustomParamData::set_allocated_labelkey(std::string* labelkey) {
  if (labelkey != nullptr) {
    
  } else {
    
  }
  _impl_.labelkey_.SetAllocated(labelkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.labelkey_.IsDefault()) {
    _impl_.labelkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamData.LabelKey)
}

// string DefaultText = 3;
inline void RoomCustomParamData::clear_defaulttext() {
  _impl_.defaulttext_.ClearToEmpty();
}
inline const std::string& RoomCustomParamData::defaulttext() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.DefaultText)
  return _internal_defaulttext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomCustomParamData::set_defaulttext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.defaulttext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.RoomCustomParamData.DefaultText)
}
inline std::string* RoomCustomParamData::mutable_defaulttext() {
  std::string* _s = _internal_mutable_defaulttext();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamData.DefaultText)
  return _s;
}
inline const std::string& RoomCustomParamData::_internal_defaulttext() const {
  return _impl_.defaulttext_.Get();
}
inline void RoomCustomParamData::_internal_set_defaulttext(const std::string& value) {
  
  _impl_.defaulttext_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomCustomParamData::_internal_mutable_defaulttext() {
  
  return _impl_.defaulttext_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomCustomParamData::release_defaulttext() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamData.DefaultText)
  return _impl_.defaulttext_.Release();
}
inline void RoomCustomParamData::set_allocated_defaulttext(std::string* defaulttext) {
  if (defaulttext != nullptr) {
    
  } else {
    
  }
  _impl_.defaulttext_.SetAllocated(defaulttext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.defaulttext_.IsDefault()) {
    _impl_.defaulttext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamData.DefaultText)
}

// .message.RoomCustomParamsDataType Type = 4;
inline void RoomCustomParamData::clear_type() {
  _impl_.type_ = 0;
}
inline ::message::RoomCustomParamsDataType RoomCustomParamData::_internal_type() const {
  return static_cast< ::message::RoomCustomParamsDataType >(_impl_.type_);
}
inline ::message::RoomCustomParamsDataType RoomCustomParamData::type() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.Type)
  return _internal_type();
}
inline void RoomCustomParamData::_internal_set_type(::message::RoomCustomParamsDataType value) {
  
  _impl_.type_ = value;
}
inline void RoomCustomParamData::set_type(::message::RoomCustomParamsDataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamData.Type)
}

// bool BoolValue = 5;
inline bool RoomCustomParamData::_internal_has_boolvalue() const {
  return Value_case() == kBoolValue;
}
inline bool RoomCustomParamData::has_boolvalue() const {
  return _internal_has_boolvalue();
}
inline void RoomCustomParamData::set_has_boolvalue() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void RoomCustomParamData::clear_boolvalue() {
  if (_internal_has_boolvalue()) {
    _impl_.Value_.boolvalue_ = false;
    clear_has_Value();
  }
}
inline bool RoomCustomParamData::_internal_boolvalue() const {
  if (_internal_has_boolvalue()) {
    return _impl_.Value_.boolvalue_;
  }
  return false;
}
inline void RoomCustomParamData::_internal_set_boolvalue(bool value) {
  if (!_internal_has_boolvalue()) {
    clear_Value();
    set_has_boolvalue();
  }
  _impl_.Value_.boolvalue_ = value;
}
inline bool RoomCustomParamData::boolvalue() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.BoolValue)
  return _internal_boolvalue();
}
inline void RoomCustomParamData::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamData.BoolValue)
}

// .message.RoomCustomParamSliderInt SliderInt = 7;
inline bool RoomCustomParamData::_internal_has_sliderint() const {
  return Value_case() == kSliderInt;
}
inline bool RoomCustomParamData::has_sliderint() const {
  return _internal_has_sliderint();
}
inline void RoomCustomParamData::set_has_sliderint() {
  _impl_._oneof_case_[0] = kSliderInt;
}
inline void RoomCustomParamData::clear_sliderint() {
  if (_internal_has_sliderint()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.sliderint_;
    }
    clear_has_Value();
  }
}
inline ::message::RoomCustomParamSliderInt* RoomCustomParamData::release_sliderint() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamData.SliderInt)
  if (_internal_has_sliderint()) {
    clear_has_Value();
    ::message::RoomCustomParamSliderInt* temp = _impl_.Value_.sliderint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.sliderint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::RoomCustomParamSliderInt& RoomCustomParamData::_internal_sliderint() const {
  return _internal_has_sliderint()
      ? *_impl_.Value_.sliderint_
      : reinterpret_cast< ::message::RoomCustomParamSliderInt&>(::message::_RoomCustomParamSliderInt_default_instance_);
}
inline const ::message::RoomCustomParamSliderInt& RoomCustomParamData::sliderint() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.SliderInt)
  return _internal_sliderint();
}
inline ::message::RoomCustomParamSliderInt* RoomCustomParamData::unsafe_arena_release_sliderint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.RoomCustomParamData.SliderInt)
  if (_internal_has_sliderint()) {
    clear_has_Value();
    ::message::RoomCustomParamSliderInt* temp = _impl_.Value_.sliderint_;
    _impl_.Value_.sliderint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomCustomParamData::unsafe_arena_set_allocated_sliderint(::message::RoomCustomParamSliderInt* sliderint) {
  clear_Value();
  if (sliderint) {
    set_has_sliderint();
    _impl_.Value_.sliderint_ = sliderint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.RoomCustomParamData.SliderInt)
}
inline ::message::RoomCustomParamSliderInt* RoomCustomParamData::_internal_mutable_sliderint() {
  if (!_internal_has_sliderint()) {
    clear_Value();
    set_has_sliderint();
    _impl_.Value_.sliderint_ = CreateMaybeMessage< ::message::RoomCustomParamSliderInt >(GetArenaForAllocation());
  }
  return _impl_.Value_.sliderint_;
}
inline ::message::RoomCustomParamSliderInt* RoomCustomParamData::mutable_sliderint() {
  ::message::RoomCustomParamSliderInt* _msg = _internal_mutable_sliderint();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamData.SliderInt)
  return _msg;
}

// .message.RoomCustomParamSliderFloat SliderFloat = 8;
inline bool RoomCustomParamData::_internal_has_sliderfloat() const {
  return Value_case() == kSliderFloat;
}
inline bool RoomCustomParamData::has_sliderfloat() const {
  return _internal_has_sliderfloat();
}
inline void RoomCustomParamData::set_has_sliderfloat() {
  _impl_._oneof_case_[0] = kSliderFloat;
}
inline void RoomCustomParamData::clear_sliderfloat() {
  if (_internal_has_sliderfloat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.sliderfloat_;
    }
    clear_has_Value();
  }
}
inline ::message::RoomCustomParamSliderFloat* RoomCustomParamData::release_sliderfloat() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamData.SliderFloat)
  if (_internal_has_sliderfloat()) {
    clear_has_Value();
    ::message::RoomCustomParamSliderFloat* temp = _impl_.Value_.sliderfloat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.sliderfloat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::RoomCustomParamSliderFloat& RoomCustomParamData::_internal_sliderfloat() const {
  return _internal_has_sliderfloat()
      ? *_impl_.Value_.sliderfloat_
      : reinterpret_cast< ::message::RoomCustomParamSliderFloat&>(::message::_RoomCustomParamSliderFloat_default_instance_);
}
inline const ::message::RoomCustomParamSliderFloat& RoomCustomParamData::sliderfloat() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.SliderFloat)
  return _internal_sliderfloat();
}
inline ::message::RoomCustomParamSliderFloat* RoomCustomParamData::unsafe_arena_release_sliderfloat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.RoomCustomParamData.SliderFloat)
  if (_internal_has_sliderfloat()) {
    clear_has_Value();
    ::message::RoomCustomParamSliderFloat* temp = _impl_.Value_.sliderfloat_;
    _impl_.Value_.sliderfloat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomCustomParamData::unsafe_arena_set_allocated_sliderfloat(::message::RoomCustomParamSliderFloat* sliderfloat) {
  clear_Value();
  if (sliderfloat) {
    set_has_sliderfloat();
    _impl_.Value_.sliderfloat_ = sliderfloat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.RoomCustomParamData.SliderFloat)
}
inline ::message::RoomCustomParamSliderFloat* RoomCustomParamData::_internal_mutable_sliderfloat() {
  if (!_internal_has_sliderfloat()) {
    clear_Value();
    set_has_sliderfloat();
    _impl_.Value_.sliderfloat_ = CreateMaybeMessage< ::message::RoomCustomParamSliderFloat >(GetArenaForAllocation());
  }
  return _impl_.Value_.sliderfloat_;
}
inline ::message::RoomCustomParamSliderFloat* RoomCustomParamData::mutable_sliderfloat() {
  ::message::RoomCustomParamSliderFloat* _msg = _internal_mutable_sliderfloat();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamData.SliderFloat)
  return _msg;
}

// .message.RoomCustomParamSingleChooseInt SingleChooseInt = 9;
inline bool RoomCustomParamData::_internal_has_singlechooseint() const {
  return Value_case() == kSingleChooseInt;
}
inline bool RoomCustomParamData::has_singlechooseint() const {
  return _internal_has_singlechooseint();
}
inline void RoomCustomParamData::set_has_singlechooseint() {
  _impl_._oneof_case_[0] = kSingleChooseInt;
}
inline void RoomCustomParamData::clear_singlechooseint() {
  if (_internal_has_singlechooseint()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.singlechooseint_;
    }
    clear_has_Value();
  }
}
inline ::message::RoomCustomParamSingleChooseInt* RoomCustomParamData::release_singlechooseint() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamData.SingleChooseInt)
  if (_internal_has_singlechooseint()) {
    clear_has_Value();
    ::message::RoomCustomParamSingleChooseInt* temp = _impl_.Value_.singlechooseint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.singlechooseint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::RoomCustomParamSingleChooseInt& RoomCustomParamData::_internal_singlechooseint() const {
  return _internal_has_singlechooseint()
      ? *_impl_.Value_.singlechooseint_
      : reinterpret_cast< ::message::RoomCustomParamSingleChooseInt&>(::message::_RoomCustomParamSingleChooseInt_default_instance_);
}
inline const ::message::RoomCustomParamSingleChooseInt& RoomCustomParamData::singlechooseint() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.SingleChooseInt)
  return _internal_singlechooseint();
}
inline ::message::RoomCustomParamSingleChooseInt* RoomCustomParamData::unsafe_arena_release_singlechooseint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.RoomCustomParamData.SingleChooseInt)
  if (_internal_has_singlechooseint()) {
    clear_has_Value();
    ::message::RoomCustomParamSingleChooseInt* temp = _impl_.Value_.singlechooseint_;
    _impl_.Value_.singlechooseint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomCustomParamData::unsafe_arena_set_allocated_singlechooseint(::message::RoomCustomParamSingleChooseInt* singlechooseint) {
  clear_Value();
  if (singlechooseint) {
    set_has_singlechooseint();
    _impl_.Value_.singlechooseint_ = singlechooseint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.RoomCustomParamData.SingleChooseInt)
}
inline ::message::RoomCustomParamSingleChooseInt* RoomCustomParamData::_internal_mutable_singlechooseint() {
  if (!_internal_has_singlechooseint()) {
    clear_Value();
    set_has_singlechooseint();
    _impl_.Value_.singlechooseint_ = CreateMaybeMessage< ::message::RoomCustomParamSingleChooseInt >(GetArenaForAllocation());
  }
  return _impl_.Value_.singlechooseint_;
}
inline ::message::RoomCustomParamSingleChooseInt* RoomCustomParamData::mutable_singlechooseint() {
  ::message::RoomCustomParamSingleChooseInt* _msg = _internal_mutable_singlechooseint();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamData.SingleChooseInt)
  return _msg;
}

// .message.RoomCustomParamSingleChooseFloat SingleChooseFloat = 10;
inline bool RoomCustomParamData::_internal_has_singlechoosefloat() const {
  return Value_case() == kSingleChooseFloat;
}
inline bool RoomCustomParamData::has_singlechoosefloat() const {
  return _internal_has_singlechoosefloat();
}
inline void RoomCustomParamData::set_has_singlechoosefloat() {
  _impl_._oneof_case_[0] = kSingleChooseFloat;
}
inline void RoomCustomParamData::clear_singlechoosefloat() {
  if (_internal_has_singlechoosefloat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.singlechoosefloat_;
    }
    clear_has_Value();
  }
}
inline ::message::RoomCustomParamSingleChooseFloat* RoomCustomParamData::release_singlechoosefloat() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamData.SingleChooseFloat)
  if (_internal_has_singlechoosefloat()) {
    clear_has_Value();
    ::message::RoomCustomParamSingleChooseFloat* temp = _impl_.Value_.singlechoosefloat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.singlechoosefloat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::RoomCustomParamSingleChooseFloat& RoomCustomParamData::_internal_singlechoosefloat() const {
  return _internal_has_singlechoosefloat()
      ? *_impl_.Value_.singlechoosefloat_
      : reinterpret_cast< ::message::RoomCustomParamSingleChooseFloat&>(::message::_RoomCustomParamSingleChooseFloat_default_instance_);
}
inline const ::message::RoomCustomParamSingleChooseFloat& RoomCustomParamData::singlechoosefloat() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.SingleChooseFloat)
  return _internal_singlechoosefloat();
}
inline ::message::RoomCustomParamSingleChooseFloat* RoomCustomParamData::unsafe_arena_release_singlechoosefloat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.RoomCustomParamData.SingleChooseFloat)
  if (_internal_has_singlechoosefloat()) {
    clear_has_Value();
    ::message::RoomCustomParamSingleChooseFloat* temp = _impl_.Value_.singlechoosefloat_;
    _impl_.Value_.singlechoosefloat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomCustomParamData::unsafe_arena_set_allocated_singlechoosefloat(::message::RoomCustomParamSingleChooseFloat* singlechoosefloat) {
  clear_Value();
  if (singlechoosefloat) {
    set_has_singlechoosefloat();
    _impl_.Value_.singlechoosefloat_ = singlechoosefloat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.RoomCustomParamData.SingleChooseFloat)
}
inline ::message::RoomCustomParamSingleChooseFloat* RoomCustomParamData::_internal_mutable_singlechoosefloat() {
  if (!_internal_has_singlechoosefloat()) {
    clear_Value();
    set_has_singlechoosefloat();
    _impl_.Value_.singlechoosefloat_ = CreateMaybeMessage< ::message::RoomCustomParamSingleChooseFloat >(GetArenaForAllocation());
  }
  return _impl_.Value_.singlechoosefloat_;
}
inline ::message::RoomCustomParamSingleChooseFloat* RoomCustomParamData::mutable_singlechoosefloat() {
  ::message::RoomCustomParamSingleChooseFloat* _msg = _internal_mutable_singlechoosefloat();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamData.SingleChooseFloat)
  return _msg;
}

// .message.RoomCustomParamMultiChooseInt MultiChooseInt = 6;
inline bool RoomCustomParamData::_internal_has_multichooseint() const {
  return this != internal_default_instance() && _impl_.multichooseint_ != nullptr;
}
inline bool RoomCustomParamData::has_multichooseint() const {
  return _internal_has_multichooseint();
}
inline void RoomCustomParamData::clear_multichooseint() {
  if (GetArenaForAllocation() == nullptr && _impl_.multichooseint_ != nullptr) {
    delete _impl_.multichooseint_;
  }
  _impl_.multichooseint_ = nullptr;
}
inline const ::message::RoomCustomParamMultiChooseInt& RoomCustomParamData::_internal_multichooseint() const {
  const ::message::RoomCustomParamMultiChooseInt* p = _impl_.multichooseint_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::RoomCustomParamMultiChooseInt&>(
      ::message::_RoomCustomParamMultiChooseInt_default_instance_);
}
inline const ::message::RoomCustomParamMultiChooseInt& RoomCustomParamData::multichooseint() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamData.MultiChooseInt)
  return _internal_multichooseint();
}
inline void RoomCustomParamData::unsafe_arena_set_allocated_multichooseint(
    ::message::RoomCustomParamMultiChooseInt* multichooseint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.multichooseint_);
  }
  _impl_.multichooseint_ = multichooseint;
  if (multichooseint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.RoomCustomParamData.MultiChooseInt)
}
inline ::message::RoomCustomParamMultiChooseInt* RoomCustomParamData::release_multichooseint() {
  
  ::message::RoomCustomParamMultiChooseInt* temp = _impl_.multichooseint_;
  _impl_.multichooseint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::RoomCustomParamMultiChooseInt* RoomCustomParamData::unsafe_arena_release_multichooseint() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamData.MultiChooseInt)
  
  ::message::RoomCustomParamMultiChooseInt* temp = _impl_.multichooseint_;
  _impl_.multichooseint_ = nullptr;
  return temp;
}
inline ::message::RoomCustomParamMultiChooseInt* RoomCustomParamData::_internal_mutable_multichooseint() {
  
  if (_impl_.multichooseint_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::RoomCustomParamMultiChooseInt>(GetArenaForAllocation());
    _impl_.multichooseint_ = p;
  }
  return _impl_.multichooseint_;
}
inline ::message::RoomCustomParamMultiChooseInt* RoomCustomParamData::mutable_multichooseint() {
  ::message::RoomCustomParamMultiChooseInt* _msg = _internal_mutable_multichooseint();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamData.MultiChooseInt)
  return _msg;
}
inline void RoomCustomParamData::set_allocated_multichooseint(::message::RoomCustomParamMultiChooseInt* multichooseint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.multichooseint_;
  }
  if (multichooseint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multichooseint);
    if (message_arena != submessage_arena) {
      multichooseint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multichooseint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.multichooseint_ = multichooseint;
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamData.MultiChooseInt)
}

inline bool RoomCustomParamData::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void RoomCustomParamData::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline RoomCustomParamData::ValueCase RoomCustomParamData::Value_case() const {
  return RoomCustomParamData::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoomCustomParamsSettingData

// repeated .message.RoomCustomParamData Params = 1;
inline int RoomCustomParamsSettingData::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int RoomCustomParamsSettingData::params_size() const {
  return _internal_params_size();
}
inline void RoomCustomParamsSettingData::clear_params() {
  _impl_.params_.Clear();
}
inline ::message::RoomCustomParamData* RoomCustomParamsSettingData::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamsSettingData.Params)
  return _impl_.params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamData >*
RoomCustomParamsSettingData::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:message.RoomCustomParamsSettingData.Params)
  return &_impl_.params_;
}
inline const ::message::RoomCustomParamData& RoomCustomParamsSettingData::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const ::message::RoomCustomParamData& RoomCustomParamsSettingData::params(int index) const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamsSettingData.Params)
  return _internal_params(index);
}
inline ::message::RoomCustomParamData* RoomCustomParamsSettingData::_internal_add_params() {
  return _impl_.params_.Add();
}
inline ::message::RoomCustomParamData* RoomCustomParamsSettingData::add_params() {
  ::message::RoomCustomParamData* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:message.RoomCustomParamsSettingData.Params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoomCustomParamData >&
RoomCustomParamsSettingData::params() const {
  // @@protoc_insertion_point(field_list:message.RoomCustomParamsSettingData.Params)
  return _impl_.params_;
}

// string LocCDNURL = 2;
inline void RoomCustomParamsSettingData::clear_loccdnurl() {
  _impl_.loccdnurl_.ClearToEmpty();
}
inline const std::string& RoomCustomParamsSettingData::loccdnurl() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamsSettingData.LocCDNURL)
  return _internal_loccdnurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomCustomParamsSettingData::set_loccdnurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loccdnurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.RoomCustomParamsSettingData.LocCDNURL)
}
inline std::string* RoomCustomParamsSettingData::mutable_loccdnurl() {
  std::string* _s = _internal_mutable_loccdnurl();
  // @@protoc_insertion_point(field_mutable:message.RoomCustomParamsSettingData.LocCDNURL)
  return _s;
}
inline const std::string& RoomCustomParamsSettingData::_internal_loccdnurl() const {
  return _impl_.loccdnurl_.Get();
}
inline void RoomCustomParamsSettingData::_internal_set_loccdnurl(const std::string& value) {
  
  _impl_.loccdnurl_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomCustomParamsSettingData::_internal_mutable_loccdnurl() {
  
  return _impl_.loccdnurl_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomCustomParamsSettingData::release_loccdnurl() {
  // @@protoc_insertion_point(field_release:message.RoomCustomParamsSettingData.LocCDNURL)
  return _impl_.loccdnurl_.Release();
}
inline void RoomCustomParamsSettingData::set_allocated_loccdnurl(std::string* loccdnurl) {
  if (loccdnurl != nullptr) {
    
  } else {
    
  }
  _impl_.loccdnurl_.SetAllocated(loccdnurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loccdnurl_.IsDefault()) {
    _impl_.loccdnurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamsSettingData.LocCDNURL)
}

// -------------------------------------------------------------------

// RoomCustomParamProtoData

// int32 ID = 1;
inline void RoomCustomParamProtoData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t RoomCustomParamProtoData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t RoomCustomParamProtoData::id() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamProtoData.ID)
  return _internal_id();
}
inline void RoomCustomParamProtoData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void RoomCustomParamProtoData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamProtoData.ID)
}

// .message.RoomCustomParamsDataType Type = 2;
inline void RoomCustomParamProtoData::clear_type() {
  _impl_.type_ = 0;
}
inline ::message::RoomCustomParamsDataType RoomCustomParamProtoData::_internal_type() const {
  return static_cast< ::message::RoomCustomParamsDataType >(_impl_.type_);
}
inline ::message::RoomCustomParamsDataType RoomCustomParamProtoData::type() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamProtoData.Type)
  return _internal_type();
}
inline void RoomCustomParamProtoData::_internal_set_type(::message::RoomCustomParamsDataType value) {
  
  _impl_.type_ = value;
}
inline void RoomCustomParamProtoData::set_type(::message::RoomCustomParamsDataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamProtoData.Type)
}

// bool BoolValue = 3;
inline bool RoomCustomParamProtoData::_internal_has_boolvalue() const {
  return Value_case() == kBoolValue;
}
inline bool RoomCustomParamProtoData::has_boolvalue() const {
  return _internal_has_boolvalue();
}
inline void RoomCustomParamProtoData::set_has_boolvalue() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void RoomCustomParamProtoData::clear_boolvalue() {
  if (_internal_has_boolvalue()) {
    _impl_.Value_.boolvalue_ = false;
    clear_has_Value();
  }
}
inline bool RoomCustomParamProtoData::_internal_boolvalue() const {
  if (_internal_has_boolvalue()) {
    return _impl_.Value_.boolvalue_;
  }
  return false;
}
inline void RoomCustomParamProtoData::_internal_set_boolvalue(bool value) {
  if (!_internal_has_boolvalue()) {
    clear_Value();
    set_has_boolvalue();
  }
  _impl_.Value_.boolvalue_ = value;
}
inline bool RoomCustomParamProtoData::boolvalue() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamProtoData.BoolValue)
  return _internal_boolvalue();
}
inline void RoomCustomParamProtoData::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamProtoData.BoolValue)
}

// int32 IntValue = 5;
inline bool RoomCustomParamProtoData::_internal_has_intvalue() const {
  return Value_case() == kIntValue;
}
inline bool RoomCustomParamProtoData::has_intvalue() const {
  return _internal_has_intvalue();
}
inline void RoomCustomParamProtoData::set_has_intvalue() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void RoomCustomParamProtoData::clear_intvalue() {
  if (_internal_has_intvalue()) {
    _impl_.Value_.intvalue_ = 0;
    clear_has_Value();
  }
}
inline int32_t RoomCustomParamProtoData::_internal_intvalue() const {
  if (_internal_has_intvalue()) {
    return _impl_.Value_.intvalue_;
  }
  return 0;
}
inline void RoomCustomParamProtoData::_internal_set_intvalue(int32_t value) {
  if (!_internal_has_intvalue()) {
    clear_Value();
    set_has_intvalue();
  }
  _impl_.Value_.intvalue_ = value;
}
inline int32_t RoomCustomParamProtoData::intvalue() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamProtoData.IntValue)
  return _internal_intvalue();
}
inline void RoomCustomParamProtoData::set_intvalue(int32_t value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamProtoData.IntValue)
}

// float FloatValue = 6;
inline bool RoomCustomParamProtoData::_internal_has_floatvalue() const {
  return Value_case() == kFloatValue;
}
inline bool RoomCustomParamProtoData::has_floatvalue() const {
  return _internal_has_floatvalue();
}
inline void RoomCustomParamProtoData::set_has_floatvalue() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void RoomCustomParamProtoData::clear_floatvalue() {
  if (_internal_has_floatvalue()) {
    _impl_.Value_.floatvalue_ = 0;
    clear_has_Value();
  }
}
inline float RoomCustomParamProtoData::_internal_floatvalue() const {
  if (_internal_has_floatvalue()) {
    return _impl_.Value_.floatvalue_;
  }
  return 0;
}
inline void RoomCustomParamProtoData::_internal_set_floatvalue(float value) {
  if (!_internal_has_floatvalue()) {
    clear_Value();
    set_has_floatvalue();
  }
  _impl_.Value_.floatvalue_ = value;
}
inline float RoomCustomParamProtoData::floatvalue() const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamProtoData.FloatValue)
  return _internal_floatvalue();
}
inline void RoomCustomParamProtoData::set_floatvalue(float value) {
  _internal_set_floatvalue(value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamProtoData.FloatValue)
}

// repeated int32 ListInt = 4;
inline int RoomCustomParamProtoData::_internal_listint_size() const {
  return _impl_.listint_.size();
}
inline int RoomCustomParamProtoData::listint_size() const {
  return _internal_listint_size();
}
inline void RoomCustomParamProtoData::clear_listint() {
  _impl_.listint_.Clear();
}
inline int32_t RoomCustomParamProtoData::_internal_listint(int index) const {
  return _impl_.listint_.Get(index);
}
inline int32_t RoomCustomParamProtoData::listint(int index) const {
  // @@protoc_insertion_point(field_get:message.RoomCustomParamProtoData.ListInt)
  return _internal_listint(index);
}
inline void RoomCustomParamProtoData::set_listint(int index, int32_t value) {
  _impl_.listint_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.RoomCustomParamProtoData.ListInt)
}
inline void RoomCustomParamProtoData::_internal_add_listint(int32_t value) {
  _impl_.listint_.Add(value);
}
inline void RoomCustomParamProtoData::add_listint(int32_t value) {
  _internal_add_listint(value);
  // @@protoc_insertion_point(field_add:message.RoomCustomParamProtoData.ListInt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoomCustomParamProtoData::_internal_listint() const {
  return _impl_.listint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RoomCustomParamProtoData::listint() const {
  // @@protoc_insertion_point(field_list:message.RoomCustomParamProtoData.ListInt)
  return _internal_listint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoomCustomParamProtoData::_internal_mutable_listint() {
  return &_impl_.listint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RoomCustomParamProtoData::mutable_listint() {
  // @@protoc_insertion_point(field_mutable_list:message.RoomCustomParamProtoData.ListInt)
  return _internal_mutable_listint();
}

inline bool RoomCustomParamProtoData::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void RoomCustomParamProtoData::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline RoomCustomParamProtoData::ValueCase RoomCustomParamProtoData::Value_case() const {
  return RoomCustomParamProtoData::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UGCResourceData

// .message.UGCResourceData.UGCResourceDataVersion Version = 1;
inline void UGCResourceData::clear_version() {
  _impl_.version_ = 0;
}
inline ::message::UGCResourceData_UGCResourceDataVersion UGCResourceData::_internal_version() const {
  return static_cast< ::message::UGCResourceData_UGCResourceDataVersion >(_impl_.version_);
}
inline ::message::UGCResourceData_UGCResourceDataVersion UGCResourceData::version() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceData.Version)
  return _internal_version();
}
inline void UGCResourceData::_internal_set_version(::message::UGCResourceData_UGCResourceDataVersion value) {
  
  _impl_.version_ = value;
}
inline void UGCResourceData::set_version(::message::UGCResourceData_UGCResourceDataVersion value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceData.Version)
}

// bytes Content = 2;
inline void UGCResourceData::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& UGCResourceData::content() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceData.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourceData::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourceData.Content)
}
inline std::string* UGCResourceData::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:message.UGCResourceData.Content)
  return _s;
}
inline const std::string& UGCResourceData::_internal_content() const {
  return _impl_.content_.Get();
}
inline void UGCResourceData::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourceData::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourceData::release_content() {
  // @@protoc_insertion_point(field_release:message.UGCResourceData.Content)
  return _impl_.content_.Release();
}
inline void UGCResourceData::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourceData.Content)
}

// -------------------------------------------------------------------

// UGCResourceContentData

// repeated string OptionalResourceNames = 1;
inline int UGCResourceContentData::_internal_optionalresourcenames_size() const {
  return _impl_.optionalresourcenames_.size();
}
inline int UGCResourceContentData::optionalresourcenames_size() const {
  return _internal_optionalresourcenames_size();
}
inline void UGCResourceContentData::clear_optionalresourcenames() {
  _impl_.optionalresourcenames_.Clear();
}
inline std::string* UGCResourceContentData::add_optionalresourcenames() {
  std::string* _s = _internal_add_optionalresourcenames();
  // @@protoc_insertion_point(field_add_mutable:message.UGCResourceContentData.OptionalResourceNames)
  return _s;
}
inline const std::string& UGCResourceContentData::_internal_optionalresourcenames(int index) const {
  return _impl_.optionalresourcenames_.Get(index);
}
inline const std::string& UGCResourceContentData::optionalresourcenames(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResourceContentData.OptionalResourceNames)
  return _internal_optionalresourcenames(index);
}
inline std::string* UGCResourceContentData::mutable_optionalresourcenames(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResourceContentData.OptionalResourceNames)
  return _impl_.optionalresourcenames_.Mutable(index);
}
inline void UGCResourceContentData::set_optionalresourcenames(int index, const std::string& value) {
  _impl_.optionalresourcenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceContentData.OptionalResourceNames)
}
inline void UGCResourceContentData::set_optionalresourcenames(int index, std::string&& value) {
  _impl_.optionalresourcenames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCResourceContentData.OptionalResourceNames)
}
inline void UGCResourceContentData::set_optionalresourcenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.optionalresourcenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCResourceContentData.OptionalResourceNames)
}
inline void UGCResourceContentData::set_optionalresourcenames(int index, const char* value, size_t size) {
  _impl_.optionalresourcenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCResourceContentData.OptionalResourceNames)
}
inline std::string* UGCResourceContentData::_internal_add_optionalresourcenames() {
  return _impl_.optionalresourcenames_.Add();
}
inline void UGCResourceContentData::add_optionalresourcenames(const std::string& value) {
  _impl_.optionalresourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCResourceContentData.OptionalResourceNames)
}
inline void UGCResourceContentData::add_optionalresourcenames(std::string&& value) {
  _impl_.optionalresourcenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCResourceContentData.OptionalResourceNames)
}
inline void UGCResourceContentData::add_optionalresourcenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.optionalresourcenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCResourceContentData.OptionalResourceNames)
}
inline void UGCResourceContentData::add_optionalresourcenames(const char* value, size_t size) {
  _impl_.optionalresourcenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCResourceContentData.OptionalResourceNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCResourceContentData::optionalresourcenames() const {
  // @@protoc_insertion_point(field_list:message.UGCResourceContentData.OptionalResourceNames)
  return _impl_.optionalresourcenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCResourceContentData::mutable_optionalresourcenames() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResourceContentData.OptionalResourceNames)
  return &_impl_.optionalresourcenames_;
}

// string UrlCache = 2;
inline void UGCResourceContentData::clear_urlcache() {
  _impl_.urlcache_.ClearToEmpty();
}
inline const std::string& UGCResourceContentData::urlcache() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceContentData.UrlCache)
  return _internal_urlcache();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourceContentData::set_urlcache(ArgT0&& arg0, ArgT... args) {
 
 _impl_.urlcache_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourceContentData.UrlCache)
}
inline std::string* UGCResourceContentData::mutable_urlcache() {
  std::string* _s = _internal_mutable_urlcache();
  // @@protoc_insertion_point(field_mutable:message.UGCResourceContentData.UrlCache)
  return _s;
}
inline const std::string& UGCResourceContentData::_internal_urlcache() const {
  return _impl_.urlcache_.Get();
}
inline void UGCResourceContentData::_internal_set_urlcache(const std::string& value) {
  
  _impl_.urlcache_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourceContentData::_internal_mutable_urlcache() {
  
  return _impl_.urlcache_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourceContentData::release_urlcache() {
  // @@protoc_insertion_point(field_release:message.UGCResourceContentData.UrlCache)
  return _impl_.urlcache_.Release();
}
inline void UGCResourceContentData::set_allocated_urlcache(std::string* urlcache) {
  if (urlcache != nullptr) {
    
  } else {
    
  }
  _impl_.urlcache_.SetAllocated(urlcache, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.urlcache_.IsDefault()) {
    _impl_.urlcache_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourceContentData.UrlCache)
}

// repeated uint32 MapIds = 3;
inline int UGCResourceContentData::_internal_mapids_size() const {
  return _impl_.mapids_.size();
}
inline int UGCResourceContentData::mapids_size() const {
  return _internal_mapids_size();
}
inline void UGCResourceContentData::clear_mapids() {
  _impl_.mapids_.Clear();
}
inline uint32_t UGCResourceContentData::_internal_mapids(int index) const {
  return _impl_.mapids_.Get(index);
}
inline uint32_t UGCResourceContentData::mapids(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResourceContentData.MapIds)
  return _internal_mapids(index);
}
inline void UGCResourceContentData::set_mapids(int index, uint32_t value) {
  _impl_.mapids_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCResourceContentData.MapIds)
}
inline void UGCResourceContentData::_internal_add_mapids(uint32_t value) {
  _impl_.mapids_.Add(value);
}
inline void UGCResourceContentData::add_mapids(uint32_t value) {
  _internal_add_mapids(value);
  // @@protoc_insertion_point(field_add:message.UGCResourceContentData.MapIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCResourceContentData::_internal_mapids() const {
  return _impl_.mapids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCResourceContentData::mapids() const {
  // @@protoc_insertion_point(field_list:message.UGCResourceContentData.MapIds)
  return _internal_mapids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCResourceContentData::_internal_mutable_mapids() {
  return &_impl_.mapids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCResourceContentData::mutable_mapids() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResourceContentData.MapIds)
  return _internal_mutable_mapids();
}

// repeated uint32 ItemIds = 4;
inline int UGCResourceContentData::_internal_itemids_size() const {
  return _impl_.itemids_.size();
}
inline int UGCResourceContentData::itemids_size() const {
  return _internal_itemids_size();
}
inline void UGCResourceContentData::clear_itemids() {
  _impl_.itemids_.Clear();
}
inline uint32_t UGCResourceContentData::_internal_itemids(int index) const {
  return _impl_.itemids_.Get(index);
}
inline uint32_t UGCResourceContentData::itemids(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResourceContentData.ItemIds)
  return _internal_itemids(index);
}
inline void UGCResourceContentData::set_itemids(int index, uint32_t value) {
  _impl_.itemids_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCResourceContentData.ItemIds)
}
inline void UGCResourceContentData::_internal_add_itemids(uint32_t value) {
  _impl_.itemids_.Add(value);
}
inline void UGCResourceContentData::add_itemids(uint32_t value) {
  _internal_add_itemids(value);
  // @@protoc_insertion_point(field_add:message.UGCResourceContentData.ItemIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCResourceContentData::_internal_itemids() const {
  return _impl_.itemids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCResourceContentData::itemids() const {
  // @@protoc_insertion_point(field_list:message.UGCResourceContentData.ItemIds)
  return _internal_itemids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCResourceContentData::_internal_mutable_itemids() {
  return &_impl_.itemids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCResourceContentData::mutable_itemids() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResourceContentData.ItemIds)
  return _internal_mutable_itemids();
}

// .message.UGCGameDataResourcePackageInfo ResourcePackageInfo = 5;
inline bool UGCResourceContentData::_internal_has_resourcepackageinfo() const {
  return this != internal_default_instance() && _impl_.resourcepackageinfo_ != nullptr;
}
inline bool UGCResourceContentData::has_resourcepackageinfo() const {
  return _internal_has_resourcepackageinfo();
}
inline const ::message::UGCGameDataResourcePackageInfo& UGCResourceContentData::_internal_resourcepackageinfo() const {
  const ::message::UGCGameDataResourcePackageInfo* p = _impl_.resourcepackageinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCGameDataResourcePackageInfo&>(
      ::message::_UGCGameDataResourcePackageInfo_default_instance_);
}
inline const ::message::UGCGameDataResourcePackageInfo& UGCResourceContentData::resourcepackageinfo() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceContentData.ResourcePackageInfo)
  return _internal_resourcepackageinfo();
}
inline void UGCResourceContentData::unsafe_arena_set_allocated_resourcepackageinfo(
    ::message::UGCGameDataResourcePackageInfo* resourcepackageinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourcepackageinfo_);
  }
  _impl_.resourcepackageinfo_ = resourcepackageinfo;
  if (resourcepackageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResourceContentData.ResourcePackageInfo)
}
inline ::message::UGCGameDataResourcePackageInfo* UGCResourceContentData::release_resourcepackageinfo() {
  
  ::message::UGCGameDataResourcePackageInfo* temp = _impl_.resourcepackageinfo_;
  _impl_.resourcepackageinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCGameDataResourcePackageInfo* UGCResourceContentData::unsafe_arena_release_resourcepackageinfo() {
  // @@protoc_insertion_point(field_release:message.UGCResourceContentData.ResourcePackageInfo)
  
  ::message::UGCGameDataResourcePackageInfo* temp = _impl_.resourcepackageinfo_;
  _impl_.resourcepackageinfo_ = nullptr;
  return temp;
}
inline ::message::UGCGameDataResourcePackageInfo* UGCResourceContentData::_internal_mutable_resourcepackageinfo() {
  
  if (_impl_.resourcepackageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCGameDataResourcePackageInfo>(GetArenaForAllocation());
    _impl_.resourcepackageinfo_ = p;
  }
  return _impl_.resourcepackageinfo_;
}
inline ::message::UGCGameDataResourcePackageInfo* UGCResourceContentData::mutable_resourcepackageinfo() {
  ::message::UGCGameDataResourcePackageInfo* _msg = _internal_mutable_resourcepackageinfo();
  // @@protoc_insertion_point(field_mutable:message.UGCResourceContentData.ResourcePackageInfo)
  return _msg;
}
inline void UGCResourceContentData::set_allocated_resourcepackageinfo(::message::UGCGameDataResourcePackageInfo* resourcepackageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourcepackageinfo_);
  }
  if (resourcepackageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resourcepackageinfo));
    if (message_arena != submessage_arena) {
      resourcepackageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resourcepackageinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resourcepackageinfo_ = resourcepackageinfo;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourceContentData.ResourcePackageInfo)
}

// int32 ModeTemplateId = 6;
inline void UGCResourceContentData::clear_modetemplateid() {
  _impl_.modetemplateid_ = 0;
}
inline int32_t UGCResourceContentData::_internal_modetemplateid() const {
  return _impl_.modetemplateid_;
}
inline int32_t UGCResourceContentData::modetemplateid() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceContentData.ModeTemplateId)
  return _internal_modetemplateid();
}
inline void UGCResourceContentData::_internal_set_modetemplateid(int32_t value) {
  
  _impl_.modetemplateid_ = value;
}
inline void UGCResourceContentData::set_modetemplateid(int32_t value) {
  _internal_set_modetemplateid(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceContentData.ModeTemplateId)
}

// .message.UGCResourceContentData NotNecessaryResData = 7;
inline bool UGCResourceContentData::_internal_has_notnecessaryresdata() const {
  return this != internal_default_instance() && _impl_.notnecessaryresdata_ != nullptr;
}
inline bool UGCResourceContentData::has_notnecessaryresdata() const {
  return _internal_has_notnecessaryresdata();
}
inline void UGCResourceContentData::clear_notnecessaryresdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.notnecessaryresdata_ != nullptr) {
    delete _impl_.notnecessaryresdata_;
  }
  _impl_.notnecessaryresdata_ = nullptr;
}
inline const ::message::UGCResourceContentData& UGCResourceContentData::_internal_notnecessaryresdata() const {
  const ::message::UGCResourceContentData* p = _impl_.notnecessaryresdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCResourceContentData&>(
      ::message::_UGCResourceContentData_default_instance_);
}
inline const ::message::UGCResourceContentData& UGCResourceContentData::notnecessaryresdata() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceContentData.NotNecessaryResData)
  return _internal_notnecessaryresdata();
}
inline void UGCResourceContentData::unsafe_arena_set_allocated_notnecessaryresdata(
    ::message::UGCResourceContentData* notnecessaryresdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notnecessaryresdata_);
  }
  _impl_.notnecessaryresdata_ = notnecessaryresdata;
  if (notnecessaryresdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResourceContentData.NotNecessaryResData)
}
inline ::message::UGCResourceContentData* UGCResourceContentData::release_notnecessaryresdata() {
  
  ::message::UGCResourceContentData* temp = _impl_.notnecessaryresdata_;
  _impl_.notnecessaryresdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCResourceContentData* UGCResourceContentData::unsafe_arena_release_notnecessaryresdata() {
  // @@protoc_insertion_point(field_release:message.UGCResourceContentData.NotNecessaryResData)
  
  ::message::UGCResourceContentData* temp = _impl_.notnecessaryresdata_;
  _impl_.notnecessaryresdata_ = nullptr;
  return temp;
}
inline ::message::UGCResourceContentData* UGCResourceContentData::_internal_mutable_notnecessaryresdata() {
  
  if (_impl_.notnecessaryresdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCResourceContentData>(GetArenaForAllocation());
    _impl_.notnecessaryresdata_ = p;
  }
  return _impl_.notnecessaryresdata_;
}
inline ::message::UGCResourceContentData* UGCResourceContentData::mutable_notnecessaryresdata() {
  ::message::UGCResourceContentData* _msg = _internal_mutable_notnecessaryresdata();
  // @@protoc_insertion_point(field_mutable:message.UGCResourceContentData.NotNecessaryResData)
  return _msg;
}
inline void UGCResourceContentData::set_allocated_notnecessaryresdata(::message::UGCResourceContentData* notnecessaryresdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.notnecessaryresdata_;
  }
  if (notnecessaryresdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notnecessaryresdata);
    if (message_arena != submessage_arena) {
      notnecessaryresdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notnecessaryresdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.notnecessaryresdata_ = notnecessaryresdata;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourceContentData.NotNecessaryResData)
}

// repeated uint32 CSSharedItemID = 8;
inline int UGCResourceContentData::_internal_csshareditemid_size() const {
  return _impl_.csshareditemid_.size();
}
inline int UGCResourceContentData::csshareditemid_size() const {
  return _internal_csshareditemid_size();
}
inline void UGCResourceContentData::clear_csshareditemid() {
  _impl_.csshareditemid_.Clear();
}
inline uint32_t UGCResourceContentData::_internal_csshareditemid(int index) const {
  return _impl_.csshareditemid_.Get(index);
}
inline uint32_t UGCResourceContentData::csshareditemid(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResourceContentData.CSSharedItemID)
  return _internal_csshareditemid(index);
}
inline void UGCResourceContentData::set_csshareditemid(int index, uint32_t value) {
  _impl_.csshareditemid_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCResourceContentData.CSSharedItemID)
}
inline void UGCResourceContentData::_internal_add_csshareditemid(uint32_t value) {
  _impl_.csshareditemid_.Add(value);
}
inline void UGCResourceContentData::add_csshareditemid(uint32_t value) {
  _internal_add_csshareditemid(value);
  // @@protoc_insertion_point(field_add:message.UGCResourceContentData.CSSharedItemID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCResourceContentData::_internal_csshareditemid() const {
  return _impl_.csshareditemid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
UGCResourceContentData::csshareditemid() const {
  // @@protoc_insertion_point(field_list:message.UGCResourceContentData.CSSharedItemID)
  return _internal_csshareditemid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCResourceContentData::_internal_mutable_csshareditemid() {
  return &_impl_.csshareditemid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
UGCResourceContentData::mutable_csshareditemid() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResourceContentData.CSSharedItemID)
  return _internal_mutable_csshareditemid();
}

// -------------------------------------------------------------------

// UGCRoomCustomParamLocDatas

// repeated .message.UGCLocData LocData = 1;
inline int UGCRoomCustomParamLocDatas::_internal_locdata_size() const {
  return _impl_.locdata_.size();
}
inline int UGCRoomCustomParamLocDatas::locdata_size() const {
  return _internal_locdata_size();
}
inline void UGCRoomCustomParamLocDatas::clear_locdata() {
  _impl_.locdata_.Clear();
}
inline ::message::UGCLocData* UGCRoomCustomParamLocDatas::mutable_locdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCRoomCustomParamLocDatas.LocData)
  return _impl_.locdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData >*
UGCRoomCustomParamLocDatas::mutable_locdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCRoomCustomParamLocDatas.LocData)
  return &_impl_.locdata_;
}
inline const ::message::UGCLocData& UGCRoomCustomParamLocDatas::_internal_locdata(int index) const {
  return _impl_.locdata_.Get(index);
}
inline const ::message::UGCLocData& UGCRoomCustomParamLocDatas::locdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCRoomCustomParamLocDatas.LocData)
  return _internal_locdata(index);
}
inline ::message::UGCLocData* UGCRoomCustomParamLocDatas::_internal_add_locdata() {
  return _impl_.locdata_.Add();
}
inline ::message::UGCLocData* UGCRoomCustomParamLocDatas::add_locdata() {
  ::message::UGCLocData* _add = _internal_add_locdata();
  // @@protoc_insertion_point(field_add:message.UGCRoomCustomParamLocDatas.LocData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCLocData >&
UGCRoomCustomParamLocDatas::locdata() const {
  // @@protoc_insertion_point(field_list:message.UGCRoomCustomParamLocDatas.LocData)
  return _impl_.locdata_;
}

// -------------------------------------------------------------------

// UGCDatabaseData

// int32 TypeID = 1;
inline void UGCDatabaseData::clear_typeid_() {
  _impl_.typeid__ = 0;
}
inline int32_t UGCDatabaseData::_internal_typeid_() const {
  return _impl_.typeid__;
}
inline int32_t UGCDatabaseData::typeid_() const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.TypeID)
  return _internal_typeid_();
}
inline void UGCDatabaseData::_internal_set_typeid_(int32_t value) {
  
  _impl_.typeid__ = value;
}
inline void UGCDatabaseData::set_typeid_(int32_t value) {
  _internal_set_typeid_(value);
  // @@protoc_insertion_point(field_set:message.UGCDatabaseData.TypeID)
}

// repeated .message.UGCDatabaseData ListData = 2;
inline int UGCDatabaseData::_internal_listdata_size() const {
  return _impl_.listdata_.size();
}
inline int UGCDatabaseData::listdata_size() const {
  return _internal_listdata_size();
}
inline void UGCDatabaseData::clear_listdata() {
  _impl_.listdata_.Clear();
}
inline ::message::UGCDatabaseData* UGCDatabaseData::mutable_listdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCDatabaseData.ListData)
  return _impl_.listdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCDatabaseData >*
UGCDatabaseData::mutable_listdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCDatabaseData.ListData)
  return &_impl_.listdata_;
}
inline const ::message::UGCDatabaseData& UGCDatabaseData::_internal_listdata(int index) const {
  return _impl_.listdata_.Get(index);
}
inline const ::message::UGCDatabaseData& UGCDatabaseData::listdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.ListData)
  return _internal_listdata(index);
}
inline ::message::UGCDatabaseData* UGCDatabaseData::_internal_add_listdata() {
  return _impl_.listdata_.Add();
}
inline ::message::UGCDatabaseData* UGCDatabaseData::add_listdata() {
  ::message::UGCDatabaseData* _add = _internal_add_listdata();
  // @@protoc_insertion_point(field_add:message.UGCDatabaseData.ListData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCDatabaseData >&
UGCDatabaseData::listdata() const {
  // @@protoc_insertion_point(field_list:message.UGCDatabaseData.ListData)
  return _impl_.listdata_;
}

// bool BoolValue = 3;
inline bool UGCDatabaseData::_internal_has_boolvalue() const {
  return Value_case() == kBoolValue;
}
inline bool UGCDatabaseData::has_boolvalue() const {
  return _internal_has_boolvalue();
}
inline void UGCDatabaseData::set_has_boolvalue() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void UGCDatabaseData::clear_boolvalue() {
  if (_internal_has_boolvalue()) {
    _impl_.Value_.boolvalue_ = false;
    clear_has_Value();
  }
}
inline bool UGCDatabaseData::_internal_boolvalue() const {
  if (_internal_has_boolvalue()) {
    return _impl_.Value_.boolvalue_;
  }
  return false;
}
inline void UGCDatabaseData::_internal_set_boolvalue(bool value) {
  if (!_internal_has_boolvalue()) {
    clear_Value();
    set_has_boolvalue();
  }
  _impl_.Value_.boolvalue_ = value;
}
inline bool UGCDatabaseData::boolvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.BoolValue)
  return _internal_boolvalue();
}
inline void UGCDatabaseData::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCDatabaseData.BoolValue)
}

// int32 IntValue = 4;
inline bool UGCDatabaseData::_internal_has_intvalue() const {
  return Value_case() == kIntValue;
}
inline bool UGCDatabaseData::has_intvalue() const {
  return _internal_has_intvalue();
}
inline void UGCDatabaseData::set_has_intvalue() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void UGCDatabaseData::clear_intvalue() {
  if (_internal_has_intvalue()) {
    _impl_.Value_.intvalue_ = 0;
    clear_has_Value();
  }
}
inline int32_t UGCDatabaseData::_internal_intvalue() const {
  if (_internal_has_intvalue()) {
    return _impl_.Value_.intvalue_;
  }
  return 0;
}
inline void UGCDatabaseData::_internal_set_intvalue(int32_t value) {
  if (!_internal_has_intvalue()) {
    clear_Value();
    set_has_intvalue();
  }
  _impl_.Value_.intvalue_ = value;
}
inline int32_t UGCDatabaseData::intvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.IntValue)
  return _internal_intvalue();
}
inline void UGCDatabaseData::set_intvalue(int32_t value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCDatabaseData.IntValue)
}

// float FloatValue = 5;
inline bool UGCDatabaseData::_internal_has_floatvalue() const {
  return Value_case() == kFloatValue;
}
inline bool UGCDatabaseData::has_floatvalue() const {
  return _internal_has_floatvalue();
}
inline void UGCDatabaseData::set_has_floatvalue() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void UGCDatabaseData::clear_floatvalue() {
  if (_internal_has_floatvalue()) {
    _impl_.Value_.floatvalue_ = 0;
    clear_has_Value();
  }
}
inline float UGCDatabaseData::_internal_floatvalue() const {
  if (_internal_has_floatvalue()) {
    return _impl_.Value_.floatvalue_;
  }
  return 0;
}
inline void UGCDatabaseData::_internal_set_floatvalue(float value) {
  if (!_internal_has_floatvalue()) {
    clear_Value();
    set_has_floatvalue();
  }
  _impl_.Value_.floatvalue_ = value;
}
inline float UGCDatabaseData::floatvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.FloatValue)
  return _internal_floatvalue();
}
inline void UGCDatabaseData::set_floatvalue(float value) {
  _internal_set_floatvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCDatabaseData.FloatValue)
}

// string StringValue = 6;
inline bool UGCDatabaseData::_internal_has_stringvalue() const {
  return Value_case() == kStringValue;
}
inline bool UGCDatabaseData::has_stringvalue() const {
  return _internal_has_stringvalue();
}
inline void UGCDatabaseData::set_has_stringvalue() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void UGCDatabaseData::clear_stringvalue() {
  if (_internal_has_stringvalue()) {
    _impl_.Value_.stringvalue_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& UGCDatabaseData::stringvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.StringValue)
  return _internal_stringvalue();
}
template <typename ArgT0, typename... ArgT>
inline void UGCDatabaseData::set_stringvalue(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    _impl_.Value_.stringvalue_.InitDefault();
  }
  _impl_.Value_.stringvalue_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCDatabaseData.StringValue)
}
inline std::string* UGCDatabaseData::mutable_stringvalue() {
  std::string* _s = _internal_mutable_stringvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCDatabaseData.StringValue)
  return _s;
}
inline const std::string& UGCDatabaseData::_internal_stringvalue() const {
  if (_internal_has_stringvalue()) {
    return _impl_.Value_.stringvalue_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UGCDatabaseData::_internal_set_stringvalue(const std::string& value) {
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    _impl_.Value_.stringvalue_.InitDefault();
  }
  _impl_.Value_.stringvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCDatabaseData::_internal_mutable_stringvalue() {
  if (!_internal_has_stringvalue()) {
    clear_Value();
    set_has_stringvalue();
    _impl_.Value_.stringvalue_.InitDefault();
  }
  return _impl_.Value_.stringvalue_.Mutable(      GetArenaForAllocation());
}
inline std::string* UGCDatabaseData::release_stringvalue() {
  // @@protoc_insertion_point(field_release:message.UGCDatabaseData.StringValue)
  if (_internal_has_stringvalue()) {
    clear_has_Value();
    return _impl_.Value_.stringvalue_.Release();
  } else {
    return nullptr;
  }
}
inline void UGCDatabaseData::set_allocated_stringvalue(std::string* stringvalue) {
  if (has_Value()) {
    clear_Value();
  }
  if (stringvalue != nullptr) {
    set_has_stringvalue();
    _impl_.Value_.stringvalue_.InitAllocated(stringvalue, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCDatabaseData.StringValue)
}

// .message.ProtoBuffVector2 Vector2Value = 7;
inline bool UGCDatabaseData::_internal_has_vector2value() const {
  return Value_case() == kVector2Value;
}
inline bool UGCDatabaseData::has_vector2value() const {
  return _internal_has_vector2value();
}
inline void UGCDatabaseData::set_has_vector2value() {
  _impl_._oneof_case_[0] = kVector2Value;
}
inline ::message::ProtoBuffVector2* UGCDatabaseData::release_vector2value() {
  // @@protoc_insertion_point(field_release:message.UGCDatabaseData.Vector2Value)
  if (_internal_has_vector2value()) {
    clear_has_Value();
    ::message::ProtoBuffVector2* temp = _impl_.Value_.vector2value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.vector2value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ProtoBuffVector2& UGCDatabaseData::_internal_vector2value() const {
  return _internal_has_vector2value()
      ? *_impl_.Value_.vector2value_
      : reinterpret_cast< ::message::ProtoBuffVector2&>(::message::_ProtoBuffVector2_default_instance_);
}
inline const ::message::ProtoBuffVector2& UGCDatabaseData::vector2value() const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.Vector2Value)
  return _internal_vector2value();
}
inline ::message::ProtoBuffVector2* UGCDatabaseData::unsafe_arena_release_vector2value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.UGCDatabaseData.Vector2Value)
  if (_internal_has_vector2value()) {
    clear_has_Value();
    ::message::ProtoBuffVector2* temp = _impl_.Value_.vector2value_;
    _impl_.Value_.vector2value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UGCDatabaseData::unsafe_arena_set_allocated_vector2value(::message::ProtoBuffVector2* vector2value) {
  clear_Value();
  if (vector2value) {
    set_has_vector2value();
    _impl_.Value_.vector2value_ = vector2value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCDatabaseData.Vector2Value)
}
inline ::message::ProtoBuffVector2* UGCDatabaseData::_internal_mutable_vector2value() {
  if (!_internal_has_vector2value()) {
    clear_Value();
    set_has_vector2value();
    _impl_.Value_.vector2value_ = CreateMaybeMessage< ::message::ProtoBuffVector2 >(GetArenaForAllocation());
  }
  return _impl_.Value_.vector2value_;
}
inline ::message::ProtoBuffVector2* UGCDatabaseData::mutable_vector2value() {
  ::message::ProtoBuffVector2* _msg = _internal_mutable_vector2value();
  // @@protoc_insertion_point(field_mutable:message.UGCDatabaseData.Vector2Value)
  return _msg;
}

// .message.ProtoBuffVector3 Vector3Value = 8;
inline bool UGCDatabaseData::_internal_has_vector3value() const {
  return Value_case() == kVector3Value;
}
inline bool UGCDatabaseData::has_vector3value() const {
  return _internal_has_vector3value();
}
inline void UGCDatabaseData::set_has_vector3value() {
  _impl_._oneof_case_[0] = kVector3Value;
}
inline ::message::ProtoBuffVector3* UGCDatabaseData::release_vector3value() {
  // @@protoc_insertion_point(field_release:message.UGCDatabaseData.Vector3Value)
  if (_internal_has_vector3value()) {
    clear_has_Value();
    ::message::ProtoBuffVector3* temp = _impl_.Value_.vector3value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.vector3value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ProtoBuffVector3& UGCDatabaseData::_internal_vector3value() const {
  return _internal_has_vector3value()
      ? *_impl_.Value_.vector3value_
      : reinterpret_cast< ::message::ProtoBuffVector3&>(::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCDatabaseData::vector3value() const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.Vector3Value)
  return _internal_vector3value();
}
inline ::message::ProtoBuffVector3* UGCDatabaseData::unsafe_arena_release_vector3value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.UGCDatabaseData.Vector3Value)
  if (_internal_has_vector3value()) {
    clear_has_Value();
    ::message::ProtoBuffVector3* temp = _impl_.Value_.vector3value_;
    _impl_.Value_.vector3value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UGCDatabaseData::unsafe_arena_set_allocated_vector3value(::message::ProtoBuffVector3* vector3value) {
  clear_Value();
  if (vector3value) {
    set_has_vector3value();
    _impl_.Value_.vector3value_ = vector3value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCDatabaseData.Vector3Value)
}
inline ::message::ProtoBuffVector3* UGCDatabaseData::_internal_mutable_vector3value() {
  if (!_internal_has_vector3value()) {
    clear_Value();
    set_has_vector3value();
    _impl_.Value_.vector3value_ = CreateMaybeMessage< ::message::ProtoBuffVector3 >(GetArenaForAllocation());
  }
  return _impl_.Value_.vector3value_;
}
inline ::message::ProtoBuffVector3* UGCDatabaseData::mutable_vector3value() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_vector3value();
  // @@protoc_insertion_point(field_mutable:message.UGCDatabaseData.Vector3Value)
  return _msg;
}

// .message.ProtoBuffQuaternion QuaternionValue = 9;
inline bool UGCDatabaseData::_internal_has_quaternionvalue() const {
  return Value_case() == kQuaternionValue;
}
inline bool UGCDatabaseData::has_quaternionvalue() const {
  return _internal_has_quaternionvalue();
}
inline void UGCDatabaseData::set_has_quaternionvalue() {
  _impl_._oneof_case_[0] = kQuaternionValue;
}
inline ::message::ProtoBuffQuaternion* UGCDatabaseData::release_quaternionvalue() {
  // @@protoc_insertion_point(field_release:message.UGCDatabaseData.QuaternionValue)
  if (_internal_has_quaternionvalue()) {
    clear_has_Value();
    ::message::ProtoBuffQuaternion* temp = _impl_.Value_.quaternionvalue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.quaternionvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ProtoBuffQuaternion& UGCDatabaseData::_internal_quaternionvalue() const {
  return _internal_has_quaternionvalue()
      ? *_impl_.Value_.quaternionvalue_
      : reinterpret_cast< ::message::ProtoBuffQuaternion&>(::message::_ProtoBuffQuaternion_default_instance_);
}
inline const ::message::ProtoBuffQuaternion& UGCDatabaseData::quaternionvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.QuaternionValue)
  return _internal_quaternionvalue();
}
inline ::message::ProtoBuffQuaternion* UGCDatabaseData::unsafe_arena_release_quaternionvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.UGCDatabaseData.QuaternionValue)
  if (_internal_has_quaternionvalue()) {
    clear_has_Value();
    ::message::ProtoBuffQuaternion* temp = _impl_.Value_.quaternionvalue_;
    _impl_.Value_.quaternionvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UGCDatabaseData::unsafe_arena_set_allocated_quaternionvalue(::message::ProtoBuffQuaternion* quaternionvalue) {
  clear_Value();
  if (quaternionvalue) {
    set_has_quaternionvalue();
    _impl_.Value_.quaternionvalue_ = quaternionvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCDatabaseData.QuaternionValue)
}
inline ::message::ProtoBuffQuaternion* UGCDatabaseData::_internal_mutable_quaternionvalue() {
  if (!_internal_has_quaternionvalue()) {
    clear_Value();
    set_has_quaternionvalue();
    _impl_.Value_.quaternionvalue_ = CreateMaybeMessage< ::message::ProtoBuffQuaternion >(GetArenaForAllocation());
  }
  return _impl_.Value_.quaternionvalue_;
}
inline ::message::ProtoBuffQuaternion* UGCDatabaseData::mutable_quaternionvalue() {
  ::message::ProtoBuffQuaternion* _msg = _internal_mutable_quaternionvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCDatabaseData.QuaternionValue)
  return _msg;
}

// .message.ProtoBuffColor ColorValue = 10;
inline bool UGCDatabaseData::_internal_has_colorvalue() const {
  return Value_case() == kColorValue;
}
inline bool UGCDatabaseData::has_colorvalue() const {
  return _internal_has_colorvalue();
}
inline void UGCDatabaseData::set_has_colorvalue() {
  _impl_._oneof_case_[0] = kColorValue;
}
inline ::message::ProtoBuffColor* UGCDatabaseData::release_colorvalue() {
  // @@protoc_insertion_point(field_release:message.UGCDatabaseData.ColorValue)
  if (_internal_has_colorvalue()) {
    clear_has_Value();
    ::message::ProtoBuffColor* temp = _impl_.Value_.colorvalue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.colorvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ProtoBuffColor& UGCDatabaseData::_internal_colorvalue() const {
  return _internal_has_colorvalue()
      ? *_impl_.Value_.colorvalue_
      : reinterpret_cast< ::message::ProtoBuffColor&>(::message::_ProtoBuffColor_default_instance_);
}
inline const ::message::ProtoBuffColor& UGCDatabaseData::colorvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCDatabaseData.ColorValue)
  return _internal_colorvalue();
}
inline ::message::ProtoBuffColor* UGCDatabaseData::unsafe_arena_release_colorvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.UGCDatabaseData.ColorValue)
  if (_internal_has_colorvalue()) {
    clear_has_Value();
    ::message::ProtoBuffColor* temp = _impl_.Value_.colorvalue_;
    _impl_.Value_.colorvalue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UGCDatabaseData::unsafe_arena_set_allocated_colorvalue(::message::ProtoBuffColor* colorvalue) {
  clear_Value();
  if (colorvalue) {
    set_has_colorvalue();
    _impl_.Value_.colorvalue_ = colorvalue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCDatabaseData.ColorValue)
}
inline ::message::ProtoBuffColor* UGCDatabaseData::_internal_mutable_colorvalue() {
  if (!_internal_has_colorvalue()) {
    clear_Value();
    set_has_colorvalue();
    _impl_.Value_.colorvalue_ = CreateMaybeMessage< ::message::ProtoBuffColor >(GetArenaForAllocation());
  }
  return _impl_.Value_.colorvalue_;
}
inline ::message::ProtoBuffColor* UGCDatabaseData::mutable_colorvalue() {
  ::message::ProtoBuffColor* _msg = _internal_mutable_colorvalue();
  // @@protoc_insertion_point(field_mutable:message.UGCDatabaseData.ColorValue)
  return _msg;
}

inline bool UGCDatabaseData::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void UGCDatabaseData::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline UGCDatabaseData::ValueCase UGCDatabaseData::Value_case() const {
  return UGCDatabaseData::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UGCRoomHalfWayJoinRule

// int32 RecommendStartGameNumber = 1;
inline void UGCRoomHalfWayJoinRule::clear_recommendstartgamenumber() {
  _impl_.recommendstartgamenumber_ = 0;
}
inline int32_t UGCRoomHalfWayJoinRule::_internal_recommendstartgamenumber() const {
  return _impl_.recommendstartgamenumber_;
}
inline int32_t UGCRoomHalfWayJoinRule::recommendstartgamenumber() const {
  // @@protoc_insertion_point(field_get:message.UGCRoomHalfWayJoinRule.RecommendStartGameNumber)
  return _internal_recommendstartgamenumber();
}
inline void UGCRoomHalfWayJoinRule::_internal_set_recommendstartgamenumber(int32_t value) {
  
  _impl_.recommendstartgamenumber_ = value;
}
inline void UGCRoomHalfWayJoinRule::set_recommendstartgamenumber(int32_t value) {
  _internal_set_recommendstartgamenumber(value);
  // @@protoc_insertion_point(field_set:message.UGCRoomHalfWayJoinRule.RecommendStartGameNumber)
}

// bool EnableHalfWayJoin = 2;
inline void UGCRoomHalfWayJoinRule::clear_enablehalfwayjoin() {
  _impl_.enablehalfwayjoin_ = false;
}
inline bool UGCRoomHalfWayJoinRule::_internal_enablehalfwayjoin() const {
  return _impl_.enablehalfwayjoin_;
}
inline bool UGCRoomHalfWayJoinRule::enablehalfwayjoin() const {
  // @@protoc_insertion_point(field_get:message.UGCRoomHalfWayJoinRule.EnableHalfWayJoin)
  return _internal_enablehalfwayjoin();
}
inline void UGCRoomHalfWayJoinRule::_internal_set_enablehalfwayjoin(bool value) {
  
  _impl_.enablehalfwayjoin_ = value;
}
inline void UGCRoomHalfWayJoinRule::set_enablehalfwayjoin(bool value) {
  _internal_set_enablehalfwayjoin(value);
  // @@protoc_insertion_point(field_set:message.UGCRoomHalfWayJoinRule.EnableHalfWayJoin)
}

// bool EnableHalfWayJoinEffectTime = 3;
inline void UGCRoomHalfWayJoinRule::clear_enablehalfwayjoineffecttime() {
  _impl_.enablehalfwayjoineffecttime_ = false;
}
inline bool UGCRoomHalfWayJoinRule::_internal_enablehalfwayjoineffecttime() const {
  return _impl_.enablehalfwayjoineffecttime_;
}
inline bool UGCRoomHalfWayJoinRule::enablehalfwayjoineffecttime() const {
  // @@protoc_insertion_point(field_get:message.UGCRoomHalfWayJoinRule.EnableHalfWayJoinEffectTime)
  return _internal_enablehalfwayjoineffecttime();
}
inline void UGCRoomHalfWayJoinRule::_internal_set_enablehalfwayjoineffecttime(bool value) {
  
  _impl_.enablehalfwayjoineffecttime_ = value;
}
inline void UGCRoomHalfWayJoinRule::set_enablehalfwayjoineffecttime(bool value) {
  _internal_set_enablehalfwayjoineffecttime(value);
  // @@protoc_insertion_point(field_set:message.UGCRoomHalfWayJoinRule.EnableHalfWayJoinEffectTime)
}

// int32 HalfWayJoinEffectTime = 4;
inline void UGCRoomHalfWayJoinRule::clear_halfwayjoineffecttime() {
  _impl_.halfwayjoineffecttime_ = 0;
}
inline int32_t UGCRoomHalfWayJoinRule::_internal_halfwayjoineffecttime() const {
  return _impl_.halfwayjoineffecttime_;
}
inline int32_t UGCRoomHalfWayJoinRule::halfwayjoineffecttime() const {
  // @@protoc_insertion_point(field_get:message.UGCRoomHalfWayJoinRule.HalfWayJoinEffectTime)
  return _internal_halfwayjoineffecttime();
}
inline void UGCRoomHalfWayJoinRule::_internal_set_halfwayjoineffecttime(int32_t value) {
  
  _impl_.halfwayjoineffecttime_ = value;
}
inline void UGCRoomHalfWayJoinRule::set_halfwayjoineffecttime(int32_t value) {
  _internal_set_halfwayjoineffecttime(value);
  // @@protoc_insertion_point(field_set:message.UGCRoomHalfWayJoinRule.HalfWayJoinEffectTime)
}

// bool HalfWayJoinNumberLimit = 5;
inline void UGCRoomHalfWayJoinRule::clear_halfwayjoinnumberlimit() {
  _impl_.halfwayjoinnumberlimit_ = false;
}
inline bool UGCRoomHalfWayJoinRule::_internal_halfwayjoinnumberlimit() const {
  return _impl_.halfwayjoinnumberlimit_;
}
inline bool UGCRoomHalfWayJoinRule::halfwayjoinnumberlimit() const {
  // @@protoc_insertion_point(field_get:message.UGCRoomHalfWayJoinRule.HalfWayJoinNumberLimit)
  return _internal_halfwayjoinnumberlimit();
}
inline void UGCRoomHalfWayJoinRule::_internal_set_halfwayjoinnumberlimit(bool value) {
  
  _impl_.halfwayjoinnumberlimit_ = value;
}
inline void UGCRoomHalfWayJoinRule::set_halfwayjoinnumberlimit(bool value) {
  _internal_set_halfwayjoinnumberlimit(value);
  // @@protoc_insertion_point(field_set:message.UGCRoomHalfWayJoinRule.HalfWayJoinNumberLimit)
}

// int32 HalfWayJoinNumber = 6;
inline void UGCRoomHalfWayJoinRule::clear_halfwayjoinnumber() {
  _impl_.halfwayjoinnumber_ = 0;
}
inline int32_t UGCRoomHalfWayJoinRule::_internal_halfwayjoinnumber() const {
  return _impl_.halfwayjoinnumber_;
}
inline int32_t UGCRoomHalfWayJoinRule::halfwayjoinnumber() const {
  // @@protoc_insertion_point(field_get:message.UGCRoomHalfWayJoinRule.HalfWayJoinNumber)
  return _internal_halfwayjoinnumber();
}
inline void UGCRoomHalfWayJoinRule::_internal_set_halfwayjoinnumber(int32_t value) {
  
  _impl_.halfwayjoinnumber_ = value;
}
inline void UGCRoomHalfWayJoinRule::set_halfwayjoinnumber(int32_t value) {
  _internal_set_halfwayjoinnumber(value);
  // @@protoc_insertion_point(field_set:message.UGCRoomHalfWayJoinRule.HalfWayJoinNumber)
}

// bool EnableHalfwaySubmitMatchStats = 7;
inline void UGCRoomHalfWayJoinRule::clear_enablehalfwaysubmitmatchstats() {
  _impl_.enablehalfwaysubmitmatchstats_ = false;
}
inline bool UGCRoomHalfWayJoinRule::_internal_enablehalfwaysubmitmatchstats() const {
  return _impl_.enablehalfwaysubmitmatchstats_;
}
inline bool UGCRoomHalfWayJoinRule::enablehalfwaysubmitmatchstats() const {
  // @@protoc_insertion_point(field_get:message.UGCRoomHalfWayJoinRule.EnableHalfwaySubmitMatchStats)
  return _internal_enablehalfwaysubmitmatchstats();
}
inline void UGCRoomHalfWayJoinRule::_internal_set_enablehalfwaysubmitmatchstats(bool value) {
  
  _impl_.enablehalfwaysubmitmatchstats_ = value;
}
inline void UGCRoomHalfWayJoinRule::set_enablehalfwaysubmitmatchstats(bool value) {
  _internal_set_enablehalfwaysubmitmatchstats(value);
  // @@protoc_insertion_point(field_set:message.UGCRoomHalfWayJoinRule.EnableHalfwaySubmitMatchStats)
}

// -------------------------------------------------------------------

// UGCResAnimationClipEvent

// int32 EventID = 1;
inline void UGCResAnimationClipEvent::clear_eventid() {
  _impl_.eventid_ = 0;
}
inline int32_t UGCResAnimationClipEvent::_internal_eventid() const {
  return _impl_.eventid_;
}
inline int32_t UGCResAnimationClipEvent::eventid() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationClipEvent.EventID)
  return _internal_eventid();
}
inline void UGCResAnimationClipEvent::_internal_set_eventid(int32_t value) {
  
  _impl_.eventid_ = value;
}
inline void UGCResAnimationClipEvent::set_eventid(int32_t value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimationClipEvent.EventID)
}

// string EventName = 2;
inline void UGCResAnimationClipEvent::clear_eventname() {
  _impl_.eventname_.ClearToEmpty();
}
inline const std::string& UGCResAnimationClipEvent::eventname() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationClipEvent.EventName)
  return _internal_eventname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAnimationClipEvent::set_eventname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.eventname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAnimationClipEvent.EventName)
}
inline std::string* UGCResAnimationClipEvent::mutable_eventname() {
  std::string* _s = _internal_mutable_eventname();
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimationClipEvent.EventName)
  return _s;
}
inline const std::string& UGCResAnimationClipEvent::_internal_eventname() const {
  return _impl_.eventname_.Get();
}
inline void UGCResAnimationClipEvent::_internal_set_eventname(const std::string& value) {
  
  _impl_.eventname_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAnimationClipEvent::_internal_mutable_eventname() {
  
  return _impl_.eventname_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAnimationClipEvent::release_eventname() {
  // @@protoc_insertion_point(field_release:message.UGCResAnimationClipEvent.EventName)
  return _impl_.eventname_.Release();
}
inline void UGCResAnimationClipEvent::set_allocated_eventname(std::string* eventname) {
  if (eventname != nullptr) {
    
  } else {
    
  }
  _impl_.eventname_.SetAllocated(eventname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.eventname_.IsDefault()) {
    _impl_.eventname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAnimationClipEvent.EventName)
}

// float EventTime = 3;
inline void UGCResAnimationClipEvent::clear_eventtime() {
  _impl_.eventtime_ = 0;
}
inline float UGCResAnimationClipEvent::_internal_eventtime() const {
  return _impl_.eventtime_;
}
inline float UGCResAnimationClipEvent::eventtime() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationClipEvent.EventTime)
  return _internal_eventtime();
}
inline void UGCResAnimationClipEvent::_internal_set_eventtime(float value) {
  
  _impl_.eventtime_ = value;
}
inline void UGCResAnimationClipEvent::set_eventtime(float value) {
  _internal_set_eventtime(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimationClipEvent.EventTime)
}

// .message.UGCVarValueDataV2 EventParamList = 4;
inline bool UGCResAnimationClipEvent::_internal_has_eventparamlist() const {
  return this != internal_default_instance() && _impl_.eventparamlist_ != nullptr;
}
inline bool UGCResAnimationClipEvent::has_eventparamlist() const {
  return _internal_has_eventparamlist();
}
inline void UGCResAnimationClipEvent::clear_eventparamlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.eventparamlist_ != nullptr) {
    delete _impl_.eventparamlist_;
  }
  _impl_.eventparamlist_ = nullptr;
}
inline const ::message::UGCVarValueDataV2& UGCResAnimationClipEvent::_internal_eventparamlist() const {
  const ::message::UGCVarValueDataV2* p = _impl_.eventparamlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCVarValueDataV2&>(
      ::message::_UGCVarValueDataV2_default_instance_);
}
inline const ::message::UGCVarValueDataV2& UGCResAnimationClipEvent::eventparamlist() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationClipEvent.EventParamList)
  return _internal_eventparamlist();
}
inline void UGCResAnimationClipEvent::unsafe_arena_set_allocated_eventparamlist(
    ::message::UGCVarValueDataV2* eventparamlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eventparamlist_);
  }
  _impl_.eventparamlist_ = eventparamlist;
  if (eventparamlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResAnimationClipEvent.EventParamList)
}
inline ::message::UGCVarValueDataV2* UGCResAnimationClipEvent::release_eventparamlist() {
  
  ::message::UGCVarValueDataV2* temp = _impl_.eventparamlist_;
  _impl_.eventparamlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCResAnimationClipEvent::unsafe_arena_release_eventparamlist() {
  // @@protoc_insertion_point(field_release:message.UGCResAnimationClipEvent.EventParamList)
  
  ::message::UGCVarValueDataV2* temp = _impl_.eventparamlist_;
  _impl_.eventparamlist_ = nullptr;
  return temp;
}
inline ::message::UGCVarValueDataV2* UGCResAnimationClipEvent::_internal_mutable_eventparamlist() {
  
  if (_impl_.eventparamlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCVarValueDataV2>(GetArenaForAllocation());
    _impl_.eventparamlist_ = p;
  }
  return _impl_.eventparamlist_;
}
inline ::message::UGCVarValueDataV2* UGCResAnimationClipEvent::mutable_eventparamlist() {
  ::message::UGCVarValueDataV2* _msg = _internal_mutable_eventparamlist();
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimationClipEvent.EventParamList)
  return _msg;
}
inline void UGCResAnimationClipEvent::set_allocated_eventparamlist(::message::UGCVarValueDataV2* eventparamlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.eventparamlist_;
  }
  if (eventparamlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(eventparamlist);
    if (message_arena != submessage_arena) {
      eventparamlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eventparamlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.eventparamlist_ = eventparamlist;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAnimationClipEvent.EventParamList)
}

// -------------------------------------------------------------------

// UGCResEventAnimationClipData

// string ClipName = 1;
inline void UGCResEventAnimationClipData::clear_clipname() {
  _impl_.clipname_.ClearToEmpty();
}
inline const std::string& UGCResEventAnimationClipData::clipname() const {
  // @@protoc_insertion_point(field_get:message.UGCResEventAnimationClipData.ClipName)
  return _internal_clipname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResEventAnimationClipData::set_clipname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clipname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResEventAnimationClipData.ClipName)
}
inline std::string* UGCResEventAnimationClipData::mutable_clipname() {
  std::string* _s = _internal_mutable_clipname();
  // @@protoc_insertion_point(field_mutable:message.UGCResEventAnimationClipData.ClipName)
  return _s;
}
inline const std::string& UGCResEventAnimationClipData::_internal_clipname() const {
  return _impl_.clipname_.Get();
}
inline void UGCResEventAnimationClipData::_internal_set_clipname(const std::string& value) {
  
  _impl_.clipname_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResEventAnimationClipData::_internal_mutable_clipname() {
  
  return _impl_.clipname_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResEventAnimationClipData::release_clipname() {
  // @@protoc_insertion_point(field_release:message.UGCResEventAnimationClipData.ClipName)
  return _impl_.clipname_.Release();
}
inline void UGCResEventAnimationClipData::set_allocated_clipname(std::string* clipname) {
  if (clipname != nullptr) {
    
  } else {
    
  }
  _impl_.clipname_.SetAllocated(clipname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clipname_.IsDefault()) {
    _impl_.clipname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResEventAnimationClipData.ClipName)
}

// float Length = 2;
inline void UGCResEventAnimationClipData::clear_length() {
  _impl_.length_ = 0;
}
inline float UGCResEventAnimationClipData::_internal_length() const {
  return _impl_.length_;
}
inline float UGCResEventAnimationClipData::length() const {
  // @@protoc_insertion_point(field_get:message.UGCResEventAnimationClipData.Length)
  return _internal_length();
}
inline void UGCResEventAnimationClipData::_internal_set_length(float value) {
  
  _impl_.length_ = value;
}
inline void UGCResEventAnimationClipData::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:message.UGCResEventAnimationClipData.Length)
}

// float FPS = 3;
inline void UGCResEventAnimationClipData::clear_fps() {
  _impl_.fps_ = 0;
}
inline float UGCResEventAnimationClipData::_internal_fps() const {
  return _impl_.fps_;
}
inline float UGCResEventAnimationClipData::fps() const {
  // @@protoc_insertion_point(field_get:message.UGCResEventAnimationClipData.FPS)
  return _internal_fps();
}
inline void UGCResEventAnimationClipData::_internal_set_fps(float value) {
  
  _impl_.fps_ = value;
}
inline void UGCResEventAnimationClipData::set_fps(float value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:message.UGCResEventAnimationClipData.FPS)
}

// repeated .message.UGCResAnimationClipEvent Events = 4;
inline int UGCResEventAnimationClipData::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int UGCResEventAnimationClipData::events_size() const {
  return _internal_events_size();
}
inline void UGCResEventAnimationClipData::clear_events() {
  _impl_.events_.Clear();
}
inline ::message::UGCResAnimationClipEvent* UGCResEventAnimationClipData::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResEventAnimationClipData.Events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationClipEvent >*
UGCResEventAnimationClipData::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResEventAnimationClipData.Events)
  return &_impl_.events_;
}
inline const ::message::UGCResAnimationClipEvent& UGCResEventAnimationClipData::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::message::UGCResAnimationClipEvent& UGCResEventAnimationClipData::events(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResEventAnimationClipData.Events)
  return _internal_events(index);
}
inline ::message::UGCResAnimationClipEvent* UGCResEventAnimationClipData::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::message::UGCResAnimationClipEvent* UGCResEventAnimationClipData::add_events() {
  ::message::UGCResAnimationClipEvent* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:message.UGCResEventAnimationClipData.Events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationClipEvent >&
UGCResEventAnimationClipData::events() const {
  // @@protoc_insertion_point(field_list:message.UGCResEventAnimationClipData.Events)
  return _impl_.events_;
}

// bytes AnimationClipData = 5;
inline void UGCResEventAnimationClipData::clear_animationclipdata() {
  _impl_.animationclipdata_.ClearToEmpty();
}
inline const std::string& UGCResEventAnimationClipData::animationclipdata() const {
  // @@protoc_insertion_point(field_get:message.UGCResEventAnimationClipData.AnimationClipData)
  return _internal_animationclipdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResEventAnimationClipData::set_animationclipdata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.animationclipdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResEventAnimationClipData.AnimationClipData)
}
inline std::string* UGCResEventAnimationClipData::mutable_animationclipdata() {
  std::string* _s = _internal_mutable_animationclipdata();
  // @@protoc_insertion_point(field_mutable:message.UGCResEventAnimationClipData.AnimationClipData)
  return _s;
}
inline const std::string& UGCResEventAnimationClipData::_internal_animationclipdata() const {
  return _impl_.animationclipdata_.Get();
}
inline void UGCResEventAnimationClipData::_internal_set_animationclipdata(const std::string& value) {
  
  _impl_.animationclipdata_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResEventAnimationClipData::_internal_mutable_animationclipdata() {
  
  return _impl_.animationclipdata_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResEventAnimationClipData::release_animationclipdata() {
  // @@protoc_insertion_point(field_release:message.UGCResEventAnimationClipData.AnimationClipData)
  return _impl_.animationclipdata_.Release();
}
inline void UGCResEventAnimationClipData::set_allocated_animationclipdata(std::string* animationclipdata) {
  if (animationclipdata != nullptr) {
    
  } else {
    
  }
  _impl_.animationclipdata_.SetAllocated(animationclipdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animationclipdata_.IsDefault()) {
    _impl_.animationclipdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResEventAnimationClipData.AnimationClipData)
}

// string AnimationClipResUUID = 6;
inline void UGCResEventAnimationClipData::clear_animationclipresuuid() {
  _impl_.animationclipresuuid_.ClearToEmpty();
}
inline const std::string& UGCResEventAnimationClipData::animationclipresuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCResEventAnimationClipData.AnimationClipResUUID)
  return _internal_animationclipresuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResEventAnimationClipData::set_animationclipresuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.animationclipresuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResEventAnimationClipData.AnimationClipResUUID)
}
inline std::string* UGCResEventAnimationClipData::mutable_animationclipresuuid() {
  std::string* _s = _internal_mutable_animationclipresuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCResEventAnimationClipData.AnimationClipResUUID)
  return _s;
}
inline const std::string& UGCResEventAnimationClipData::_internal_animationclipresuuid() const {
  return _impl_.animationclipresuuid_.Get();
}
inline void UGCResEventAnimationClipData::_internal_set_animationclipresuuid(const std::string& value) {
  
  _impl_.animationclipresuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResEventAnimationClipData::_internal_mutable_animationclipresuuid() {
  
  return _impl_.animationclipresuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResEventAnimationClipData::release_animationclipresuuid() {
  // @@protoc_insertion_point(field_release:message.UGCResEventAnimationClipData.AnimationClipResUUID)
  return _impl_.animationclipresuuid_.Release();
}
inline void UGCResEventAnimationClipData::set_allocated_animationclipresuuid(std::string* animationclipresuuid) {
  if (animationclipresuuid != nullptr) {
    
  } else {
    
  }
  _impl_.animationclipresuuid_.SetAllocated(animationclipresuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.animationclipresuuid_.IsDefault()) {
    _impl_.animationclipresuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResEventAnimationClipData.AnimationClipResUUID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::message::UGCEditorError_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::UGCEditorError_ErrorCode>() {
  return ::message::UGCEditorError_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::message::UGCEditorError_ErrorSeverity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::UGCEditorError_ErrorSeverity>() {
  return ::message::UGCEditorError_ErrorSeverity_descriptor();
}
template <> struct is_proto_enum< ::message::UGCResourceData_UGCResourceDataVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::UGCResourceData_UGCResourceDataVersion>() {
  return ::message::UGCResourceData_UGCResourceDataVersion_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCModuleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCModuleType>() {
  return ::message::EUGCModuleType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCDamageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCDamageType>() {
  return ::message::EUGCDamageType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCScoreType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCScoreType>() {
  return ::message::EUGCScoreType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCPlayerStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCPlayerStateType>() {
  return ::message::EUGCPlayerStateType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCArithmeticType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCArithmeticType>() {
  return ::message::EUGCArithmeticType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCCompareType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCCompareType>() {
  return ::message::EUGCCompareType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCValueType>() {
  return ::message::EUGCValueType_descriptor();
}
template <> struct is_proto_enum< ::message::EMetaConfigParamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EMetaConfigParamType>() {
  return ::message::EMetaConfigParamType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCLogicEntityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCLogicEntityType>() {
  return ::message::EUGCLogicEntityType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCParamSettingMethodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCParamSettingMethodType>() {
  return ::message::EUGCParamSettingMethodType_descriptor();
}
template <> struct is_proto_enum< ::message::UGCSpawnPointSpawnType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::UGCSpawnPointSpawnType>() {
  return ::message::UGCSpawnPointSpawnType_descriptor();
}
template <> struct is_proto_enum< ::message::ESort> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::ESort>() {
  return ::message::ESort_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCWorkflowSequenceItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCWorkflowSequenceItemType>() {
  return ::message::EUGCWorkflowSequenceItemType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCKeyword> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCKeyword>() {
  return ::message::EUGCKeyword_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCAttribute> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCAttribute>() {
  return ::message::EUGCAttribute_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCLocLanguage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCLocLanguage>() {
  return ::message::EUGCLocLanguage_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCVersionCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCVersionCode>() {
  return ::message::EUGCVersionCode_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCGraphKeyword> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCGraphKeyword>() {
  return ::message::EUGCGraphKeyword_descriptor();
}
template <> struct is_proto_enum< ::message::UGCMiniSentryRange> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::UGCMiniSentryRange>() {
  return ::message::UGCMiniSentryRange_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCProjectVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCProjectVersion>() {
  return ::message::EUGCProjectVersion_descriptor();
}
template <> struct is_proto_enum< ::message::RoomCustomParamsDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::RoomCustomParamsDataType>() {
  return ::message::RoomCustomParamsDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ugccommon_2eproto
