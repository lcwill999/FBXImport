// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ugccommon.proto

#include "ugccommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message {
PROTOBUF_CONSTEXPR UGCDebugSettingData::UGCDebugSettingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.botcountbyteam_)*/{}
  , /*decltype(_impl_._botcountbyteam_cached_byte_size_)*/{0}
  , /*decltype(_impl_.breakpoints_)*/{}
  , /*decltype(_impl_.tokensvalidid_)*/{}
  , /*decltype(_impl_._tokensvalidid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gotoposition_)*/nullptr
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.gamemode_)*/0u
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.gotopositionafterstart_)*/false
  , /*decltype(_impl_.isstrictmode_)*/false
  , /*decltype(_impl_.groupmode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCDebugSettingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCDebugSettingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCDebugSettingDataDefaultTypeInternal() {}
  union {
    UGCDebugSettingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCDebugSettingDataDefaultTypeInternal _UGCDebugSettingData_default_instance_;
PROTOBUF_CONSTEXPR UGCPhaseData::UGCPhaseData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phaseindex_)*/0u
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCPhaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCPhaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCPhaseDataDefaultTypeInternal() {}
  union {
    UGCPhaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCPhaseDataDefaultTypeInternal _UGCPhaseData_default_instance_;
PROTOBUF_CONSTEXPR UGCRoundData::UGCRoundData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phasedata_)*/{}
  , /*decltype(_impl_.phaseindex_)*/0u
  , /*decltype(_impl_.roundnummax_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCRoundDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCRoundDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCRoundDataDefaultTypeInternal() {}
  union {
    UGCRoundData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCRoundDataDefaultTypeInternal _UGCRoundData_default_instance_;
PROTOBUF_CONSTEXPR UGCWorkflowSequenceItem::UGCWorkflowSequenceItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datatype_)*/0
  , /*decltype(_impl_.dataindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCWorkflowSequenceItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCWorkflowSequenceItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCWorkflowSequenceItemDefaultTypeInternal() {}
  union {
    UGCWorkflowSequenceItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCWorkflowSequenceItemDefaultTypeInternal _UGCWorkflowSequenceItem_default_instance_;
PROTOBUF_CONSTEXPR UGCWorkflowSequence::UGCWorkflowSequence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCWorkflowSequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCWorkflowSequenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCWorkflowSequenceDefaultTypeInternal() {}
  union {
    UGCWorkflowSequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCWorkflowSequenceDefaultTypeInternal _UGCWorkflowSequence_default_instance_;
PROTOBUF_CONSTEXPR UGCType::UGCType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.basetypeids_)*/{}
  , /*decltype(_impl_._basetypeids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.accepttypeids_)*/{}
  , /*decltype(_impl_._accepttypeids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.declare_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.genericsid_)*/0
  , /*decltype(_impl_.t0id_)*/0
  , /*decltype(_impl_.attributes_)*/0u
  , /*decltype(_impl_.t1id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCTypeDefaultTypeInternal() {}
  union {
    UGCType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCTypeDefaultTypeInternal _UGCType_default_instance_;
PROTOBUF_CONSTEXPR UGCTypeTree::UGCTypeTree(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.typemap_)*/{}
  , /*decltype(_impl_.cmpprops_)*/{}
  , /*decltype(_impl_.components_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCTypeTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCTypeTreeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCTypeTreeDefaultTypeInternal() {}
  union {
    UGCTypeTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCTypeTreeDefaultTypeInternal _UGCTypeTree_default_instance_;
PROTOBUF_CONSTEXPR UGCTypeComponent::UGCTypeComponent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.props_)*/{}
  , /*decltype(_impl_._props_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCTypeComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCTypeComponentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCTypeComponentDefaultTypeInternal() {}
  union {
    UGCTypeComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCTypeComponentDefaultTypeInternal _UGCTypeComponent_default_instance_;
PROTOBUF_CONSTEXPR UGCTypeComponentProp::UGCTypeComponentProp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.defaultvalue_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCTypeComponentPropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCTypeComponentPropDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCTypeComponentPropDefaultTypeInternal() {}
  union {
    UGCTypeComponentProp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCTypeComponentPropDefaultTypeInternal _UGCTypeComponentProp_default_instance_;
PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemForEditor::UGCCustomReplicationDataItemForEditor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.typeid__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCustomReplicationDataItemForEditorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemForEditorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCustomReplicationDataItemForEditorDefaultTypeInternal() {}
  union {
    UGCCustomReplicationDataItemForEditor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCustomReplicationDataItemForEditorDefaultTypeInternal _UGCCustomReplicationDataItemForEditor_default_instance_;
PROTOBUF_CONSTEXPR UGCLogicEntityDataForEditor::UGCLogicEntityDataForEditor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.graphids_)*/{}
  , /*decltype(_impl_.repdataitem_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.editortype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCLogicEntityDataForEditorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCLogicEntityDataForEditorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCLogicEntityDataForEditorDefaultTypeInternal() {}
  union {
    UGCLogicEntityDataForEditor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCLogicEntityDataForEditorDefaultTypeInternal _UGCLogicEntityDataForEditor_default_instance_;
PROTOBUF_CONSTEXPR UGCCustomReplicationDataForEditor::UGCCustomReplicationDataForEditor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemdata_)*/{}
  , /*decltype(_impl_.entitytype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCustomReplicationDataForEditorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCustomReplicationDataForEditorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCustomReplicationDataForEditorDefaultTypeInternal() {}
  union {
    UGCCustomReplicationDataForEditor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCustomReplicationDataForEditorDefaultTypeInternal _UGCCustomReplicationDataForEditor_default_instance_;
PROTOBUF_CONSTEXPR UGCVarValueData::UGCVarValueData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arrayvalue_)*/{}
  , /*decltype(_impl_.stringvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.funcvalue_)*/nullptr
  , /*decltype(_impl_.vector3value_)*/nullptr
  , /*decltype(_impl_.valuetype_)*/0
  , /*decltype(_impl_.boolvalue_)*/false
  , /*decltype(_impl_.intvalue_)*/0
  , /*decltype(_impl_.floatvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCVarValueDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCVarValueDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCVarValueDataDefaultTypeInternal() {}
  union {
    UGCVarValueData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCVarValueDataDefaultTypeInternal _UGCVarValueData_default_instance_;
PROTOBUF_CONSTEXPR UGCFuncCallerData::UGCFuncCallerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.subcallerdata_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.useupvalue_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCFuncCallerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCFuncCallerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCFuncCallerDataDefaultTypeInternal() {}
  union {
    UGCFuncCallerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCFuncCallerDataDefaultTypeInternal _UGCFuncCallerData_default_instance_;
PROTOBUF_CONSTEXPR UGCVarDefineData::UGCVarDefineData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCVarDefineDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCVarDefineDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCVarDefineDataDefaultTypeInternal() {}
  union {
    UGCVarDefineData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCVarDefineDataDefaultTypeInternal _UGCVarDefineData_default_instance_;
PROTOBUF_CONSTEXPR UGCRuleData::UGCRuleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.callerdata_)*/nullptr
  , /*decltype(_impl_.eventtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCRuleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCRuleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCRuleDataDefaultTypeInternal() {}
  union {
    UGCRuleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCRuleDataDefaultTypeInternal _UGCRuleData_default_instance_;
PROTOBUF_CONSTEXPR UGCGraphData::UGCGraphData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_.variables_)*/{}
  , /*decltype(_impl_.functions_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCGraphDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCGraphDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCGraphDataDefaultTypeInternal() {}
  union {
    UGCGraphData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCGraphDataDefaultTypeInternal _UGCGraphData_default_instance_;
PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemInstance::UGCCustomReplicationDataItemInstance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCustomReplicationDataItemInstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemInstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCustomReplicationDataItemInstanceDefaultTypeInternal() {}
  union {
    UGCCustomReplicationDataItemInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCustomReplicationDataItemInstanceDefaultTypeInternal _UGCCustomReplicationDataItemInstance_default_instance_;
PROTOBUF_CONSTEXPR UGCLogicEntityData::UGCLogicEntityData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.graphids_)*/{}
  , /*decltype(_impl_.repdataitem_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCLogicEntityDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCLogicEntityDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCLogicEntityDataDefaultTypeInternal() {}
  union {
    UGCLogicEntityData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCLogicEntityDataDefaultTypeInternal _UGCLogicEntityData_default_instance_;
PROTOBUF_CONSTEXPR UGCCustomReplicationDataItem::UGCCustomReplicationDataItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCustomReplicationDataItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCustomReplicationDataItemDefaultTypeInternal() {}
  union {
    UGCCustomReplicationDataItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCustomReplicationDataItemDefaultTypeInternal _UGCCustomReplicationDataItem_default_instance_;
PROTOBUF_CONSTEXPR UGCCustomReplicationData::UGCCustomReplicationData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemdata_)*/{}
  , /*decltype(_impl_.entitytype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCustomReplicationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCustomReplicationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCustomReplicationDataDefaultTypeInternal() {}
  union {
    UGCCustomReplicationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCustomReplicationDataDefaultTypeInternal _UGCCustomReplicationData_default_instance_;
PROTOBUF_CONSTEXPR UGCLevelData::UGCLevelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.graphdata_)*/{}
  , /*decltype(_impl_.logicentitydatas_)*/{}
  , /*decltype(_impl_.entityreplicationdata_)*/{}
  , /*decltype(_impl_.workflow_)*/nullptr
  , /*decltype(_impl_.mapdata_)*/nullptr
  , /*decltype(_impl_.hudprefabdata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCLevelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCLevelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCLevelDataDefaultTypeInternal() {}
  union {
    UGCLevelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCLevelDataDefaultTypeInternal _UGCLevelData_default_instance_;
PROTOBUF_CONSTEXPR UGCLogicEntityDataV2::UGCLogicEntityDataV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.graphids_)*/{}
  , /*decltype(_impl_.repdataitem_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCLogicEntityDataV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCLogicEntityDataV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCLogicEntityDataV2DefaultTypeInternal() {}
  union {
    UGCLogicEntityDataV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCLogicEntityDataV2DefaultTypeInternal _UGCLogicEntityDataV2_default_instance_;
PROTOBUF_CONSTEXPR UGCLevelDataV2::UGCLevelDataV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.graphdata_)*/{}
  , /*decltype(_impl_.logicentitydatas_)*/{}
  , /*decltype(_impl_.entityreplicationdata_)*/{}
  , /*decltype(_impl_.workflow_)*/nullptr
  , /*decltype(_impl_.hudprefabdata_)*/nullptr
  , /*decltype(_impl_.customtypemap_)*/nullptr
  , /*decltype(_impl_.modesetting_)*/nullptr
  , /*decltype(_impl_.allscenedata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCLevelDataV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCLevelDataV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCLevelDataV2DefaultTypeInternal() {}
  union {
    UGCLevelDataV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCLevelDataV2DefaultTypeInternal _UGCLevelDataV2_default_instance_;
PROTOBUF_CONSTEXPR UGCVersionControlData::UGCVersionControlData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contentdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloaddesc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compatibleversion_)*/0
  , /*decltype(_impl_.publicversion_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCVersionControlDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCVersionControlDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCVersionControlDataDefaultTypeInternal() {}
  union {
    UGCVersionControlData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCVersionControlDataDefaultTypeInternal _UGCVersionControlData_default_instance_;
PROTOBUF_CONSTEXPR UGCMapValue::UGCMapValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCMapValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCMapValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCMapValueDefaultTypeInternal() {}
  union {
    UGCMapValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCMapValueDefaultTypeInternal _UGCMapValue_default_instance_;
PROTOBUF_CONSTEXPR UGCVarValueDataV2::UGCVarValueDataV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.listvalue_)*/{}
  , /*decltype(_impl_.mapvalue_)*/nullptr
  , /*decltype(_impl_.Value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UGCVarValueDataV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCVarValueDataV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCVarValueDataV2DefaultTypeInternal() {}
  union {
    UGCVarValueDataV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCVarValueDataV2DefaultTypeInternal _UGCVarValueDataV2_default_instance_;
PROTOBUF_CONSTEXPR UGCFuncDefParamData::UGCFuncDefParamData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isupvalue_)*/false
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.outtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCFuncDefParamDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCFuncDefParamDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCFuncDefParamDataDefaultTypeInternal() {}
  union {
    UGCFuncDefParamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCFuncDefParamDataDefaultTypeInternal _UGCFuncDefParamData_default_instance_;
PROTOBUF_CONSTEXPR UGCFuncCallerDataV2::UGCFuncCallerDataV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.subcallerdata_)*/{}
  , /*decltype(_impl_.paramtypes_)*/{}
  , /*decltype(_impl_._paramtypes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.defparaminfos_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.useupvalue_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCFuncCallerDataV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCFuncCallerDataV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCFuncCallerDataV2DefaultTypeInternal() {}
  union {
    UGCFuncCallerDataV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCFuncCallerDataV2DefaultTypeInternal _UGCFuncCallerDataV2_default_instance_;
PROTOBUF_CONSTEXPR UGCVarDefineDataV2::UGCVarDefineDataV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.typeid__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCVarDefineDataV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCVarDefineDataV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCVarDefineDataV2DefaultTypeInternal() {}
  union {
    UGCVarDefineDataV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCVarDefineDataV2DefaultTypeInternal _UGCVarDefineDataV2_default_instance_;
PROTOBUF_CONSTEXPR UGCRuleDataV2::UGCRuleDataV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.callerdata_)*/nullptr
  , /*decltype(_impl_.eventtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCRuleDataV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCRuleDataV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCRuleDataV2DefaultTypeInternal() {}
  union {
    UGCRuleDataV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCRuleDataV2DefaultTypeInternal _UGCRuleDataV2_default_instance_;
PROTOBUF_CONSTEXPR UGCGraphDataV2::UGCGraphDataV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_.variables_)*/{}
  , /*decltype(_impl_.functions_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.declare_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCGraphDataV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCGraphDataV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCGraphDataV2DefaultTypeInternal() {}
  union {
    UGCGraphDataV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCGraphDataV2DefaultTypeInternal _UGCGraphDataV2_default_instance_;
PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemInstanceV2::UGCCustomReplicationDataItemInstanceV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.propid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCustomReplicationDataItemInstanceV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemInstanceV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCustomReplicationDataItemInstanceV2DefaultTypeInternal() {}
  union {
    UGCCustomReplicationDataItemInstanceV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCustomReplicationDataItemInstanceV2DefaultTypeInternal _UGCCustomReplicationDataItemInstanceV2_default_instance_;
PROTOBUF_CONSTEXPR UGCLogicEntityDataV3::UGCLogicEntityDataV3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.componentids_)*/{}
  , /*decltype(_impl_._componentids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.graphids_)*/{}
  , /*decltype(_impl_.repdataitem_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.refprefabid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCLogicEntityDataV3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCLogicEntityDataV3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCLogicEntityDataV3DefaultTypeInternal() {}
  union {
    UGCLogicEntityDataV3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCLogicEntityDataV3DefaultTypeInternal _UGCLogicEntityDataV3_default_instance_;
PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemV2::UGCCustomReplicationDataItemV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.typeid__)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.onlyserver_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCustomReplicationDataItemV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCustomReplicationDataItemV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCustomReplicationDataItemV2DefaultTypeInternal() {}
  union {
    UGCCustomReplicationDataItemV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCustomReplicationDataItemV2DefaultTypeInternal _UGCCustomReplicationDataItemV2_default_instance_;
PROTOBUF_CONSTEXPR UGCCustomReplicationDataV2::UGCCustomReplicationDataV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemdata_)*/{}
  , /*decltype(_impl_.componenttypeid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCustomReplicationDataV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCustomReplicationDataV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCustomReplicationDataV2DefaultTypeInternal() {}
  union {
    UGCCustomReplicationDataV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCustomReplicationDataV2DefaultTypeInternal _UGCCustomReplicationDataV2_default_instance_;
PROTOBUF_CONSTEXPR UGCInternalLibrary::UGCInternalLibrary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.graphdata_)*/{}
  , /*decltype(_impl_.logicentitydatas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCInternalLibraryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCInternalLibraryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCInternalLibraryDefaultTypeInternal() {}
  union {
    UGCInternalLibrary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCInternalLibraryDefaultTypeInternal _UGCInternalLibrary_default_instance_;
PROTOBUF_CONSTEXPR UGCWorkflowData::UGCWorkflowData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phasedata_)*/{}
  , /*decltype(_impl_.rounddata_)*/{}
  , /*decltype(_impl_.workflowsequence_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCWorkflowDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCWorkflowDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCWorkflowDataDefaultTypeInternal() {}
  union {
    UGCWorkflowData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCWorkflowDataDefaultTypeInternal _UGCWorkflowData_default_instance_;
PROTOBUF_CONSTEXPR UGCLocItem::UGCLocItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCLocItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCLocItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCLocItemDefaultTypeInternal() {}
  union {
    UGCLocItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCLocItemDefaultTypeInternal _UGCLocItem_default_instance_;
PROTOBUF_CONSTEXPR UGCLocKeyData::UGCLocKeyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loclist_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCLocKeyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCLocKeyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCLocKeyDataDefaultTypeInternal() {}
  union {
    UGCLocKeyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCLocKeyDataDefaultTypeInternal _UGCLocKeyData_default_instance_;
PROTOBUF_CONSTEXPR UGCLocData::UGCLocData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keylist_)*/{}
  , /*decltype(_impl_.defaultlang_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCLocDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCLocDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCLocDataDefaultTypeInternal() {}
  union {
    UGCLocData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCLocDataDefaultTypeInternal _UGCLocData_default_instance_;
PROTOBUF_CONSTEXPR UGCPrefabData::UGCPrefabData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entityhierachy_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCPrefabDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCPrefabDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCPrefabDataDefaultTypeInternal() {}
  union {
    UGCPrefabData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCPrefabDataDefaultTypeInternal _UGCPrefabData_default_instance_;
PROTOBUF_CONSTEXPR UGCCustomEventData::UGCCustomEventData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCustomEventDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCustomEventDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCustomEventDataDefaultTypeInternal() {}
  union {
    UGCCustomEventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCustomEventDataDefaultTypeInternal _UGCCustomEventData_default_instance_;
PROTOBUF_CONSTEXPR UGCBTreeData::UGCBTreeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCBTreeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCBTreeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCBTreeDataDefaultTypeInternal() {}
  union {
    UGCBTreeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCBTreeDataDefaultTypeInternal _UGCBTreeData_default_instance_;
PROTOBUF_CONSTEXPR UGCGameData::UGCGameData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.graphdata_)*/{}
  , /*decltype(_impl_.logicentitydatas_)*/{}
  , /*decltype(_impl_.componentrepdata_)*/{}
  , /*decltype(_impl_.prefabdata_)*/{}
  , /*decltype(_impl_.customeventdata_)*/{}
  , /*decltype(_impl_.btreedata_)*/{}
  , /*decltype(_impl_.workflow_)*/nullptr
  , /*decltype(_impl_.hudprefabdata_)*/nullptr
  , /*decltype(_impl_.customtypemap_)*/nullptr
  , /*decltype(_impl_.modesetting_)*/nullptr
  , /*decltype(_impl_.allscenedata_)*/nullptr
  , /*decltype(_impl_.locdata_)*/nullptr
  , /*decltype(_impl_.resourcedata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCGameDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCGameDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCGameDataDefaultTypeInternal() {}
  union {
    UGCGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCGameDataDefaultTypeInternal _UGCGameData_default_instance_;
PROTOBUF_CONSTEXPR UGCSubLevelItemRuntimeData::UGCSubLevelItemRuntimeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logic_entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.customized_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.obj_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.surtex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bortex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.static_type_id_)*/0u
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.pos_z_)*/0
  , /*decltype(_impl_.scale_x_)*/0
  , /*decltype(_impl_.scale_y_)*/0
  , /*decltype(_impl_.scale_z_)*/0
  , /*decltype(_impl_.rot_yaw_)*/0
  , /*decltype(_impl_.rot_pitch_)*/0
  , /*decltype(_impl_.rot_roll_)*/0
  , /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.levelobject_id_by_tag_)*/0u
  , /*decltype(_impl_.reset_per_round_)*/0u
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.surcolor_)*/0
  , /*decltype(_impl_.bordercolor_)*/0
  , /*decltype(_impl_.isstatic_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCSubLevelItemRuntimeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCSubLevelItemRuntimeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCSubLevelItemRuntimeDataDefaultTypeInternal() {}
  union {
    UGCSubLevelItemRuntimeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCSubLevelItemRuntimeDataDefaultTypeInternal _UGCSubLevelItemRuntimeData_default_instance_;
PROTOBUF_CONSTEXPR UGCSubLevelDescData::UGCSubLevelDescData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gridwidth_)*/0
  , /*decltype(_impl_.gridheight_)*/0
  , /*decltype(_impl_.gridcenterx_)*/0
  , /*decltype(_impl_.gridcenterz_)*/0
  , /*decltype(_impl_.gridunit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCSubLevelDescDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCSubLevelDescDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCSubLevelDescDataDefaultTypeInternal() {}
  union {
    UGCSubLevelDescData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCSubLevelDescDataDefaultTypeInternal _UGCSubLevelDescData_default_instance_;
PROTOBUF_CONSTEXPR UGCSubLevelSkyEnvData::UGCSubLevelSkyEnvData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.baseskyenvres_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lightcolor_)*/0
  , /*decltype(_impl_.lightintensity_)*/0
  , /*decltype(_impl_.darkness_)*/0
  , /*decltype(_impl_.shadowstrength_)*/0
  , /*decltype(_impl_.isadvancemode_)*/false
  , /*decltype(_impl_.nightmode_)*/false
  , /*decltype(_impl_.terrainwetness_)*/0
  , /*decltype(_impl_.lensflare_)*/0
  , /*decltype(_impl_.fogcolor_)*/0
  , /*decltype(_impl_.ambientcolor_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCSubLevelSkyEnvDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCSubLevelSkyEnvDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCSubLevelSkyEnvDataDefaultTypeInternal() {}
  union {
    UGCSubLevelSkyEnvData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCSubLevelSkyEnvDataDefaultTypeInternal _UGCSubLevelSkyEnvData_default_instance_;
PROTOBUF_CONSTEXPR UGCSubLevelResourceData::UGCSubLevelResourceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectlist_)*/{}
  , /*decltype(_impl_.objecthierachy_)*/{}
  , /*decltype(_impl_.sublevelname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grassresourceuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.descinfo_)*/nullptr
  , /*decltype(_impl_.objectattrlist_)*/nullptr
  , /*decltype(_impl_.skyenv_)*/nullptr
  , /*decltype(_impl_.basemapid_)*/0u
  , /*decltype(_impl_.ismainlevel_)*/false
  , /*decltype(_impl_.isuseleveldescdata_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCSubLevelResourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCSubLevelResourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCSubLevelResourceDataDefaultTypeInternal() {}
  union {
    UGCSubLevelResourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCSubLevelResourceDataDefaultTypeInternal _UGCSubLevelResourceData_default_instance_;
PROTOBUF_CONSTEXPR UGCTransformNodeData::UGCTransformNodeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parentid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localposition_)*/nullptr
  , /*decltype(_impl_.localscale_)*/nullptr
  , /*decltype(_impl_.localrotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCTransformNodeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCTransformNodeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCTransformNodeDataDefaultTypeInternal() {}
  union {
    UGCTransformNodeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCTransformNodeDataDefaultTypeInternal _UGCTransformNodeData_default_instance_;
PROTOBUF_CONSTEXPR UGCAllSceneRuntimeData::UGCAllSceneRuntimeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sublevellist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCAllSceneRuntimeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCAllSceneRuntimeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCAllSceneRuntimeDataDefaultTypeInternal() {}
  union {
    UGCAllSceneRuntimeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCAllSceneRuntimeDataDefaultTypeInternal _UGCAllSceneRuntimeData_default_instance_;
PROTOBUF_CONSTEXPR UGCMapRuntimeData::UGCMapRuntimeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entities_)*/nullptr
  , /*decltype(_impl_.modesetting_)*/nullptr
  , /*decltype(_impl_.entityattributes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCMapRuntimeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCMapRuntimeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCMapRuntimeDataDefaultTypeInternal() {}
  union {
    UGCMapRuntimeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCMapRuntimeDataDefaultTypeInternal _UGCMapRuntimeData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditObjectProtoData::SceneEditObjectProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logic_entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.customized_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.obj_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_dir_posy_)*/0u
  , /*decltype(_impl_.pos_xz_)*/0u
  , /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.extra_base_info_free_dir_)*/0u
  , /*decltype(_impl_.levelobject_id_by_tag_)*/0u
  , /*decltype(_impl_.reset_per_round_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditObjectProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditObjectProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditObjectProtoDataDefaultTypeInternal() {}
  union {
    SceneEditObjectProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditObjectProtoDataDefaultTypeInternal _SceneEditObjectProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditEntityProtoData::SceneEditEntityProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objects_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditEntityProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditEntityProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditEntityProtoDataDefaultTypeInternal() {}
  union {
    SceneEditEntityProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditEntityProtoDataDefaultTypeInternal _SceneEditEntityProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditTeleportDoorProtoData::SceneEditTeleportDoorProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.group_id_)*/0u
  , /*decltype(_impl_.teleport_door_type_)*/0u
  , /*decltype(_impl_.target_door_id_)*/0u
  , /*decltype(_impl_.trigger_type_)*/0u
  , /*decltype(_impl_.teleport_active_)*/false
  , /*decltype(_impl_.isvalid_teleport_door_type_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditTeleportDoorProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditTeleportDoorProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditTeleportDoorProtoDataDefaultTypeInternal() {}
  union {
    SceneEditTeleportDoorProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditTeleportDoorProtoDataDefaultTypeInternal _SceneEditTeleportDoorProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditPianoKeyProtoData::SceneEditPianoKeyProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.key_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditPianoKeyProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditPianoKeyProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditPianoKeyProtoDataDefaultTypeInternal() {}
  union {
    SceneEditPianoKeyProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditPianoKeyProtoDataDefaultTypeInternal _SceneEditPianoKeyProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditBuffProtoData::SceneEditBuffProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.buff_type_)*/0u
  , /*decltype(_impl_.buff_refresh_time_sec_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditBuffProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditBuffProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditBuffProtoDataDefaultTypeInternal() {}
  union {
    SceneEditBuffProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditBuffProtoDataDefaultTypeInternal _SceneEditBuffProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditMoveObjectProtoData::SceneEditMoveObjectProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.moveconfigid_)*/0u
  , /*decltype(_impl_.motionvalue_)*/0u
  , /*decltype(_impl_.motiontype_)*/0u
  , /*decltype(_impl_.motioneditmode_)*/false
  , /*decltype(_impl_.motioncustomized_)*/false
  , /*decltype(_impl_.isreset_)*/false
  , /*decltype(_impl_.motionvaluex_)*/0u
  , /*decltype(_impl_.motionvaluey_)*/0u
  , /*decltype(_impl_.motionvaluez_)*/0u
  , /*decltype(_impl_.motiontime_)*/0u
  , /*decltype(_impl_.staytime_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditMoveObjectProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditMoveObjectProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditMoveObjectProtoDataDefaultTypeInternal() {}
  union {
    SceneEditMoveObjectProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditMoveObjectProtoDataDefaultTypeInternal _SceneEditMoveObjectProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditScalableItemProtoData::SceneEditScalableItemProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.scalex_)*/0u
  , /*decltype(_impl_.scaley_)*/0u
  , /*decltype(_impl_.scalez_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditScalableItemProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditScalableItemProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditScalableItemProtoDataDefaultTypeInternal() {}
  union {
    SceneEditScalableItemProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditScalableItemProtoDataDefaultTypeInternal _SceneEditScalableItemProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditItemBoxProtoData::SceneEditItemBoxProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.customdata_)*/nullptr
  , /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.dropid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditItemBoxProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditItemBoxProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditItemBoxProtoDataDefaultTypeInternal() {}
  union {
    SceneEditItemBoxProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditItemBoxProtoDataDefaultTypeInternal _SceneEditItemBoxProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditCustomItemBoxProtoData::SceneEditCustomItemBoxProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lootgroups_)*/{}
  , /*decltype(_impl_.refreshcount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditCustomItemBoxProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditCustomItemBoxProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditCustomItemBoxProtoDataDefaultTypeInternal() {}
  union {
    SceneEditCustomItemBoxProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditCustomItemBoxProtoDataDefaultTypeInternal _SceneEditCustomItemBoxProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditCustomItemBoxGroupProtoData::SceneEditCustomItemBoxGroupProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lootitems_)*/{}
  , /*decltype(_impl_.refreshcount_)*/0u
  , /*decltype(_impl_.marked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditCustomItemBoxGroupProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditCustomItemBoxGroupProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditCustomItemBoxGroupProtoDataDefaultTypeInternal() {}
  union {
    SceneEditCustomItemBoxGroupProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditCustomItemBoxGroupProtoDataDefaultTypeInternal _SceneEditCustomItemBoxGroupProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditCustomItemBoxItemProtoData::SceneEditCustomItemBoxItemProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemid_)*/0u
  , /*decltype(_impl_.num_)*/0u
  , /*decltype(_impl_.marked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditCustomItemBoxItemProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditCustomItemBoxItemProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditCustomItemBoxItemProtoDataDefaultTypeInternal() {}
  union {
    SceneEditCustomItemBoxItemProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditCustomItemBoxItemProtoDataDefaultTypeInternal _SceneEditCustomItemBoxItemProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditTriggerProtoData::SceneEditTriggerProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.trigger_type_)*/0u
  , /*decltype(_impl_.isshow_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditTriggerProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditTriggerProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditTriggerProtoDataDefaultTypeInternal() {}
  union {
    SceneEditTriggerProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditTriggerProtoDataDefaultTypeInternal _SceneEditTriggerProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditShapeTriggerProtoData::SceneEditShapeTriggerProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditShapeTriggerProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditShapeTriggerProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditShapeTriggerProtoDataDefaultTypeInternal() {}
  union {
    SceneEditShapeTriggerProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditShapeTriggerProtoDataDefaultTypeInternal _SceneEditShapeTriggerProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditBigToyBallProtoData::SceneEditBigToyBallProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.velocity_xz_)*/0
  , /*decltype(_impl_.velocity_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditBigToyBallProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditBigToyBallProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditBigToyBallProtoDataDefaultTypeInternal() {}
  union {
    SceneEditBigToyBallProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditBigToyBallProtoDataDefaultTypeInternal _SceneEditBigToyBallProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditMiniSentryProtoData::SceneEditMiniSentryProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_.defense_)*/0
  , /*decltype(_impl_.attack_)*/0u
  , /*decltype(_impl_.attack_interval_)*/0
  , /*decltype(_impl_.attack_range_)*/0u
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditMiniSentryProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditMiniSentryProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditMiniSentryProtoDataDefaultTypeInternal() {}
  union {
    SceneEditMiniSentryProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditMiniSentryProtoDataDefaultTypeInternal _SceneEditMiniSentryProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditBotGeneratorProtoData::SceneEditBotGeneratorProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bot_config_)*/nullptr
  , /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.count_each_batch_)*/0u
  , /*decltype(_impl_.batch_count_)*/0u
  , /*decltype(_impl_.batch_interval_)*/0u
  , /*decltype(_impl_.enable_dead_drop_)*/0u
  , /*decltype(_impl_.is_continuous_)*/false
  , /*decltype(_impl_.batch_interval_float_)*/0
  , /*decltype(_impl_.start_gen_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditBotGeneratorProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditBotGeneratorProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditBotGeneratorProtoDataDefaultTypeInternal() {}
  union {
    SceneEditBotGeneratorProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditBotGeneratorProtoDataDefaultTypeInternal _SceneEditBotGeneratorProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditUGCVendingMachineProtoData::SceneEditUGCVendingMachineProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.binding_shop_entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.trigger_radius_)*/0
  , /*decltype(_impl_.model_show_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditUGCVendingMachineProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditUGCVendingMachineProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditUGCVendingMachineProtoDataDefaultTypeInternal() {}
  union {
    SceneEditUGCVendingMachineProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditUGCVendingMachineProtoDataDefaultTypeInternal _SceneEditUGCVendingMachineProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditUGCWardrobeProtoData::SceneEditUGCWardrobeProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.trigger_radius_)*/0
  , /*decltype(_impl_.model_show_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditUGCWardrobeProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditUGCWardrobeProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditUGCWardrobeProtoDataDefaultTypeInternal() {}
  union {
    SceneEditUGCWardrobeProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditUGCWardrobeProtoDataDefaultTypeInternal _SceneEditUGCWardrobeProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditUGCPointLightProtoData::SceneEditUGCPointLightProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.intensity_)*/0
  , /*decltype(_impl_.range_)*/0
  , /*decltype(_impl_.color_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditUGCPointLightProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditUGCPointLightProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditUGCPointLightProtoDataDefaultTypeInternal() {}
  union {
    SceneEditUGCPointLightProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditUGCPointLightProtoDataDefaultTypeInternal _SceneEditUGCPointLightProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditUGCFootballProtoData::SceneEditUGCFootballProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.friction_)*/0
  , /*decltype(_impl_.friction_rush_)*/0
  , /*decltype(_impl_.shoot_angle_min_)*/0
  , /*decltype(_impl_.high_shoot_angle_min_)*/0
  , /*decltype(_impl_.hide_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditUGCFootballProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditUGCFootballProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditUGCFootballProtoDataDefaultTypeInternal() {}
  union {
    SceneEditUGCFootballProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditUGCFootballProtoDataDefaultTypeInternal _SceneEditUGCFootballProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditUGCCoinGeneratorProtoData::SceneEditUGCCoinGeneratorProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.coint_cnt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditUGCCoinGeneratorProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditUGCCoinGeneratorProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditUGCCoinGeneratorProtoDataDefaultTypeInternal() {}
  union {
    SceneEditUGCCoinGeneratorProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditUGCCoinGeneratorProtoDataDefaultTypeInternal _SceneEditUGCCoinGeneratorProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditUGCEntityGeneratorProtoData::SceneEditUGCEntityGeneratorProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.count_each_batch_)*/0u
  , /*decltype(_impl_.batch_count_)*/0u
  , /*decltype(_impl_.batch_interval_)*/0u
  , /*decltype(_impl_.batch_interval_float_)*/0
  , /*decltype(_impl_.is_continuous_)*/false
  , /*decltype(_impl_.start_gen_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditUGCEntityGeneratorProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditUGCEntityGeneratorProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditUGCEntityGeneratorProtoDataDefaultTypeInternal() {}
  union {
    SceneEditUGCEntityGeneratorProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditUGCEntityGeneratorProtoDataDefaultTypeInternal _SceneEditUGCEntityGeneratorProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditUGCAIProtoData::SceneEditUGCAIProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_)*/nullptr
  , /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditUGCAIProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditUGCAIProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditUGCAIProtoDataDefaultTypeInternal() {}
  union {
    SceneEditUGCAIProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditUGCAIProtoDataDefaultTypeInternal _SceneEditUGCAIProtoData_default_instance_;
PROTOBUF_CONSTEXPR UGCAIConfigParams::UGCAIConfigParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_.attack_)*/0u
  , /*decltype(_impl_.defense_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.detect_range_)*/0
  , /*decltype(_impl_.attack_range_)*/0
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.can_chase_enemy_)*/false
  , /*decltype(_impl_.enable_dead_drop_)*/false
  , /*decltype(_impl_.action_type_)*/0u
  , /*decltype(_impl_.ai_type_)*/0u
  , /*decltype(_impl_.path_instance_id_)*/0u
  , /*decltype(_impl_.injury_scale_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCAIConfigParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCAIConfigParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCAIConfigParamsDefaultTypeInternal() {}
  union {
    UGCAIConfigParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCAIConfigParamsDefaultTypeInternal _UGCAIConfigParams_default_instance_;
PROTOBUF_CONSTEXPR SceneEditUGCCustomPathProtoData::SceneEditUGCCustomPathProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.control_points_)*/{}
  , /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditUGCCustomPathProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditUGCCustomPathProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditUGCCustomPathProtoDataDefaultTypeInternal() {}
  union {
    SceneEditUGCCustomPathProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditUGCCustomPathProtoDataDefaultTypeInternal _SceneEditUGCCustomPathProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditEntityAttributeProtoData::SceneEditEntityAttributeProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.teleport_doors_)*/{}
  , /*decltype(_impl_.piano_keys_)*/{}
  , /*decltype(_impl_.buffs_)*/{}
  , /*decltype(_impl_.move_objects_)*/{}
  , /*decltype(_impl_.scale_items_)*/{}
  , /*decltype(_impl_.itemboxs_)*/{}
  , /*decltype(_impl_.triggers_)*/{}
  , /*decltype(_impl_.big_toy_balls_)*/{}
  , /*decltype(_impl_.minisentris_)*/{}
  , /*decltype(_impl_.custom_paths_)*/{}
  , /*decltype(_impl_.bot_generators_)*/{}
  , /*decltype(_impl_.vending_machines_)*/{}
  , /*decltype(_impl_.ugc_ais_)*/{}
  , /*decltype(_impl_.entity_generators_)*/{}
  , /*decltype(_impl_.coin_generators_)*/{}
  , /*decltype(_impl_.wardrobes_)*/{}
  , /*decltype(_impl_.spawn_boxs_)*/{}
  , /*decltype(_impl_.footballs_)*/{}
  , /*decltype(_impl_.goals_)*/{}
  , /*decltype(_impl_.oildrums_)*/{}
  , /*decltype(_impl_.basic_sphere_)*/{}
  , /*decltype(_impl_.custom_levelobject_)*/{}
  , /*decltype(_impl_.point_lights_)*/{}
  , /*decltype(_impl_.shape_triggers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditEntityAttributeProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditEntityAttributeProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditEntityAttributeProtoDataDefaultTypeInternal() {}
  union {
    SceneEditEntityAttributeProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditEntityAttributeProtoDataDefaultTypeInternal _SceneEditEntityAttributeProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditModeProtoData::SceneEditModeProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collision_matrix_)*/{}
  , /*decltype(_impl_._collision_matrix_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mode_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.general_data_)*/nullptr
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditModeProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditModeProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditModeProtoDataDefaultTypeInternal() {}
  union {
    SceneEditModeProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditModeProtoDataDefaultTypeInternal _SceneEditModeProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditOildrumData::SceneEditOildrumData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_.range_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditOildrumDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditOildrumDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditOildrumDataDefaultTypeInternal() {}
  union {
    SceneEditOildrumData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditOildrumDataDefaultTypeInternal _SceneEditOildrumData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditBasicSphereProtoData::SceneEditBasicSphereProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditBasicSphereProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditBasicSphereProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditBasicSphereProtoDataDefaultTypeInternal() {}
  union {
    SceneEditBasicSphereProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditBasicSphereProtoDataDefaultTypeInternal _SceneEditBasicSphereProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditCustomLevelObjectProtoData::SceneEditCustomLevelObjectProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.res_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditCustomLevelObjectProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditCustomLevelObjectProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditCustomLevelObjectProtoDataDefaultTypeInternal() {}
  union {
    SceneEditCustomLevelObjectProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditCustomLevelObjectProtoDataDefaultTypeInternal _SceneEditCustomLevelObjectProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditGoalData::SceneEditGoalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditGoalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditGoalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditGoalDataDefaultTypeInternal() {}
  union {
    SceneEditGoalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditGoalDataDefaultTypeInternal _SceneEditGoalData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditSpawnBoxData::SceneEditSpawnBoxData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_base_info_instance_id_)*/0u
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_.z_)*/0u
  , /*decltype(_impl_.spawn_point_count_)*/0u
  , /*decltype(_impl_.team_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditSpawnBoxDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditSpawnBoxDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditSpawnBoxDataDefaultTypeInternal() {}
  union {
    SceneEditSpawnBoxData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditSpawnBoxDataDefaultTypeInternal _SceneEditSpawnBoxData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditGeneralProtoData::SceneEditGeneralProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_hp_)*/0u
  , /*decltype(_impl_.max_ep_)*/0u
  , /*decltype(_impl_.start_ep_)*/0u
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_.receive_damage_)*/0u
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.jump_height_)*/0
  , /*decltype(_impl_.auto_healing_)*/false
  , /*decltype(_impl_.limited_ammo_)*/false
  , /*decltype(_impl_.enable_active_skill_)*/false
  , /*decltype(_impl_.enable_passive_skill_)*/false
  , /*decltype(_impl_.global_active_skill_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_transform_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_epchangetohp_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_healingdance_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_graffitimonitor_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_detective_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_epfastandupper_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_adddamagebycosthp_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_spaceshield_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_blowupicewall_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_tempincreasehp_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_addhpandrescure_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_dwshield_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_throwsilence_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_createflightbomb_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_markicewall_cd_percent_)*/0u
  , /*decltype(_impl_.playerskill_runspeedup_cd_percent_)*/0u
  , /*decltype(_impl_.unlimited_bullet_)*/false
  , /*decltype(_impl_.unlimited_gloowall_)*/false
  , /*decltype(_impl_.unlimited_throwables_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditGeneralProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditGeneralProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditGeneralProtoDataDefaultTypeInternal() {}
  union {
    SceneEditGeneralProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditGeneralProtoDataDefaultTypeInternal _SceneEditGeneralProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditCSModeProtoData::SceneEditCSModeProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.end_condition_)*/nullptr
  , /*decltype(_impl_.safe_zone_size_)*/0
  , /*decltype(_impl_.safe_zone_start_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditCSModeProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditCSModeProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditCSModeProtoDataDefaultTypeInternal() {}
  union {
    SceneEditCSModeProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditCSModeProtoDataDefaultTypeInternal _SceneEditCSModeProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditIntegralModeProtoData::SceneEditIntegralModeProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.end_condition_)*/nullptr
  , /*decltype(_impl_.kill_score_)*/0u
  , /*decltype(_impl_.revive_rule_)*/0u
  , /*decltype(_impl_.revive_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditIntegralModeProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditIntegralModeProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditIntegralModeProtoDataDefaultTypeInternal() {}
  union {
    SceneEditIntegralModeProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditIntegralModeProtoDataDefaultTypeInternal _SceneEditIntegralModeProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditPartyModeProtoData::SceneEditPartyModeProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.end_condition_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditPartyModeProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditPartyModeProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditPartyModeProtoDataDefaultTypeInternal() {}
  union {
    SceneEditPartyModeProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditPartyModeProtoDataDefaultTypeInternal _SceneEditPartyModeProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditCustomModeProtoData::SceneEditCustomModeProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditCustomModeProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditCustomModeProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditCustomModeProtoDataDefaultTypeInternal() {}
  union {
    SceneEditCustomModeProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditCustomModeProtoDataDefaultTypeInternal _SceneEditCustomModeProtoData_default_instance_;
PROTOBUF_CONSTEXPR SceneEditEndConditionProtoData::SceneEditEndConditionProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_up_)*/0u
  , /*decltype(_impl_.score_)*/0u
  , /*decltype(_impl_.cs_rounds_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SceneEditEndConditionProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SceneEditEndConditionProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SceneEditEndConditionProtoDataDefaultTypeInternal() {}
  union {
    SceneEditEndConditionProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SceneEditEndConditionProtoDataDefaultTypeInternal _SceneEditEndConditionProtoData_default_instance_;
PROTOBUF_CONSTEXPR UGCMoveObjectExportExtraInfo::UGCMoveObjectExportExtraInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.moverootlocpos_)*/nullptr
  , /*decltype(_impl_.moverooloctrot_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCMoveObjectExportExtraInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCMoveObjectExportExtraInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCMoveObjectExportExtraInfoDefaultTypeInternal() {}
  union {
    UGCMoveObjectExportExtraInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCMoveObjectExportExtraInfoDefaultTypeInternal _UGCMoveObjectExportExtraInfo_default_instance_;
PROTOBUF_CONSTEXPR UGCCheckPointExportExtraInfo::UGCCheckPointExportExtraInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spawnpointpos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCheckPointExportExtraInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCheckPointExportExtraInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCheckPointExportExtraInfoDefaultTypeInternal() {}
  union {
    UGCCheckPointExportExtraInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCheckPointExportExtraInfoDefaultTypeInternal _UGCCheckPointExportExtraInfo_default_instance_;
PROTOBUF_CONSTEXPR UGCBigToyBallExportExtraInfo::UGCBigToyBallExportExtraInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.moverange_)*/0
  , /*decltype(_impl_.triggerradius_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCBigToyBallExportExtraInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCBigToyBallExportExtraInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCBigToyBallExportExtraInfoDefaultTypeInternal() {}
  union {
    UGCBigToyBallExportExtraInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCBigToyBallExportExtraInfoDefaultTypeInternal _UGCBigToyBallExportExtraInfo_default_instance_;
PROTOBUF_CONSTEXPR UGCMiniSentryExportInfo::UGCMiniSentryExportInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.firepos_)*/nullptr
  , /*decltype(_impl_.anglespeed_)*/0
  , /*decltype(_impl_.angleup_)*/0
  , /*decltype(_impl_.angledown_)*/0
  , /*decltype(_impl_.fireangle_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCMiniSentryExportInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCMiniSentryExportInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCMiniSentryExportInfoDefaultTypeInternal() {}
  union {
    UGCMiniSentryExportInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCMiniSentryExportInfoDefaultTypeInternal _UGCMiniSentryExportInfo_default_instance_;
PROTOBUF_CONSTEXPR ModeVariable::ModeVariable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.floatarrvalue_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.boolvalue_)*/false
  , /*decltype(_impl_.intvalue_)*/0
  , /*decltype(_impl_.floatvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModeVariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModeVariableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModeVariableDefaultTypeInternal() {}
  union {
    ModeVariable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModeVariableDefaultTypeInternal _ModeVariable_default_instance_;
PROTOBUF_CONSTEXPR UGCBlockEditProjectData::UGCBlockEditProjectData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.savetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCBlockEditProjectDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCBlockEditProjectDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCBlockEditProjectDataDefaultTypeInternal() {}
  union {
    UGCBlockEditProjectData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCBlockEditProjectDataDefaultTypeInternal _UGCBlockEditProjectData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudTransformData::UGCHudTransformData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.localposition_)*/nullptr
  , /*decltype(_impl_.localeulerangles_)*/nullptr
  , /*decltype(_impl_.localscale_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudTransformDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudTransformDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudTransformDataDefaultTypeInternal() {}
  union {
    UGCHudTransformData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudTransformDataDefaultTypeInternal _UGCHudTransformData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudRectTransformData::UGCHudRectTransformData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_.anchorposition_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudRectTransformDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudRectTransformDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudRectTransformDataDefaultTypeInternal() {}
  union {
    UGCHudRectTransformData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudRectTransformDataDefaultTypeInternal _UGCHudRectTransformData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudWidgetData::UGCHudWidgetData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.anchormin_)*/nullptr
  , /*decltype(_impl_.anchormax_)*/nullptr
  , /*decltype(_impl_.sizedelta_)*/nullptr
  , /*decltype(_impl_.pivot_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.horizontalalignment_)*/0
  , /*decltype(_impl_.verticalalignment_)*/0
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudWidgetDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudWidgetDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudWidgetDataDefaultTypeInternal() {}
  union {
    UGCHudWidgetData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudWidgetDataDefaultTypeInternal _UGCHudWidgetData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudLabelData::UGCHudLabelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.font_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lockey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_.fontsize_)*/0
  , /*decltype(_impl_.alignment_)*/0
  , /*decltype(_impl_.alignmentvertical_)*/0
  , /*decltype(_impl_.isbold_)*/false
  , /*decltype(_impl_.isitalic_)*/false
  , /*decltype(_impl_.isunderline_)*/false
  , /*decltype(_impl_.linespacing_)*/0
  , /*decltype(_impl_.overflow_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudLabelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudLabelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudLabelDataDefaultTypeInternal() {}
  union {
    UGCHudLabelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudLabelDataDefaultTypeInternal _UGCHudLabelData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudImageData::UGCHudImageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spritename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_.spriteflip_)*/0
  , /*decltype(_impl_.spritetype_)*/0
  , /*decltype(_impl_.bordertop_)*/0
  , /*decltype(_impl_.borderbottom_)*/0
  , /*decltype(_impl_.borderleft_)*/0
  , /*decltype(_impl_.borderright_)*/0
  , /*decltype(_impl_.filldir_)*/0
  , /*decltype(_impl_.centerinvisible_)*/false
  , /*decltype(_impl_.invertfill_)*/false
  , /*decltype(_impl_.fillamount_)*/0
  , /*decltype(_impl_.gradient_)*/0
  , /*decltype(_impl_.gradienttop_)*/0
  , /*decltype(_impl_.gradientbottom_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudImageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudImageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudImageDataDefaultTypeInternal() {}
  union {
    UGCHudImageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudImageDataDefaultTypeInternal _UGCHudImageData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudButtonData::UGCHudButtonData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spritename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_.disablecolor_)*/0
  , /*decltype(_impl_.spritetype_)*/0
  , /*decltype(_impl_.normalcolor_)*/0
  , /*decltype(_impl_.pressedcolor_)*/0
  , /*decltype(_impl_.isfebutton_)*/false
  , /*decltype(_impl_.bordertop_)*/0
  , /*decltype(_impl_.borderbottom_)*/0
  , /*decltype(_impl_.borderleft_)*/0
  , /*decltype(_impl_.borderright_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudButtonDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudButtonDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudButtonDataDefaultTypeInternal() {}
  union {
    UGCHudButtonData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudButtonDataDefaultTypeInternal _UGCHudButtonData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudInputData::UGCHudInputData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.font_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lockey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_.fontsize_)*/0
  , /*decltype(_impl_.isbold_)*/false
  , /*decltype(_impl_.isitalic_)*/false
  , /*decltype(_impl_.isunderline_)*/false
  , /*decltype(_impl_.alignment_)*/0
  , /*decltype(_impl_.alignmentvertical_)*/0
  , /*decltype(_impl_.linespacing_)*/0
  , /*decltype(_impl_.wordwrap_)*/0
  , /*decltype(_impl_.maxlength_)*/0
  , /*decltype(_impl_.transitiontype_)*/0
  , /*decltype(_impl_.normalcolor_)*/0
  , /*decltype(_impl_.pressedcolor_)*/0
  , /*decltype(_impl_.disablecolor_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudInputDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudInputDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudInputDataDefaultTypeInternal() {}
  union {
    UGCHudInputData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudInputDataDefaultTypeInternal _UGCHudInputData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudLayoutData::UGCHudLayoutData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudLayoutDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudLayoutDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudLayoutDataDefaultTypeInternal() {}
  union {
    UGCHudLayoutData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudLayoutDataDefaultTypeInternal _UGCHudLayoutData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudGridData::UGCHudGridData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.panel_)*/nullptr
  , /*decltype(_impl_.cellsize_)*/nullptr
  , /*decltype(_impl_.space_)*/nullptr
  , /*decltype(_impl_.offsetupdown_)*/nullptr
  , /*decltype(_impl_.offsetleftright_)*/nullptr
  , /*decltype(_impl_.layouttype_)*/0
  , /*decltype(_impl_.contentorigin_)*/0
  , /*decltype(_impl_.filldirection_)*/0
  , /*decltype(_impl_.constraint_)*/0
  , /*decltype(_impl_.constraintcount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudGridDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudGridDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudGridDataDefaultTypeInternal() {}
  union {
    UGCHudGridData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudGridDataDefaultTypeInternal _UGCHudGridData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudLayoutNewData::UGCHudLayoutNewData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_.cellsize_)*/nullptr
  , /*decltype(_impl_.space_)*/nullptr
  , /*decltype(_impl_.offsetupdown_)*/nullptr
  , /*decltype(_impl_.offsetleftright_)*/nullptr
  , /*decltype(_impl_.layouttype_)*/0
  , /*decltype(_impl_.contentorigin_)*/0
  , /*decltype(_impl_.filldirection_)*/0
  , /*decltype(_impl_.constraint_)*/0
  , /*decltype(_impl_.constraintcount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudLayoutNewDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudLayoutNewDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudLayoutNewDataDefaultTypeInternal() {}
  union {
    UGCHudLayoutNewData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudLayoutNewDataDefaultTypeInternal _UGCHudLayoutNewData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudPanelData::UGCHudPanelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bgname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.maskname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bgsizedelta_)*/nullptr
  , /*decltype(_impl_.softness_)*/nullptr
  , /*decltype(_impl_.anchormin_)*/nullptr
  , /*decltype(_impl_.anchormax_)*/nullptr
  , /*decltype(_impl_.sizedelta_)*/nullptr
  , /*decltype(_impl_.pivot_)*/nullptr
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.bgfill_)*/false
  , /*decltype(_impl_.bgcolor_)*/0
  , /*decltype(_impl_.clippingtype_)*/0
  , /*decltype(_impl_.bgalpha_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudPanelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudPanelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudPanelDataDefaultTypeInternal() {}
  union {
    UGCHudPanelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudPanelDataDefaultTypeInternal _UGCHudPanelData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudScrollViewData::UGCHudScrollViewData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.panel_)*/nullptr
  , /*decltype(_impl_.customxy_)*/nullptr
  , /*decltype(_impl_.contentorigin_)*/0
  , /*decltype(_impl_.scrolldirection_)*/0
  , /*decltype(_impl_.drageffect_)*/0
  , /*decltype(_impl_.scrollwheelfactor_)*/0
  , /*decltype(_impl_.momentumamount_)*/0
  , /*decltype(_impl_.restrictwithinpanel_)*/false
  , /*decltype(_impl_.smoothdragstart_)*/false
  , /*decltype(_impl_.canceldragiffits_)*/false
  , /*decltype(_impl_.verticalbar_)*/0
  , /*decltype(_impl_.horizontalbar_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudScrollViewDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudScrollViewDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudScrollViewDataDefaultTypeInternal() {}
  union {
    UGCHudScrollViewData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudScrollViewDataDefaultTypeInternal _UGCHudScrollViewData_default_instance_;
PROTOBUF_CONSTEXPR UGCHud3DContainerData::UGCHud3DContainerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resourceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_.scale_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHud3DContainerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHud3DContainerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHud3DContainerDataDefaultTypeInternal() {}
  union {
    UGCHud3DContainerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHud3DContainerDataDefaultTypeInternal _UGCHud3DContainerData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudTextureData::UGCHudTextureData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.texturename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shadername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_.uvrectxy_)*/nullptr
  , /*decltype(_impl_.uvrectwh_)*/nullptr
  , /*decltype(_impl_.borderlr_)*/nullptr
  , /*decltype(_impl_.bordertb_)*/nullptr
  , /*decltype(_impl_.filltype_)*/0
  , /*decltype(_impl_.filldir_)*/0
  , /*decltype(_impl_.centerinvisible_)*/false
  , /*decltype(_impl_.invertfill_)*/false
  , /*decltype(_impl_.fillamount_)*/0
  , /*decltype(_impl_.flip_)*/0
  , /*decltype(_impl_.gradient_)*/0
  , /*decltype(_impl_.gradienttop_)*/0
  , /*decltype(_impl_.gradientbottom_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudTextureDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudTextureDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudTextureDataDefaultTypeInternal() {}
  union {
    UGCHudTextureData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudTextureDataDefaultTypeInternal _UGCHudTextureData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudProfileInfoData::UGCHudProfileInfoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_.scale_)*/nullptr
  , /*decltype(_impl_.showtype_)*/0
  , /*decltype(_impl_.showrank_)*/0
  , /*decltype(_impl_.showpin_)*/false
  , /*decltype(_impl_.showname_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudProfileInfoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudProfileInfoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudProfileInfoDataDefaultTypeInternal() {}
  union {
    UGCHudProfileInfoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudProfileInfoDataDefaultTypeInternal _UGCHudProfileInfoData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudGameObjectCommonData::UGCHudGameObjectCommonData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recttransform_)*/nullptr
  , /*decltype(_impl_.widget_)*/nullptr
  , /*decltype(_impl_.label_)*/nullptr
  , /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.button_)*/nullptr
  , /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.layout_)*/nullptr
  , /*decltype(_impl_.panel_)*/nullptr
  , /*decltype(_impl_.scrollview_)*/nullptr
  , /*decltype(_impl_.grid_)*/nullptr
  , /*decltype(_impl_.layoutnew_)*/nullptr
  , /*decltype(_impl_.container3d_)*/nullptr
  , /*decltype(_impl_.texture_)*/nullptr
  , /*decltype(_impl_.profileinfo_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.actived_)*/false
  , /*decltype(_impl_.widgettype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudGameObjectCommonDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudGameObjectCommonDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudGameObjectCommonDataDefaultTypeInternal() {}
  union {
    UGCHudGameObjectCommonData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudGameObjectCommonDataDefaultTypeInternal _UGCHudGameObjectCommonData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudGameObjectData::UGCHudGameObjectData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.commondata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudGameObjectDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudGameObjectDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudGameObjectDataDefaultTypeInternal() {}
  union {
    UGCHudGameObjectData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudGameObjectDataDefaultTypeInternal _UGCHudGameObjectData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudGameObjectDataForEditor::UGCHudGameObjectDataForEditor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.commondata_)*/nullptr
  , /*decltype(_impl_.customadapt_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudGameObjectDataForEditorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudGameObjectDataForEditorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudGameObjectDataForEditorDefaultTypeInternal() {}
  union {
    UGCHudGameObjectDataForEditor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudGameObjectDataForEditorDefaultTypeInternal _UGCHudGameObjectDataForEditor_default_instance_;
PROTOBUF_CONSTEXPR UGCHudPrefabCommonData::UGCHudPrefabCommonData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_.screenwidth_)*/0
  , /*decltype(_impl_.screenheight_)*/0
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudPrefabCommonDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudPrefabCommonDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudPrefabCommonDataDefaultTypeInternal() {}
  union {
    UGCHudPrefabCommonData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudPrefabCommonDataDefaultTypeInternal _UGCHudPrefabCommonData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudPrefabData::UGCHudPrefabData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.commondata_)*/nullptr
  , /*decltype(_impl_.maxwidgetid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudPrefabDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudPrefabDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudPrefabDataDefaultTypeInternal() {}
  union {
    UGCHudPrefabData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudPrefabDataDefaultTypeInternal _UGCHudPrefabData_default_instance_;
PROTOBUF_CONSTEXPR UGCHudPrefabDataForEditor::UGCHudPrefabDataForEditor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.commondata_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.maxwidgetid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudPrefabDataForEditorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudPrefabDataForEditorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudPrefabDataForEditorDefaultTypeInternal() {}
  union {
    UGCHudPrefabDataForEditor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudPrefabDataForEditorDefaultTypeInternal _UGCHudPrefabDataForEditor_default_instance_;
PROTOBUF_CONSTEXPR UGCHudPrefabDatas::UGCHudPrefabDatas(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prefabs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudPrefabDatasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudPrefabDatasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudPrefabDatasDefaultTypeInternal() {}
  union {
    UGCHudPrefabDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudPrefabDatasDefaultTypeInternal _UGCHudPrefabDatas_default_instance_;
PROTOBUF_CONSTEXPR UGCHudPrefabDatasForEditor::UGCHudPrefabDatasForEditor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prefabs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCHudPrefabDatasForEditorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCHudPrefabDatasForEditorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCHudPrefabDatasForEditorDefaultTypeInternal() {}
  union {
    UGCHudPrefabDatasForEditor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCHudPrefabDatasForEditorDefaultTypeInternal _UGCHudPrefabDatasForEditor_default_instance_;
PROTOBUF_CONSTEXPR UGCProjectData::UGCProjectData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grapheditorproject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workfloweditorproject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entityeditorproject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hudeditorproject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapeditorproject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.modesettingeditorproject_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compatibleversion_)*/0
  , /*decltype(_impl_.publicversion_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCProjectDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCProjectDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCProjectDataDefaultTypeInternal() {}
  union {
    UGCProjectData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCProjectDataDefaultTypeInternal _UGCProjectData_default_instance_;
PROTOBUF_CONSTEXPR UGCProjectMetaData::UGCProjectMetaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.locdata_)*/{}
  , /*decltype(_impl_.datastorage_)*/{}
  , /*decltype(_impl_.leaderboard_)*/{}
  , /*decltype(_impl_.statistic_)*/{}
  , /*decltype(_impl_.gamename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamedesc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workshopbitmap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workshopiconmap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.runtimedatamd5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projectdatamd5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.originalworkshopcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamenamekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamedesckey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.customcover_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.customcoverurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roomparams_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.packagedatamd5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.openroomlocdatamd5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subdesc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.modesettings_)*/nullptr
  , /*decltype(_impl_.userdataforcensorship_)*/nullptr
  , /*decltype(_impl_.halfwayjoinrule_)*/nullptr
  , /*decltype(_impl_.slotid_)*/0u
  , /*decltype(_impl_.gamemode_)*/0u
  , /*decltype(_impl_.groupmode_)*/0u
  , /*decltype(_impl_.teamcount_)*/0u
  , /*decltype(_impl_.gameresourcecount_)*/uint64_t{0u}
  , /*decltype(_impl_.gametotalcost_)*/uint64_t{0u}
  , /*decltype(_impl_.updatetime_)*/uint64_t{0u}
  , /*decltype(_impl_.runtimedatalength_)*/uint64_t{0u}
  , /*decltype(_impl_.projectdatalength_)*/uint64_t{0u}
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.compatibleversion_)*/0
  , /*decltype(_impl_.modetemplateid_)*/0u
  , /*decltype(_impl_.severity_)*/0
  , /*decltype(_impl_.publicversion_)*/0
  , /*decltype(_impl_.secedit_)*/false
  , /*decltype(_impl_.notify_subscriber_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCProjectMetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCProjectMetaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCProjectMetaDataDefaultTypeInternal() {}
  union {
    UGCProjectMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCProjectMetaDataDefaultTypeInternal _UGCProjectMetaData_default_instance_;
PROTOBUF_CONSTEXPR UGCUserDataForCensorship_BlobOfCustomStrings::UGCUserDataForCensorship_BlobOfCustomStrings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stringlist_)*/{}
  , /*decltype(_impl_.entitytypename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graphid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entitytype_)*/0u
  , /*decltype(_impl_.wordfiltertype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCUserDataForCensorship_BlobOfCustomStringsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCUserDataForCensorship_BlobOfCustomStringsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCUserDataForCensorship_BlobOfCustomStringsDefaultTypeInternal() {}
  union {
    UGCUserDataForCensorship_BlobOfCustomStrings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCUserDataForCensorship_BlobOfCustomStringsDefaultTypeInternal _UGCUserDataForCensorship_BlobOfCustomStrings_default_instance_;
PROTOBUF_CONSTEXPR UGCUserDataForCensorship::UGCUserDataForCensorship(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.customstrings_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCUserDataForCensorshipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCUserDataForCensorshipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCUserDataForCensorshipDefaultTypeInternal() {}
  union {
    UGCUserDataForCensorship _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCUserDataForCensorshipDefaultTypeInternal _UGCUserDataForCensorship_default_instance_;
PROTOBUF_CONSTEXPR UGCMapProjectData_OB35_And_Earlier::UGCMapProjectData_OB35_And_Earlier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entitybindingdatabytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.runtimedatabytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamedesc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamemode_)*/0u
  , /*decltype(_impl_.groupmode_)*/0u
  , /*decltype(_impl_.teamcount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCMapProjectData_OB35_And_EarlierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCMapProjectData_OB35_And_EarlierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCMapProjectData_OB35_And_EarlierDefaultTypeInternal() {}
  union {
    UGCMapProjectData_OB35_And_Earlier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCMapProjectData_OB35_And_EarlierDefaultTypeInternal _UGCMapProjectData_OB35_And_Earlier_default_instance_;
PROTOBUF_CONSTEXPR UGCMapProjectData::UGCMapProjectData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allentitydata_)*/{}
  , /*decltype(_impl_.runtimedatabytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamedesc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamemode_)*/0u
  , /*decltype(_impl_.groupmode_)*/0u
  , /*decltype(_impl_.teamcount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCMapProjectDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCMapProjectDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCMapProjectDataDefaultTypeInternal() {}
  union {
    UGCMapProjectData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCMapProjectDataDefaultTypeInternal _UGCMapProjectData_default_instance_;
PROTOBUF_CONSTEXPR UGCEditorError_ErrorCodeData::UGCEditorError_ErrorCodeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lockey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consolekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errorcode_)*/0
  , /*decltype(_impl_.severity_)*/0
  , /*decltype(_impl_.priority_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCEditorError_ErrorCodeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCEditorError_ErrorCodeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCEditorError_ErrorCodeDataDefaultTypeInternal() {}
  union {
    UGCEditorError_ErrorCodeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCEditorError_ErrorCodeDataDefaultTypeInternal _UGCEditorError_ErrorCodeData_default_instance_;
PROTOBUF_CONSTEXPR UGCEditorError_ErrorEntry::UGCEditorError_ErrorEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extraparams_)*/{}
  , /*decltype(_impl_.entitytype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entityid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graphid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blockid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errorcode_)*/0
  , /*decltype(_impl_.sceneedititemtype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCEditorError_ErrorEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCEditorError_ErrorEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCEditorError_ErrorEntryDefaultTypeInternal() {}
  union {
    UGCEditorError_ErrorEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCEditorError_ErrorEntryDefaultTypeInternal _UGCEditorError_ErrorEntry_default_instance_;
PROTOBUF_CONSTEXPR UGCEditorError::UGCEditorError(
    ::_pbi::ConstantInitialized) {}
struct UGCEditorErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCEditorErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCEditorErrorDefaultTypeInternal() {}
  union {
    UGCEditorError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCEditorErrorDefaultTypeInternal _UGCEditorError_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamSingleIntItem::RoomCustomParamSingleIntItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labelkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.defaulttext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomCustomParamSingleIntItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamSingleIntItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamSingleIntItemDefaultTypeInternal() {}
  union {
    RoomCustomParamSingleIntItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamSingleIntItemDefaultTypeInternal _RoomCustomParamSingleIntItem_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamSingleFloatItem::RoomCustomParamSingleFloatItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labelkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.defaulttext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomCustomParamSingleFloatItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamSingleFloatItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamSingleFloatItemDefaultTypeInternal() {}
  union {
    RoomCustomParamSingleFloatItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamSingleFloatItemDefaultTypeInternal _RoomCustomParamSingleFloatItem_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamSliderInt::RoomCustomParamSliderInt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.minvalue_)*/0
  , /*decltype(_impl_.maxvalue_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomCustomParamSliderIntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamSliderIntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamSliderIntDefaultTypeInternal() {}
  union {
    RoomCustomParamSliderInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamSliderIntDefaultTypeInternal _RoomCustomParamSliderInt_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamSliderFloat::RoomCustomParamSliderFloat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.minvalue_)*/0
  , /*decltype(_impl_.maxvalue_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomCustomParamSliderFloatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamSliderFloatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamSliderFloatDefaultTypeInternal() {}
  union {
    RoomCustomParamSliderFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamSliderFloatDefaultTypeInternal _RoomCustomParamSliderFloat_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamSingleChooseInt::RoomCustomParamSingleChooseInt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomCustomParamSingleChooseIntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamSingleChooseIntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamSingleChooseIntDefaultTypeInternal() {}
  union {
    RoomCustomParamSingleChooseInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamSingleChooseIntDefaultTypeInternal _RoomCustomParamSingleChooseInt_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamSingleChooseFloat::RoomCustomParamSingleChooseFloat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomCustomParamSingleChooseFloatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamSingleChooseFloatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamSingleChooseFloatDefaultTypeInternal() {}
  union {
    RoomCustomParamSingleChooseFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamSingleChooseFloatDefaultTypeInternal _RoomCustomParamSingleChooseFloat_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamMultiChooseInt::RoomCustomParamMultiChooseInt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.indexlist_)*/{}
  , /*decltype(_impl_._indexlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomCustomParamMultiChooseIntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamMultiChooseIntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamMultiChooseIntDefaultTypeInternal() {}
  union {
    RoomCustomParamMultiChooseInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamMultiChooseIntDefaultTypeInternal _RoomCustomParamMultiChooseInt_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamData::RoomCustomParamData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.labelkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.defaulttext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.multichooseint_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.Value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RoomCustomParamDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamDataDefaultTypeInternal() {}
  union {
    RoomCustomParamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamDataDefaultTypeInternal _RoomCustomParamData_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamsSettingData::RoomCustomParamsSettingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.loccdnurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomCustomParamsSettingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamsSettingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamsSettingDataDefaultTypeInternal() {}
  union {
    RoomCustomParamsSettingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamsSettingDataDefaultTypeInternal _RoomCustomParamsSettingData_default_instance_;
PROTOBUF_CONSTEXPR RoomCustomParamProtoData::RoomCustomParamProtoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.listint_)*/{}
  , /*decltype(_impl_._listint_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.Value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RoomCustomParamProtoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCustomParamProtoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCustomParamProtoDataDefaultTypeInternal() {}
  union {
    RoomCustomParamProtoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCustomParamProtoDataDefaultTypeInternal _RoomCustomParamProtoData_default_instance_;
PROTOBUF_CONSTEXPR UGCResourceData::UGCResourceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourceDataDefaultTypeInternal() {}
  union {
    UGCResourceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourceDataDefaultTypeInternal _UGCResourceData_default_instance_;
PROTOBUF_CONSTEXPR UGCResourceContentData::UGCResourceContentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.optionalresourcenames_)*/{}
  , /*decltype(_impl_.mapids_)*/{}
  , /*decltype(_impl_._mapids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.itemids_)*/{}
  , /*decltype(_impl_._itemids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.csshareditemid_)*/{}
  , /*decltype(_impl_._csshareditemid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.urlcache_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resourcepackageinfo_)*/nullptr
  , /*decltype(_impl_.notnecessaryresdata_)*/nullptr
  , /*decltype(_impl_.modetemplateid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourceContentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourceContentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourceContentDataDefaultTypeInternal() {}
  union {
    UGCResourceContentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourceContentDataDefaultTypeInternal _UGCResourceContentData_default_instance_;
PROTOBUF_CONSTEXPR UGCRoomCustomParamLocDatas::UGCRoomCustomParamLocDatas(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.locdata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCRoomCustomParamLocDatasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCRoomCustomParamLocDatasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCRoomCustomParamLocDatasDefaultTypeInternal() {}
  union {
    UGCRoomCustomParamLocDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCRoomCustomParamLocDatasDefaultTypeInternal _UGCRoomCustomParamLocDatas_default_instance_;
PROTOBUF_CONSTEXPR UGCDatabaseData::UGCDatabaseData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.listdata_)*/{}
  , /*decltype(_impl_.typeid__)*/0
  , /*decltype(_impl_.Value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UGCDatabaseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCDatabaseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCDatabaseDataDefaultTypeInternal() {}
  union {
    UGCDatabaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCDatabaseDataDefaultTypeInternal _UGCDatabaseData_default_instance_;
PROTOBUF_CONSTEXPR UGCRoomHalfWayJoinRule::UGCRoomHalfWayJoinRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recommendstartgamenumber_)*/0
  , /*decltype(_impl_.halfwayjoineffecttime_)*/0
  , /*decltype(_impl_.enablehalfwayjoin_)*/false
  , /*decltype(_impl_.enablehalfwayjoineffecttime_)*/false
  , /*decltype(_impl_.halfwayjoinnumberlimit_)*/false
  , /*decltype(_impl_.enablehalfwaysubmitmatchstats_)*/false
  , /*decltype(_impl_.halfwayjoinnumber_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCRoomHalfWayJoinRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCRoomHalfWayJoinRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCRoomHalfWayJoinRuleDefaultTypeInternal() {}
  union {
    UGCRoomHalfWayJoinRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCRoomHalfWayJoinRuleDefaultTypeInternal _UGCRoomHalfWayJoinRule_default_instance_;
PROTOBUF_CONSTEXPR UGCResAnimationClipEvent::UGCResAnimationClipEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.eventname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventparamlist_)*/nullptr
  , /*decltype(_impl_.eventid_)*/0
  , /*decltype(_impl_.eventtime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResAnimationClipEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResAnimationClipEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResAnimationClipEventDefaultTypeInternal() {}
  union {
    UGCResAnimationClipEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResAnimationClipEventDefaultTypeInternal _UGCResAnimationClipEvent_default_instance_;
PROTOBUF_CONSTEXPR UGCResEventAnimationClipData::UGCResEventAnimationClipData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.clipname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.animationclipdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.animationclipresuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.fps_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResEventAnimationClipDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResEventAnimationClipDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResEventAnimationClipDataDefaultTypeInternal() {}
  union {
    UGCResEventAnimationClipData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResEventAnimationClipDataDefaultTypeInternal _UGCResEventAnimationClipData_default_instance_;
}  // namespace message
static ::_pb::Metadata file_level_metadata_ugccommon_2eproto[145];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ugccommon_2eproto[24];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ugccommon_2eproto = nullptr;

const uint32_t TableStruct_ugccommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.gamemode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.gotopositionafterstart_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.gotoposition_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.botcountbyteam_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.breakpoints_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.groupmode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.isstrictmode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCDebugSettingData, _impl_.tokensvalidid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCPhaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCPhaseData, _impl_.phaseindex_),
  PROTOBUF_FIELD_OFFSET(::message::UGCPhaseData, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCRoundData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCRoundData, _impl_.phaseindex_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRoundData, _impl_.roundnummax_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRoundData, _impl_.phasedata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCWorkflowSequenceItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCWorkflowSequenceItem, _impl_.datatype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCWorkflowSequenceItem, _impl_.dataindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCWorkflowSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCWorkflowSequence, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _impl_.declare_),
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _impl_.basetypeids_),
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _impl_.accepttypeids_),
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _impl_.genericsid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _impl_.t0id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::message::UGCType, _impl_.t1id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeTree, _impl_.typemap_),
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeTree, _impl_.cmpprops_),
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeTree, _impl_.components_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeComponent, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeComponent, _impl_.props_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeComponentProp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeComponentProp, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeComponentProp, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCTypeComponentProp, _impl_.defaultvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemForEditor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemForEditor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemForEditor, _impl_.typeid__),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemForEditor, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataForEditor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataForEditor, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataForEditor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataForEditor, _impl_.graphids_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataForEditor, _impl_.repdataitem_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataForEditor, _impl_.editortype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataForEditor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataForEditor, _impl_.entitytype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataForEditor, _impl_.itemdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueData, _impl_.valuetype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueData, _impl_.funcvalue_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueData, _impl_.boolvalue_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueData, _impl_.intvalue_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueData, _impl_.floatvalue_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueData, _impl_.stringvalue_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueData, _impl_.vector3value_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueData, _impl_.arrayvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerData, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerData, _impl_.subcallerdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerData, _impl_.useupvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCVarDefineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCVarDefineData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarDefineData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarDefineData, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCRuleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCRuleData, _impl_.eventtype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRuleData, _impl_.callerdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphData, _impl_.rules_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphData, _impl_.variables_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphData, _impl_.functions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemInstance, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemInstance, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityData, _impl_.graphids_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityData, _impl_.repdataitem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItem, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationData, _impl_.entitytype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationData, _impl_.itemdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelData, _impl_.graphdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelData, _impl_.workflow_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelData, _impl_.logicentitydatas_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelData, _impl_.entityreplicationdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelData, _impl_.mapdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelData, _impl_.hudprefabdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV2, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV2, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV2, _impl_.graphids_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV2, _impl_.repdataitem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelDataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelDataV2, _impl_.graphdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelDataV2, _impl_.workflow_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelDataV2, _impl_.logicentitydatas_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelDataV2, _impl_.entityreplicationdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelDataV2, _impl_.hudprefabdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelDataV2, _impl_.customtypemap_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelDataV2, _impl_.modesetting_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLevelDataV2, _impl_.allscenedata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCVersionControlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCVersionControlData, _impl_.compatibleversion_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVersionControlData, _impl_.contentdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVersionControlData, _impl_.publicversion_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVersionControlData, _impl_.downloaddesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCMapValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCMapValue, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapValue, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueDataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueDataV2, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueDataV2, _impl_.listvalue_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueDataV2, _impl_.mapvalue_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarValueDataV2, _impl_.Value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncDefParamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncDefParamData, _impl_.isupvalue_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncDefParamData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncDefParamData, _impl_.outtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerDataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerDataV2, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerDataV2, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerDataV2, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerDataV2, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerDataV2, _impl_.subcallerdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerDataV2, _impl_.useupvalue_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerDataV2, _impl_.paramtypes_),
  PROTOBUF_FIELD_OFFSET(::message::UGCFuncCallerDataV2, _impl_.defparaminfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCVarDefineDataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCVarDefineDataV2, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarDefineDataV2, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarDefineDataV2, _impl_.typeid__),
  PROTOBUF_FIELD_OFFSET(::message::UGCVarDefineDataV2, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCRuleDataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCRuleDataV2, _impl_.eventtype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRuleDataV2, _impl_.callerdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphDataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphDataV2, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphDataV2, _impl_.rules_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphDataV2, _impl_.variables_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphDataV2, _impl_.functions_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphDataV2, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGraphDataV2, _impl_.declare_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemInstanceV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemInstanceV2, _impl_.propid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemInstanceV2, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV3, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV3, _impl_.componentids_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV3, _impl_.graphids_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV3, _impl_.repdataitem_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLogicEntityDataV3, _impl_.refprefabid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemV2, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemV2, _impl_.typeid__),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemV2, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemV2, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataItemV2, _impl_.onlyserver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataV2, _impl_.componenttypeid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomReplicationDataV2, _impl_.itemdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCInternalLibrary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCInternalLibrary, _impl_.graphdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCInternalLibrary, _impl_.logicentitydatas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCWorkflowData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCWorkflowData, _impl_.phasedata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCWorkflowData, _impl_.rounddata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCWorkflowData, _impl_.workflowsequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCLocItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCLocItem, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLocItem, _impl_.translation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCLocKeyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCLocKeyData, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLocKeyData, _impl_.loclist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCLocData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCLocData, _impl_.defaultlang_),
  PROTOBUF_FIELD_OFFSET(::message::UGCLocData, _impl_.keylist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCPrefabData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCPrefabData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCPrefabData, _impl_.entityhierachy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomEventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomEventData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCCustomEventData, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCBTreeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCBTreeData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCBTreeData, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.graphdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.workflow_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.logicentitydatas_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.componentrepdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.hudprefabdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.customtypemap_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.modesetting_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.allscenedata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.locdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.resourcedata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.prefabdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.customeventdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameData, _impl_.btreedata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.static_type_id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.pos_z_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.scale_x_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.scale_y_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.scale_z_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.rot_yaw_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.rot_pitch_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.rot_roll_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.levelobject_id_by_tag_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.logic_entity_id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.customized_name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.reset_per_round_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.obj_color_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.surcolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.bordercolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.surtex_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.bortex_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelItemRuntimeData, _impl_.isstatic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelDescData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelDescData, _impl_.gridwidth_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelDescData, _impl_.gridheight_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelDescData, _impl_.gridcenterx_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelDescData, _impl_.gridcenterz_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelDescData, _impl_.gridunit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.isadvancemode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.baseskyenvres_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.lightcolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.lightintensity_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.darkness_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.shadowstrength_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.terrainwetness_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.lensflare_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.fogcolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.ambientcolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelSkyEnvData, _impl_.nightmode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.sublevelname_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.ismainlevel_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.basemapid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.isuseleveldescdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.descinfo_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.objectlist_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.objectattrlist_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.skyenv_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.objecthierachy_),
  PROTOBUF_FIELD_OFFSET(::message::UGCSubLevelResourceData, _impl_.grassresourceuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCTransformNodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCTransformNodeData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCTransformNodeData, _impl_.parentid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCTransformNodeData, _impl_.localposition_),
  PROTOBUF_FIELD_OFFSET(::message::UGCTransformNodeData, _impl_.localscale_),
  PROTOBUF_FIELD_OFFSET(::message::UGCTransformNodeData, _impl_.localrotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCAllSceneRuntimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCAllSceneRuntimeData, _impl_.sublevellist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCMapRuntimeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCMapRuntimeData, _impl_.entities_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapRuntimeData, _impl_.modesetting_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapRuntimeData, _impl_.entityattributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _impl_.id_dir_posy_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _impl_.pos_xz_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _impl_.extra_base_info_free_dir_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _impl_.levelobject_id_by_tag_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _impl_.logic_entity_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _impl_.customized_name_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _impl_.reset_per_round_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditObjectProtoData, _impl_.obj_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityProtoData, _impl_.objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTeleportDoorProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTeleportDoorProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTeleportDoorProtoData, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTeleportDoorProtoData, _impl_.teleport_door_type_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTeleportDoorProtoData, _impl_.target_door_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTeleportDoorProtoData, _impl_.trigger_type_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTeleportDoorProtoData, _impl_.teleport_active_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTeleportDoorProtoData, _impl_.isvalid_teleport_door_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditPianoKeyProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditPianoKeyProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditPianoKeyProtoData, _impl_.key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBuffProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBuffProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBuffProtoData, _impl_.buff_type_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBuffProtoData, _impl_.buff_refresh_time_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.moveconfigid_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.motioneditmode_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.motionvalue_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.motioncustomized_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.motiontype_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.motionvaluex_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.motionvaluey_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.motionvaluez_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.motiontime_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.staytime_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMoveObjectProtoData, _impl_.isreset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditScalableItemProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditScalableItemProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditScalableItemProtoData, _impl_.scalex_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditScalableItemProtoData, _impl_.scaley_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditScalableItemProtoData, _impl_.scalez_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditItemBoxProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditItemBoxProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditItemBoxProtoData, _impl_.dropid_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditItemBoxProtoData, _impl_.customdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxProtoData, _impl_.refreshcount_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxProtoData, _impl_.lootgroups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxGroupProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxGroupProtoData, _impl_.refreshcount_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxGroupProtoData, _impl_.lootitems_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxGroupProtoData, _impl_.marked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxItemProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxItemProtoData, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxItemProtoData, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomItemBoxItemProtoData, _impl_.marked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTriggerProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTriggerProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTriggerProtoData, _impl_.trigger_type_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditTriggerProtoData, _impl_.isshow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditShapeTriggerProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditShapeTriggerProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditShapeTriggerProtoData, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditShapeTriggerProtoData, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBigToyBallProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBigToyBallProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBigToyBallProtoData, _impl_.velocity_xz_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBigToyBallProtoData, _impl_.velocity_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMiniSentryProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMiniSentryProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMiniSentryProtoData, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMiniSentryProtoData, _impl_.defense_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMiniSentryProtoData, _impl_.attack_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMiniSentryProtoData, _impl_.attack_interval_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMiniSentryProtoData, _impl_.attack_range_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditMiniSentryProtoData, _impl_.team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _impl_.count_each_batch_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _impl_.batch_count_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _impl_.batch_interval_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _impl_.bot_config_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _impl_.enable_dead_drop_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _impl_.is_continuous_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _impl_.batch_interval_float_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBotGeneratorProtoData, _impl_.start_gen_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCVendingMachineProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCVendingMachineProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCVendingMachineProtoData, _impl_.binding_shop_entity_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCVendingMachineProtoData, _impl_.trigger_radius_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCVendingMachineProtoData, _impl_.model_show_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCWardrobeProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCWardrobeProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCWardrobeProtoData, _impl_.trigger_radius_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCWardrobeProtoData, _impl_.model_show_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCPointLightProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCPointLightProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCPointLightProtoData, _impl_.intensity_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCPointLightProtoData, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCPointLightProtoData, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCFootballProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCFootballProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCFootballProtoData, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCFootballProtoData, _impl_.friction_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCFootballProtoData, _impl_.friction_rush_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCFootballProtoData, _impl_.shoot_angle_min_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCFootballProtoData, _impl_.high_shoot_angle_min_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCFootballProtoData, _impl_.hide_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCCoinGeneratorProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCCoinGeneratorProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCCoinGeneratorProtoData, _impl_.coint_cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCEntityGeneratorProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCEntityGeneratorProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCEntityGeneratorProtoData, _impl_.count_each_batch_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCEntityGeneratorProtoData, _impl_.batch_count_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCEntityGeneratorProtoData, _impl_.batch_interval_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCEntityGeneratorProtoData, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCEntityGeneratorProtoData, _impl_.batch_interval_float_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCEntityGeneratorProtoData, _impl_.is_continuous_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCEntityGeneratorProtoData, _impl_.start_gen_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCAIProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCAIProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCAIProtoData, _impl_.param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.attack_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.defense_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.can_chase_enemy_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.detect_range_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.attack_range_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.ai_type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.path_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.enable_dead_drop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAIConfigParams, _impl_.injury_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCCustomPathProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCCustomPathProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditUGCCustomPathProtoData, _impl_.control_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.teleport_doors_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.piano_keys_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.buffs_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.move_objects_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.scale_items_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.itemboxs_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.triggers_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.big_toy_balls_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.minisentris_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.custom_paths_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.bot_generators_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.vending_machines_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.ugc_ais_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.entity_generators_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.coin_generators_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.wardrobes_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.spawn_boxs_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.footballs_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.goals_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.oildrums_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.basic_sphere_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.custom_levelobject_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.point_lights_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEntityAttributeProtoData, _impl_.shape_triggers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditModeProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditModeProtoData, _impl_.mode_data_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditModeProtoData, _impl_.general_data_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditModeProtoData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditModeProtoData, _impl_.collision_matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditOildrumData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditOildrumData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditOildrumData, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditOildrumData, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditOildrumData, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBasicSphereProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBasicSphereProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditBasicSphereProtoData, _impl_.radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomLevelObjectProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomLevelObjectProtoData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomLevelObjectProtoData, _impl_.res_uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGoalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGoalData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGoalData, _impl_.team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditSpawnBoxData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditSpawnBoxData, _impl_.extra_base_info_instance_id_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditSpawnBoxData, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditSpawnBoxData, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditSpawnBoxData, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditSpawnBoxData, _impl_.spawn_point_count_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditSpawnBoxData, _impl_.team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.max_hp_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.max_ep_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.start_ep_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.auto_healing_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.receive_damage_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.jump_height_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.limited_ammo_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.enable_active_skill_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.enable_passive_skill_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.global_active_skill_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_transform_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_epchangetohp_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_healingdance_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_graffitimonitor_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_detective_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_epfastandupper_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_adddamagebycosthp_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_spaceshield_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_blowupicewall_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_tempincreasehp_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_addhpandrescure_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_dwshield_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_throwsilence_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_createflightbomb_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_markicewall_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.playerskill_runspeedup_cd_percent_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.unlimited_bullet_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.unlimited_gloowall_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditGeneralProtoData, _impl_.unlimited_throwables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCSModeProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCSModeProtoData, _impl_.end_condition_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCSModeProtoData, _impl_.safe_zone_size_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCSModeProtoData, _impl_.safe_zone_start_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditIntegralModeProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditIntegralModeProtoData, _impl_.end_condition_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditIntegralModeProtoData, _impl_.kill_score_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditIntegralModeProtoData, _impl_.revive_rule_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditIntegralModeProtoData, _impl_.revive_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditPartyModeProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditPartyModeProtoData, _impl_.end_condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomModeProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditCustomModeProtoData, _impl_.variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEndConditionProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEndConditionProtoData, _impl_.time_up_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEndConditionProtoData, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::message::SceneEditEndConditionProtoData, _impl_.cs_rounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCMoveObjectExportExtraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCMoveObjectExportExtraInfo, _impl_.moverootlocpos_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMoveObjectExportExtraInfo, _impl_.moverooloctrot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCheckPointExportExtraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCheckPointExportExtraInfo, _impl_.spawnpointpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCBigToyBallExportExtraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCBigToyBallExportExtraInfo, _impl_.moverange_),
  PROTOBUF_FIELD_OFFSET(::message::UGCBigToyBallExportExtraInfo, _impl_.triggerradius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCMiniSentryExportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCMiniSentryExportInfo, _impl_.anglespeed_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMiniSentryExportInfo, _impl_.angleup_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMiniSentryExportInfo, _impl_.angledown_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMiniSentryExportInfo, _impl_.firepos_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMiniSentryExportInfo, _impl_.fireangle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::ModeVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::ModeVariable, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::ModeVariable, _impl_.boolvalue_),
  PROTOBUF_FIELD_OFFSET(::message::ModeVariable, _impl_.intvalue_),
  PROTOBUF_FIELD_OFFSET(::message::ModeVariable, _impl_.floatvalue_),
  PROTOBUF_FIELD_OFFSET(::message::ModeVariable, _impl_.floatarrvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCBlockEditProjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCBlockEditProjectData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::message::UGCBlockEditProjectData, _impl_.savetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTransformData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTransformData, _impl_.localposition_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTransformData, _impl_.localeulerangles_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTransformData, _impl_.localscale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudRectTransformData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudRectTransformData, _impl_.transform_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudRectTransformData, _impl_.anchorposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.horizontalalignment_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.verticalalignment_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.anchormin_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.anchormax_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.sizedelta_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudWidgetData, _impl_.pivot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.fontsize_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.alignment_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.alignmentvertical_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.font_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.isbold_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.isitalic_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.isunderline_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.linespacing_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.overflow_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLabelData, _impl_.lockey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.spritename_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.spriteflip_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.spritetype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.bordertop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.borderbottom_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.borderleft_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.borderright_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.centerinvisible_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.filldir_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.fillamount_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.invertfill_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.gradient_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.gradienttop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudImageData, _impl_.gradientbottom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.spritename_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.disablecolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.spritetype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.normalcolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.pressedcolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.isfebutton_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.bordertop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.borderbottom_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.borderleft_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudButtonData, _impl_.borderright_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.font_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.fontsize_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.isbold_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.isitalic_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.isunderline_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.alignment_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.alignmentvertical_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.linespacing_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.wordwrap_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.maxlength_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.transitiontype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.normalcolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.pressedcolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.disablecolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudInputData, _impl_.lockey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutData, _impl_.widget_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.panel_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.layouttype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.contentorigin_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.filldirection_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.cellsize_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.space_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.constraint_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.offsetupdown_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.offsetleftright_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGridData, _impl_.constraintcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.layouttype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.contentorigin_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.filldirection_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.cellsize_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.space_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.constraint_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.offsetupdown_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.offsetleftright_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudLayoutNewData, _impl_.constraintcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.bgfill_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.bgname_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.bgcolor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.bgsizedelta_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.clippingtype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.maskname_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.softness_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.anchormin_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.anchormax_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.sizedelta_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.pivot_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPanelData, _impl_.bgalpha_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.panel_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.contentorigin_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.scrolldirection_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.customxy_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.drageffect_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.scrollwheelfactor_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.momentumamount_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.restrictwithinpanel_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.smoothdragstart_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.canceldragiffits_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.verticalbar_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudScrollViewData, _impl_.horizontalbar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHud3DContainerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHud3DContainerData, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHud3DContainerData, _impl_.resourceid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHud3DContainerData, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHud3DContainerData, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.texturename_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.shadername_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.uvrectxy_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.uvrectwh_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.filltype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.borderlr_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.bordertb_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.centerinvisible_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.filldir_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.fillamount_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.invertfill_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.flip_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.gradient_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.gradienttop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudTextureData, _impl_.gradientbottom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudProfileInfoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudProfileInfoData, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudProfileInfoData, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudProfileInfoData, _impl_.showtype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudProfileInfoData, _impl_.showrank_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudProfileInfoData, _impl_.showpin_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudProfileInfoData, _impl_.showname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.actived_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.recttransform_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.widgettype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.widget_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.button_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.layout_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.panel_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.scrollview_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.grid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.layoutnew_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.container3d_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.texture_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectCommonData, _impl_.profileinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectData, _impl_.commondata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectData, _impl_.children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectDataForEditor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectDataForEditor, _impl_.commondata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectDataForEditor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectDataForEditor, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudGameObjectDataForEditor, _impl_.customadapt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabCommonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabCommonData, _impl_.screenwidth_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabCommonData, _impl_.screenheight_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabCommonData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabCommonData, _impl_.transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabData, _impl_.commondata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabData, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabData, _impl_.maxwidgetid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDataForEditor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDataForEditor, _impl_.commondata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDataForEditor, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDataForEditor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDataForEditor, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDataForEditor, _impl_.maxwidgetid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDatas, _impl_.prefabs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDatasForEditor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCHudPrefabDatasForEditor, _impl_.prefabs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectData, _impl_.grapheditorproject_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectData, _impl_.workfloweditorproject_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectData, _impl_.entityeditorproject_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectData, _impl_.hudeditorproject_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectData, _impl_.mapeditorproject_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectData, _impl_.modesettingeditorproject_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectData, _impl_.compatibleversion_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectData, _impl_.publicversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.slotid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.gamename_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.gamedesc_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.gamemode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.groupmode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.teamcount_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.gameresourcecount_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.gametotalcost_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.updatetime_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.workshopbitmap_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.workshopiconmap_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.modesettings_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.runtimedatalength_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.projectdatalength_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.userdataforcensorship_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.compatibleversion_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.runtimedatamd5_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.projectdatamd5_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.modetemplateid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.severity_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.secedit_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.publicversion_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.originalworkshopcode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.gamenamekey_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.gamedesckey_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.locdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.customcover_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.customcoverurl_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.roomparams_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.packagedatamd5_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.openroomlocdatamd5_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.halfwayjoinrule_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.subdesc_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.datastorage_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.leaderboard_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.notify_subscriber_),
  PROTOBUF_FIELD_OFFSET(::message::UGCProjectMetaData, _impl_.statistic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCUserDataForCensorship_BlobOfCustomStrings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCUserDataForCensorship_BlobOfCustomStrings, _impl_.stringlist_),
  PROTOBUF_FIELD_OFFSET(::message::UGCUserDataForCensorship_BlobOfCustomStrings, _impl_.entitytype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCUserDataForCensorship_BlobOfCustomStrings, _impl_.entitytypename_),
  PROTOBUF_FIELD_OFFSET(::message::UGCUserDataForCensorship_BlobOfCustomStrings, _impl_.wordfiltertype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCUserDataForCensorship_BlobOfCustomStrings, _impl_.graphid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCUserDataForCensorship_BlobOfCustomStrings, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCUserDataForCensorship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCUserDataForCensorship, _impl_.customstrings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData_OB35_And_Earlier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData_OB35_And_Earlier, _impl_.entitybindingdatabytes_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData_OB35_And_Earlier, _impl_.runtimedatabytes_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData_OB35_And_Earlier, _impl_.gamename_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData_OB35_And_Earlier, _impl_.gamedesc_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData_OB35_And_Earlier, _impl_.gamemode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData_OB35_And_Earlier, _impl_.groupmode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData_OB35_And_Earlier, _impl_.teamcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData, _impl_.allentitydata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData, _impl_.runtimedatabytes_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData, _impl_.gamename_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData, _impl_.gamedesc_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData, _impl_.gamemode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData, _impl_.groupmode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMapProjectData, _impl_.teamcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorCodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorCodeData, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorCodeData, _impl_.severity_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorCodeData, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorCodeData, _impl_.lockey_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorCodeData, _impl_.consolekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorEntry, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorEntry, _impl_.entitytype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorEntry, _impl_.entityid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorEntry, _impl_.graphid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorEntry, _impl_.sceneedititemtype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorEntry, _impl_.blockid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError_ErrorEntry, _impl_.extraparams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCEditorError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleIntItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleIntItem, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleIntItem, _impl_.labelkey_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleIntItem, _impl_.defaulttext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleFloatItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleFloatItem, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleFloatItem, _impl_.labelkey_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleFloatItem, _impl_.defaulttext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSliderInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSliderInt, _impl_.minvalue_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSliderInt, _impl_.maxvalue_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSliderInt, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSliderFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSliderFloat, _impl_.minvalue_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSliderFloat, _impl_.maxvalue_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSliderFloat, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleChooseInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleChooseInt, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleChooseInt, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleChooseFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleChooseFloat, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamSingleChooseFloat, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamMultiChooseInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamMultiChooseInt, _impl_.indexlist_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamMultiChooseInt, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamData, _impl_.labelkey_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamData, _impl_.defaulttext_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamData, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamData, _impl_.multichooseint_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamData, _impl_.Value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamsSettingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamsSettingData, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamsSettingData, _impl_.loccdnurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamProtoData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamProtoData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamProtoData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamProtoData, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamProtoData, _impl_.listint_),
  PROTOBUF_FIELD_OFFSET(::message::RoomCustomParamProtoData, _impl_.Value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceData, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceContentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceContentData, _impl_.optionalresourcenames_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceContentData, _impl_.urlcache_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceContentData, _impl_.mapids_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceContentData, _impl_.itemids_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceContentData, _impl_.resourcepackageinfo_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceContentData, _impl_.modetemplateid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceContentData, _impl_.notnecessaryresdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceContentData, _impl_.csshareditemid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomCustomParamLocDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomCustomParamLocDatas, _impl_.locdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCDatabaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::message::UGCDatabaseData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCDatabaseData, _impl_.typeid__),
  PROTOBUF_FIELD_OFFSET(::message::UGCDatabaseData, _impl_.listdata_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::message::UGCDatabaseData, _impl_.Value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomHalfWayJoinRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomHalfWayJoinRule, _impl_.recommendstartgamenumber_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomHalfWayJoinRule, _impl_.enablehalfwayjoin_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomHalfWayJoinRule, _impl_.enablehalfwayjoineffecttime_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomHalfWayJoinRule, _impl_.halfwayjoineffecttime_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomHalfWayJoinRule, _impl_.halfwayjoinnumberlimit_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomHalfWayJoinRule, _impl_.halfwayjoinnumber_),
  PROTOBUF_FIELD_OFFSET(::message::UGCRoomHalfWayJoinRule, _impl_.enablehalfwaysubmitmatchstats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationClipEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationClipEvent, _impl_.eventid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationClipEvent, _impl_.eventname_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationClipEvent, _impl_.eventtime_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationClipEvent, _impl_.eventparamlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResEventAnimationClipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResEventAnimationClipData, _impl_.clipname_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResEventAnimationClipData, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResEventAnimationClipData, _impl_.fps_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResEventAnimationClipData, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResEventAnimationClipData, _impl_.animationclipdata_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResEventAnimationClipData, _impl_.animationclipresuuid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::message::UGCDebugSettingData)},
  { 17, -1, -1, sizeof(::message::UGCPhaseData)},
  { 25, -1, -1, sizeof(::message::UGCRoundData)},
  { 34, -1, -1, sizeof(::message::UGCWorkflowSequenceItem)},
  { 42, -1, -1, sizeof(::message::UGCWorkflowSequence)},
  { 49, -1, -1, sizeof(::message::UGCType)},
  { 64, -1, -1, sizeof(::message::UGCTypeTree)},
  { 73, -1, -1, sizeof(::message::UGCTypeComponent)},
  { 81, -1, -1, sizeof(::message::UGCTypeComponentProp)},
  { 90, -1, -1, sizeof(::message::UGCCustomReplicationDataItemForEditor)},
  { 99, -1, -1, sizeof(::message::UGCLogicEntityDataForEditor)},
  { 110, -1, -1, sizeof(::message::UGCCustomReplicationDataForEditor)},
  { 118, -1, -1, sizeof(::message::UGCVarValueData)},
  { 132, -1, -1, sizeof(::message::UGCFuncCallerData)},
  { 144, -1, -1, sizeof(::message::UGCVarDefineData)},
  { 153, -1, -1, sizeof(::message::UGCRuleData)},
  { 161, -1, -1, sizeof(::message::UGCGraphData)},
  { 171, -1, -1, sizeof(::message::UGCCustomReplicationDataItemInstance)},
  { 179, -1, -1, sizeof(::message::UGCLogicEntityData)},
  { 189, -1, -1, sizeof(::message::UGCCustomReplicationDataItem)},
  { 197, -1, -1, sizeof(::message::UGCCustomReplicationData)},
  { 205, -1, -1, sizeof(::message::UGCLevelData)},
  { 217, -1, -1, sizeof(::message::UGCLogicEntityDataV2)},
  { 227, -1, -1, sizeof(::message::UGCLevelDataV2)},
  { 241, -1, -1, sizeof(::message::UGCVersionControlData)},
  { 251, -1, -1, sizeof(::message::UGCMapValue)},
  { 259, -1, -1, sizeof(::message::UGCVarValueDataV2)},
  { 280, -1, -1, sizeof(::message::UGCFuncDefParamData)},
  { 289, -1, -1, sizeof(::message::UGCFuncCallerDataV2)},
  { 303, -1, -1, sizeof(::message::UGCVarDefineDataV2)},
  { 313, -1, -1, sizeof(::message::UGCRuleDataV2)},
  { 321, -1, -1, sizeof(::message::UGCGraphDataV2)},
  { 333, -1, -1, sizeof(::message::UGCCustomReplicationDataItemInstanceV2)},
  { 341, -1, -1, sizeof(::message::UGCLogicEntityDataV3)},
  { 352, -1, -1, sizeof(::message::UGCCustomReplicationDataItemV2)},
  { 363, -1, -1, sizeof(::message::UGCCustomReplicationDataV2)},
  { 371, -1, -1, sizeof(::message::UGCInternalLibrary)},
  { 379, -1, -1, sizeof(::message::UGCWorkflowData)},
  { 388, -1, -1, sizeof(::message::UGCLocItem)},
  { 396, -1, -1, sizeof(::message::UGCLocKeyData)},
  { 404, -1, -1, sizeof(::message::UGCLocData)},
  { 412, -1, -1, sizeof(::message::UGCPrefabData)},
  { 420, -1, -1, sizeof(::message::UGCCustomEventData)},
  { 428, -1, -1, sizeof(::message::UGCBTreeData)},
  { 436, -1, -1, sizeof(::message::UGCGameData)},
  { 455, -1, -1, sizeof(::message::UGCSubLevelItemRuntimeData)},
  { 483, -1, -1, sizeof(::message::UGCSubLevelDescData)},
  { 494, -1, -1, sizeof(::message::UGCSubLevelSkyEnvData)},
  { 511, -1, -1, sizeof(::message::UGCSubLevelResourceData)},
  { 528, -1, -1, sizeof(::message::UGCTransformNodeData)},
  { 539, -1, -1, sizeof(::message::UGCAllSceneRuntimeData)},
  { 546, -1, -1, sizeof(::message::UGCMapRuntimeData)},
  { 555, -1, -1, sizeof(::message::SceneEditObjectProtoData)},
  { 570, -1, -1, sizeof(::message::SceneEditEntityProtoData)},
  { 577, -1, -1, sizeof(::message::SceneEditTeleportDoorProtoData)},
  { 590, -1, -1, sizeof(::message::SceneEditPianoKeyProtoData)},
  { 598, -1, -1, sizeof(::message::SceneEditBuffProtoData)},
  { 607, -1, -1, sizeof(::message::SceneEditMoveObjectProtoData)},
  { 625, -1, -1, sizeof(::message::SceneEditScalableItemProtoData)},
  { 635, -1, -1, sizeof(::message::SceneEditItemBoxProtoData)},
  { 644, -1, -1, sizeof(::message::SceneEditCustomItemBoxProtoData)},
  { 652, -1, -1, sizeof(::message::SceneEditCustomItemBoxGroupProtoData)},
  { 661, -1, -1, sizeof(::message::SceneEditCustomItemBoxItemProtoData)},
  { 670, -1, -1, sizeof(::message::SceneEditTriggerProtoData)},
  { 679, -1, -1, sizeof(::message::SceneEditShapeTriggerProtoData)},
  { 688, -1, -1, sizeof(::message::SceneEditBigToyBallProtoData)},
  { 697, -1, -1, sizeof(::message::SceneEditMiniSentryProtoData)},
  { 710, -1, -1, sizeof(::message::SceneEditBotGeneratorProtoData)},
  { 725, -1, -1, sizeof(::message::SceneEditUGCVendingMachineProtoData)},
  { 735, -1, -1, sizeof(::message::SceneEditUGCWardrobeProtoData)},
  { 744, -1, -1, sizeof(::message::SceneEditUGCPointLightProtoData)},
  { 754, -1, -1, sizeof(::message::SceneEditUGCFootballProtoData)},
  { 767, -1, -1, sizeof(::message::SceneEditUGCCoinGeneratorProtoData)},
  { 775, -1, -1, sizeof(::message::SceneEditUGCEntityGeneratorProtoData)},
  { 789, -1, -1, sizeof(::message::SceneEditUGCAIProtoData)},
  { 797, -1, -1, sizeof(::message::UGCAIConfigParams)},
  { 816, -1, -1, sizeof(::message::SceneEditUGCCustomPathProtoData)},
  { 824, -1, -1, sizeof(::message::SceneEditEntityAttributeProtoData)},
  { 854, -1, -1, sizeof(::message::SceneEditModeProtoData)},
  { 864, -1, -1, sizeof(::message::SceneEditOildrumData)},
  { 874, -1, -1, sizeof(::message::SceneEditBasicSphereProtoData)},
  { 882, -1, -1, sizeof(::message::SceneEditCustomLevelObjectProtoData)},
  { 890, -1, -1, sizeof(::message::SceneEditGoalData)},
  { 898, -1, -1, sizeof(::message::SceneEditSpawnBoxData)},
  { 910, -1, -1, sizeof(::message::SceneEditGeneralProtoData)},
  { 947, -1, -1, sizeof(::message::SceneEditCSModeProtoData)},
  { 956, -1, -1, sizeof(::message::SceneEditIntegralModeProtoData)},
  { 966, -1, -1, sizeof(::message::SceneEditPartyModeProtoData)},
  { 973, -1, -1, sizeof(::message::SceneEditCustomModeProtoData)},
  { 980, -1, -1, sizeof(::message::SceneEditEndConditionProtoData)},
  { 989, -1, -1, sizeof(::message::UGCMoveObjectExportExtraInfo)},
  { 997, -1, -1, sizeof(::message::UGCCheckPointExportExtraInfo)},
  { 1004, -1, -1, sizeof(::message::UGCBigToyBallExportExtraInfo)},
  { 1012, -1, -1, sizeof(::message::UGCMiniSentryExportInfo)},
  { 1023, -1, -1, sizeof(::message::ModeVariable)},
  { 1034, -1, -1, sizeof(::message::UGCBlockEditProjectData)},
  { 1042, -1, -1, sizeof(::message::UGCHudTransformData)},
  { 1051, -1, -1, sizeof(::message::UGCHudRectTransformData)},
  { 1059, -1, -1, sizeof(::message::UGCHudWidgetData)},
  { 1075, -1, -1, sizeof(::message::UGCHudLabelData)},
  { 1093, -1, -1, sizeof(::message::UGCHudImageData)},
  { 1114, -1, -1, sizeof(::message::UGCHudButtonData)},
  { 1131, -1, -1, sizeof(::message::UGCHudInputData)},
  { 1154, -1, -1, sizeof(::message::UGCHudLayoutData)},
  { 1161, -1, -1, sizeof(::message::UGCHudGridData)},
  { 1177, -1, -1, sizeof(::message::UGCHudLayoutNewData)},
  { 1193, -1, -1, sizeof(::message::UGCHudPanelData)},
  { 1214, -1, -1, sizeof(::message::UGCHudScrollViewData)},
  { 1232, -1, -1, sizeof(::message::UGCHud3DContainerData)},
  { 1242, -1, -1, sizeof(::message::UGCHudTextureData)},
  { 1264, -1, -1, sizeof(::message::UGCHudProfileInfoData)},
  { 1276, -1, -1, sizeof(::message::UGCHudGameObjectCommonData)},
  { 1300, -1, -1, sizeof(::message::UGCHudGameObjectData)},
  { 1308, -1, -1, sizeof(::message::UGCHudGameObjectDataForEditor)},
  { 1318, -1, -1, sizeof(::message::UGCHudPrefabCommonData)},
  { 1328, -1, -1, sizeof(::message::UGCHudPrefabData)},
  { 1337, -1, -1, sizeof(::message::UGCHudPrefabDataForEditor)},
  { 1348, -1, -1, sizeof(::message::UGCHudPrefabDatas)},
  { 1355, -1, -1, sizeof(::message::UGCHudPrefabDatasForEditor)},
  { 1362, -1, -1, sizeof(::message::UGCProjectData)},
  { 1376, -1, -1, sizeof(::message::UGCProjectMetaData)},
  { 1421, -1, -1, sizeof(::message::UGCUserDataForCensorship_BlobOfCustomStrings)},
  { 1433, -1, -1, sizeof(::message::UGCUserDataForCensorship)},
  { 1440, -1, -1, sizeof(::message::UGCMapProjectData_OB35_And_Earlier)},
  { 1453, -1, -1, sizeof(::message::UGCMapProjectData)},
  { 1466, -1, -1, sizeof(::message::UGCEditorError_ErrorCodeData)},
  { 1477, -1, -1, sizeof(::message::UGCEditorError_ErrorEntry)},
  { 1490, -1, -1, sizeof(::message::UGCEditorError)},
  { 1496, -1, -1, sizeof(::message::RoomCustomParamSingleIntItem)},
  { 1505, -1, -1, sizeof(::message::RoomCustomParamSingleFloatItem)},
  { 1514, -1, -1, sizeof(::message::RoomCustomParamSliderInt)},
  { 1523, -1, -1, sizeof(::message::RoomCustomParamSliderFloat)},
  { 1532, -1, -1, sizeof(::message::RoomCustomParamSingleChooseInt)},
  { 1540, -1, -1, sizeof(::message::RoomCustomParamSingleChooseFloat)},
  { 1548, -1, -1, sizeof(::message::RoomCustomParamMultiChooseInt)},
  { 1556, -1, -1, sizeof(::message::RoomCustomParamData)},
  { 1573, -1, -1, sizeof(::message::RoomCustomParamsSettingData)},
  { 1581, -1, -1, sizeof(::message::RoomCustomParamProtoData)},
  { 1594, -1, -1, sizeof(::message::UGCResourceData)},
  { 1602, -1, -1, sizeof(::message::UGCResourceContentData)},
  { 1616, -1, -1, sizeof(::message::UGCRoomCustomParamLocDatas)},
  { 1623, -1, -1, sizeof(::message::UGCDatabaseData)},
  { 1640, -1, -1, sizeof(::message::UGCRoomHalfWayJoinRule)},
  { 1653, -1, -1, sizeof(::message::UGCResAnimationClipEvent)},
  { 1663, -1, -1, sizeof(::message::UGCResEventAnimationClipData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::message::_UGCDebugSettingData_default_instance_._instance,
  &::message::_UGCPhaseData_default_instance_._instance,
  &::message::_UGCRoundData_default_instance_._instance,
  &::message::_UGCWorkflowSequenceItem_default_instance_._instance,
  &::message::_UGCWorkflowSequence_default_instance_._instance,
  &::message::_UGCType_default_instance_._instance,
  &::message::_UGCTypeTree_default_instance_._instance,
  &::message::_UGCTypeComponent_default_instance_._instance,
  &::message::_UGCTypeComponentProp_default_instance_._instance,
  &::message::_UGCCustomReplicationDataItemForEditor_default_instance_._instance,
  &::message::_UGCLogicEntityDataForEditor_default_instance_._instance,
  &::message::_UGCCustomReplicationDataForEditor_default_instance_._instance,
  &::message::_UGCVarValueData_default_instance_._instance,
  &::message::_UGCFuncCallerData_default_instance_._instance,
  &::message::_UGCVarDefineData_default_instance_._instance,
  &::message::_UGCRuleData_default_instance_._instance,
  &::message::_UGCGraphData_default_instance_._instance,
  &::message::_UGCCustomReplicationDataItemInstance_default_instance_._instance,
  &::message::_UGCLogicEntityData_default_instance_._instance,
  &::message::_UGCCustomReplicationDataItem_default_instance_._instance,
  &::message::_UGCCustomReplicationData_default_instance_._instance,
  &::message::_UGCLevelData_default_instance_._instance,
  &::message::_UGCLogicEntityDataV2_default_instance_._instance,
  &::message::_UGCLevelDataV2_default_instance_._instance,
  &::message::_UGCVersionControlData_default_instance_._instance,
  &::message::_UGCMapValue_default_instance_._instance,
  &::message::_UGCVarValueDataV2_default_instance_._instance,
  &::message::_UGCFuncDefParamData_default_instance_._instance,
  &::message::_UGCFuncCallerDataV2_default_instance_._instance,
  &::message::_UGCVarDefineDataV2_default_instance_._instance,
  &::message::_UGCRuleDataV2_default_instance_._instance,
  &::message::_UGCGraphDataV2_default_instance_._instance,
  &::message::_UGCCustomReplicationDataItemInstanceV2_default_instance_._instance,
  &::message::_UGCLogicEntityDataV3_default_instance_._instance,
  &::message::_UGCCustomReplicationDataItemV2_default_instance_._instance,
  &::message::_UGCCustomReplicationDataV2_default_instance_._instance,
  &::message::_UGCInternalLibrary_default_instance_._instance,
  &::message::_UGCWorkflowData_default_instance_._instance,
  &::message::_UGCLocItem_default_instance_._instance,
  &::message::_UGCLocKeyData_default_instance_._instance,
  &::message::_UGCLocData_default_instance_._instance,
  &::message::_UGCPrefabData_default_instance_._instance,
  &::message::_UGCCustomEventData_default_instance_._instance,
  &::message::_UGCBTreeData_default_instance_._instance,
  &::message::_UGCGameData_default_instance_._instance,
  &::message::_UGCSubLevelItemRuntimeData_default_instance_._instance,
  &::message::_UGCSubLevelDescData_default_instance_._instance,
  &::message::_UGCSubLevelSkyEnvData_default_instance_._instance,
  &::message::_UGCSubLevelResourceData_default_instance_._instance,
  &::message::_UGCTransformNodeData_default_instance_._instance,
  &::message::_UGCAllSceneRuntimeData_default_instance_._instance,
  &::message::_UGCMapRuntimeData_default_instance_._instance,
  &::message::_SceneEditObjectProtoData_default_instance_._instance,
  &::message::_SceneEditEntityProtoData_default_instance_._instance,
  &::message::_SceneEditTeleportDoorProtoData_default_instance_._instance,
  &::message::_SceneEditPianoKeyProtoData_default_instance_._instance,
  &::message::_SceneEditBuffProtoData_default_instance_._instance,
  &::message::_SceneEditMoveObjectProtoData_default_instance_._instance,
  &::message::_SceneEditScalableItemProtoData_default_instance_._instance,
  &::message::_SceneEditItemBoxProtoData_default_instance_._instance,
  &::message::_SceneEditCustomItemBoxProtoData_default_instance_._instance,
  &::message::_SceneEditCustomItemBoxGroupProtoData_default_instance_._instance,
  &::message::_SceneEditCustomItemBoxItemProtoData_default_instance_._instance,
  &::message::_SceneEditTriggerProtoData_default_instance_._instance,
  &::message::_SceneEditShapeTriggerProtoData_default_instance_._instance,
  &::message::_SceneEditBigToyBallProtoData_default_instance_._instance,
  &::message::_SceneEditMiniSentryProtoData_default_instance_._instance,
  &::message::_SceneEditBotGeneratorProtoData_default_instance_._instance,
  &::message::_SceneEditUGCVendingMachineProtoData_default_instance_._instance,
  &::message::_SceneEditUGCWardrobeProtoData_default_instance_._instance,
  &::message::_SceneEditUGCPointLightProtoData_default_instance_._instance,
  &::message::_SceneEditUGCFootballProtoData_default_instance_._instance,
  &::message::_SceneEditUGCCoinGeneratorProtoData_default_instance_._instance,
  &::message::_SceneEditUGCEntityGeneratorProtoData_default_instance_._instance,
  &::message::_SceneEditUGCAIProtoData_default_instance_._instance,
  &::message::_UGCAIConfigParams_default_instance_._instance,
  &::message::_SceneEditUGCCustomPathProtoData_default_instance_._instance,
  &::message::_SceneEditEntityAttributeProtoData_default_instance_._instance,
  &::message::_SceneEditModeProtoData_default_instance_._instance,
  &::message::_SceneEditOildrumData_default_instance_._instance,
  &::message::_SceneEditBasicSphereProtoData_default_instance_._instance,
  &::message::_SceneEditCustomLevelObjectProtoData_default_instance_._instance,
  &::message::_SceneEditGoalData_default_instance_._instance,
  &::message::_SceneEditSpawnBoxData_default_instance_._instance,
  &::message::_SceneEditGeneralProtoData_default_instance_._instance,
  &::message::_SceneEditCSModeProtoData_default_instance_._instance,
  &::message::_SceneEditIntegralModeProtoData_default_instance_._instance,
  &::message::_SceneEditPartyModeProtoData_default_instance_._instance,
  &::message::_SceneEditCustomModeProtoData_default_instance_._instance,
  &::message::_SceneEditEndConditionProtoData_default_instance_._instance,
  &::message::_UGCMoveObjectExportExtraInfo_default_instance_._instance,
  &::message::_UGCCheckPointExportExtraInfo_default_instance_._instance,
  &::message::_UGCBigToyBallExportExtraInfo_default_instance_._instance,
  &::message::_UGCMiniSentryExportInfo_default_instance_._instance,
  &::message::_ModeVariable_default_instance_._instance,
  &::message::_UGCBlockEditProjectData_default_instance_._instance,
  &::message::_UGCHudTransformData_default_instance_._instance,
  &::message::_UGCHudRectTransformData_default_instance_._instance,
  &::message::_UGCHudWidgetData_default_instance_._instance,
  &::message::_UGCHudLabelData_default_instance_._instance,
  &::message::_UGCHudImageData_default_instance_._instance,
  &::message::_UGCHudButtonData_default_instance_._instance,
  &::message::_UGCHudInputData_default_instance_._instance,
  &::message::_UGCHudLayoutData_default_instance_._instance,
  &::message::_UGCHudGridData_default_instance_._instance,
  &::message::_UGCHudLayoutNewData_default_instance_._instance,
  &::message::_UGCHudPanelData_default_instance_._instance,
  &::message::_UGCHudScrollViewData_default_instance_._instance,
  &::message::_UGCHud3DContainerData_default_instance_._instance,
  &::message::_UGCHudTextureData_default_instance_._instance,
  &::message::_UGCHudProfileInfoData_default_instance_._instance,
  &::message::_UGCHudGameObjectCommonData_default_instance_._instance,
  &::message::_UGCHudGameObjectData_default_instance_._instance,
  &::message::_UGCHudGameObjectDataForEditor_default_instance_._instance,
  &::message::_UGCHudPrefabCommonData_default_instance_._instance,
  &::message::_UGCHudPrefabData_default_instance_._instance,
  &::message::_UGCHudPrefabDataForEditor_default_instance_._instance,
  &::message::_UGCHudPrefabDatas_default_instance_._instance,
  &::message::_UGCHudPrefabDatasForEditor_default_instance_._instance,
  &::message::_UGCProjectData_default_instance_._instance,
  &::message::_UGCProjectMetaData_default_instance_._instance,
  &::message::_UGCUserDataForCensorship_BlobOfCustomStrings_default_instance_._instance,
  &::message::_UGCUserDataForCensorship_default_instance_._instance,
  &::message::_UGCMapProjectData_OB35_And_Earlier_default_instance_._instance,
  &::message::_UGCMapProjectData_default_instance_._instance,
  &::message::_UGCEditorError_ErrorCodeData_default_instance_._instance,
  &::message::_UGCEditorError_ErrorEntry_default_instance_._instance,
  &::message::_UGCEditorError_default_instance_._instance,
  &::message::_RoomCustomParamSingleIntItem_default_instance_._instance,
  &::message::_RoomCustomParamSingleFloatItem_default_instance_._instance,
  &::message::_RoomCustomParamSliderInt_default_instance_._instance,
  &::message::_RoomCustomParamSliderFloat_default_instance_._instance,
  &::message::_RoomCustomParamSingleChooseInt_default_instance_._instance,
  &::message::_RoomCustomParamSingleChooseFloat_default_instance_._instance,
  &::message::_RoomCustomParamMultiChooseInt_default_instance_._instance,
  &::message::_RoomCustomParamData_default_instance_._instance,
  &::message::_RoomCustomParamsSettingData_default_instance_._instance,
  &::message::_RoomCustomParamProtoData_default_instance_._instance,
  &::message::_UGCResourceData_default_instance_._instance,
  &::message::_UGCResourceContentData_default_instance_._instance,
  &::message::_UGCRoomCustomParamLocDatas_default_instance_._instance,
  &::message::_UGCDatabaseData_default_instance_._instance,
  &::message::_UGCRoomHalfWayJoinRule_default_instance_._instance,
  &::message::_UGCResAnimationClipEvent_default_instance_._instance,
  &::message::_UGCResEventAnimationClipData_default_instance_._instance,
};

const char descriptor_table_protodef_ugccommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ugccommon.proto\022\007message\032\025ProtoBuffCom"
  "mon.proto\032\032ProtoBuffUGCResource.proto\"\231\002"
  "\n\023UGCDebugSettingData\022\021\n\tAccountID\030\001 \001(\004"
  "\022\020\n\010GameMode\030\002 \001(\r\022\r\n\005MapID\030\003 \001(\r\022\036\n\026Got"
  "oPositionAfterStart\030\004 \001(\010\022/\n\014GotoPositio"
  "n\030\005 \001(\0132\031.message.ProtoBuffVector3\022\026\n\016Bo"
  "tCountByTeam\030\006 \003(\r\022\020\n\010NickName\030\007 \001(\t\022\023\n\013"
  "Breakpoints\030\010 \003(\t\022\021\n\tGroupMode\030\t \001(\r\022\024\n\014"
  "IsStrictMode\030\n \001(\010\022\025\n\rTokensValidId\030\013 \003("
  "\r\"4\n\014UGCPhaseData\022\022\n\nPhaseIndex\030\001 \001(\r\022\020\n"
  "\010Duration\030\002 \001(\005\"a\n\014UGCRoundData\022\022\n\nPhase"
  "Index\030\001 \001(\r\022\023\n\013RoundNumMax\030\002 \001(\005\022(\n\tPhas"
  "eData\030\003 \003(\0132\025.message.UGCPhaseData\"e\n\027UG"
  "CWorkflowSequenceItem\0227\n\010DataType\030\001 \001(\0162"
  "%.message.EUGCWorkflowSequenceItemType\022\021"
  "\n\tDataIndex\030\002 \001(\005\"F\n\023UGCWorkflowSequence"
  "\022/\n\005Items\030\001 \003(\0132 .message.UGCWorkflowSeq"
  "uenceItem\"\244\001\n\007UGCType\022\017\n\007Declare\030\001 \001(\005\022\023"
  "\n\013BaseTypeIDs\030\002 \003(\005\022\025\n\rAcceptTypeIDs\030\003 \003"
  "(\005\022\n\n\002ID\030\004 \001(\005\022\014\n\004Name\030\005 \001(\t\022\022\n\nGenerics"
  "ID\030\006 \001(\005\022\014\n\004T0ID\030\007 \001(\005\022\022\n\nAttributes\030\010 \001"
  "(\r\022\014\n\004T1ID\030\t \001(\005\"\220\001\n\013UGCTypeTree\022!\n\007Type"
  "Map\030\001 \003(\0132\020.message.UGCType\022/\n\010CmpProps\030"
  "\002 \003(\0132\035.message.UGCTypeComponentProp\022-\n\n"
  "Components\030\003 \003(\0132\031.message.UGCTypeCompon"
  "ent\"-\n\020UGCTypeComponent\022\n\n\002ID\030\001 \001(\005\022\r\n\005P"
  "rops\030\002 \003(\005\"b\n\024UGCTypeComponentProp\022\n\n\002ID"
  "\030\001 \001(\005\022\014\n\004Type\030\002 \001(\005\0220\n\014DefaultValue\030\003 \001"
  "(\0132\032.message.UGCVarValueDataV2\"p\n%UGCCus"
  "tomReplicationDataItemForEditor\022\014\n\004Name\030"
  "\001 \001(\t\022\016\n\006TypeID\030\002 \001(\t\022)\n\005Value\030\003 \001(\0132\032.m"
  "essage.UGCVarValueDataV2\"\243\001\n\033UGCLogicEnt"
  "ityDataForEditor\022\n\n\002ID\030\001 \001(\t\022\014\n\004Type\030\002 \001"
  "(\t\022\020\n\010GraphIDs\030\003 \003(\t\022D\n\013RepDataItem\030\004 \003("
  "\0132/.message.UGCCustomReplicationDataItem"
  "InstanceV2\022\022\n\nEditorType\030\005 \001(\t\"y\n!UGCCus"
  "tomReplicationDataForEditor\022\022\n\nEntityTyp"
  "e\030\001 \001(\t\022@\n\010ItemData\030\002 \003(\0132..message.UGCC"
  "ustomReplicationDataItemForEditor\"\230\002\n\017UG"
  "CVarValueData\022)\n\tValueType\030\001 \001(\0162\026.messa"
  "ge.EUGCValueType\022-\n\tFuncValue\030\002 \001(\0132\032.me"
  "ssage.UGCFuncCallerData\022\021\n\tBoolValue\030\003 \001"
  "(\010\022\020\n\010IntValue\030\004 \001(\005\022\022\n\nFloatValue\030\005 \001(\002"
  "\022\023\n\013StringValue\030\006 \001(\t\022/\n\014Vector3Value\030\007 "
  "\001(\0132\031.message.ProtoBuffVector3\022,\n\nArrayV"
  "alue\030\010 \003(\0132\030.message.UGCVarValueData\"\254\001\n"
  "\021UGCFuncCallerData\022\n\n\002ID\030\001 \001(\t\022\014\n\004Name\030\002"
  " \001(\t\022\014\n\004Type\030\003 \001(\005\022(\n\006Params\030\004 \003(\0132\030.mes"
  "sage.UGCVarValueData\0221\n\rSubCallerData\030\005 "
  "\003(\0132\032.message.UGCFuncCallerData\022\022\n\nUseUp"
  "value\030\006 \001(\010\"U\n\020UGCVarDefineData\022\n\n\002ID\030\001 "
  "\001(\t\022\014\n\004Name\030\002 \001(\t\022\'\n\005Value\030\003 \001(\0132\030.messa"
  "ge.UGCVarValueData\"P\n\013UGCRuleData\022\021\n\tEve"
  "ntType\030\001 \001(\005\022.\n\nCallerData\030\002 \001(\0132\032.messa"
  "ge.UGCFuncCallerData\"\234\001\n\014UGCGraphData\022\n\n"
  "\002ID\030\001 \001(\t\022#\n\005Rules\030\002 \003(\0132\024.message.UGCRu"
  "leData\022,\n\tVariables\030\003 \003(\0132\031.message.UGCV"
  "arDefineData\022-\n\tFunctions\030\004 \003(\0132\032.messag"
  "e.UGCFuncCallerData\"^\n$UGCCustomReplicat"
  "ionDataItemInstance\022\r\n\005Index\030\001 \001(\005\022\'\n\005Va"
  "lue\030\002 \001(\0132\030.message.UGCVarValueData\"\242\001\n\022"
  "UGCLogicEntityData\022\n\n\002ID\030\001 \001(\t\022*\n\004Type\030\002"
  " \001(\0162\034.message.EUGCLogicEntityType\022\020\n\010Gr"
  "aphIDs\030\003 \003(\t\022B\n\013RepDataItem\030\004 \003(\0132-.mess"
  "age.UGCCustomReplicationDataItemInstance"
  "\"U\n\034UGCCustomReplicationDataItem\022\014\n\004Name"
  "\030\001 \001(\t\022\'\n\005Value\030\002 \001(\0132\030.message.UGCVarVa"
  "lueData\"\205\001\n\030UGCCustomReplicationData\0220\n\n"
  "EntityType\030\001 \001(\0162\034.message.EUGCLogicEnti"
  "tyType\0227\n\010ItemData\030\002 \003(\0132%.message.UGCCu"
  "stomReplicationDataItem\"\275\002\n\014UGCLevelData"
  "\022(\n\tGraphData\030\001 \003(\0132\025.message.UGCGraphDa"
  "ta\022*\n\010Workflow\030\002 \001(\0132\030.message.UGCWorkfl"
  "owData\0225\n\020LogicEntityDatas\030\003 \003(\0132\033.messa"
  "ge.UGCLogicEntityData\022@\n\025EntityReplicati"
  "onData\030\004 \003(\0132!.message.UGCCustomReplicat"
  "ionData\022+\n\007MapData\030\005 \001(\0132\032.message.UGCMa"
  "pRuntimeData\0221\n\rHudPrefabData\030\006 \001(\0132\032.me"
  "ssage.UGCHudPrefabDatas\"\210\001\n\024UGCLogicEnti"
  "tyDataV2\022\n\n\002ID\030\001 \001(\t\022\014\n\004Type\030\002 \001(\005\022\020\n\010Gr"
  "aphIDs\030\003 \003(\t\022D\n\013RepDataItem\030\004 \003(\0132/.mess"
  "age.UGCCustomReplicationDataItemInstance"
  "V2\"\262\003\n\016UGCLevelDataV2\022*\n\tGraphData\030\001 \003(\013"
  "2\027.message.UGCGraphDataV2\022*\n\010Workflow\030\002 "
  "\001(\0132\030.message.UGCWorkflowData\0227\n\020LogicEn"
  "tityDatas\030\003 \003(\0132\035.message.UGCLogicEntity"
  "DataV2\022B\n\025EntityReplicationData\030\004 \003(\0132#."
  "message.UGCCustomReplicationDataV2\0221\n\rHu"
  "dPrefabData\030\005 \001(\0132\032.message.UGCHudPrefab"
  "Datas\022+\n\rCustomTypeMap\030\006 \001(\0132\024.message.U"
  "GCTypeTree\0224\n\013ModeSetting\030\007 \001(\0132\037.messag"
  "e.SceneEditModeProtoData\0225\n\014AllSceneData"
  "\030\010 \001(\0132\037.message.UGCAllSceneRuntimeData\""
  "t\n\025UGCVersionControlData\022\031\n\021CompatibleVe"
  "rsion\030\001 \001(\005\022\023\n\013ContentData\030\002 \001(\014\022\025\n\rPubl"
  "icVersion\030\003 \001(\005\022\024\n\014DownloadDesc\030\004 \001(\014\"c\n"
  "\013UGCMapValue\022(\n\004Keys\030\001 \003(\0132\032.message.UGC"
  "VarValueDataV2\022*\n\006Values\030\002 \003(\0132\032.message"
  ".UGCVarValueDataV2\"\362\003\n\021UGCVarValueDataV2"
  "\022\020\n\006IsList\030\001 \001(\010H\000\0221\n\tFuncValue\030\003 \001(\0132\034."
  "message.UGCFuncCallerDataV2H\000\022\023\n\tBoolVal"
  "ue\030\004 \001(\010H\000\022\022\n\010IntValue\030\005 \001(\005H\000\022\024\n\nFloatV"
  "alue\030\006 \001(\002H\000\022\025\n\013StringValue\030\007 \001(\tH\000\0221\n\014V"
  "ector3Value\030\010 \001(\0132\031.message.ProtoBuffVec"
  "tor3H\000\022\030\n\016EntityRefValue\030\t \001(\tH\000\0227\n\017Quat"
  "ernionValue\030\n \001(\0132\034.message.ProtoBuffQua"
  "ternionH\000\0221\n\014Vector2Value\030\013 \001(\0132\031.messag"
  "e.ProtoBuffVector2H\000\022\030\n\016LocStringValue\030\014"
  " \001(\tH\000\022\017\n\005IsMap\030\r \001(\010H\000\022-\n\tListValue\030\002 \003"
  "(\0132\032.message.UGCVarValueDataV2\022&\n\010MapVal"
  "ue\030\016 \001(\0132\024.message.UGCMapValueB\007\n\005Value\""
  "G\n\023UGCFuncDefParamData\022\021\n\tIsUpvalue\030\001 \001("
  "\010\022\014\n\004Type\030\002 \001(\005\022\017\n\007OutType\030\003 \001(\005\"\373\001\n\023UGC"
  "FuncCallerDataV2\022\n\n\002ID\030\001 \001(\t\022\014\n\004Name\030\002 \001"
  "(\t\022\014\n\004Type\030\003 \001(\005\022*\n\006Params\030\004 \003(\0132\032.messa"
  "ge.UGCVarValueDataV2\0223\n\rSubCallerData\030\005 "
  "\003(\0132\034.message.UGCFuncCallerDataV2\022\022\n\nUse"
  "Upvalue\030\006 \001(\010\022\022\n\nParamTypes\030\007 \003(\005\0223\n\rDef"
  "ParamInfos\030\010 \003(\0132\034.message.UGCFuncDefPar"
  "amData\"i\n\022UGCVarDefineDataV2\022\n\n\002ID\030\001 \001(\t"
  "\022\014\n\004Name\030\002 \001(\t\022\016\n\006TypeID\030\003 \001(\005\022)\n\005Value\030"
  "\004 \001(\0132\032.message.UGCVarValueDataV2\"T\n\rUGC"
  "RuleDataV2\022\021\n\tEventType\030\001 \001(\005\0220\n\nCallerD"
  "ata\030\002 \001(\0132\034.message.UGCFuncCallerDataV2\""
  "\303\001\n\016UGCGraphDataV2\022\n\n\002ID\030\001 \001(\t\022%\n\005Rules\030"
  "\002 \003(\0132\026.message.UGCRuleDataV2\022.\n\tVariabl"
  "es\030\003 \003(\0132\033.message.UGCVarDefineDataV2\022/\n"
  "\tFunctions\030\004 \003(\0132\034.message.UGCFuncCaller"
  "DataV2\022\014\n\004Name\030\005 \001(\t\022\017\n\007declare\030\006 \001(\005\"c\n"
  "&UGCCustomReplicationDataItemInstanceV2\022"
  "\016\n\006PropID\030\001 \001(\005\022)\n\005Value\030\002 \001(\0132\032.message"
  ".UGCVarValueDataV2\"\245\001\n\024UGCLogicEntityDat"
  "aV3\022\n\n\002ID\030\001 \001(\t\022\024\n\014ComponentIDs\030\002 \003(\005\022\020\n"
  "\010GraphIDs\030\003 \003(\t\022D\n\013RepDataItem\030\004 \003(\0132/.m"
  "essage.UGCCustomReplicationDataItemInsta"
  "nceV2\022\023\n\013RefPrefabID\030\005 \001(\t\"\214\001\n\036UGCCustom"
  "ReplicationDataItemV2\022\014\n\004Name\030\001 \001(\t\022\016\n\006T"
  "ypeID\030\002 \001(\005\022)\n\005Value\030\003 \001(\0132\032.message.UGC"
  "VarValueDataV2\022\r\n\005Index\030\004 \001(\005\022\022\n\nOnlySer"
  "ver\030\005 \001(\010\"p\n\032UGCCustomReplicationDataV2\022"
  "\027\n\017ComponentTypeID\030\001 \001(\005\0229\n\010ItemData\030\002 \003"
  "(\0132\'.message.UGCCustomReplicationDataIte"
  "mV2\"y\n\022UGCInternalLibrary\022*\n\tGraphData\030\001"
  " \003(\0132\027.message.UGCGraphDataV2\0227\n\020LogicEn"
  "tityDatas\030\002 \003(\0132\035.message.UGCLogicEntity"
  "DataV3\"\235\001\n\017UGCWorkflowData\022(\n\tPhaseData\030"
  "\001 \003(\0132\025.message.UGCPhaseData\022(\n\tRoundDat"
  "a\030\002 \003(\0132\025.message.UGCRoundData\0226\n\020Workfl"
  "owSequence\030\003 \001(\0132\034.message.UGCWorkflowSe"
  "quence\"I\n\nUGCLocItem\022&\n\004Lang\030\001 \001(\0162\030.mes"
  "sage.EUGCLocLanguage\022\023\n\013Translation\030\002 \001("
  "\t\"B\n\rUGCLocKeyData\022\013\n\003Key\030\001 \001(\t\022$\n\007LocLi"
  "st\030\002 \003(\0132\023.message.UGCLocItem\"d\n\nUGCLocD"
  "ata\022-\n\013DefaultLang\030\001 \001(\0162\030.message.EUGCL"
  "ocLanguage\022\'\n\007KeyList\030\002 \003(\0132\026.message.UG"
  "CLocKeyData\"R\n\rUGCPrefabData\022\n\n\002ID\030\001 \001(\t"
  "\0225\n\016EntityHierachy\030\002 \003(\0132\035.message.UGCTr"
  "ansformNodeData\".\n\022UGCCustomEventData\022\n\n"
  "\002ID\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\"(\n\014UGCBTreeData\022"
  "\n\n\002ID\030\001 \001(\t\022\014\n\004Data\030\002 \001(\014\"\214\005\n\013UGCGameDat"
  "a\022*\n\tGraphData\030\001 \003(\0132\027.message.UGCGraphD"
  "ataV2\022*\n\010Workflow\030\002 \001(\0132\030.message.UGCWor"
  "kflowData\0227\n\020LogicEntityDatas\030\003 \003(\0132\035.me"
  "ssage.UGCLogicEntityDataV3\022=\n\020ComponentR"
  "epData\030\004 \003(\0132#.message.UGCCustomReplicat"
  "ionDataV2\0221\n\rHudPrefabData\030\005 \001(\0132\032.messa"
  "ge.UGCHudPrefabDatas\022+\n\rCustomTypeMap\030\006 "
  "\001(\0132\024.message.UGCTypeTree\0224\n\013ModeSetting"
  "\030\007 \001(\0132\037.message.SceneEditModeProtoData\022"
  "5\n\014AllSceneData\030\010 \001(\0132\037.message.UGCAllSc"
  "eneRuntimeData\022$\n\007LocData\030\t \001(\0132\023.messag"
  "e.UGCLocData\022.\n\014ResourceData\030\n \001(\0132\030.mes"
  "sage.UGCResourceData\022*\n\nPrefabData\030\013 \003(\013"
  "2\026.message.UGCPrefabData\0224\n\017CustomEventD"
  "ata\030\014 \003(\0132\033.message.UGCCustomEventData\022("
  "\n\tBTreeData\030\r \003(\0132\025.message.UGCBTreeData"
  "\"\333\003\n\032UGCSubLevelItemRuntimeData\022\026\n\016stati"
  "c_type_id\030\001 \001(\r\022\r\n\005pos_x\030\003 \001(\002\022\r\n\005pos_y\030"
  "\004 \001(\002\022\r\n\005pos_z\030\005 \001(\002\022\017\n\007scale_x\030\006 \001(\002\022\017\n"
  "\007scale_y\030\007 \001(\002\022\017\n\007scale_z\030\010 \001(\002\022\017\n\007rot_y"
  "aw\030\t \001(\002\022\021\n\trot_pitch\030\n \001(\002\022\020\n\010rot_roll\030"
  "\013 \001(\002\022#\n\033extra_base_info_instance_id\030\014 \001"
  "(\r\022\035\n\025levelobject_id_by_tag\030\r \001(\r\022\027\n\017log"
  "ic_entity_id\030\016 \001(\t\022\027\n\017customized_name\030\017 "
  "\001(\t\022\027\n\017reset_per_round\030\020 \001(\r\022\025\n\tobj_colo"
  "r\030\021 \001(\tB\002\030\001\022\020\n\010group_id\030\022 \001(\005\022\020\n\010surColo"
  "r\030\023 \001(\005\022\023\n\013borderColor\030\024 \001(\005\022\016\n\006surTex\030\025"
  " \001(\t\022\016\n\006borTex\030\026 \001(\t\022\020\n\010isStatic\030\027 \001(\010\"x"
  "\n\023UGCSubLevelDescData\022\021\n\tGridWidth\030\001 \001(\002"
  "\022\022\n\nGridHeight\030\002 \001(\002\022\023\n\013GridCenterX\030\003 \001("
  "\002\022\023\n\013GridCenterZ\030\004 \001(\002\022\020\n\010GridUnit\030\005 \001(\002"
  "\"\201\002\n\025UGCSubLevelSkyEnvData\022\025\n\rIsAdvanceM"
  "ode\030\001 \001(\010\022\025\n\rBaseSkyEnvRes\030\002 \001(\t\022\022\n\nLigh"
  "tColor\030\003 \001(\005\022\026\n\016LightIntensity\030\004 \001(\002\022\020\n\010"
  "Darkness\030\005 \001(\002\022\026\n\016ShadowStrength\030\006 \001(\002\022\026"
  "\n\016TerrainWetness\030\007 \001(\002\022\021\n\tLensFlare\030\010 \001("
  "\002\022\020\n\010FogColor\030\t \001(\005\022\024\n\014AmbientColor\030\n \001("
  "\005\022\021\n\tNightMode\030\013 \001(\010\"\260\003\n\027UGCSubLevelReso"
  "urceData\022\024\n\014SubLevelName\030\001 \001(\t\022\014\n\004GUID\030\002"
  " \001(\t\022\023\n\013IsMainLevel\030\003 \001(\010\022\021\n\tBaseMapID\030\004"
  " \001(\r\022\032\n\022IsUseLevelDescData\030\005 \001(\010\022.\n\010Desc"
  "Info\030\006 \001(\0132\034.message.UGCSubLevelDescData"
  "\0227\n\nObjectList\030\007 \003(\0132#.message.UGCSubLev"
  "elItemRuntimeData\022B\n\016ObjectAttrList\030\010 \001("
  "\0132*.message.SceneEditEntityAttributeProt"
  "oData\022.\n\006SkyEnv\030\t \001(\0132\036.message.UGCSubLe"
  "velSkyEnvData\0225\n\016ObjectHierachy\030\n \003(\0132\035."
  "message.UGCTransformNodeData\022\031\n\021GrassRes"
  "ourceUUID\030\013 \001(\t\"\312\001\n\024UGCTransformNodeData"
  "\022\n\n\002ID\030\001 \001(\t\022\020\n\010ParentID\030\002 \001(\t\0220\n\rLocalP"
  "osition\030\003 \001(\0132\031.message.ProtoBuffVector3"
  "\022-\n\nLocalScale\030\004 \001(\0132\031.message.ProtoBuff"
  "Vector3\0223\n\rLocalRotation\030\005 \001(\0132\034.message"
  ".ProtoBuffQuaternion\"P\n\026UGCAllSceneRunti"
  "meData\0226\n\014SubLevelList\030\001 \003(\0132 .message.U"
  "GCSubLevelResourceData\"\304\001\n\021UGCMapRuntime"
  "Data\0223\n\010Entities\030\001 \001(\0132!.message.SceneEd"
  "itEntityProtoData\0224\n\013ModeSetting\030\002 \001(\0132\037"
  ".message.SceneEditModeProtoData\022D\n\020Entit"
  "yAttributes\030\003 \001(\0132*.message.SceneEditEnt"
  "ityAttributeProtoData\"\207\002\n\030SceneEditObjec"
  "tProtoData\022\023\n\013id_dir_posy\030\001 \001(\r\022\016\n\006pos_x"
  "z\030\002 \001(\r\022#\n\033extra_base_info_instance_id\030\003"
  " \001(\r\022 \n\030extra_base_info_free_dir\030\004 \001(\r\022\035"
  "\n\025levelobject_id_by_tag\030\005 \001(\r\022\027\n\017logic_e"
  "ntity_id\030\006 \001(\t\022\027\n\017customized_name\030\007 \001(\t\022"
  "\027\n\017reset_per_round\030\010 \001(\r\022\025\n\tobj_color\030\t "
  "\001(\tB\002\030\001\"N\n\030SceneEditEntityProtoData\0222\n\007o"
  "bjects\030\001 \003(\0132!.message.SceneEditObjectPr"
  "otoData\"\336\001\n\036SceneEditTeleportDoorProtoDa"
  "ta\022#\n\033extra_base_info_instance_id\030\001 \001(\r\022"
  "\020\n\010group_id\030\002 \001(\r\022\032\n\022teleport_door_type\030"
  "\003 \001(\r\022\026\n\016target_door_id\030\004 \001(\r\022\024\n\014trigger"
  "_type\030\005 \001(\r\022\027\n\017teleport_active\030\006 \001(\010\022\"\n\032"
  "isvalid_teleport_door_type\030\007 \001(\010\"Q\n\032Scen"
  "eEditPianoKeyProtoData\022#\n\033extra_base_inf"
  "o_instance_id\030\001 \001(\r\022\016\n\006key_id\030\002 \001(\r\"o\n\026S"
  "ceneEditBuffProtoData\022#\n\033extra_base_info"
  "_instance_id\030\001 \001(\r\022\021\n\tbuff_type\030\002 \001(\r\022\035\n"
  "\025buff_refresh_time_sec\030\003 \001(\r\"\255\002\n\034SceneEd"
  "itMoveObjectProtoData\022#\n\033extra_base_info"
  "_instance_id\030\001 \001(\r\022\024\n\014moveConfigID\030\002 \001(\r"
  "\022\026\n\016motionEditMode\030\003 \001(\010\022\023\n\013motionValue\030"
  "\004 \001(\r\022\030\n\020motionCustomized\030\005 \001(\010\022\022\n\nmotio"
  "nType\030\006 \001(\r\022\024\n\014motionValueX\030\007 \001(\r\022\024\n\014mot"
  "ionValueY\030\010 \001(\r\022\024\n\014motionValueZ\030\t \001(\r\022\022\n"
  "\nmotionTime\030\n \001(\r\022\020\n\010StayTime\030\013 \001(\r\022\017\n\007I"
  "sReset\030\014 \001(\010\"u\n\036SceneEditScalableItemPro"
  "toData\022#\n\033extra_base_info_instance_id\030\001 "
  "\001(\r\022\016\n\006ScaleX\030\002 \001(\r\022\016\n\006ScaleY\030\003 \001(\r\022\016\n\006S"
  "caleZ\030\004 \001(\r\"\216\001\n\031SceneEditItemBoxProtoDat"
  "a\022#\n\033extra_base_info_instance_id\030\001 \001(\r\022\016"
  "\n\006dropid\030\002 \001(\r\022<\n\ncustomData\030\003 \001(\0132(.mes"
  "sage.SceneEditCustomItemBoxProtoData\"z\n\037"
  "SceneEditCustomItemBoxProtoData\022\024\n\014refre"
  "shCount\030\001 \001(\r\022A\n\nlootGroups\030\002 \003(\0132-.mess"
  "age.SceneEditCustomItemBoxGroupProtoData"
  "\"\215\001\n$SceneEditCustomItemBoxGroupProtoDat"
  "a\022\024\n\014refreshCount\030\001 \001(\r\022\?\n\tlootItems\030\002 \003"
  "(\0132,.message.SceneEditCustomItemBoxItemP"
  "rotoData\022\016\n\006marked\030\003 \001(\010\"R\n#SceneEditCus"
  "tomItemBoxItemProtoData\022\016\n\006itemid\030\001 \001(\r\022"
  "\013\n\003num\030\002 \001(\r\022\016\n\006marked\030\003 \001(\010\"f\n\031SceneEdi"
  "tTriggerProtoData\022#\n\033extra_base_info_ins"
  "tance_id\030\001 \001(\r\022\024\n\014trigger_type\030\002 \001(\r\022\016\n\006"
  "isShow\030\003 \001(\010\"e\n\036SceneEditShapeTriggerPro"
  "toData\022#\n\033extra_base_info_instance_id\030\001 "
  "\001(\r\022\016\n\006radius\030\002 \001(\002\022\016\n\006height\030\003 \001(\002\"l\n\034S"
  "ceneEditBigToyBallProtoData\022#\n\033extra_bas"
  "e_info_instance_id\030\001 \001(\r\022\023\n\013velocity_xz\030"
  "\002 \001(\002\022\022\n\nvelocity_y\030\003 \001(\002\"\260\001\n\034SceneEditM"
  "iniSentryProtoData\022#\n\033extra_base_info_in"
  "stance_id\030\001 \001(\r\022\n\n\002hp\030\002 \001(\r\022\017\n\007defense\030\003"
  " \001(\002\022\016\n\006attack\030\004 \001(\r\022\027\n\017attack_interval\030"
  "\005 \001(\002\022\024\n\014attack_range\030\006 \001(\r\022\017\n\007team_id\030\007"
  " \001(\r\"\243\002\n\036SceneEditBotGeneratorProtoData\022"
  "#\n\033extra_base_info_instance_id\030\001 \001(\r\022\030\n\020"
  "count_each_batch\030\002 \001(\r\022\023\n\013batch_count\030\003 "
  "\001(\r\022\026\n\016batch_interval\030\004 \001(\r\022.\n\nbot_confi"
  "g\030\005 \001(\0132\032.message.UGCAIConfigParams\022\030\n\020e"
  "nable_dead_drop\030\006 \001(\r\022\025\n\ris_continuous\030\007"
  " \001(\010\022\034\n\024batch_interval_float\030\010 \001(\002\022\026\n\016st"
  "art_gen_time\030\t \001(\002\"\226\001\n#SceneEditUGCVendi"
  "ngMachineProtoData\022#\n\033extra_base_info_in"
  "stance_id\030\001 \001(\r\022\036\n\026binding_shop_entity_i"
  "d\030\002 \001(\t\022\026\n\016trigger_radius\030\003 \001(\002\022\022\n\nmodel"
  "_show\030\004 \001(\010\"p\n\035SceneEditUGCWardrobeProto"
  "Data\022#\n\033extra_base_info_instance_id\030\001 \001("
  "\r\022\026\n\016trigger_radius\030\002 \001(\002\022\022\n\nmodel_show\030"
  "\003 \001(\010\"w\n\037SceneEditUGCPointLightProtoData"
  "\022#\n\033extra_base_info_instance_id\030\001 \001(\r\022\021\n"
  "\tintensity\030\002 \001(\002\022\r\n\005range\030\003 \001(\002\022\r\n\005color"
  "\030\004 \001(\r\"\307\001\n\035SceneEditUGCFootballProtoData"
  "\022#\n\033extra_base_info_instance_id\030\001 \001(\r\022\016\n"
  "\006radius\030\002 \001(\002\022\020\n\010friction\030\003 \001(\002\022\025\n\rfrict"
  "ion_rush\030\004 \001(\002\022\027\n\017shoot_angle_min\030\005 \001(\002\022"
  "\034\n\024high_shoot_angle_min\030\006 \001(\002\022\021\n\thide_ti"
  "me\030\007 \001(\002\"\\\n\"SceneEditUGCCoinGeneratorPro"
  "toData\022#\n\033extra_base_info_instance_id\030\001 "
  "\001(\r\022\021\n\tcoint_cnt\030\002 \001(\002\"\362\001\n$SceneEditUGCE"
  "ntityGeneratorProtoData\022#\n\033extra_base_in"
  "fo_instance_id\030\001 \001(\r\022\030\n\020count_each_batch"
  "\030\002 \001(\r\022\023\n\013batch_count\030\003 \001(\r\022\026\n\016batch_int"
  "erval\030\004 \001(\r\022\021\n\tentity_id\030\005 \001(\t\022\034\n\024batch_"
  "interval_float\030\006 \001(\002\022\025\n\ris_continuous\030\007 "
  "\001(\010\022\026\n\016start_gen_time\030\010 \001(\002\"i\n\027SceneEdit"
  "UGCAIProtoData\022#\n\033extra_base_info_instan"
  "ce_id\030\001 \001(\r\022)\n\005param\030\002 \001(\0132\032.message.UGC"
  "AIConfigParams\"\232\002\n\021UGCAIConfigParams\022\n\n\002"
  "hp\030\001 \001(\r\022\016\n\006attack\030\002 \001(\r\022\017\n\007defense\030\003 \001("
  "\002\022\022\n\nmove_speed\030\004 \001(\002\022\027\n\017can_chase_enemy"
  "\030\005 \001(\010\022\024\n\014detect_range\030\006 \001(\002\022\024\n\014attack_r"
  "ange\030\007 \001(\002\022\017\n\007team_id\030\010 \001(\r\022\023\n\013action_ty"
  "pe\030\t \001(\r\022\017\n\007ai_type\030\n \001(\r\022\030\n\020path_instan"
  "ce_id\030\013 \001(\r\022\030\n\020enable_dead_drop\030\014 \001(\010\022\024\n"
  "\014injury_scale\030\r \001(\002\"y\n\037SceneEditUGCCusto"
  "mPathProtoData\022#\n\033extra_base_info_instan"
  "ce_id\030\001 \001(\r\0221\n\016control_points\030\002 \003(\0132\031.me"
  "ssage.ProtoBuffVector3\"\311\013\n!SceneEditEnti"
  "tyAttributeProtoData\022\?\n\016teleport_doors\030\001"
  " \003(\0132\'.message.SceneEditTeleportDoorProt"
  "oData\0227\n\npiano_keys\030\002 \003(\0132#.message.Scen"
  "eEditPianoKeyProtoData\022.\n\005buffs\030\003 \003(\0132\037."
  "message.SceneEditBuffProtoData\022;\n\014move_o"
  "bjects\030\004 \003(\0132%.message.SceneEditMoveObje"
  "ctProtoData\022<\n\013scale_items\030\005 \003(\0132\'.messa"
  "ge.SceneEditScalableItemProtoData\0224\n\010ite"
  "mboxs\030\006 \003(\0132\".message.SceneEditItemBoxPr"
  "otoData\0224\n\010triggers\030\007 \003(\0132\".message.Scen"
  "eEditTriggerProtoData\022<\n\rbig_toy_balls\030\010"
  " \003(\0132%.message.SceneEditBigToyBallProtoD"
  "ata\022:\n\013minisentris\030\t \003(\0132%.message.Scene"
  "EditMiniSentryProtoData\022>\n\014custom_paths\030"
  "\n \003(\0132(.message.SceneEditUGCCustomPathPr"
  "otoData\022\?\n\016bot_generators\030\013 \003(\0132\'.messag"
  "e.SceneEditBotGeneratorProtoData\022F\n\020vend"
  "ing_machines\030\014 \003(\0132,.message.SceneEditUG"
  "CVendingMachineProtoData\0221\n\007ugc_ais\030\r \003("
  "\0132 .message.SceneEditUGCAIProtoData\022H\n\021e"
  "ntity_generators\030\016 \003(\0132-.message.SceneEd"
  "itUGCEntityGeneratorProtoData\022D\n\017coin_ge"
  "nerators\030\017 \003(\0132+.message.SceneEditUGCCoi"
  "nGeneratorProtoData\0229\n\twardrobes\030\020 \003(\0132&"
  ".message.SceneEditUGCWardrobeProtoData\0222"
  "\n\nspawn_boxs\030\021 \003(\0132\036.message.SceneEditSp"
  "awnBoxData\0229\n\tfootballs\030\022 \003(\0132&.message."
  "SceneEditUGCFootballProtoData\022)\n\005goals\030\023"
  " \003(\0132\032.message.SceneEditGoalData\022/\n\010oild"
  "rums\030\024 \003(\0132\035.message.SceneEditOildrumDat"
  "a\022<\n\014basic_sphere\030\025 \003(\0132&.message.SceneE"
  "ditBasicSphereProtoData\022H\n\022custom_levelo"
  "bject\030\026 \003(\0132,.message.SceneEditCustomLev"
  "elObjectProtoData\022>\n\014point_lights\030\027 \003(\0132"
  "(.message.SceneEditUGCPointLightProtoDat"
  "a\022\?\n\016shape_triggers\030\030 \003(\0132\'.message.Scen"
  "eEditShapeTriggerProtoData\"\220\001\n\026SceneEdit"
  "ModeProtoData\022\021\n\tmode_data\030\001 \001(\014\0228\n\014gene"
  "ral_data\030\002 \001(\0132\".message.SceneEditGenera"
  "lProtoData\022\017\n\007version\030\003 \001(\r\022\030\n\020collision"
  "_matrix\030\004 \003(\r\"f\n\024SceneEditOildrumData\022#\n"
  "\033extra_base_info_instance_id\030\001 \001(\r\022\n\n\002hp"
  "\030\002 \001(\r\022\r\n\005range\030\003 \001(\002\022\016\n\006damage\030\004 \001(\002\"T\n"
  "\035SceneEditBasicSphereProtoData\022#\n\033extra_"
  "base_info_instance_id\030\001 \001(\r\022\016\n\006radius\030\002 "
  "\001(\002\"\\\n#SceneEditCustomLevelObjectProtoDa"
  "ta\022#\n\033extra_base_info_instance_id\030\001 \001(\r\022"
  "\020\n\010res_uuid\030\002 \001(\t\"I\n\021SceneEditGoalData\022#"
  "\n\033extra_base_info_instance_id\030\001 \001(\r\022\017\n\007t"
  "eam_id\030\002 \001(\r\"\211\001\n\025SceneEditSpawnBoxData\022#"
  "\n\033extra_base_info_instance_id\030\001 \001(\r\022\t\n\001x"
  "\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\022\t\n\001z\030\004 \001(\r\022\031\n\021spawn_po"
  "int_count\030\005 \001(\r\022\017\n\007team_id\030\006 \001(\005\"\327\010\n\031Sce"
  "neEditGeneralProtoData\022\016\n\006max_hp\030\001 \001(\r\022\016"
  "\n\006max_ep\030\002 \001(\r\022\020\n\010start_ep\030\003 \001(\r\022\024\n\014auto"
  "_healing\030\004 \001(\010\022\016\n\006damage\030\005 \001(\r\022\026\n\016receiv"
  "e_damage\030\006 \001(\r\022\022\n\nmove_speed\030\007 \001(\002\022\023\n\013ju"
  "mp_height\030\010 \001(\002\022\024\n\014limited_ammo\030\t \001(\010\022\033\n"
  "\023enable_active_skill\030\n \001(\010\022\034\n\024enable_pas"
  "sive_skill\030\013 \001(\010\022&\n\036global_active_skill_"
  "cd_percent\030\014 \001(\r\022(\n playerskill_transfor"
  "m_cd_percent\030\r \001(\r\022+\n#playerskill_epchan"
  "getohp_cd_percent\030\016 \001(\r\022+\n#playerskill_h"
  "ealingdance_cd_percent\030\017 \001(\r\022.\n&playersk"
  "ill_graffitimonitor_cd_percent\030\020 \001(\r\022(\n "
  "playerskill_detective_cd_percent\030\021 \001(\r\022-"
  "\n%playerskill_epfastandupper_cd_percent\030"
  "\022 \001(\r\0220\n(playerskill_adddamagebycosthp_c"
  "d_percent\030\023 \001(\r\022*\n\"playerskill_spaceshie"
  "ld_cd_percent\030\024 \001(\r\022,\n$playerskill_blowu"
  "picewall_cd_percent\030\025 \001(\r\022-\n%playerskill"
  "_tempincreasehp_cd_percent\030\026 \001(\r\022.\n&play"
  "erskill_addhpandrescure_cd_percent\030\027 \001(\r"
  "\022\'\n\037playerskill_dwshield_cd_percent\030\031 \001("
  "\r\022+\n#playerskill_throwsilence_cd_percent"
  "\030\032 \001(\r\022/\n\'playerskill_createflightbomb_c"
  "d_percent\030\033 \001(\r\022*\n\"playerskill_markicewa"
  "ll_cd_percent\030\034 \001(\r\022)\n!playerskill_runsp"
  "eedup_cd_percent\030\035 \001(\r\022\030\n\020unlimited_bull"
  "et\030\036 \001(\010\022\032\n\022unlimited_gloowall\030\037 \001(\010\022\034\n\024"
  "unlimited_throwables\030  \001(\010\"\220\001\n\030SceneEdit"
  "CSModeProtoData\022>\n\rend_condition\030\001 \001(\0132\'"
  ".message.SceneEditEndConditionProtoData\022"
  "\026\n\016safe_zone_size\030\002 \001(\002\022\034\n\024safe_zone_sta"
  "rt_time\030\003 \001(\r\"\236\001\n\036SceneEditIntegralModeP"
  "rotoData\022>\n\rend_condition\030\001 \001(\0132\'.messag"
  "e.SceneEditEndConditionProtoData\022\022\n\nkill"
  "_score\030\002 \001(\r\022\023\n\013revive_rule\030\003 \001(\r\022\023\n\013rev"
  "ive_time\030\004 \001(\r\"]\n\033SceneEditPartyModeProt"
  "oData\022>\n\rend_condition\030\001 \001(\0132\'.message.S"
  "ceneEditEndConditionProtoData\"H\n\034SceneEd"
  "itCustomModeProtoData\022(\n\tvariables\030\001 \003(\013"
  "2\025.message.ModeVariable\"S\n\036SceneEditEndC"
  "onditionProtoData\022\017\n\007time_up\030\001 \001(\r\022\r\n\005sc"
  "ore\030\002 \001(\r\022\021\n\tcs_rounds\030\003 \001(\r\"\207\001\n\034UGCMove"
  "ObjectExportExtraInfo\0221\n\016MoveRootLocPos\030"
  "\001 \001(\0132\031.message.ProtoBuffVector3\0224\n\016Move"
  "RooLoctRot\030\002 \001(\0132\034.message.ProtoBuffQuat"
  "ernion\"P\n\034UGCCheckPointExportExtraInfo\0220"
  "\n\rspawnPointPos\030\001 \003(\0132\031.message.ProtoBuf"
  "fVector3\"H\n\034UGCBigToyBallExportExtraInfo"
  "\022\021\n\tMoveRange\030\001 \001(\002\022\025\n\rTriggerRadius\030\002 \001"
  "(\002\"\220\001\n\027UGCMiniSentryExportInfo\022\022\n\nAngleS"
  "peed\030\001 \001(\002\022\017\n\007AngleUp\030\002 \001(\002\022\021\n\tAngleDown"
  "\030\003 \001(\002\022*\n\007FirePos\030\004 \001(\0132\031.message.ProtoB"
  "uffVector3\022\021\n\tFireAngle\030\005 \001(\002\"j\n\014ModeVar"
  "iable\022\n\n\002id\030\001 \001(\005\022\021\n\tboolValue\030\002 \001(\010\022\020\n\010"
  "intValue\030\003 \001(\005\022\022\n\nfloatValue\030\004 \001(\002\022\025\n\rfl"
  "oatArrValue\030\005 \003(\002\"9\n\027UGCBlockEditProject"
  "Data\022\014\n\004Data\030\001 \001(\014\022\020\n\010SaveType\030\002 \001(\005\"\253\001\n"
  "\023UGCHudTransformData\0220\n\rLocalPosition\030\001 "
  "\001(\0132\031.message.ProtoBuffVector3\0223\n\020LocalE"
  "ulerAngles\030\002 \001(\0132\031.message.ProtoBuffVect"
  "or3\022-\n\nLocalScale\030\003 \001(\0132\031.message.ProtoB"
  "uffVector3\"}\n\027UGCHudRectTransformData\022/\n"
  "\tTransform\030\001 \001(\0132\034.message.UGCHudTransfo"
  "rmData\0221\n\016AnchorPosition\030\002 \001(\0132\031.message"
  ".ProtoBuffVector3\"\273\002\n\020UGCHudWidgetData\022\r"
  "\n\005Width\030\001 \001(\005\022\016\n\006Height\030\002 \001(\005\022\r\n\005Depth\030\003"
  " \001(\005\022\033\n\023HorizontalAlignment\030\004 \001(\005\022\031\n\021Ver"
  "ticalAlignment\030\005 \001(\005\022\r\n\005Color\030\006 \001(\005\022,\n\tA"
  "nchorMin\030\007 \001(\0132\031.message.ProtoBuffVector"
  "2\022,\n\tAnchorMax\030\010 \001(\0132\031.message.ProtoBuff"
  "Vector2\022,\n\tSizeDelta\030\t \001(\0132\031.message.Pro"
  "toBuffVector2\022(\n\005Pivot\030\n \001(\0132\031.message.P"
  "rotoBuffVector2\"\206\002\n\017UGCHudLabelData\022)\n\006W"
  "idget\030\001 \001(\0132\031.message.UGCHudWidgetData\022\014"
  "\n\004Text\030\002 \001(\t\022\020\n\010FontSize\030\003 \001(\005\022\021\n\tAlignm"
  "ent\030\004 \001(\005\022\031\n\021AlignmentVertical\030\005 \001(\005\022\014\n\004"
  "Font\030\006 \001(\t\022\016\n\006IsBold\030\007 \001(\010\022\020\n\010IsItalic\030\010"
  " \001(\010\022\023\n\013IsUnderline\030\t \001(\010\022\023\n\013LineSpacing"
  "\030\n \001(\002\022\020\n\010Overflow\030\013 \001(\005\022\016\n\006LocKey\030\014 \001(\t"
  "\"\333\002\n\017UGCHudImageData\022)\n\006Widget\030\001 \001(\0132\031.m"
  "essage.UGCHudWidgetData\022\022\n\nSpriteName\030\002 "
  "\001(\t\022\022\n\nSpriteFlip\030\003 \001(\005\022\022\n\nSpriteType\030\004 "
  "\001(\005\022\021\n\tBorderTop\030\005 \001(\005\022\024\n\014BorderBottom\030\006"
  " \001(\005\022\022\n\nBorderLeft\030\007 \001(\005\022\023\n\013BorderRight\030"
  "\010 \001(\005\022\027\n\017CenterInvisible\030\t \001(\010\022\017\n\007FillDi"
  "r\030\n \001(\005\022\022\n\nFillAmount\030\013 \001(\002\022\022\n\nInvertFil"
  "l\030\014 \001(\010\022\020\n\010Gradient\030\r \001(\005\022\023\n\013GradientTop"
  "\030\016 \001(\005\022\026\n\016GradientBottom\030\017 \001(\005\"\214\002\n\020UGCHu"
  "dButtonData\022)\n\006Widget\030\001 \001(\0132\031.message.UG"
  "CHudWidgetData\022\022\n\nSpriteName\030\002 \001(\t\022\024\n\014Di"
  "sableColor\030\003 \001(\005\022\022\n\nSpriteType\030\004 \001(\005\022\023\n\013"
  "NormalColor\030\005 \001(\005\022\024\n\014PressedColor\030\006 \001(\005\022"
  "\022\n\nIsFEButton\030\007 \001(\010\022\021\n\tBorderTop\030\010 \001(\005\022\024"
  "\n\014BorderBottom\030\t \001(\005\022\022\n\nBorderLeft\030\n \001(\005"
  "\022\023\n\013BorderRight\030\013 \001(\005\"\362\002\n\017UGCHudInputDat"
  "a\022)\n\006Widget\030\001 \001(\0132\031.message.UGCHudWidget"
  "Data\022\014\n\004Font\030\002 \001(\t\022\020\n\010FontSize\030\003 \001(\005\022\016\n\006"
  "IsBold\030\004 \001(\010\022\020\n\010IsItalic\030\005 \001(\010\022\023\n\013IsUnde"
  "rline\030\006 \001(\010\022\021\n\tAlignment\030\007 \001(\005\022\031\n\021Alignm"
  "entVertical\030\010 \001(\005\022\023\n\013LineSpacing\030\t \001(\002\022\020"
  "\n\010WordWrap\030\n \001(\005\022\021\n\tMaxLength\030\013 \001(\005\022\014\n\004t"
  "ext\030\014 \001(\t\022\026\n\016TransitionType\030\r \001(\005\022\023\n\013Nor"
  "malColor\030\016 \001(\005\022\024\n\014PressedColor\030\017 \001(\005\022\024\n\014"
  "DisableColor\030\020 \001(\005\022\016\n\006LocKey\030\021 \001(\t\"=\n\020UG"
  "CHudLayoutData\022)\n\006Widget\030\001 \001(\0132\031.message"
  ".UGCHudWidgetData\"\344\002\n\016UGCHudGridData\022\'\n\005"
  "Panel\030\001 \001(\0132\030.message.UGCHudPanelData\022\022\n"
  "\nLayoutType\030\002 \001(\005\022\025\n\rContentOrigin\030\003 \001(\005"
  "\022\025\n\rFillDirection\030\004 \001(\005\022+\n\010CellSize\030\005 \001("
  "\0132\031.message.ProtoBuffVector2\022(\n\005Space\030\006 "
  "\001(\0132\031.message.ProtoBuffVector2\022\022\n\nConstr"
  "aint\030\007 \001(\005\022/\n\014OffsetUpDown\030\010 \001(\0132\031.messa"
  "ge.ProtoBuffVector2\0222\n\017OffsetLeftRight\030\t"
  " \001(\0132\031.message.ProtoBuffVector2\022\027\n\017Const"
  "raintCount\030\n \001(\005\"\353\002\n\023UGCHudLayoutNewData"
  "\022)\n\006Widget\030\001 \001(\0132\031.message.UGCHudWidgetD"
  "ata\022\022\n\nLayoutType\030\002 \001(\005\022\025\n\rContentOrigin"
  "\030\003 \001(\005\022\025\n\rFillDirection\030\004 \001(\005\022+\n\010CellSiz"
  "e\030\005 \001(\0132\031.message.ProtoBuffVector2\022(\n\005Sp"
  "ace\030\006 \001(\0132\031.message.ProtoBuffVector2\022\022\n\n"
  "Constraint\030\007 \001(\005\022/\n\014OffsetUpDown\030\010 \001(\0132\031"
  ".message.ProtoBuffVector2\0222\n\017OffsetLeftR"
  "ight\030\t \001(\0132\031.message.ProtoBuffVector2\022\027\n"
  "\017ConstraintCount\030\n \001(\005\"\272\003\n\017UGCHudPanelDa"
  "ta\022\r\n\005Width\030\001 \001(\005\022\016\n\006Height\030\002 \001(\005\022\r\n\005Dep"
  "th\030\003 \001(\005\022\016\n\006BgFill\030\004 \001(\010\022\016\n\006BgName\030\005 \001(\t"
  "\022\017\n\007BgColor\030\006 \001(\005\022.\n\013BgSizeDelta\030\007 \001(\0132\031"
  ".message.ProtoBuffVector2\022\024\n\014ClippingTyp"
  "e\030\010 \001(\005\022\020\n\010MaskName\030\t \001(\t\022+\n\010Softness\030\n "
  "\001(\0132\031.message.ProtoBuffVector2\022,\n\tAnchor"
  "Min\030\013 \001(\0132\031.message.ProtoBuffVector2\022,\n\t"
  "AnchorMax\030\014 \001(\0132\031.message.ProtoBuffVecto"
  "r2\022,\n\tSizeDelta\030\r \001(\0132\031.message.ProtoBuf"
  "fVector2\022(\n\005Pivot\030\016 \001(\0132\031.message.ProtoB"
  "uffVector2\022\017\n\007BgAlpha\030\017 \001(\002\"\337\002\n\024UGCHudSc"
  "rollViewData\022\'\n\005Panel\030\001 \001(\0132\030.message.UG"
  "CHudPanelData\022\025\n\rContentOrigin\030\002 \001(\005\022\027\n\017"
  "ScrollDirection\030\003 \001(\005\022+\n\010CustomXY\030\004 \001(\0132"
  "\031.message.ProtoBuffVector2\022\022\n\nDragEffect"
  "\030\005 \001(\005\022\031\n\021ScrollWheelFactor\030\006 \001(\002\022\026\n\016Mom"
  "entumAmount\030\007 \001(\002\022\033\n\023RestrictWithinPanel"
  "\030\010 \001(\010\022\027\n\017SmoothDragStart\030\t \001(\010\022\030\n\020Cance"
  "lDragIfFits\030\n \001(\010\022\023\n\013VerticalBar\030\013 \001(\005\022\025"
  "\n\rHorizontalBar\030\014 \001(\005\"\255\001\n\025UGCHud3DContai"
  "nerData\022)\n\006Widget\030\001 \001(\0132\031.message.UGCHud"
  "WidgetData\022\022\n\nResourceID\030\002 \001(\t\022(\n\005Scale\030"
  "\003 \001(\0132\031.message.ProtoBuffVector3\022+\n\010Rota"
  "tion\030\004 \001(\0132\031.message.ProtoBuffVector3\"\314\003"
  "\n\021UGCHudTextureData\022)\n\006Widget\030\001 \001(\0132\031.me"
  "ssage.UGCHudWidgetData\022\023\n\013TextureName\030\002 "
  "\001(\t\022\022\n\nShaderName\030\003 \001(\t\022+\n\010UVRectXY\030\004 \001("
  "\0132\031.message.ProtoBuffVector2\022+\n\010UVRectWH"
  "\030\005 \001(\0132\031.message.ProtoBuffVector2\022\020\n\010Fil"
  "lType\030\006 \001(\005\022+\n\010BorderLR\030\007 \001(\0132\031.message."
  "ProtoBuffVector2\022+\n\010BorderTB\030\010 \001(\0132\031.mes"
  "sage.ProtoBuffVector2\022\027\n\017CenterInvisible"
  "\030\t \001(\010\022\017\n\007FillDir\030\n \001(\005\022\022\n\nFillAmount\030\013 "
  "\001(\002\022\022\n\nInvertFill\030\014 \001(\010\022\014\n\004Flip\030\r \001(\005\022\020\n"
  "\010Gradient\030\016 \001(\005\022\023\n\013GradientTop\030\017 \001(\005\022\026\n\016"
  "GradientBottom\030\020 \001(\005\"\263\001\n\025UGCHudProfileIn"
  "foData\022)\n\006Widget\030\001 \001(\0132\031.message.UGCHudW"
  "idgetData\022(\n\005Scale\030\002 \001(\0132\031.message.Proto"
  "BuffVector3\022\020\n\010ShowType\030\003 \001(\005\022\020\n\010ShowRan"
  "k\030\005 \001(\005\022\017\n\007ShowPin\030\004 \001(\010\022\020\n\010ShowName\030\006 \001"
  "(\010\"\333\005\n\032UGCHudGameObjectCommonData\022\n\n\002ID\030"
  "\001 \001(\r\022\017\n\007Actived\030\002 \001(\010\0227\n\rRectTransform\030"
  "\003 \001(\0132 .message.UGCHudRectTransformData\022"
  "\022\n\nWidgetType\030\004 \001(\r\022)\n\006Widget\030\005 \001(\0132\031.me"
  "ssage.UGCHudWidgetData\022\'\n\005Label\030\006 \001(\0132\030."
  "message.UGCHudLabelData\022\'\n\005Image\030\007 \001(\0132\030"
  ".message.UGCHudImageData\022)\n\006Button\030\010 \001(\013"
  "2\031.message.UGCHudButtonData\022\'\n\005Input\030\t \001"
  "(\0132\030.message.UGCHudInputData\022)\n\006Layout\030\n"
  " \001(\0132\031.message.UGCHudLayoutData\022\014\n\004Name\030"
  "\013 \001(\t\022\'\n\005Panel\030\014 \001(\0132\030.message.UGCHudPan"
  "elData\0221\n\nScrollView\030\r \001(\0132\035.message.UGC"
  "HudScrollViewData\022%\n\004Grid\030\016 \001(\0132\027.messag"
  "e.UGCHudGridData\022/\n\tLayoutNew\030\017 \001(\0132\034.me"
  "ssage.UGCHudLayoutNewData\0223\n\013Container3D"
  "\030\020 \001(\0132\036.message.UGCHud3DContainerData\022+"
  "\n\007Texture\030\021 \001(\0132\032.message.UGCHudTextureD"
  "ata\0223\n\013ProfileInfo\030\022 \001(\0132\036.message.UGCHu"
  "dProfileInfoData\"\200\001\n\024UGCHudGameObjectDat"
  "a\0227\n\nCommonData\030\001 \001(\0132#.message.UGCHudGa"
  "meObjectCommonData\022/\n\010Children\030\002 \003(\0132\035.m"
  "essage.UGCHudGameObjectData\"\265\001\n\035UGCHudGa"
  "meObjectDataForEditor\0227\n\nCommonData\030\001 \001("
  "\0132#.message.UGCHudGameObjectCommonData\022\014"
  "\n\004Name\030\002 \001(\t\0228\n\010Children\030\003 \003(\0132&.message"
  ".UGCHudGameObjectDataForEditor\022\023\n\013Custom"
  "Adapt\030\004 \001(\010\"\200\001\n\026UGCHudPrefabCommonData\022\023"
  "\n\013ScreenWidth\030\001 \001(\005\022\024\n\014ScreenHeight\030\002 \001("
  "\005\022\n\n\002ID\030\003 \001(\r\022/\n\tTransform\030\004 \001(\0132\034.messa"
  "ge.UGCHudTransformData\"\215\001\n\020UGCHudPrefabD"
  "ata\0223\n\nCommonData\030\001 \001(\0132\037.message.UGCHud"
  "PrefabCommonData\022/\n\010Children\030\002 \003(\0132\035.mes"
  "sage.UGCHudGameObjectData\022\023\n\013MaxWidgetID"
  "\030\003 \001(\r\"\274\001\n\031UGCHudPrefabDataForEditor\0223\n\n"
  "CommonData\030\001 \001(\0132\037.message.UGCHudPrefabC"
  "ommonData\0228\n\010Children\030\002 \003(\0132&.message.UG"
  "CHudGameObjectDataForEditor\022\014\n\004Name\030\003 \001("
  "\t\022\r\n\005Index\030\004 \001(\r\022\023\n\013MaxWidgetID\030\005 \001(\r\"\?\n"
  "\021UGCHudPrefabDatas\022*\n\007Prefabs\030\001 \003(\0132\031.me"
  "ssage.UGCHudPrefabData\"Q\n\032UGCHudPrefabDa"
  "tasForEditor\0223\n\007Prefabs\030\001 \003(\0132\".message."
  "UGCHudPrefabDataForEditor\"\217\002\n\016UGCProject"
  "Data\022\032\n\022GraphEditorProject\030\001 \001(\014\022\035\n\025Work"
  "flowEditorProject\030\002 \001(\014\022\033\n\023EntityEditorP"
  "roject\030\003 \001(\014\022\030\n\020HudEditorProject\030\004 \001(\014\022\030"
  "\n\020MapEditorProject\030\005 \001(\014\022 \n\030ModeSettingE"
  "ditorProject\030\006 \001(\014\0227\n\021CompatibleVersion\030"
  "\347\007 \001(\0162\033.message.EUGCProjectVersion\022\026\n\rP"
  "ublicVersion\030\350\007 \001(\005\"\252\010\n\022UGCProjectMetaDa"
  "ta\022\016\n\006SlotID\030\001 \001(\r\022\020\n\010GameName\030\002 \001(\t\022\020\n\010"
  "GameDesc\030\003 \001(\t\022\020\n\010GameMode\030\004 \001(\r\022\021\n\tGrou"
  "pMode\030\005 \001(\r\022\021\n\tTeamCount\030\006 \001(\r\022\031\n\021GameRe"
  "sourceCount\030\007 \001(\004\022\025\n\rGameTotalCost\030\010 \001(\004"
  "\022\022\n\nUpdateTime\030\t \001(\004\022\014\n\004Tags\030\n \003(\r\022\026\n\016Wo"
  "rkshopBitMap\030\013 \001(\014\022\027\n\017WorkshopIconMap\030\014 "
  "\001(\014\0225\n\014ModeSettings\030\r \001(\0132\037.message.Scen"
  "eEditModeProtoData\022\031\n\021RuntimeDataLength\030"
  "\016 \001(\004\022\031\n\021ProjectDataLength\030\017 \001(\004\022@\n\025User"
  "DataForCensorship\030\020 \001(\0132!.message.UGCUse"
  "rDataForCensorship\022\r\n\005MapID\030\021 \001(\r\0226\n\021Com"
  "patibleVersion\030\022 \001(\0162\033.message.EUGCProje"
  "ctVersion\022\026\n\016RuntimeDataMD5\030\023 \001(\014\022\026\n\016Pro"
  "jectDataMD5\030\024 \001(\014\022\026\n\016ModeTemplateId\030\025 \001("
  "\r\0227\n\010Severity\030\026 \001(\0162%.message.UGCEditorE"
  "rror.ErrorSeverity\022\017\n\007SecEdit\030\027 \001(\010\022\025\n\rP"
  "ublicVersion\030\030 \001(\005\022\034\n\024OriginalWorkshopCo"
  "de\030\031 \001(\t\022\023\n\013GameNameKey\030\032 \001(\t\022\023\n\013GameDes"
  "cKey\030\033 \001(\t\022$\n\007LocData\030\034 \003(\0132\023.message.UG"
  "CLocData\022\023\n\013CustomCover\030\035 \001(\014\022\026\n\016CustomC"
  "overUrl\030\036 \001(\t\022\022\n\nRoomParams\030\037 \001(\014\022\026\n\016Pac"
  "kageDataMD5\030  \001(\014\022\032\n\022OpenRoomLocDataMD5\030"
  "! \001(\014\0228\n\017halfWayJoinRule\030\" \001(\0132\037.message"
  ".UGCRoomHalfWayJoinRule\022\017\n\007SubDesc\030# \001(\t"
  "\022\023\n\013DataStorage\030$ \003(\014\022\023\n\013LeaderBoard\030% \003"
  "(\014\022\031\n\021notify_subscriber\030& \001(\010\022\021\n\tStatist"
  "ic\030\' \003(\014\"\365\001\n\030UGCUserDataForCensorship\022L\n"
  "\rCustomStrings\030\001 \003(\01325.message.UGCUserDa"
  "taForCensorship.BlobOfCustomStrings\032\212\001\n\023"
  "BlobOfCustomStrings\022\022\n\nStringList\030\001 \003(\t\022"
  "\022\n\nEntityType\030\002 \001(\r\022\026\n\016EntityTypeName\030\003 "
  "\001(\t\022\026\n\016WordFilterType\030\004 \001(\r\022\017\n\007GraphID\030\005"
  " \001(\t\022\n\n\002ID\030\006 \001(\t\"\272\001\n\"UGCMapProjectData_O"
  "B35_And_Earlier\022\036\n\026EntityBindingDataByte"
  "s\030\001 \001(\014\022\030\n\020RuntimeDataBytes\030\002 \001(\014\022\020\n\010Gam"
  "eName\030\003 \001(\t\022\020\n\010GameDesc\030\004 \001(\t\022\020\n\010GameMod"
  "e\030\005 \001(\r\022\021\n\tGroupMode\030\006 \001(\r\022\021\n\tTeamCount\030"
  "\007 \001(\r\"\306\001\n\021UGCMapProjectData\022;\n\rAllEntity"
  "Data\030\001 \003(\0132$.message.UGCLogicEntityDataF"
  "orEditor\022\030\n\020RuntimeDataBytes\030\002 \001(\014\022\020\n\010Ga"
  "meName\030\003 \001(\t\022\020\n\010GameDesc\030\004 \001(\t\022\020\n\010GameMo"
  "de\030\005 \001(\r\022\021\n\tGroupMode\030\006 \001(\r\022\021\n\tTeamCount"
  "\030\007 \001(\r\"\311\013\n\016UGCEditorError\032\264\001\n\rErrorCodeD"
  "ata\0224\n\tErrorCode\030\001 \001(\0162!.message.UGCEdit"
  "orError.ErrorCode\0227\n\010Severity\030\002 \001(\0162%.me"
  "ssage.UGCEditorError.ErrorSeverity\022\020\n\010Pr"
  "iority\030\003 \001(\r\022\016\n\006LocKey\030\004 \001(\t\022\022\n\nConsoleK"
  "EY\030\005 \001(\t\032\272\001\n\nErrorEntry\0224\n\tErrorCode\030\001 \001"
  "(\0162!.message.UGCEditorError.ErrorCode\022\022\n"
  "\nEntityType\030\002 \001(\t\022\020\n\010EntityID\030\003 \001(\t\022\017\n\007G"
  "raphID\030\004 \001(\t\022\031\n\021SceneEditItemType\030\005 \001(\r\022"
  "\017\n\007BlockID\030\006 \001(\t\022\023\n\013ExtraParams\030\007 \003(\t\"\314\007"
  "\n\tErrorCode\022\025\n\021ErrorCode_Unknown\020\000\022\"\n\033Er"
  "rorCode_Reserved_MaxValue\020\200\302\327/\022,\n%ErrorC"
  "ode_Map_InsufficientSpawnPoints\020\201\302\327/\022-\n&"
  "ErrorCode_Map_InsufficientTargetPoints\020\202"
  "\302\327/\022.\n\'ErrorCode_Map_InsufficientMustMod"
  "eItems\020\203\302\327/\022$\n\035ErrorCode_Map_CostExceedL"
  "imit\020\204\302\327/\022&\n\037ErrorCode_Map_ObjectExceedL"
  "imit\020\205\302\327/\0226\n/ErrorCode_Map_InsufficientA"
  "llTeamSpawnPointsNum\020\206\302\327/\0226\n/ErrorCode_M"
  "ap_InsufficientSingleTeamSpawnPoints\020\207\302\327"
  "/\0229\n2ErrorCode_Map_InsufficientSingleTea"
  "mSpawnPointsNum\020\210\302\327/\022\'\n ErrorCode_Graph_"
  "MissingReference\020\301\334\343/\022#\n\034ErrorCode_Graph"
  "_TypeMismatch\020\302\334\343/\022)\n\"ErrorCode_Graph_Va"
  "riableOutOfScope\020\303\334\343/\022\"\n\033ErrorCode_Graph"
  "_ExceedLimit\020\304\334\343/\022\'\n ErrorCode_Graph_Ret"
  "urnOutOfScope\020\305\334\343/\0223\n,ErrorCode_Graph_Re"
  "turnWithoutValueOutOfScope\020\306\334\343/\0220\n)Error"
  "Code_Graph_ReturnWithValueOutOfScope\020\307\334\343"
  "/\022#\n\034ErrorCode_Graph_InvalidEvent\020\310\334\343/\022)"
  "\n\"ErrorCode_Graph_ForbbidenEmptySlot\020\311\334\343"
  "/\022-\n&ErrorCode_Graph_EntityPropertyObsol"
  "ete\020\312\334\343/\022)\n\"ErrorCode_Hud_InterfaceExcee"
  "dLimit\020\341\351\351/\022\'\n ErrorCode_Hud_ControlExce"
  "edLimit\020\342\351\351/\"t\n\rErrorSeverity\022\026\n\022ErrorSe"
  "verity_None\020\000\022\027\n\023ErrorSeverity_Panic\020\001\022\027"
  "\n\023ErrorSeverity_Error\020\002\022\031\n\025ErrorSeverity"
  "_Warning\020\003\"T\n\034RoomCustomParamSingleIntIt"
  "em\022\r\n\005Value\030\001 \001(\005\022\020\n\010LabelKey\030\002 \001(\t\022\023\n\013D"
  "efaultText\030\003 \001(\t\"V\n\036RoomCustomParamSingl"
  "eFloatItem\022\r\n\005Value\030\001 \001(\002\022\020\n\010LabelKey\030\002 "
  "\001(\t\022\023\n\013DefaultText\030\003 \001(\t\"M\n\030RoomCustomPa"
  "ramSliderInt\022\020\n\010MinValue\030\001 \001(\005\022\020\n\010MaxVal"
  "ue\030\002 \001(\005\022\r\n\005Value\030\003 \001(\005\"O\n\032RoomCustomPar"
  "amSliderFloat\022\020\n\010MinValue\030\001 \001(\002\022\020\n\010MaxVa"
  "lue\030\002 \001(\002\022\r\n\005Value\030\003 \001(\002\"e\n\036RoomCustomPa"
  "ramSingleChooseInt\022\r\n\005Index\030\001 \001(\005\0224\n\005ite"
  "ms\030\002 \003(\0132%.message.RoomCustomParamSingle"
  "IntItem\"i\n RoomCustomParamSingleChooseFl"
  "oat\022\r\n\005Index\030\001 \001(\005\0226\n\005items\030\002 \003(\0132\'.mess"
  "age.RoomCustomParamSingleFloatItem\"h\n\035Ro"
  "omCustomParamMultiChooseInt\022\021\n\tIndexList"
  "\030\001 \003(\005\0224\n\005items\030\002 \003(\0132%.message.RoomCust"
  "omParamSingleIntItem\"\327\003\n\023RoomCustomParam"
  "Data\022\n\n\002ID\030\001 \001(\005\022\020\n\010LabelKey\030\002 \001(\t\022\023\n\013De"
  "faultText\030\003 \001(\t\022/\n\004Type\030\004 \001(\0162!.message."
  "RoomCustomParamsDataType\022\023\n\tBoolValue\030\005 "
  "\001(\010H\000\0226\n\tSliderInt\030\007 \001(\0132!.message.RoomC"
  "ustomParamSliderIntH\000\022:\n\013SliderFloat\030\010 \001"
  "(\0132#.message.RoomCustomParamSliderFloatH"
  "\000\022B\n\017SingleChooseInt\030\t \001(\0132\'.message.Roo"
  "mCustomParamSingleChooseIntH\000\022F\n\021SingleC"
  "hooseFloat\030\n \001(\0132).message.RoomCustomPar"
  "amSingleChooseFloatH\000\022>\n\016MultiChooseInt\030"
  "\006 \001(\0132&.message.RoomCustomParamMultiChoo"
  "seIntB\007\n\005Value\"^\n\033RoomCustomParamsSettin"
  "gData\022,\n\006Params\030\001 \003(\0132\034.message.RoomCust"
  "omParamData\022\021\n\tLocCDNURL\030\002 \001(\t\"\260\001\n\030RoomC"
  "ustomParamProtoData\022\n\n\002ID\030\001 \001(\005\022/\n\004Type\030"
  "\002 \001(\0162!.message.RoomCustomParamsDataType"
  "\022\023\n\tBoolValue\030\003 \001(\010H\000\022\022\n\010IntValue\030\005 \001(\005H"
  "\000\022\024\n\nFloatValue\030\006 \001(\002H\000\022\017\n\007ListInt\030\004 \003(\005"
  "B\007\n\005Value\"\311\001\n\017UGCResourceData\022@\n\007Version"
  "\030\001 \001(\0162/.message.UGCResourceData.UGCReso"
  "urceDataVersion\022\017\n\007Content\030\002 \001(\014\"c\n\026UGCR"
  "esourceDataVersion\022&\n\"UGCResourceMetaDat"
  "aVersion_Unknown\020\000\022!\n\035UGCResourceMetaDat"
  "aVersion_V1\020\001\"\236\002\n\026UGCResourceContentData"
  "\022\035\n\025OptionalResourceNames\030\001 \003(\t\022\020\n\010UrlCa"
  "che\030\002 \001(\t\022\016\n\006MapIds\030\003 \003(\r\022\017\n\007ItemIds\030\004 \003"
  "(\r\022D\n\023ResourcePackageInfo\030\005 \001(\0132\'.messag"
  "e.UGCGameDataResourcePackageInfo\022\026\n\016Mode"
  "TemplateId\030\006 \001(\005\022<\n\023NotNecessaryResData\030"
  "\007 \001(\0132\037.message.UGCResourceContentData\022\026"
  "\n\016CSSharedItemID\030\010 \003(\r\"B\n\032UGCRoomCustomP"
  "aramLocDatas\022$\n\007LocData\030\001 \003(\0132\023.message."
  "UGCLocData\"\372\002\n\017UGCDatabaseData\022\016\n\006TypeID"
  "\030\001 \001(\005\022*\n\010ListData\030\002 \003(\0132\030.message.UGCDa"
  "tabaseData\022\023\n\tBoolValue\030\003 \001(\010H\000\022\022\n\010IntVa"
  "lue\030\004 \001(\005H\000\022\024\n\nFloatValue\030\005 \001(\002H\000\022\025\n\013Str"
  "ingValue\030\006 \001(\tH\000\0221\n\014Vector2Value\030\007 \001(\0132\031"
  ".message.ProtoBuffVector2H\000\0221\n\014Vector3Va"
  "lue\030\010 \001(\0132\031.message.ProtoBuffVector3H\000\0227"
  "\n\017QuaternionValue\030\t \001(\0132\034.message.ProtoB"
  "uffQuaternionH\000\022-\n\nColorValue\030\n \001(\0132\027.me"
  "ssage.ProtoBuffColorH\000B\007\n\005Value\"\373\001\n\026UGCR"
  "oomHalfWayJoinRule\022 \n\030RecommendStartGame"
  "Number\030\001 \001(\005\022\031\n\021EnableHalfWayJoin\030\002 \001(\010\022"
  "#\n\033EnableHalfWayJoinEffectTime\030\003 \001(\010\022\035\n\025"
  "HalfWayJoinEffectTime\030\004 \001(\005\022\036\n\026HalfWayJo"
  "inNumberLimit\030\005 \001(\010\022\031\n\021HalfWayJoinNumber"
  "\030\006 \001(\005\022%\n\035EnableHalfwaySubmitMatchStats\030"
  "\007 \001(\010\"\205\001\n\030UGCResAnimationClipEvent\022\017\n\007Ev"
  "entID\030\001 \001(\005\022\021\n\tEventName\030\002 \001(\t\022\021\n\tEventT"
  "ime\030\003 \001(\002\0222\n\016EventParamList\030\004 \001(\0132\032.mess"
  "age.UGCVarValueDataV2\"\271\001\n\034UGCResEventAni"
  "mationClipData\022\020\n\010ClipName\030\001 \001(\t\022\016\n\006Leng"
  "th\030\002 \001(\002\022\013\n\003FPS\030\003 \001(\002\0221\n\006Events\030\004 \003(\0132!."
  "message.UGCResAnimationClipEvent\022\031\n\021Anim"
  "ationClipData\030\005 \001(\014\022\034\n\024AnimationClipResU"
  "UID\030\006 \001(\t*\266\t\n\016EUGCModuleType\022\032\n\026EUGCModu"
  "leType_Unknown\020\000\022\033\n\027EUGCModuleType_Workf"
  "low\020\001\022&\n\"EUGCModuleType_ConditionBlackbo"
  "ard\020\002\022\"\n\036EUGCModuleType_RoundBlackboard\020"
  "\003\022\037\n\033EUGCModuleType_FactionRound\020\004\022\"\n\036EU"
  "GCModuleType_ScoreBlackboard\020\005\022\036\n\032EUGCMo"
  "duleType_SpawnPosMgr\020\006\022!\n\035EUGCModuleType"
  "_RankBlackboard\020\007\022\036\n\032EUGCModuleType_HudS"
  "tateMgr\020\010\022\033\n\027EUGCModuleType_SafeZone\020\t\022&"
  "\n\"EUGCModuleType_GenerateSpawnPosMgr\020\n\022*"
  "\n&EUGCModuleType_EntityRepDataBlackboard"
  "\020\013\022\035\n\031EUGCModuleType_CheckPoint\020\r\022\027\n\023EUG"
  "CModuleType_Team\020\016\022\036\n\032EUGCModuleType_Mat"
  "chResult\020\017\022\037\n\033EUGCModuleType_HudPrefabMg"
  "r\020\020\022$\n EUGCModuleType_StatisticalReport\020"
  "\021\022%\n!EUGCModuleType_PropertyFormulaMgr\020\022"
  "\022\032\n\026EUGCModuleType_ShopMgr\020\023\022\037\n\033EUGCModu"
  "leType_WalletModule\020\024\022!\n\035EUGCModuleType_"
  "LevelObjectMgr\020\025\022\033\n\027EUGCModuleType_Morph"
  "Mgr\020\026\022\036\n\032EUGCModuleType_ArchTypeMgr\020\027\022!\n"
  "\035EUGCModuleType_ChatChannelMgr\020\030\022\032\n\026EUGC"
  "ModuleType_Faction\020\031\022\034\n\030EUGCModuleType_H"
  "ostility\020\032\022\026\n\022EUGCModuleType_KDA\020\033\022\034\n\030EU"
  "GCModuleType_Transform\020\034\022\033\n\027EUGCModuleTy"
  "pe_Playable\020\035\022\034\n\030EUGCModuleTyppe_Databas"
  "e\020\036\022\"\n\036EUGCModuleTyppe_InternalHudMgr\020\037\022"
  "\031\n\025EUGCModuleType_Dyeing\020 \022\032\n\026EUGCModule"
  "Type_Physics\020!\022\032\n\026EUGCModuleType_MiniMap"
  "\020\"\022\034\n\030EUGCModuleType_Animation\020#\022 \n\034EUGC"
  "ModuleType_BehaviourTree\020$\022\036\n\032EUGCModule"
  "Type_PathFinding\020%*z\n\016EUGCDamageType\022\032\n\026"
  "EUGCDamageType_Unknown\020\000\022\030\n\024EUGCDamageTy"
  "pe_Melee\020\001\022\026\n\022EUGCDamageType_Gun\020\002\022\032\n\026EU"
  "GCDamageType_Grenade\020\003*\346\003\n\rEUGCScoreType"
  "\022\031\n\025EUGCScoreType_Unknown\020\000\022\034\n\030EUGCScore"
  "Type_Kill_Count\020\001\022\037\n\033EUGCScoreType_Damag"
  "e_Amount\020\002\022\036\n\032EUGCScoreType_Assist_Count"
  "\020\003\022\036\n\032EUGCScoreType_Finish_Order\020\004\022\"\n\036EU"
  "GCScoreType_Finish_TimeScore\020\005\022\036\n\032EUGCSc"
  "oreType_Finish_Count\020\006\022#\n\037EUGCScoreType_"
  "Checkpoint_Amount\020\007\022\033\n\027EUGCScoreType_Ran"
  "kScore\020\010\022$\n EUGCScoreType_Survival_TimeS"
  "core\020\t\022\033\n\027EUGCScoreType_MainScore\020\n\022#\n\037E"
  "UGCScoreType_Zombie_Kill_Count\020\013\022%\n!EUGC"
  "ScoreType_Zombie_Assist_Count\020\014\022&\n\"EUGCS"
  "coreType_Zombie_Damage_Amount\020\r*\226\001\n\023EUGC"
  "PlayerStateType\022\037\n\033EUGCPlayerStateType_U"
  "nknown\020\000\022\035\n\031EUGCPlayerStateType_Alive\020\001\022"
  "!\n\035EUGCPlayerStateType_KnockDown\020\002\022\034\n\030EU"
  "GCPlayerStateType_Dead\020\003*\323\001\n\022EUGCArithme"
  "ticType\022\036\n\032EUGCArithmeticType_Unknown\020\000\022"
  "\032\n\026EUGCArithmeticType_Add\020\001\022\037\n\033EUGCArith"
  "meticType_Subtract\020\002\022\037\n\033EUGCArithmeticTy"
  "pe_Multiply\020\003\022\035\n\031EUGCArithmeticType_Divi"
  "de\020\004\022 \n\034EUGCArithmeticType_Remainder\020\005*\220"
  "\002\n\017EUGCCompareType\022\033\n\027EUGCCompareType_Un"
  "known\020\000\022\030\n\024EUGCCompareType_Less\020\001\022\035\n\031EUG"
  "CCompareType_LessEqual\020\002\022 \n\034EUGCCompareT"
  "ype_GreaterEqual\020\003\022\033\n\027EUGCCompareType_Gr"
  "eater\020\004\022\031\n\025EUGCCompareType_Equal\020\005\022\034\n\030EU"
  "GCCompareType_NotEqual\020\006\022\027\n\023EUGCCompareT"
  "ype_And\020\007\022\026\n\022EUGCCompareType_Or\020\010*\334\001\n\rEU"
  "GCValueType\022\031\n\025EUGCValueType_Unknown\020\000\022\026"
  "\n\022EUGCValueType_List\020\001\022\026\n\022EUGCValueType_"
  "Bool\020\002\022\025\n\021EUGCValueType_Int\020\003\022\027\n\023EUGCVal"
  "ueType_Float\020\004\022\030\n\024EUGCValueType_String\020\005"
  "\022\031\n\025EUGCValueType_Vector3\020\006\022\033\n\027EUGCValue"
  "Type_Interface\020\007*\314\013\n\024EMetaConfigParamTyp"
  "e\022 \n\034EMetaConfigParamType_Unknown\020\000\022\035\n\031E"
  "MetaConfigParamType_List\020\001\022\035\n\031EMetaConfi"
  "gParamType_Bool\020\002\022\034\n\030EMetaConfigParamTyp"
  "e_Int\020\003\022\036\n\032EMetaConfigParamType_Float\020\004\022"
  "\037\n\033EMetaConfigParamType_String\020\005\022 \n\034EMet"
  "aConfigParamType_Vector3\020\006\022\"\n\036EMetaConfi"
  "gParamType_Interface\020\007\022!\n\035EMetaConfigPar"
  "amType_BoolList\0202\022 \n\034EMetaConfigParamTyp"
  "e_IntList\0203\022\"\n\036EMetaConfigParamType_Floa"
  "tList\0204\022#\n\037EMetaConfigParamType_StringLi"
  "st\0205\022$\n EMetaConfigParamType_Vector3List"
  "\0206\022\"\n\036EMetaConfigParamType_Condition\0207\022\'"
  "\n#EMetaConfigParamType_ConditionArray\0208\022"
  "#\n\037EMetaConfigParamType_EntityType\0209\022\037\n\033"
  "EMetaConfigParamType_Entity\020:\022#\n\037EMetaCo"
  "nfigParamType_EntityList\020;\022\037\n\033EMetaConfi"
  "gParamType_Player\020<\022#\n\037EMetaConfigParamT"
  "ype_PlayerList\020=\022\035\n\031EMetaConfigParamType"
  "_Team\020>\022!\n\035EMetaConfigParamType_TeamList"
  "\020\?\022!\n\035EMetaConfigParamType_LevelObj\020@\022%\n"
  "!EMetaConfigParamType_LevelObjList\020A\022&\n\""
  "EMetaConfigParamType_DirectedPoint\020B\022(\n$"
  "EMetaConfigParamType_InternalHudType\020C\022\034"
  "\n\030EMetaConfigParamType_Hud\020D\022 \n\034EMetaCon"
  "figParamType_HudList\020E\022%\n!EMetaConfigPar"
  "amType_LevelObjType\020F\022#\n\037EMetaConfigPara"
  "mType_DamageType\020G\022\036\n\032EMetaConfigParamTy"
  "pe_Phase\020H\022\"\n\036EMetaConfigParamType_Score"
  "Type\020I\022#\n\037EMetaConfigParamType_FloatOrIn"
  "t\020J\022#\n\037EMetaConfigParamType_EffectType\020K"
  "\022!\n\035EMetaConfigParamType_IconType\020L\022(\n$E"
  "MetaConfigParamType_PlayerStateType\020M\022\"\n"
  "\036EMetaConfigParamType_AudioType\020N\022!\n\035EMe"
  "taConfigParamType_SortType\020O\022(\n$EMetaCon"
  "figParamType_ItemGoodsIDType\020P\022\037\n\033EMetaC"
  "onfigParamType_AIType\020Q\022&\n\"EMetaConfigPa"
  "ramType_InventoryType\020R*\325\025\n\023EUGCLogicEnt"
  "ityType\022\037\n\033EUGCLogicEntityType_Unknown\020\000"
  "\022\036\n\032EUGCLogicEntityType_Global\020\001\022\036\n\032EUGC"
  "LogicEntityType_Player\020\002\022\034\n\030EUGCLogicEnt"
  "ityType_Team\020\003\022\036\n\031EUGCLogicEntityType_Ro"
  "und\020\350\007\022\036\n\031EUGCLogicEntityType_Phase\020\351\007\022%"
  "\n EUGCLogicEntityType_CountdownHud\020\362\007\022)\n"
  "$EUGCLogicEntityType_OpeningBannerHud\020\363\007"
  "\0223\n.EUGCLogicEntityType_TwoTeamRoundStar"
  "tBannerHud\020\364\007\0222\n-EUGCLogicEntityType_Nor"
  "malRoundStartBannerHud\020\365\007\0220\n+EUGCLogicEn"
  "tityType_TeamRoundScoreBannerHud\020\366\007\022)\n$E"
  "UGCLogicEntityType_CheckPointMgrHud\020\367\007\022/"
  "\n*EUGCLogicEntityType_RoundResultShowTim"
  "eHud\020\370\007\022*\n%EUGCLogicEntityType_TwoTeamFa"
  "ctionHud\020\371\007\0223\n.EUGCLogicEntityType_TwoTe"
  "amRoundScoreBannerHud\020\372\007\022(\n#EUGCLogicEnt"
  "ityType_ResultBannerHud\020\373\007\022$\n\037EUGCLogicE"
  "ntityType_RoundNumHud\020\374\007\022*\n%EUGCLogicEnt"
  "ityType_PhaseCountDownHud\020\375\007\022-\n(EUGCLogi"
  "cEntityType_MatchInfoSubTitleHud\020\376\007\022,\n\'E"
  "UGCLogicEntityType_TwoTeamMatchInfoHud\020\377"
  "\007\022)\n$EUGCLogicEntityType_TeamMatchInfoHu"
  "d\020\200\010\022.\n)EUGCLogicEntityType_TwoTeamLeade"
  "rboardHud\020\201\010\022/\n*EUGCLogicEntityType_More"
  "TeamLeaderboardHud\020\202\010\022\'\n\"EUGCLogicEntity"
  "Type_FactionInfoHud\020\204\010\022,\n\'EUGCLogicEntit"
  "yType_IconNotificationHud\020\205\010\0222\n-EUGCLogi"
  "cEntityType_TwoTeamMatchInfoSimpleHud\020\206\010"
  "\022-\n(EUGCLogicEntityType_CountdownReminde"
  "rHud\020\207\010\022%\n EUGCLogicEntityType_TweenTips"
  "Hud\020\210\010\022+\n&EUGCLogicEntityType_RoundTrans"
  "itionHud\020\211\010\022-\n(EUGCLogicEntityType_Singl"
  "eLeaderboardHud\020\212\010\022-\n(EUGCLogicEntityTyp"
  "e_LeaderboardButtonHud\020\213\010\022\'\n\"EUGCLogicEn"
  "tityType_ZombieLevelHud\020\214\010\022\'\n\"EUGCLogicE"
  "ntityType_AddScoreVFXHud\020\215\010\022%\n EUGCLogic"
  "EntityType_ZombieVFXHud\020\216\010\022)\n$EUGCLogicE"
  "ntityType_TimeTweenTipsHud\020\217\010\022&\n!EUGCLog"
  "icEntityType_ChooseCardHud\020\220\010\022*\n%EUGCLog"
  "icEntityType_IdentityNotifyHud\020\221\010\022/\n*EUG"
  "CLogicEntityType_FiveSecondCountDownHud\020"
  "\222\010\022\'\n\"EUGCLogicEntityType_TitleBannerHud"
  "\020\223\010\022+\n&EUGCLogicEntityType_CommonHudSwit"
  "chHud\020\224\010\022\'\n\"EUGCLogicEntityType_SkillBut"
  "tonHud\020\225\010\022#\n\036EUGCLogicEntityType_IconEnt"
  "ity\020\320\017\022#\n\036EUGCLogicEntityType_TextEntity"
  "\020\321\017\022%\n EUGCLogicEntityType_EffectEntity\020"
  "\322\017\022\"\n\035EUGCLogicEntityType_CustomHud\020\323\017\022\'"
  "\n\"EUGCLogicEntityType_HudEmptyWidget\020\324\017\022"
  "\'\n\"EUGCLogicEntityType_HudImageWidget\020\325\017"
  "\022\'\n\"EUGCLogicEntityType_HudLabelWidget\020\326"
  "\017\022(\n#EUGCLogicEntityType_HudButtonWidget"
  "\020\327\017\022\'\n\"EUGCLogicEntityType_HudInputWidge"
  "t\020\330\017\022$\n\037EUGCLogicEntityType_SoundEntity\020"
  "\331\017\022\037\n\032EUGCLogicEntityType_Entity\020\374\021\022)\n$E"
  "UGCLogicEntityType_CombatableEntity\020\375\021\022\034"
  "\n\027EUGCLogicEntityType_Hud\020\376\021\022$\n\037EUGCLogi"
  "cEntityType_LevelObject\020\377\021\022\"\n\035EUGCLogicE"
  "ntityType_HudWidget\020\200\022\022!\n\034EUGCLogicEntit"
  "yType_SpawnPos\020\304\023\022)\n$EUGCLogicEntityType"
  "_CustomizeTrigger\020\305\023\022-\n(EUGCLogicEntityT"
  "ype_KillOrGodZoneTrigger\020\306\023\022*\n%EUGCLogic"
  "EntityType_CheckPointTrigger\020\307\023\022(\n#EUGCL"
  "ogicEntityType_EndPointTrigger\020\310\023\022(\n#EUG"
  "CLogicEntityType_DynamicCollider\020\311\023\022)\n$E"
  "UGCLogicEntityType_SupplyBoxTrigger\020\312\023\022&"
  "\n!EUGCLogicEntityType_UGCMinisentry\020\313\023\022%"
  "\n EUGCLogicEntityType_BotGenerator\020\314\023\022(\n"
  "#EUGCLogicEntityType_EntityGenerator\020\315\023*"
  "\212\002\n\032EUGCParamSettingMethodType\022&\n\"EUGCPa"
  "ramSettingMethodType_Unknown\020\000\022\'\n#EUGCPa"
  "ramSettingMethodType_Override\020\001\022\"\n\036EUGCP"
  "aramSettingMethodType_Add\020\002\022\'\n#EUGCParam"
  "SettingMethodType_Subtract\020\003\022\'\n#EUGCPara"
  "mSettingMethodType_Multiply\020\004\022%\n!EUGCPar"
  "amSettingMethodType_Divide\020\005*\206\001\n\026UGCSpaw"
  "nPointSpawnType\022\"\n\036UGCSpawnPointSpawnTyp"
  "e_Default\020\000\022!\n\035UGCSpawnPointSpawnType_Ra"
  "ndom\020\001\022%\n!UGCSpawnPointSpawnType_UserAss"
  "ign\020\002*6\n\005ESort\022\016\n\nESort_AscZ\020\000\022\016\n\nESort_"
  "Desc\020\001\022\r\n\tESort_Asc\020\002*n\n\034EUGCWorkflowSeq"
  "uenceItemType\022&\n\"EUGCWorkflowSequenceIte"
  "mType_Phase\020\000\022&\n\"EUGCWorkflowSequenceIte"
  "mType_Round\020\001*\212\001\n\013EUGCKeyword\022\023\n\017Keyword"
  "_Unknown\020\000\022\020\n\014Keyword_Enum\020\001\022\021\n\rKeyword_"
  "Class\020\002\022\025\n\021Keyword_TypeAlias\020\004\022\024\n\020Keywor"
  "d_Abstract\020\010\022\024\n\020Keyword_Generics\020\020*c\n\rEU"
  "GCAttribute\022\030\n\024UGCAttribute_Unknown\020\000\022\"\n"
  "\036UGCAttribute_BridgingComponent\020\001\022\024\n\020UGC"
  "Attribute_Max\020\002*\275\004\n\017EUGCLocLanguage\022\027\n\023U"
  "GCLANGUAGE_Unknown\020\000\022\027\n\023UGCLANGUAGE_ENGL"
  "ISH\020\001\022\"\n\036UGCLANGUAGE_SIMPLIFIED_CHINESE\020"
  "\002\022#\n\037UGCLANGUAGE_TRADITIONAL_CHINESE\020\003\022\024"
  "\n\020UGCLANGUAGE_THAI\020\004\022\032\n\026UGCLANGUAGE_VIET"
  "NAMESE\020\005\022\031\n\025UGCLANGUAGE_INDONESIA\020\006\022$\n U"
  "GCLANGUAGE_BRAZILIAN_PORTUGUESE\020\007\022\027\n\023UGC"
  "LANGUAGE_SPANISH\020\010\022\027\n\023UGCLANGUAGE_RUSSIA"
  "N\020\t\022\026\n\022UGCLANGUAGE_KOREAN\020\n\022\026\n\022UGCLANGUA"
  "GE_FRENCH\020\013\022\026\n\022UGCLANGUAGE_GERMAN\020\014\022\027\n\023U"
  "GCLANGUAGE_TURKISH\020\r\022\025\n\021UGCLANGUAGE_HIND"
  "I\020\016\022\030\n\024UGCLANGUAGE_JAPANESE\020\017\022\030\n\024UGCLANG"
  "UAGE_ROMANIAN\020\020\022\026\n\022UGCLANGUAGE_ARABIC\020\021\022"
  "\027\n\023UGCLANGUAGE_BURMESE\020\022\022\024\n\020UGCLANGUAGE_"
  "URDU\020\023\022\027\n\023UGCLANGUAGE_BENGALI\020\024*x\n\017EUGCV"
  "ersionCode\022\033\n\027EUGCVersionCode_Unknown\020\000\022"
  "%\n!EUGCVersionCode_CompatibleVersion\020\006\022!"
  "\n\035EUGCVersionCode_PublicVersion\020h*_\n\020EUG"
  "CGraphKeyword\022\030\n\024GraphKeyword_Unknown\020\000\022"
  "\027\n\023GraphKeyword_Static\020\001\022\030\n\024GraphKeyword"
  "_Partial\020\002*l\n\022UGCMiniSentryRange\022\033\n\027UGCM"
  "iniSentryRange_Near\020\000\022\035\n\031UGCMiniSentryRa"
  "nge_Middle\020\001\022\032\n\026UGCMiniSentryRange_Far\020\002"
  "*\306\001\n\022EUGCProjectVersion\022\036\n\032EUGCProjectVe"
  "rsion_Unknown\020\000\022\'\n#EUGCProjectVersion_OB"
  "35_And_Earlier\020\001\022#\n\037EUGCProjectVersion_O"
  "B36_To_OB37\020\002\022#\n\037EUGCProjectVersion_OB38"
  "_To_OB39\020\003\022\035\n\031EUGCProjectVersion_Latest\020"
  "\004*\304\002\n\030RoomCustomParamsDataType\022\"\n\036ERoomC"
  "ustomParamsDataType_None\020\000\022\"\n\036ERoomCusto"
  "mParamsDataType_Bool\020\001\022\'\n#ERoomCustomPar"
  "amsDataType_SliderInt\020\002\022)\n%ERoomCustomPa"
  "ramsDataType_SliderFloat\020\003\022-\n)ERoomCusto"
  "mParamsDataType_SingleChooseInt\020\004\022,\n(ERo"
  "omCustomParamsDataType_MultiChooseInt\020\005\022"
  "/\n+ERoomCustomParamsDataType_SingleChoos"
  "eFloat\020\006b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ugccommon_2eproto_deps[2] = {
  &::descriptor_table_ProtoBuffCommon_2eproto,
  &::descriptor_table_ProtoBuffUGCResource_2eproto,
};
static ::_pbi::once_flag descriptor_table_ugccommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ugccommon_2eproto = {
    false, false, 38696, descriptor_table_protodef_ugccommon_2eproto,
    "ugccommon.proto",
    &descriptor_table_ugccommon_2eproto_once, descriptor_table_ugccommon_2eproto_deps, 2, 145,
    schemas, file_default_instances, TableStruct_ugccommon_2eproto::offsets,
    file_level_metadata_ugccommon_2eproto, file_level_enum_descriptors_ugccommon_2eproto,
    file_level_service_descriptors_ugccommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ugccommon_2eproto_getter() {
  return &descriptor_table_ugccommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ugccommon_2eproto(&descriptor_table_ugccommon_2eproto);
namespace message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCEditorError_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[0];
}
bool UGCEditorError_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 100000000:
    case 100000001:
    case 100000002:
    case 100000003:
    case 100000004:
    case 100000005:
    case 100000006:
    case 100000007:
    case 100000008:
    case 100200001:
    case 100200002:
    case 100200003:
    case 100200004:
    case 100200005:
    case 100200006:
    case 100200007:
    case 100200008:
    case 100200009:
    case 100200010:
    case 100300001:
    case 100300002:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Unknown;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Reserved_MaxValue;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Map_InsufficientSpawnPoints;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Map_InsufficientTargetPoints;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Map_InsufficientMustModeItems;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Map_CostExceedLimit;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Map_ObjectExceedLimit;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Map_InsufficientAllTeamSpawnPointsNum;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Map_InsufficientSingleTeamSpawnPoints;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Map_InsufficientSingleTeamSpawnPointsNum;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_MissingReference;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_TypeMismatch;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_VariableOutOfScope;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_ExceedLimit;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_ReturnOutOfScope;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_ReturnWithoutValueOutOfScope;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_ReturnWithValueOutOfScope;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_InvalidEvent;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_ForbbidenEmptySlot;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Graph_EntityPropertyObsolete;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Hud_InterfaceExceedLimit;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_Hud_ControlExceedLimit;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_MIN;
constexpr UGCEditorError_ErrorCode UGCEditorError::ErrorCode_MAX;
constexpr int UGCEditorError::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCEditorError_ErrorSeverity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[1];
}
bool UGCEditorError_ErrorSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UGCEditorError_ErrorSeverity UGCEditorError::ErrorSeverity_None;
constexpr UGCEditorError_ErrorSeverity UGCEditorError::ErrorSeverity_Panic;
constexpr UGCEditorError_ErrorSeverity UGCEditorError::ErrorSeverity_Error;
constexpr UGCEditorError_ErrorSeverity UGCEditorError::ErrorSeverity_Warning;
constexpr UGCEditorError_ErrorSeverity UGCEditorError::ErrorSeverity_MIN;
constexpr UGCEditorError_ErrorSeverity UGCEditorError::ErrorSeverity_MAX;
constexpr int UGCEditorError::ErrorSeverity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCResourceData_UGCResourceDataVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[2];
}
bool UGCResourceData_UGCResourceDataVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UGCResourceData_UGCResourceDataVersion UGCResourceData::UGCResourceMetaDataVersion_Unknown;
constexpr UGCResourceData_UGCResourceDataVersion UGCResourceData::UGCResourceMetaDataVersion_V1;
constexpr UGCResourceData_UGCResourceDataVersion UGCResourceData::UGCResourceDataVersion_MIN;
constexpr UGCResourceData_UGCResourceDataVersion UGCResourceData::UGCResourceDataVersion_MAX;
constexpr int UGCResourceData::UGCResourceDataVersion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCModuleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[3];
}
bool EUGCModuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCDamageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[4];
}
bool EUGCDamageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCScoreType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[5];
}
bool EUGCScoreType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPlayerStateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[6];
}
bool EUGCPlayerStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCArithmeticType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[7];
}
bool EUGCArithmeticType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCCompareType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[8];
}
bool EUGCCompareType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[9];
}
bool EUGCValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMetaConfigParamType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[10];
}
bool EMetaConfigParamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCLogicEntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[11];
}
bool EUGCLogicEntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 1000:
    case 1001:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2300:
    case 2301:
    case 2302:
    case 2303:
    case 2304:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCParamSettingMethodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[12];
}
bool EUGCParamSettingMethodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCSpawnPointSpawnType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[13];
}
bool UGCSpawnPointSpawnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESort_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[14];
}
bool ESort_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCWorkflowSequenceItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[15];
}
bool EUGCWorkflowSequenceItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCKeyword_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[16];
}
bool EUGCKeyword_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCAttribute_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[17];
}
bool EUGCAttribute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCLocLanguage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[18];
}
bool EUGCLocLanguage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCVersionCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[19];
}
bool EUGCVersionCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 6:
    case 104:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCGraphKeyword_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[20];
}
bool EUGCGraphKeyword_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UGCMiniSentryRange_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[21];
}
bool UGCMiniSentryRange_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCProjectVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[22];
}
bool EUGCProjectVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomCustomParamsDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ugccommon_2eproto);
  return file_level_enum_descriptors_ugccommon_2eproto[23];
}
bool RoomCustomParamsDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UGCDebugSettingData::_Internal {
 public:
  static const ::message::ProtoBuffVector3& gotoposition(const UGCDebugSettingData* msg);
};

const ::message::ProtoBuffVector3&
UGCDebugSettingData::_Internal::gotoposition(const UGCDebugSettingData* msg) {
  return *msg->_impl_.gotoposition_;
}
void UGCDebugSettingData::clear_gotoposition() {
  if (GetArenaForAllocation() == nullptr && _impl_.gotoposition_ != nullptr) {
    delete _impl_.gotoposition_;
  }
  _impl_.gotoposition_ = nullptr;
}
UGCDebugSettingData::UGCDebugSettingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCDebugSettingData)
}
UGCDebugSettingData::UGCDebugSettingData(const UGCDebugSettingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCDebugSettingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.botcountbyteam_){from._impl_.botcountbyteam_}
    , /*decltype(_impl_._botcountbyteam_cached_byte_size_)*/{0}
    , decltype(_impl_.breakpoints_){from._impl_.breakpoints_}
    , decltype(_impl_.tokensvalidid_){from._impl_.tokensvalidid_}
    , /*decltype(_impl_._tokensvalidid_cached_byte_size_)*/{0}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.gotoposition_){nullptr}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.gamemode_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.gotopositionafterstart_){}
    , decltype(_impl_.isstrictmode_){}
    , decltype(_impl_.groupmode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_gotoposition()) {
    _this->_impl_.gotoposition_ = new ::message::ProtoBuffVector3(*from._impl_.gotoposition_);
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.groupmode_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.groupmode_));
  // @@protoc_insertion_point(copy_constructor:message.UGCDebugSettingData)
}

inline void UGCDebugSettingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.botcountbyteam_){arena}
    , /*decltype(_impl_._botcountbyteam_cached_byte_size_)*/{0}
    , decltype(_impl_.breakpoints_){arena}
    , decltype(_impl_.tokensvalidid_){arena}
    , /*decltype(_impl_._tokensvalidid_cached_byte_size_)*/{0}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.gotoposition_){nullptr}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.gamemode_){0u}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.gotopositionafterstart_){false}
    , decltype(_impl_.isstrictmode_){false}
    , decltype(_impl_.groupmode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCDebugSettingData::~UGCDebugSettingData() {
  // @@protoc_insertion_point(destructor:message.UGCDebugSettingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCDebugSettingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.botcountbyteam_.~RepeatedField();
  _impl_.breakpoints_.~RepeatedPtrField();
  _impl_.tokensvalidid_.~RepeatedField();
  _impl_.nickname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.gotoposition_;
}

void UGCDebugSettingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCDebugSettingData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCDebugSettingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.botcountbyteam_.Clear();
  _impl_.breakpoints_.Clear();
  _impl_.tokensvalidid_.Clear();
  _impl_.nickname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.gotoposition_ != nullptr) {
    delete _impl_.gotoposition_;
  }
  _impl_.gotoposition_ = nullptr;
  ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.groupmode_) -
      reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.groupmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCDebugSettingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GameMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gamemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MapID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GotoPositionAfterStart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gotopositionafterstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 GotoPosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gotoposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 BotCountByTeam = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_botcountbyteam(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_botcountbyteam(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string NickName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCDebugSettingData.NickName"));
        } else
          goto handle_unusual;
        continue;
      // repeated string Breakpoints = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_breakpoints();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCDebugSettingData.Breakpoints"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 GroupMode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.groupmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsStrictMode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.isstrictmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 TokensValidId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tokensvalidid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_tokensvalidid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCDebugSettingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCDebugSettingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->_internal_accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // uint32 GameMode = 2;
  if (this->_internal_gamemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gamemode(), target);
  }

  // uint32 MapID = 3;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mapid(), target);
  }

  // bool GotoPositionAfterStart = 4;
  if (this->_internal_gotopositionafterstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_gotopositionafterstart(), target);
  }

  // .message.ProtoBuffVector3 GotoPosition = 5;
  if (this->_internal_has_gotoposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::gotoposition(this),
        _Internal::gotoposition(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 BotCountByTeam = 6;
  {
    int byte_size = _impl_._botcountbyteam_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_botcountbyteam(), byte_size, target);
    }
  }

  // string NickName = 7;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCDebugSettingData.NickName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_nickname(), target);
  }

  // repeated string Breakpoints = 8;
  for (int i = 0, n = this->_internal_breakpoints_size(); i < n; i++) {
    const auto& s = this->_internal_breakpoints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCDebugSettingData.Breakpoints");
    target = stream->WriteString(8, s, target);
  }

  // uint32 GroupMode = 9;
  if (this->_internal_groupmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_groupmode(), target);
  }

  // bool IsStrictMode = 10;
  if (this->_internal_isstrictmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_isstrictmode(), target);
  }

  // repeated uint32 TokensValidId = 11;
  {
    int byte_size = _impl_._tokensvalidid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_tokensvalidid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCDebugSettingData)
  return target;
}

size_t UGCDebugSettingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCDebugSettingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 BotCountByTeam = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.botcountbyteam_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._botcountbyteam_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string Breakpoints = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.breakpoints_.size());
  for (int i = 0, n = _impl_.breakpoints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.breakpoints_.Get(i));
  }

  // repeated uint32 TokensValidId = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.tokensvalidid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tokensvalidid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string NickName = 7;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // .message.ProtoBuffVector3 GotoPosition = 5;
  if (this->_internal_has_gotoposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gotoposition_);
  }

  // uint64 AccountID = 1;
  if (this->_internal_accountid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
  }

  // uint32 GameMode = 2;
  if (this->_internal_gamemode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gamemode());
  }

  // uint32 MapID = 3;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // bool GotoPositionAfterStart = 4;
  if (this->_internal_gotopositionafterstart() != 0) {
    total_size += 1 + 1;
  }

  // bool IsStrictMode = 10;
  if (this->_internal_isstrictmode() != 0) {
    total_size += 1 + 1;
  }

  // uint32 GroupMode = 9;
  if (this->_internal_groupmode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupmode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCDebugSettingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCDebugSettingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCDebugSettingData::GetClassData() const { return &_class_data_; }


void UGCDebugSettingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCDebugSettingData*>(&to_msg);
  auto& from = static_cast<const UGCDebugSettingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCDebugSettingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.botcountbyteam_.MergeFrom(from._impl_.botcountbyteam_);
  _this->_impl_.breakpoints_.MergeFrom(from._impl_.breakpoints_);
  _this->_impl_.tokensvalidid_.MergeFrom(from._impl_.tokensvalidid_);
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_has_gotoposition()) {
    _this->_internal_mutable_gotoposition()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_gotoposition());
  }
  if (from._internal_accountid() != 0) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  if (from._internal_gamemode() != 0) {
    _this->_internal_set_gamemode(from._internal_gamemode());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_gotopositionafterstart() != 0) {
    _this->_internal_set_gotopositionafterstart(from._internal_gotopositionafterstart());
  }
  if (from._internal_isstrictmode() != 0) {
    _this->_internal_set_isstrictmode(from._internal_isstrictmode());
  }
  if (from._internal_groupmode() != 0) {
    _this->_internal_set_groupmode(from._internal_groupmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCDebugSettingData::CopyFrom(const UGCDebugSettingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCDebugSettingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCDebugSettingData::IsInitialized() const {
  return true;
}

void UGCDebugSettingData::InternalSwap(UGCDebugSettingData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.botcountbyteam_.InternalSwap(&other->_impl_.botcountbyteam_);
  _impl_.breakpoints_.InternalSwap(&other->_impl_.breakpoints_);
  _impl_.tokensvalidid_.InternalSwap(&other->_impl_.tokensvalidid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCDebugSettingData, _impl_.groupmode_)
      + sizeof(UGCDebugSettingData::_impl_.groupmode_)
      - PROTOBUF_FIELD_OFFSET(UGCDebugSettingData, _impl_.gotoposition_)>(
          reinterpret_cast<char*>(&_impl_.gotoposition_),
          reinterpret_cast<char*>(&other->_impl_.gotoposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCDebugSettingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[0]);
}

// ===================================================================

class UGCPhaseData::_Internal {
 public:
};

UGCPhaseData::UGCPhaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCPhaseData)
}
UGCPhaseData::UGCPhaseData(const UGCPhaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCPhaseData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phaseindex_){}
    , decltype(_impl_.duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.phaseindex_, &from._impl_.phaseindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.phaseindex_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:message.UGCPhaseData)
}

inline void UGCPhaseData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phaseindex_){0u}
    , decltype(_impl_.duration_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCPhaseData::~UGCPhaseData() {
  // @@protoc_insertion_point(destructor:message.UGCPhaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCPhaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGCPhaseData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCPhaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCPhaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.phaseindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_) -
      reinterpret_cast<char*>(&_impl_.phaseindex_)) + sizeof(_impl_.duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCPhaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 PhaseIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.phaseindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCPhaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCPhaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PhaseIndex = 1;
  if (this->_internal_phaseindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_phaseindex(), target);
  }

  // int32 Duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCPhaseData)
  return target;
}

size_t UGCPhaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCPhaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 PhaseIndex = 1;
  if (this->_internal_phaseindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseindex());
  }

  // int32 Duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCPhaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCPhaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCPhaseData::GetClassData() const { return &_class_data_; }


void UGCPhaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCPhaseData*>(&to_msg);
  auto& from = static_cast<const UGCPhaseData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCPhaseData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_phaseindex() != 0) {
    _this->_internal_set_phaseindex(from._internal_phaseindex());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCPhaseData::CopyFrom(const UGCPhaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCPhaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCPhaseData::IsInitialized() const {
  return true;
}

void UGCPhaseData::InternalSwap(UGCPhaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCPhaseData, _impl_.duration_)
      + sizeof(UGCPhaseData::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(UGCPhaseData, _impl_.phaseindex_)>(
          reinterpret_cast<char*>(&_impl_.phaseindex_),
          reinterpret_cast<char*>(&other->_impl_.phaseindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCPhaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[1]);
}

// ===================================================================

class UGCRoundData::_Internal {
 public:
};

UGCRoundData::UGCRoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCRoundData)
}
UGCRoundData::UGCRoundData(const UGCRoundData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCRoundData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phasedata_){from._impl_.phasedata_}
    , decltype(_impl_.phaseindex_){}
    , decltype(_impl_.roundnummax_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.phaseindex_, &from._impl_.phaseindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roundnummax_) -
    reinterpret_cast<char*>(&_impl_.phaseindex_)) + sizeof(_impl_.roundnummax_));
  // @@protoc_insertion_point(copy_constructor:message.UGCRoundData)
}

inline void UGCRoundData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phasedata_){arena}
    , decltype(_impl_.phaseindex_){0u}
    , decltype(_impl_.roundnummax_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCRoundData::~UGCRoundData() {
  // @@protoc_insertion_point(destructor:message.UGCRoundData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCRoundData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phasedata_.~RepeatedPtrField();
}

void UGCRoundData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCRoundData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCRoundData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phasedata_.Clear();
  ::memset(&_impl_.phaseindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roundnummax_) -
      reinterpret_cast<char*>(&_impl_.phaseindex_)) + sizeof(_impl_.roundnummax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCRoundData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 PhaseIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.phaseindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RoundNumMax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.roundnummax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCPhaseData PhaseData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phasedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCRoundData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCRoundData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PhaseIndex = 1;
  if (this->_internal_phaseindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_phaseindex(), target);
  }

  // int32 RoundNumMax = 2;
  if (this->_internal_roundnummax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_roundnummax(), target);
  }

  // repeated .message.UGCPhaseData PhaseData = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phasedata_size()); i < n; i++) {
    const auto& repfield = this->_internal_phasedata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCRoundData)
  return target;
}

size_t UGCRoundData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCRoundData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCPhaseData PhaseData = 3;
  total_size += 1UL * this->_internal_phasedata_size();
  for (const auto& msg : this->_impl_.phasedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 PhaseIndex = 1;
  if (this->_internal_phaseindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_phaseindex());
  }

  // int32 RoundNumMax = 2;
  if (this->_internal_roundnummax() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roundnummax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCRoundData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCRoundData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCRoundData::GetClassData() const { return &_class_data_; }


void UGCRoundData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCRoundData*>(&to_msg);
  auto& from = static_cast<const UGCRoundData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCRoundData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.phasedata_.MergeFrom(from._impl_.phasedata_);
  if (from._internal_phaseindex() != 0) {
    _this->_internal_set_phaseindex(from._internal_phaseindex());
  }
  if (from._internal_roundnummax() != 0) {
    _this->_internal_set_roundnummax(from._internal_roundnummax());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCRoundData::CopyFrom(const UGCRoundData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCRoundData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCRoundData::IsInitialized() const {
  return true;
}

void UGCRoundData::InternalSwap(UGCRoundData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.phasedata_.InternalSwap(&other->_impl_.phasedata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCRoundData, _impl_.roundnummax_)
      + sizeof(UGCRoundData::_impl_.roundnummax_)
      - PROTOBUF_FIELD_OFFSET(UGCRoundData, _impl_.phaseindex_)>(
          reinterpret_cast<char*>(&_impl_.phaseindex_),
          reinterpret_cast<char*>(&other->_impl_.phaseindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCRoundData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[2]);
}

// ===================================================================

class UGCWorkflowSequenceItem::_Internal {
 public:
};

UGCWorkflowSequenceItem::UGCWorkflowSequenceItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCWorkflowSequenceItem)
}
UGCWorkflowSequenceItem::UGCWorkflowSequenceItem(const UGCWorkflowSequenceItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCWorkflowSequenceItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datatype_){}
    , decltype(_impl_.dataindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.datatype_, &from._impl_.datatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dataindex_) -
    reinterpret_cast<char*>(&_impl_.datatype_)) + sizeof(_impl_.dataindex_));
  // @@protoc_insertion_point(copy_constructor:message.UGCWorkflowSequenceItem)
}

inline void UGCWorkflowSequenceItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datatype_){0}
    , decltype(_impl_.dataindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCWorkflowSequenceItem::~UGCWorkflowSequenceItem() {
  // @@protoc_insertion_point(destructor:message.UGCWorkflowSequenceItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCWorkflowSequenceItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGCWorkflowSequenceItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCWorkflowSequenceItem::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCWorkflowSequenceItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.datatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dataindex_) -
      reinterpret_cast<char*>(&_impl_.datatype_)) + sizeof(_impl_.dataindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCWorkflowSequenceItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.EUGCWorkflowSequenceItemType DataType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_datatype(static_cast<::message::EUGCWorkflowSequenceItemType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 DataIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dataindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCWorkflowSequenceItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCWorkflowSequenceItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.EUGCWorkflowSequenceItemType DataType = 1;
  if (this->_internal_datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_datatype(), target);
  }

  // int32 DataIndex = 2;
  if (this->_internal_dataindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_dataindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCWorkflowSequenceItem)
  return target;
}

size_t UGCWorkflowSequenceItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCWorkflowSequenceItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.EUGCWorkflowSequenceItemType DataType = 1;
  if (this->_internal_datatype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_datatype());
  }

  // int32 DataIndex = 2;
  if (this->_internal_dataindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dataindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCWorkflowSequenceItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCWorkflowSequenceItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCWorkflowSequenceItem::GetClassData() const { return &_class_data_; }


void UGCWorkflowSequenceItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCWorkflowSequenceItem*>(&to_msg);
  auto& from = static_cast<const UGCWorkflowSequenceItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCWorkflowSequenceItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_datatype() != 0) {
    _this->_internal_set_datatype(from._internal_datatype());
  }
  if (from._internal_dataindex() != 0) {
    _this->_internal_set_dataindex(from._internal_dataindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCWorkflowSequenceItem::CopyFrom(const UGCWorkflowSequenceItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCWorkflowSequenceItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCWorkflowSequenceItem::IsInitialized() const {
  return true;
}

void UGCWorkflowSequenceItem::InternalSwap(UGCWorkflowSequenceItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCWorkflowSequenceItem, _impl_.dataindex_)
      + sizeof(UGCWorkflowSequenceItem::_impl_.dataindex_)
      - PROTOBUF_FIELD_OFFSET(UGCWorkflowSequenceItem, _impl_.datatype_)>(
          reinterpret_cast<char*>(&_impl_.datatype_),
          reinterpret_cast<char*>(&other->_impl_.datatype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCWorkflowSequenceItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[3]);
}

// ===================================================================

class UGCWorkflowSequence::_Internal {
 public:
};

UGCWorkflowSequence::UGCWorkflowSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCWorkflowSequence)
}
UGCWorkflowSequence::UGCWorkflowSequence(const UGCWorkflowSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCWorkflowSequence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCWorkflowSequence)
}

inline void UGCWorkflowSequence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCWorkflowSequence::~UGCWorkflowSequence() {
  // @@protoc_insertion_point(destructor:message.UGCWorkflowSequence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCWorkflowSequence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void UGCWorkflowSequence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCWorkflowSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCWorkflowSequence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCWorkflowSequence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCWorkflowSequenceItem Items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCWorkflowSequence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCWorkflowSequence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCWorkflowSequenceItem Items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCWorkflowSequence)
  return target;
}

size_t UGCWorkflowSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCWorkflowSequence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCWorkflowSequenceItem Items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCWorkflowSequence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCWorkflowSequence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCWorkflowSequence::GetClassData() const { return &_class_data_; }


void UGCWorkflowSequence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCWorkflowSequence*>(&to_msg);
  auto& from = static_cast<const UGCWorkflowSequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCWorkflowSequence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCWorkflowSequence::CopyFrom(const UGCWorkflowSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCWorkflowSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCWorkflowSequence::IsInitialized() const {
  return true;
}

void UGCWorkflowSequence::InternalSwap(UGCWorkflowSequence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCWorkflowSequence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[4]);
}

// ===================================================================

class UGCType::_Internal {
 public:
};

UGCType::UGCType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCType)
}
UGCType::UGCType(const UGCType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.basetypeids_){from._impl_.basetypeids_}
    , /*decltype(_impl_._basetypeids_cached_byte_size_)*/{0}
    , decltype(_impl_.accepttypeids_){from._impl_.accepttypeids_}
    , /*decltype(_impl_._accepttypeids_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.declare_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.genericsid_){}
    , decltype(_impl_.t0id_){}
    , decltype(_impl_.attributes_){}
    , decltype(_impl_.t1id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.declare_, &from._impl_.declare_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t1id_) -
    reinterpret_cast<char*>(&_impl_.declare_)) + sizeof(_impl_.t1id_));
  // @@protoc_insertion_point(copy_constructor:message.UGCType)
}

inline void UGCType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.basetypeids_){arena}
    , /*decltype(_impl_._basetypeids_cached_byte_size_)*/{0}
    , decltype(_impl_.accepttypeids_){arena}
    , /*decltype(_impl_._accepttypeids_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.declare_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.genericsid_){0}
    , decltype(_impl_.t0id_){0}
    , decltype(_impl_.attributes_){0u}
    , decltype(_impl_.t1id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCType::~UGCType() {
  // @@protoc_insertion_point(destructor:message.UGCType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.basetypeids_.~RepeatedField();
  _impl_.accepttypeids_.~RepeatedField();
  _impl_.name_.Destroy();
}

void UGCType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCType::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.basetypeids_.Clear();
  _impl_.accepttypeids_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.declare_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.t1id_) -
      reinterpret_cast<char*>(&_impl_.declare_)) + sizeof(_impl_.t1id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Declare = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.declare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 BaseTypeIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_basetypeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_basetypeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 AcceptTypeIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_accepttypeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_accepttypeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCType.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 GenericsID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.genericsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 T0ID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.t0id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Attributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.attributes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 T1ID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.t1id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Declare = 1;
  if (this->_internal_declare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_declare(), target);
  }

  // repeated int32 BaseTypeIDs = 2;
  {
    int byte_size = _impl_._basetypeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_basetypeids(), byte_size, target);
    }
  }

  // repeated int32 AcceptTypeIDs = 3;
  {
    int byte_size = _impl_._accepttypeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_accepttypeids(), byte_size, target);
    }
  }

  // int32 ID = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_id(), target);
  }

  // string Name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCType.Name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // int32 GenericsID = 6;
  if (this->_internal_genericsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_genericsid(), target);
  }

  // int32 T0ID = 7;
  if (this->_internal_t0id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_t0id(), target);
  }

  // uint32 Attributes = 8;
  if (this->_internal_attributes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_attributes(), target);
  }

  // int32 T1ID = 9;
  if (this->_internal_t1id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_t1id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCType)
  return target;
}

size_t UGCType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 BaseTypeIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.basetypeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._basetypeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 AcceptTypeIDs = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.accepttypeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._accepttypeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 Declare = 1;
  if (this->_internal_declare() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_declare());
  }

  // int32 ID = 4;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 GenericsID = 6;
  if (this->_internal_genericsid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_genericsid());
  }

  // int32 T0ID = 7;
  if (this->_internal_t0id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_t0id());
  }

  // uint32 Attributes = 8;
  if (this->_internal_attributes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attributes());
  }

  // int32 T1ID = 9;
  if (this->_internal_t1id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_t1id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCType::GetClassData() const { return &_class_data_; }


void UGCType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCType*>(&to_msg);
  auto& from = static_cast<const UGCType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.basetypeids_.MergeFrom(from._impl_.basetypeids_);
  _this->_impl_.accepttypeids_.MergeFrom(from._impl_.accepttypeids_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_declare() != 0) {
    _this->_internal_set_declare(from._internal_declare());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_genericsid() != 0) {
    _this->_internal_set_genericsid(from._internal_genericsid());
  }
  if (from._internal_t0id() != 0) {
    _this->_internal_set_t0id(from._internal_t0id());
  }
  if (from._internal_attributes() != 0) {
    _this->_internal_set_attributes(from._internal_attributes());
  }
  if (from._internal_t1id() != 0) {
    _this->_internal_set_t1id(from._internal_t1id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCType::CopyFrom(const UGCType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCType::IsInitialized() const {
  return true;
}

void UGCType::InternalSwap(UGCType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.basetypeids_.InternalSwap(&other->_impl_.basetypeids_);
  _impl_.accepttypeids_.InternalSwap(&other->_impl_.accepttypeids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCType, _impl_.t1id_)
      + sizeof(UGCType::_impl_.t1id_)
      - PROTOBUF_FIELD_OFFSET(UGCType, _impl_.declare_)>(
          reinterpret_cast<char*>(&_impl_.declare_),
          reinterpret_cast<char*>(&other->_impl_.declare_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[5]);
}

// ===================================================================

class UGCTypeTree::_Internal {
 public:
};

UGCTypeTree::UGCTypeTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCTypeTree)
}
UGCTypeTree::UGCTypeTree(const UGCTypeTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCTypeTree* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.typemap_){from._impl_.typemap_}
    , decltype(_impl_.cmpprops_){from._impl_.cmpprops_}
    , decltype(_impl_.components_){from._impl_.components_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCTypeTree)
}

inline void UGCTypeTree::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.typemap_){arena}
    , decltype(_impl_.cmpprops_){arena}
    , decltype(_impl_.components_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCTypeTree::~UGCTypeTree() {
  // @@protoc_insertion_point(destructor:message.UGCTypeTree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCTypeTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.typemap_.~RepeatedPtrField();
  _impl_.cmpprops_.~RepeatedPtrField();
  _impl_.components_.~RepeatedPtrField();
}

void UGCTypeTree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCTypeTree::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCTypeTree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.typemap_.Clear();
  _impl_.cmpprops_.Clear();
  _impl_.components_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCTypeTree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCType TypeMap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_typemap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCTypeComponentProp CmpProps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cmpprops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCTypeComponent Components = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCTypeTree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCTypeTree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCType TypeMap = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_typemap_size()); i < n; i++) {
    const auto& repfield = this->_internal_typemap(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCTypeComponentProp CmpProps = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cmpprops_size()); i < n; i++) {
    const auto& repfield = this->_internal_cmpprops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCTypeComponent Components = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_components(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCTypeTree)
  return target;
}

size_t UGCTypeTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCTypeTree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCType TypeMap = 1;
  total_size += 1UL * this->_internal_typemap_size();
  for (const auto& msg : this->_impl_.typemap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCTypeComponentProp CmpProps = 2;
  total_size += 1UL * this->_internal_cmpprops_size();
  for (const auto& msg : this->_impl_.cmpprops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCTypeComponent Components = 3;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->_impl_.components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCTypeTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCTypeTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCTypeTree::GetClassData() const { return &_class_data_; }


void UGCTypeTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCTypeTree*>(&to_msg);
  auto& from = static_cast<const UGCTypeTree&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCTypeTree)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.typemap_.MergeFrom(from._impl_.typemap_);
  _this->_impl_.cmpprops_.MergeFrom(from._impl_.cmpprops_);
  _this->_impl_.components_.MergeFrom(from._impl_.components_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCTypeTree::CopyFrom(const UGCTypeTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCTypeTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCTypeTree::IsInitialized() const {
  return true;
}

void UGCTypeTree::InternalSwap(UGCTypeTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.typemap_.InternalSwap(&other->_impl_.typemap_);
  _impl_.cmpprops_.InternalSwap(&other->_impl_.cmpprops_);
  _impl_.components_.InternalSwap(&other->_impl_.components_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCTypeTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[6]);
}

// ===================================================================

class UGCTypeComponent::_Internal {
 public:
};

UGCTypeComponent::UGCTypeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCTypeComponent)
}
UGCTypeComponent::UGCTypeComponent(const UGCTypeComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCTypeComponent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){from._impl_.props_}
    , /*decltype(_impl_._props_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:message.UGCTypeComponent)
}

inline void UGCTypeComponent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.props_){arena}
    , /*decltype(_impl_._props_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCTypeComponent::~UGCTypeComponent() {
  // @@protoc_insertion_point(destructor:message.UGCTypeComponent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCTypeComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.props_.~RepeatedField();
}

void UGCTypeComponent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCTypeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCTypeComponent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.props_.Clear();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCTypeComponent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Props = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_props(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_props(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCTypeComponent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCTypeComponent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated int32 Props = 2;
  {
    int byte_size = _impl_._props_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_props(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCTypeComponent)
  return target;
}

size_t UGCTypeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCTypeComponent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Props = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.props_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._props_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCTypeComponent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCTypeComponent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCTypeComponent::GetClassData() const { return &_class_data_; }


void UGCTypeComponent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCTypeComponent*>(&to_msg);
  auto& from = static_cast<const UGCTypeComponent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCTypeComponent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.props_.MergeFrom(from._impl_.props_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCTypeComponent::CopyFrom(const UGCTypeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCTypeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCTypeComponent::IsInitialized() const {
  return true;
}

void UGCTypeComponent::InternalSwap(UGCTypeComponent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.props_.InternalSwap(&other->_impl_.props_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCTypeComponent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[7]);
}

// ===================================================================

class UGCTypeComponentProp::_Internal {
 public:
  static const ::message::UGCVarValueDataV2& defaultvalue(const UGCTypeComponentProp* msg);
};

const ::message::UGCVarValueDataV2&
UGCTypeComponentProp::_Internal::defaultvalue(const UGCTypeComponentProp* msg) {
  return *msg->_impl_.defaultvalue_;
}
UGCTypeComponentProp::UGCTypeComponentProp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCTypeComponentProp)
}
UGCTypeComponentProp::UGCTypeComponentProp(const UGCTypeComponentProp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCTypeComponentProp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.defaultvalue_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_defaultvalue()) {
    _this->_impl_.defaultvalue_ = new ::message::UGCVarValueDataV2(*from._impl_.defaultvalue_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:message.UGCTypeComponentProp)
}

inline void UGCTypeComponentProp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.defaultvalue_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCTypeComponentProp::~UGCTypeComponentProp() {
  // @@protoc_insertion_point(destructor:message.UGCTypeComponentProp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCTypeComponentProp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.defaultvalue_;
}

void UGCTypeComponentProp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCTypeComponentProp::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCTypeComponentProp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.defaultvalue_ != nullptr) {
    delete _impl_.defaultvalue_;
  }
  _impl_.defaultvalue_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCTypeComponentProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCVarValueDataV2 DefaultValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaultvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCTypeComponentProp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCTypeComponentProp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // .message.UGCVarValueDataV2 DefaultValue = 3;
  if (this->_internal_has_defaultvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::defaultvalue(this),
        _Internal::defaultvalue(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCTypeComponentProp)
  return target;
}

size_t UGCTypeComponentProp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCTypeComponentProp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCVarValueDataV2 DefaultValue = 3;
  if (this->_internal_has_defaultvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.defaultvalue_);
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCTypeComponentProp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCTypeComponentProp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCTypeComponentProp::GetClassData() const { return &_class_data_; }


void UGCTypeComponentProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCTypeComponentProp*>(&to_msg);
  auto& from = static_cast<const UGCTypeComponentProp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCTypeComponentProp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_defaultvalue()) {
    _this->_internal_mutable_defaultvalue()->::message::UGCVarValueDataV2::MergeFrom(
        from._internal_defaultvalue());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCTypeComponentProp::CopyFrom(const UGCTypeComponentProp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCTypeComponentProp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCTypeComponentProp::IsInitialized() const {
  return true;
}

void UGCTypeComponentProp::InternalSwap(UGCTypeComponentProp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCTypeComponentProp, _impl_.type_)
      + sizeof(UGCTypeComponentProp::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(UGCTypeComponentProp, _impl_.defaultvalue_)>(
          reinterpret_cast<char*>(&_impl_.defaultvalue_),
          reinterpret_cast<char*>(&other->_impl_.defaultvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCTypeComponentProp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[8]);
}

// ===================================================================

class UGCCustomReplicationDataItemForEditor::_Internal {
 public:
  static const ::message::UGCVarValueDataV2& value(const UGCCustomReplicationDataItemForEditor* msg);
};

const ::message::UGCVarValueDataV2&
UGCCustomReplicationDataItemForEditor::_Internal::value(const UGCCustomReplicationDataItemForEditor* msg) {
  return *msg->_impl_.value_;
}
UGCCustomReplicationDataItemForEditor::UGCCustomReplicationDataItemForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCustomReplicationDataItemForEditor)
}
UGCCustomReplicationDataItemForEditor::UGCCustomReplicationDataItemForEditor(const UGCCustomReplicationDataItemForEditor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCustomReplicationDataItemForEditor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.typeid__){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.typeid__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.typeid__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_typeid_().empty()) {
    _this->_impl_.typeid__.Set(from._internal_typeid_(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::message::UGCVarValueDataV2(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCCustomReplicationDataItemForEditor)
}

inline void UGCCustomReplicationDataItemForEditor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.typeid__){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.typeid__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.typeid__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCCustomReplicationDataItemForEditor::~UGCCustomReplicationDataItemForEditor() {
  // @@protoc_insertion_point(destructor:message.UGCCustomReplicationDataItemForEditor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCustomReplicationDataItemForEditor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.typeid__.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void UGCCustomReplicationDataItemForEditor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCustomReplicationDataItemForEditor::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCustomReplicationDataItemForEditor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.typeid__.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCustomReplicationDataItemForEditor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCCustomReplicationDataItemForEditor.Name"));
        } else
          goto handle_unusual;
        continue;
      // string TypeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_typeid_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCCustomReplicationDataItemForEditor.TypeID"));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCVarValueDataV2 Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCustomReplicationDataItemForEditor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCustomReplicationDataItemForEditor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCCustomReplicationDataItemForEditor.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string TypeID = 2;
  if (!this->_internal_typeid_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_typeid_().data(), static_cast<int>(this->_internal_typeid_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCCustomReplicationDataItemForEditor.TypeID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_typeid_(), target);
  }

  // .message.UGCVarValueDataV2 Value = 3;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCustomReplicationDataItemForEditor)
  return target;
}

size_t UGCCustomReplicationDataItemForEditor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCustomReplicationDataItemForEditor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string TypeID = 2;
  if (!this->_internal_typeid_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_typeid_());
  }

  // .message.UGCVarValueDataV2 Value = 3;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCustomReplicationDataItemForEditor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCustomReplicationDataItemForEditor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCustomReplicationDataItemForEditor::GetClassData() const { return &_class_data_; }


void UGCCustomReplicationDataItemForEditor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCustomReplicationDataItemForEditor*>(&to_msg);
  auto& from = static_cast<const UGCCustomReplicationDataItemForEditor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCustomReplicationDataItemForEditor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_typeid_().empty()) {
    _this->_internal_set_typeid_(from._internal_typeid_());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::message::UGCVarValueDataV2::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCustomReplicationDataItemForEditor::CopyFrom(const UGCCustomReplicationDataItemForEditor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCustomReplicationDataItemForEditor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCustomReplicationDataItemForEditor::IsInitialized() const {
  return true;
}

void UGCCustomReplicationDataItemForEditor::InternalSwap(UGCCustomReplicationDataItemForEditor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.typeid__, lhs_arena,
      &other->_impl_.typeid__, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCustomReplicationDataItemForEditor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[9]);
}

// ===================================================================

class UGCLogicEntityDataForEditor::_Internal {
 public:
};

UGCLogicEntityDataForEditor::UGCLogicEntityDataForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCLogicEntityDataForEditor)
}
UGCLogicEntityDataForEditor::UGCLogicEntityDataForEditor(const UGCLogicEntityDataForEditor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCLogicEntityDataForEditor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.graphids_){from._impl_.graphids_}
    , decltype(_impl_.repdataitem_){from._impl_.repdataitem_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.editortype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.editortype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.editortype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_editortype().empty()) {
    _this->_impl_.editortype_.Set(from._internal_editortype(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCLogicEntityDataForEditor)
}

inline void UGCLogicEntityDataForEditor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.graphids_){arena}
    , decltype(_impl_.repdataitem_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.editortype_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.editortype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.editortype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCLogicEntityDataForEditor::~UGCLogicEntityDataForEditor() {
  // @@protoc_insertion_point(destructor:message.UGCLogicEntityDataForEditor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCLogicEntityDataForEditor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.graphids_.~RepeatedPtrField();
  _impl_.repdataitem_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.type_.Destroy();
  _impl_.editortype_.Destroy();
}

void UGCLogicEntityDataForEditor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCLogicEntityDataForEditor::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCLogicEntityDataForEditor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.graphids_.Clear();
  _impl_.repdataitem_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.editortype_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCLogicEntityDataForEditor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityDataForEditor.ID"));
        } else
          goto handle_unusual;
        continue;
      // string Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityDataForEditor.Type"));
        } else
          goto handle_unusual;
        continue;
      // repeated string GraphIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_graphids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityDataForEditor.GraphIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repdataitem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string EditorType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_editortype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityDataForEditor.EditorType"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCLogicEntityDataForEditor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCLogicEntityDataForEditor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityDataForEditor.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityDataForEditor.Type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated string GraphIDs = 3;
  for (int i = 0, n = this->_internal_graphids_size(); i < n; i++) {
    const auto& s = this->_internal_graphids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityDataForEditor.GraphIDs");
    target = stream->WriteString(3, s, target);
  }

  // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repdataitem_size()); i < n; i++) {
    const auto& repfield = this->_internal_repdataitem(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string EditorType = 5;
  if (!this->_internal_editortype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_editortype().data(), static_cast<int>(this->_internal_editortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityDataForEditor.EditorType");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_editortype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCLogicEntityDataForEditor)
  return target;
}

size_t UGCLogicEntityDataForEditor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCLogicEntityDataForEditor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string GraphIDs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.graphids_.size());
  for (int i = 0, n = _impl_.graphids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.graphids_.Get(i));
  }

  // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
  total_size += 1UL * this->_internal_repdataitem_size();
  for (const auto& msg : this->_impl_.repdataitem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string EditorType = 5;
  if (!this->_internal_editortype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_editortype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCLogicEntityDataForEditor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCLogicEntityDataForEditor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCLogicEntityDataForEditor::GetClassData() const { return &_class_data_; }


void UGCLogicEntityDataForEditor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCLogicEntityDataForEditor*>(&to_msg);
  auto& from = static_cast<const UGCLogicEntityDataForEditor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCLogicEntityDataForEditor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.graphids_.MergeFrom(from._impl_.graphids_);
  _this->_impl_.repdataitem_.MergeFrom(from._impl_.repdataitem_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_editortype().empty()) {
    _this->_internal_set_editortype(from._internal_editortype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCLogicEntityDataForEditor::CopyFrom(const UGCLogicEntityDataForEditor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCLogicEntityDataForEditor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCLogicEntityDataForEditor::IsInitialized() const {
  return true;
}

void UGCLogicEntityDataForEditor::InternalSwap(UGCLogicEntityDataForEditor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.graphids_.InternalSwap(&other->_impl_.graphids_);
  _impl_.repdataitem_.InternalSwap(&other->_impl_.repdataitem_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.editortype_, lhs_arena,
      &other->_impl_.editortype_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCLogicEntityDataForEditor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[10]);
}

// ===================================================================

class UGCCustomReplicationDataForEditor::_Internal {
 public:
};

UGCCustomReplicationDataForEditor::UGCCustomReplicationDataForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCustomReplicationDataForEditor)
}
UGCCustomReplicationDataForEditor::UGCCustomReplicationDataForEditor(const UGCCustomReplicationDataForEditor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCustomReplicationDataForEditor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemdata_){from._impl_.itemdata_}
    , decltype(_impl_.entitytype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entitytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entitytype().empty()) {
    _this->_impl_.entitytype_.Set(from._internal_entitytype(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCCustomReplicationDataForEditor)
}

inline void UGCCustomReplicationDataForEditor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemdata_){arena}
    , decltype(_impl_.entitytype_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entitytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCCustomReplicationDataForEditor::~UGCCustomReplicationDataForEditor() {
  // @@protoc_insertion_point(destructor:message.UGCCustomReplicationDataForEditor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCustomReplicationDataForEditor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemdata_.~RepeatedPtrField();
  _impl_.entitytype_.Destroy();
}

void UGCCustomReplicationDataForEditor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCustomReplicationDataForEditor::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCustomReplicationDataForEditor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemdata_.Clear();
  _impl_.entitytype_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCustomReplicationDataForEditor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string EntityType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entitytype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCCustomReplicationDataForEditor.EntityType"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationDataItemForEditor ItemData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCustomReplicationDataForEditor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCustomReplicationDataForEditor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string EntityType = 1;
  if (!this->_internal_entitytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entitytype().data(), static_cast<int>(this->_internal_entitytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCCustomReplicationDataForEditor.EntityType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entitytype(), target);
  }

  // repeated .message.UGCCustomReplicationDataItemForEditor ItemData = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_itemdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_itemdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCustomReplicationDataForEditor)
  return target;
}

size_t UGCCustomReplicationDataForEditor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCustomReplicationDataForEditor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCCustomReplicationDataItemForEditor ItemData = 2;
  total_size += 1UL * this->_internal_itemdata_size();
  for (const auto& msg : this->_impl_.itemdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string EntityType = 1;
  if (!this->_internal_entitytype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entitytype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCustomReplicationDataForEditor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCustomReplicationDataForEditor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCustomReplicationDataForEditor::GetClassData() const { return &_class_data_; }


void UGCCustomReplicationDataForEditor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCustomReplicationDataForEditor*>(&to_msg);
  auto& from = static_cast<const UGCCustomReplicationDataForEditor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCustomReplicationDataForEditor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.itemdata_.MergeFrom(from._impl_.itemdata_);
  if (!from._internal_entitytype().empty()) {
    _this->_internal_set_entitytype(from._internal_entitytype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCustomReplicationDataForEditor::CopyFrom(const UGCCustomReplicationDataForEditor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCustomReplicationDataForEditor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCustomReplicationDataForEditor::IsInitialized() const {
  return true;
}

void UGCCustomReplicationDataForEditor::InternalSwap(UGCCustomReplicationDataForEditor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.itemdata_.InternalSwap(&other->_impl_.itemdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entitytype_, lhs_arena,
      &other->_impl_.entitytype_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCustomReplicationDataForEditor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[11]);
}

// ===================================================================

class UGCVarValueData::_Internal {
 public:
  static const ::message::UGCFuncCallerData& funcvalue(const UGCVarValueData* msg);
  static const ::message::ProtoBuffVector3& vector3value(const UGCVarValueData* msg);
};

const ::message::UGCFuncCallerData&
UGCVarValueData::_Internal::funcvalue(const UGCVarValueData* msg) {
  return *msg->_impl_.funcvalue_;
}
const ::message::ProtoBuffVector3&
UGCVarValueData::_Internal::vector3value(const UGCVarValueData* msg) {
  return *msg->_impl_.vector3value_;
}
void UGCVarValueData::clear_vector3value() {
  if (GetArenaForAllocation() == nullptr && _impl_.vector3value_ != nullptr) {
    delete _impl_.vector3value_;
  }
  _impl_.vector3value_ = nullptr;
}
UGCVarValueData::UGCVarValueData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCVarValueData)
}
UGCVarValueData::UGCVarValueData(const UGCVarValueData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCVarValueData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arrayvalue_){from._impl_.arrayvalue_}
    , decltype(_impl_.stringvalue_){}
    , decltype(_impl_.funcvalue_){nullptr}
    , decltype(_impl_.vector3value_){nullptr}
    , decltype(_impl_.valuetype_){}
    , decltype(_impl_.boolvalue_){}
    , decltype(_impl_.intvalue_){}
    , decltype(_impl_.floatvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stringvalue().empty()) {
    _this->_impl_.stringvalue_.Set(from._internal_stringvalue(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_funcvalue()) {
    _this->_impl_.funcvalue_ = new ::message::UGCFuncCallerData(*from._impl_.funcvalue_);
  }
  if (from._internal_has_vector3value()) {
    _this->_impl_.vector3value_ = new ::message::ProtoBuffVector3(*from._impl_.vector3value_);
  }
  ::memcpy(&_impl_.valuetype_, &from._impl_.valuetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.floatvalue_) -
    reinterpret_cast<char*>(&_impl_.valuetype_)) + sizeof(_impl_.floatvalue_));
  // @@protoc_insertion_point(copy_constructor:message.UGCVarValueData)
}

inline void UGCVarValueData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arrayvalue_){arena}
    , decltype(_impl_.stringvalue_){}
    , decltype(_impl_.funcvalue_){nullptr}
    , decltype(_impl_.vector3value_){nullptr}
    , decltype(_impl_.valuetype_){0}
    , decltype(_impl_.boolvalue_){false}
    , decltype(_impl_.intvalue_){0}
    , decltype(_impl_.floatvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCVarValueData::~UGCVarValueData() {
  // @@protoc_insertion_point(destructor:message.UGCVarValueData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCVarValueData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arrayvalue_.~RepeatedPtrField();
  _impl_.stringvalue_.Destroy();
  if (this != internal_default_instance()) delete _impl_.funcvalue_;
  if (this != internal_default_instance()) delete _impl_.vector3value_;
}

void UGCVarValueData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCVarValueData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCVarValueData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arrayvalue_.Clear();
  _impl_.stringvalue_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.funcvalue_ != nullptr) {
    delete _impl_.funcvalue_;
  }
  _impl_.funcvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vector3value_ != nullptr) {
    delete _impl_.vector3value_;
  }
  _impl_.vector3value_ = nullptr;
  ::memset(&_impl_.valuetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.floatvalue_) -
      reinterpret_cast<char*>(&_impl_.valuetype_)) + sizeof(_impl_.floatvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCVarValueData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.EUGCValueType ValueType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_valuetype(static_cast<::message::EUGCValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCFuncCallerData FuncValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_funcvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool BoolValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.boolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IntValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.intvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float FloatValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.floatvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string StringValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCVarValueData.StringValue"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 Vector3Value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector3value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCVarValueData ArrayValue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrayvalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCVarValueData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCVarValueData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.EUGCValueType ValueType = 1;
  if (this->_internal_valuetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_valuetype(), target);
  }

  // .message.UGCFuncCallerData FuncValue = 2;
  if (this->_internal_has_funcvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::funcvalue(this),
        _Internal::funcvalue(this).GetCachedSize(), target, stream);
  }

  // bool BoolValue = 3;
  if (this->_internal_boolvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_boolvalue(), target);
  }

  // int32 IntValue = 4;
  if (this->_internal_intvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_intvalue(), target);
  }

  // float FloatValue = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_floatvalue = this->_internal_floatvalue();
  uint32_t raw_floatvalue;
  memcpy(&raw_floatvalue, &tmp_floatvalue, sizeof(tmp_floatvalue));
  if (raw_floatvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_floatvalue(), target);
  }

  // string StringValue = 6;
  if (!this->_internal_stringvalue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCVarValueData.StringValue");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_stringvalue(), target);
  }

  // .message.ProtoBuffVector3 Vector3Value = 7;
  if (this->_internal_has_vector3value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::vector3value(this),
        _Internal::vector3value(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCVarValueData ArrayValue = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arrayvalue_size()); i < n; i++) {
    const auto& repfield = this->_internal_arrayvalue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCVarValueData)
  return target;
}

size_t UGCVarValueData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCVarValueData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCVarValueData ArrayValue = 8;
  total_size += 1UL * this->_internal_arrayvalue_size();
  for (const auto& msg : this->_impl_.arrayvalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string StringValue = 6;
  if (!this->_internal_stringvalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stringvalue());
  }

  // .message.UGCFuncCallerData FuncValue = 2;
  if (this->_internal_has_funcvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.funcvalue_);
  }

  // .message.ProtoBuffVector3 Vector3Value = 7;
  if (this->_internal_has_vector3value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vector3value_);
  }

  // .message.EUGCValueType ValueType = 1;
  if (this->_internal_valuetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_valuetype());
  }

  // bool BoolValue = 3;
  if (this->_internal_boolvalue() != 0) {
    total_size += 1 + 1;
  }

  // int32 IntValue = 4;
  if (this->_internal_intvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_intvalue());
  }

  // float FloatValue = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_floatvalue = this->_internal_floatvalue();
  uint32_t raw_floatvalue;
  memcpy(&raw_floatvalue, &tmp_floatvalue, sizeof(tmp_floatvalue));
  if (raw_floatvalue != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCVarValueData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCVarValueData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCVarValueData::GetClassData() const { return &_class_data_; }


void UGCVarValueData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCVarValueData*>(&to_msg);
  auto& from = static_cast<const UGCVarValueData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCVarValueData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arrayvalue_.MergeFrom(from._impl_.arrayvalue_);
  if (!from._internal_stringvalue().empty()) {
    _this->_internal_set_stringvalue(from._internal_stringvalue());
  }
  if (from._internal_has_funcvalue()) {
    _this->_internal_mutable_funcvalue()->::message::UGCFuncCallerData::MergeFrom(
        from._internal_funcvalue());
  }
  if (from._internal_has_vector3value()) {
    _this->_internal_mutable_vector3value()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_vector3value());
  }
  if (from._internal_valuetype() != 0) {
    _this->_internal_set_valuetype(from._internal_valuetype());
  }
  if (from._internal_boolvalue() != 0) {
    _this->_internal_set_boolvalue(from._internal_boolvalue());
  }
  if (from._internal_intvalue() != 0) {
    _this->_internal_set_intvalue(from._internal_intvalue());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_floatvalue = from._internal_floatvalue();
  uint32_t raw_floatvalue;
  memcpy(&raw_floatvalue, &tmp_floatvalue, sizeof(tmp_floatvalue));
  if (raw_floatvalue != 0) {
    _this->_internal_set_floatvalue(from._internal_floatvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCVarValueData::CopyFrom(const UGCVarValueData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCVarValueData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCVarValueData::IsInitialized() const {
  return true;
}

void UGCVarValueData::InternalSwap(UGCVarValueData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arrayvalue_.InternalSwap(&other->_impl_.arrayvalue_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stringvalue_, lhs_arena,
      &other->_impl_.stringvalue_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCVarValueData, _impl_.floatvalue_)
      + sizeof(UGCVarValueData::_impl_.floatvalue_)
      - PROTOBUF_FIELD_OFFSET(UGCVarValueData, _impl_.funcvalue_)>(
          reinterpret_cast<char*>(&_impl_.funcvalue_),
          reinterpret_cast<char*>(&other->_impl_.funcvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCVarValueData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[12]);
}

// ===================================================================

class UGCFuncCallerData::_Internal {
 public:
};

UGCFuncCallerData::UGCFuncCallerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCFuncCallerData)
}
UGCFuncCallerData::UGCFuncCallerData(const UGCFuncCallerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCFuncCallerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.subcallerdata_){from._impl_.subcallerdata_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.useupvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.useupvalue_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.useupvalue_));
  // @@protoc_insertion_point(copy_constructor:message.UGCFuncCallerData)
}

inline void UGCFuncCallerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.subcallerdata_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.useupvalue_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCFuncCallerData::~UGCFuncCallerData() {
  // @@protoc_insertion_point(destructor:message.UGCFuncCallerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCFuncCallerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.subcallerdata_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void UGCFuncCallerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCFuncCallerData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCFuncCallerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.subcallerdata_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.useupvalue_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.useupvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCFuncCallerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCFuncCallerData.ID"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCFuncCallerData.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCVarValueData Params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCFuncCallerData SubCallerData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subcallerdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool UseUpvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.useupvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCFuncCallerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCFuncCallerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCFuncCallerData.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCFuncCallerData.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 Type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // repeated .message.UGCVarValueData Params = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCFuncCallerData SubCallerData = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subcallerdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_subcallerdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool UseUpvalue = 6;
  if (this->_internal_useupvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_useupvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCFuncCallerData)
  return target;
}

size_t UGCFuncCallerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCFuncCallerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCVarValueData Params = 4;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCFuncCallerData SubCallerData = 5;
  total_size += 1UL * this->_internal_subcallerdata_size();
  for (const auto& msg : this->_impl_.subcallerdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 Type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // bool UseUpvalue = 6;
  if (this->_internal_useupvalue() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCFuncCallerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCFuncCallerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCFuncCallerData::GetClassData() const { return &_class_data_; }


void UGCFuncCallerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCFuncCallerData*>(&to_msg);
  auto& from = static_cast<const UGCFuncCallerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCFuncCallerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  _this->_impl_.subcallerdata_.MergeFrom(from._impl_.subcallerdata_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_useupvalue() != 0) {
    _this->_internal_set_useupvalue(from._internal_useupvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCFuncCallerData::CopyFrom(const UGCFuncCallerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCFuncCallerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCFuncCallerData::IsInitialized() const {
  return true;
}

void UGCFuncCallerData::InternalSwap(UGCFuncCallerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  _impl_.subcallerdata_.InternalSwap(&other->_impl_.subcallerdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCFuncCallerData, _impl_.useupvalue_)
      + sizeof(UGCFuncCallerData::_impl_.useupvalue_)
      - PROTOBUF_FIELD_OFFSET(UGCFuncCallerData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCFuncCallerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[13]);
}

// ===================================================================

class UGCVarDefineData::_Internal {
 public:
  static const ::message::UGCVarValueData& value(const UGCVarDefineData* msg);
};

const ::message::UGCVarValueData&
UGCVarDefineData::_Internal::value(const UGCVarDefineData* msg) {
  return *msg->_impl_.value_;
}
UGCVarDefineData::UGCVarDefineData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCVarDefineData)
}
UGCVarDefineData::UGCVarDefineData(const UGCVarDefineData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCVarDefineData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::message::UGCVarValueData(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCVarDefineData)
}

inline void UGCVarDefineData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCVarDefineData::~UGCVarDefineData() {
  // @@protoc_insertion_point(destructor:message.UGCVarDefineData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCVarDefineData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void UGCVarDefineData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCVarDefineData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCVarDefineData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCVarDefineData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCVarDefineData.ID"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCVarDefineData.Name"));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCVarValueData Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCVarDefineData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCVarDefineData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCVarDefineData.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCVarDefineData.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .message.UGCVarValueData Value = 3;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCVarDefineData)
  return target;
}

size_t UGCVarDefineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCVarDefineData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .message.UGCVarValueData Value = 3;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCVarDefineData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCVarDefineData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCVarDefineData::GetClassData() const { return &_class_data_; }


void UGCVarDefineData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCVarDefineData*>(&to_msg);
  auto& from = static_cast<const UGCVarDefineData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCVarDefineData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::message::UGCVarValueData::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCVarDefineData::CopyFrom(const UGCVarDefineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCVarDefineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCVarDefineData::IsInitialized() const {
  return true;
}

void UGCVarDefineData::InternalSwap(UGCVarDefineData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCVarDefineData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[14]);
}

// ===================================================================

class UGCRuleData::_Internal {
 public:
  static const ::message::UGCFuncCallerData& callerdata(const UGCRuleData* msg);
};

const ::message::UGCFuncCallerData&
UGCRuleData::_Internal::callerdata(const UGCRuleData* msg) {
  return *msg->_impl_.callerdata_;
}
UGCRuleData::UGCRuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCRuleData)
}
UGCRuleData::UGCRuleData(const UGCRuleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCRuleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.callerdata_){nullptr}
    , decltype(_impl_.eventtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_callerdata()) {
    _this->_impl_.callerdata_ = new ::message::UGCFuncCallerData(*from._impl_.callerdata_);
  }
  _this->_impl_.eventtype_ = from._impl_.eventtype_;
  // @@protoc_insertion_point(copy_constructor:message.UGCRuleData)
}

inline void UGCRuleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.callerdata_){nullptr}
    , decltype(_impl_.eventtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCRuleData::~UGCRuleData() {
  // @@protoc_insertion_point(destructor:message.UGCRuleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCRuleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.callerdata_;
}

void UGCRuleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCRuleData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCRuleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.callerdata_ != nullptr) {
    delete _impl_.callerdata_;
  }
  _impl_.callerdata_ = nullptr;
  _impl_.eventtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCRuleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 EventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.eventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCFuncCallerData CallerData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_callerdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCRuleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCRuleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 EventType = 1;
  if (this->_internal_eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventtype(), target);
  }

  // .message.UGCFuncCallerData CallerData = 2;
  if (this->_internal_has_callerdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::callerdata(this),
        _Internal::callerdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCRuleData)
  return target;
}

size_t UGCRuleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCRuleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCFuncCallerData CallerData = 2;
  if (this->_internal_has_callerdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.callerdata_);
  }

  // int32 EventType = 1;
  if (this->_internal_eventtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCRuleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCRuleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCRuleData::GetClassData() const { return &_class_data_; }


void UGCRuleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCRuleData*>(&to_msg);
  auto& from = static_cast<const UGCRuleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCRuleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_callerdata()) {
    _this->_internal_mutable_callerdata()->::message::UGCFuncCallerData::MergeFrom(
        from._internal_callerdata());
  }
  if (from._internal_eventtype() != 0) {
    _this->_internal_set_eventtype(from._internal_eventtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCRuleData::CopyFrom(const UGCRuleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCRuleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCRuleData::IsInitialized() const {
  return true;
}

void UGCRuleData::InternalSwap(UGCRuleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCRuleData, _impl_.eventtype_)
      + sizeof(UGCRuleData::_impl_.eventtype_)
      - PROTOBUF_FIELD_OFFSET(UGCRuleData, _impl_.callerdata_)>(
          reinterpret_cast<char*>(&_impl_.callerdata_),
          reinterpret_cast<char*>(&other->_impl_.callerdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCRuleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[15]);
}

// ===================================================================

class UGCGraphData::_Internal {
 public:
};

UGCGraphData::UGCGraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCGraphData)
}
UGCGraphData::UGCGraphData(const UGCGraphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCGraphData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){from._impl_.rules_}
    , decltype(_impl_.variables_){from._impl_.variables_}
    , decltype(_impl_.functions_){from._impl_.functions_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCGraphData)
}

inline void UGCGraphData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){arena}
    , decltype(_impl_.variables_){arena}
    , decltype(_impl_.functions_){arena}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCGraphData::~UGCGraphData() {
  // @@protoc_insertion_point(destructor:message.UGCGraphData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCGraphData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rules_.~RepeatedPtrField();
  _impl_.variables_.~RepeatedPtrField();
  _impl_.functions_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void UGCGraphData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCGraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCGraphData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  _impl_.variables_.Clear();
  _impl_.functions_.Clear();
  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCGraphData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCGraphData.ID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCRuleData Rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCVarDefineData Variables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCFuncCallerData Functions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_functions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCGraphData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCGraphData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCGraphData.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .message.UGCRuleData Rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCVarDefineData Variables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCFuncCallerData Functions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_functions_size()); i < n; i++) {
    const auto& repfield = this->_internal_functions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCGraphData)
  return target;
}

size_t UGCGraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCGraphData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCRuleData Rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_impl_.rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCVarDefineData Variables = 3;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_impl_.variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCFuncCallerData Functions = 4;
  total_size += 1UL * this->_internal_functions_size();
  for (const auto& msg : this->_impl_.functions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCGraphData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCGraphData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCGraphData::GetClassData() const { return &_class_data_; }


void UGCGraphData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCGraphData*>(&to_msg);
  auto& from = static_cast<const UGCGraphData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCGraphData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rules_.MergeFrom(from._impl_.rules_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _this->_impl_.functions_.MergeFrom(from._impl_.functions_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCGraphData::CopyFrom(const UGCGraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCGraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCGraphData::IsInitialized() const {
  return true;
}

void UGCGraphData::InternalSwap(UGCGraphData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  _impl_.functions_.InternalSwap(&other->_impl_.functions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCGraphData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[16]);
}

// ===================================================================

class UGCCustomReplicationDataItemInstance::_Internal {
 public:
  static const ::message::UGCVarValueData& value(const UGCCustomReplicationDataItemInstance* msg);
};

const ::message::UGCVarValueData&
UGCCustomReplicationDataItemInstance::_Internal::value(const UGCCustomReplicationDataItemInstance* msg) {
  return *msg->_impl_.value_;
}
UGCCustomReplicationDataItemInstance::UGCCustomReplicationDataItemInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCustomReplicationDataItemInstance)
}
UGCCustomReplicationDataItemInstance::UGCCustomReplicationDataItemInstance(const UGCCustomReplicationDataItemInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCustomReplicationDataItemInstance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::message::UGCVarValueData(*from._impl_.value_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:message.UGCCustomReplicationDataItemInstance)
}

inline void UGCCustomReplicationDataItemInstance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCCustomReplicationDataItemInstance::~UGCCustomReplicationDataItemInstance() {
  // @@protoc_insertion_point(destructor:message.UGCCustomReplicationDataItemInstance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCustomReplicationDataItemInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
}

void UGCCustomReplicationDataItemInstance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCustomReplicationDataItemInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCustomReplicationDataItemInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCustomReplicationDataItemInstance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCVarValueData Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCustomReplicationDataItemInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCustomReplicationDataItemInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // .message.UGCVarValueData Value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCustomReplicationDataItemInstance)
  return target;
}

size_t UGCCustomReplicationDataItemInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCustomReplicationDataItemInstance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCVarValueData Value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCustomReplicationDataItemInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCustomReplicationDataItemInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCustomReplicationDataItemInstance::GetClassData() const { return &_class_data_; }


void UGCCustomReplicationDataItemInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCustomReplicationDataItemInstance*>(&to_msg);
  auto& from = static_cast<const UGCCustomReplicationDataItemInstance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCustomReplicationDataItemInstance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::message::UGCVarValueData::MergeFrom(
        from._internal_value());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCustomReplicationDataItemInstance::CopyFrom(const UGCCustomReplicationDataItemInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCustomReplicationDataItemInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCustomReplicationDataItemInstance::IsInitialized() const {
  return true;
}

void UGCCustomReplicationDataItemInstance::InternalSwap(UGCCustomReplicationDataItemInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCCustomReplicationDataItemInstance, _impl_.index_)
      + sizeof(UGCCustomReplicationDataItemInstance::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(UGCCustomReplicationDataItemInstance, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCustomReplicationDataItemInstance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[17]);
}

// ===================================================================

class UGCLogicEntityData::_Internal {
 public:
};

UGCLogicEntityData::UGCLogicEntityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCLogicEntityData)
}
UGCLogicEntityData::UGCLogicEntityData(const UGCLogicEntityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCLogicEntityData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.graphids_){from._impl_.graphids_}
    , decltype(_impl_.repdataitem_){from._impl_.repdataitem_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:message.UGCLogicEntityData)
}

inline void UGCLogicEntityData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.graphids_){arena}
    , decltype(_impl_.repdataitem_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCLogicEntityData::~UGCLogicEntityData() {
  // @@protoc_insertion_point(destructor:message.UGCLogicEntityData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCLogicEntityData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.graphids_.~RepeatedPtrField();
  _impl_.repdataitem_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void UGCLogicEntityData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCLogicEntityData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCLogicEntityData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.graphids_.Clear();
  _impl_.repdataitem_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCLogicEntityData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityData.ID"));
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCLogicEntityType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::message::EUGCLogicEntityType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string GraphIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_graphids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityData.GraphIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationDataItemInstance RepDataItem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repdataitem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCLogicEntityData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCLogicEntityData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityData.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .message.EUGCLogicEntityType Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated string GraphIDs = 3;
  for (int i = 0, n = this->_internal_graphids_size(); i < n; i++) {
    const auto& s = this->_internal_graphids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityData.GraphIDs");
    target = stream->WriteString(3, s, target);
  }

  // repeated .message.UGCCustomReplicationDataItemInstance RepDataItem = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repdataitem_size()); i < n; i++) {
    const auto& repfield = this->_internal_repdataitem(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCLogicEntityData)
  return target;
}

size_t UGCLogicEntityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCLogicEntityData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string GraphIDs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.graphids_.size());
  for (int i = 0, n = _impl_.graphids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.graphids_.Get(i));
  }

  // repeated .message.UGCCustomReplicationDataItemInstance RepDataItem = 4;
  total_size += 1UL * this->_internal_repdataitem_size();
  for (const auto& msg : this->_impl_.repdataitem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .message.EUGCLogicEntityType Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCLogicEntityData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCLogicEntityData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCLogicEntityData::GetClassData() const { return &_class_data_; }


void UGCLogicEntityData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCLogicEntityData*>(&to_msg);
  auto& from = static_cast<const UGCLogicEntityData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCLogicEntityData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.graphids_.MergeFrom(from._impl_.graphids_);
  _this->_impl_.repdataitem_.MergeFrom(from._impl_.repdataitem_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCLogicEntityData::CopyFrom(const UGCLogicEntityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCLogicEntityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCLogicEntityData::IsInitialized() const {
  return true;
}

void UGCLogicEntityData::InternalSwap(UGCLogicEntityData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.graphids_.InternalSwap(&other->_impl_.graphids_);
  _impl_.repdataitem_.InternalSwap(&other->_impl_.repdataitem_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCLogicEntityData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[18]);
}

// ===================================================================

class UGCCustomReplicationDataItem::_Internal {
 public:
  static const ::message::UGCVarValueData& value(const UGCCustomReplicationDataItem* msg);
};

const ::message::UGCVarValueData&
UGCCustomReplicationDataItem::_Internal::value(const UGCCustomReplicationDataItem* msg) {
  return *msg->_impl_.value_;
}
UGCCustomReplicationDataItem::UGCCustomReplicationDataItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCustomReplicationDataItem)
}
UGCCustomReplicationDataItem::UGCCustomReplicationDataItem(const UGCCustomReplicationDataItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCustomReplicationDataItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::message::UGCVarValueData(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCCustomReplicationDataItem)
}

inline void UGCCustomReplicationDataItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCCustomReplicationDataItem::~UGCCustomReplicationDataItem() {
  // @@protoc_insertion_point(destructor:message.UGCCustomReplicationDataItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCustomReplicationDataItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void UGCCustomReplicationDataItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCustomReplicationDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCustomReplicationDataItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCustomReplicationDataItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCCustomReplicationDataItem.Name"));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCVarValueData Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCustomReplicationDataItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCustomReplicationDataItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCCustomReplicationDataItem.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .message.UGCVarValueData Value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCustomReplicationDataItem)
  return target;
}

size_t UGCCustomReplicationDataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCustomReplicationDataItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .message.UGCVarValueData Value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCustomReplicationDataItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCustomReplicationDataItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCustomReplicationDataItem::GetClassData() const { return &_class_data_; }


void UGCCustomReplicationDataItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCustomReplicationDataItem*>(&to_msg);
  auto& from = static_cast<const UGCCustomReplicationDataItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCustomReplicationDataItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::message::UGCVarValueData::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCustomReplicationDataItem::CopyFrom(const UGCCustomReplicationDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCustomReplicationDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCustomReplicationDataItem::IsInitialized() const {
  return true;
}

void UGCCustomReplicationDataItem::InternalSwap(UGCCustomReplicationDataItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCustomReplicationDataItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[19]);
}

// ===================================================================

class UGCCustomReplicationData::_Internal {
 public:
};

UGCCustomReplicationData::UGCCustomReplicationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCustomReplicationData)
}
UGCCustomReplicationData::UGCCustomReplicationData(const UGCCustomReplicationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCustomReplicationData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemdata_){from._impl_.itemdata_}
    , decltype(_impl_.entitytype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.entitytype_ = from._impl_.entitytype_;
  // @@protoc_insertion_point(copy_constructor:message.UGCCustomReplicationData)
}

inline void UGCCustomReplicationData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemdata_){arena}
    , decltype(_impl_.entitytype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCCustomReplicationData::~UGCCustomReplicationData() {
  // @@protoc_insertion_point(destructor:message.UGCCustomReplicationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCustomReplicationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemdata_.~RepeatedPtrField();
}

void UGCCustomReplicationData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCustomReplicationData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCustomReplicationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemdata_.Clear();
  _impl_.entitytype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCustomReplicationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.EUGCLogicEntityType EntityType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entitytype(static_cast<::message::EUGCLogicEntityType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationDataItem ItemData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCustomReplicationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCustomReplicationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.EUGCLogicEntityType EntityType = 1;
  if (this->_internal_entitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_entitytype(), target);
  }

  // repeated .message.UGCCustomReplicationDataItem ItemData = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_itemdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_itemdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCustomReplicationData)
  return target;
}

size_t UGCCustomReplicationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCustomReplicationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCCustomReplicationDataItem ItemData = 2;
  total_size += 1UL * this->_internal_itemdata_size();
  for (const auto& msg : this->_impl_.itemdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.EUGCLogicEntityType EntityType = 1;
  if (this->_internal_entitytype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entitytype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCustomReplicationData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCustomReplicationData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCustomReplicationData::GetClassData() const { return &_class_data_; }


void UGCCustomReplicationData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCustomReplicationData*>(&to_msg);
  auto& from = static_cast<const UGCCustomReplicationData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCustomReplicationData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.itemdata_.MergeFrom(from._impl_.itemdata_);
  if (from._internal_entitytype() != 0) {
    _this->_internal_set_entitytype(from._internal_entitytype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCustomReplicationData::CopyFrom(const UGCCustomReplicationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCustomReplicationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCustomReplicationData::IsInitialized() const {
  return true;
}

void UGCCustomReplicationData::InternalSwap(UGCCustomReplicationData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.itemdata_.InternalSwap(&other->_impl_.itemdata_);
  swap(_impl_.entitytype_, other->_impl_.entitytype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCustomReplicationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[20]);
}

// ===================================================================

class UGCLevelData::_Internal {
 public:
  static const ::message::UGCWorkflowData& workflow(const UGCLevelData* msg);
  static const ::message::UGCMapRuntimeData& mapdata(const UGCLevelData* msg);
  static const ::message::UGCHudPrefabDatas& hudprefabdata(const UGCLevelData* msg);
};

const ::message::UGCWorkflowData&
UGCLevelData::_Internal::workflow(const UGCLevelData* msg) {
  return *msg->_impl_.workflow_;
}
const ::message::UGCMapRuntimeData&
UGCLevelData::_Internal::mapdata(const UGCLevelData* msg) {
  return *msg->_impl_.mapdata_;
}
const ::message::UGCHudPrefabDatas&
UGCLevelData::_Internal::hudprefabdata(const UGCLevelData* msg) {
  return *msg->_impl_.hudprefabdata_;
}
UGCLevelData::UGCLevelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCLevelData)
}
UGCLevelData::UGCLevelData(const UGCLevelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCLevelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.graphdata_){from._impl_.graphdata_}
    , decltype(_impl_.logicentitydatas_){from._impl_.logicentitydatas_}
    , decltype(_impl_.entityreplicationdata_){from._impl_.entityreplicationdata_}
    , decltype(_impl_.workflow_){nullptr}
    , decltype(_impl_.mapdata_){nullptr}
    , decltype(_impl_.hudprefabdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workflow()) {
    _this->_impl_.workflow_ = new ::message::UGCWorkflowData(*from._impl_.workflow_);
  }
  if (from._internal_has_mapdata()) {
    _this->_impl_.mapdata_ = new ::message::UGCMapRuntimeData(*from._impl_.mapdata_);
  }
  if (from._internal_has_hudprefabdata()) {
    _this->_impl_.hudprefabdata_ = new ::message::UGCHudPrefabDatas(*from._impl_.hudprefabdata_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCLevelData)
}

inline void UGCLevelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.graphdata_){arena}
    , decltype(_impl_.logicentitydatas_){arena}
    , decltype(_impl_.entityreplicationdata_){arena}
    , decltype(_impl_.workflow_){nullptr}
    , decltype(_impl_.mapdata_){nullptr}
    , decltype(_impl_.hudprefabdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCLevelData::~UGCLevelData() {
  // @@protoc_insertion_point(destructor:message.UGCLevelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCLevelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.graphdata_.~RepeatedPtrField();
  _impl_.logicentitydatas_.~RepeatedPtrField();
  _impl_.entityreplicationdata_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.workflow_;
  if (this != internal_default_instance()) delete _impl_.mapdata_;
  if (this != internal_default_instance()) delete _impl_.hudprefabdata_;
}

void UGCLevelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCLevelData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCLevelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.graphdata_.Clear();
  _impl_.logicentitydatas_.Clear();
  _impl_.entityreplicationdata_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mapdata_ != nullptr) {
    delete _impl_.mapdata_;
  }
  _impl_.mapdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hudprefabdata_ != nullptr) {
    delete _impl_.hudprefabdata_;
  }
  _impl_.hudprefabdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCLevelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCGraphData GraphData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graphdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCWorkflowData Workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCLogicEntityData LogicEntityDatas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logicentitydatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationData EntityReplicationData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entityreplicationdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCMapRuntimeData MapData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudPrefabDatas HudPrefabData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hudprefabdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCLevelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCLevelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCGraphData GraphData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_graphdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_graphdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.UGCWorkflowData Workflow = 2;
  if (this->_internal_has_workflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::workflow(this),
        _Internal::workflow(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCLogicEntityData LogicEntityDatas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logicentitydatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_logicentitydatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCCustomReplicationData EntityReplicationData = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entityreplicationdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_entityreplicationdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.UGCMapRuntimeData MapData = 5;
  if (this->_internal_has_mapdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mapdata(this),
        _Internal::mapdata(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudPrefabDatas HudPrefabData = 6;
  if (this->_internal_has_hudprefabdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::hudprefabdata(this),
        _Internal::hudprefabdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCLevelData)
  return target;
}

size_t UGCLevelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCLevelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCGraphData GraphData = 1;
  total_size += 1UL * this->_internal_graphdata_size();
  for (const auto& msg : this->_impl_.graphdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCLogicEntityData LogicEntityDatas = 3;
  total_size += 1UL * this->_internal_logicentitydatas_size();
  for (const auto& msg : this->_impl_.logicentitydatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCCustomReplicationData EntityReplicationData = 4;
  total_size += 1UL * this->_internal_entityreplicationdata_size();
  for (const auto& msg : this->_impl_.entityreplicationdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.UGCWorkflowData Workflow = 2;
  if (this->_internal_has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflow_);
  }

  // .message.UGCMapRuntimeData MapData = 5;
  if (this->_internal_has_mapdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mapdata_);
  }

  // .message.UGCHudPrefabDatas HudPrefabData = 6;
  if (this->_internal_has_hudprefabdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hudprefabdata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCLevelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCLevelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCLevelData::GetClassData() const { return &_class_data_; }


void UGCLevelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCLevelData*>(&to_msg);
  auto& from = static_cast<const UGCLevelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCLevelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.graphdata_.MergeFrom(from._impl_.graphdata_);
  _this->_impl_.logicentitydatas_.MergeFrom(from._impl_.logicentitydatas_);
  _this->_impl_.entityreplicationdata_.MergeFrom(from._impl_.entityreplicationdata_);
  if (from._internal_has_workflow()) {
    _this->_internal_mutable_workflow()->::message::UGCWorkflowData::MergeFrom(
        from._internal_workflow());
  }
  if (from._internal_has_mapdata()) {
    _this->_internal_mutable_mapdata()->::message::UGCMapRuntimeData::MergeFrom(
        from._internal_mapdata());
  }
  if (from._internal_has_hudprefabdata()) {
    _this->_internal_mutable_hudprefabdata()->::message::UGCHudPrefabDatas::MergeFrom(
        from._internal_hudprefabdata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCLevelData::CopyFrom(const UGCLevelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCLevelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCLevelData::IsInitialized() const {
  return true;
}

void UGCLevelData::InternalSwap(UGCLevelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.graphdata_.InternalSwap(&other->_impl_.graphdata_);
  _impl_.logicentitydatas_.InternalSwap(&other->_impl_.logicentitydatas_);
  _impl_.entityreplicationdata_.InternalSwap(&other->_impl_.entityreplicationdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCLevelData, _impl_.hudprefabdata_)
      + sizeof(UGCLevelData::_impl_.hudprefabdata_)
      - PROTOBUF_FIELD_OFFSET(UGCLevelData, _impl_.workflow_)>(
          reinterpret_cast<char*>(&_impl_.workflow_),
          reinterpret_cast<char*>(&other->_impl_.workflow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCLevelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[21]);
}

// ===================================================================

class UGCLogicEntityDataV2::_Internal {
 public:
};

UGCLogicEntityDataV2::UGCLogicEntityDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCLogicEntityDataV2)
}
UGCLogicEntityDataV2::UGCLogicEntityDataV2(const UGCLogicEntityDataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCLogicEntityDataV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.graphids_){from._impl_.graphids_}
    , decltype(_impl_.repdataitem_){from._impl_.repdataitem_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:message.UGCLogicEntityDataV2)
}

inline void UGCLogicEntityDataV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.graphids_){arena}
    , decltype(_impl_.repdataitem_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCLogicEntityDataV2::~UGCLogicEntityDataV2() {
  // @@protoc_insertion_point(destructor:message.UGCLogicEntityDataV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCLogicEntityDataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.graphids_.~RepeatedPtrField();
  _impl_.repdataitem_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void UGCLogicEntityDataV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCLogicEntityDataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCLogicEntityDataV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.graphids_.Clear();
  _impl_.repdataitem_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCLogicEntityDataV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityDataV2.ID"));
        } else
          goto handle_unusual;
        continue;
      // int32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string GraphIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_graphids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityDataV2.GraphIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repdataitem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCLogicEntityDataV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCLogicEntityDataV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityDataV2.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // repeated string GraphIDs = 3;
  for (int i = 0, n = this->_internal_graphids_size(); i < n; i++) {
    const auto& s = this->_internal_graphids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityDataV2.GraphIDs");
    target = stream->WriteString(3, s, target);
  }

  // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repdataitem_size()); i < n; i++) {
    const auto& repfield = this->_internal_repdataitem(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCLogicEntityDataV2)
  return target;
}

size_t UGCLogicEntityDataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCLogicEntityDataV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string GraphIDs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.graphids_.size());
  for (int i = 0, n = _impl_.graphids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.graphids_.Get(i));
  }

  // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
  total_size += 1UL * this->_internal_repdataitem_size();
  for (const auto& msg : this->_impl_.repdataitem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 Type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCLogicEntityDataV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCLogicEntityDataV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCLogicEntityDataV2::GetClassData() const { return &_class_data_; }


void UGCLogicEntityDataV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCLogicEntityDataV2*>(&to_msg);
  auto& from = static_cast<const UGCLogicEntityDataV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCLogicEntityDataV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.graphids_.MergeFrom(from._impl_.graphids_);
  _this->_impl_.repdataitem_.MergeFrom(from._impl_.repdataitem_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCLogicEntityDataV2::CopyFrom(const UGCLogicEntityDataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCLogicEntityDataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCLogicEntityDataV2::IsInitialized() const {
  return true;
}

void UGCLogicEntityDataV2::InternalSwap(UGCLogicEntityDataV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.graphids_.InternalSwap(&other->_impl_.graphids_);
  _impl_.repdataitem_.InternalSwap(&other->_impl_.repdataitem_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCLogicEntityDataV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[22]);
}

// ===================================================================

class UGCLevelDataV2::_Internal {
 public:
  static const ::message::UGCWorkflowData& workflow(const UGCLevelDataV2* msg);
  static const ::message::UGCHudPrefabDatas& hudprefabdata(const UGCLevelDataV2* msg);
  static const ::message::UGCTypeTree& customtypemap(const UGCLevelDataV2* msg);
  static const ::message::SceneEditModeProtoData& modesetting(const UGCLevelDataV2* msg);
  static const ::message::UGCAllSceneRuntimeData& allscenedata(const UGCLevelDataV2* msg);
};

const ::message::UGCWorkflowData&
UGCLevelDataV2::_Internal::workflow(const UGCLevelDataV2* msg) {
  return *msg->_impl_.workflow_;
}
const ::message::UGCHudPrefabDatas&
UGCLevelDataV2::_Internal::hudprefabdata(const UGCLevelDataV2* msg) {
  return *msg->_impl_.hudprefabdata_;
}
const ::message::UGCTypeTree&
UGCLevelDataV2::_Internal::customtypemap(const UGCLevelDataV2* msg) {
  return *msg->_impl_.customtypemap_;
}
const ::message::SceneEditModeProtoData&
UGCLevelDataV2::_Internal::modesetting(const UGCLevelDataV2* msg) {
  return *msg->_impl_.modesetting_;
}
const ::message::UGCAllSceneRuntimeData&
UGCLevelDataV2::_Internal::allscenedata(const UGCLevelDataV2* msg) {
  return *msg->_impl_.allscenedata_;
}
UGCLevelDataV2::UGCLevelDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCLevelDataV2)
}
UGCLevelDataV2::UGCLevelDataV2(const UGCLevelDataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCLevelDataV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.graphdata_){from._impl_.graphdata_}
    , decltype(_impl_.logicentitydatas_){from._impl_.logicentitydatas_}
    , decltype(_impl_.entityreplicationdata_){from._impl_.entityreplicationdata_}
    , decltype(_impl_.workflow_){nullptr}
    , decltype(_impl_.hudprefabdata_){nullptr}
    , decltype(_impl_.customtypemap_){nullptr}
    , decltype(_impl_.modesetting_){nullptr}
    , decltype(_impl_.allscenedata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workflow()) {
    _this->_impl_.workflow_ = new ::message::UGCWorkflowData(*from._impl_.workflow_);
  }
  if (from._internal_has_hudprefabdata()) {
    _this->_impl_.hudprefabdata_ = new ::message::UGCHudPrefabDatas(*from._impl_.hudprefabdata_);
  }
  if (from._internal_has_customtypemap()) {
    _this->_impl_.customtypemap_ = new ::message::UGCTypeTree(*from._impl_.customtypemap_);
  }
  if (from._internal_has_modesetting()) {
    _this->_impl_.modesetting_ = new ::message::SceneEditModeProtoData(*from._impl_.modesetting_);
  }
  if (from._internal_has_allscenedata()) {
    _this->_impl_.allscenedata_ = new ::message::UGCAllSceneRuntimeData(*from._impl_.allscenedata_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCLevelDataV2)
}

inline void UGCLevelDataV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.graphdata_){arena}
    , decltype(_impl_.logicentitydatas_){arena}
    , decltype(_impl_.entityreplicationdata_){arena}
    , decltype(_impl_.workflow_){nullptr}
    , decltype(_impl_.hudprefabdata_){nullptr}
    , decltype(_impl_.customtypemap_){nullptr}
    , decltype(_impl_.modesetting_){nullptr}
    , decltype(_impl_.allscenedata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCLevelDataV2::~UGCLevelDataV2() {
  // @@protoc_insertion_point(destructor:message.UGCLevelDataV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCLevelDataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.graphdata_.~RepeatedPtrField();
  _impl_.logicentitydatas_.~RepeatedPtrField();
  _impl_.entityreplicationdata_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.workflow_;
  if (this != internal_default_instance()) delete _impl_.hudprefabdata_;
  if (this != internal_default_instance()) delete _impl_.customtypemap_;
  if (this != internal_default_instance()) delete _impl_.modesetting_;
  if (this != internal_default_instance()) delete _impl_.allscenedata_;
}

void UGCLevelDataV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCLevelDataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCLevelDataV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.graphdata_.Clear();
  _impl_.logicentitydatas_.Clear();
  _impl_.entityreplicationdata_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hudprefabdata_ != nullptr) {
    delete _impl_.hudprefabdata_;
  }
  _impl_.hudprefabdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.customtypemap_ != nullptr) {
    delete _impl_.customtypemap_;
  }
  _impl_.customtypemap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modesetting_ != nullptr) {
    delete _impl_.modesetting_;
  }
  _impl_.modesetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.allscenedata_ != nullptr) {
    delete _impl_.allscenedata_;
  }
  _impl_.allscenedata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCLevelDataV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCGraphDataV2 GraphData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graphdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCWorkflowData Workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCLogicEntityDataV2 LogicEntityDatas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logicentitydatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationDataV2 EntityReplicationData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entityreplicationdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudPrefabDatas HudPrefabData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hudprefabdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCTypeTree CustomTypeMap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_customtypemap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.SceneEditModeProtoData ModeSetting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_modesetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCAllSceneRuntimeData AllSceneData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_allscenedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCLevelDataV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCLevelDataV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCGraphDataV2 GraphData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_graphdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_graphdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.UGCWorkflowData Workflow = 2;
  if (this->_internal_has_workflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::workflow(this),
        _Internal::workflow(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCLogicEntityDataV2 LogicEntityDatas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logicentitydatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_logicentitydatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCCustomReplicationDataV2 EntityReplicationData = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entityreplicationdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_entityreplicationdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.UGCHudPrefabDatas HudPrefabData = 5;
  if (this->_internal_has_hudprefabdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::hudprefabdata(this),
        _Internal::hudprefabdata(this).GetCachedSize(), target, stream);
  }

  // .message.UGCTypeTree CustomTypeMap = 6;
  if (this->_internal_has_customtypemap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::customtypemap(this),
        _Internal::customtypemap(this).GetCachedSize(), target, stream);
  }

  // .message.SceneEditModeProtoData ModeSetting = 7;
  if (this->_internal_has_modesetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::modesetting(this),
        _Internal::modesetting(this).GetCachedSize(), target, stream);
  }

  // .message.UGCAllSceneRuntimeData AllSceneData = 8;
  if (this->_internal_has_allscenedata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::allscenedata(this),
        _Internal::allscenedata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCLevelDataV2)
  return target;
}

size_t UGCLevelDataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCLevelDataV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCGraphDataV2 GraphData = 1;
  total_size += 1UL * this->_internal_graphdata_size();
  for (const auto& msg : this->_impl_.graphdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCLogicEntityDataV2 LogicEntityDatas = 3;
  total_size += 1UL * this->_internal_logicentitydatas_size();
  for (const auto& msg : this->_impl_.logicentitydatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCCustomReplicationDataV2 EntityReplicationData = 4;
  total_size += 1UL * this->_internal_entityreplicationdata_size();
  for (const auto& msg : this->_impl_.entityreplicationdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.UGCWorkflowData Workflow = 2;
  if (this->_internal_has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflow_);
  }

  // .message.UGCHudPrefabDatas HudPrefabData = 5;
  if (this->_internal_has_hudprefabdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hudprefabdata_);
  }

  // .message.UGCTypeTree CustomTypeMap = 6;
  if (this->_internal_has_customtypemap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.customtypemap_);
  }

  // .message.SceneEditModeProtoData ModeSetting = 7;
  if (this->_internal_has_modesetting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modesetting_);
  }

  // .message.UGCAllSceneRuntimeData AllSceneData = 8;
  if (this->_internal_has_allscenedata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allscenedata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCLevelDataV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCLevelDataV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCLevelDataV2::GetClassData() const { return &_class_data_; }


void UGCLevelDataV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCLevelDataV2*>(&to_msg);
  auto& from = static_cast<const UGCLevelDataV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCLevelDataV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.graphdata_.MergeFrom(from._impl_.graphdata_);
  _this->_impl_.logicentitydatas_.MergeFrom(from._impl_.logicentitydatas_);
  _this->_impl_.entityreplicationdata_.MergeFrom(from._impl_.entityreplicationdata_);
  if (from._internal_has_workflow()) {
    _this->_internal_mutable_workflow()->::message::UGCWorkflowData::MergeFrom(
        from._internal_workflow());
  }
  if (from._internal_has_hudprefabdata()) {
    _this->_internal_mutable_hudprefabdata()->::message::UGCHudPrefabDatas::MergeFrom(
        from._internal_hudprefabdata());
  }
  if (from._internal_has_customtypemap()) {
    _this->_internal_mutable_customtypemap()->::message::UGCTypeTree::MergeFrom(
        from._internal_customtypemap());
  }
  if (from._internal_has_modesetting()) {
    _this->_internal_mutable_modesetting()->::message::SceneEditModeProtoData::MergeFrom(
        from._internal_modesetting());
  }
  if (from._internal_has_allscenedata()) {
    _this->_internal_mutable_allscenedata()->::message::UGCAllSceneRuntimeData::MergeFrom(
        from._internal_allscenedata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCLevelDataV2::CopyFrom(const UGCLevelDataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCLevelDataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCLevelDataV2::IsInitialized() const {
  return true;
}

void UGCLevelDataV2::InternalSwap(UGCLevelDataV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.graphdata_.InternalSwap(&other->_impl_.graphdata_);
  _impl_.logicentitydatas_.InternalSwap(&other->_impl_.logicentitydatas_);
  _impl_.entityreplicationdata_.InternalSwap(&other->_impl_.entityreplicationdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCLevelDataV2, _impl_.allscenedata_)
      + sizeof(UGCLevelDataV2::_impl_.allscenedata_)
      - PROTOBUF_FIELD_OFFSET(UGCLevelDataV2, _impl_.workflow_)>(
          reinterpret_cast<char*>(&_impl_.workflow_),
          reinterpret_cast<char*>(&other->_impl_.workflow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCLevelDataV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[23]);
}

// ===================================================================

class UGCVersionControlData::_Internal {
 public:
};

UGCVersionControlData::UGCVersionControlData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCVersionControlData)
}
UGCVersionControlData::UGCVersionControlData(const UGCVersionControlData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCVersionControlData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contentdata_){}
    , decltype(_impl_.downloaddesc_){}
    , decltype(_impl_.compatibleversion_){}
    , decltype(_impl_.publicversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contentdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contentdata().empty()) {
    _this->_impl_.contentdata_.Set(from._internal_contentdata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.downloaddesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloaddesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_downloaddesc().empty()) {
    _this->_impl_.downloaddesc_.Set(from._internal_downloaddesc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.compatibleversion_, &from._impl_.compatibleversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.publicversion_) -
    reinterpret_cast<char*>(&_impl_.compatibleversion_)) + sizeof(_impl_.publicversion_));
  // @@protoc_insertion_point(copy_constructor:message.UGCVersionControlData)
}

inline void UGCVersionControlData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contentdata_){}
    , decltype(_impl_.downloaddesc_){}
    , decltype(_impl_.compatibleversion_){0}
    , decltype(_impl_.publicversion_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contentdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contentdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.downloaddesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloaddesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCVersionControlData::~UGCVersionControlData() {
  // @@protoc_insertion_point(destructor:message.UGCVersionControlData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCVersionControlData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contentdata_.Destroy();
  _impl_.downloaddesc_.Destroy();
}

void UGCVersionControlData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCVersionControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCVersionControlData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contentdata_.ClearToEmpty();
  _impl_.downloaddesc_.ClearToEmpty();
  ::memset(&_impl_.compatibleversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.publicversion_) -
      reinterpret_cast<char*>(&_impl_.compatibleversion_)) + sizeof(_impl_.publicversion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCVersionControlData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CompatibleVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.compatibleversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ContentData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contentdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PublicVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.publicversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes DownloadDesc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_downloaddesc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCVersionControlData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCVersionControlData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CompatibleVersion = 1;
  if (this->_internal_compatibleversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_compatibleversion(), target);
  }

  // bytes ContentData = 2;
  if (!this->_internal_contentdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contentdata(), target);
  }

  // int32 PublicVersion = 3;
  if (this->_internal_publicversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_publicversion(), target);
  }

  // bytes DownloadDesc = 4;
  if (!this->_internal_downloaddesc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_downloaddesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCVersionControlData)
  return target;
}

size_t UGCVersionControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCVersionControlData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ContentData = 2;
  if (!this->_internal_contentdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contentdata());
  }

  // bytes DownloadDesc = 4;
  if (!this->_internal_downloaddesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_downloaddesc());
  }

  // int32 CompatibleVersion = 1;
  if (this->_internal_compatibleversion() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_compatibleversion());
  }

  // int32 PublicVersion = 3;
  if (this->_internal_publicversion() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_publicversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCVersionControlData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCVersionControlData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCVersionControlData::GetClassData() const { return &_class_data_; }


void UGCVersionControlData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCVersionControlData*>(&to_msg);
  auto& from = static_cast<const UGCVersionControlData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCVersionControlData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contentdata().empty()) {
    _this->_internal_set_contentdata(from._internal_contentdata());
  }
  if (!from._internal_downloaddesc().empty()) {
    _this->_internal_set_downloaddesc(from._internal_downloaddesc());
  }
  if (from._internal_compatibleversion() != 0) {
    _this->_internal_set_compatibleversion(from._internal_compatibleversion());
  }
  if (from._internal_publicversion() != 0) {
    _this->_internal_set_publicversion(from._internal_publicversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCVersionControlData::CopyFrom(const UGCVersionControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCVersionControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCVersionControlData::IsInitialized() const {
  return true;
}

void UGCVersionControlData::InternalSwap(UGCVersionControlData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contentdata_, lhs_arena,
      &other->_impl_.contentdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloaddesc_, lhs_arena,
      &other->_impl_.downloaddesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCVersionControlData, _impl_.publicversion_)
      + sizeof(UGCVersionControlData::_impl_.publicversion_)
      - PROTOBUF_FIELD_OFFSET(UGCVersionControlData, _impl_.compatibleversion_)>(
          reinterpret_cast<char*>(&_impl_.compatibleversion_),
          reinterpret_cast<char*>(&other->_impl_.compatibleversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCVersionControlData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[24]);
}

// ===================================================================

class UGCMapValue::_Internal {
 public:
};

UGCMapValue::UGCMapValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCMapValue)
}
UGCMapValue::UGCMapValue(const UGCMapValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCMapValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCMapValue)
}

inline void UGCMapValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCMapValue::~UGCMapValue() {
  // @@protoc_insertion_point(destructor:message.UGCMapValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCMapValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.values_.~RepeatedPtrField();
}

void UGCMapValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCMapValue::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCMapValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCMapValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCVarValueDataV2 Keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCVarValueDataV2 Values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCMapValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCMapValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCVarValueDataV2 Keys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCVarValueDataV2 Values = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCMapValue)
  return target;
}

size_t UGCMapValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCMapValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCVarValueDataV2 Keys = 1;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCVarValueDataV2 Values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCMapValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCMapValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCMapValue::GetClassData() const { return &_class_data_; }


void UGCMapValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCMapValue*>(&to_msg);
  auto& from = static_cast<const UGCMapValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCMapValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCMapValue::CopyFrom(const UGCMapValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCMapValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCMapValue::IsInitialized() const {
  return true;
}

void UGCMapValue::InternalSwap(UGCMapValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCMapValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[25]);
}

// ===================================================================

class UGCVarValueDataV2::_Internal {
 public:
  static const ::message::UGCFuncCallerDataV2& funcvalue(const UGCVarValueDataV2* msg);
  static const ::message::ProtoBuffVector3& vector3value(const UGCVarValueDataV2* msg);
  static const ::message::ProtoBuffQuaternion& quaternionvalue(const UGCVarValueDataV2* msg);
  static const ::message::ProtoBuffVector2& vector2value(const UGCVarValueDataV2* msg);
  static const ::message::UGCMapValue& mapvalue(const UGCVarValueDataV2* msg);
};

const ::message::UGCFuncCallerDataV2&
UGCVarValueDataV2::_Internal::funcvalue(const UGCVarValueDataV2* msg) {
  return *msg->_impl_.Value_.funcvalue_;
}
const ::message::ProtoBuffVector3&
UGCVarValueDataV2::_Internal::vector3value(const UGCVarValueDataV2* msg) {
  return *msg->_impl_.Value_.vector3value_;
}
const ::message::ProtoBuffQuaternion&
UGCVarValueDataV2::_Internal::quaternionvalue(const UGCVarValueDataV2* msg) {
  return *msg->_impl_.Value_.quaternionvalue_;
}
const ::message::ProtoBuffVector2&
UGCVarValueDataV2::_Internal::vector2value(const UGCVarValueDataV2* msg) {
  return *msg->_impl_.Value_.vector2value_;
}
const ::message::UGCMapValue&
UGCVarValueDataV2::_Internal::mapvalue(const UGCVarValueDataV2* msg) {
  return *msg->_impl_.mapvalue_;
}
void UGCVarValueDataV2::set_allocated_funcvalue(::message::UGCFuncCallerDataV2* funcvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (funcvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(funcvalue);
    if (message_arena != submessage_arena) {
      funcvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funcvalue, submessage_arena);
    }
    set_has_funcvalue();
    _impl_.Value_.funcvalue_ = funcvalue;
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueDataV2.FuncValue)
}
void UGCVarValueDataV2::set_allocated_vector3value(::message::ProtoBuffVector3* vector3value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (vector3value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector3value));
    if (message_arena != submessage_arena) {
      vector3value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector3value, submessage_arena);
    }
    set_has_vector3value();
    _impl_.Value_.vector3value_ = vector3value;
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueDataV2.Vector3Value)
}
void UGCVarValueDataV2::clear_vector3value() {
  if (_internal_has_vector3value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.vector3value_;
    }
    clear_has_Value();
  }
}
void UGCVarValueDataV2::set_allocated_quaternionvalue(::message::ProtoBuffQuaternion* quaternionvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (quaternionvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternionvalue));
    if (message_arena != submessage_arena) {
      quaternionvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternionvalue, submessage_arena);
    }
    set_has_quaternionvalue();
    _impl_.Value_.quaternionvalue_ = quaternionvalue;
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueDataV2.QuaternionValue)
}
void UGCVarValueDataV2::clear_quaternionvalue() {
  if (_internal_has_quaternionvalue()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.quaternionvalue_;
    }
    clear_has_Value();
  }
}
void UGCVarValueDataV2::set_allocated_vector2value(::message::ProtoBuffVector2* vector2value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (vector2value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector2value));
    if (message_arena != submessage_arena) {
      vector2value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector2value, submessage_arena);
    }
    set_has_vector2value();
    _impl_.Value_.vector2value_ = vector2value;
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCVarValueDataV2.Vector2Value)
}
void UGCVarValueDataV2::clear_vector2value() {
  if (_internal_has_vector2value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.vector2value_;
    }
    clear_has_Value();
  }
}
UGCVarValueDataV2::UGCVarValueDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCVarValueDataV2)
}
UGCVarValueDataV2::UGCVarValueDataV2(const UGCVarValueDataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCVarValueDataV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.listvalue_){from._impl_.listvalue_}
    , decltype(_impl_.mapvalue_){nullptr}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mapvalue()) {
    _this->_impl_.mapvalue_ = new ::message::UGCMapValue(*from._impl_.mapvalue_);
  }
  clear_has_Value();
  switch (from.Value_case()) {
    case kIsList: {
      _this->_internal_set_islist(from._internal_islist());
      break;
    }
    case kFuncValue: {
      _this->_internal_mutable_funcvalue()->::message::UGCFuncCallerDataV2::MergeFrom(
          from._internal_funcvalue());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_boolvalue(from._internal_boolvalue());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case kStringValue: {
      _this->_internal_set_stringvalue(from._internal_stringvalue());
      break;
    }
    case kVector3Value: {
      _this->_internal_mutable_vector3value()->::message::ProtoBuffVector3::MergeFrom(
          from._internal_vector3value());
      break;
    }
    case kEntityRefValue: {
      _this->_internal_set_entityrefvalue(from._internal_entityrefvalue());
      break;
    }
    case kQuaternionValue: {
      _this->_internal_mutable_quaternionvalue()->::message::ProtoBuffQuaternion::MergeFrom(
          from._internal_quaternionvalue());
      break;
    }
    case kVector2Value: {
      _this->_internal_mutable_vector2value()->::message::ProtoBuffVector2::MergeFrom(
          from._internal_vector2value());
      break;
    }
    case kLocStringValue: {
      _this->_internal_set_locstringvalue(from._internal_locstringvalue());
      break;
    }
    case kIsMap: {
      _this->_internal_set_ismap(from._internal_ismap());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCVarValueDataV2)
}

inline void UGCVarValueDataV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.listvalue_){arena}
    , decltype(_impl_.mapvalue_){nullptr}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Value();
}

UGCVarValueDataV2::~UGCVarValueDataV2() {
  // @@protoc_insertion_point(destructor:message.UGCVarValueDataV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCVarValueDataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listvalue_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.mapvalue_;
  if (has_Value()) {
    clear_Value();
  }
}

void UGCVarValueDataV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCVarValueDataV2::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:message.UGCVarValueDataV2)
  switch (Value_case()) {
    case kIsList: {
      // No need to clear
      break;
    }
    case kFuncValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.funcvalue_;
      }
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.Value_.stringvalue_.Destroy();
      break;
    }
    case kVector3Value: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.vector3value_;
      }
      break;
    }
    case kEntityRefValue: {
      _impl_.Value_.entityrefvalue_.Destroy();
      break;
    }
    case kQuaternionValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.quaternionvalue_;
      }
      break;
    }
    case kVector2Value: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.vector2value_;
      }
      break;
    }
    case kLocStringValue: {
      _impl_.Value_.locstringvalue_.Destroy();
      break;
    }
    case kIsMap: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void UGCVarValueDataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCVarValueDataV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listvalue_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.mapvalue_ != nullptr) {
    delete _impl_.mapvalue_;
  }
  _impl_.mapvalue_ = nullptr;
  clear_Value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCVarValueDataV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool IsList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_islist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCVarValueDataV2 ListValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_listvalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCFuncCallerDataV2 FuncValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_funcvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool BoolValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_boolvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IntValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float FloatValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _internal_set_floatvalue(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string StringValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCVarValueDataV2.StringValue"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 Vector3Value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector3value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string EntityRefValue = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_entityrefvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCVarValueDataV2.EntityRefValue"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffQuaternion QuaternionValue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternionvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 Vector2Value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector2value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LocStringValue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_locstringvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCVarValueDataV2.LocStringValue"));
        } else
          goto handle_unusual;
        continue;
      // bool IsMap = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _internal_set_ismap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCMapValue MapValue = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCVarValueDataV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCVarValueDataV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsList = 1;
  if (_internal_has_islist()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_islist(), target);
  }

  // repeated .message.UGCVarValueDataV2 ListValue = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_listvalue_size()); i < n; i++) {
    const auto& repfield = this->_internal_listvalue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.UGCFuncCallerDataV2 FuncValue = 3;
  if (_internal_has_funcvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::funcvalue(this),
        _Internal::funcvalue(this).GetCachedSize(), target, stream);
  }

  // bool BoolValue = 4;
  if (_internal_has_boolvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_boolvalue(), target);
  }

  // int32 IntValue = 5;
  if (_internal_has_intvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_intvalue(), target);
  }

  // float FloatValue = 6;
  if (_internal_has_floatvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_floatvalue(), target);
  }

  // string StringValue = 7;
  if (_internal_has_stringvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCVarValueDataV2.StringValue");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_stringvalue(), target);
  }

  // .message.ProtoBuffVector3 Vector3Value = 8;
  if (_internal_has_vector3value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::vector3value(this),
        _Internal::vector3value(this).GetCachedSize(), target, stream);
  }

  // string EntityRefValue = 9;
  if (_internal_has_entityrefvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entityrefvalue().data(), static_cast<int>(this->_internal_entityrefvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCVarValueDataV2.EntityRefValue");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_entityrefvalue(), target);
  }

  // .message.ProtoBuffQuaternion QuaternionValue = 10;
  if (_internal_has_quaternionvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::quaternionvalue(this),
        _Internal::quaternionvalue(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 Vector2Value = 11;
  if (_internal_has_vector2value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::vector2value(this),
        _Internal::vector2value(this).GetCachedSize(), target, stream);
  }

  // string LocStringValue = 12;
  if (_internal_has_locstringvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locstringvalue().data(), static_cast<int>(this->_internal_locstringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCVarValueDataV2.LocStringValue");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_locstringvalue(), target);
  }

  // bool IsMap = 13;
  if (_internal_has_ismap()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_ismap(), target);
  }

  // .message.UGCMapValue MapValue = 14;
  if (this->_internal_has_mapvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::mapvalue(this),
        _Internal::mapvalue(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCVarValueDataV2)
  return target;
}

size_t UGCVarValueDataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCVarValueDataV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCVarValueDataV2 ListValue = 2;
  total_size += 1UL * this->_internal_listvalue_size();
  for (const auto& msg : this->_impl_.listvalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.UGCMapValue MapValue = 14;
  if (this->_internal_has_mapvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mapvalue_);
  }

  switch (Value_case()) {
    // bool IsList = 1;
    case kIsList: {
      total_size += 1 + 1;
      break;
    }
    // .message.UGCFuncCallerDataV2 FuncValue = 3;
    case kFuncValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.funcvalue_);
      break;
    }
    // bool BoolValue = 4;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // int32 IntValue = 5;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_intvalue());
      break;
    }
    // float FloatValue = 6;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // string StringValue = 7;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
      break;
    }
    // .message.ProtoBuffVector3 Vector3Value = 8;
    case kVector3Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.vector3value_);
      break;
    }
    // string EntityRefValue = 9;
    case kEntityRefValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entityrefvalue());
      break;
    }
    // .message.ProtoBuffQuaternion QuaternionValue = 10;
    case kQuaternionValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.quaternionvalue_);
      break;
    }
    // .message.ProtoBuffVector2 Vector2Value = 11;
    case kVector2Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.vector2value_);
      break;
    }
    // string LocStringValue = 12;
    case kLocStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locstringvalue());
      break;
    }
    // bool IsMap = 13;
    case kIsMap: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCVarValueDataV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCVarValueDataV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCVarValueDataV2::GetClassData() const { return &_class_data_; }


void UGCVarValueDataV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCVarValueDataV2*>(&to_msg);
  auto& from = static_cast<const UGCVarValueDataV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCVarValueDataV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.listvalue_.MergeFrom(from._impl_.listvalue_);
  if (from._internal_has_mapvalue()) {
    _this->_internal_mutable_mapvalue()->::message::UGCMapValue::MergeFrom(
        from._internal_mapvalue());
  }
  switch (from.Value_case()) {
    case kIsList: {
      _this->_internal_set_islist(from._internal_islist());
      break;
    }
    case kFuncValue: {
      _this->_internal_mutable_funcvalue()->::message::UGCFuncCallerDataV2::MergeFrom(
          from._internal_funcvalue());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_boolvalue(from._internal_boolvalue());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case kStringValue: {
      _this->_internal_set_stringvalue(from._internal_stringvalue());
      break;
    }
    case kVector3Value: {
      _this->_internal_mutable_vector3value()->::message::ProtoBuffVector3::MergeFrom(
          from._internal_vector3value());
      break;
    }
    case kEntityRefValue: {
      _this->_internal_set_entityrefvalue(from._internal_entityrefvalue());
      break;
    }
    case kQuaternionValue: {
      _this->_internal_mutable_quaternionvalue()->::message::ProtoBuffQuaternion::MergeFrom(
          from._internal_quaternionvalue());
      break;
    }
    case kVector2Value: {
      _this->_internal_mutable_vector2value()->::message::ProtoBuffVector2::MergeFrom(
          from._internal_vector2value());
      break;
    }
    case kLocStringValue: {
      _this->_internal_set_locstringvalue(from._internal_locstringvalue());
      break;
    }
    case kIsMap: {
      _this->_internal_set_ismap(from._internal_ismap());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCVarValueDataV2::CopyFrom(const UGCVarValueDataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCVarValueDataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCVarValueDataV2::IsInitialized() const {
  return true;
}

void UGCVarValueDataV2::InternalSwap(UGCVarValueDataV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.listvalue_.InternalSwap(&other->_impl_.listvalue_);
  swap(_impl_.mapvalue_, other->_impl_.mapvalue_);
  swap(_impl_.Value_, other->_impl_.Value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCVarValueDataV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[26]);
}

// ===================================================================

class UGCFuncDefParamData::_Internal {
 public:
};

UGCFuncDefParamData::UGCFuncDefParamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCFuncDefParamData)
}
UGCFuncDefParamData::UGCFuncDefParamData(const UGCFuncDefParamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCFuncDefParamData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isupvalue_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.outtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.isupvalue_, &from._impl_.isupvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.outtype_) -
    reinterpret_cast<char*>(&_impl_.isupvalue_)) + sizeof(_impl_.outtype_));
  // @@protoc_insertion_point(copy_constructor:message.UGCFuncDefParamData)
}

inline void UGCFuncDefParamData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isupvalue_){false}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.outtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCFuncDefParamData::~UGCFuncDefParamData() {
  // @@protoc_insertion_point(destructor:message.UGCFuncDefParamData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCFuncDefParamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGCFuncDefParamData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCFuncDefParamData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCFuncDefParamData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.isupvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.outtype_) -
      reinterpret_cast<char*>(&_impl_.isupvalue_)) + sizeof(_impl_.outtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCFuncDefParamData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool IsUpvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isupvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 OutType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.outtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCFuncDefParamData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCFuncDefParamData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsUpvalue = 1;
  if (this->_internal_isupvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isupvalue(), target);
  }

  // int32 Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 OutType = 3;
  if (this->_internal_outtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_outtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCFuncDefParamData)
  return target;
}

size_t UGCFuncDefParamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCFuncDefParamData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool IsUpvalue = 1;
  if (this->_internal_isupvalue() != 0) {
    total_size += 1 + 1;
  }

  // int32 Type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 OutType = 3;
  if (this->_internal_outtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_outtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCFuncDefParamData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCFuncDefParamData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCFuncDefParamData::GetClassData() const { return &_class_data_; }


void UGCFuncDefParamData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCFuncDefParamData*>(&to_msg);
  auto& from = static_cast<const UGCFuncDefParamData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCFuncDefParamData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isupvalue() != 0) {
    _this->_internal_set_isupvalue(from._internal_isupvalue());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_outtype() != 0) {
    _this->_internal_set_outtype(from._internal_outtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCFuncDefParamData::CopyFrom(const UGCFuncDefParamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCFuncDefParamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCFuncDefParamData::IsInitialized() const {
  return true;
}

void UGCFuncDefParamData::InternalSwap(UGCFuncDefParamData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCFuncDefParamData, _impl_.outtype_)
      + sizeof(UGCFuncDefParamData::_impl_.outtype_)
      - PROTOBUF_FIELD_OFFSET(UGCFuncDefParamData, _impl_.isupvalue_)>(
          reinterpret_cast<char*>(&_impl_.isupvalue_),
          reinterpret_cast<char*>(&other->_impl_.isupvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCFuncDefParamData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[27]);
}

// ===================================================================

class UGCFuncCallerDataV2::_Internal {
 public:
};

UGCFuncCallerDataV2::UGCFuncCallerDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCFuncCallerDataV2)
}
UGCFuncCallerDataV2::UGCFuncCallerDataV2(const UGCFuncCallerDataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCFuncCallerDataV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.subcallerdata_){from._impl_.subcallerdata_}
    , decltype(_impl_.paramtypes_){from._impl_.paramtypes_}
    , /*decltype(_impl_._paramtypes_cached_byte_size_)*/{0}
    , decltype(_impl_.defparaminfos_){from._impl_.defparaminfos_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.useupvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.useupvalue_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.useupvalue_));
  // @@protoc_insertion_point(copy_constructor:message.UGCFuncCallerDataV2)
}

inline void UGCFuncCallerDataV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.subcallerdata_){arena}
    , decltype(_impl_.paramtypes_){arena}
    , /*decltype(_impl_._paramtypes_cached_byte_size_)*/{0}
    , decltype(_impl_.defparaminfos_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.useupvalue_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCFuncCallerDataV2::~UGCFuncCallerDataV2() {
  // @@protoc_insertion_point(destructor:message.UGCFuncCallerDataV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCFuncCallerDataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.subcallerdata_.~RepeatedPtrField();
  _impl_.paramtypes_.~RepeatedField();
  _impl_.defparaminfos_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void UGCFuncCallerDataV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCFuncCallerDataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCFuncCallerDataV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.subcallerdata_.Clear();
  _impl_.paramtypes_.Clear();
  _impl_.defparaminfos_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.useupvalue_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.useupvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCFuncCallerDataV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCFuncCallerDataV2.ID"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCFuncCallerDataV2.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCVarValueDataV2 Params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCFuncCallerDataV2 SubCallerData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subcallerdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool UseUpvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.useupvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ParamTypes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_paramtypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_paramtypes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCFuncDefParamData DefParamInfos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_defparaminfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCFuncCallerDataV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCFuncCallerDataV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCFuncCallerDataV2.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCFuncCallerDataV2.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 Type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // repeated .message.UGCVarValueDataV2 Params = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCFuncCallerDataV2 SubCallerData = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subcallerdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_subcallerdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool UseUpvalue = 6;
  if (this->_internal_useupvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_useupvalue(), target);
  }

  // repeated int32 ParamTypes = 7;
  {
    int byte_size = _impl_._paramtypes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_paramtypes(), byte_size, target);
    }
  }

  // repeated .message.UGCFuncDefParamData DefParamInfos = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_defparaminfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_defparaminfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCFuncCallerDataV2)
  return target;
}

size_t UGCFuncCallerDataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCFuncCallerDataV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCVarValueDataV2 Params = 4;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCFuncCallerDataV2 SubCallerData = 5;
  total_size += 1UL * this->_internal_subcallerdata_size();
  for (const auto& msg : this->_impl_.subcallerdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 ParamTypes = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.paramtypes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._paramtypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .message.UGCFuncDefParamData DefParamInfos = 8;
  total_size += 1UL * this->_internal_defparaminfos_size();
  for (const auto& msg : this->_impl_.defparaminfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 Type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // bool UseUpvalue = 6;
  if (this->_internal_useupvalue() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCFuncCallerDataV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCFuncCallerDataV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCFuncCallerDataV2::GetClassData() const { return &_class_data_; }


void UGCFuncCallerDataV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCFuncCallerDataV2*>(&to_msg);
  auto& from = static_cast<const UGCFuncCallerDataV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCFuncCallerDataV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  _this->_impl_.subcallerdata_.MergeFrom(from._impl_.subcallerdata_);
  _this->_impl_.paramtypes_.MergeFrom(from._impl_.paramtypes_);
  _this->_impl_.defparaminfos_.MergeFrom(from._impl_.defparaminfos_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_useupvalue() != 0) {
    _this->_internal_set_useupvalue(from._internal_useupvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCFuncCallerDataV2::CopyFrom(const UGCFuncCallerDataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCFuncCallerDataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCFuncCallerDataV2::IsInitialized() const {
  return true;
}

void UGCFuncCallerDataV2::InternalSwap(UGCFuncCallerDataV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  _impl_.subcallerdata_.InternalSwap(&other->_impl_.subcallerdata_);
  _impl_.paramtypes_.InternalSwap(&other->_impl_.paramtypes_);
  _impl_.defparaminfos_.InternalSwap(&other->_impl_.defparaminfos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCFuncCallerDataV2, _impl_.useupvalue_)
      + sizeof(UGCFuncCallerDataV2::_impl_.useupvalue_)
      - PROTOBUF_FIELD_OFFSET(UGCFuncCallerDataV2, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCFuncCallerDataV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[28]);
}

// ===================================================================

class UGCVarDefineDataV2::_Internal {
 public:
  static const ::message::UGCVarValueDataV2& value(const UGCVarDefineDataV2* msg);
};

const ::message::UGCVarValueDataV2&
UGCVarDefineDataV2::_Internal::value(const UGCVarDefineDataV2* msg) {
  return *msg->_impl_.value_;
}
UGCVarDefineDataV2::UGCVarDefineDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCVarDefineDataV2)
}
UGCVarDefineDataV2::UGCVarDefineDataV2(const UGCVarDefineDataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCVarDefineDataV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.typeid__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::message::UGCVarValueDataV2(*from._impl_.value_);
  }
  _this->_impl_.typeid__ = from._impl_.typeid__;
  // @@protoc_insertion_point(copy_constructor:message.UGCVarDefineDataV2)
}

inline void UGCVarDefineDataV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.typeid__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCVarDefineDataV2::~UGCVarDefineDataV2() {
  // @@protoc_insertion_point(destructor:message.UGCVarDefineDataV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCVarDefineDataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void UGCVarDefineDataV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCVarDefineDataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCVarDefineDataV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _impl_.typeid__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCVarDefineDataV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCVarDefineDataV2.ID"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCVarDefineDataV2.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 TypeID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.typeid__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCVarValueDataV2 Value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCVarDefineDataV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCVarDefineDataV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCVarDefineDataV2.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCVarDefineDataV2.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 TypeID = 3;
  if (this->_internal_typeid_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_typeid_(), target);
  }

  // .message.UGCVarValueDataV2 Value = 4;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCVarDefineDataV2)
  return target;
}

size_t UGCVarDefineDataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCVarDefineDataV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .message.UGCVarValueDataV2 Value = 4;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // int32 TypeID = 3;
  if (this->_internal_typeid_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typeid_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCVarDefineDataV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCVarDefineDataV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCVarDefineDataV2::GetClassData() const { return &_class_data_; }


void UGCVarDefineDataV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCVarDefineDataV2*>(&to_msg);
  auto& from = static_cast<const UGCVarDefineDataV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCVarDefineDataV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::message::UGCVarValueDataV2::MergeFrom(
        from._internal_value());
  }
  if (from._internal_typeid_() != 0) {
    _this->_internal_set_typeid_(from._internal_typeid_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCVarDefineDataV2::CopyFrom(const UGCVarDefineDataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCVarDefineDataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCVarDefineDataV2::IsInitialized() const {
  return true;
}

void UGCVarDefineDataV2::InternalSwap(UGCVarDefineDataV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCVarDefineDataV2, _impl_.typeid__)
      + sizeof(UGCVarDefineDataV2::_impl_.typeid__)
      - PROTOBUF_FIELD_OFFSET(UGCVarDefineDataV2, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCVarDefineDataV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[29]);
}

// ===================================================================

class UGCRuleDataV2::_Internal {
 public:
  static const ::message::UGCFuncCallerDataV2& callerdata(const UGCRuleDataV2* msg);
};

const ::message::UGCFuncCallerDataV2&
UGCRuleDataV2::_Internal::callerdata(const UGCRuleDataV2* msg) {
  return *msg->_impl_.callerdata_;
}
UGCRuleDataV2::UGCRuleDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCRuleDataV2)
}
UGCRuleDataV2::UGCRuleDataV2(const UGCRuleDataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCRuleDataV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.callerdata_){nullptr}
    , decltype(_impl_.eventtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_callerdata()) {
    _this->_impl_.callerdata_ = new ::message::UGCFuncCallerDataV2(*from._impl_.callerdata_);
  }
  _this->_impl_.eventtype_ = from._impl_.eventtype_;
  // @@protoc_insertion_point(copy_constructor:message.UGCRuleDataV2)
}

inline void UGCRuleDataV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.callerdata_){nullptr}
    , decltype(_impl_.eventtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCRuleDataV2::~UGCRuleDataV2() {
  // @@protoc_insertion_point(destructor:message.UGCRuleDataV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCRuleDataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.callerdata_;
}

void UGCRuleDataV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCRuleDataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCRuleDataV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.callerdata_ != nullptr) {
    delete _impl_.callerdata_;
  }
  _impl_.callerdata_ = nullptr;
  _impl_.eventtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCRuleDataV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 EventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.eventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCFuncCallerDataV2 CallerData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_callerdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCRuleDataV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCRuleDataV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 EventType = 1;
  if (this->_internal_eventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventtype(), target);
  }

  // .message.UGCFuncCallerDataV2 CallerData = 2;
  if (this->_internal_has_callerdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::callerdata(this),
        _Internal::callerdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCRuleDataV2)
  return target;
}

size_t UGCRuleDataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCRuleDataV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCFuncCallerDataV2 CallerData = 2;
  if (this->_internal_has_callerdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.callerdata_);
  }

  // int32 EventType = 1;
  if (this->_internal_eventtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCRuleDataV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCRuleDataV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCRuleDataV2::GetClassData() const { return &_class_data_; }


void UGCRuleDataV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCRuleDataV2*>(&to_msg);
  auto& from = static_cast<const UGCRuleDataV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCRuleDataV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_callerdata()) {
    _this->_internal_mutable_callerdata()->::message::UGCFuncCallerDataV2::MergeFrom(
        from._internal_callerdata());
  }
  if (from._internal_eventtype() != 0) {
    _this->_internal_set_eventtype(from._internal_eventtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCRuleDataV2::CopyFrom(const UGCRuleDataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCRuleDataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCRuleDataV2::IsInitialized() const {
  return true;
}

void UGCRuleDataV2::InternalSwap(UGCRuleDataV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCRuleDataV2, _impl_.eventtype_)
      + sizeof(UGCRuleDataV2::_impl_.eventtype_)
      - PROTOBUF_FIELD_OFFSET(UGCRuleDataV2, _impl_.callerdata_)>(
          reinterpret_cast<char*>(&_impl_.callerdata_),
          reinterpret_cast<char*>(&other->_impl_.callerdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCRuleDataV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[30]);
}

// ===================================================================

class UGCGraphDataV2::_Internal {
 public:
};

UGCGraphDataV2::UGCGraphDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCGraphDataV2)
}
UGCGraphDataV2::UGCGraphDataV2(const UGCGraphDataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCGraphDataV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){from._impl_.rules_}
    , decltype(_impl_.variables_){from._impl_.variables_}
    , decltype(_impl_.functions_){from._impl_.functions_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.declare_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.declare_ = from._impl_.declare_;
  // @@protoc_insertion_point(copy_constructor:message.UGCGraphDataV2)
}

inline void UGCGraphDataV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rules_){arena}
    , decltype(_impl_.variables_){arena}
    , decltype(_impl_.functions_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.declare_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCGraphDataV2::~UGCGraphDataV2() {
  // @@protoc_insertion_point(destructor:message.UGCGraphDataV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCGraphDataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rules_.~RepeatedPtrField();
  _impl_.variables_.~RepeatedPtrField();
  _impl_.functions_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void UGCGraphDataV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCGraphDataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCGraphDataV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  _impl_.variables_.Clear();
  _impl_.functions_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.declare_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCGraphDataV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCGraphDataV2.ID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCRuleDataV2 Rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCVarDefineDataV2 Variables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCFuncCallerDataV2 Functions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_functions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string Name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCGraphDataV2.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 declare = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.declare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCGraphDataV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCGraphDataV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCGraphDataV2.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .message.UGCRuleDataV2 Rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCVarDefineDataV2 Variables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCFuncCallerDataV2 Functions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_functions_size()); i < n; i++) {
    const auto& repfield = this->_internal_functions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string Name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCGraphDataV2.Name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // int32 declare = 6;
  if (this->_internal_declare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_declare(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCGraphDataV2)
  return target;
}

size_t UGCGraphDataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCGraphDataV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCRuleDataV2 Rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_impl_.rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCVarDefineDataV2 Variables = 3;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_impl_.variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCFuncCallerDataV2 Functions = 4;
  total_size += 1UL * this->_internal_functions_size();
  for (const auto& msg : this->_impl_.functions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 declare = 6;
  if (this->_internal_declare() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_declare());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCGraphDataV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCGraphDataV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCGraphDataV2::GetClassData() const { return &_class_data_; }


void UGCGraphDataV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCGraphDataV2*>(&to_msg);
  auto& from = static_cast<const UGCGraphDataV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCGraphDataV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rules_.MergeFrom(from._impl_.rules_);
  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _this->_impl_.functions_.MergeFrom(from._impl_.functions_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_declare() != 0) {
    _this->_internal_set_declare(from._internal_declare());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCGraphDataV2::CopyFrom(const UGCGraphDataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCGraphDataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCGraphDataV2::IsInitialized() const {
  return true;
}

void UGCGraphDataV2::InternalSwap(UGCGraphDataV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  _impl_.functions_.InternalSwap(&other->_impl_.functions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.declare_, other->_impl_.declare_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCGraphDataV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[31]);
}

// ===================================================================

class UGCCustomReplicationDataItemInstanceV2::_Internal {
 public:
  static const ::message::UGCVarValueDataV2& value(const UGCCustomReplicationDataItemInstanceV2* msg);
};

const ::message::UGCVarValueDataV2&
UGCCustomReplicationDataItemInstanceV2::_Internal::value(const UGCCustomReplicationDataItemInstanceV2* msg) {
  return *msg->_impl_.value_;
}
UGCCustomReplicationDataItemInstanceV2::UGCCustomReplicationDataItemInstanceV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCustomReplicationDataItemInstanceV2)
}
UGCCustomReplicationDataItemInstanceV2::UGCCustomReplicationDataItemInstanceV2(const UGCCustomReplicationDataItemInstanceV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCustomReplicationDataItemInstanceV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , decltype(_impl_.propid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::message::UGCVarValueDataV2(*from._impl_.value_);
  }
  _this->_impl_.propid_ = from._impl_.propid_;
  // @@protoc_insertion_point(copy_constructor:message.UGCCustomReplicationDataItemInstanceV2)
}

inline void UGCCustomReplicationDataItemInstanceV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){nullptr}
    , decltype(_impl_.propid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCCustomReplicationDataItemInstanceV2::~UGCCustomReplicationDataItemInstanceV2() {
  // @@protoc_insertion_point(destructor:message.UGCCustomReplicationDataItemInstanceV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCustomReplicationDataItemInstanceV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
}

void UGCCustomReplicationDataItemInstanceV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCustomReplicationDataItemInstanceV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCustomReplicationDataItemInstanceV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _impl_.propid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCustomReplicationDataItemInstanceV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PropID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.propid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCVarValueDataV2 Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCustomReplicationDataItemInstanceV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCustomReplicationDataItemInstanceV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PropID = 1;
  if (this->_internal_propid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_propid(), target);
  }

  // .message.UGCVarValueDataV2 Value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCustomReplicationDataItemInstanceV2)
  return target;
}

size_t UGCCustomReplicationDataItemInstanceV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCustomReplicationDataItemInstanceV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCVarValueDataV2 Value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // int32 PropID = 1;
  if (this->_internal_propid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_propid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCustomReplicationDataItemInstanceV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCustomReplicationDataItemInstanceV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCustomReplicationDataItemInstanceV2::GetClassData() const { return &_class_data_; }


void UGCCustomReplicationDataItemInstanceV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCustomReplicationDataItemInstanceV2*>(&to_msg);
  auto& from = static_cast<const UGCCustomReplicationDataItemInstanceV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCustomReplicationDataItemInstanceV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::message::UGCVarValueDataV2::MergeFrom(
        from._internal_value());
  }
  if (from._internal_propid() != 0) {
    _this->_internal_set_propid(from._internal_propid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCustomReplicationDataItemInstanceV2::CopyFrom(const UGCCustomReplicationDataItemInstanceV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCustomReplicationDataItemInstanceV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCustomReplicationDataItemInstanceV2::IsInitialized() const {
  return true;
}

void UGCCustomReplicationDataItemInstanceV2::InternalSwap(UGCCustomReplicationDataItemInstanceV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCCustomReplicationDataItemInstanceV2, _impl_.propid_)
      + sizeof(UGCCustomReplicationDataItemInstanceV2::_impl_.propid_)
      - PROTOBUF_FIELD_OFFSET(UGCCustomReplicationDataItemInstanceV2, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCustomReplicationDataItemInstanceV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[32]);
}

// ===================================================================

class UGCLogicEntityDataV3::_Internal {
 public:
};

UGCLogicEntityDataV3::UGCLogicEntityDataV3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCLogicEntityDataV3)
}
UGCLogicEntityDataV3::UGCLogicEntityDataV3(const UGCLogicEntityDataV3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCLogicEntityDataV3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.componentids_){from._impl_.componentids_}
    , /*decltype(_impl_._componentids_cached_byte_size_)*/{0}
    , decltype(_impl_.graphids_){from._impl_.graphids_}
    , decltype(_impl_.repdataitem_){from._impl_.repdataitem_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.refprefabid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.refprefabid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.refprefabid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_refprefabid().empty()) {
    _this->_impl_.refprefabid_.Set(from._internal_refprefabid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCLogicEntityDataV3)
}

inline void UGCLogicEntityDataV3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.componentids_){arena}
    , /*decltype(_impl_._componentids_cached_byte_size_)*/{0}
    , decltype(_impl_.graphids_){arena}
    , decltype(_impl_.repdataitem_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.refprefabid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.refprefabid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.refprefabid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCLogicEntityDataV3::~UGCLogicEntityDataV3() {
  // @@protoc_insertion_point(destructor:message.UGCLogicEntityDataV3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCLogicEntityDataV3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.componentids_.~RepeatedField();
  _impl_.graphids_.~RepeatedPtrField();
  _impl_.repdataitem_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.refprefabid_.Destroy();
}

void UGCLogicEntityDataV3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCLogicEntityDataV3::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCLogicEntityDataV3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.componentids_.Clear();
  _impl_.graphids_.Clear();
  _impl_.repdataitem_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.refprefabid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCLogicEntityDataV3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityDataV3.ID"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ComponentIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_componentids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_componentids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string GraphIDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_graphids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityDataV3.GraphIDs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repdataitem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string RefPrefabID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_refprefabid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCLogicEntityDataV3.RefPrefabID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCLogicEntityDataV3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCLogicEntityDataV3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityDataV3.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated int32 ComponentIDs = 2;
  {
    int byte_size = _impl_._componentids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_componentids(), byte_size, target);
    }
  }

  // repeated string GraphIDs = 3;
  for (int i = 0, n = this->_internal_graphids_size(); i < n; i++) {
    const auto& s = this->_internal_graphids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityDataV3.GraphIDs");
    target = stream->WriteString(3, s, target);
  }

  // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repdataitem_size()); i < n; i++) {
    const auto& repfield = this->_internal_repdataitem(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string RefPrefabID = 5;
  if (!this->_internal_refprefabid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refprefabid().data(), static_cast<int>(this->_internal_refprefabid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLogicEntityDataV3.RefPrefabID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_refprefabid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCLogicEntityDataV3)
  return target;
}

size_t UGCLogicEntityDataV3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCLogicEntityDataV3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ComponentIDs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.componentids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._componentids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string GraphIDs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.graphids_.size());
  for (int i = 0, n = _impl_.graphids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.graphids_.Get(i));
  }

  // repeated .message.UGCCustomReplicationDataItemInstanceV2 RepDataItem = 4;
  total_size += 1UL * this->_internal_repdataitem_size();
  for (const auto& msg : this->_impl_.repdataitem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string RefPrefabID = 5;
  if (!this->_internal_refprefabid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refprefabid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCLogicEntityDataV3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCLogicEntityDataV3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCLogicEntityDataV3::GetClassData() const { return &_class_data_; }


void UGCLogicEntityDataV3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCLogicEntityDataV3*>(&to_msg);
  auto& from = static_cast<const UGCLogicEntityDataV3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCLogicEntityDataV3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.componentids_.MergeFrom(from._impl_.componentids_);
  _this->_impl_.graphids_.MergeFrom(from._impl_.graphids_);
  _this->_impl_.repdataitem_.MergeFrom(from._impl_.repdataitem_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_refprefabid().empty()) {
    _this->_internal_set_refprefabid(from._internal_refprefabid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCLogicEntityDataV3::CopyFrom(const UGCLogicEntityDataV3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCLogicEntityDataV3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCLogicEntityDataV3::IsInitialized() const {
  return true;
}

void UGCLogicEntityDataV3::InternalSwap(UGCLogicEntityDataV3* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.componentids_.InternalSwap(&other->_impl_.componentids_);
  _impl_.graphids_.InternalSwap(&other->_impl_.graphids_);
  _impl_.repdataitem_.InternalSwap(&other->_impl_.repdataitem_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.refprefabid_, lhs_arena,
      &other->_impl_.refprefabid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCLogicEntityDataV3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[33]);
}

// ===================================================================

class UGCCustomReplicationDataItemV2::_Internal {
 public:
  static const ::message::UGCVarValueDataV2& value(const UGCCustomReplicationDataItemV2* msg);
};

const ::message::UGCVarValueDataV2&
UGCCustomReplicationDataItemV2::_Internal::value(const UGCCustomReplicationDataItemV2* msg) {
  return *msg->_impl_.value_;
}
UGCCustomReplicationDataItemV2::UGCCustomReplicationDataItemV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCustomReplicationDataItemV2)
}
UGCCustomReplicationDataItemV2::UGCCustomReplicationDataItemV2(const UGCCustomReplicationDataItemV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCustomReplicationDataItemV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.typeid__){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.onlyserver_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::message::UGCVarValueDataV2(*from._impl_.value_);
  }
  ::memcpy(&_impl_.typeid__, &from._impl_.typeid__,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.onlyserver_) -
    reinterpret_cast<char*>(&_impl_.typeid__)) + sizeof(_impl_.onlyserver_));
  // @@protoc_insertion_point(copy_constructor:message.UGCCustomReplicationDataItemV2)
}

inline void UGCCustomReplicationDataItemV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.typeid__){0}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.onlyserver_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCCustomReplicationDataItemV2::~UGCCustomReplicationDataItemV2() {
  // @@protoc_insertion_point(destructor:message.UGCCustomReplicationDataItemV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCustomReplicationDataItemV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void UGCCustomReplicationDataItemV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCustomReplicationDataItemV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCustomReplicationDataItemV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  ::memset(&_impl_.typeid__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.onlyserver_) -
      reinterpret_cast<char*>(&_impl_.typeid__)) + sizeof(_impl_.onlyserver_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCustomReplicationDataItemV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCCustomReplicationDataItemV2.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 TypeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.typeid__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCVarValueDataV2 Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool OnlyServer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.onlyserver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCustomReplicationDataItemV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCustomReplicationDataItemV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCCustomReplicationDataItemV2.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 TypeID = 2;
  if (this->_internal_typeid_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_typeid_(), target);
  }

  // .message.UGCVarValueDataV2 Value = 3;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // int32 Index = 4;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_index(), target);
  }

  // bool OnlyServer = 5;
  if (this->_internal_onlyserver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_onlyserver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCustomReplicationDataItemV2)
  return target;
}

size_t UGCCustomReplicationDataItemV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCustomReplicationDataItemV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .message.UGCVarValueDataV2 Value = 3;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // int32 TypeID = 2;
  if (this->_internal_typeid_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typeid_());
  }

  // int32 Index = 4;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // bool OnlyServer = 5;
  if (this->_internal_onlyserver() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCustomReplicationDataItemV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCustomReplicationDataItemV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCustomReplicationDataItemV2::GetClassData() const { return &_class_data_; }


void UGCCustomReplicationDataItemV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCustomReplicationDataItemV2*>(&to_msg);
  auto& from = static_cast<const UGCCustomReplicationDataItemV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCustomReplicationDataItemV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::message::UGCVarValueDataV2::MergeFrom(
        from._internal_value());
  }
  if (from._internal_typeid_() != 0) {
    _this->_internal_set_typeid_(from._internal_typeid_());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_onlyserver() != 0) {
    _this->_internal_set_onlyserver(from._internal_onlyserver());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCustomReplicationDataItemV2::CopyFrom(const UGCCustomReplicationDataItemV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCustomReplicationDataItemV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCustomReplicationDataItemV2::IsInitialized() const {
  return true;
}

void UGCCustomReplicationDataItemV2::InternalSwap(UGCCustomReplicationDataItemV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCCustomReplicationDataItemV2, _impl_.onlyserver_)
      + sizeof(UGCCustomReplicationDataItemV2::_impl_.onlyserver_)
      - PROTOBUF_FIELD_OFFSET(UGCCustomReplicationDataItemV2, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCustomReplicationDataItemV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[34]);
}

// ===================================================================

class UGCCustomReplicationDataV2::_Internal {
 public:
};

UGCCustomReplicationDataV2::UGCCustomReplicationDataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCustomReplicationDataV2)
}
UGCCustomReplicationDataV2::UGCCustomReplicationDataV2(const UGCCustomReplicationDataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCustomReplicationDataV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemdata_){from._impl_.itemdata_}
    , decltype(_impl_.componenttypeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.componenttypeid_ = from._impl_.componenttypeid_;
  // @@protoc_insertion_point(copy_constructor:message.UGCCustomReplicationDataV2)
}

inline void UGCCustomReplicationDataV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemdata_){arena}
    , decltype(_impl_.componenttypeid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCCustomReplicationDataV2::~UGCCustomReplicationDataV2() {
  // @@protoc_insertion_point(destructor:message.UGCCustomReplicationDataV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCustomReplicationDataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemdata_.~RepeatedPtrField();
}

void UGCCustomReplicationDataV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCustomReplicationDataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCustomReplicationDataV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemdata_.Clear();
  _impl_.componenttypeid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCustomReplicationDataV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ComponentTypeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.componenttypeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationDataItemV2 ItemData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCustomReplicationDataV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCustomReplicationDataV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ComponentTypeID = 1;
  if (this->_internal_componenttypeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_componenttypeid(), target);
  }

  // repeated .message.UGCCustomReplicationDataItemV2 ItemData = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_itemdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_itemdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCustomReplicationDataV2)
  return target;
}

size_t UGCCustomReplicationDataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCustomReplicationDataV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCCustomReplicationDataItemV2 ItemData = 2;
  total_size += 1UL * this->_internal_itemdata_size();
  for (const auto& msg : this->_impl_.itemdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ComponentTypeID = 1;
  if (this->_internal_componenttypeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_componenttypeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCustomReplicationDataV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCustomReplicationDataV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCustomReplicationDataV2::GetClassData() const { return &_class_data_; }


void UGCCustomReplicationDataV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCustomReplicationDataV2*>(&to_msg);
  auto& from = static_cast<const UGCCustomReplicationDataV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCustomReplicationDataV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.itemdata_.MergeFrom(from._impl_.itemdata_);
  if (from._internal_componenttypeid() != 0) {
    _this->_internal_set_componenttypeid(from._internal_componenttypeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCustomReplicationDataV2::CopyFrom(const UGCCustomReplicationDataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCustomReplicationDataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCustomReplicationDataV2::IsInitialized() const {
  return true;
}

void UGCCustomReplicationDataV2::InternalSwap(UGCCustomReplicationDataV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.itemdata_.InternalSwap(&other->_impl_.itemdata_);
  swap(_impl_.componenttypeid_, other->_impl_.componenttypeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCustomReplicationDataV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[35]);
}

// ===================================================================

class UGCInternalLibrary::_Internal {
 public:
};

UGCInternalLibrary::UGCInternalLibrary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCInternalLibrary)
}
UGCInternalLibrary::UGCInternalLibrary(const UGCInternalLibrary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCInternalLibrary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.graphdata_){from._impl_.graphdata_}
    , decltype(_impl_.logicentitydatas_){from._impl_.logicentitydatas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCInternalLibrary)
}

inline void UGCInternalLibrary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.graphdata_){arena}
    , decltype(_impl_.logicentitydatas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCInternalLibrary::~UGCInternalLibrary() {
  // @@protoc_insertion_point(destructor:message.UGCInternalLibrary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCInternalLibrary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.graphdata_.~RepeatedPtrField();
  _impl_.logicentitydatas_.~RepeatedPtrField();
}

void UGCInternalLibrary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCInternalLibrary::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCInternalLibrary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.graphdata_.Clear();
  _impl_.logicentitydatas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCInternalLibrary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCGraphDataV2 GraphData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graphdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logicentitydatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCInternalLibrary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCInternalLibrary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCGraphDataV2 GraphData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_graphdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_graphdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logicentitydatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_logicentitydatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCInternalLibrary)
  return target;
}

size_t UGCInternalLibrary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCInternalLibrary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCGraphDataV2 GraphData = 1;
  total_size += 1UL * this->_internal_graphdata_size();
  for (const auto& msg : this->_impl_.graphdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 2;
  total_size += 1UL * this->_internal_logicentitydatas_size();
  for (const auto& msg : this->_impl_.logicentitydatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCInternalLibrary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCInternalLibrary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCInternalLibrary::GetClassData() const { return &_class_data_; }


void UGCInternalLibrary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCInternalLibrary*>(&to_msg);
  auto& from = static_cast<const UGCInternalLibrary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCInternalLibrary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.graphdata_.MergeFrom(from._impl_.graphdata_);
  _this->_impl_.logicentitydatas_.MergeFrom(from._impl_.logicentitydatas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCInternalLibrary::CopyFrom(const UGCInternalLibrary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCInternalLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCInternalLibrary::IsInitialized() const {
  return true;
}

void UGCInternalLibrary::InternalSwap(UGCInternalLibrary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.graphdata_.InternalSwap(&other->_impl_.graphdata_);
  _impl_.logicentitydatas_.InternalSwap(&other->_impl_.logicentitydatas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCInternalLibrary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[36]);
}

// ===================================================================

class UGCWorkflowData::_Internal {
 public:
  static const ::message::UGCWorkflowSequence& workflowsequence(const UGCWorkflowData* msg);
};

const ::message::UGCWorkflowSequence&
UGCWorkflowData::_Internal::workflowsequence(const UGCWorkflowData* msg) {
  return *msg->_impl_.workflowsequence_;
}
UGCWorkflowData::UGCWorkflowData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCWorkflowData)
}
UGCWorkflowData::UGCWorkflowData(const UGCWorkflowData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCWorkflowData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phasedata_){from._impl_.phasedata_}
    , decltype(_impl_.rounddata_){from._impl_.rounddata_}
    , decltype(_impl_.workflowsequence_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workflowsequence()) {
    _this->_impl_.workflowsequence_ = new ::message::UGCWorkflowSequence(*from._impl_.workflowsequence_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCWorkflowData)
}

inline void UGCWorkflowData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phasedata_){arena}
    , decltype(_impl_.rounddata_){arena}
    , decltype(_impl_.workflowsequence_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCWorkflowData::~UGCWorkflowData() {
  // @@protoc_insertion_point(destructor:message.UGCWorkflowData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCWorkflowData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phasedata_.~RepeatedPtrField();
  _impl_.rounddata_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.workflowsequence_;
}

void UGCWorkflowData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCWorkflowData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCWorkflowData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phasedata_.Clear();
  _impl_.rounddata_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.workflowsequence_ != nullptr) {
    delete _impl_.workflowsequence_;
  }
  _impl_.workflowsequence_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCWorkflowData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCPhaseData PhaseData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phasedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCRoundData RoundData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rounddata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCWorkflowSequence WorkflowSequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflowsequence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCWorkflowData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCWorkflowData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCPhaseData PhaseData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phasedata_size()); i < n; i++) {
    const auto& repfield = this->_internal_phasedata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCRoundData RoundData = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rounddata_size()); i < n; i++) {
    const auto& repfield = this->_internal_rounddata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.UGCWorkflowSequence WorkflowSequence = 3;
  if (this->_internal_has_workflowsequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::workflowsequence(this),
        _Internal::workflowsequence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCWorkflowData)
  return target;
}

size_t UGCWorkflowData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCWorkflowData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCPhaseData PhaseData = 1;
  total_size += 1UL * this->_internal_phasedata_size();
  for (const auto& msg : this->_impl_.phasedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCRoundData RoundData = 2;
  total_size += 1UL * this->_internal_rounddata_size();
  for (const auto& msg : this->_impl_.rounddata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.UGCWorkflowSequence WorkflowSequence = 3;
  if (this->_internal_has_workflowsequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflowsequence_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCWorkflowData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCWorkflowData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCWorkflowData::GetClassData() const { return &_class_data_; }


void UGCWorkflowData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCWorkflowData*>(&to_msg);
  auto& from = static_cast<const UGCWorkflowData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCWorkflowData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.phasedata_.MergeFrom(from._impl_.phasedata_);
  _this->_impl_.rounddata_.MergeFrom(from._impl_.rounddata_);
  if (from._internal_has_workflowsequence()) {
    _this->_internal_mutable_workflowsequence()->::message::UGCWorkflowSequence::MergeFrom(
        from._internal_workflowsequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCWorkflowData::CopyFrom(const UGCWorkflowData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCWorkflowData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCWorkflowData::IsInitialized() const {
  return true;
}

void UGCWorkflowData::InternalSwap(UGCWorkflowData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.phasedata_.InternalSwap(&other->_impl_.phasedata_);
  _impl_.rounddata_.InternalSwap(&other->_impl_.rounddata_);
  swap(_impl_.workflowsequence_, other->_impl_.workflowsequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCWorkflowData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[37]);
}

// ===================================================================

class UGCLocItem::_Internal {
 public:
};

UGCLocItem::UGCLocItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCLocItem)
}
UGCLocItem::UGCLocItem(const UGCLocItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCLocItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){}
    , decltype(_impl_.lang_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.translation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_translation().empty()) {
    _this->_impl_.translation_.Set(from._internal_translation(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.lang_ = from._impl_.lang_;
  // @@protoc_insertion_point(copy_constructor:message.UGCLocItem)
}

inline void UGCLocItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){}
    , decltype(_impl_.lang_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.translation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCLocItem::~UGCLocItem() {
  // @@protoc_insertion_point(destructor:message.UGCLocItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCLocItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.translation_.Destroy();
}

void UGCLocItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCLocItem::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCLocItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.translation_.ClearToEmpty();
  _impl_.lang_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCLocItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.EUGCLocLanguage Lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lang(static_cast<::message::EUGCLocLanguage>(val));
        } else
          goto handle_unusual;
        continue;
      // string Translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_translation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCLocItem.Translation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCLocItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCLocItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.EUGCLocLanguage Lang = 1;
  if (this->_internal_lang() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lang(), target);
  }

  // string Translation = 2;
  if (!this->_internal_translation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_translation().data(), static_cast<int>(this->_internal_translation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLocItem.Translation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_translation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCLocItem)
  return target;
}

size_t UGCLocItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCLocItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Translation = 2;
  if (!this->_internal_translation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_translation());
  }

  // .message.EUGCLocLanguage Lang = 1;
  if (this->_internal_lang() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lang());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCLocItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCLocItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCLocItem::GetClassData() const { return &_class_data_; }


void UGCLocItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCLocItem*>(&to_msg);
  auto& from = static_cast<const UGCLocItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCLocItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_translation().empty()) {
    _this->_internal_set_translation(from._internal_translation());
  }
  if (from._internal_lang() != 0) {
    _this->_internal_set_lang(from._internal_lang());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCLocItem::CopyFrom(const UGCLocItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCLocItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCLocItem::IsInitialized() const {
  return true;
}

void UGCLocItem::InternalSwap(UGCLocItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.translation_, lhs_arena,
      &other->_impl_.translation_, rhs_arena
  );
  swap(_impl_.lang_, other->_impl_.lang_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCLocItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[38]);
}

// ===================================================================

class UGCLocKeyData::_Internal {
 public:
};

UGCLocKeyData::UGCLocKeyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCLocKeyData)
}
UGCLocKeyData::UGCLocKeyData(const UGCLocKeyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCLocKeyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loclist_){from._impl_.loclist_}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCLocKeyData)
}

inline void UGCLocKeyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loclist_){arena}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCLocKeyData::~UGCLocKeyData() {
  // @@protoc_insertion_point(destructor:message.UGCLocKeyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCLocKeyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loclist_.~RepeatedPtrField();
  _impl_.key_.Destroy();
}

void UGCLocKeyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCLocKeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCLocKeyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loclist_.Clear();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCLocKeyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCLocKeyData.Key"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCLocItem LocList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loclist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCLocKeyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCLocKeyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCLocKeyData.Key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated .message.UGCLocItem LocList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_loclist_size()); i < n; i++) {
    const auto& repfield = this->_internal_loclist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCLocKeyData)
  return target;
}

size_t UGCLocKeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCLocKeyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCLocItem LocList = 2;
  total_size += 1UL * this->_internal_loclist_size();
  for (const auto& msg : this->_impl_.loclist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCLocKeyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCLocKeyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCLocKeyData::GetClassData() const { return &_class_data_; }


void UGCLocKeyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCLocKeyData*>(&to_msg);
  auto& from = static_cast<const UGCLocKeyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCLocKeyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.loclist_.MergeFrom(from._impl_.loclist_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCLocKeyData::CopyFrom(const UGCLocKeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCLocKeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCLocKeyData::IsInitialized() const {
  return true;
}

void UGCLocKeyData::InternalSwap(UGCLocKeyData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.loclist_.InternalSwap(&other->_impl_.loclist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCLocKeyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[39]);
}

// ===================================================================

class UGCLocData::_Internal {
 public:
};

UGCLocData::UGCLocData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCLocData)
}
UGCLocData::UGCLocData(const UGCLocData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCLocData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keylist_){from._impl_.keylist_}
    , decltype(_impl_.defaultlang_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.defaultlang_ = from._impl_.defaultlang_;
  // @@protoc_insertion_point(copy_constructor:message.UGCLocData)
}

inline void UGCLocData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keylist_){arena}
    , decltype(_impl_.defaultlang_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCLocData::~UGCLocData() {
  // @@protoc_insertion_point(destructor:message.UGCLocData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCLocData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keylist_.~RepeatedPtrField();
}

void UGCLocData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCLocData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCLocData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keylist_.Clear();
  _impl_.defaultlang_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCLocData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.EUGCLocLanguage DefaultLang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_defaultlang(static_cast<::message::EUGCLocLanguage>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCLocKeyData KeyList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCLocData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCLocData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.EUGCLocLanguage DefaultLang = 1;
  if (this->_internal_defaultlang() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_defaultlang(), target);
  }

  // repeated .message.UGCLocKeyData KeyList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keylist_size()); i < n; i++) {
    const auto& repfield = this->_internal_keylist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCLocData)
  return target;
}

size_t UGCLocData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCLocData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCLocKeyData KeyList = 2;
  total_size += 1UL * this->_internal_keylist_size();
  for (const auto& msg : this->_impl_.keylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.EUGCLocLanguage DefaultLang = 1;
  if (this->_internal_defaultlang() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_defaultlang());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCLocData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCLocData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCLocData::GetClassData() const { return &_class_data_; }


void UGCLocData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCLocData*>(&to_msg);
  auto& from = static_cast<const UGCLocData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCLocData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keylist_.MergeFrom(from._impl_.keylist_);
  if (from._internal_defaultlang() != 0) {
    _this->_internal_set_defaultlang(from._internal_defaultlang());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCLocData::CopyFrom(const UGCLocData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCLocData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCLocData::IsInitialized() const {
  return true;
}

void UGCLocData::InternalSwap(UGCLocData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keylist_.InternalSwap(&other->_impl_.keylist_);
  swap(_impl_.defaultlang_, other->_impl_.defaultlang_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCLocData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[40]);
}

// ===================================================================

class UGCPrefabData::_Internal {
 public:
};

UGCPrefabData::UGCPrefabData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCPrefabData)
}
UGCPrefabData::UGCPrefabData(const UGCPrefabData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCPrefabData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entityhierachy_){from._impl_.entityhierachy_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCPrefabData)
}

inline void UGCPrefabData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entityhierachy_){arena}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCPrefabData::~UGCPrefabData() {
  // @@protoc_insertion_point(destructor:message.UGCPrefabData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCPrefabData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entityhierachy_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void UGCPrefabData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCPrefabData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCPrefabData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entityhierachy_.Clear();
  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCPrefabData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCPrefabData.ID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCTransformNodeData EntityHierachy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entityhierachy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCPrefabData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCPrefabData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCPrefabData.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .message.UGCTransformNodeData EntityHierachy = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entityhierachy_size()); i < n; i++) {
    const auto& repfield = this->_internal_entityhierachy(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCPrefabData)
  return target;
}

size_t UGCPrefabData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCPrefabData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCTransformNodeData EntityHierachy = 2;
  total_size += 1UL * this->_internal_entityhierachy_size();
  for (const auto& msg : this->_impl_.entityhierachy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCPrefabData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCPrefabData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCPrefabData::GetClassData() const { return &_class_data_; }


void UGCPrefabData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCPrefabData*>(&to_msg);
  auto& from = static_cast<const UGCPrefabData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCPrefabData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entityhierachy_.MergeFrom(from._impl_.entityhierachy_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCPrefabData::CopyFrom(const UGCPrefabData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCPrefabData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCPrefabData::IsInitialized() const {
  return true;
}

void UGCPrefabData::InternalSwap(UGCPrefabData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entityhierachy_.InternalSwap(&other->_impl_.entityhierachy_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCPrefabData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[41]);
}

// ===================================================================

class UGCCustomEventData::_Internal {
 public:
};

UGCCustomEventData::UGCCustomEventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCustomEventData)
}
UGCCustomEventData::UGCCustomEventData(const UGCCustomEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCustomEventData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:message.UGCCustomEventData)
}

inline void UGCCustomEventData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCCustomEventData::~UGCCustomEventData() {
  // @@protoc_insertion_point(destructor:message.UGCCustomEventData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCustomEventData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void UGCCustomEventData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCustomEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCustomEventData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCustomEventData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCCustomEventData.Name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCustomEventData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCustomEventData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCCustomEventData.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCustomEventData)
  return target;
}

size_t UGCCustomEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCustomEventData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCustomEventData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCustomEventData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCustomEventData::GetClassData() const { return &_class_data_; }


void UGCCustomEventData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCustomEventData*>(&to_msg);
  auto& from = static_cast<const UGCCustomEventData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCustomEventData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCustomEventData::CopyFrom(const UGCCustomEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCustomEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCustomEventData::IsInitialized() const {
  return true;
}

void UGCCustomEventData::InternalSwap(UGCCustomEventData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCustomEventData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[42]);
}

// ===================================================================

class UGCBTreeData::_Internal {
 public:
};

UGCBTreeData::UGCBTreeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCBTreeData)
}
UGCBTreeData::UGCBTreeData(const UGCBTreeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCBTreeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCBTreeData)
}

inline void UGCBTreeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCBTreeData::~UGCBTreeData() {
  // @@protoc_insertion_point(destructor:message.UGCBTreeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCBTreeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.data_.Destroy();
}

void UGCBTreeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCBTreeData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCBTreeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCBTreeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCBTreeData.ID"));
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCBTreeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCBTreeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCBTreeData.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes Data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCBTreeData)
  return target;
}

size_t UGCBTreeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCBTreeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes Data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCBTreeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCBTreeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCBTreeData::GetClassData() const { return &_class_data_; }


void UGCBTreeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCBTreeData*>(&to_msg);
  auto& from = static_cast<const UGCBTreeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCBTreeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCBTreeData::CopyFrom(const UGCBTreeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCBTreeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCBTreeData::IsInitialized() const {
  return true;
}

void UGCBTreeData::InternalSwap(UGCBTreeData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCBTreeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[43]);
}

// ===================================================================

class UGCGameData::_Internal {
 public:
  static const ::message::UGCWorkflowData& workflow(const UGCGameData* msg);
  static const ::message::UGCHudPrefabDatas& hudprefabdata(const UGCGameData* msg);
  static const ::message::UGCTypeTree& customtypemap(const UGCGameData* msg);
  static const ::message::SceneEditModeProtoData& modesetting(const UGCGameData* msg);
  static const ::message::UGCAllSceneRuntimeData& allscenedata(const UGCGameData* msg);
  static const ::message::UGCLocData& locdata(const UGCGameData* msg);
  static const ::message::UGCResourceData& resourcedata(const UGCGameData* msg);
};

const ::message::UGCWorkflowData&
UGCGameData::_Internal::workflow(const UGCGameData* msg) {
  return *msg->_impl_.workflow_;
}
const ::message::UGCHudPrefabDatas&
UGCGameData::_Internal::hudprefabdata(const UGCGameData* msg) {
  return *msg->_impl_.hudprefabdata_;
}
const ::message::UGCTypeTree&
UGCGameData::_Internal::customtypemap(const UGCGameData* msg) {
  return *msg->_impl_.customtypemap_;
}
const ::message::SceneEditModeProtoData&
UGCGameData::_Internal::modesetting(const UGCGameData* msg) {
  return *msg->_impl_.modesetting_;
}
const ::message::UGCAllSceneRuntimeData&
UGCGameData::_Internal::allscenedata(const UGCGameData* msg) {
  return *msg->_impl_.allscenedata_;
}
const ::message::UGCLocData&
UGCGameData::_Internal::locdata(const UGCGameData* msg) {
  return *msg->_impl_.locdata_;
}
const ::message::UGCResourceData&
UGCGameData::_Internal::resourcedata(const UGCGameData* msg) {
  return *msg->_impl_.resourcedata_;
}
UGCGameData::UGCGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCGameData)
}
UGCGameData::UGCGameData(const UGCGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCGameData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.graphdata_){from._impl_.graphdata_}
    , decltype(_impl_.logicentitydatas_){from._impl_.logicentitydatas_}
    , decltype(_impl_.componentrepdata_){from._impl_.componentrepdata_}
    , decltype(_impl_.prefabdata_){from._impl_.prefabdata_}
    , decltype(_impl_.customeventdata_){from._impl_.customeventdata_}
    , decltype(_impl_.btreedata_){from._impl_.btreedata_}
    , decltype(_impl_.workflow_){nullptr}
    , decltype(_impl_.hudprefabdata_){nullptr}
    , decltype(_impl_.customtypemap_){nullptr}
    , decltype(_impl_.modesetting_){nullptr}
    , decltype(_impl_.allscenedata_){nullptr}
    , decltype(_impl_.locdata_){nullptr}
    , decltype(_impl_.resourcedata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workflow()) {
    _this->_impl_.workflow_ = new ::message::UGCWorkflowData(*from._impl_.workflow_);
  }
  if (from._internal_has_hudprefabdata()) {
    _this->_impl_.hudprefabdata_ = new ::message::UGCHudPrefabDatas(*from._impl_.hudprefabdata_);
  }
  if (from._internal_has_customtypemap()) {
    _this->_impl_.customtypemap_ = new ::message::UGCTypeTree(*from._impl_.customtypemap_);
  }
  if (from._internal_has_modesetting()) {
    _this->_impl_.modesetting_ = new ::message::SceneEditModeProtoData(*from._impl_.modesetting_);
  }
  if (from._internal_has_allscenedata()) {
    _this->_impl_.allscenedata_ = new ::message::UGCAllSceneRuntimeData(*from._impl_.allscenedata_);
  }
  if (from._internal_has_locdata()) {
    _this->_impl_.locdata_ = new ::message::UGCLocData(*from._impl_.locdata_);
  }
  if (from._internal_has_resourcedata()) {
    _this->_impl_.resourcedata_ = new ::message::UGCResourceData(*from._impl_.resourcedata_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCGameData)
}

inline void UGCGameData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.graphdata_){arena}
    , decltype(_impl_.logicentitydatas_){arena}
    , decltype(_impl_.componentrepdata_){arena}
    , decltype(_impl_.prefabdata_){arena}
    , decltype(_impl_.customeventdata_){arena}
    , decltype(_impl_.btreedata_){arena}
    , decltype(_impl_.workflow_){nullptr}
    , decltype(_impl_.hudprefabdata_){nullptr}
    , decltype(_impl_.customtypemap_){nullptr}
    , decltype(_impl_.modesetting_){nullptr}
    , decltype(_impl_.allscenedata_){nullptr}
    , decltype(_impl_.locdata_){nullptr}
    , decltype(_impl_.resourcedata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCGameData::~UGCGameData() {
  // @@protoc_insertion_point(destructor:message.UGCGameData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.graphdata_.~RepeatedPtrField();
  _impl_.logicentitydatas_.~RepeatedPtrField();
  _impl_.componentrepdata_.~RepeatedPtrField();
  _impl_.prefabdata_.~RepeatedPtrField();
  _impl_.customeventdata_.~RepeatedPtrField();
  _impl_.btreedata_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.workflow_;
  if (this != internal_default_instance()) delete _impl_.hudprefabdata_;
  if (this != internal_default_instance()) delete _impl_.customtypemap_;
  if (this != internal_default_instance()) delete _impl_.modesetting_;
  if (this != internal_default_instance()) delete _impl_.allscenedata_;
  if (this != internal_default_instance()) delete _impl_.locdata_;
  if (this != internal_default_instance()) delete _impl_.resourcedata_;
}

void UGCGameData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCGameData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.graphdata_.Clear();
  _impl_.logicentitydatas_.Clear();
  _impl_.componentrepdata_.Clear();
  _impl_.prefabdata_.Clear();
  _impl_.customeventdata_.Clear();
  _impl_.btreedata_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.workflow_ != nullptr) {
    delete _impl_.workflow_;
  }
  _impl_.workflow_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hudprefabdata_ != nullptr) {
    delete _impl_.hudprefabdata_;
  }
  _impl_.hudprefabdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.customtypemap_ != nullptr) {
    delete _impl_.customtypemap_;
  }
  _impl_.customtypemap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modesetting_ != nullptr) {
    delete _impl_.modesetting_;
  }
  _impl_.modesetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.allscenedata_ != nullptr) {
    delete _impl_.allscenedata_;
  }
  _impl_.allscenedata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.locdata_ != nullptr) {
    delete _impl_.locdata_;
  }
  _impl_.locdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resourcedata_ != nullptr) {
    delete _impl_.resourcedata_;
  }
  _impl_.resourcedata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCGameData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCGraphDataV2 GraphData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graphdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCWorkflowData Workflow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_workflow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logicentitydatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomReplicationDataV2 ComponentRepData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_componentrepdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudPrefabDatas HudPrefabData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hudprefabdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCTypeTree CustomTypeMap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_customtypemap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.SceneEditModeProtoData ModeSetting = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_modesetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCAllSceneRuntimeData AllSceneData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_allscenedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCLocData LocData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_locdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCResourceData ResourceData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourcedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCPrefabData PrefabData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefabdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCCustomEventData CustomEventData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_customeventdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCBTreeData BTreeData = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_btreedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCGameData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCGameData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCGraphDataV2 GraphData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_graphdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_graphdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.UGCWorkflowData Workflow = 2;
  if (this->_internal_has_workflow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::workflow(this),
        _Internal::workflow(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logicentitydatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_logicentitydatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCCustomReplicationDataV2 ComponentRepData = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_componentrepdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_componentrepdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.UGCHudPrefabDatas HudPrefabData = 5;
  if (this->_internal_has_hudprefabdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::hudprefabdata(this),
        _Internal::hudprefabdata(this).GetCachedSize(), target, stream);
  }

  // .message.UGCTypeTree CustomTypeMap = 6;
  if (this->_internal_has_customtypemap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::customtypemap(this),
        _Internal::customtypemap(this).GetCachedSize(), target, stream);
  }

  // .message.SceneEditModeProtoData ModeSetting = 7;
  if (this->_internal_has_modesetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::modesetting(this),
        _Internal::modesetting(this).GetCachedSize(), target, stream);
  }

  // .message.UGCAllSceneRuntimeData AllSceneData = 8;
  if (this->_internal_has_allscenedata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::allscenedata(this),
        _Internal::allscenedata(this).GetCachedSize(), target, stream);
  }

  // .message.UGCLocData LocData = 9;
  if (this->_internal_has_locdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::locdata(this),
        _Internal::locdata(this).GetCachedSize(), target, stream);
  }

  // .message.UGCResourceData ResourceData = 10;
  if (this->_internal_has_resourcedata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::resourcedata(this),
        _Internal::resourcedata(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCPrefabData PrefabData = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prefabdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_prefabdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCCustomEventData CustomEventData = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_customeventdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_customeventdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCBTreeData BTreeData = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_btreedata_size()); i < n; i++) {
    const auto& repfield = this->_internal_btreedata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCGameData)
  return target;
}

size_t UGCGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCGameData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCGraphDataV2 GraphData = 1;
  total_size += 1UL * this->_internal_graphdata_size();
  for (const auto& msg : this->_impl_.graphdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCLogicEntityDataV3 LogicEntityDatas = 3;
  total_size += 1UL * this->_internal_logicentitydatas_size();
  for (const auto& msg : this->_impl_.logicentitydatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCCustomReplicationDataV2 ComponentRepData = 4;
  total_size += 1UL * this->_internal_componentrepdata_size();
  for (const auto& msg : this->_impl_.componentrepdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCPrefabData PrefabData = 11;
  total_size += 1UL * this->_internal_prefabdata_size();
  for (const auto& msg : this->_impl_.prefabdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCCustomEventData CustomEventData = 12;
  total_size += 1UL * this->_internal_customeventdata_size();
  for (const auto& msg : this->_impl_.customeventdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCBTreeData BTreeData = 13;
  total_size += 1UL * this->_internal_btreedata_size();
  for (const auto& msg : this->_impl_.btreedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.UGCWorkflowData Workflow = 2;
  if (this->_internal_has_workflow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workflow_);
  }

  // .message.UGCHudPrefabDatas HudPrefabData = 5;
  if (this->_internal_has_hudprefabdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hudprefabdata_);
  }

  // .message.UGCTypeTree CustomTypeMap = 6;
  if (this->_internal_has_customtypemap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.customtypemap_);
  }

  // .message.SceneEditModeProtoData ModeSetting = 7;
  if (this->_internal_has_modesetting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modesetting_);
  }

  // .message.UGCAllSceneRuntimeData AllSceneData = 8;
  if (this->_internal_has_allscenedata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allscenedata_);
  }

  // .message.UGCLocData LocData = 9;
  if (this->_internal_has_locdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.locdata_);
  }

  // .message.UGCResourceData ResourceData = 10;
  if (this->_internal_has_resourcedata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resourcedata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCGameData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCGameData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCGameData::GetClassData() const { return &_class_data_; }


void UGCGameData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCGameData*>(&to_msg);
  auto& from = static_cast<const UGCGameData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCGameData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.graphdata_.MergeFrom(from._impl_.graphdata_);
  _this->_impl_.logicentitydatas_.MergeFrom(from._impl_.logicentitydatas_);
  _this->_impl_.componentrepdata_.MergeFrom(from._impl_.componentrepdata_);
  _this->_impl_.prefabdata_.MergeFrom(from._impl_.prefabdata_);
  _this->_impl_.customeventdata_.MergeFrom(from._impl_.customeventdata_);
  _this->_impl_.btreedata_.MergeFrom(from._impl_.btreedata_);
  if (from._internal_has_workflow()) {
    _this->_internal_mutable_workflow()->::message::UGCWorkflowData::MergeFrom(
        from._internal_workflow());
  }
  if (from._internal_has_hudprefabdata()) {
    _this->_internal_mutable_hudprefabdata()->::message::UGCHudPrefabDatas::MergeFrom(
        from._internal_hudprefabdata());
  }
  if (from._internal_has_customtypemap()) {
    _this->_internal_mutable_customtypemap()->::message::UGCTypeTree::MergeFrom(
        from._internal_customtypemap());
  }
  if (from._internal_has_modesetting()) {
    _this->_internal_mutable_modesetting()->::message::SceneEditModeProtoData::MergeFrom(
        from._internal_modesetting());
  }
  if (from._internal_has_allscenedata()) {
    _this->_internal_mutable_allscenedata()->::message::UGCAllSceneRuntimeData::MergeFrom(
        from._internal_allscenedata());
  }
  if (from._internal_has_locdata()) {
    _this->_internal_mutable_locdata()->::message::UGCLocData::MergeFrom(
        from._internal_locdata());
  }
  if (from._internal_has_resourcedata()) {
    _this->_internal_mutable_resourcedata()->::message::UGCResourceData::MergeFrom(
        from._internal_resourcedata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCGameData::CopyFrom(const UGCGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCGameData::IsInitialized() const {
  return true;
}

void UGCGameData::InternalSwap(UGCGameData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.graphdata_.InternalSwap(&other->_impl_.graphdata_);
  _impl_.logicentitydatas_.InternalSwap(&other->_impl_.logicentitydatas_);
  _impl_.componentrepdata_.InternalSwap(&other->_impl_.componentrepdata_);
  _impl_.prefabdata_.InternalSwap(&other->_impl_.prefabdata_);
  _impl_.customeventdata_.InternalSwap(&other->_impl_.customeventdata_);
  _impl_.btreedata_.InternalSwap(&other->_impl_.btreedata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCGameData, _impl_.resourcedata_)
      + sizeof(UGCGameData::_impl_.resourcedata_)
      - PROTOBUF_FIELD_OFFSET(UGCGameData, _impl_.workflow_)>(
          reinterpret_cast<char*>(&_impl_.workflow_),
          reinterpret_cast<char*>(&other->_impl_.workflow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCGameData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[44]);
}

// ===================================================================

class UGCSubLevelItemRuntimeData::_Internal {
 public:
};

UGCSubLevelItemRuntimeData::UGCSubLevelItemRuntimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCSubLevelItemRuntimeData)
}
UGCSubLevelItemRuntimeData::UGCSubLevelItemRuntimeData(const UGCSubLevelItemRuntimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCSubLevelItemRuntimeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logic_entity_id_){}
    , decltype(_impl_.customized_name_){}
    , decltype(_impl_.obj_color_){}
    , decltype(_impl_.surtex_){}
    , decltype(_impl_.bortex_){}
    , decltype(_impl_.static_type_id_){}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.pos_z_){}
    , decltype(_impl_.scale_x_){}
    , decltype(_impl_.scale_y_){}
    , decltype(_impl_.scale_z_){}
    , decltype(_impl_.rot_yaw_){}
    , decltype(_impl_.rot_pitch_){}
    , decltype(_impl_.rot_roll_){}
    , decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.levelobject_id_by_tag_){}
    , decltype(_impl_.reset_per_round_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.surcolor_){}
    , decltype(_impl_.bordercolor_){}
    , decltype(_impl_.isstatic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.logic_entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logic_entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logic_entity_id().empty()) {
    _this->_impl_.logic_entity_id_.Set(from._internal_logic_entity_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.customized_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customized_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customized_name().empty()) {
    _this->_impl_.customized_name_.Set(from._internal_customized_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.obj_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_obj_color().empty()) {
    _this->_impl_.obj_color_.Set(from._internal_obj_color(), 
      _this->GetArenaForAllocation());
  }
  _impl_.surtex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.surtex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_surtex().empty()) {
    _this->_impl_.surtex_.Set(from._internal_surtex(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bortex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bortex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bortex().empty()) {
    _this->_impl_.bortex_.Set(from._internal_bortex(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.static_type_id_, &from._impl_.static_type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isstatic_) -
    reinterpret_cast<char*>(&_impl_.static_type_id_)) + sizeof(_impl_.isstatic_));
  // @@protoc_insertion_point(copy_constructor:message.UGCSubLevelItemRuntimeData)
}

inline void UGCSubLevelItemRuntimeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logic_entity_id_){}
    , decltype(_impl_.customized_name_){}
    , decltype(_impl_.obj_color_){}
    , decltype(_impl_.surtex_){}
    , decltype(_impl_.bortex_){}
    , decltype(_impl_.static_type_id_){0u}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.pos_z_){0}
    , decltype(_impl_.scale_x_){0}
    , decltype(_impl_.scale_y_){0}
    , decltype(_impl_.scale_z_){0}
    , decltype(_impl_.rot_yaw_){0}
    , decltype(_impl_.rot_pitch_){0}
    , decltype(_impl_.rot_roll_){0}
    , decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.levelobject_id_by_tag_){0u}
    , decltype(_impl_.reset_per_round_){0u}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.surcolor_){0}
    , decltype(_impl_.bordercolor_){0}
    , decltype(_impl_.isstatic_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.logic_entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logic_entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customized_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customized_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.obj_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.surtex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.surtex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bortex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bortex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCSubLevelItemRuntimeData::~UGCSubLevelItemRuntimeData() {
  // @@protoc_insertion_point(destructor:message.UGCSubLevelItemRuntimeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCSubLevelItemRuntimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logic_entity_id_.Destroy();
  _impl_.customized_name_.Destroy();
  _impl_.obj_color_.Destroy();
  _impl_.surtex_.Destroy();
  _impl_.bortex_.Destroy();
}

void UGCSubLevelItemRuntimeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCSubLevelItemRuntimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCSubLevelItemRuntimeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logic_entity_id_.ClearToEmpty();
  _impl_.customized_name_.ClearToEmpty();
  _impl_.obj_color_.ClearToEmpty();
  _impl_.surtex_.ClearToEmpty();
  _impl_.bortex_.ClearToEmpty();
  ::memset(&_impl_.static_type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isstatic_) -
      reinterpret_cast<char*>(&_impl_.static_type_id_)) + sizeof(_impl_.isstatic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCSubLevelItemRuntimeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 static_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.static_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float pos_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pos_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float scale_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.scale_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float scale_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.scale_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float scale_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.scale_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rot_yaw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.rot_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rot_pitch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.rot_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float rot_roll = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.rot_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 extra_base_info_instance_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 levelobject_id_by_tag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.levelobject_id_by_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string logic_entity_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_logic_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCSubLevelItemRuntimeData.logic_entity_id"));
        } else
          goto handle_unusual;
        continue;
      // string customized_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_customized_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCSubLevelItemRuntimeData.customized_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 reset_per_round = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.reset_per_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string obj_color = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_obj_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCSubLevelItemRuntimeData.obj_color"));
        } else
          goto handle_unusual;
        continue;
      // int32 group_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 surColor = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.surcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 borderColor = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.bordercolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string surTex = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_surtex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCSubLevelItemRuntimeData.surTex"));
        } else
          goto handle_unusual;
        continue;
      // string borTex = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_bortex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCSubLevelItemRuntimeData.borTex"));
        } else
          goto handle_unusual;
        continue;
      // bool isStatic = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.isstatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCSubLevelItemRuntimeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCSubLevelItemRuntimeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 static_type_id = 1;
  if (this->_internal_static_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_static_type_id(), target);
  }

  // float pos_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_x(), target);
  }

  // float pos_y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_pos_y(), target);
  }

  // float pos_z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_z = this->_internal_pos_z();
  uint32_t raw_pos_z;
  memcpy(&raw_pos_z, &tmp_pos_z, sizeof(tmp_pos_z));
  if (raw_pos_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_pos_z(), target);
  }

  // float scale_x = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale_x = this->_internal_scale_x();
  uint32_t raw_scale_x;
  memcpy(&raw_scale_x, &tmp_scale_x, sizeof(tmp_scale_x));
  if (raw_scale_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_scale_x(), target);
  }

  // float scale_y = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale_y = this->_internal_scale_y();
  uint32_t raw_scale_y;
  memcpy(&raw_scale_y, &tmp_scale_y, sizeof(tmp_scale_y));
  if (raw_scale_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_scale_y(), target);
  }

  // float scale_z = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale_z = this->_internal_scale_z();
  uint32_t raw_scale_z;
  memcpy(&raw_scale_z, &tmp_scale_z, sizeof(tmp_scale_z));
  if (raw_scale_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_scale_z(), target);
  }

  // float rot_yaw = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_yaw = this->_internal_rot_yaw();
  uint32_t raw_rot_yaw;
  memcpy(&raw_rot_yaw, &tmp_rot_yaw, sizeof(tmp_rot_yaw));
  if (raw_rot_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_rot_yaw(), target);
  }

  // float rot_pitch = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_pitch = this->_internal_rot_pitch();
  uint32_t raw_rot_pitch;
  memcpy(&raw_rot_pitch, &tmp_rot_pitch, sizeof(tmp_rot_pitch));
  if (raw_rot_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_rot_pitch(), target);
  }

  // float rot_roll = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_roll = this->_internal_rot_roll();
  uint32_t raw_rot_roll;
  memcpy(&raw_rot_roll, &tmp_rot_roll, sizeof(tmp_rot_roll));
  if (raw_rot_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_rot_roll(), target);
  }

  // uint32 extra_base_info_instance_id = 12;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 levelobject_id_by_tag = 13;
  if (this->_internal_levelobject_id_by_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_levelobject_id_by_tag(), target);
  }

  // string logic_entity_id = 14;
  if (!this->_internal_logic_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logic_entity_id().data(), static_cast<int>(this->_internal_logic_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCSubLevelItemRuntimeData.logic_entity_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_logic_entity_id(), target);
  }

  // string customized_name = 15;
  if (!this->_internal_customized_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customized_name().data(), static_cast<int>(this->_internal_customized_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCSubLevelItemRuntimeData.customized_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_customized_name(), target);
  }

  // uint32 reset_per_round = 16;
  if (this->_internal_reset_per_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_reset_per_round(), target);
  }

  // string obj_color = 17 [deprecated = true];
  if (!this->_internal_obj_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obj_color().data(), static_cast<int>(this->_internal_obj_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCSubLevelItemRuntimeData.obj_color");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_obj_color(), target);
  }

  // int32 group_id = 18;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_group_id(), target);
  }

  // int32 surColor = 19;
  if (this->_internal_surcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_surcolor(), target);
  }

  // int32 borderColor = 20;
  if (this->_internal_bordercolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_bordercolor(), target);
  }

  // string surTex = 21;
  if (!this->_internal_surtex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_surtex().data(), static_cast<int>(this->_internal_surtex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCSubLevelItemRuntimeData.surTex");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_surtex(), target);
  }

  // string borTex = 22;
  if (!this->_internal_bortex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bortex().data(), static_cast<int>(this->_internal_bortex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCSubLevelItemRuntimeData.borTex");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_bortex(), target);
  }

  // bool isStatic = 23;
  if (this->_internal_isstatic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_isstatic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCSubLevelItemRuntimeData)
  return target;
}

size_t UGCSubLevelItemRuntimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCSubLevelItemRuntimeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logic_entity_id = 14;
  if (!this->_internal_logic_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logic_entity_id());
  }

  // string customized_name = 15;
  if (!this->_internal_customized_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customized_name());
  }

  // string obj_color = 17 [deprecated = true];
  if (!this->_internal_obj_color().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_color());
  }

  // string surTex = 21;
  if (!this->_internal_surtex().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_surtex());
  }

  // string borTex = 22;
  if (!this->_internal_bortex().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bortex());
  }

  // uint32 static_type_id = 1;
  if (this->_internal_static_type_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_static_type_id());
  }

  // float pos_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = this->_internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    total_size += 1 + 4;
  }

  // float pos_y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = this->_internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    total_size += 1 + 4;
  }

  // float pos_z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_z = this->_internal_pos_z();
  uint32_t raw_pos_z;
  memcpy(&raw_pos_z, &tmp_pos_z, sizeof(tmp_pos_z));
  if (raw_pos_z != 0) {
    total_size += 1 + 4;
  }

  // float scale_x = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale_x = this->_internal_scale_x();
  uint32_t raw_scale_x;
  memcpy(&raw_scale_x, &tmp_scale_x, sizeof(tmp_scale_x));
  if (raw_scale_x != 0) {
    total_size += 1 + 4;
  }

  // float scale_y = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale_y = this->_internal_scale_y();
  uint32_t raw_scale_y;
  memcpy(&raw_scale_y, &tmp_scale_y, sizeof(tmp_scale_y));
  if (raw_scale_y != 0) {
    total_size += 1 + 4;
  }

  // float scale_z = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale_z = this->_internal_scale_z();
  uint32_t raw_scale_z;
  memcpy(&raw_scale_z, &tmp_scale_z, sizeof(tmp_scale_z));
  if (raw_scale_z != 0) {
    total_size += 1 + 4;
  }

  // float rot_yaw = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_yaw = this->_internal_rot_yaw();
  uint32_t raw_rot_yaw;
  memcpy(&raw_rot_yaw, &tmp_rot_yaw, sizeof(tmp_rot_yaw));
  if (raw_rot_yaw != 0) {
    total_size += 1 + 4;
  }

  // float rot_pitch = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_pitch = this->_internal_rot_pitch();
  uint32_t raw_rot_pitch;
  memcpy(&raw_rot_pitch, &tmp_rot_pitch, sizeof(tmp_rot_pitch));
  if (raw_rot_pitch != 0) {
    total_size += 1 + 4;
  }

  // float rot_roll = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_roll = this->_internal_rot_roll();
  uint32_t raw_rot_roll;
  memcpy(&raw_rot_roll, &tmp_rot_roll, sizeof(tmp_rot_roll));
  if (raw_rot_roll != 0) {
    total_size += 1 + 4;
  }

  // uint32 extra_base_info_instance_id = 12;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 levelobject_id_by_tag = 13;
  if (this->_internal_levelobject_id_by_tag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_levelobject_id_by_tag());
  }

  // uint32 reset_per_round = 16;
  if (this->_internal_reset_per_round() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_reset_per_round());
  }

  // int32 group_id = 18;
  if (this->_internal_group_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_group_id());
  }

  // int32 surColor = 19;
  if (this->_internal_surcolor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_surcolor());
  }

  // int32 borderColor = 20;
  if (this->_internal_bordercolor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bordercolor());
  }

  // bool isStatic = 23;
  if (this->_internal_isstatic() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCSubLevelItemRuntimeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCSubLevelItemRuntimeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCSubLevelItemRuntimeData::GetClassData() const { return &_class_data_; }


void UGCSubLevelItemRuntimeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCSubLevelItemRuntimeData*>(&to_msg);
  auto& from = static_cast<const UGCSubLevelItemRuntimeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCSubLevelItemRuntimeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_logic_entity_id().empty()) {
    _this->_internal_set_logic_entity_id(from._internal_logic_entity_id());
  }
  if (!from._internal_customized_name().empty()) {
    _this->_internal_set_customized_name(from._internal_customized_name());
  }
  if (!from._internal_obj_color().empty()) {
    _this->_internal_set_obj_color(from._internal_obj_color());
  }
  if (!from._internal_surtex().empty()) {
    _this->_internal_set_surtex(from._internal_surtex());
  }
  if (!from._internal_bortex().empty()) {
    _this->_internal_set_bortex(from._internal_bortex());
  }
  if (from._internal_static_type_id() != 0) {
    _this->_internal_set_static_type_id(from._internal_static_type_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_x = from._internal_pos_x();
  uint32_t raw_pos_x;
  memcpy(&raw_pos_x, &tmp_pos_x, sizeof(tmp_pos_x));
  if (raw_pos_x != 0) {
    _this->_internal_set_pos_x(from._internal_pos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_y = from._internal_pos_y();
  uint32_t raw_pos_y;
  memcpy(&raw_pos_y, &tmp_pos_y, sizeof(tmp_pos_y));
  if (raw_pos_y != 0) {
    _this->_internal_set_pos_y(from._internal_pos_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pos_z = from._internal_pos_z();
  uint32_t raw_pos_z;
  memcpy(&raw_pos_z, &tmp_pos_z, sizeof(tmp_pos_z));
  if (raw_pos_z != 0) {
    _this->_internal_set_pos_z(from._internal_pos_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale_x = from._internal_scale_x();
  uint32_t raw_scale_x;
  memcpy(&raw_scale_x, &tmp_scale_x, sizeof(tmp_scale_x));
  if (raw_scale_x != 0) {
    _this->_internal_set_scale_x(from._internal_scale_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale_y = from._internal_scale_y();
  uint32_t raw_scale_y;
  memcpy(&raw_scale_y, &tmp_scale_y, sizeof(tmp_scale_y));
  if (raw_scale_y != 0) {
    _this->_internal_set_scale_y(from._internal_scale_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale_z = from._internal_scale_z();
  uint32_t raw_scale_z;
  memcpy(&raw_scale_z, &tmp_scale_z, sizeof(tmp_scale_z));
  if (raw_scale_z != 0) {
    _this->_internal_set_scale_z(from._internal_scale_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_yaw = from._internal_rot_yaw();
  uint32_t raw_rot_yaw;
  memcpy(&raw_rot_yaw, &tmp_rot_yaw, sizeof(tmp_rot_yaw));
  if (raw_rot_yaw != 0) {
    _this->_internal_set_rot_yaw(from._internal_rot_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_pitch = from._internal_rot_pitch();
  uint32_t raw_rot_pitch;
  memcpy(&raw_rot_pitch, &tmp_rot_pitch, sizeof(tmp_rot_pitch));
  if (raw_rot_pitch != 0) {
    _this->_internal_set_rot_pitch(from._internal_rot_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rot_roll = from._internal_rot_roll();
  uint32_t raw_rot_roll;
  memcpy(&raw_rot_roll, &tmp_rot_roll, sizeof(tmp_rot_roll));
  if (raw_rot_roll != 0) {
    _this->_internal_set_rot_roll(from._internal_rot_roll());
  }
  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_levelobject_id_by_tag() != 0) {
    _this->_internal_set_levelobject_id_by_tag(from._internal_levelobject_id_by_tag());
  }
  if (from._internal_reset_per_round() != 0) {
    _this->_internal_set_reset_per_round(from._internal_reset_per_round());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_surcolor() != 0) {
    _this->_internal_set_surcolor(from._internal_surcolor());
  }
  if (from._internal_bordercolor() != 0) {
    _this->_internal_set_bordercolor(from._internal_bordercolor());
  }
  if (from._internal_isstatic() != 0) {
    _this->_internal_set_isstatic(from._internal_isstatic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCSubLevelItemRuntimeData::CopyFrom(const UGCSubLevelItemRuntimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCSubLevelItemRuntimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCSubLevelItemRuntimeData::IsInitialized() const {
  return true;
}

void UGCSubLevelItemRuntimeData::InternalSwap(UGCSubLevelItemRuntimeData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logic_entity_id_, lhs_arena,
      &other->_impl_.logic_entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customized_name_, lhs_arena,
      &other->_impl_.customized_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obj_color_, lhs_arena,
      &other->_impl_.obj_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.surtex_, lhs_arena,
      &other->_impl_.surtex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bortex_, lhs_arena,
      &other->_impl_.bortex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCSubLevelItemRuntimeData, _impl_.isstatic_)
      + sizeof(UGCSubLevelItemRuntimeData::_impl_.isstatic_)
      - PROTOBUF_FIELD_OFFSET(UGCSubLevelItemRuntimeData, _impl_.static_type_id_)>(
          reinterpret_cast<char*>(&_impl_.static_type_id_),
          reinterpret_cast<char*>(&other->_impl_.static_type_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCSubLevelItemRuntimeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[45]);
}

// ===================================================================

class UGCSubLevelDescData::_Internal {
 public:
};

UGCSubLevelDescData::UGCSubLevelDescData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCSubLevelDescData)
}
UGCSubLevelDescData::UGCSubLevelDescData(const UGCSubLevelDescData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCSubLevelDescData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gridwidth_){}
    , decltype(_impl_.gridheight_){}
    , decltype(_impl_.gridcenterx_){}
    , decltype(_impl_.gridcenterz_){}
    , decltype(_impl_.gridunit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gridwidth_, &from._impl_.gridwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gridunit_) -
    reinterpret_cast<char*>(&_impl_.gridwidth_)) + sizeof(_impl_.gridunit_));
  // @@protoc_insertion_point(copy_constructor:message.UGCSubLevelDescData)
}

inline void UGCSubLevelDescData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gridwidth_){0}
    , decltype(_impl_.gridheight_){0}
    , decltype(_impl_.gridcenterx_){0}
    , decltype(_impl_.gridcenterz_){0}
    , decltype(_impl_.gridunit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCSubLevelDescData::~UGCSubLevelDescData() {
  // @@protoc_insertion_point(destructor:message.UGCSubLevelDescData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCSubLevelDescData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGCSubLevelDescData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCSubLevelDescData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCSubLevelDescData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gridwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gridunit_) -
      reinterpret_cast<char*>(&_impl_.gridwidth_)) + sizeof(_impl_.gridunit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCSubLevelDescData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float GridWidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.gridwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float GridHeight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.gridheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float GridCenterX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.gridcenterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float GridCenterZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.gridcenterz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float GridUnit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.gridunit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCSubLevelDescData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCSubLevelDescData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float GridWidth = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridwidth = this->_internal_gridwidth();
  uint32_t raw_gridwidth;
  memcpy(&raw_gridwidth, &tmp_gridwidth, sizeof(tmp_gridwidth));
  if (raw_gridwidth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_gridwidth(), target);
  }

  // float GridHeight = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridheight = this->_internal_gridheight();
  uint32_t raw_gridheight;
  memcpy(&raw_gridheight, &tmp_gridheight, sizeof(tmp_gridheight));
  if (raw_gridheight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_gridheight(), target);
  }

  // float GridCenterX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridcenterx = this->_internal_gridcenterx();
  uint32_t raw_gridcenterx;
  memcpy(&raw_gridcenterx, &tmp_gridcenterx, sizeof(tmp_gridcenterx));
  if (raw_gridcenterx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_gridcenterx(), target);
  }

  // float GridCenterZ = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridcenterz = this->_internal_gridcenterz();
  uint32_t raw_gridcenterz;
  memcpy(&raw_gridcenterz, &tmp_gridcenterz, sizeof(tmp_gridcenterz));
  if (raw_gridcenterz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_gridcenterz(), target);
  }

  // float GridUnit = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridunit = this->_internal_gridunit();
  uint32_t raw_gridunit;
  memcpy(&raw_gridunit, &tmp_gridunit, sizeof(tmp_gridunit));
  if (raw_gridunit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_gridunit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCSubLevelDescData)
  return target;
}

size_t UGCSubLevelDescData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCSubLevelDescData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float GridWidth = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridwidth = this->_internal_gridwidth();
  uint32_t raw_gridwidth;
  memcpy(&raw_gridwidth, &tmp_gridwidth, sizeof(tmp_gridwidth));
  if (raw_gridwidth != 0) {
    total_size += 1 + 4;
  }

  // float GridHeight = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridheight = this->_internal_gridheight();
  uint32_t raw_gridheight;
  memcpy(&raw_gridheight, &tmp_gridheight, sizeof(tmp_gridheight));
  if (raw_gridheight != 0) {
    total_size += 1 + 4;
  }

  // float GridCenterX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridcenterx = this->_internal_gridcenterx();
  uint32_t raw_gridcenterx;
  memcpy(&raw_gridcenterx, &tmp_gridcenterx, sizeof(tmp_gridcenterx));
  if (raw_gridcenterx != 0) {
    total_size += 1 + 4;
  }

  // float GridCenterZ = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridcenterz = this->_internal_gridcenterz();
  uint32_t raw_gridcenterz;
  memcpy(&raw_gridcenterz, &tmp_gridcenterz, sizeof(tmp_gridcenterz));
  if (raw_gridcenterz != 0) {
    total_size += 1 + 4;
  }

  // float GridUnit = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridunit = this->_internal_gridunit();
  uint32_t raw_gridunit;
  memcpy(&raw_gridunit, &tmp_gridunit, sizeof(tmp_gridunit));
  if (raw_gridunit != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCSubLevelDescData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCSubLevelDescData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCSubLevelDescData::GetClassData() const { return &_class_data_; }


void UGCSubLevelDescData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCSubLevelDescData*>(&to_msg);
  auto& from = static_cast<const UGCSubLevelDescData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCSubLevelDescData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridwidth = from._internal_gridwidth();
  uint32_t raw_gridwidth;
  memcpy(&raw_gridwidth, &tmp_gridwidth, sizeof(tmp_gridwidth));
  if (raw_gridwidth != 0) {
    _this->_internal_set_gridwidth(from._internal_gridwidth());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridheight = from._internal_gridheight();
  uint32_t raw_gridheight;
  memcpy(&raw_gridheight, &tmp_gridheight, sizeof(tmp_gridheight));
  if (raw_gridheight != 0) {
    _this->_internal_set_gridheight(from._internal_gridheight());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridcenterx = from._internal_gridcenterx();
  uint32_t raw_gridcenterx;
  memcpy(&raw_gridcenterx, &tmp_gridcenterx, sizeof(tmp_gridcenterx));
  if (raw_gridcenterx != 0) {
    _this->_internal_set_gridcenterx(from._internal_gridcenterx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridcenterz = from._internal_gridcenterz();
  uint32_t raw_gridcenterz;
  memcpy(&raw_gridcenterz, &tmp_gridcenterz, sizeof(tmp_gridcenterz));
  if (raw_gridcenterz != 0) {
    _this->_internal_set_gridcenterz(from._internal_gridcenterz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gridunit = from._internal_gridunit();
  uint32_t raw_gridunit;
  memcpy(&raw_gridunit, &tmp_gridunit, sizeof(tmp_gridunit));
  if (raw_gridunit != 0) {
    _this->_internal_set_gridunit(from._internal_gridunit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCSubLevelDescData::CopyFrom(const UGCSubLevelDescData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCSubLevelDescData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCSubLevelDescData::IsInitialized() const {
  return true;
}

void UGCSubLevelDescData::InternalSwap(UGCSubLevelDescData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCSubLevelDescData, _impl_.gridunit_)
      + sizeof(UGCSubLevelDescData::_impl_.gridunit_)
      - PROTOBUF_FIELD_OFFSET(UGCSubLevelDescData, _impl_.gridwidth_)>(
          reinterpret_cast<char*>(&_impl_.gridwidth_),
          reinterpret_cast<char*>(&other->_impl_.gridwidth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCSubLevelDescData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[46]);
}

// ===================================================================

class UGCSubLevelSkyEnvData::_Internal {
 public:
};

UGCSubLevelSkyEnvData::UGCSubLevelSkyEnvData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCSubLevelSkyEnvData)
}
UGCSubLevelSkyEnvData::UGCSubLevelSkyEnvData(const UGCSubLevelSkyEnvData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCSubLevelSkyEnvData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.baseskyenvres_){}
    , decltype(_impl_.lightcolor_){}
    , decltype(_impl_.lightintensity_){}
    , decltype(_impl_.darkness_){}
    , decltype(_impl_.shadowstrength_){}
    , decltype(_impl_.isadvancemode_){}
    , decltype(_impl_.nightmode_){}
    , decltype(_impl_.terrainwetness_){}
    , decltype(_impl_.lensflare_){}
    , decltype(_impl_.fogcolor_){}
    , decltype(_impl_.ambientcolor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.baseskyenvres_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.baseskyenvres_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_baseskyenvres().empty()) {
    _this->_impl_.baseskyenvres_.Set(from._internal_baseskyenvres(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lightcolor_, &from._impl_.lightcolor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ambientcolor_) -
    reinterpret_cast<char*>(&_impl_.lightcolor_)) + sizeof(_impl_.ambientcolor_));
  // @@protoc_insertion_point(copy_constructor:message.UGCSubLevelSkyEnvData)
}

inline void UGCSubLevelSkyEnvData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.baseskyenvres_){}
    , decltype(_impl_.lightcolor_){0}
    , decltype(_impl_.lightintensity_){0}
    , decltype(_impl_.darkness_){0}
    , decltype(_impl_.shadowstrength_){0}
    , decltype(_impl_.isadvancemode_){false}
    , decltype(_impl_.nightmode_){false}
    , decltype(_impl_.terrainwetness_){0}
    , decltype(_impl_.lensflare_){0}
    , decltype(_impl_.fogcolor_){0}
    , decltype(_impl_.ambientcolor_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.baseskyenvres_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.baseskyenvres_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCSubLevelSkyEnvData::~UGCSubLevelSkyEnvData() {
  // @@protoc_insertion_point(destructor:message.UGCSubLevelSkyEnvData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCSubLevelSkyEnvData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.baseskyenvres_.Destroy();
}

void UGCSubLevelSkyEnvData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCSubLevelSkyEnvData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCSubLevelSkyEnvData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.baseskyenvres_.ClearToEmpty();
  ::memset(&_impl_.lightcolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ambientcolor_) -
      reinterpret_cast<char*>(&_impl_.lightcolor_)) + sizeof(_impl_.ambientcolor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCSubLevelSkyEnvData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool IsAdvanceMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isadvancemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BaseSkyEnvRes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_baseskyenvres();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCSubLevelSkyEnvData.BaseSkyEnvRes"));
        } else
          goto handle_unusual;
        continue;
      // int32 LightColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lightcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float LightIntensity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.lightintensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Darkness = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.darkness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ShadowStrength = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.shadowstrength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float TerrainWetness = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.terrainwetness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float LensFlare = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.lensflare_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 FogColor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.fogcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AmbientColor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ambientcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool NightMode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.nightmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCSubLevelSkyEnvData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCSubLevelSkyEnvData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsAdvanceMode = 1;
  if (this->_internal_isadvancemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isadvancemode(), target);
  }

  // string BaseSkyEnvRes = 2;
  if (!this->_internal_baseskyenvres().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_baseskyenvres().data(), static_cast<int>(this->_internal_baseskyenvres().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCSubLevelSkyEnvData.BaseSkyEnvRes");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_baseskyenvres(), target);
  }

  // int32 LightColor = 3;
  if (this->_internal_lightcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lightcolor(), target);
  }

  // float LightIntensity = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lightintensity = this->_internal_lightintensity();
  uint32_t raw_lightintensity;
  memcpy(&raw_lightintensity, &tmp_lightintensity, sizeof(tmp_lightintensity));
  if (raw_lightintensity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_lightintensity(), target);
  }

  // float Darkness = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_darkness = this->_internal_darkness();
  uint32_t raw_darkness;
  memcpy(&raw_darkness, &tmp_darkness, sizeof(tmp_darkness));
  if (raw_darkness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_darkness(), target);
  }

  // float ShadowStrength = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadowstrength = this->_internal_shadowstrength();
  uint32_t raw_shadowstrength;
  memcpy(&raw_shadowstrength, &tmp_shadowstrength, sizeof(tmp_shadowstrength));
  if (raw_shadowstrength != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_shadowstrength(), target);
  }

  // float TerrainWetness = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_terrainwetness = this->_internal_terrainwetness();
  uint32_t raw_terrainwetness;
  memcpy(&raw_terrainwetness, &tmp_terrainwetness, sizeof(tmp_terrainwetness));
  if (raw_terrainwetness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_terrainwetness(), target);
  }

  // float LensFlare = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lensflare = this->_internal_lensflare();
  uint32_t raw_lensflare;
  memcpy(&raw_lensflare, &tmp_lensflare, sizeof(tmp_lensflare));
  if (raw_lensflare != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_lensflare(), target);
  }

  // int32 FogColor = 9;
  if (this->_internal_fogcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_fogcolor(), target);
  }

  // int32 AmbientColor = 10;
  if (this->_internal_ambientcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_ambientcolor(), target);
  }

  // bool NightMode = 11;
  if (this->_internal_nightmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_nightmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCSubLevelSkyEnvData)
  return target;
}

size_t UGCSubLevelSkyEnvData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCSubLevelSkyEnvData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BaseSkyEnvRes = 2;
  if (!this->_internal_baseskyenvres().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_baseskyenvres());
  }

  // int32 LightColor = 3;
  if (this->_internal_lightcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lightcolor());
  }

  // float LightIntensity = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lightintensity = this->_internal_lightintensity();
  uint32_t raw_lightintensity;
  memcpy(&raw_lightintensity, &tmp_lightintensity, sizeof(tmp_lightintensity));
  if (raw_lightintensity != 0) {
    total_size += 1 + 4;
  }

  // float Darkness = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_darkness = this->_internal_darkness();
  uint32_t raw_darkness;
  memcpy(&raw_darkness, &tmp_darkness, sizeof(tmp_darkness));
  if (raw_darkness != 0) {
    total_size += 1 + 4;
  }

  // float ShadowStrength = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadowstrength = this->_internal_shadowstrength();
  uint32_t raw_shadowstrength;
  memcpy(&raw_shadowstrength, &tmp_shadowstrength, sizeof(tmp_shadowstrength));
  if (raw_shadowstrength != 0) {
    total_size += 1 + 4;
  }

  // bool IsAdvanceMode = 1;
  if (this->_internal_isadvancemode() != 0) {
    total_size += 1 + 1;
  }

  // bool NightMode = 11;
  if (this->_internal_nightmode() != 0) {
    total_size += 1 + 1;
  }

  // float TerrainWetness = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_terrainwetness = this->_internal_terrainwetness();
  uint32_t raw_terrainwetness;
  memcpy(&raw_terrainwetness, &tmp_terrainwetness, sizeof(tmp_terrainwetness));
  if (raw_terrainwetness != 0) {
    total_size += 1 + 4;
  }

  // float LensFlare = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lensflare = this->_internal_lensflare();
  uint32_t raw_lensflare;
  memcpy(&raw_lensflare, &tmp_lensflare, sizeof(tmp_lensflare));
  if (raw_lensflare != 0) {
    total_size += 1 + 4;
  }

  // int32 FogColor = 9;
  if (this->_internal_fogcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fogcolor());
  }

  // int32 AmbientColor = 10;
  if (this->_internal_ambientcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ambientcolor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCSubLevelSkyEnvData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCSubLevelSkyEnvData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCSubLevelSkyEnvData::GetClassData() const { return &_class_data_; }


void UGCSubLevelSkyEnvData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCSubLevelSkyEnvData*>(&to_msg);
  auto& from = static_cast<const UGCSubLevelSkyEnvData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCSubLevelSkyEnvData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_baseskyenvres().empty()) {
    _this->_internal_set_baseskyenvres(from._internal_baseskyenvres());
  }
  if (from._internal_lightcolor() != 0) {
    _this->_internal_set_lightcolor(from._internal_lightcolor());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lightintensity = from._internal_lightintensity();
  uint32_t raw_lightintensity;
  memcpy(&raw_lightintensity, &tmp_lightintensity, sizeof(tmp_lightintensity));
  if (raw_lightintensity != 0) {
    _this->_internal_set_lightintensity(from._internal_lightintensity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_darkness = from._internal_darkness();
  uint32_t raw_darkness;
  memcpy(&raw_darkness, &tmp_darkness, sizeof(tmp_darkness));
  if (raw_darkness != 0) {
    _this->_internal_set_darkness(from._internal_darkness());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadowstrength = from._internal_shadowstrength();
  uint32_t raw_shadowstrength;
  memcpy(&raw_shadowstrength, &tmp_shadowstrength, sizeof(tmp_shadowstrength));
  if (raw_shadowstrength != 0) {
    _this->_internal_set_shadowstrength(from._internal_shadowstrength());
  }
  if (from._internal_isadvancemode() != 0) {
    _this->_internal_set_isadvancemode(from._internal_isadvancemode());
  }
  if (from._internal_nightmode() != 0) {
    _this->_internal_set_nightmode(from._internal_nightmode());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_terrainwetness = from._internal_terrainwetness();
  uint32_t raw_terrainwetness;
  memcpy(&raw_terrainwetness, &tmp_terrainwetness, sizeof(tmp_terrainwetness));
  if (raw_terrainwetness != 0) {
    _this->_internal_set_terrainwetness(from._internal_terrainwetness());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lensflare = from._internal_lensflare();
  uint32_t raw_lensflare;
  memcpy(&raw_lensflare, &tmp_lensflare, sizeof(tmp_lensflare));
  if (raw_lensflare != 0) {
    _this->_internal_set_lensflare(from._internal_lensflare());
  }
  if (from._internal_fogcolor() != 0) {
    _this->_internal_set_fogcolor(from._internal_fogcolor());
  }
  if (from._internal_ambientcolor() != 0) {
    _this->_internal_set_ambientcolor(from._internal_ambientcolor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCSubLevelSkyEnvData::CopyFrom(const UGCSubLevelSkyEnvData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCSubLevelSkyEnvData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCSubLevelSkyEnvData::IsInitialized() const {
  return true;
}

void UGCSubLevelSkyEnvData::InternalSwap(UGCSubLevelSkyEnvData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.baseskyenvres_, lhs_arena,
      &other->_impl_.baseskyenvres_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCSubLevelSkyEnvData, _impl_.ambientcolor_)
      + sizeof(UGCSubLevelSkyEnvData::_impl_.ambientcolor_)
      - PROTOBUF_FIELD_OFFSET(UGCSubLevelSkyEnvData, _impl_.lightcolor_)>(
          reinterpret_cast<char*>(&_impl_.lightcolor_),
          reinterpret_cast<char*>(&other->_impl_.lightcolor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCSubLevelSkyEnvData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[47]);
}

// ===================================================================

class UGCSubLevelResourceData::_Internal {
 public:
  static const ::message::UGCSubLevelDescData& descinfo(const UGCSubLevelResourceData* msg);
  static const ::message::SceneEditEntityAttributeProtoData& objectattrlist(const UGCSubLevelResourceData* msg);
  static const ::message::UGCSubLevelSkyEnvData& skyenv(const UGCSubLevelResourceData* msg);
};

const ::message::UGCSubLevelDescData&
UGCSubLevelResourceData::_Internal::descinfo(const UGCSubLevelResourceData* msg) {
  return *msg->_impl_.descinfo_;
}
const ::message::SceneEditEntityAttributeProtoData&
UGCSubLevelResourceData::_Internal::objectattrlist(const UGCSubLevelResourceData* msg) {
  return *msg->_impl_.objectattrlist_;
}
const ::message::UGCSubLevelSkyEnvData&
UGCSubLevelResourceData::_Internal::skyenv(const UGCSubLevelResourceData* msg) {
  return *msg->_impl_.skyenv_;
}
UGCSubLevelResourceData::UGCSubLevelResourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCSubLevelResourceData)
}
UGCSubLevelResourceData::UGCSubLevelResourceData(const UGCSubLevelResourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCSubLevelResourceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectlist_){from._impl_.objectlist_}
    , decltype(_impl_.objecthierachy_){from._impl_.objecthierachy_}
    , decltype(_impl_.sublevelname_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.grassresourceuuid_){}
    , decltype(_impl_.descinfo_){nullptr}
    , decltype(_impl_.objectattrlist_){nullptr}
    , decltype(_impl_.skyenv_){nullptr}
    , decltype(_impl_.basemapid_){}
    , decltype(_impl_.ismainlevel_){}
    , decltype(_impl_.isuseleveldescdata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sublevelname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sublevelname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sublevelname().empty()) {
    _this->_impl_.sublevelname_.Set(from._internal_sublevelname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guid().empty()) {
    _this->_impl_.guid_.Set(from._internal_guid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.grassresourceuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grassresourceuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_grassresourceuuid().empty()) {
    _this->_impl_.grassresourceuuid_.Set(from._internal_grassresourceuuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_descinfo()) {
    _this->_impl_.descinfo_ = new ::message::UGCSubLevelDescData(*from._impl_.descinfo_);
  }
  if (from._internal_has_objectattrlist()) {
    _this->_impl_.objectattrlist_ = new ::message::SceneEditEntityAttributeProtoData(*from._impl_.objectattrlist_);
  }
  if (from._internal_has_skyenv()) {
    _this->_impl_.skyenv_ = new ::message::UGCSubLevelSkyEnvData(*from._impl_.skyenv_);
  }
  ::memcpy(&_impl_.basemapid_, &from._impl_.basemapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isuseleveldescdata_) -
    reinterpret_cast<char*>(&_impl_.basemapid_)) + sizeof(_impl_.isuseleveldescdata_));
  // @@protoc_insertion_point(copy_constructor:message.UGCSubLevelResourceData)
}

inline void UGCSubLevelResourceData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectlist_){arena}
    , decltype(_impl_.objecthierachy_){arena}
    , decltype(_impl_.sublevelname_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.grassresourceuuid_){}
    , decltype(_impl_.descinfo_){nullptr}
    , decltype(_impl_.objectattrlist_){nullptr}
    , decltype(_impl_.skyenv_){nullptr}
    , decltype(_impl_.basemapid_){0u}
    , decltype(_impl_.ismainlevel_){false}
    , decltype(_impl_.isuseleveldescdata_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sublevelname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sublevelname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.grassresourceuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grassresourceuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCSubLevelResourceData::~UGCSubLevelResourceData() {
  // @@protoc_insertion_point(destructor:message.UGCSubLevelResourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCSubLevelResourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objectlist_.~RepeatedPtrField();
  _impl_.objecthierachy_.~RepeatedPtrField();
  _impl_.sublevelname_.Destroy();
  _impl_.guid_.Destroy();
  _impl_.grassresourceuuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.descinfo_;
  if (this != internal_default_instance()) delete _impl_.objectattrlist_;
  if (this != internal_default_instance()) delete _impl_.skyenv_;
}

void UGCSubLevelResourceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCSubLevelResourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCSubLevelResourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objectlist_.Clear();
  _impl_.objecthierachy_.Clear();
  _impl_.sublevelname_.ClearToEmpty();
  _impl_.guid_.ClearToEmpty();
  _impl_.grassresourceuuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.descinfo_ != nullptr) {
    delete _impl_.descinfo_;
  }
  _impl_.descinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.objectattrlist_ != nullptr) {
    delete _impl_.objectattrlist_;
  }
  _impl_.objectattrlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.skyenv_ != nullptr) {
    delete _impl_.skyenv_;
  }
  _impl_.skyenv_ = nullptr;
  ::memset(&_impl_.basemapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isuseleveldescdata_) -
      reinterpret_cast<char*>(&_impl_.basemapid_)) + sizeof(_impl_.isuseleveldescdata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCSubLevelResourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SubLevelName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sublevelname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCSubLevelResourceData.SubLevelName"));
        } else
          goto handle_unusual;
        continue;
      // string GUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCSubLevelResourceData.GUID"));
        } else
          goto handle_unusual;
        continue;
      // bool IsMainLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ismainlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BaseMapID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.basemapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsUseLevelDescData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isuseleveldescdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCSubLevelDescData DescInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_descinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCSubLevelItemRuntimeData ObjectList = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objectlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.SceneEditEntityAttributeProtoData ObjectAttrList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectattrlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCSubLevelSkyEnvData SkyEnv = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_skyenv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCTransformNodeData ObjectHierachy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objecthierachy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string GrassResourceUUID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_grassresourceuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCSubLevelResourceData.GrassResourceUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCSubLevelResourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCSubLevelResourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SubLevelName = 1;
  if (!this->_internal_sublevelname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sublevelname().data(), static_cast<int>(this->_internal_sublevelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCSubLevelResourceData.SubLevelName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sublevelname(), target);
  }

  // string GUID = 2;
  if (!this->_internal_guid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCSubLevelResourceData.GUID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_guid(), target);
  }

  // bool IsMainLevel = 3;
  if (this->_internal_ismainlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ismainlevel(), target);
  }

  // uint32 BaseMapID = 4;
  if (this->_internal_basemapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_basemapid(), target);
  }

  // bool IsUseLevelDescData = 5;
  if (this->_internal_isuseleveldescdata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isuseleveldescdata(), target);
  }

  // .message.UGCSubLevelDescData DescInfo = 6;
  if (this->_internal_has_descinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::descinfo(this),
        _Internal::descinfo(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCSubLevelItemRuntimeData ObjectList = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objectlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_objectlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.SceneEditEntityAttributeProtoData ObjectAttrList = 8;
  if (this->_internal_has_objectattrlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::objectattrlist(this),
        _Internal::objectattrlist(this).GetCachedSize(), target, stream);
  }

  // .message.UGCSubLevelSkyEnvData SkyEnv = 9;
  if (this->_internal_has_skyenv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::skyenv(this),
        _Internal::skyenv(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCTransformNodeData ObjectHierachy = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objecthierachy_size()); i < n; i++) {
    const auto& repfield = this->_internal_objecthierachy(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string GrassResourceUUID = 11;
  if (!this->_internal_grassresourceuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_grassresourceuuid().data(), static_cast<int>(this->_internal_grassresourceuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCSubLevelResourceData.GrassResourceUUID");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_grassresourceuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCSubLevelResourceData)
  return target;
}

size_t UGCSubLevelResourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCSubLevelResourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCSubLevelItemRuntimeData ObjectList = 7;
  total_size += 1UL * this->_internal_objectlist_size();
  for (const auto& msg : this->_impl_.objectlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCTransformNodeData ObjectHierachy = 10;
  total_size += 1UL * this->_internal_objecthierachy_size();
  for (const auto& msg : this->_impl_.objecthierachy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string SubLevelName = 1;
  if (!this->_internal_sublevelname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sublevelname());
  }

  // string GUID = 2;
  if (!this->_internal_guid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  // string GrassResourceUUID = 11;
  if (!this->_internal_grassresourceuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_grassresourceuuid());
  }

  // .message.UGCSubLevelDescData DescInfo = 6;
  if (this->_internal_has_descinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.descinfo_);
  }

  // .message.SceneEditEntityAttributeProtoData ObjectAttrList = 8;
  if (this->_internal_has_objectattrlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.objectattrlist_);
  }

  // .message.UGCSubLevelSkyEnvData SkyEnv = 9;
  if (this->_internal_has_skyenv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.skyenv_);
  }

  // uint32 BaseMapID = 4;
  if (this->_internal_basemapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_basemapid());
  }

  // bool IsMainLevel = 3;
  if (this->_internal_ismainlevel() != 0) {
    total_size += 1 + 1;
  }

  // bool IsUseLevelDescData = 5;
  if (this->_internal_isuseleveldescdata() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCSubLevelResourceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCSubLevelResourceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCSubLevelResourceData::GetClassData() const { return &_class_data_; }


void UGCSubLevelResourceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCSubLevelResourceData*>(&to_msg);
  auto& from = static_cast<const UGCSubLevelResourceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCSubLevelResourceData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objectlist_.MergeFrom(from._impl_.objectlist_);
  _this->_impl_.objecthierachy_.MergeFrom(from._impl_.objecthierachy_);
  if (!from._internal_sublevelname().empty()) {
    _this->_internal_set_sublevelname(from._internal_sublevelname());
  }
  if (!from._internal_guid().empty()) {
    _this->_internal_set_guid(from._internal_guid());
  }
  if (!from._internal_grassresourceuuid().empty()) {
    _this->_internal_set_grassresourceuuid(from._internal_grassresourceuuid());
  }
  if (from._internal_has_descinfo()) {
    _this->_internal_mutable_descinfo()->::message::UGCSubLevelDescData::MergeFrom(
        from._internal_descinfo());
  }
  if (from._internal_has_objectattrlist()) {
    _this->_internal_mutable_objectattrlist()->::message::SceneEditEntityAttributeProtoData::MergeFrom(
        from._internal_objectattrlist());
  }
  if (from._internal_has_skyenv()) {
    _this->_internal_mutable_skyenv()->::message::UGCSubLevelSkyEnvData::MergeFrom(
        from._internal_skyenv());
  }
  if (from._internal_basemapid() != 0) {
    _this->_internal_set_basemapid(from._internal_basemapid());
  }
  if (from._internal_ismainlevel() != 0) {
    _this->_internal_set_ismainlevel(from._internal_ismainlevel());
  }
  if (from._internal_isuseleveldescdata() != 0) {
    _this->_internal_set_isuseleveldescdata(from._internal_isuseleveldescdata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCSubLevelResourceData::CopyFrom(const UGCSubLevelResourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCSubLevelResourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCSubLevelResourceData::IsInitialized() const {
  return true;
}

void UGCSubLevelResourceData::InternalSwap(UGCSubLevelResourceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objectlist_.InternalSwap(&other->_impl_.objectlist_);
  _impl_.objecthierachy_.InternalSwap(&other->_impl_.objecthierachy_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sublevelname_, lhs_arena,
      &other->_impl_.sublevelname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guid_, lhs_arena,
      &other->_impl_.guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.grassresourceuuid_, lhs_arena,
      &other->_impl_.grassresourceuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCSubLevelResourceData, _impl_.isuseleveldescdata_)
      + sizeof(UGCSubLevelResourceData::_impl_.isuseleveldescdata_)
      - PROTOBUF_FIELD_OFFSET(UGCSubLevelResourceData, _impl_.descinfo_)>(
          reinterpret_cast<char*>(&_impl_.descinfo_),
          reinterpret_cast<char*>(&other->_impl_.descinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCSubLevelResourceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[48]);
}

// ===================================================================

class UGCTransformNodeData::_Internal {
 public:
  static const ::message::ProtoBuffVector3& localposition(const UGCTransformNodeData* msg);
  static const ::message::ProtoBuffVector3& localscale(const UGCTransformNodeData* msg);
  static const ::message::ProtoBuffQuaternion& localrotation(const UGCTransformNodeData* msg);
};

const ::message::ProtoBuffVector3&
UGCTransformNodeData::_Internal::localposition(const UGCTransformNodeData* msg) {
  return *msg->_impl_.localposition_;
}
const ::message::ProtoBuffVector3&
UGCTransformNodeData::_Internal::localscale(const UGCTransformNodeData* msg) {
  return *msg->_impl_.localscale_;
}
const ::message::ProtoBuffQuaternion&
UGCTransformNodeData::_Internal::localrotation(const UGCTransformNodeData* msg) {
  return *msg->_impl_.localrotation_;
}
void UGCTransformNodeData::clear_localposition() {
  if (GetArenaForAllocation() == nullptr && _impl_.localposition_ != nullptr) {
    delete _impl_.localposition_;
  }
  _impl_.localposition_ = nullptr;
}
void UGCTransformNodeData::clear_localscale() {
  if (GetArenaForAllocation() == nullptr && _impl_.localscale_ != nullptr) {
    delete _impl_.localscale_;
  }
  _impl_.localscale_ = nullptr;
}
void UGCTransformNodeData::clear_localrotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.localrotation_ != nullptr) {
    delete _impl_.localrotation_;
  }
  _impl_.localrotation_ = nullptr;
}
UGCTransformNodeData::UGCTransformNodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCTransformNodeData)
}
UGCTransformNodeData::UGCTransformNodeData(const UGCTransformNodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCTransformNodeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.parentid_){}
    , decltype(_impl_.localposition_){nullptr}
    , decltype(_impl_.localscale_){nullptr}
    , decltype(_impl_.localrotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parentid().empty()) {
    _this->_impl_.parentid_.Set(from._internal_parentid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_localposition()) {
    _this->_impl_.localposition_ = new ::message::ProtoBuffVector3(*from._impl_.localposition_);
  }
  if (from._internal_has_localscale()) {
    _this->_impl_.localscale_ = new ::message::ProtoBuffVector3(*from._impl_.localscale_);
  }
  if (from._internal_has_localrotation()) {
    _this->_impl_.localrotation_ = new ::message::ProtoBuffQuaternion(*from._impl_.localrotation_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCTransformNodeData)
}

inline void UGCTransformNodeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.parentid_){}
    , decltype(_impl_.localposition_){nullptr}
    , decltype(_impl_.localscale_){nullptr}
    , decltype(_impl_.localrotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parentid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCTransformNodeData::~UGCTransformNodeData() {
  // @@protoc_insertion_point(destructor:message.UGCTransformNodeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCTransformNodeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.parentid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.localposition_;
  if (this != internal_default_instance()) delete _impl_.localscale_;
  if (this != internal_default_instance()) delete _impl_.localrotation_;
}

void UGCTransformNodeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCTransformNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCTransformNodeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.parentid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.localposition_ != nullptr) {
    delete _impl_.localposition_;
  }
  _impl_.localposition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.localscale_ != nullptr) {
    delete _impl_.localscale_;
  }
  _impl_.localscale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.localrotation_ != nullptr) {
    delete _impl_.localrotation_;
  }
  _impl_.localrotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCTransformNodeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCTransformNodeData.ID"));
        } else
          goto handle_unusual;
        continue;
      // string ParentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_parentid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCTransformNodeData.ParentID"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 LocalPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_localposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 LocalScale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_localscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffQuaternion LocalRotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_localrotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCTransformNodeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCTransformNodeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCTransformNodeData.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string ParentID = 2;
  if (!this->_internal_parentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parentid().data(), static_cast<int>(this->_internal_parentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCTransformNodeData.ParentID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parentid(), target);
  }

  // .message.ProtoBuffVector3 LocalPosition = 3;
  if (this->_internal_has_localposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::localposition(this),
        _Internal::localposition(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 LocalScale = 4;
  if (this->_internal_has_localscale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::localscale(this),
        _Internal::localscale(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffQuaternion LocalRotation = 5;
  if (this->_internal_has_localrotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::localrotation(this),
        _Internal::localrotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCTransformNodeData)
  return target;
}

size_t UGCTransformNodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCTransformNodeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string ParentID = 2;
  if (!this->_internal_parentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parentid());
  }

  // .message.ProtoBuffVector3 LocalPosition = 3;
  if (this->_internal_has_localposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localposition_);
  }

  // .message.ProtoBuffVector3 LocalScale = 4;
  if (this->_internal_has_localscale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localscale_);
  }

  // .message.ProtoBuffQuaternion LocalRotation = 5;
  if (this->_internal_has_localrotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localrotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCTransformNodeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCTransformNodeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCTransformNodeData::GetClassData() const { return &_class_data_; }


void UGCTransformNodeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCTransformNodeData*>(&to_msg);
  auto& from = static_cast<const UGCTransformNodeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCTransformNodeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_parentid().empty()) {
    _this->_internal_set_parentid(from._internal_parentid());
  }
  if (from._internal_has_localposition()) {
    _this->_internal_mutable_localposition()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_localposition());
  }
  if (from._internal_has_localscale()) {
    _this->_internal_mutable_localscale()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_localscale());
  }
  if (from._internal_has_localrotation()) {
    _this->_internal_mutable_localrotation()->::message::ProtoBuffQuaternion::MergeFrom(
        from._internal_localrotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCTransformNodeData::CopyFrom(const UGCTransformNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCTransformNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCTransformNodeData::IsInitialized() const {
  return true;
}

void UGCTransformNodeData::InternalSwap(UGCTransformNodeData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentid_, lhs_arena,
      &other->_impl_.parentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCTransformNodeData, _impl_.localrotation_)
      + sizeof(UGCTransformNodeData::_impl_.localrotation_)
      - PROTOBUF_FIELD_OFFSET(UGCTransformNodeData, _impl_.localposition_)>(
          reinterpret_cast<char*>(&_impl_.localposition_),
          reinterpret_cast<char*>(&other->_impl_.localposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCTransformNodeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[49]);
}

// ===================================================================

class UGCAllSceneRuntimeData::_Internal {
 public:
};

UGCAllSceneRuntimeData::UGCAllSceneRuntimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCAllSceneRuntimeData)
}
UGCAllSceneRuntimeData::UGCAllSceneRuntimeData(const UGCAllSceneRuntimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCAllSceneRuntimeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sublevellist_){from._impl_.sublevellist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCAllSceneRuntimeData)
}

inline void UGCAllSceneRuntimeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sublevellist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCAllSceneRuntimeData::~UGCAllSceneRuntimeData() {
  // @@protoc_insertion_point(destructor:message.UGCAllSceneRuntimeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCAllSceneRuntimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sublevellist_.~RepeatedPtrField();
}

void UGCAllSceneRuntimeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCAllSceneRuntimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCAllSceneRuntimeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sublevellist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCAllSceneRuntimeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCSubLevelResourceData SubLevelList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sublevellist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCAllSceneRuntimeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCAllSceneRuntimeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCSubLevelResourceData SubLevelList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sublevellist_size()); i < n; i++) {
    const auto& repfield = this->_internal_sublevellist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCAllSceneRuntimeData)
  return target;
}

size_t UGCAllSceneRuntimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCAllSceneRuntimeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCSubLevelResourceData SubLevelList = 1;
  total_size += 1UL * this->_internal_sublevellist_size();
  for (const auto& msg : this->_impl_.sublevellist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCAllSceneRuntimeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCAllSceneRuntimeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCAllSceneRuntimeData::GetClassData() const { return &_class_data_; }


void UGCAllSceneRuntimeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCAllSceneRuntimeData*>(&to_msg);
  auto& from = static_cast<const UGCAllSceneRuntimeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCAllSceneRuntimeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sublevellist_.MergeFrom(from._impl_.sublevellist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCAllSceneRuntimeData::CopyFrom(const UGCAllSceneRuntimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCAllSceneRuntimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCAllSceneRuntimeData::IsInitialized() const {
  return true;
}

void UGCAllSceneRuntimeData::InternalSwap(UGCAllSceneRuntimeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sublevellist_.InternalSwap(&other->_impl_.sublevellist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCAllSceneRuntimeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[50]);
}

// ===================================================================

class UGCMapRuntimeData::_Internal {
 public:
  static const ::message::SceneEditEntityProtoData& entities(const UGCMapRuntimeData* msg);
  static const ::message::SceneEditModeProtoData& modesetting(const UGCMapRuntimeData* msg);
  static const ::message::SceneEditEntityAttributeProtoData& entityattributes(const UGCMapRuntimeData* msg);
};

const ::message::SceneEditEntityProtoData&
UGCMapRuntimeData::_Internal::entities(const UGCMapRuntimeData* msg) {
  return *msg->_impl_.entities_;
}
const ::message::SceneEditModeProtoData&
UGCMapRuntimeData::_Internal::modesetting(const UGCMapRuntimeData* msg) {
  return *msg->_impl_.modesetting_;
}
const ::message::SceneEditEntityAttributeProtoData&
UGCMapRuntimeData::_Internal::entityattributes(const UGCMapRuntimeData* msg) {
  return *msg->_impl_.entityattributes_;
}
UGCMapRuntimeData::UGCMapRuntimeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCMapRuntimeData)
}
UGCMapRuntimeData::UGCMapRuntimeData(const UGCMapRuntimeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCMapRuntimeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){nullptr}
    , decltype(_impl_.modesetting_){nullptr}
    , decltype(_impl_.entityattributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entities()) {
    _this->_impl_.entities_ = new ::message::SceneEditEntityProtoData(*from._impl_.entities_);
  }
  if (from._internal_has_modesetting()) {
    _this->_impl_.modesetting_ = new ::message::SceneEditModeProtoData(*from._impl_.modesetting_);
  }
  if (from._internal_has_entityattributes()) {
    _this->_impl_.entityattributes_ = new ::message::SceneEditEntityAttributeProtoData(*from._impl_.entityattributes_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCMapRuntimeData)
}

inline void UGCMapRuntimeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entities_){nullptr}
    , decltype(_impl_.modesetting_){nullptr}
    , decltype(_impl_.entityattributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCMapRuntimeData::~UGCMapRuntimeData() {
  // @@protoc_insertion_point(destructor:message.UGCMapRuntimeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCMapRuntimeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.entities_;
  if (this != internal_default_instance()) delete _impl_.modesetting_;
  if (this != internal_default_instance()) delete _impl_.entityattributes_;
}

void UGCMapRuntimeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCMapRuntimeData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCMapRuntimeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.entities_ != nullptr) {
    delete _impl_.entities_;
  }
  _impl_.entities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modesetting_ != nullptr) {
    delete _impl_.modesetting_;
  }
  _impl_.modesetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.entityattributes_ != nullptr) {
    delete _impl_.entityattributes_;
  }
  _impl_.entityattributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCMapRuntimeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.SceneEditEntityProtoData Entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.SceneEditModeProtoData ModeSetting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_modesetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.SceneEditEntityAttributeProtoData EntityAttributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_entityattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCMapRuntimeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCMapRuntimeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.SceneEditEntityProtoData Entities = 1;
  if (this->_internal_has_entities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entities(this),
        _Internal::entities(this).GetCachedSize(), target, stream);
  }

  // .message.SceneEditModeProtoData ModeSetting = 2;
  if (this->_internal_has_modesetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::modesetting(this),
        _Internal::modesetting(this).GetCachedSize(), target, stream);
  }

  // .message.SceneEditEntityAttributeProtoData EntityAttributes = 3;
  if (this->_internal_has_entityattributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::entityattributes(this),
        _Internal::entityattributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCMapRuntimeData)
  return target;
}

size_t UGCMapRuntimeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCMapRuntimeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.SceneEditEntityProtoData Entities = 1;
  if (this->_internal_has_entities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entities_);
  }

  // .message.SceneEditModeProtoData ModeSetting = 2;
  if (this->_internal_has_modesetting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modesetting_);
  }

  // .message.SceneEditEntityAttributeProtoData EntityAttributes = 3;
  if (this->_internal_has_entityattributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entityattributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCMapRuntimeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCMapRuntimeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCMapRuntimeData::GetClassData() const { return &_class_data_; }


void UGCMapRuntimeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCMapRuntimeData*>(&to_msg);
  auto& from = static_cast<const UGCMapRuntimeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCMapRuntimeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entities()) {
    _this->_internal_mutable_entities()->::message::SceneEditEntityProtoData::MergeFrom(
        from._internal_entities());
  }
  if (from._internal_has_modesetting()) {
    _this->_internal_mutable_modesetting()->::message::SceneEditModeProtoData::MergeFrom(
        from._internal_modesetting());
  }
  if (from._internal_has_entityattributes()) {
    _this->_internal_mutable_entityattributes()->::message::SceneEditEntityAttributeProtoData::MergeFrom(
        from._internal_entityattributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCMapRuntimeData::CopyFrom(const UGCMapRuntimeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCMapRuntimeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCMapRuntimeData::IsInitialized() const {
  return true;
}

void UGCMapRuntimeData::InternalSwap(UGCMapRuntimeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCMapRuntimeData, _impl_.entityattributes_)
      + sizeof(UGCMapRuntimeData::_impl_.entityattributes_)
      - PROTOBUF_FIELD_OFFSET(UGCMapRuntimeData, _impl_.entities_)>(
          reinterpret_cast<char*>(&_impl_.entities_),
          reinterpret_cast<char*>(&other->_impl_.entities_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCMapRuntimeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[51]);
}

// ===================================================================

class SceneEditObjectProtoData::_Internal {
 public:
};

SceneEditObjectProtoData::SceneEditObjectProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditObjectProtoData)
}
SceneEditObjectProtoData::SceneEditObjectProtoData(const SceneEditObjectProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditObjectProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logic_entity_id_){}
    , decltype(_impl_.customized_name_){}
    , decltype(_impl_.obj_color_){}
    , decltype(_impl_.id_dir_posy_){}
    , decltype(_impl_.pos_xz_){}
    , decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.extra_base_info_free_dir_){}
    , decltype(_impl_.levelobject_id_by_tag_){}
    , decltype(_impl_.reset_per_round_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.logic_entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logic_entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logic_entity_id().empty()) {
    _this->_impl_.logic_entity_id_.Set(from._internal_logic_entity_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.customized_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customized_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customized_name().empty()) {
    _this->_impl_.customized_name_.Set(from._internal_customized_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.obj_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_obj_color().empty()) {
    _this->_impl_.obj_color_.Set(from._internal_obj_color(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_dir_posy_, &from._impl_.id_dir_posy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reset_per_round_) -
    reinterpret_cast<char*>(&_impl_.id_dir_posy_)) + sizeof(_impl_.reset_per_round_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditObjectProtoData)
}

inline void SceneEditObjectProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logic_entity_id_){}
    , decltype(_impl_.customized_name_){}
    , decltype(_impl_.obj_color_){}
    , decltype(_impl_.id_dir_posy_){0u}
    , decltype(_impl_.pos_xz_){0u}
    , decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.extra_base_info_free_dir_){0u}
    , decltype(_impl_.levelobject_id_by_tag_){0u}
    , decltype(_impl_.reset_per_round_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.logic_entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logic_entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customized_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customized_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.obj_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obj_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SceneEditObjectProtoData::~SceneEditObjectProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditObjectProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditObjectProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logic_entity_id_.Destroy();
  _impl_.customized_name_.Destroy();
  _impl_.obj_color_.Destroy();
}

void SceneEditObjectProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditObjectProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditObjectProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logic_entity_id_.ClearToEmpty();
  _impl_.customized_name_.ClearToEmpty();
  _impl_.obj_color_.ClearToEmpty();
  ::memset(&_impl_.id_dir_posy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reset_per_round_) -
      reinterpret_cast<char*>(&_impl_.id_dir_posy_)) + sizeof(_impl_.reset_per_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditObjectProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id_dir_posy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_dir_posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pos_xz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pos_xz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 extra_base_info_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 extra_base_info_free_dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.extra_base_info_free_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 levelobject_id_by_tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.levelobject_id_by_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string logic_entity_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_logic_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.SceneEditObjectProtoData.logic_entity_id"));
        } else
          goto handle_unusual;
        continue;
      // string customized_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_customized_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.SceneEditObjectProtoData.customized_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 reset_per_round = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.reset_per_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string obj_color = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_obj_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.SceneEditObjectProtoData.obj_color"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditObjectProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditObjectProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id_dir_posy = 1;
  if (this->_internal_id_dir_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id_dir_posy(), target);
  }

  // uint32 pos_xz = 2;
  if (this->_internal_pos_xz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pos_xz(), target);
  }

  // uint32 extra_base_info_instance_id = 3;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 extra_base_info_free_dir = 4;
  if (this->_internal_extra_base_info_free_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_extra_base_info_free_dir(), target);
  }

  // uint32 levelobject_id_by_tag = 5;
  if (this->_internal_levelobject_id_by_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_levelobject_id_by_tag(), target);
  }

  // string logic_entity_id = 6;
  if (!this->_internal_logic_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logic_entity_id().data(), static_cast<int>(this->_internal_logic_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.SceneEditObjectProtoData.logic_entity_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_logic_entity_id(), target);
  }

  // string customized_name = 7;
  if (!this->_internal_customized_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customized_name().data(), static_cast<int>(this->_internal_customized_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.SceneEditObjectProtoData.customized_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_customized_name(), target);
  }

  // uint32 reset_per_round = 8;
  if (this->_internal_reset_per_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_reset_per_round(), target);
  }

  // string obj_color = 9 [deprecated = true];
  if (!this->_internal_obj_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obj_color().data(), static_cast<int>(this->_internal_obj_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.SceneEditObjectProtoData.obj_color");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_obj_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditObjectProtoData)
  return target;
}

size_t SceneEditObjectProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditObjectProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logic_entity_id = 6;
  if (!this->_internal_logic_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logic_entity_id());
  }

  // string customized_name = 7;
  if (!this->_internal_customized_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customized_name());
  }

  // string obj_color = 9 [deprecated = true];
  if (!this->_internal_obj_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obj_color());
  }

  // uint32 id_dir_posy = 1;
  if (this->_internal_id_dir_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id_dir_posy());
  }

  // uint32 pos_xz = 2;
  if (this->_internal_pos_xz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pos_xz());
  }

  // uint32 extra_base_info_instance_id = 3;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 extra_base_info_free_dir = 4;
  if (this->_internal_extra_base_info_free_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_free_dir());
  }

  // uint32 levelobject_id_by_tag = 5;
  if (this->_internal_levelobject_id_by_tag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_levelobject_id_by_tag());
  }

  // uint32 reset_per_round = 8;
  if (this->_internal_reset_per_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reset_per_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditObjectProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditObjectProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditObjectProtoData::GetClassData() const { return &_class_data_; }


void SceneEditObjectProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditObjectProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditObjectProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditObjectProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_logic_entity_id().empty()) {
    _this->_internal_set_logic_entity_id(from._internal_logic_entity_id());
  }
  if (!from._internal_customized_name().empty()) {
    _this->_internal_set_customized_name(from._internal_customized_name());
  }
  if (!from._internal_obj_color().empty()) {
    _this->_internal_set_obj_color(from._internal_obj_color());
  }
  if (from._internal_id_dir_posy() != 0) {
    _this->_internal_set_id_dir_posy(from._internal_id_dir_posy());
  }
  if (from._internal_pos_xz() != 0) {
    _this->_internal_set_pos_xz(from._internal_pos_xz());
  }
  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_extra_base_info_free_dir() != 0) {
    _this->_internal_set_extra_base_info_free_dir(from._internal_extra_base_info_free_dir());
  }
  if (from._internal_levelobject_id_by_tag() != 0) {
    _this->_internal_set_levelobject_id_by_tag(from._internal_levelobject_id_by_tag());
  }
  if (from._internal_reset_per_round() != 0) {
    _this->_internal_set_reset_per_round(from._internal_reset_per_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditObjectProtoData::CopyFrom(const SceneEditObjectProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditObjectProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditObjectProtoData::IsInitialized() const {
  return true;
}

void SceneEditObjectProtoData::InternalSwap(SceneEditObjectProtoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logic_entity_id_, lhs_arena,
      &other->_impl_.logic_entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customized_name_, lhs_arena,
      &other->_impl_.customized_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obj_color_, lhs_arena,
      &other->_impl_.obj_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditObjectProtoData, _impl_.reset_per_round_)
      + sizeof(SceneEditObjectProtoData::_impl_.reset_per_round_)
      - PROTOBUF_FIELD_OFFSET(SceneEditObjectProtoData, _impl_.id_dir_posy_)>(
          reinterpret_cast<char*>(&_impl_.id_dir_posy_),
          reinterpret_cast<char*>(&other->_impl_.id_dir_posy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditObjectProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[52]);
}

// ===================================================================

class SceneEditEntityProtoData::_Internal {
 public:
};

SceneEditEntityProtoData::SceneEditEntityProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditEntityProtoData)
}
SceneEditEntityProtoData::SceneEditEntityProtoData(const SceneEditEntityProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditEntityProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objects_){from._impl_.objects_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.SceneEditEntityProtoData)
}

inline void SceneEditEntityProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objects_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditEntityProtoData::~SceneEditEntityProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditEntityProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditEntityProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objects_.~RepeatedPtrField();
}

void SceneEditEntityProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditEntityProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditEntityProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditEntityProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.SceneEditObjectProtoData objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditEntityProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditEntityProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.SceneEditObjectProtoData objects = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditEntityProtoData)
  return target;
}

size_t SceneEditEntityProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditEntityProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.SceneEditObjectProtoData objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_impl_.objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditEntityProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditEntityProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditEntityProtoData::GetClassData() const { return &_class_data_; }


void SceneEditEntityProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditEntityProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditEntityProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditEntityProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditEntityProtoData::CopyFrom(const SceneEditEntityProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditEntityProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditEntityProtoData::IsInitialized() const {
  return true;
}

void SceneEditEntityProtoData::InternalSwap(SceneEditEntityProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditEntityProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[53]);
}

// ===================================================================

class SceneEditTeleportDoorProtoData::_Internal {
 public:
};

SceneEditTeleportDoorProtoData::SceneEditTeleportDoorProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditTeleportDoorProtoData)
}
SceneEditTeleportDoorProtoData::SceneEditTeleportDoorProtoData(const SceneEditTeleportDoorProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditTeleportDoorProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.teleport_door_type_){}
    , decltype(_impl_.target_door_id_){}
    , decltype(_impl_.trigger_type_){}
    , decltype(_impl_.teleport_active_){}
    , decltype(_impl_.isvalid_teleport_door_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isvalid_teleport_door_type_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.isvalid_teleport_door_type_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditTeleportDoorProtoData)
}

inline void SceneEditTeleportDoorProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.group_id_){0u}
    , decltype(_impl_.teleport_door_type_){0u}
    , decltype(_impl_.target_door_id_){0u}
    , decltype(_impl_.trigger_type_){0u}
    , decltype(_impl_.teleport_active_){false}
    , decltype(_impl_.isvalid_teleport_door_type_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditTeleportDoorProtoData::~SceneEditTeleportDoorProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditTeleportDoorProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditTeleportDoorProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditTeleportDoorProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditTeleportDoorProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditTeleportDoorProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isvalid_teleport_door_type_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.isvalid_teleport_door_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditTeleportDoorProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 teleport_door_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.teleport_door_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_door_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.target_door_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 trigger_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.trigger_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool teleport_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.teleport_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isvalid_teleport_door_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isvalid_teleport_door_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditTeleportDoorProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditTeleportDoorProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_id(), target);
  }

  // uint32 teleport_door_type = 3;
  if (this->_internal_teleport_door_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_teleport_door_type(), target);
  }

  // uint32 target_door_id = 4;
  if (this->_internal_target_door_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_target_door_id(), target);
  }

  // uint32 trigger_type = 5;
  if (this->_internal_trigger_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_trigger_type(), target);
  }

  // bool teleport_active = 6;
  if (this->_internal_teleport_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_teleport_active(), target);
  }

  // bool isvalid_teleport_door_type = 7;
  if (this->_internal_isvalid_teleport_door_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isvalid_teleport_door_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditTeleportDoorProtoData)
  return target;
}

size_t SceneEditTeleportDoorProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditTeleportDoorProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  // uint32 teleport_door_type = 3;
  if (this->_internal_teleport_door_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teleport_door_type());
  }

  // uint32 target_door_id = 4;
  if (this->_internal_target_door_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_door_id());
  }

  // uint32 trigger_type = 5;
  if (this->_internal_trigger_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trigger_type());
  }

  // bool teleport_active = 6;
  if (this->_internal_teleport_active() != 0) {
    total_size += 1 + 1;
  }

  // bool isvalid_teleport_door_type = 7;
  if (this->_internal_isvalid_teleport_door_type() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditTeleportDoorProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditTeleportDoorProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditTeleportDoorProtoData::GetClassData() const { return &_class_data_; }


void SceneEditTeleportDoorProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditTeleportDoorProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditTeleportDoorProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditTeleportDoorProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_teleport_door_type() != 0) {
    _this->_internal_set_teleport_door_type(from._internal_teleport_door_type());
  }
  if (from._internal_target_door_id() != 0) {
    _this->_internal_set_target_door_id(from._internal_target_door_id());
  }
  if (from._internal_trigger_type() != 0) {
    _this->_internal_set_trigger_type(from._internal_trigger_type());
  }
  if (from._internal_teleport_active() != 0) {
    _this->_internal_set_teleport_active(from._internal_teleport_active());
  }
  if (from._internal_isvalid_teleport_door_type() != 0) {
    _this->_internal_set_isvalid_teleport_door_type(from._internal_isvalid_teleport_door_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditTeleportDoorProtoData::CopyFrom(const SceneEditTeleportDoorProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditTeleportDoorProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditTeleportDoorProtoData::IsInitialized() const {
  return true;
}

void SceneEditTeleportDoorProtoData::InternalSwap(SceneEditTeleportDoorProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditTeleportDoorProtoData, _impl_.isvalid_teleport_door_type_)
      + sizeof(SceneEditTeleportDoorProtoData::_impl_.isvalid_teleport_door_type_)
      - PROTOBUF_FIELD_OFFSET(SceneEditTeleportDoorProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditTeleportDoorProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[54]);
}

// ===================================================================

class SceneEditPianoKeyProtoData::_Internal {
 public:
};

SceneEditPianoKeyProtoData::SceneEditPianoKeyProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditPianoKeyProtoData)
}
SceneEditPianoKeyProtoData::SceneEditPianoKeyProtoData(const SceneEditPianoKeyProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditPianoKeyProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.key_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.key_id_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.key_id_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditPianoKeyProtoData)
}

inline void SceneEditPianoKeyProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.key_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditPianoKeyProtoData::~SceneEditPianoKeyProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditPianoKeyProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditPianoKeyProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditPianoKeyProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditPianoKeyProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditPianoKeyProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.key_id_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.key_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditPianoKeyProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditPianoKeyProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditPianoKeyProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 key_id = 2;
  if (this->_internal_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditPianoKeyProtoData)
  return target;
}

size_t SceneEditPianoKeyProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditPianoKeyProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 key_id = 2;
  if (this->_internal_key_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditPianoKeyProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditPianoKeyProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditPianoKeyProtoData::GetClassData() const { return &_class_data_; }


void SceneEditPianoKeyProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditPianoKeyProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditPianoKeyProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditPianoKeyProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_key_id() != 0) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditPianoKeyProtoData::CopyFrom(const SceneEditPianoKeyProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditPianoKeyProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditPianoKeyProtoData::IsInitialized() const {
  return true;
}

void SceneEditPianoKeyProtoData::InternalSwap(SceneEditPianoKeyProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditPianoKeyProtoData, _impl_.key_id_)
      + sizeof(SceneEditPianoKeyProtoData::_impl_.key_id_)
      - PROTOBUF_FIELD_OFFSET(SceneEditPianoKeyProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditPianoKeyProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[55]);
}

// ===================================================================

class SceneEditBuffProtoData::_Internal {
 public:
};

SceneEditBuffProtoData::SceneEditBuffProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditBuffProtoData)
}
SceneEditBuffProtoData::SceneEditBuffProtoData(const SceneEditBuffProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditBuffProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.buff_type_){}
    , decltype(_impl_.buff_refresh_time_sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buff_refresh_time_sec_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.buff_refresh_time_sec_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditBuffProtoData)
}

inline void SceneEditBuffProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.buff_type_){0u}
    , decltype(_impl_.buff_refresh_time_sec_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditBuffProtoData::~SceneEditBuffProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditBuffProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditBuffProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditBuffProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditBuffProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditBuffProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.buff_refresh_time_sec_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.buff_refresh_time_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditBuffProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 buff_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.buff_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 buff_refresh_time_sec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.buff_refresh_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditBuffProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditBuffProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 buff_type = 2;
  if (this->_internal_buff_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_buff_type(), target);
  }

  // uint32 buff_refresh_time_sec = 3;
  if (this->_internal_buff_refresh_time_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_buff_refresh_time_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditBuffProtoData)
  return target;
}

size_t SceneEditBuffProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditBuffProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 buff_type = 2;
  if (this->_internal_buff_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buff_type());
  }

  // uint32 buff_refresh_time_sec = 3;
  if (this->_internal_buff_refresh_time_sec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buff_refresh_time_sec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditBuffProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditBuffProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditBuffProtoData::GetClassData() const { return &_class_data_; }


void SceneEditBuffProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditBuffProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditBuffProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditBuffProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_buff_type() != 0) {
    _this->_internal_set_buff_type(from._internal_buff_type());
  }
  if (from._internal_buff_refresh_time_sec() != 0) {
    _this->_internal_set_buff_refresh_time_sec(from._internal_buff_refresh_time_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditBuffProtoData::CopyFrom(const SceneEditBuffProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditBuffProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditBuffProtoData::IsInitialized() const {
  return true;
}

void SceneEditBuffProtoData::InternalSwap(SceneEditBuffProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditBuffProtoData, _impl_.buff_refresh_time_sec_)
      + sizeof(SceneEditBuffProtoData::_impl_.buff_refresh_time_sec_)
      - PROTOBUF_FIELD_OFFSET(SceneEditBuffProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditBuffProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[56]);
}

// ===================================================================

class SceneEditMoveObjectProtoData::_Internal {
 public:
};

SceneEditMoveObjectProtoData::SceneEditMoveObjectProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditMoveObjectProtoData)
}
SceneEditMoveObjectProtoData::SceneEditMoveObjectProtoData(const SceneEditMoveObjectProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditMoveObjectProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.moveconfigid_){}
    , decltype(_impl_.motionvalue_){}
    , decltype(_impl_.motiontype_){}
    , decltype(_impl_.motioneditmode_){}
    , decltype(_impl_.motioncustomized_){}
    , decltype(_impl_.isreset_){}
    , decltype(_impl_.motionvaluex_){}
    , decltype(_impl_.motionvaluey_){}
    , decltype(_impl_.motionvaluez_){}
    , decltype(_impl_.motiontime_){}
    , decltype(_impl_.staytime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.staytime_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.staytime_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditMoveObjectProtoData)
}

inline void SceneEditMoveObjectProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.moveconfigid_){0u}
    , decltype(_impl_.motionvalue_){0u}
    , decltype(_impl_.motiontype_){0u}
    , decltype(_impl_.motioneditmode_){false}
    , decltype(_impl_.motioncustomized_){false}
    , decltype(_impl_.isreset_){false}
    , decltype(_impl_.motionvaluex_){0u}
    , decltype(_impl_.motionvaluey_){0u}
    , decltype(_impl_.motionvaluez_){0u}
    , decltype(_impl_.motiontime_){0u}
    , decltype(_impl_.staytime_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditMoveObjectProtoData::~SceneEditMoveObjectProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditMoveObjectProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditMoveObjectProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditMoveObjectProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditMoveObjectProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditMoveObjectProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.staytime_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.staytime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditMoveObjectProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 moveConfigID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.moveconfigid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool motionEditMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.motioneditmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 motionValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.motionvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool motionCustomized = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.motioncustomized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 motionType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.motiontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 motionValueX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.motionvaluex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 motionValueY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.motionvaluey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 motionValueZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.motionvaluez_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 motionTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.motiontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 StayTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.staytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsReset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.isreset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditMoveObjectProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditMoveObjectProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 moveConfigID = 2;
  if (this->_internal_moveconfigid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_moveconfigid(), target);
  }

  // bool motionEditMode = 3;
  if (this->_internal_motioneditmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_motioneditmode(), target);
  }

  // uint32 motionValue = 4;
  if (this->_internal_motionvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_motionvalue(), target);
  }

  // bool motionCustomized = 5;
  if (this->_internal_motioncustomized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_motioncustomized(), target);
  }

  // uint32 motionType = 6;
  if (this->_internal_motiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_motiontype(), target);
  }

  // uint32 motionValueX = 7;
  if (this->_internal_motionvaluex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_motionvaluex(), target);
  }

  // uint32 motionValueY = 8;
  if (this->_internal_motionvaluey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_motionvaluey(), target);
  }

  // uint32 motionValueZ = 9;
  if (this->_internal_motionvaluez() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_motionvaluez(), target);
  }

  // uint32 motionTime = 10;
  if (this->_internal_motiontime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_motiontime(), target);
  }

  // uint32 StayTime = 11;
  if (this->_internal_staytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_staytime(), target);
  }

  // bool IsReset = 12;
  if (this->_internal_isreset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_isreset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditMoveObjectProtoData)
  return target;
}

size_t SceneEditMoveObjectProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditMoveObjectProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 moveConfigID = 2;
  if (this->_internal_moveconfigid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_moveconfigid());
  }

  // uint32 motionValue = 4;
  if (this->_internal_motionvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_motionvalue());
  }

  // uint32 motionType = 6;
  if (this->_internal_motiontype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_motiontype());
  }

  // bool motionEditMode = 3;
  if (this->_internal_motioneditmode() != 0) {
    total_size += 1 + 1;
  }

  // bool motionCustomized = 5;
  if (this->_internal_motioncustomized() != 0) {
    total_size += 1 + 1;
  }

  // bool IsReset = 12;
  if (this->_internal_isreset() != 0) {
    total_size += 1 + 1;
  }

  // uint32 motionValueX = 7;
  if (this->_internal_motionvaluex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_motionvaluex());
  }

  // uint32 motionValueY = 8;
  if (this->_internal_motionvaluey() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_motionvaluey());
  }

  // uint32 motionValueZ = 9;
  if (this->_internal_motionvaluez() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_motionvaluez());
  }

  // uint32 motionTime = 10;
  if (this->_internal_motiontime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_motiontime());
  }

  // uint32 StayTime = 11;
  if (this->_internal_staytime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_staytime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditMoveObjectProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditMoveObjectProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditMoveObjectProtoData::GetClassData() const { return &_class_data_; }


void SceneEditMoveObjectProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditMoveObjectProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditMoveObjectProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditMoveObjectProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_moveconfigid() != 0) {
    _this->_internal_set_moveconfigid(from._internal_moveconfigid());
  }
  if (from._internal_motionvalue() != 0) {
    _this->_internal_set_motionvalue(from._internal_motionvalue());
  }
  if (from._internal_motiontype() != 0) {
    _this->_internal_set_motiontype(from._internal_motiontype());
  }
  if (from._internal_motioneditmode() != 0) {
    _this->_internal_set_motioneditmode(from._internal_motioneditmode());
  }
  if (from._internal_motioncustomized() != 0) {
    _this->_internal_set_motioncustomized(from._internal_motioncustomized());
  }
  if (from._internal_isreset() != 0) {
    _this->_internal_set_isreset(from._internal_isreset());
  }
  if (from._internal_motionvaluex() != 0) {
    _this->_internal_set_motionvaluex(from._internal_motionvaluex());
  }
  if (from._internal_motionvaluey() != 0) {
    _this->_internal_set_motionvaluey(from._internal_motionvaluey());
  }
  if (from._internal_motionvaluez() != 0) {
    _this->_internal_set_motionvaluez(from._internal_motionvaluez());
  }
  if (from._internal_motiontime() != 0) {
    _this->_internal_set_motiontime(from._internal_motiontime());
  }
  if (from._internal_staytime() != 0) {
    _this->_internal_set_staytime(from._internal_staytime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditMoveObjectProtoData::CopyFrom(const SceneEditMoveObjectProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditMoveObjectProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditMoveObjectProtoData::IsInitialized() const {
  return true;
}

void SceneEditMoveObjectProtoData::InternalSwap(SceneEditMoveObjectProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditMoveObjectProtoData, _impl_.staytime_)
      + sizeof(SceneEditMoveObjectProtoData::_impl_.staytime_)
      - PROTOBUF_FIELD_OFFSET(SceneEditMoveObjectProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditMoveObjectProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[57]);
}

// ===================================================================

class SceneEditScalableItemProtoData::_Internal {
 public:
};

SceneEditScalableItemProtoData::SceneEditScalableItemProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditScalableItemProtoData)
}
SceneEditScalableItemProtoData::SceneEditScalableItemProtoData(const SceneEditScalableItemProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditScalableItemProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.scalex_){}
    , decltype(_impl_.scaley_){}
    , decltype(_impl_.scalez_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scalez_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.scalez_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditScalableItemProtoData)
}

inline void SceneEditScalableItemProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.scalex_){0u}
    , decltype(_impl_.scaley_){0u}
    , decltype(_impl_.scalez_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditScalableItemProtoData::~SceneEditScalableItemProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditScalableItemProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditScalableItemProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditScalableItemProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditScalableItemProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditScalableItemProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scalez_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.scalez_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditScalableItemProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ScaleX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scalex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ScaleY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.scaley_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ScaleZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.scalez_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditScalableItemProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditScalableItemProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 ScaleX = 2;
  if (this->_internal_scalex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scalex(), target);
  }

  // uint32 ScaleY = 3;
  if (this->_internal_scaley() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_scaley(), target);
  }

  // uint32 ScaleZ = 4;
  if (this->_internal_scalez() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_scalez(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditScalableItemProtoData)
  return target;
}

size_t SceneEditScalableItemProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditScalableItemProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 ScaleX = 2;
  if (this->_internal_scalex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scalex());
  }

  // uint32 ScaleY = 3;
  if (this->_internal_scaley() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scaley());
  }

  // uint32 ScaleZ = 4;
  if (this->_internal_scalez() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scalez());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditScalableItemProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditScalableItemProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditScalableItemProtoData::GetClassData() const { return &_class_data_; }


void SceneEditScalableItemProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditScalableItemProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditScalableItemProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditScalableItemProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_scalex() != 0) {
    _this->_internal_set_scalex(from._internal_scalex());
  }
  if (from._internal_scaley() != 0) {
    _this->_internal_set_scaley(from._internal_scaley());
  }
  if (from._internal_scalez() != 0) {
    _this->_internal_set_scalez(from._internal_scalez());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditScalableItemProtoData::CopyFrom(const SceneEditScalableItemProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditScalableItemProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditScalableItemProtoData::IsInitialized() const {
  return true;
}

void SceneEditScalableItemProtoData::InternalSwap(SceneEditScalableItemProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditScalableItemProtoData, _impl_.scalez_)
      + sizeof(SceneEditScalableItemProtoData::_impl_.scalez_)
      - PROTOBUF_FIELD_OFFSET(SceneEditScalableItemProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditScalableItemProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[58]);
}

// ===================================================================

class SceneEditItemBoxProtoData::_Internal {
 public:
  static const ::message::SceneEditCustomItemBoxProtoData& customdata(const SceneEditItemBoxProtoData* msg);
};

const ::message::SceneEditCustomItemBoxProtoData&
SceneEditItemBoxProtoData::_Internal::customdata(const SceneEditItemBoxProtoData* msg) {
  return *msg->_impl_.customdata_;
}
SceneEditItemBoxProtoData::SceneEditItemBoxProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditItemBoxProtoData)
}
SceneEditItemBoxProtoData::SceneEditItemBoxProtoData(const SceneEditItemBoxProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditItemBoxProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.customdata_){nullptr}
    , decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.dropid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_customdata()) {
    _this->_impl_.customdata_ = new ::message::SceneEditCustomItemBoxProtoData(*from._impl_.customdata_);
  }
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dropid_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.dropid_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditItemBoxProtoData)
}

inline void SceneEditItemBoxProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.customdata_){nullptr}
    , decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.dropid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditItemBoxProtoData::~SceneEditItemBoxProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditItemBoxProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditItemBoxProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.customdata_;
}

void SceneEditItemBoxProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditItemBoxProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditItemBoxProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.customdata_ != nullptr) {
    delete _impl_.customdata_;
  }
  _impl_.customdata_ = nullptr;
  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dropid_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.dropid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditItemBoxProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dropid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dropid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.SceneEditCustomItemBoxProtoData customData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditItemBoxProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditItemBoxProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 dropid = 2;
  if (this->_internal_dropid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dropid(), target);
  }

  // .message.SceneEditCustomItemBoxProtoData customData = 3;
  if (this->_internal_has_customdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::customdata(this),
        _Internal::customdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditItemBoxProtoData)
  return target;
}

size_t SceneEditItemBoxProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditItemBoxProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.SceneEditCustomItemBoxProtoData customData = 3;
  if (this->_internal_has_customdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.customdata_);
  }

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 dropid = 2;
  if (this->_internal_dropid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dropid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditItemBoxProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditItemBoxProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditItemBoxProtoData::GetClassData() const { return &_class_data_; }


void SceneEditItemBoxProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditItemBoxProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditItemBoxProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditItemBoxProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_customdata()) {
    _this->_internal_mutable_customdata()->::message::SceneEditCustomItemBoxProtoData::MergeFrom(
        from._internal_customdata());
  }
  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_dropid() != 0) {
    _this->_internal_set_dropid(from._internal_dropid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditItemBoxProtoData::CopyFrom(const SceneEditItemBoxProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditItemBoxProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditItemBoxProtoData::IsInitialized() const {
  return true;
}

void SceneEditItemBoxProtoData::InternalSwap(SceneEditItemBoxProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditItemBoxProtoData, _impl_.dropid_)
      + sizeof(SceneEditItemBoxProtoData::_impl_.dropid_)
      - PROTOBUF_FIELD_OFFSET(SceneEditItemBoxProtoData, _impl_.customdata_)>(
          reinterpret_cast<char*>(&_impl_.customdata_),
          reinterpret_cast<char*>(&other->_impl_.customdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditItemBoxProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[59]);
}

// ===================================================================

class SceneEditCustomItemBoxProtoData::_Internal {
 public:
};

SceneEditCustomItemBoxProtoData::SceneEditCustomItemBoxProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditCustomItemBoxProtoData)
}
SceneEditCustomItemBoxProtoData::SceneEditCustomItemBoxProtoData(const SceneEditCustomItemBoxProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditCustomItemBoxProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lootgroups_){from._impl_.lootgroups_}
    , decltype(_impl_.refreshcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.refreshcount_ = from._impl_.refreshcount_;
  // @@protoc_insertion_point(copy_constructor:message.SceneEditCustomItemBoxProtoData)
}

inline void SceneEditCustomItemBoxProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lootgroups_){arena}
    , decltype(_impl_.refreshcount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditCustomItemBoxProtoData::~SceneEditCustomItemBoxProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditCustomItemBoxProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditCustomItemBoxProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lootgroups_.~RepeatedPtrField();
}

void SceneEditCustomItemBoxProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditCustomItemBoxProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditCustomItemBoxProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lootgroups_.Clear();
  _impl_.refreshcount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditCustomItemBoxProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 refreshCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.refreshcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditCustomItemBoxGroupProtoData lootGroups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lootgroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditCustomItemBoxProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditCustomItemBoxProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 refreshCount = 1;
  if (this->_internal_refreshcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_refreshcount(), target);
  }

  // repeated .message.SceneEditCustomItemBoxGroupProtoData lootGroups = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lootgroups_size()); i < n; i++) {
    const auto& repfield = this->_internal_lootgroups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditCustomItemBoxProtoData)
  return target;
}

size_t SceneEditCustomItemBoxProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditCustomItemBoxProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.SceneEditCustomItemBoxGroupProtoData lootGroups = 2;
  total_size += 1UL * this->_internal_lootgroups_size();
  for (const auto& msg : this->_impl_.lootgroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 refreshCount = 1;
  if (this->_internal_refreshcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_refreshcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditCustomItemBoxProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditCustomItemBoxProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditCustomItemBoxProtoData::GetClassData() const { return &_class_data_; }


void SceneEditCustomItemBoxProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditCustomItemBoxProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditCustomItemBoxProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditCustomItemBoxProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lootgroups_.MergeFrom(from._impl_.lootgroups_);
  if (from._internal_refreshcount() != 0) {
    _this->_internal_set_refreshcount(from._internal_refreshcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditCustomItemBoxProtoData::CopyFrom(const SceneEditCustomItemBoxProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditCustomItemBoxProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditCustomItemBoxProtoData::IsInitialized() const {
  return true;
}

void SceneEditCustomItemBoxProtoData::InternalSwap(SceneEditCustomItemBoxProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lootgroups_.InternalSwap(&other->_impl_.lootgroups_);
  swap(_impl_.refreshcount_, other->_impl_.refreshcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditCustomItemBoxProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[60]);
}

// ===================================================================

class SceneEditCustomItemBoxGroupProtoData::_Internal {
 public:
};

SceneEditCustomItemBoxGroupProtoData::SceneEditCustomItemBoxGroupProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditCustomItemBoxGroupProtoData)
}
SceneEditCustomItemBoxGroupProtoData::SceneEditCustomItemBoxGroupProtoData(const SceneEditCustomItemBoxGroupProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditCustomItemBoxGroupProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lootitems_){from._impl_.lootitems_}
    , decltype(_impl_.refreshcount_){}
    , decltype(_impl_.marked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.refreshcount_, &from._impl_.refreshcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.marked_) -
    reinterpret_cast<char*>(&_impl_.refreshcount_)) + sizeof(_impl_.marked_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditCustomItemBoxGroupProtoData)
}

inline void SceneEditCustomItemBoxGroupProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lootitems_){arena}
    , decltype(_impl_.refreshcount_){0u}
    , decltype(_impl_.marked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditCustomItemBoxGroupProtoData::~SceneEditCustomItemBoxGroupProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditCustomItemBoxGroupProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditCustomItemBoxGroupProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lootitems_.~RepeatedPtrField();
}

void SceneEditCustomItemBoxGroupProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditCustomItemBoxGroupProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditCustomItemBoxGroupProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lootitems_.Clear();
  ::memset(&_impl_.refreshcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.marked_) -
      reinterpret_cast<char*>(&_impl_.refreshcount_)) + sizeof(_impl_.marked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditCustomItemBoxGroupProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 refreshCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.refreshcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditCustomItemBoxItemProtoData lootItems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lootitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool marked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.marked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditCustomItemBoxGroupProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditCustomItemBoxGroupProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 refreshCount = 1;
  if (this->_internal_refreshcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_refreshcount(), target);
  }

  // repeated .message.SceneEditCustomItemBoxItemProtoData lootItems = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lootitems_size()); i < n; i++) {
    const auto& repfield = this->_internal_lootitems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool marked = 3;
  if (this->_internal_marked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_marked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditCustomItemBoxGroupProtoData)
  return target;
}

size_t SceneEditCustomItemBoxGroupProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditCustomItemBoxGroupProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.SceneEditCustomItemBoxItemProtoData lootItems = 2;
  total_size += 1UL * this->_internal_lootitems_size();
  for (const auto& msg : this->_impl_.lootitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 refreshCount = 1;
  if (this->_internal_refreshcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_refreshcount());
  }

  // bool marked = 3;
  if (this->_internal_marked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditCustomItemBoxGroupProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditCustomItemBoxGroupProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditCustomItemBoxGroupProtoData::GetClassData() const { return &_class_data_; }


void SceneEditCustomItemBoxGroupProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditCustomItemBoxGroupProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditCustomItemBoxGroupProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditCustomItemBoxGroupProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lootitems_.MergeFrom(from._impl_.lootitems_);
  if (from._internal_refreshcount() != 0) {
    _this->_internal_set_refreshcount(from._internal_refreshcount());
  }
  if (from._internal_marked() != 0) {
    _this->_internal_set_marked(from._internal_marked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditCustomItemBoxGroupProtoData::CopyFrom(const SceneEditCustomItemBoxGroupProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditCustomItemBoxGroupProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditCustomItemBoxGroupProtoData::IsInitialized() const {
  return true;
}

void SceneEditCustomItemBoxGroupProtoData::InternalSwap(SceneEditCustomItemBoxGroupProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lootitems_.InternalSwap(&other->_impl_.lootitems_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditCustomItemBoxGroupProtoData, _impl_.marked_)
      + sizeof(SceneEditCustomItemBoxGroupProtoData::_impl_.marked_)
      - PROTOBUF_FIELD_OFFSET(SceneEditCustomItemBoxGroupProtoData, _impl_.refreshcount_)>(
          reinterpret_cast<char*>(&_impl_.refreshcount_),
          reinterpret_cast<char*>(&other->_impl_.refreshcount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditCustomItemBoxGroupProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[61]);
}

// ===================================================================

class SceneEditCustomItemBoxItemProtoData::_Internal {
 public:
};

SceneEditCustomItemBoxItemProtoData::SceneEditCustomItemBoxItemProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditCustomItemBoxItemProtoData)
}
SceneEditCustomItemBoxItemProtoData::SceneEditCustomItemBoxItemProtoData(const SceneEditCustomItemBoxItemProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditCustomItemBoxItemProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemid_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.marked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.itemid_, &from._impl_.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.marked_) -
    reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.marked_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditCustomItemBoxItemProtoData)
}

inline void SceneEditCustomItemBoxItemProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemid_){0u}
    , decltype(_impl_.num_){0u}
    , decltype(_impl_.marked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditCustomItemBoxItemProtoData::~SceneEditCustomItemBoxItemProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditCustomItemBoxItemProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditCustomItemBoxItemProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditCustomItemBoxItemProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditCustomItemBoxItemProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditCustomItemBoxItemProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.marked_) -
      reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.marked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditCustomItemBoxItemProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 itemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool marked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.marked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditCustomItemBoxItemProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditCustomItemBoxItemProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 itemid = 1;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_itemid(), target);
  }

  // uint32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  // bool marked = 3;
  if (this->_internal_marked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_marked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditCustomItemBoxItemProtoData)
  return target;
}

size_t SceneEditCustomItemBoxItemProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditCustomItemBoxItemProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 itemid = 1;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemid());
  }

  // uint32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num());
  }

  // bool marked = 3;
  if (this->_internal_marked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditCustomItemBoxItemProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditCustomItemBoxItemProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditCustomItemBoxItemProtoData::GetClassData() const { return &_class_data_; }


void SceneEditCustomItemBoxItemProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditCustomItemBoxItemProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditCustomItemBoxItemProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditCustomItemBoxItemProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemid() != 0) {
    _this->_internal_set_itemid(from._internal_itemid());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_marked() != 0) {
    _this->_internal_set_marked(from._internal_marked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditCustomItemBoxItemProtoData::CopyFrom(const SceneEditCustomItemBoxItemProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditCustomItemBoxItemProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditCustomItemBoxItemProtoData::IsInitialized() const {
  return true;
}

void SceneEditCustomItemBoxItemProtoData::InternalSwap(SceneEditCustomItemBoxItemProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditCustomItemBoxItemProtoData, _impl_.marked_)
      + sizeof(SceneEditCustomItemBoxItemProtoData::_impl_.marked_)
      - PROTOBUF_FIELD_OFFSET(SceneEditCustomItemBoxItemProtoData, _impl_.itemid_)>(
          reinterpret_cast<char*>(&_impl_.itemid_),
          reinterpret_cast<char*>(&other->_impl_.itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditCustomItemBoxItemProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[62]);
}

// ===================================================================

class SceneEditTriggerProtoData::_Internal {
 public:
};

SceneEditTriggerProtoData::SceneEditTriggerProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditTriggerProtoData)
}
SceneEditTriggerProtoData::SceneEditTriggerProtoData(const SceneEditTriggerProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditTriggerProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.trigger_type_){}
    , decltype(_impl_.isshow_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isshow_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.isshow_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditTriggerProtoData)
}

inline void SceneEditTriggerProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.trigger_type_){0u}
    , decltype(_impl_.isshow_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditTriggerProtoData::~SceneEditTriggerProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditTriggerProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditTriggerProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditTriggerProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditTriggerProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditTriggerProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isshow_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.isshow_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditTriggerProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 trigger_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.trigger_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isShow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditTriggerProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditTriggerProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 trigger_type = 2;
  if (this->_internal_trigger_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trigger_type(), target);
  }

  // bool isShow = 3;
  if (this->_internal_isshow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isshow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditTriggerProtoData)
  return target;
}

size_t SceneEditTriggerProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditTriggerProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 trigger_type = 2;
  if (this->_internal_trigger_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trigger_type());
  }

  // bool isShow = 3;
  if (this->_internal_isshow() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditTriggerProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditTriggerProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditTriggerProtoData::GetClassData() const { return &_class_data_; }


void SceneEditTriggerProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditTriggerProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditTriggerProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditTriggerProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_trigger_type() != 0) {
    _this->_internal_set_trigger_type(from._internal_trigger_type());
  }
  if (from._internal_isshow() != 0) {
    _this->_internal_set_isshow(from._internal_isshow());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditTriggerProtoData::CopyFrom(const SceneEditTriggerProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditTriggerProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditTriggerProtoData::IsInitialized() const {
  return true;
}

void SceneEditTriggerProtoData::InternalSwap(SceneEditTriggerProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditTriggerProtoData, _impl_.isshow_)
      + sizeof(SceneEditTriggerProtoData::_impl_.isshow_)
      - PROTOBUF_FIELD_OFFSET(SceneEditTriggerProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditTriggerProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[63]);
}

// ===================================================================

class SceneEditShapeTriggerProtoData::_Internal {
 public:
};

SceneEditShapeTriggerProtoData::SceneEditShapeTriggerProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditShapeTriggerProtoData)
}
SceneEditShapeTriggerProtoData::SceneEditShapeTriggerProtoData(const SceneEditShapeTriggerProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditShapeTriggerProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditShapeTriggerProtoData)
}

inline void SceneEditShapeTriggerProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditShapeTriggerProtoData::~SceneEditShapeTriggerProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditShapeTriggerProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditShapeTriggerProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditShapeTriggerProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditShapeTriggerProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditShapeTriggerProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditShapeTriggerProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditShapeTriggerProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditShapeTriggerProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // float radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
  }

  // float height = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditShapeTriggerProtoData)
  return target;
}

size_t SceneEditShapeTriggerProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditShapeTriggerProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // float radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float height = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditShapeTriggerProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditShapeTriggerProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditShapeTriggerProtoData::GetClassData() const { return &_class_data_; }


void SceneEditShapeTriggerProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditShapeTriggerProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditShapeTriggerProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditShapeTriggerProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditShapeTriggerProtoData::CopyFrom(const SceneEditShapeTriggerProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditShapeTriggerProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditShapeTriggerProtoData::IsInitialized() const {
  return true;
}

void SceneEditShapeTriggerProtoData::InternalSwap(SceneEditShapeTriggerProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditShapeTriggerProtoData, _impl_.height_)
      + sizeof(SceneEditShapeTriggerProtoData::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SceneEditShapeTriggerProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditShapeTriggerProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[64]);
}

// ===================================================================

class SceneEditBigToyBallProtoData::_Internal {
 public:
};

SceneEditBigToyBallProtoData::SceneEditBigToyBallProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditBigToyBallProtoData)
}
SceneEditBigToyBallProtoData::SceneEditBigToyBallProtoData(const SceneEditBigToyBallProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditBigToyBallProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.velocity_xz_){}
    , decltype(_impl_.velocity_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.velocity_y_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.velocity_y_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditBigToyBallProtoData)
}

inline void SceneEditBigToyBallProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.velocity_xz_){0}
    , decltype(_impl_.velocity_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditBigToyBallProtoData::~SceneEditBigToyBallProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditBigToyBallProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditBigToyBallProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditBigToyBallProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditBigToyBallProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditBigToyBallProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.velocity_y_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.velocity_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditBigToyBallProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float velocity_xz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.velocity_xz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocity_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.velocity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditBigToyBallProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditBigToyBallProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // float velocity_xz = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity_xz = this->_internal_velocity_xz();
  uint32_t raw_velocity_xz;
  memcpy(&raw_velocity_xz, &tmp_velocity_xz, sizeof(tmp_velocity_xz));
  if (raw_velocity_xz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_velocity_xz(), target);
  }

  // float velocity_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity_y = this->_internal_velocity_y();
  uint32_t raw_velocity_y;
  memcpy(&raw_velocity_y, &tmp_velocity_y, sizeof(tmp_velocity_y));
  if (raw_velocity_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditBigToyBallProtoData)
  return target;
}

size_t SceneEditBigToyBallProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditBigToyBallProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // float velocity_xz = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity_xz = this->_internal_velocity_xz();
  uint32_t raw_velocity_xz;
  memcpy(&raw_velocity_xz, &tmp_velocity_xz, sizeof(tmp_velocity_xz));
  if (raw_velocity_xz != 0) {
    total_size += 1 + 4;
  }

  // float velocity_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity_y = this->_internal_velocity_y();
  uint32_t raw_velocity_y;
  memcpy(&raw_velocity_y, &tmp_velocity_y, sizeof(tmp_velocity_y));
  if (raw_velocity_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditBigToyBallProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditBigToyBallProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditBigToyBallProtoData::GetClassData() const { return &_class_data_; }


void SceneEditBigToyBallProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditBigToyBallProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditBigToyBallProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditBigToyBallProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity_xz = from._internal_velocity_xz();
  uint32_t raw_velocity_xz;
  memcpy(&raw_velocity_xz, &tmp_velocity_xz, sizeof(tmp_velocity_xz));
  if (raw_velocity_xz != 0) {
    _this->_internal_set_velocity_xz(from._internal_velocity_xz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity_y = from._internal_velocity_y();
  uint32_t raw_velocity_y;
  memcpy(&raw_velocity_y, &tmp_velocity_y, sizeof(tmp_velocity_y));
  if (raw_velocity_y != 0) {
    _this->_internal_set_velocity_y(from._internal_velocity_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditBigToyBallProtoData::CopyFrom(const SceneEditBigToyBallProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditBigToyBallProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditBigToyBallProtoData::IsInitialized() const {
  return true;
}

void SceneEditBigToyBallProtoData::InternalSwap(SceneEditBigToyBallProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditBigToyBallProtoData, _impl_.velocity_y_)
      + sizeof(SceneEditBigToyBallProtoData::_impl_.velocity_y_)
      - PROTOBUF_FIELD_OFFSET(SceneEditBigToyBallProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditBigToyBallProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[65]);
}

// ===================================================================

class SceneEditMiniSentryProtoData::_Internal {
 public:
};

SceneEditMiniSentryProtoData::SceneEditMiniSentryProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditMiniSentryProtoData)
}
SceneEditMiniSentryProtoData::SceneEditMiniSentryProtoData(const SceneEditMiniSentryProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditMiniSentryProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.defense_){}
    , decltype(_impl_.attack_){}
    , decltype(_impl_.attack_interval_){}
    , decltype(_impl_.attack_range_){}
    , decltype(_impl_.team_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.team_id_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditMiniSentryProtoData)
}

inline void SceneEditMiniSentryProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.hp_){0u}
    , decltype(_impl_.defense_){0}
    , decltype(_impl_.attack_){0u}
    , decltype(_impl_.attack_interval_){0}
    , decltype(_impl_.attack_range_){0u}
    , decltype(_impl_.team_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditMiniSentryProtoData::~SceneEditMiniSentryProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditMiniSentryProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditMiniSentryProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditMiniSentryProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditMiniSentryProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditMiniSentryProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.team_id_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.team_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditMiniSentryProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float defense = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.defense_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 attack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float attack_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.attack_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 attack_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.attack_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 team_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditMiniSentryProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditMiniSentryProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  // float defense = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_defense = this->_internal_defense();
  uint32_t raw_defense;
  memcpy(&raw_defense, &tmp_defense, sizeof(tmp_defense));
  if (raw_defense != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_defense(), target);
  }

  // uint32 attack = 4;
  if (this->_internal_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_attack(), target);
  }

  // float attack_interval = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_interval = this->_internal_attack_interval();
  uint32_t raw_attack_interval;
  memcpy(&raw_attack_interval, &tmp_attack_interval, sizeof(tmp_attack_interval));
  if (raw_attack_interval != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_attack_interval(), target);
  }

  // uint32 attack_range = 6;
  if (this->_internal_attack_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_attack_range(), target);
  }

  // uint32 team_id = 7;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditMiniSentryProtoData)
  return target;
}

size_t SceneEditMiniSentryProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditMiniSentryProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  // float defense = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_defense = this->_internal_defense();
  uint32_t raw_defense;
  memcpy(&raw_defense, &tmp_defense, sizeof(tmp_defense));
  if (raw_defense != 0) {
    total_size += 1 + 4;
  }

  // uint32 attack = 4;
  if (this->_internal_attack() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attack());
  }

  // float attack_interval = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_interval = this->_internal_attack_interval();
  uint32_t raw_attack_interval;
  memcpy(&raw_attack_interval, &tmp_attack_interval, sizeof(tmp_attack_interval));
  if (raw_attack_interval != 0) {
    total_size += 1 + 4;
  }

  // uint32 attack_range = 6;
  if (this->_internal_attack_range() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attack_range());
  }

  // uint32 team_id = 7;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditMiniSentryProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditMiniSentryProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditMiniSentryProtoData::GetClassData() const { return &_class_data_; }


void SceneEditMiniSentryProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditMiniSentryProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditMiniSentryProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditMiniSentryProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_defense = from._internal_defense();
  uint32_t raw_defense;
  memcpy(&raw_defense, &tmp_defense, sizeof(tmp_defense));
  if (raw_defense != 0) {
    _this->_internal_set_defense(from._internal_defense());
  }
  if (from._internal_attack() != 0) {
    _this->_internal_set_attack(from._internal_attack());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_interval = from._internal_attack_interval();
  uint32_t raw_attack_interval;
  memcpy(&raw_attack_interval, &tmp_attack_interval, sizeof(tmp_attack_interval));
  if (raw_attack_interval != 0) {
    _this->_internal_set_attack_interval(from._internal_attack_interval());
  }
  if (from._internal_attack_range() != 0) {
    _this->_internal_set_attack_range(from._internal_attack_range());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditMiniSentryProtoData::CopyFrom(const SceneEditMiniSentryProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditMiniSentryProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditMiniSentryProtoData::IsInitialized() const {
  return true;
}

void SceneEditMiniSentryProtoData::InternalSwap(SceneEditMiniSentryProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditMiniSentryProtoData, _impl_.team_id_)
      + sizeof(SceneEditMiniSentryProtoData::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(SceneEditMiniSentryProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditMiniSentryProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[66]);
}

// ===================================================================

class SceneEditBotGeneratorProtoData::_Internal {
 public:
  static const ::message::UGCAIConfigParams& bot_config(const SceneEditBotGeneratorProtoData* msg);
};

const ::message::UGCAIConfigParams&
SceneEditBotGeneratorProtoData::_Internal::bot_config(const SceneEditBotGeneratorProtoData* msg) {
  return *msg->_impl_.bot_config_;
}
SceneEditBotGeneratorProtoData::SceneEditBotGeneratorProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditBotGeneratorProtoData)
}
SceneEditBotGeneratorProtoData::SceneEditBotGeneratorProtoData(const SceneEditBotGeneratorProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditBotGeneratorProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bot_config_){nullptr}
    , decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.count_each_batch_){}
    , decltype(_impl_.batch_count_){}
    , decltype(_impl_.batch_interval_){}
    , decltype(_impl_.enable_dead_drop_){}
    , decltype(_impl_.is_continuous_){}
    , decltype(_impl_.batch_interval_float_){}
    , decltype(_impl_.start_gen_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bot_config()) {
    _this->_impl_.bot_config_ = new ::message::UGCAIConfigParams(*from._impl_.bot_config_);
  }
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.start_gen_time_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.start_gen_time_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditBotGeneratorProtoData)
}

inline void SceneEditBotGeneratorProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bot_config_){nullptr}
    , decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.count_each_batch_){0u}
    , decltype(_impl_.batch_count_){0u}
    , decltype(_impl_.batch_interval_){0u}
    , decltype(_impl_.enable_dead_drop_){0u}
    , decltype(_impl_.is_continuous_){false}
    , decltype(_impl_.batch_interval_float_){0}
    , decltype(_impl_.start_gen_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditBotGeneratorProtoData::~SceneEditBotGeneratorProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditBotGeneratorProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditBotGeneratorProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bot_config_;
}

void SceneEditBotGeneratorProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditBotGeneratorProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditBotGeneratorProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.bot_config_ != nullptr) {
    delete _impl_.bot_config_;
  }
  _impl_.bot_config_ = nullptr;
  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.start_gen_time_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.start_gen_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditBotGeneratorProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count_each_batch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_each_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batch_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.batch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batch_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.batch_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCAIConfigParams bot_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enable_dead_drop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.enable_dead_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_continuous = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_continuous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float batch_interval_float = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.batch_interval_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float start_gen_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.start_gen_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditBotGeneratorProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditBotGeneratorProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 count_each_batch = 2;
  if (this->_internal_count_each_batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count_each_batch(), target);
  }

  // uint32 batch_count = 3;
  if (this->_internal_batch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batch_count(), target);
  }

  // uint32 batch_interval = 4;
  if (this->_internal_batch_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_interval(), target);
  }

  // .message.UGCAIConfigParams bot_config = 5;
  if (this->_internal_has_bot_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bot_config(this),
        _Internal::bot_config(this).GetCachedSize(), target, stream);
  }

  // uint32 enable_dead_drop = 6;
  if (this->_internal_enable_dead_drop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_enable_dead_drop(), target);
  }

  // bool is_continuous = 7;
  if (this->_internal_is_continuous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_continuous(), target);
  }

  // float batch_interval_float = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_batch_interval_float = this->_internal_batch_interval_float();
  uint32_t raw_batch_interval_float;
  memcpy(&raw_batch_interval_float, &tmp_batch_interval_float, sizeof(tmp_batch_interval_float));
  if (raw_batch_interval_float != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_batch_interval_float(), target);
  }

  // float start_gen_time = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_gen_time = this->_internal_start_gen_time();
  uint32_t raw_start_gen_time;
  memcpy(&raw_start_gen_time, &tmp_start_gen_time, sizeof(tmp_start_gen_time));
  if (raw_start_gen_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_start_gen_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditBotGeneratorProtoData)
  return target;
}

size_t SceneEditBotGeneratorProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditBotGeneratorProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCAIConfigParams bot_config = 5;
  if (this->_internal_has_bot_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bot_config_);
  }

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 count_each_batch = 2;
  if (this->_internal_count_each_batch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count_each_batch());
  }

  // uint32 batch_count = 3;
  if (this->_internal_batch_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_count());
  }

  // uint32 batch_interval = 4;
  if (this->_internal_batch_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_interval());
  }

  // uint32 enable_dead_drop = 6;
  if (this->_internal_enable_dead_drop() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enable_dead_drop());
  }

  // bool is_continuous = 7;
  if (this->_internal_is_continuous() != 0) {
    total_size += 1 + 1;
  }

  // float batch_interval_float = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_batch_interval_float = this->_internal_batch_interval_float();
  uint32_t raw_batch_interval_float;
  memcpy(&raw_batch_interval_float, &tmp_batch_interval_float, sizeof(tmp_batch_interval_float));
  if (raw_batch_interval_float != 0) {
    total_size += 1 + 4;
  }

  // float start_gen_time = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_gen_time = this->_internal_start_gen_time();
  uint32_t raw_start_gen_time;
  memcpy(&raw_start_gen_time, &tmp_start_gen_time, sizeof(tmp_start_gen_time));
  if (raw_start_gen_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditBotGeneratorProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditBotGeneratorProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditBotGeneratorProtoData::GetClassData() const { return &_class_data_; }


void SceneEditBotGeneratorProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditBotGeneratorProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditBotGeneratorProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditBotGeneratorProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bot_config()) {
    _this->_internal_mutable_bot_config()->::message::UGCAIConfigParams::MergeFrom(
        from._internal_bot_config());
  }
  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_count_each_batch() != 0) {
    _this->_internal_set_count_each_batch(from._internal_count_each_batch());
  }
  if (from._internal_batch_count() != 0) {
    _this->_internal_set_batch_count(from._internal_batch_count());
  }
  if (from._internal_batch_interval() != 0) {
    _this->_internal_set_batch_interval(from._internal_batch_interval());
  }
  if (from._internal_enable_dead_drop() != 0) {
    _this->_internal_set_enable_dead_drop(from._internal_enable_dead_drop());
  }
  if (from._internal_is_continuous() != 0) {
    _this->_internal_set_is_continuous(from._internal_is_continuous());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_batch_interval_float = from._internal_batch_interval_float();
  uint32_t raw_batch_interval_float;
  memcpy(&raw_batch_interval_float, &tmp_batch_interval_float, sizeof(tmp_batch_interval_float));
  if (raw_batch_interval_float != 0) {
    _this->_internal_set_batch_interval_float(from._internal_batch_interval_float());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_gen_time = from._internal_start_gen_time();
  uint32_t raw_start_gen_time;
  memcpy(&raw_start_gen_time, &tmp_start_gen_time, sizeof(tmp_start_gen_time));
  if (raw_start_gen_time != 0) {
    _this->_internal_set_start_gen_time(from._internal_start_gen_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditBotGeneratorProtoData::CopyFrom(const SceneEditBotGeneratorProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditBotGeneratorProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditBotGeneratorProtoData::IsInitialized() const {
  return true;
}

void SceneEditBotGeneratorProtoData::InternalSwap(SceneEditBotGeneratorProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditBotGeneratorProtoData, _impl_.start_gen_time_)
      + sizeof(SceneEditBotGeneratorProtoData::_impl_.start_gen_time_)
      - PROTOBUF_FIELD_OFFSET(SceneEditBotGeneratorProtoData, _impl_.bot_config_)>(
          reinterpret_cast<char*>(&_impl_.bot_config_),
          reinterpret_cast<char*>(&other->_impl_.bot_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditBotGeneratorProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[67]);
}

// ===================================================================

class SceneEditUGCVendingMachineProtoData::_Internal {
 public:
};

SceneEditUGCVendingMachineProtoData::SceneEditUGCVendingMachineProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditUGCVendingMachineProtoData)
}
SceneEditUGCVendingMachineProtoData::SceneEditUGCVendingMachineProtoData(const SceneEditUGCVendingMachineProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditUGCVendingMachineProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.binding_shop_entity_id_){}
    , decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.trigger_radius_){}
    , decltype(_impl_.model_show_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.binding_shop_entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binding_shop_entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_binding_shop_entity_id().empty()) {
    _this->_impl_.binding_shop_entity_id_.Set(from._internal_binding_shop_entity_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.model_show_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.model_show_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditUGCVendingMachineProtoData)
}

inline void SceneEditUGCVendingMachineProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.binding_shop_entity_id_){}
    , decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.trigger_radius_){0}
    , decltype(_impl_.model_show_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.binding_shop_entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binding_shop_entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SceneEditUGCVendingMachineProtoData::~SceneEditUGCVendingMachineProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditUGCVendingMachineProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditUGCVendingMachineProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.binding_shop_entity_id_.Destroy();
}

void SceneEditUGCVendingMachineProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditUGCVendingMachineProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditUGCVendingMachineProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.binding_shop_entity_id_.ClearToEmpty();
  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.model_show_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.model_show_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditUGCVendingMachineProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string binding_shop_entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_binding_shop_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.SceneEditUGCVendingMachineProtoData.binding_shop_entity_id"));
        } else
          goto handle_unusual;
        continue;
      // float trigger_radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.trigger_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool model_show = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.model_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditUGCVendingMachineProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditUGCVendingMachineProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // string binding_shop_entity_id = 2;
  if (!this->_internal_binding_shop_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_binding_shop_entity_id().data(), static_cast<int>(this->_internal_binding_shop_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.SceneEditUGCVendingMachineProtoData.binding_shop_entity_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_binding_shop_entity_id(), target);
  }

  // float trigger_radius = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trigger_radius = this->_internal_trigger_radius();
  uint32_t raw_trigger_radius;
  memcpy(&raw_trigger_radius, &tmp_trigger_radius, sizeof(tmp_trigger_radius));
  if (raw_trigger_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_trigger_radius(), target);
  }

  // bool model_show = 4;
  if (this->_internal_model_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_model_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditUGCVendingMachineProtoData)
  return target;
}

size_t SceneEditUGCVendingMachineProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditUGCVendingMachineProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string binding_shop_entity_id = 2;
  if (!this->_internal_binding_shop_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_binding_shop_entity_id());
  }

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // float trigger_radius = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trigger_radius = this->_internal_trigger_radius();
  uint32_t raw_trigger_radius;
  memcpy(&raw_trigger_radius, &tmp_trigger_radius, sizeof(tmp_trigger_radius));
  if (raw_trigger_radius != 0) {
    total_size += 1 + 4;
  }

  // bool model_show = 4;
  if (this->_internal_model_show() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditUGCVendingMachineProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditUGCVendingMachineProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditUGCVendingMachineProtoData::GetClassData() const { return &_class_data_; }


void SceneEditUGCVendingMachineProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditUGCVendingMachineProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditUGCVendingMachineProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditUGCVendingMachineProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_binding_shop_entity_id().empty()) {
    _this->_internal_set_binding_shop_entity_id(from._internal_binding_shop_entity_id());
  }
  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trigger_radius = from._internal_trigger_radius();
  uint32_t raw_trigger_radius;
  memcpy(&raw_trigger_radius, &tmp_trigger_radius, sizeof(tmp_trigger_radius));
  if (raw_trigger_radius != 0) {
    _this->_internal_set_trigger_radius(from._internal_trigger_radius());
  }
  if (from._internal_model_show() != 0) {
    _this->_internal_set_model_show(from._internal_model_show());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditUGCVendingMachineProtoData::CopyFrom(const SceneEditUGCVendingMachineProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditUGCVendingMachineProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditUGCVendingMachineProtoData::IsInitialized() const {
  return true;
}

void SceneEditUGCVendingMachineProtoData::InternalSwap(SceneEditUGCVendingMachineProtoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.binding_shop_entity_id_, lhs_arena,
      &other->_impl_.binding_shop_entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditUGCVendingMachineProtoData, _impl_.model_show_)
      + sizeof(SceneEditUGCVendingMachineProtoData::_impl_.model_show_)
      - PROTOBUF_FIELD_OFFSET(SceneEditUGCVendingMachineProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditUGCVendingMachineProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[68]);
}

// ===================================================================

class SceneEditUGCWardrobeProtoData::_Internal {
 public:
};

SceneEditUGCWardrobeProtoData::SceneEditUGCWardrobeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditUGCWardrobeProtoData)
}
SceneEditUGCWardrobeProtoData::SceneEditUGCWardrobeProtoData(const SceneEditUGCWardrobeProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditUGCWardrobeProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.trigger_radius_){}
    , decltype(_impl_.model_show_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.model_show_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.model_show_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditUGCWardrobeProtoData)
}

inline void SceneEditUGCWardrobeProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.trigger_radius_){0}
    , decltype(_impl_.model_show_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditUGCWardrobeProtoData::~SceneEditUGCWardrobeProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditUGCWardrobeProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditUGCWardrobeProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditUGCWardrobeProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditUGCWardrobeProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditUGCWardrobeProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.model_show_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.model_show_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditUGCWardrobeProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float trigger_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.trigger_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool model_show = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.model_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditUGCWardrobeProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditUGCWardrobeProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // float trigger_radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trigger_radius = this->_internal_trigger_radius();
  uint32_t raw_trigger_radius;
  memcpy(&raw_trigger_radius, &tmp_trigger_radius, sizeof(tmp_trigger_radius));
  if (raw_trigger_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_trigger_radius(), target);
  }

  // bool model_show = 3;
  if (this->_internal_model_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_model_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditUGCWardrobeProtoData)
  return target;
}

size_t SceneEditUGCWardrobeProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditUGCWardrobeProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // float trigger_radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trigger_radius = this->_internal_trigger_radius();
  uint32_t raw_trigger_radius;
  memcpy(&raw_trigger_radius, &tmp_trigger_radius, sizeof(tmp_trigger_radius));
  if (raw_trigger_radius != 0) {
    total_size += 1 + 4;
  }

  // bool model_show = 3;
  if (this->_internal_model_show() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditUGCWardrobeProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditUGCWardrobeProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditUGCWardrobeProtoData::GetClassData() const { return &_class_data_; }


void SceneEditUGCWardrobeProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditUGCWardrobeProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditUGCWardrobeProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditUGCWardrobeProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_trigger_radius = from._internal_trigger_radius();
  uint32_t raw_trigger_radius;
  memcpy(&raw_trigger_radius, &tmp_trigger_radius, sizeof(tmp_trigger_radius));
  if (raw_trigger_radius != 0) {
    _this->_internal_set_trigger_radius(from._internal_trigger_radius());
  }
  if (from._internal_model_show() != 0) {
    _this->_internal_set_model_show(from._internal_model_show());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditUGCWardrobeProtoData::CopyFrom(const SceneEditUGCWardrobeProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditUGCWardrobeProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditUGCWardrobeProtoData::IsInitialized() const {
  return true;
}

void SceneEditUGCWardrobeProtoData::InternalSwap(SceneEditUGCWardrobeProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditUGCWardrobeProtoData, _impl_.model_show_)
      + sizeof(SceneEditUGCWardrobeProtoData::_impl_.model_show_)
      - PROTOBUF_FIELD_OFFSET(SceneEditUGCWardrobeProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditUGCWardrobeProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[69]);
}

// ===================================================================

class SceneEditUGCPointLightProtoData::_Internal {
 public:
};

SceneEditUGCPointLightProtoData::SceneEditUGCPointLightProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditUGCPointLightProtoData)
}
SceneEditUGCPointLightProtoData::SceneEditUGCPointLightProtoData(const SceneEditUGCPointLightProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditUGCPointLightProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.intensity_){}
    , decltype(_impl_.range_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditUGCPointLightProtoData)
}

inline void SceneEditUGCPointLightProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.intensity_){0}
    , decltype(_impl_.range_){0}
    , decltype(_impl_.color_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditUGCPointLightProtoData::~SceneEditUGCPointLightProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditUGCPointLightProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditUGCPointLightProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditUGCPointLightProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditUGCPointLightProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditUGCPointLightProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.color_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditUGCPointLightProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float intensity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditUGCPointLightProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditUGCPointLightProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // float intensity = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intensity = this->_internal_intensity();
  uint32_t raw_intensity;
  memcpy(&raw_intensity, &tmp_intensity, sizeof(tmp_intensity));
  if (raw_intensity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_intensity(), target);
  }

  // float range = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range = this->_internal_range();
  uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_range(), target);
  }

  // uint32 color = 4;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditUGCPointLightProtoData)
  return target;
}

size_t SceneEditUGCPointLightProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditUGCPointLightProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // float intensity = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intensity = this->_internal_intensity();
  uint32_t raw_intensity;
  memcpy(&raw_intensity, &tmp_intensity, sizeof(tmp_intensity));
  if (raw_intensity != 0) {
    total_size += 1 + 4;
  }

  // float range = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range = this->_internal_range();
  uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    total_size += 1 + 4;
  }

  // uint32 color = 4;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditUGCPointLightProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditUGCPointLightProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditUGCPointLightProtoData::GetClassData() const { return &_class_data_; }


void SceneEditUGCPointLightProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditUGCPointLightProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditUGCPointLightProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditUGCPointLightProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_intensity = from._internal_intensity();
  uint32_t raw_intensity;
  memcpy(&raw_intensity, &tmp_intensity, sizeof(tmp_intensity));
  if (raw_intensity != 0) {
    _this->_internal_set_intensity(from._internal_intensity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range = from._internal_range();
  uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditUGCPointLightProtoData::CopyFrom(const SceneEditUGCPointLightProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditUGCPointLightProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditUGCPointLightProtoData::IsInitialized() const {
  return true;
}

void SceneEditUGCPointLightProtoData::InternalSwap(SceneEditUGCPointLightProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditUGCPointLightProtoData, _impl_.color_)
      + sizeof(SceneEditUGCPointLightProtoData::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(SceneEditUGCPointLightProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditUGCPointLightProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[70]);
}

// ===================================================================

class SceneEditUGCFootballProtoData::_Internal {
 public:
};

SceneEditUGCFootballProtoData::SceneEditUGCFootballProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditUGCFootballProtoData)
}
SceneEditUGCFootballProtoData::SceneEditUGCFootballProtoData(const SceneEditUGCFootballProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditUGCFootballProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.friction_){}
    , decltype(_impl_.friction_rush_){}
    , decltype(_impl_.shoot_angle_min_){}
    , decltype(_impl_.high_shoot_angle_min_){}
    , decltype(_impl_.hide_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hide_time_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.hide_time_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditUGCFootballProtoData)
}

inline void SceneEditUGCFootballProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.friction_){0}
    , decltype(_impl_.friction_rush_){0}
    , decltype(_impl_.shoot_angle_min_){0}
    , decltype(_impl_.high_shoot_angle_min_){0}
    , decltype(_impl_.hide_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditUGCFootballProtoData::~SceneEditUGCFootballProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditUGCFootballProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditUGCFootballProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditUGCFootballProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditUGCFootballProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditUGCFootballProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hide_time_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.hide_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditUGCFootballProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float friction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.friction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float friction_rush = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.friction_rush_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float shoot_angle_min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.shoot_angle_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float high_shoot_angle_min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.high_shoot_angle_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hide_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.hide_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditUGCFootballProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditUGCFootballProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // float radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
  }

  // float friction = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_friction = this->_internal_friction();
  uint32_t raw_friction;
  memcpy(&raw_friction, &tmp_friction, sizeof(tmp_friction));
  if (raw_friction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_friction(), target);
  }

  // float friction_rush = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_friction_rush = this->_internal_friction_rush();
  uint32_t raw_friction_rush;
  memcpy(&raw_friction_rush, &tmp_friction_rush, sizeof(tmp_friction_rush));
  if (raw_friction_rush != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_friction_rush(), target);
  }

  // float shoot_angle_min = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shoot_angle_min = this->_internal_shoot_angle_min();
  uint32_t raw_shoot_angle_min;
  memcpy(&raw_shoot_angle_min, &tmp_shoot_angle_min, sizeof(tmp_shoot_angle_min));
  if (raw_shoot_angle_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_shoot_angle_min(), target);
  }

  // float high_shoot_angle_min = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high_shoot_angle_min = this->_internal_high_shoot_angle_min();
  uint32_t raw_high_shoot_angle_min;
  memcpy(&raw_high_shoot_angle_min, &tmp_high_shoot_angle_min, sizeof(tmp_high_shoot_angle_min));
  if (raw_high_shoot_angle_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_high_shoot_angle_min(), target);
  }

  // float hide_time = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hide_time = this->_internal_hide_time();
  uint32_t raw_hide_time;
  memcpy(&raw_hide_time, &tmp_hide_time, sizeof(tmp_hide_time));
  if (raw_hide_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_hide_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditUGCFootballProtoData)
  return target;
}

size_t SceneEditUGCFootballProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditUGCFootballProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // float radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float friction = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_friction = this->_internal_friction();
  uint32_t raw_friction;
  memcpy(&raw_friction, &tmp_friction, sizeof(tmp_friction));
  if (raw_friction != 0) {
    total_size += 1 + 4;
  }

  // float friction_rush = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_friction_rush = this->_internal_friction_rush();
  uint32_t raw_friction_rush;
  memcpy(&raw_friction_rush, &tmp_friction_rush, sizeof(tmp_friction_rush));
  if (raw_friction_rush != 0) {
    total_size += 1 + 4;
  }

  // float shoot_angle_min = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shoot_angle_min = this->_internal_shoot_angle_min();
  uint32_t raw_shoot_angle_min;
  memcpy(&raw_shoot_angle_min, &tmp_shoot_angle_min, sizeof(tmp_shoot_angle_min));
  if (raw_shoot_angle_min != 0) {
    total_size += 1 + 4;
  }

  // float high_shoot_angle_min = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high_shoot_angle_min = this->_internal_high_shoot_angle_min();
  uint32_t raw_high_shoot_angle_min;
  memcpy(&raw_high_shoot_angle_min, &tmp_high_shoot_angle_min, sizeof(tmp_high_shoot_angle_min));
  if (raw_high_shoot_angle_min != 0) {
    total_size += 1 + 4;
  }

  // float hide_time = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hide_time = this->_internal_hide_time();
  uint32_t raw_hide_time;
  memcpy(&raw_hide_time, &tmp_hide_time, sizeof(tmp_hide_time));
  if (raw_hide_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditUGCFootballProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditUGCFootballProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditUGCFootballProtoData::GetClassData() const { return &_class_data_; }


void SceneEditUGCFootballProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditUGCFootballProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditUGCFootballProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditUGCFootballProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_friction = from._internal_friction();
  uint32_t raw_friction;
  memcpy(&raw_friction, &tmp_friction, sizeof(tmp_friction));
  if (raw_friction != 0) {
    _this->_internal_set_friction(from._internal_friction());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_friction_rush = from._internal_friction_rush();
  uint32_t raw_friction_rush;
  memcpy(&raw_friction_rush, &tmp_friction_rush, sizeof(tmp_friction_rush));
  if (raw_friction_rush != 0) {
    _this->_internal_set_friction_rush(from._internal_friction_rush());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shoot_angle_min = from._internal_shoot_angle_min();
  uint32_t raw_shoot_angle_min;
  memcpy(&raw_shoot_angle_min, &tmp_shoot_angle_min, sizeof(tmp_shoot_angle_min));
  if (raw_shoot_angle_min != 0) {
    _this->_internal_set_shoot_angle_min(from._internal_shoot_angle_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_high_shoot_angle_min = from._internal_high_shoot_angle_min();
  uint32_t raw_high_shoot_angle_min;
  memcpy(&raw_high_shoot_angle_min, &tmp_high_shoot_angle_min, sizeof(tmp_high_shoot_angle_min));
  if (raw_high_shoot_angle_min != 0) {
    _this->_internal_set_high_shoot_angle_min(from._internal_high_shoot_angle_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hide_time = from._internal_hide_time();
  uint32_t raw_hide_time;
  memcpy(&raw_hide_time, &tmp_hide_time, sizeof(tmp_hide_time));
  if (raw_hide_time != 0) {
    _this->_internal_set_hide_time(from._internal_hide_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditUGCFootballProtoData::CopyFrom(const SceneEditUGCFootballProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditUGCFootballProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditUGCFootballProtoData::IsInitialized() const {
  return true;
}

void SceneEditUGCFootballProtoData::InternalSwap(SceneEditUGCFootballProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditUGCFootballProtoData, _impl_.hide_time_)
      + sizeof(SceneEditUGCFootballProtoData::_impl_.hide_time_)
      - PROTOBUF_FIELD_OFFSET(SceneEditUGCFootballProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditUGCFootballProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[71]);
}

// ===================================================================

class SceneEditUGCCoinGeneratorProtoData::_Internal {
 public:
};

SceneEditUGCCoinGeneratorProtoData::SceneEditUGCCoinGeneratorProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditUGCCoinGeneratorProtoData)
}
SceneEditUGCCoinGeneratorProtoData::SceneEditUGCCoinGeneratorProtoData(const SceneEditUGCCoinGeneratorProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditUGCCoinGeneratorProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.coint_cnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coint_cnt_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.coint_cnt_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditUGCCoinGeneratorProtoData)
}

inline void SceneEditUGCCoinGeneratorProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.coint_cnt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditUGCCoinGeneratorProtoData::~SceneEditUGCCoinGeneratorProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditUGCCoinGeneratorProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditUGCCoinGeneratorProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditUGCCoinGeneratorProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditUGCCoinGeneratorProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditUGCCoinGeneratorProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.coint_cnt_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.coint_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditUGCCoinGeneratorProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float coint_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.coint_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditUGCCoinGeneratorProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditUGCCoinGeneratorProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // float coint_cnt = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_coint_cnt = this->_internal_coint_cnt();
  uint32_t raw_coint_cnt;
  memcpy(&raw_coint_cnt, &tmp_coint_cnt, sizeof(tmp_coint_cnt));
  if (raw_coint_cnt != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_coint_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditUGCCoinGeneratorProtoData)
  return target;
}

size_t SceneEditUGCCoinGeneratorProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditUGCCoinGeneratorProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // float coint_cnt = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_coint_cnt = this->_internal_coint_cnt();
  uint32_t raw_coint_cnt;
  memcpy(&raw_coint_cnt, &tmp_coint_cnt, sizeof(tmp_coint_cnt));
  if (raw_coint_cnt != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditUGCCoinGeneratorProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditUGCCoinGeneratorProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditUGCCoinGeneratorProtoData::GetClassData() const { return &_class_data_; }


void SceneEditUGCCoinGeneratorProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditUGCCoinGeneratorProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditUGCCoinGeneratorProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditUGCCoinGeneratorProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_coint_cnt = from._internal_coint_cnt();
  uint32_t raw_coint_cnt;
  memcpy(&raw_coint_cnt, &tmp_coint_cnt, sizeof(tmp_coint_cnt));
  if (raw_coint_cnt != 0) {
    _this->_internal_set_coint_cnt(from._internal_coint_cnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditUGCCoinGeneratorProtoData::CopyFrom(const SceneEditUGCCoinGeneratorProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditUGCCoinGeneratorProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditUGCCoinGeneratorProtoData::IsInitialized() const {
  return true;
}

void SceneEditUGCCoinGeneratorProtoData::InternalSwap(SceneEditUGCCoinGeneratorProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditUGCCoinGeneratorProtoData, _impl_.coint_cnt_)
      + sizeof(SceneEditUGCCoinGeneratorProtoData::_impl_.coint_cnt_)
      - PROTOBUF_FIELD_OFFSET(SceneEditUGCCoinGeneratorProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditUGCCoinGeneratorProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[72]);
}

// ===================================================================

class SceneEditUGCEntityGeneratorProtoData::_Internal {
 public:
};

SceneEditUGCEntityGeneratorProtoData::SceneEditUGCEntityGeneratorProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditUGCEntityGeneratorProtoData)
}
SceneEditUGCEntityGeneratorProtoData::SceneEditUGCEntityGeneratorProtoData(const SceneEditUGCEntityGeneratorProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditUGCEntityGeneratorProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.count_each_batch_){}
    , decltype(_impl_.batch_count_){}
    , decltype(_impl_.batch_interval_){}
    , decltype(_impl_.batch_interval_float_){}
    , decltype(_impl_.is_continuous_){}
    , decltype(_impl_.start_gen_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity_id().empty()) {
    _this->_impl_.entity_id_.Set(from._internal_entity_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.start_gen_time_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.start_gen_time_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditUGCEntityGeneratorProtoData)
}

inline void SceneEditUGCEntityGeneratorProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.count_each_batch_){0u}
    , decltype(_impl_.batch_count_){0u}
    , decltype(_impl_.batch_interval_){0u}
    , decltype(_impl_.batch_interval_float_){0}
    , decltype(_impl_.is_continuous_){false}
    , decltype(_impl_.start_gen_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SceneEditUGCEntityGeneratorProtoData::~SceneEditUGCEntityGeneratorProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditUGCEntityGeneratorProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditUGCEntityGeneratorProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_id_.Destroy();
}

void SceneEditUGCEntityGeneratorProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditUGCEntityGeneratorProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditUGCEntityGeneratorProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.start_gen_time_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.start_gen_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditUGCEntityGeneratorProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count_each_batch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_each_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batch_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.batch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 batch_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.batch_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string entity_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_entity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.SceneEditUGCEntityGeneratorProtoData.entity_id"));
        } else
          goto handle_unusual;
        continue;
      // float batch_interval_float = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.batch_interval_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool is_continuous = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_continuous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float start_gen_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.start_gen_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditUGCEntityGeneratorProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditUGCEntityGeneratorProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 count_each_batch = 2;
  if (this->_internal_count_each_batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count_each_batch(), target);
  }

  // uint32 batch_count = 3;
  if (this->_internal_batch_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batch_count(), target);
  }

  // uint32 batch_interval = 4;
  if (this->_internal_batch_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_interval(), target);
  }

  // string entity_id = 5;
  if (!this->_internal_entity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity_id().data(), static_cast<int>(this->_internal_entity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.SceneEditUGCEntityGeneratorProtoData.entity_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_entity_id(), target);
  }

  // float batch_interval_float = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_batch_interval_float = this->_internal_batch_interval_float();
  uint32_t raw_batch_interval_float;
  memcpy(&raw_batch_interval_float, &tmp_batch_interval_float, sizeof(tmp_batch_interval_float));
  if (raw_batch_interval_float != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_batch_interval_float(), target);
  }

  // bool is_continuous = 7;
  if (this->_internal_is_continuous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_continuous(), target);
  }

  // float start_gen_time = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_gen_time = this->_internal_start_gen_time();
  uint32_t raw_start_gen_time;
  memcpy(&raw_start_gen_time, &tmp_start_gen_time, sizeof(tmp_start_gen_time));
  if (raw_start_gen_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_start_gen_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditUGCEntityGeneratorProtoData)
  return target;
}

size_t SceneEditUGCEntityGeneratorProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditUGCEntityGeneratorProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 5;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity_id());
  }

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 count_each_batch = 2;
  if (this->_internal_count_each_batch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count_each_batch());
  }

  // uint32 batch_count = 3;
  if (this->_internal_batch_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_count());
  }

  // uint32 batch_interval = 4;
  if (this->_internal_batch_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batch_interval());
  }

  // float batch_interval_float = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_batch_interval_float = this->_internal_batch_interval_float();
  uint32_t raw_batch_interval_float;
  memcpy(&raw_batch_interval_float, &tmp_batch_interval_float, sizeof(tmp_batch_interval_float));
  if (raw_batch_interval_float != 0) {
    total_size += 1 + 4;
  }

  // bool is_continuous = 7;
  if (this->_internal_is_continuous() != 0) {
    total_size += 1 + 1;
  }

  // float start_gen_time = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_gen_time = this->_internal_start_gen_time();
  uint32_t raw_start_gen_time;
  memcpy(&raw_start_gen_time, &tmp_start_gen_time, sizeof(tmp_start_gen_time));
  if (raw_start_gen_time != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditUGCEntityGeneratorProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditUGCEntityGeneratorProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditUGCEntityGeneratorProtoData::GetClassData() const { return &_class_data_; }


void SceneEditUGCEntityGeneratorProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditUGCEntityGeneratorProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditUGCEntityGeneratorProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditUGCEntityGeneratorProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_count_each_batch() != 0) {
    _this->_internal_set_count_each_batch(from._internal_count_each_batch());
  }
  if (from._internal_batch_count() != 0) {
    _this->_internal_set_batch_count(from._internal_batch_count());
  }
  if (from._internal_batch_interval() != 0) {
    _this->_internal_set_batch_interval(from._internal_batch_interval());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_batch_interval_float = from._internal_batch_interval_float();
  uint32_t raw_batch_interval_float;
  memcpy(&raw_batch_interval_float, &tmp_batch_interval_float, sizeof(tmp_batch_interval_float));
  if (raw_batch_interval_float != 0) {
    _this->_internal_set_batch_interval_float(from._internal_batch_interval_float());
  }
  if (from._internal_is_continuous() != 0) {
    _this->_internal_set_is_continuous(from._internal_is_continuous());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_gen_time = from._internal_start_gen_time();
  uint32_t raw_start_gen_time;
  memcpy(&raw_start_gen_time, &tmp_start_gen_time, sizeof(tmp_start_gen_time));
  if (raw_start_gen_time != 0) {
    _this->_internal_set_start_gen_time(from._internal_start_gen_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditUGCEntityGeneratorProtoData::CopyFrom(const SceneEditUGCEntityGeneratorProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditUGCEntityGeneratorProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditUGCEntityGeneratorProtoData::IsInitialized() const {
  return true;
}

void SceneEditUGCEntityGeneratorProtoData::InternalSwap(SceneEditUGCEntityGeneratorProtoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_id_, lhs_arena,
      &other->_impl_.entity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditUGCEntityGeneratorProtoData, _impl_.start_gen_time_)
      + sizeof(SceneEditUGCEntityGeneratorProtoData::_impl_.start_gen_time_)
      - PROTOBUF_FIELD_OFFSET(SceneEditUGCEntityGeneratorProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditUGCEntityGeneratorProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[73]);
}

// ===================================================================

class SceneEditUGCAIProtoData::_Internal {
 public:
  static const ::message::UGCAIConfigParams& param(const SceneEditUGCAIProtoData* msg);
};

const ::message::UGCAIConfigParams&
SceneEditUGCAIProtoData::_Internal::param(const SceneEditUGCAIProtoData* msg) {
  return *msg->_impl_.param_;
}
SceneEditUGCAIProtoData::SceneEditUGCAIProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditUGCAIProtoData)
}
SceneEditUGCAIProtoData::SceneEditUGCAIProtoData(const SceneEditUGCAIProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditUGCAIProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.param_){nullptr}
    , decltype(_impl_.extra_base_info_instance_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_param()) {
    _this->_impl_.param_ = new ::message::UGCAIConfigParams(*from._impl_.param_);
  }
  _this->_impl_.extra_base_info_instance_id_ = from._impl_.extra_base_info_instance_id_;
  // @@protoc_insertion_point(copy_constructor:message.SceneEditUGCAIProtoData)
}

inline void SceneEditUGCAIProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.param_){nullptr}
    , decltype(_impl_.extra_base_info_instance_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditUGCAIProtoData::~SceneEditUGCAIProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditUGCAIProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditUGCAIProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.param_;
}

void SceneEditUGCAIProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditUGCAIProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditUGCAIProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.param_ != nullptr) {
    delete _impl_.param_;
  }
  _impl_.param_ = nullptr;
  _impl_.extra_base_info_instance_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditUGCAIProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCAIConfigParams param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditUGCAIProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditUGCAIProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // .message.UGCAIConfigParams param = 2;
  if (this->_internal_has_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::param(this),
        _Internal::param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditUGCAIProtoData)
  return target;
}

size_t SceneEditUGCAIProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditUGCAIProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCAIConfigParams param = 2;
  if (this->_internal_has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.param_);
  }

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditUGCAIProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditUGCAIProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditUGCAIProtoData::GetClassData() const { return &_class_data_; }


void SceneEditUGCAIProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditUGCAIProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditUGCAIProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditUGCAIProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_param()) {
    _this->_internal_mutable_param()->::message::UGCAIConfigParams::MergeFrom(
        from._internal_param());
  }
  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditUGCAIProtoData::CopyFrom(const SceneEditUGCAIProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditUGCAIProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditUGCAIProtoData::IsInitialized() const {
  return true;
}

void SceneEditUGCAIProtoData::InternalSwap(SceneEditUGCAIProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditUGCAIProtoData, _impl_.extra_base_info_instance_id_)
      + sizeof(SceneEditUGCAIProtoData::_impl_.extra_base_info_instance_id_)
      - PROTOBUF_FIELD_OFFSET(SceneEditUGCAIProtoData, _impl_.param_)>(
          reinterpret_cast<char*>(&_impl_.param_),
          reinterpret_cast<char*>(&other->_impl_.param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditUGCAIProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[74]);
}

// ===================================================================

class UGCAIConfigParams::_Internal {
 public:
};

UGCAIConfigParams::UGCAIConfigParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCAIConfigParams)
}
UGCAIConfigParams::UGCAIConfigParams(const UGCAIConfigParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCAIConfigParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hp_){}
    , decltype(_impl_.attack_){}
    , decltype(_impl_.defense_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.detect_range_){}
    , decltype(_impl_.attack_range_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.can_chase_enemy_){}
    , decltype(_impl_.enable_dead_drop_){}
    , decltype(_impl_.action_type_){}
    , decltype(_impl_.ai_type_){}
    , decltype(_impl_.path_instance_id_){}
    , decltype(_impl_.injury_scale_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hp_, &from._impl_.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.injury_scale_) -
    reinterpret_cast<char*>(&_impl_.hp_)) + sizeof(_impl_.injury_scale_));
  // @@protoc_insertion_point(copy_constructor:message.UGCAIConfigParams)
}

inline void UGCAIConfigParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hp_){0u}
    , decltype(_impl_.attack_){0u}
    , decltype(_impl_.defense_){0}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.detect_range_){0}
    , decltype(_impl_.attack_range_){0}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.can_chase_enemy_){false}
    , decltype(_impl_.enable_dead_drop_){false}
    , decltype(_impl_.action_type_){0u}
    , decltype(_impl_.ai_type_){0u}
    , decltype(_impl_.path_instance_id_){0u}
    , decltype(_impl_.injury_scale_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCAIConfigParams::~UGCAIConfigParams() {
  // @@protoc_insertion_point(destructor:message.UGCAIConfigParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCAIConfigParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGCAIConfigParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCAIConfigParams::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCAIConfigParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.injury_scale_) -
      reinterpret_cast<char*>(&_impl_.hp_)) + sizeof(_impl_.injury_scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCAIConfigParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 attack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float defense = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.defense_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool can_chase_enemy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.can_chase_enemy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float detect_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.detect_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attack_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.attack_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 team_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 action_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ai_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ai_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 path_instance_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.path_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_dead_drop = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.enable_dead_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float injury_scale = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.injury_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCAIConfigParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCAIConfigParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hp = 1;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hp(), target);
  }

  // uint32 attack = 2;
  if (this->_internal_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attack(), target);
  }

  // float defense = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_defense = this->_internal_defense();
  uint32_t raw_defense;
  memcpy(&raw_defense, &tmp_defense, sizeof(tmp_defense));
  if (raw_defense != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_defense(), target);
  }

  // float move_speed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_move_speed(), target);
  }

  // bool can_chase_enemy = 5;
  if (this->_internal_can_chase_enemy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_can_chase_enemy(), target);
  }

  // float detect_range = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_detect_range = this->_internal_detect_range();
  uint32_t raw_detect_range;
  memcpy(&raw_detect_range, &tmp_detect_range, sizeof(tmp_detect_range));
  if (raw_detect_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_detect_range(), target);
  }

  // float attack_range = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_range = this->_internal_attack_range();
  uint32_t raw_attack_range;
  memcpy(&raw_attack_range, &tmp_attack_range, sizeof(tmp_attack_range));
  if (raw_attack_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_attack_range(), target);
  }

  // uint32 team_id = 8;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_team_id(), target);
  }

  // uint32 action_type = 9;
  if (this->_internal_action_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_action_type(), target);
  }

  // uint32 ai_type = 10;
  if (this->_internal_ai_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ai_type(), target);
  }

  // uint32 path_instance_id = 11;
  if (this->_internal_path_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_path_instance_id(), target);
  }

  // bool enable_dead_drop = 12;
  if (this->_internal_enable_dead_drop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_dead_drop(), target);
  }

  // float injury_scale = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_injury_scale = this->_internal_injury_scale();
  uint32_t raw_injury_scale;
  memcpy(&raw_injury_scale, &tmp_injury_scale, sizeof(tmp_injury_scale));
  if (raw_injury_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_injury_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCAIConfigParams)
  return target;
}

size_t UGCAIConfigParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCAIConfigParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hp = 1;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  // uint32 attack = 2;
  if (this->_internal_attack() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attack());
  }

  // float defense = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_defense = this->_internal_defense();
  uint32_t raw_defense;
  memcpy(&raw_defense, &tmp_defense, sizeof(tmp_defense));
  if (raw_defense != 0) {
    total_size += 1 + 4;
  }

  // float move_speed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 1 + 4;
  }

  // float detect_range = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_detect_range = this->_internal_detect_range();
  uint32_t raw_detect_range;
  memcpy(&raw_detect_range, &tmp_detect_range, sizeof(tmp_detect_range));
  if (raw_detect_range != 0) {
    total_size += 1 + 4;
  }

  // float attack_range = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_range = this->_internal_attack_range();
  uint32_t raw_attack_range;
  memcpy(&raw_attack_range, &tmp_attack_range, sizeof(tmp_attack_range));
  if (raw_attack_range != 0) {
    total_size += 1 + 4;
  }

  // uint32 team_id = 8;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
  }

  // bool can_chase_enemy = 5;
  if (this->_internal_can_chase_enemy() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_dead_drop = 12;
  if (this->_internal_enable_dead_drop() != 0) {
    total_size += 1 + 1;
  }

  // uint32 action_type = 9;
  if (this->_internal_action_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_action_type());
  }

  // uint32 ai_type = 10;
  if (this->_internal_ai_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ai_type());
  }

  // uint32 path_instance_id = 11;
  if (this->_internal_path_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_path_instance_id());
  }

  // float injury_scale = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_injury_scale = this->_internal_injury_scale();
  uint32_t raw_injury_scale;
  memcpy(&raw_injury_scale, &tmp_injury_scale, sizeof(tmp_injury_scale));
  if (raw_injury_scale != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCAIConfigParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCAIConfigParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCAIConfigParams::GetClassData() const { return &_class_data_; }


void UGCAIConfigParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCAIConfigParams*>(&to_msg);
  auto& from = static_cast<const UGCAIConfigParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCAIConfigParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_attack() != 0) {
    _this->_internal_set_attack(from._internal_attack());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_defense = from._internal_defense();
  uint32_t raw_defense;
  memcpy(&raw_defense, &tmp_defense, sizeof(tmp_defense));
  if (raw_defense != 0) {
    _this->_internal_set_defense(from._internal_defense());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_detect_range = from._internal_detect_range();
  uint32_t raw_detect_range;
  memcpy(&raw_detect_range, &tmp_detect_range, sizeof(tmp_detect_range));
  if (raw_detect_range != 0) {
    _this->_internal_set_detect_range(from._internal_detect_range());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_range = from._internal_attack_range();
  uint32_t raw_attack_range;
  memcpy(&raw_attack_range, &tmp_attack_range, sizeof(tmp_attack_range));
  if (raw_attack_range != 0) {
    _this->_internal_set_attack_range(from._internal_attack_range());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  if (from._internal_can_chase_enemy() != 0) {
    _this->_internal_set_can_chase_enemy(from._internal_can_chase_enemy());
  }
  if (from._internal_enable_dead_drop() != 0) {
    _this->_internal_set_enable_dead_drop(from._internal_enable_dead_drop());
  }
  if (from._internal_action_type() != 0) {
    _this->_internal_set_action_type(from._internal_action_type());
  }
  if (from._internal_ai_type() != 0) {
    _this->_internal_set_ai_type(from._internal_ai_type());
  }
  if (from._internal_path_instance_id() != 0) {
    _this->_internal_set_path_instance_id(from._internal_path_instance_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_injury_scale = from._internal_injury_scale();
  uint32_t raw_injury_scale;
  memcpy(&raw_injury_scale, &tmp_injury_scale, sizeof(tmp_injury_scale));
  if (raw_injury_scale != 0) {
    _this->_internal_set_injury_scale(from._internal_injury_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCAIConfigParams::CopyFrom(const UGCAIConfigParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCAIConfigParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCAIConfigParams::IsInitialized() const {
  return true;
}

void UGCAIConfigParams::InternalSwap(UGCAIConfigParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCAIConfigParams, _impl_.injury_scale_)
      + sizeof(UGCAIConfigParams::_impl_.injury_scale_)
      - PROTOBUF_FIELD_OFFSET(UGCAIConfigParams, _impl_.hp_)>(
          reinterpret_cast<char*>(&_impl_.hp_),
          reinterpret_cast<char*>(&other->_impl_.hp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCAIConfigParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[75]);
}

// ===================================================================

class SceneEditUGCCustomPathProtoData::_Internal {
 public:
};

void SceneEditUGCCustomPathProtoData::clear_control_points() {
  _impl_.control_points_.Clear();
}
SceneEditUGCCustomPathProtoData::SceneEditUGCCustomPathProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditUGCCustomPathProtoData)
}
SceneEditUGCCustomPathProtoData::SceneEditUGCCustomPathProtoData(const SceneEditUGCCustomPathProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditUGCCustomPathProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.control_points_){from._impl_.control_points_}
    , decltype(_impl_.extra_base_info_instance_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.extra_base_info_instance_id_ = from._impl_.extra_base_info_instance_id_;
  // @@protoc_insertion_point(copy_constructor:message.SceneEditUGCCustomPathProtoData)
}

inline void SceneEditUGCCustomPathProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.control_points_){arena}
    , decltype(_impl_.extra_base_info_instance_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditUGCCustomPathProtoData::~SceneEditUGCCustomPathProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditUGCCustomPathProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditUGCCustomPathProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.control_points_.~RepeatedPtrField();
}

void SceneEditUGCCustomPathProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditUGCCustomPathProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditUGCCustomPathProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.control_points_.Clear();
  _impl_.extra_base_info_instance_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditUGCCustomPathProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.ProtoBuffVector3 control_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_control_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditUGCCustomPathProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditUGCCustomPathProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // repeated .message.ProtoBuffVector3 control_points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_control_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_control_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditUGCCustomPathProtoData)
  return target;
}

size_t SceneEditUGCCustomPathProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditUGCCustomPathProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.ProtoBuffVector3 control_points = 2;
  total_size += 1UL * this->_internal_control_points_size();
  for (const auto& msg : this->_impl_.control_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditUGCCustomPathProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditUGCCustomPathProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditUGCCustomPathProtoData::GetClassData() const { return &_class_data_; }


void SceneEditUGCCustomPathProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditUGCCustomPathProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditUGCCustomPathProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditUGCCustomPathProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.control_points_.MergeFrom(from._impl_.control_points_);
  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditUGCCustomPathProtoData::CopyFrom(const SceneEditUGCCustomPathProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditUGCCustomPathProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditUGCCustomPathProtoData::IsInitialized() const {
  return true;
}

void SceneEditUGCCustomPathProtoData::InternalSwap(SceneEditUGCCustomPathProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.control_points_.InternalSwap(&other->_impl_.control_points_);
  swap(_impl_.extra_base_info_instance_id_, other->_impl_.extra_base_info_instance_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditUGCCustomPathProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[76]);
}

// ===================================================================

class SceneEditEntityAttributeProtoData::_Internal {
 public:
};

SceneEditEntityAttributeProtoData::SceneEditEntityAttributeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditEntityAttributeProtoData)
}
SceneEditEntityAttributeProtoData::SceneEditEntityAttributeProtoData(const SceneEditEntityAttributeProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditEntityAttributeProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.teleport_doors_){from._impl_.teleport_doors_}
    , decltype(_impl_.piano_keys_){from._impl_.piano_keys_}
    , decltype(_impl_.buffs_){from._impl_.buffs_}
    , decltype(_impl_.move_objects_){from._impl_.move_objects_}
    , decltype(_impl_.scale_items_){from._impl_.scale_items_}
    , decltype(_impl_.itemboxs_){from._impl_.itemboxs_}
    , decltype(_impl_.triggers_){from._impl_.triggers_}
    , decltype(_impl_.big_toy_balls_){from._impl_.big_toy_balls_}
    , decltype(_impl_.minisentris_){from._impl_.minisentris_}
    , decltype(_impl_.custom_paths_){from._impl_.custom_paths_}
    , decltype(_impl_.bot_generators_){from._impl_.bot_generators_}
    , decltype(_impl_.vending_machines_){from._impl_.vending_machines_}
    , decltype(_impl_.ugc_ais_){from._impl_.ugc_ais_}
    , decltype(_impl_.entity_generators_){from._impl_.entity_generators_}
    , decltype(_impl_.coin_generators_){from._impl_.coin_generators_}
    , decltype(_impl_.wardrobes_){from._impl_.wardrobes_}
    , decltype(_impl_.spawn_boxs_){from._impl_.spawn_boxs_}
    , decltype(_impl_.footballs_){from._impl_.footballs_}
    , decltype(_impl_.goals_){from._impl_.goals_}
    , decltype(_impl_.oildrums_){from._impl_.oildrums_}
    , decltype(_impl_.basic_sphere_){from._impl_.basic_sphere_}
    , decltype(_impl_.custom_levelobject_){from._impl_.custom_levelobject_}
    , decltype(_impl_.point_lights_){from._impl_.point_lights_}
    , decltype(_impl_.shape_triggers_){from._impl_.shape_triggers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.SceneEditEntityAttributeProtoData)
}

inline void SceneEditEntityAttributeProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.teleport_doors_){arena}
    , decltype(_impl_.piano_keys_){arena}
    , decltype(_impl_.buffs_){arena}
    , decltype(_impl_.move_objects_){arena}
    , decltype(_impl_.scale_items_){arena}
    , decltype(_impl_.itemboxs_){arena}
    , decltype(_impl_.triggers_){arena}
    , decltype(_impl_.big_toy_balls_){arena}
    , decltype(_impl_.minisentris_){arena}
    , decltype(_impl_.custom_paths_){arena}
    , decltype(_impl_.bot_generators_){arena}
    , decltype(_impl_.vending_machines_){arena}
    , decltype(_impl_.ugc_ais_){arena}
    , decltype(_impl_.entity_generators_){arena}
    , decltype(_impl_.coin_generators_){arena}
    , decltype(_impl_.wardrobes_){arena}
    , decltype(_impl_.spawn_boxs_){arena}
    , decltype(_impl_.footballs_){arena}
    , decltype(_impl_.goals_){arena}
    , decltype(_impl_.oildrums_){arena}
    , decltype(_impl_.basic_sphere_){arena}
    , decltype(_impl_.custom_levelobject_){arena}
    , decltype(_impl_.point_lights_){arena}
    , decltype(_impl_.shape_triggers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditEntityAttributeProtoData::~SceneEditEntityAttributeProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditEntityAttributeProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditEntityAttributeProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teleport_doors_.~RepeatedPtrField();
  _impl_.piano_keys_.~RepeatedPtrField();
  _impl_.buffs_.~RepeatedPtrField();
  _impl_.move_objects_.~RepeatedPtrField();
  _impl_.scale_items_.~RepeatedPtrField();
  _impl_.itemboxs_.~RepeatedPtrField();
  _impl_.triggers_.~RepeatedPtrField();
  _impl_.big_toy_balls_.~RepeatedPtrField();
  _impl_.minisentris_.~RepeatedPtrField();
  _impl_.custom_paths_.~RepeatedPtrField();
  _impl_.bot_generators_.~RepeatedPtrField();
  _impl_.vending_machines_.~RepeatedPtrField();
  _impl_.ugc_ais_.~RepeatedPtrField();
  _impl_.entity_generators_.~RepeatedPtrField();
  _impl_.coin_generators_.~RepeatedPtrField();
  _impl_.wardrobes_.~RepeatedPtrField();
  _impl_.spawn_boxs_.~RepeatedPtrField();
  _impl_.footballs_.~RepeatedPtrField();
  _impl_.goals_.~RepeatedPtrField();
  _impl_.oildrums_.~RepeatedPtrField();
  _impl_.basic_sphere_.~RepeatedPtrField();
  _impl_.custom_levelobject_.~RepeatedPtrField();
  _impl_.point_lights_.~RepeatedPtrField();
  _impl_.shape_triggers_.~RepeatedPtrField();
}

void SceneEditEntityAttributeProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditEntityAttributeProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditEntityAttributeProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teleport_doors_.Clear();
  _impl_.piano_keys_.Clear();
  _impl_.buffs_.Clear();
  _impl_.move_objects_.Clear();
  _impl_.scale_items_.Clear();
  _impl_.itemboxs_.Clear();
  _impl_.triggers_.Clear();
  _impl_.big_toy_balls_.Clear();
  _impl_.minisentris_.Clear();
  _impl_.custom_paths_.Clear();
  _impl_.bot_generators_.Clear();
  _impl_.vending_machines_.Clear();
  _impl_.ugc_ais_.Clear();
  _impl_.entity_generators_.Clear();
  _impl_.coin_generators_.Clear();
  _impl_.wardrobes_.Clear();
  _impl_.spawn_boxs_.Clear();
  _impl_.footballs_.Clear();
  _impl_.goals_.Clear();
  _impl_.oildrums_.Clear();
  _impl_.basic_sphere_.Clear();
  _impl_.custom_levelobject_.Clear();
  _impl_.point_lights_.Clear();
  _impl_.shape_triggers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditEntityAttributeProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.SceneEditTeleportDoorProtoData teleport_doors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teleport_doors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditPianoKeyProtoData piano_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_piano_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditBuffProtoData buffs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditMoveObjectProtoData move_objects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_move_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditScalableItemProtoData scale_items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scale_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditItemBoxProtoData itemboxs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemboxs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditTriggerProtoData triggers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditBigToyBallProtoData big_toy_balls = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_big_toy_balls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditMiniSentryProtoData minisentris = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minisentris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditUGCCustomPathProtoData custom_paths = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditBotGeneratorProtoData bot_generators = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bot_generators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditUGCVendingMachineProtoData vending_machines = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vending_machines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditUGCAIProtoData ugc_ais = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ugc_ais(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditUGCEntityGeneratorProtoData entity_generators = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entity_generators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditUGCCoinGeneratorProtoData coin_generators = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coin_generators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditUGCWardrobeProtoData wardrobes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_wardrobes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditSpawnBoxData spawn_boxs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_spawn_boxs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditUGCFootballProtoData footballs = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_footballs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditGoalData goals = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_goals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditOildrumData oildrums = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_oildrums(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditBasicSphereProtoData basic_sphere = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_basic_sphere(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditCustomLevelObjectProtoData custom_levelobject = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_custom_levelobject(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditUGCPointLightProtoData point_lights = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_point_lights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.SceneEditShapeTriggerProtoData shape_triggers = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_shape_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditEntityAttributeProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditEntityAttributeProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.SceneEditTeleportDoorProtoData teleport_doors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teleport_doors_size()); i < n; i++) {
    const auto& repfield = this->_internal_teleport_doors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditPianoKeyProtoData piano_keys = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_piano_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_piano_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditBuffProtoData buffs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffs_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditMoveObjectProtoData move_objects = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_move_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_move_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditScalableItemProtoData scale_items = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scale_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_scale_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditItemBoxProtoData itemboxs = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_itemboxs_size()); i < n; i++) {
    const auto& repfield = this->_internal_itemboxs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditTriggerProtoData triggers = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_triggers_size()); i < n; i++) {
    const auto& repfield = this->_internal_triggers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditBigToyBallProtoData big_toy_balls = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_big_toy_balls_size()); i < n; i++) {
    const auto& repfield = this->_internal_big_toy_balls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditMiniSentryProtoData minisentris = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_minisentris_size()); i < n; i++) {
    const auto& repfield = this->_internal_minisentris(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditUGCCustomPathProtoData custom_paths = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_paths_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_paths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditBotGeneratorProtoData bot_generators = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bot_generators_size()); i < n; i++) {
    const auto& repfield = this->_internal_bot_generators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditUGCVendingMachineProtoData vending_machines = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vending_machines_size()); i < n; i++) {
    const auto& repfield = this->_internal_vending_machines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditUGCAIProtoData ugc_ais = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ugc_ais_size()); i < n; i++) {
    const auto& repfield = this->_internal_ugc_ais(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditUGCEntityGeneratorProtoData entity_generators = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entity_generators_size()); i < n; i++) {
    const auto& repfield = this->_internal_entity_generators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditUGCCoinGeneratorProtoData coin_generators = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coin_generators_size()); i < n; i++) {
    const auto& repfield = this->_internal_coin_generators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditUGCWardrobeProtoData wardrobes = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wardrobes_size()); i < n; i++) {
    const auto& repfield = this->_internal_wardrobes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditSpawnBoxData spawn_boxs = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spawn_boxs_size()); i < n; i++) {
    const auto& repfield = this->_internal_spawn_boxs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditUGCFootballProtoData footballs = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_footballs_size()); i < n; i++) {
    const auto& repfield = this->_internal_footballs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditGoalData goals = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_goals_size()); i < n; i++) {
    const auto& repfield = this->_internal_goals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditOildrumData oildrums = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_oildrums_size()); i < n; i++) {
    const auto& repfield = this->_internal_oildrums(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditBasicSphereProtoData basic_sphere = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_basic_sphere_size()); i < n; i++) {
    const auto& repfield = this->_internal_basic_sphere(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditCustomLevelObjectProtoData custom_levelobject = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_levelobject_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_levelobject(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditUGCPointLightProtoData point_lights = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_lights_size()); i < n; i++) {
    const auto& repfield = this->_internal_point_lights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.SceneEditShapeTriggerProtoData shape_triggers = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_triggers_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape_triggers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditEntityAttributeProtoData)
  return target;
}

size_t SceneEditEntityAttributeProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditEntityAttributeProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.SceneEditTeleportDoorProtoData teleport_doors = 1;
  total_size += 1UL * this->_internal_teleport_doors_size();
  for (const auto& msg : this->_impl_.teleport_doors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditPianoKeyProtoData piano_keys = 2;
  total_size += 1UL * this->_internal_piano_keys_size();
  for (const auto& msg : this->_impl_.piano_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditBuffProtoData buffs = 3;
  total_size += 1UL * this->_internal_buffs_size();
  for (const auto& msg : this->_impl_.buffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditMoveObjectProtoData move_objects = 4;
  total_size += 1UL * this->_internal_move_objects_size();
  for (const auto& msg : this->_impl_.move_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditScalableItemProtoData scale_items = 5;
  total_size += 1UL * this->_internal_scale_items_size();
  for (const auto& msg : this->_impl_.scale_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditItemBoxProtoData itemboxs = 6;
  total_size += 1UL * this->_internal_itemboxs_size();
  for (const auto& msg : this->_impl_.itemboxs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditTriggerProtoData triggers = 7;
  total_size += 1UL * this->_internal_triggers_size();
  for (const auto& msg : this->_impl_.triggers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditBigToyBallProtoData big_toy_balls = 8;
  total_size += 1UL * this->_internal_big_toy_balls_size();
  for (const auto& msg : this->_impl_.big_toy_balls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditMiniSentryProtoData minisentris = 9;
  total_size += 1UL * this->_internal_minisentris_size();
  for (const auto& msg : this->_impl_.minisentris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditUGCCustomPathProtoData custom_paths = 10;
  total_size += 1UL * this->_internal_custom_paths_size();
  for (const auto& msg : this->_impl_.custom_paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditBotGeneratorProtoData bot_generators = 11;
  total_size += 1UL * this->_internal_bot_generators_size();
  for (const auto& msg : this->_impl_.bot_generators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditUGCVendingMachineProtoData vending_machines = 12;
  total_size += 1UL * this->_internal_vending_machines_size();
  for (const auto& msg : this->_impl_.vending_machines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditUGCAIProtoData ugc_ais = 13;
  total_size += 1UL * this->_internal_ugc_ais_size();
  for (const auto& msg : this->_impl_.ugc_ais_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditUGCEntityGeneratorProtoData entity_generators = 14;
  total_size += 1UL * this->_internal_entity_generators_size();
  for (const auto& msg : this->_impl_.entity_generators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditUGCCoinGeneratorProtoData coin_generators = 15;
  total_size += 1UL * this->_internal_coin_generators_size();
  for (const auto& msg : this->_impl_.coin_generators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditUGCWardrobeProtoData wardrobes = 16;
  total_size += 2UL * this->_internal_wardrobes_size();
  for (const auto& msg : this->_impl_.wardrobes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditSpawnBoxData spawn_boxs = 17;
  total_size += 2UL * this->_internal_spawn_boxs_size();
  for (const auto& msg : this->_impl_.spawn_boxs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditUGCFootballProtoData footballs = 18;
  total_size += 2UL * this->_internal_footballs_size();
  for (const auto& msg : this->_impl_.footballs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditGoalData goals = 19;
  total_size += 2UL * this->_internal_goals_size();
  for (const auto& msg : this->_impl_.goals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditOildrumData oildrums = 20;
  total_size += 2UL * this->_internal_oildrums_size();
  for (const auto& msg : this->_impl_.oildrums_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditBasicSphereProtoData basic_sphere = 21;
  total_size += 2UL * this->_internal_basic_sphere_size();
  for (const auto& msg : this->_impl_.basic_sphere_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditCustomLevelObjectProtoData custom_levelobject = 22;
  total_size += 2UL * this->_internal_custom_levelobject_size();
  for (const auto& msg : this->_impl_.custom_levelobject_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditUGCPointLightProtoData point_lights = 23;
  total_size += 2UL * this->_internal_point_lights_size();
  for (const auto& msg : this->_impl_.point_lights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.SceneEditShapeTriggerProtoData shape_triggers = 24;
  total_size += 2UL * this->_internal_shape_triggers_size();
  for (const auto& msg : this->_impl_.shape_triggers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditEntityAttributeProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditEntityAttributeProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditEntityAttributeProtoData::GetClassData() const { return &_class_data_; }


void SceneEditEntityAttributeProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditEntityAttributeProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditEntityAttributeProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditEntityAttributeProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teleport_doors_.MergeFrom(from._impl_.teleport_doors_);
  _this->_impl_.piano_keys_.MergeFrom(from._impl_.piano_keys_);
  _this->_impl_.buffs_.MergeFrom(from._impl_.buffs_);
  _this->_impl_.move_objects_.MergeFrom(from._impl_.move_objects_);
  _this->_impl_.scale_items_.MergeFrom(from._impl_.scale_items_);
  _this->_impl_.itemboxs_.MergeFrom(from._impl_.itemboxs_);
  _this->_impl_.triggers_.MergeFrom(from._impl_.triggers_);
  _this->_impl_.big_toy_balls_.MergeFrom(from._impl_.big_toy_balls_);
  _this->_impl_.minisentris_.MergeFrom(from._impl_.minisentris_);
  _this->_impl_.custom_paths_.MergeFrom(from._impl_.custom_paths_);
  _this->_impl_.bot_generators_.MergeFrom(from._impl_.bot_generators_);
  _this->_impl_.vending_machines_.MergeFrom(from._impl_.vending_machines_);
  _this->_impl_.ugc_ais_.MergeFrom(from._impl_.ugc_ais_);
  _this->_impl_.entity_generators_.MergeFrom(from._impl_.entity_generators_);
  _this->_impl_.coin_generators_.MergeFrom(from._impl_.coin_generators_);
  _this->_impl_.wardrobes_.MergeFrom(from._impl_.wardrobes_);
  _this->_impl_.spawn_boxs_.MergeFrom(from._impl_.spawn_boxs_);
  _this->_impl_.footballs_.MergeFrom(from._impl_.footballs_);
  _this->_impl_.goals_.MergeFrom(from._impl_.goals_);
  _this->_impl_.oildrums_.MergeFrom(from._impl_.oildrums_);
  _this->_impl_.basic_sphere_.MergeFrom(from._impl_.basic_sphere_);
  _this->_impl_.custom_levelobject_.MergeFrom(from._impl_.custom_levelobject_);
  _this->_impl_.point_lights_.MergeFrom(from._impl_.point_lights_);
  _this->_impl_.shape_triggers_.MergeFrom(from._impl_.shape_triggers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditEntityAttributeProtoData::CopyFrom(const SceneEditEntityAttributeProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditEntityAttributeProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditEntityAttributeProtoData::IsInitialized() const {
  return true;
}

void SceneEditEntityAttributeProtoData::InternalSwap(SceneEditEntityAttributeProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.teleport_doors_.InternalSwap(&other->_impl_.teleport_doors_);
  _impl_.piano_keys_.InternalSwap(&other->_impl_.piano_keys_);
  _impl_.buffs_.InternalSwap(&other->_impl_.buffs_);
  _impl_.move_objects_.InternalSwap(&other->_impl_.move_objects_);
  _impl_.scale_items_.InternalSwap(&other->_impl_.scale_items_);
  _impl_.itemboxs_.InternalSwap(&other->_impl_.itemboxs_);
  _impl_.triggers_.InternalSwap(&other->_impl_.triggers_);
  _impl_.big_toy_balls_.InternalSwap(&other->_impl_.big_toy_balls_);
  _impl_.minisentris_.InternalSwap(&other->_impl_.minisentris_);
  _impl_.custom_paths_.InternalSwap(&other->_impl_.custom_paths_);
  _impl_.bot_generators_.InternalSwap(&other->_impl_.bot_generators_);
  _impl_.vending_machines_.InternalSwap(&other->_impl_.vending_machines_);
  _impl_.ugc_ais_.InternalSwap(&other->_impl_.ugc_ais_);
  _impl_.entity_generators_.InternalSwap(&other->_impl_.entity_generators_);
  _impl_.coin_generators_.InternalSwap(&other->_impl_.coin_generators_);
  _impl_.wardrobes_.InternalSwap(&other->_impl_.wardrobes_);
  _impl_.spawn_boxs_.InternalSwap(&other->_impl_.spawn_boxs_);
  _impl_.footballs_.InternalSwap(&other->_impl_.footballs_);
  _impl_.goals_.InternalSwap(&other->_impl_.goals_);
  _impl_.oildrums_.InternalSwap(&other->_impl_.oildrums_);
  _impl_.basic_sphere_.InternalSwap(&other->_impl_.basic_sphere_);
  _impl_.custom_levelobject_.InternalSwap(&other->_impl_.custom_levelobject_);
  _impl_.point_lights_.InternalSwap(&other->_impl_.point_lights_);
  _impl_.shape_triggers_.InternalSwap(&other->_impl_.shape_triggers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditEntityAttributeProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[77]);
}

// ===================================================================

class SceneEditModeProtoData::_Internal {
 public:
  static const ::message::SceneEditGeneralProtoData& general_data(const SceneEditModeProtoData* msg);
};

const ::message::SceneEditGeneralProtoData&
SceneEditModeProtoData::_Internal::general_data(const SceneEditModeProtoData* msg) {
  return *msg->_impl_.general_data_;
}
SceneEditModeProtoData::SceneEditModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditModeProtoData)
}
SceneEditModeProtoData::SceneEditModeProtoData(const SceneEditModeProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditModeProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collision_matrix_){from._impl_.collision_matrix_}
    , /*decltype(_impl_._collision_matrix_cached_byte_size_)*/{0}
    , decltype(_impl_.mode_data_){}
    , decltype(_impl_.general_data_){nullptr}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mode_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode_data().empty()) {
    _this->_impl_.mode_data_.Set(from._internal_mode_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_general_data()) {
    _this->_impl_.general_data_ = new ::message::SceneEditGeneralProtoData(*from._impl_.general_data_);
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:message.SceneEditModeProtoData)
}

inline void SceneEditModeProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collision_matrix_){arena}
    , /*decltype(_impl_._collision_matrix_cached_byte_size_)*/{0}
    , decltype(_impl_.mode_data_){}
    , decltype(_impl_.general_data_){nullptr}
    , decltype(_impl_.version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mode_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SceneEditModeProtoData::~SceneEditModeProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditModeProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditModeProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collision_matrix_.~RepeatedField();
  _impl_.mode_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.general_data_;
}

void SceneEditModeProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditModeProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditModeProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.collision_matrix_.Clear();
  _impl_.mode_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.general_data_ != nullptr) {
    delete _impl_.general_data_;
  }
  _impl_.general_data_ = nullptr;
  _impl_.version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditModeProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes mode_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mode_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.SceneEditGeneralProtoData general_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_general_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 collision_matrix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_collision_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_collision_matrix(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditModeProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditModeProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes mode_data = 1;
  if (!this->_internal_mode_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mode_data(), target);
  }

  // .message.SceneEditGeneralProtoData general_data = 2;
  if (this->_internal_has_general_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::general_data(this),
        _Internal::general_data(this).GetCachedSize(), target, stream);
  }

  // uint32 version = 3;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // repeated uint32 collision_matrix = 4;
  {
    int byte_size = _impl_._collision_matrix_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_collision_matrix(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditModeProtoData)
  return target;
}

size_t SceneEditModeProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditModeProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 collision_matrix = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.collision_matrix_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._collision_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes mode_data = 1;
  if (!this->_internal_mode_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mode_data());
  }

  // .message.SceneEditGeneralProtoData general_data = 2;
  if (this->_internal_has_general_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.general_data_);
  }

  // uint32 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditModeProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditModeProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditModeProtoData::GetClassData() const { return &_class_data_; }


void SceneEditModeProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditModeProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditModeProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditModeProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.collision_matrix_.MergeFrom(from._impl_.collision_matrix_);
  if (!from._internal_mode_data().empty()) {
    _this->_internal_set_mode_data(from._internal_mode_data());
  }
  if (from._internal_has_general_data()) {
    _this->_internal_mutable_general_data()->::message::SceneEditGeneralProtoData::MergeFrom(
        from._internal_general_data());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditModeProtoData::CopyFrom(const SceneEditModeProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditModeProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditModeProtoData::IsInitialized() const {
  return true;
}

void SceneEditModeProtoData::InternalSwap(SceneEditModeProtoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.collision_matrix_.InternalSwap(&other->_impl_.collision_matrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_data_, lhs_arena,
      &other->_impl_.mode_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditModeProtoData, _impl_.version_)
      + sizeof(SceneEditModeProtoData::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(SceneEditModeProtoData, _impl_.general_data_)>(
          reinterpret_cast<char*>(&_impl_.general_data_),
          reinterpret_cast<char*>(&other->_impl_.general_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditModeProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[78]);
}

// ===================================================================

class SceneEditOildrumData::_Internal {
 public:
};

SceneEditOildrumData::SceneEditOildrumData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditOildrumData)
}
SceneEditOildrumData::SceneEditOildrumData(const SceneEditOildrumData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditOildrumData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.range_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditOildrumData)
}

inline void SceneEditOildrumData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.hp_){0u}
    , decltype(_impl_.range_){0}
    , decltype(_impl_.damage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditOildrumData::~SceneEditOildrumData() {
  // @@protoc_insertion_point(destructor:message.SceneEditOildrumData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditOildrumData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditOildrumData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditOildrumData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditOildrumData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditOildrumData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditOildrumData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditOildrumData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  // float range = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range = this->_internal_range();
  uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_range(), target);
  }

  // float damage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditOildrumData)
  return target;
}

size_t SceneEditOildrumData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditOildrumData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  // float range = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range = this->_internal_range();
  uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    total_size += 1 + 4;
  }

  // float damage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditOildrumData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditOildrumData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditOildrumData::GetClassData() const { return &_class_data_; }


void SceneEditOildrumData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditOildrumData*>(&to_msg);
  auto& from = static_cast<const SceneEditOildrumData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditOildrumData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_range = from._internal_range();
  uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_damage = from._internal_damage();
  uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditOildrumData::CopyFrom(const SceneEditOildrumData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditOildrumData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditOildrumData::IsInitialized() const {
  return true;
}

void SceneEditOildrumData::InternalSwap(SceneEditOildrumData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditOildrumData, _impl_.damage_)
      + sizeof(SceneEditOildrumData::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(SceneEditOildrumData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditOildrumData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[79]);
}

// ===================================================================

class SceneEditBasicSphereProtoData::_Internal {
 public:
};

SceneEditBasicSphereProtoData::SceneEditBasicSphereProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditBasicSphereProtoData)
}
SceneEditBasicSphereProtoData::SceneEditBasicSphereProtoData(const SceneEditBasicSphereProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditBasicSphereProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.radius_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.radius_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.radius_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditBasicSphereProtoData)
}

inline void SceneEditBasicSphereProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.radius_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditBasicSphereProtoData::~SceneEditBasicSphereProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditBasicSphereProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditBasicSphereProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditBasicSphereProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditBasicSphereProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditBasicSphereProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.radius_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.radius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditBasicSphereProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditBasicSphereProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditBasicSphereProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // float radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditBasicSphereProtoData)
  return target;
}

size_t SceneEditBasicSphereProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditBasicSphereProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // float radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditBasicSphereProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditBasicSphereProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditBasicSphereProtoData::GetClassData() const { return &_class_data_; }


void SceneEditBasicSphereProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditBasicSphereProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditBasicSphereProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditBasicSphereProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditBasicSphereProtoData::CopyFrom(const SceneEditBasicSphereProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditBasicSphereProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditBasicSphereProtoData::IsInitialized() const {
  return true;
}

void SceneEditBasicSphereProtoData::InternalSwap(SceneEditBasicSphereProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditBasicSphereProtoData, _impl_.radius_)
      + sizeof(SceneEditBasicSphereProtoData::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(SceneEditBasicSphereProtoData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditBasicSphereProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[80]);
}

// ===================================================================

class SceneEditCustomLevelObjectProtoData::_Internal {
 public:
};

SceneEditCustomLevelObjectProtoData::SceneEditCustomLevelObjectProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditCustomLevelObjectProtoData)
}
SceneEditCustomLevelObjectProtoData::SceneEditCustomLevelObjectProtoData(const SceneEditCustomLevelObjectProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditCustomLevelObjectProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.res_uuid_){}
    , decltype(_impl_.extra_base_info_instance_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.res_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_res_uuid().empty()) {
    _this->_impl_.res_uuid_.Set(from._internal_res_uuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.extra_base_info_instance_id_ = from._impl_.extra_base_info_instance_id_;
  // @@protoc_insertion_point(copy_constructor:message.SceneEditCustomLevelObjectProtoData)
}

inline void SceneEditCustomLevelObjectProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.res_uuid_){}
    , decltype(_impl_.extra_base_info_instance_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.res_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SceneEditCustomLevelObjectProtoData::~SceneEditCustomLevelObjectProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditCustomLevelObjectProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditCustomLevelObjectProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.res_uuid_.Destroy();
}

void SceneEditCustomLevelObjectProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditCustomLevelObjectProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditCustomLevelObjectProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.res_uuid_.ClearToEmpty();
  _impl_.extra_base_info_instance_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditCustomLevelObjectProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string res_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_res_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.SceneEditCustomLevelObjectProtoData.res_uuid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditCustomLevelObjectProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditCustomLevelObjectProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // string res_uuid = 2;
  if (!this->_internal_res_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_uuid().data(), static_cast<int>(this->_internal_res_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.SceneEditCustomLevelObjectProtoData.res_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditCustomLevelObjectProtoData)
  return target;
}

size_t SceneEditCustomLevelObjectProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditCustomLevelObjectProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_uuid = 2;
  if (!this->_internal_res_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_uuid());
  }

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditCustomLevelObjectProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditCustomLevelObjectProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditCustomLevelObjectProtoData::GetClassData() const { return &_class_data_; }


void SceneEditCustomLevelObjectProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditCustomLevelObjectProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditCustomLevelObjectProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditCustomLevelObjectProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_res_uuid().empty()) {
    _this->_internal_set_res_uuid(from._internal_res_uuid());
  }
  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditCustomLevelObjectProtoData::CopyFrom(const SceneEditCustomLevelObjectProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditCustomLevelObjectProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditCustomLevelObjectProtoData::IsInitialized() const {
  return true;
}

void SceneEditCustomLevelObjectProtoData::InternalSwap(SceneEditCustomLevelObjectProtoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.res_uuid_, lhs_arena,
      &other->_impl_.res_uuid_, rhs_arena
  );
  swap(_impl_.extra_base_info_instance_id_, other->_impl_.extra_base_info_instance_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditCustomLevelObjectProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[81]);
}

// ===================================================================

class SceneEditGoalData::_Internal {
 public:
};

SceneEditGoalData::SceneEditGoalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditGoalData)
}
SceneEditGoalData::SceneEditGoalData(const SceneEditGoalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditGoalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.team_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.team_id_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditGoalData)
}

inline void SceneEditGoalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.team_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditGoalData::~SceneEditGoalData() {
  // @@protoc_insertion_point(destructor:message.SceneEditGoalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditGoalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditGoalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditGoalData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditGoalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.team_id_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.team_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditGoalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditGoalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditGoalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 team_id = 2;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditGoalData)
  return target;
}

size_t SceneEditGoalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditGoalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 team_id = 2;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditGoalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditGoalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditGoalData::GetClassData() const { return &_class_data_; }


void SceneEditGoalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditGoalData*>(&to_msg);
  auto& from = static_cast<const SceneEditGoalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditGoalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditGoalData::CopyFrom(const SceneEditGoalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditGoalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditGoalData::IsInitialized() const {
  return true;
}

void SceneEditGoalData::InternalSwap(SceneEditGoalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditGoalData, _impl_.team_id_)
      + sizeof(SceneEditGoalData::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(SceneEditGoalData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditGoalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[82]);
}

// ===================================================================

class SceneEditSpawnBoxData::_Internal {
 public:
};

SceneEditSpawnBoxData::SceneEditSpawnBoxData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditSpawnBoxData)
}
SceneEditSpawnBoxData::SceneEditSpawnBoxData(const SceneEditSpawnBoxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditSpawnBoxData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.spawn_point_count_){}
    , decltype(_impl_.team_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extra_base_info_instance_id_, &from._impl_.extra_base_info_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.team_id_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditSpawnBoxData)
}

inline void SceneEditSpawnBoxData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extra_base_info_instance_id_){0u}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , decltype(_impl_.z_){0u}
    , decltype(_impl_.spawn_point_count_){0u}
    , decltype(_impl_.team_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditSpawnBoxData::~SceneEditSpawnBoxData() {
  // @@protoc_insertion_point(destructor:message.SceneEditSpawnBoxData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditSpawnBoxData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditSpawnBoxData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditSpawnBoxData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditSpawnBoxData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.extra_base_info_instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.team_id_) -
      reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_)) + sizeof(_impl_.team_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditSpawnBoxData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_base_info_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_base_info_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 spawn_point_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.spawn_point_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 team_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditSpawnBoxData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditSpawnBoxData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_base_info_instance_id(), target);
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  // uint32 z = 4;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_z(), target);
  }

  // uint32 spawn_point_count = 5;
  if (this->_internal_spawn_point_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_spawn_point_count(), target);
  }

  // int32 team_id = 6;
  if (this->_internal_team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditSpawnBoxData)
  return target;
}

size_t SceneEditSpawnBoxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditSpawnBoxData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 extra_base_info_instance_id = 1;
  if (this->_internal_extra_base_info_instance_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_base_info_instance_id());
  }

  // uint32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  // uint32 z = 4;
  if (this->_internal_z() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_z());
  }

  // uint32 spawn_point_count = 5;
  if (this->_internal_spawn_point_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spawn_point_count());
  }

  // int32 team_id = 6;
  if (this->_internal_team_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditSpawnBoxData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditSpawnBoxData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditSpawnBoxData::GetClassData() const { return &_class_data_; }


void SceneEditSpawnBoxData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditSpawnBoxData*>(&to_msg);
  auto& from = static_cast<const SceneEditSpawnBoxData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditSpawnBoxData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_extra_base_info_instance_id() != 0) {
    _this->_internal_set_extra_base_info_instance_id(from._internal_extra_base_info_instance_id());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_spawn_point_count() != 0) {
    _this->_internal_set_spawn_point_count(from._internal_spawn_point_count());
  }
  if (from._internal_team_id() != 0) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditSpawnBoxData::CopyFrom(const SceneEditSpawnBoxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditSpawnBoxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditSpawnBoxData::IsInitialized() const {
  return true;
}

void SceneEditSpawnBoxData::InternalSwap(SceneEditSpawnBoxData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditSpawnBoxData, _impl_.team_id_)
      + sizeof(SceneEditSpawnBoxData::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(SceneEditSpawnBoxData, _impl_.extra_base_info_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.extra_base_info_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.extra_base_info_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditSpawnBoxData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[83]);
}

// ===================================================================

class SceneEditGeneralProtoData::_Internal {
 public:
};

SceneEditGeneralProtoData::SceneEditGeneralProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditGeneralProtoData)
}
SceneEditGeneralProtoData::SceneEditGeneralProtoData(const SceneEditGeneralProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditGeneralProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_hp_){}
    , decltype(_impl_.max_ep_){}
    , decltype(_impl_.start_ep_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.receive_damage_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.jump_height_){}
    , decltype(_impl_.auto_healing_){}
    , decltype(_impl_.limited_ammo_){}
    , decltype(_impl_.enable_active_skill_){}
    , decltype(_impl_.enable_passive_skill_){}
    , decltype(_impl_.global_active_skill_cd_percent_){}
    , decltype(_impl_.playerskill_transform_cd_percent_){}
    , decltype(_impl_.playerskill_epchangetohp_cd_percent_){}
    , decltype(_impl_.playerskill_healingdance_cd_percent_){}
    , decltype(_impl_.playerskill_graffitimonitor_cd_percent_){}
    , decltype(_impl_.playerskill_detective_cd_percent_){}
    , decltype(_impl_.playerskill_epfastandupper_cd_percent_){}
    , decltype(_impl_.playerskill_adddamagebycosthp_cd_percent_){}
    , decltype(_impl_.playerskill_spaceshield_cd_percent_){}
    , decltype(_impl_.playerskill_blowupicewall_cd_percent_){}
    , decltype(_impl_.playerskill_tempincreasehp_cd_percent_){}
    , decltype(_impl_.playerskill_addhpandrescure_cd_percent_){}
    , decltype(_impl_.playerskill_dwshield_cd_percent_){}
    , decltype(_impl_.playerskill_throwsilence_cd_percent_){}
    , decltype(_impl_.playerskill_createflightbomb_cd_percent_){}
    , decltype(_impl_.playerskill_markicewall_cd_percent_){}
    , decltype(_impl_.playerskill_runspeedup_cd_percent_){}
    , decltype(_impl_.unlimited_bullet_){}
    , decltype(_impl_.unlimited_gloowall_){}
    , decltype(_impl_.unlimited_throwables_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_hp_, &from._impl_.max_hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unlimited_throwables_) -
    reinterpret_cast<char*>(&_impl_.max_hp_)) + sizeof(_impl_.unlimited_throwables_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditGeneralProtoData)
}

inline void SceneEditGeneralProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_hp_){0u}
    , decltype(_impl_.max_ep_){0u}
    , decltype(_impl_.start_ep_){0u}
    , decltype(_impl_.damage_){0u}
    , decltype(_impl_.receive_damage_){0u}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.jump_height_){0}
    , decltype(_impl_.auto_healing_){false}
    , decltype(_impl_.limited_ammo_){false}
    , decltype(_impl_.enable_active_skill_){false}
    , decltype(_impl_.enable_passive_skill_){false}
    , decltype(_impl_.global_active_skill_cd_percent_){0u}
    , decltype(_impl_.playerskill_transform_cd_percent_){0u}
    , decltype(_impl_.playerskill_epchangetohp_cd_percent_){0u}
    , decltype(_impl_.playerskill_healingdance_cd_percent_){0u}
    , decltype(_impl_.playerskill_graffitimonitor_cd_percent_){0u}
    , decltype(_impl_.playerskill_detective_cd_percent_){0u}
    , decltype(_impl_.playerskill_epfastandupper_cd_percent_){0u}
    , decltype(_impl_.playerskill_adddamagebycosthp_cd_percent_){0u}
    , decltype(_impl_.playerskill_spaceshield_cd_percent_){0u}
    , decltype(_impl_.playerskill_blowupicewall_cd_percent_){0u}
    , decltype(_impl_.playerskill_tempincreasehp_cd_percent_){0u}
    , decltype(_impl_.playerskill_addhpandrescure_cd_percent_){0u}
    , decltype(_impl_.playerskill_dwshield_cd_percent_){0u}
    , decltype(_impl_.playerskill_throwsilence_cd_percent_){0u}
    , decltype(_impl_.playerskill_createflightbomb_cd_percent_){0u}
    , decltype(_impl_.playerskill_markicewall_cd_percent_){0u}
    , decltype(_impl_.playerskill_runspeedup_cd_percent_){0u}
    , decltype(_impl_.unlimited_bullet_){false}
    , decltype(_impl_.unlimited_gloowall_){false}
    , decltype(_impl_.unlimited_throwables_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditGeneralProtoData::~SceneEditGeneralProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditGeneralProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditGeneralProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditGeneralProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditGeneralProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditGeneralProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unlimited_throwables_) -
      reinterpret_cast<char*>(&_impl_.max_hp_)) + sizeof(_impl_.unlimited_throwables_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditGeneralProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 max_hp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_ep = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_ep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 start_ep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.start_ep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_healing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.auto_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 receive_damage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.receive_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float jump_height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.jump_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool limited_ammo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.limited_ammo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_active_skill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.enable_active_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_passive_skill = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.enable_passive_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 global_active_skill_cd_percent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.global_active_skill_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_transform_cd_percent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.playerskill_transform_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_epchangetohp_cd_percent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.playerskill_epchangetohp_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_healingdance_cd_percent = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.playerskill_healingdance_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_graffitimonitor_cd_percent = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.playerskill_graffitimonitor_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_detective_cd_percent = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.playerskill_detective_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_epfastandupper_cd_percent = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.playerskill_epfastandupper_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_adddamagebycosthp_cd_percent = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.playerskill_adddamagebycosthp_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_spaceshield_cd_percent = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.playerskill_spaceshield_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_blowupicewall_cd_percent = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.playerskill_blowupicewall_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_tempincreasehp_cd_percent = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.playerskill_tempincreasehp_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_addhpandrescure_cd_percent = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.playerskill_addhpandrescure_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_dwshield_cd_percent = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.playerskill_dwshield_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_throwsilence_cd_percent = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.playerskill_throwsilence_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_createflightbomb_cd_percent = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.playerskill_createflightbomb_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_markicewall_cd_percent = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.playerskill_markicewall_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerskill_runspeedup_cd_percent = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.playerskill_runspeedup_cd_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unlimited_bullet = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.unlimited_bullet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unlimited_gloowall = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.unlimited_gloowall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unlimited_throwables = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.unlimited_throwables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditGeneralProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditGeneralProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_hp = 1;
  if (this->_internal_max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_hp(), target);
  }

  // uint32 max_ep = 2;
  if (this->_internal_max_ep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_ep(), target);
  }

  // uint32 start_ep = 3;
  if (this->_internal_start_ep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_ep(), target);
  }

  // bool auto_healing = 4;
  if (this->_internal_auto_healing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_healing(), target);
  }

  // uint32 damage = 5;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_damage(), target);
  }

  // uint32 receive_damage = 6;
  if (this->_internal_receive_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_receive_damage(), target);
  }

  // float move_speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_move_speed(), target);
  }

  // float jump_height = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jump_height = this->_internal_jump_height();
  uint32_t raw_jump_height;
  memcpy(&raw_jump_height, &tmp_jump_height, sizeof(tmp_jump_height));
  if (raw_jump_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_jump_height(), target);
  }

  // bool limited_ammo = 9;
  if (this->_internal_limited_ammo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_limited_ammo(), target);
  }

  // bool enable_active_skill = 10;
  if (this->_internal_enable_active_skill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_enable_active_skill(), target);
  }

  // bool enable_passive_skill = 11;
  if (this->_internal_enable_passive_skill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_enable_passive_skill(), target);
  }

  // uint32 global_active_skill_cd_percent = 12;
  if (this->_internal_global_active_skill_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_global_active_skill_cd_percent(), target);
  }

  // uint32 playerskill_transform_cd_percent = 13;
  if (this->_internal_playerskill_transform_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_playerskill_transform_cd_percent(), target);
  }

  // uint32 playerskill_epchangetohp_cd_percent = 14;
  if (this->_internal_playerskill_epchangetohp_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_playerskill_epchangetohp_cd_percent(), target);
  }

  // uint32 playerskill_healingdance_cd_percent = 15;
  if (this->_internal_playerskill_healingdance_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_playerskill_healingdance_cd_percent(), target);
  }

  // uint32 playerskill_graffitimonitor_cd_percent = 16;
  if (this->_internal_playerskill_graffitimonitor_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_playerskill_graffitimonitor_cd_percent(), target);
  }

  // uint32 playerskill_detective_cd_percent = 17;
  if (this->_internal_playerskill_detective_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_playerskill_detective_cd_percent(), target);
  }

  // uint32 playerskill_epfastandupper_cd_percent = 18;
  if (this->_internal_playerskill_epfastandupper_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_playerskill_epfastandupper_cd_percent(), target);
  }

  // uint32 playerskill_adddamagebycosthp_cd_percent = 19;
  if (this->_internal_playerskill_adddamagebycosthp_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_playerskill_adddamagebycosthp_cd_percent(), target);
  }

  // uint32 playerskill_spaceshield_cd_percent = 20;
  if (this->_internal_playerskill_spaceshield_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_playerskill_spaceshield_cd_percent(), target);
  }

  // uint32 playerskill_blowupicewall_cd_percent = 21;
  if (this->_internal_playerskill_blowupicewall_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_playerskill_blowupicewall_cd_percent(), target);
  }

  // uint32 playerskill_tempincreasehp_cd_percent = 22;
  if (this->_internal_playerskill_tempincreasehp_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_playerskill_tempincreasehp_cd_percent(), target);
  }

  // uint32 playerskill_addhpandrescure_cd_percent = 23;
  if (this->_internal_playerskill_addhpandrescure_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_playerskill_addhpandrescure_cd_percent(), target);
  }

  // uint32 playerskill_dwshield_cd_percent = 25;
  if (this->_internal_playerskill_dwshield_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_playerskill_dwshield_cd_percent(), target);
  }

  // uint32 playerskill_throwsilence_cd_percent = 26;
  if (this->_internal_playerskill_throwsilence_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_playerskill_throwsilence_cd_percent(), target);
  }

  // uint32 playerskill_createflightbomb_cd_percent = 27;
  if (this->_internal_playerskill_createflightbomb_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_playerskill_createflightbomb_cd_percent(), target);
  }

  // uint32 playerskill_markicewall_cd_percent = 28;
  if (this->_internal_playerskill_markicewall_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_playerskill_markicewall_cd_percent(), target);
  }

  // uint32 playerskill_runspeedup_cd_percent = 29;
  if (this->_internal_playerskill_runspeedup_cd_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_playerskill_runspeedup_cd_percent(), target);
  }

  // bool unlimited_bullet = 30;
  if (this->_internal_unlimited_bullet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_unlimited_bullet(), target);
  }

  // bool unlimited_gloowall = 31;
  if (this->_internal_unlimited_gloowall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_unlimited_gloowall(), target);
  }

  // bool unlimited_throwables = 32;
  if (this->_internal_unlimited_throwables() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_unlimited_throwables(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditGeneralProtoData)
  return target;
}

size_t SceneEditGeneralProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditGeneralProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 max_hp = 1;
  if (this->_internal_max_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_hp());
  }

  // uint32 max_ep = 2;
  if (this->_internal_max_ep() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_ep());
  }

  // uint32 start_ep = 3;
  if (this->_internal_start_ep() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_ep());
  }

  // uint32 damage = 5;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  // uint32 receive_damage = 6;
  if (this->_internal_receive_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_receive_damage());
  }

  // float move_speed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 1 + 4;
  }

  // float jump_height = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jump_height = this->_internal_jump_height();
  uint32_t raw_jump_height;
  memcpy(&raw_jump_height, &tmp_jump_height, sizeof(tmp_jump_height));
  if (raw_jump_height != 0) {
    total_size += 1 + 4;
  }

  // bool auto_healing = 4;
  if (this->_internal_auto_healing() != 0) {
    total_size += 1 + 1;
  }

  // bool limited_ammo = 9;
  if (this->_internal_limited_ammo() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_active_skill = 10;
  if (this->_internal_enable_active_skill() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_passive_skill = 11;
  if (this->_internal_enable_passive_skill() != 0) {
    total_size += 1 + 1;
  }

  // uint32 global_active_skill_cd_percent = 12;
  if (this->_internal_global_active_skill_cd_percent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_global_active_skill_cd_percent());
  }

  // uint32 playerskill_transform_cd_percent = 13;
  if (this->_internal_playerskill_transform_cd_percent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerskill_transform_cd_percent());
  }

  // uint32 playerskill_epchangetohp_cd_percent = 14;
  if (this->_internal_playerskill_epchangetohp_cd_percent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerskill_epchangetohp_cd_percent());
  }

  // uint32 playerskill_healingdance_cd_percent = 15;
  if (this->_internal_playerskill_healingdance_cd_percent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerskill_healingdance_cd_percent());
  }

  // uint32 playerskill_graffitimonitor_cd_percent = 16;
  if (this->_internal_playerskill_graffitimonitor_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_graffitimonitor_cd_percent());
  }

  // uint32 playerskill_detective_cd_percent = 17;
  if (this->_internal_playerskill_detective_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_detective_cd_percent());
  }

  // uint32 playerskill_epfastandupper_cd_percent = 18;
  if (this->_internal_playerskill_epfastandupper_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_epfastandupper_cd_percent());
  }

  // uint32 playerskill_adddamagebycosthp_cd_percent = 19;
  if (this->_internal_playerskill_adddamagebycosthp_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_adddamagebycosthp_cd_percent());
  }

  // uint32 playerskill_spaceshield_cd_percent = 20;
  if (this->_internal_playerskill_spaceshield_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_spaceshield_cd_percent());
  }

  // uint32 playerskill_blowupicewall_cd_percent = 21;
  if (this->_internal_playerskill_blowupicewall_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_blowupicewall_cd_percent());
  }

  // uint32 playerskill_tempincreasehp_cd_percent = 22;
  if (this->_internal_playerskill_tempincreasehp_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_tempincreasehp_cd_percent());
  }

  // uint32 playerskill_addhpandrescure_cd_percent = 23;
  if (this->_internal_playerskill_addhpandrescure_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_addhpandrescure_cd_percent());
  }

  // uint32 playerskill_dwshield_cd_percent = 25;
  if (this->_internal_playerskill_dwshield_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_dwshield_cd_percent());
  }

  // uint32 playerskill_throwsilence_cd_percent = 26;
  if (this->_internal_playerskill_throwsilence_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_throwsilence_cd_percent());
  }

  // uint32 playerskill_createflightbomb_cd_percent = 27;
  if (this->_internal_playerskill_createflightbomb_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_createflightbomb_cd_percent());
  }

  // uint32 playerskill_markicewall_cd_percent = 28;
  if (this->_internal_playerskill_markicewall_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_markicewall_cd_percent());
  }

  // uint32 playerskill_runspeedup_cd_percent = 29;
  if (this->_internal_playerskill_runspeedup_cd_percent() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerskill_runspeedup_cd_percent());
  }

  // bool unlimited_bullet = 30;
  if (this->_internal_unlimited_bullet() != 0) {
    total_size += 2 + 1;
  }

  // bool unlimited_gloowall = 31;
  if (this->_internal_unlimited_gloowall() != 0) {
    total_size += 2 + 1;
  }

  // bool unlimited_throwables = 32;
  if (this->_internal_unlimited_throwables() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditGeneralProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditGeneralProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditGeneralProtoData::GetClassData() const { return &_class_data_; }


void SceneEditGeneralProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditGeneralProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditGeneralProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditGeneralProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_hp() != 0) {
    _this->_internal_set_max_hp(from._internal_max_hp());
  }
  if (from._internal_max_ep() != 0) {
    _this->_internal_set_max_ep(from._internal_max_ep());
  }
  if (from._internal_start_ep() != 0) {
    _this->_internal_set_start_ep(from._internal_start_ep());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_receive_damage() != 0) {
    _this->_internal_set_receive_damage(from._internal_receive_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_jump_height = from._internal_jump_height();
  uint32_t raw_jump_height;
  memcpy(&raw_jump_height, &tmp_jump_height, sizeof(tmp_jump_height));
  if (raw_jump_height != 0) {
    _this->_internal_set_jump_height(from._internal_jump_height());
  }
  if (from._internal_auto_healing() != 0) {
    _this->_internal_set_auto_healing(from._internal_auto_healing());
  }
  if (from._internal_limited_ammo() != 0) {
    _this->_internal_set_limited_ammo(from._internal_limited_ammo());
  }
  if (from._internal_enable_active_skill() != 0) {
    _this->_internal_set_enable_active_skill(from._internal_enable_active_skill());
  }
  if (from._internal_enable_passive_skill() != 0) {
    _this->_internal_set_enable_passive_skill(from._internal_enable_passive_skill());
  }
  if (from._internal_global_active_skill_cd_percent() != 0) {
    _this->_internal_set_global_active_skill_cd_percent(from._internal_global_active_skill_cd_percent());
  }
  if (from._internal_playerskill_transform_cd_percent() != 0) {
    _this->_internal_set_playerskill_transform_cd_percent(from._internal_playerskill_transform_cd_percent());
  }
  if (from._internal_playerskill_epchangetohp_cd_percent() != 0) {
    _this->_internal_set_playerskill_epchangetohp_cd_percent(from._internal_playerskill_epchangetohp_cd_percent());
  }
  if (from._internal_playerskill_healingdance_cd_percent() != 0) {
    _this->_internal_set_playerskill_healingdance_cd_percent(from._internal_playerskill_healingdance_cd_percent());
  }
  if (from._internal_playerskill_graffitimonitor_cd_percent() != 0) {
    _this->_internal_set_playerskill_graffitimonitor_cd_percent(from._internal_playerskill_graffitimonitor_cd_percent());
  }
  if (from._internal_playerskill_detective_cd_percent() != 0) {
    _this->_internal_set_playerskill_detective_cd_percent(from._internal_playerskill_detective_cd_percent());
  }
  if (from._internal_playerskill_epfastandupper_cd_percent() != 0) {
    _this->_internal_set_playerskill_epfastandupper_cd_percent(from._internal_playerskill_epfastandupper_cd_percent());
  }
  if (from._internal_playerskill_adddamagebycosthp_cd_percent() != 0) {
    _this->_internal_set_playerskill_adddamagebycosthp_cd_percent(from._internal_playerskill_adddamagebycosthp_cd_percent());
  }
  if (from._internal_playerskill_spaceshield_cd_percent() != 0) {
    _this->_internal_set_playerskill_spaceshield_cd_percent(from._internal_playerskill_spaceshield_cd_percent());
  }
  if (from._internal_playerskill_blowupicewall_cd_percent() != 0) {
    _this->_internal_set_playerskill_blowupicewall_cd_percent(from._internal_playerskill_blowupicewall_cd_percent());
  }
  if (from._internal_playerskill_tempincreasehp_cd_percent() != 0) {
    _this->_internal_set_playerskill_tempincreasehp_cd_percent(from._internal_playerskill_tempincreasehp_cd_percent());
  }
  if (from._internal_playerskill_addhpandrescure_cd_percent() != 0) {
    _this->_internal_set_playerskill_addhpandrescure_cd_percent(from._internal_playerskill_addhpandrescure_cd_percent());
  }
  if (from._internal_playerskill_dwshield_cd_percent() != 0) {
    _this->_internal_set_playerskill_dwshield_cd_percent(from._internal_playerskill_dwshield_cd_percent());
  }
  if (from._internal_playerskill_throwsilence_cd_percent() != 0) {
    _this->_internal_set_playerskill_throwsilence_cd_percent(from._internal_playerskill_throwsilence_cd_percent());
  }
  if (from._internal_playerskill_createflightbomb_cd_percent() != 0) {
    _this->_internal_set_playerskill_createflightbomb_cd_percent(from._internal_playerskill_createflightbomb_cd_percent());
  }
  if (from._internal_playerskill_markicewall_cd_percent() != 0) {
    _this->_internal_set_playerskill_markicewall_cd_percent(from._internal_playerskill_markicewall_cd_percent());
  }
  if (from._internal_playerskill_runspeedup_cd_percent() != 0) {
    _this->_internal_set_playerskill_runspeedup_cd_percent(from._internal_playerskill_runspeedup_cd_percent());
  }
  if (from._internal_unlimited_bullet() != 0) {
    _this->_internal_set_unlimited_bullet(from._internal_unlimited_bullet());
  }
  if (from._internal_unlimited_gloowall() != 0) {
    _this->_internal_set_unlimited_gloowall(from._internal_unlimited_gloowall());
  }
  if (from._internal_unlimited_throwables() != 0) {
    _this->_internal_set_unlimited_throwables(from._internal_unlimited_throwables());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditGeneralProtoData::CopyFrom(const SceneEditGeneralProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditGeneralProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditGeneralProtoData::IsInitialized() const {
  return true;
}

void SceneEditGeneralProtoData::InternalSwap(SceneEditGeneralProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditGeneralProtoData, _impl_.unlimited_throwables_)
      + sizeof(SceneEditGeneralProtoData::_impl_.unlimited_throwables_)
      - PROTOBUF_FIELD_OFFSET(SceneEditGeneralProtoData, _impl_.max_hp_)>(
          reinterpret_cast<char*>(&_impl_.max_hp_),
          reinterpret_cast<char*>(&other->_impl_.max_hp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditGeneralProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[84]);
}

// ===================================================================

class SceneEditCSModeProtoData::_Internal {
 public:
  static const ::message::SceneEditEndConditionProtoData& end_condition(const SceneEditCSModeProtoData* msg);
};

const ::message::SceneEditEndConditionProtoData&
SceneEditCSModeProtoData::_Internal::end_condition(const SceneEditCSModeProtoData* msg) {
  return *msg->_impl_.end_condition_;
}
SceneEditCSModeProtoData::SceneEditCSModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditCSModeProtoData)
}
SceneEditCSModeProtoData::SceneEditCSModeProtoData(const SceneEditCSModeProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditCSModeProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.end_condition_){nullptr}
    , decltype(_impl_.safe_zone_size_){}
    , decltype(_impl_.safe_zone_start_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_condition()) {
    _this->_impl_.end_condition_ = new ::message::SceneEditEndConditionProtoData(*from._impl_.end_condition_);
  }
  ::memcpy(&_impl_.safe_zone_size_, &from._impl_.safe_zone_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.safe_zone_start_time_) -
    reinterpret_cast<char*>(&_impl_.safe_zone_size_)) + sizeof(_impl_.safe_zone_start_time_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditCSModeProtoData)
}

inline void SceneEditCSModeProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.end_condition_){nullptr}
    , decltype(_impl_.safe_zone_size_){0}
    , decltype(_impl_.safe_zone_start_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditCSModeProtoData::~SceneEditCSModeProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditCSModeProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditCSModeProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.end_condition_;
}

void SceneEditCSModeProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditCSModeProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditCSModeProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.end_condition_ != nullptr) {
    delete _impl_.end_condition_;
  }
  _impl_.end_condition_ = nullptr;
  ::memset(&_impl_.safe_zone_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.safe_zone_start_time_) -
      reinterpret_cast<char*>(&_impl_.safe_zone_size_)) + sizeof(_impl_.safe_zone_start_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditCSModeProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.SceneEditEndConditionProtoData end_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float safe_zone_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.safe_zone_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 safe_zone_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.safe_zone_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditCSModeProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditCSModeProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.SceneEditEndConditionProtoData end_condition = 1;
  if (this->_internal_has_end_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::end_condition(this),
        _Internal::end_condition(this).GetCachedSize(), target, stream);
  }

  // float safe_zone_size = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_safe_zone_size = this->_internal_safe_zone_size();
  uint32_t raw_safe_zone_size;
  memcpy(&raw_safe_zone_size, &tmp_safe_zone_size, sizeof(tmp_safe_zone_size));
  if (raw_safe_zone_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_safe_zone_size(), target);
  }

  // uint32 safe_zone_start_time = 3;
  if (this->_internal_safe_zone_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_safe_zone_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditCSModeProtoData)
  return target;
}

size_t SceneEditCSModeProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditCSModeProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.SceneEditEndConditionProtoData end_condition = 1;
  if (this->_internal_has_end_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_condition_);
  }

  // float safe_zone_size = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_safe_zone_size = this->_internal_safe_zone_size();
  uint32_t raw_safe_zone_size;
  memcpy(&raw_safe_zone_size, &tmp_safe_zone_size, sizeof(tmp_safe_zone_size));
  if (raw_safe_zone_size != 0) {
    total_size += 1 + 4;
  }

  // uint32 safe_zone_start_time = 3;
  if (this->_internal_safe_zone_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_safe_zone_start_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditCSModeProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditCSModeProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditCSModeProtoData::GetClassData() const { return &_class_data_; }


void SceneEditCSModeProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditCSModeProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditCSModeProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditCSModeProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_end_condition()) {
    _this->_internal_mutable_end_condition()->::message::SceneEditEndConditionProtoData::MergeFrom(
        from._internal_end_condition());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_safe_zone_size = from._internal_safe_zone_size();
  uint32_t raw_safe_zone_size;
  memcpy(&raw_safe_zone_size, &tmp_safe_zone_size, sizeof(tmp_safe_zone_size));
  if (raw_safe_zone_size != 0) {
    _this->_internal_set_safe_zone_size(from._internal_safe_zone_size());
  }
  if (from._internal_safe_zone_start_time() != 0) {
    _this->_internal_set_safe_zone_start_time(from._internal_safe_zone_start_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditCSModeProtoData::CopyFrom(const SceneEditCSModeProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditCSModeProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditCSModeProtoData::IsInitialized() const {
  return true;
}

void SceneEditCSModeProtoData::InternalSwap(SceneEditCSModeProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditCSModeProtoData, _impl_.safe_zone_start_time_)
      + sizeof(SceneEditCSModeProtoData::_impl_.safe_zone_start_time_)
      - PROTOBUF_FIELD_OFFSET(SceneEditCSModeProtoData, _impl_.end_condition_)>(
          reinterpret_cast<char*>(&_impl_.end_condition_),
          reinterpret_cast<char*>(&other->_impl_.end_condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditCSModeProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[85]);
}

// ===================================================================

class SceneEditIntegralModeProtoData::_Internal {
 public:
  static const ::message::SceneEditEndConditionProtoData& end_condition(const SceneEditIntegralModeProtoData* msg);
};

const ::message::SceneEditEndConditionProtoData&
SceneEditIntegralModeProtoData::_Internal::end_condition(const SceneEditIntegralModeProtoData* msg) {
  return *msg->_impl_.end_condition_;
}
SceneEditIntegralModeProtoData::SceneEditIntegralModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditIntegralModeProtoData)
}
SceneEditIntegralModeProtoData::SceneEditIntegralModeProtoData(const SceneEditIntegralModeProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditIntegralModeProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.end_condition_){nullptr}
    , decltype(_impl_.kill_score_){}
    , decltype(_impl_.revive_rule_){}
    , decltype(_impl_.revive_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_condition()) {
    _this->_impl_.end_condition_ = new ::message::SceneEditEndConditionProtoData(*from._impl_.end_condition_);
  }
  ::memcpy(&_impl_.kill_score_, &from._impl_.kill_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.revive_time_) -
    reinterpret_cast<char*>(&_impl_.kill_score_)) + sizeof(_impl_.revive_time_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditIntegralModeProtoData)
}

inline void SceneEditIntegralModeProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.end_condition_){nullptr}
    , decltype(_impl_.kill_score_){0u}
    , decltype(_impl_.revive_rule_){0u}
    , decltype(_impl_.revive_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditIntegralModeProtoData::~SceneEditIntegralModeProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditIntegralModeProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditIntegralModeProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.end_condition_;
}

void SceneEditIntegralModeProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditIntegralModeProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditIntegralModeProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.end_condition_ != nullptr) {
    delete _impl_.end_condition_;
  }
  _impl_.end_condition_ = nullptr;
  ::memset(&_impl_.kill_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.revive_time_) -
      reinterpret_cast<char*>(&_impl_.kill_score_)) + sizeof(_impl_.revive_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditIntegralModeProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.SceneEditEndConditionProtoData end_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 kill_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.kill_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 revive_rule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.revive_rule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 revive_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.revive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditIntegralModeProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditIntegralModeProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.SceneEditEndConditionProtoData end_condition = 1;
  if (this->_internal_has_end_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::end_condition(this),
        _Internal::end_condition(this).GetCachedSize(), target, stream);
  }

  // uint32 kill_score = 2;
  if (this->_internal_kill_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kill_score(), target);
  }

  // uint32 revive_rule = 3;
  if (this->_internal_revive_rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_revive_rule(), target);
  }

  // uint32 revive_time = 4;
  if (this->_internal_revive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_revive_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditIntegralModeProtoData)
  return target;
}

size_t SceneEditIntegralModeProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditIntegralModeProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.SceneEditEndConditionProtoData end_condition = 1;
  if (this->_internal_has_end_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_condition_);
  }

  // uint32 kill_score = 2;
  if (this->_internal_kill_score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kill_score());
  }

  // uint32 revive_rule = 3;
  if (this->_internal_revive_rule() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_revive_rule());
  }

  // uint32 revive_time = 4;
  if (this->_internal_revive_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_revive_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditIntegralModeProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditIntegralModeProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditIntegralModeProtoData::GetClassData() const { return &_class_data_; }


void SceneEditIntegralModeProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditIntegralModeProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditIntegralModeProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditIntegralModeProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_end_condition()) {
    _this->_internal_mutable_end_condition()->::message::SceneEditEndConditionProtoData::MergeFrom(
        from._internal_end_condition());
  }
  if (from._internal_kill_score() != 0) {
    _this->_internal_set_kill_score(from._internal_kill_score());
  }
  if (from._internal_revive_rule() != 0) {
    _this->_internal_set_revive_rule(from._internal_revive_rule());
  }
  if (from._internal_revive_time() != 0) {
    _this->_internal_set_revive_time(from._internal_revive_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditIntegralModeProtoData::CopyFrom(const SceneEditIntegralModeProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditIntegralModeProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditIntegralModeProtoData::IsInitialized() const {
  return true;
}

void SceneEditIntegralModeProtoData::InternalSwap(SceneEditIntegralModeProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditIntegralModeProtoData, _impl_.revive_time_)
      + sizeof(SceneEditIntegralModeProtoData::_impl_.revive_time_)
      - PROTOBUF_FIELD_OFFSET(SceneEditIntegralModeProtoData, _impl_.end_condition_)>(
          reinterpret_cast<char*>(&_impl_.end_condition_),
          reinterpret_cast<char*>(&other->_impl_.end_condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditIntegralModeProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[86]);
}

// ===================================================================

class SceneEditPartyModeProtoData::_Internal {
 public:
  static const ::message::SceneEditEndConditionProtoData& end_condition(const SceneEditPartyModeProtoData* msg);
};

const ::message::SceneEditEndConditionProtoData&
SceneEditPartyModeProtoData::_Internal::end_condition(const SceneEditPartyModeProtoData* msg) {
  return *msg->_impl_.end_condition_;
}
SceneEditPartyModeProtoData::SceneEditPartyModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditPartyModeProtoData)
}
SceneEditPartyModeProtoData::SceneEditPartyModeProtoData(const SceneEditPartyModeProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditPartyModeProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.end_condition_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_condition()) {
    _this->_impl_.end_condition_ = new ::message::SceneEditEndConditionProtoData(*from._impl_.end_condition_);
  }
  // @@protoc_insertion_point(copy_constructor:message.SceneEditPartyModeProtoData)
}

inline void SceneEditPartyModeProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.end_condition_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditPartyModeProtoData::~SceneEditPartyModeProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditPartyModeProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditPartyModeProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.end_condition_;
}

void SceneEditPartyModeProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditPartyModeProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditPartyModeProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.end_condition_ != nullptr) {
    delete _impl_.end_condition_;
  }
  _impl_.end_condition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditPartyModeProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.SceneEditEndConditionProtoData end_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditPartyModeProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditPartyModeProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.SceneEditEndConditionProtoData end_condition = 1;
  if (this->_internal_has_end_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::end_condition(this),
        _Internal::end_condition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditPartyModeProtoData)
  return target;
}

size_t SceneEditPartyModeProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditPartyModeProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.SceneEditEndConditionProtoData end_condition = 1;
  if (this->_internal_has_end_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_condition_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditPartyModeProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditPartyModeProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditPartyModeProtoData::GetClassData() const { return &_class_data_; }


void SceneEditPartyModeProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditPartyModeProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditPartyModeProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditPartyModeProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_end_condition()) {
    _this->_internal_mutable_end_condition()->::message::SceneEditEndConditionProtoData::MergeFrom(
        from._internal_end_condition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditPartyModeProtoData::CopyFrom(const SceneEditPartyModeProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditPartyModeProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditPartyModeProtoData::IsInitialized() const {
  return true;
}

void SceneEditPartyModeProtoData::InternalSwap(SceneEditPartyModeProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.end_condition_, other->_impl_.end_condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditPartyModeProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[87]);
}

// ===================================================================

class SceneEditCustomModeProtoData::_Internal {
 public:
};

SceneEditCustomModeProtoData::SceneEditCustomModeProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditCustomModeProtoData)
}
SceneEditCustomModeProtoData::SceneEditCustomModeProtoData(const SceneEditCustomModeProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditCustomModeProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.SceneEditCustomModeProtoData)
}

inline void SceneEditCustomModeProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditCustomModeProtoData::~SceneEditCustomModeProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditCustomModeProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditCustomModeProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}

void SceneEditCustomModeProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditCustomModeProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditCustomModeProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditCustomModeProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.ModeVariable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditCustomModeProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditCustomModeProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.ModeVariable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditCustomModeProtoData)
  return target;
}

size_t SceneEditCustomModeProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditCustomModeProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.ModeVariable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_impl_.variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditCustomModeProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditCustomModeProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditCustomModeProtoData::GetClassData() const { return &_class_data_; }


void SceneEditCustomModeProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditCustomModeProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditCustomModeProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditCustomModeProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditCustomModeProtoData::CopyFrom(const SceneEditCustomModeProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditCustomModeProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditCustomModeProtoData::IsInitialized() const {
  return true;
}

void SceneEditCustomModeProtoData::InternalSwap(SceneEditCustomModeProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditCustomModeProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[88]);
}

// ===================================================================

class SceneEditEndConditionProtoData::_Internal {
 public:
};

SceneEditEndConditionProtoData::SceneEditEndConditionProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.SceneEditEndConditionProtoData)
}
SceneEditEndConditionProtoData::SceneEditEndConditionProtoData(const SceneEditEndConditionProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SceneEditEndConditionProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_up_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.cs_rounds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_up_, &from._impl_.time_up_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cs_rounds_) -
    reinterpret_cast<char*>(&_impl_.time_up_)) + sizeof(_impl_.cs_rounds_));
  // @@protoc_insertion_point(copy_constructor:message.SceneEditEndConditionProtoData)
}

inline void SceneEditEndConditionProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_up_){0u}
    , decltype(_impl_.score_){0u}
    , decltype(_impl_.cs_rounds_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SceneEditEndConditionProtoData::~SceneEditEndConditionProtoData() {
  // @@protoc_insertion_point(destructor:message.SceneEditEndConditionProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SceneEditEndConditionProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SceneEditEndConditionProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SceneEditEndConditionProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SceneEditEndConditionProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cs_rounds_) -
      reinterpret_cast<char*>(&_impl_.time_up_)) + sizeof(_impl_.cs_rounds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SceneEditEndConditionProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 time_up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cs_rounds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cs_rounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SceneEditEndConditionProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SceneEditEndConditionProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time_up = 1;
  if (this->_internal_time_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_up(), target);
  }

  // uint32 score = 2;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // uint32 cs_rounds = 3;
  if (this->_internal_cs_rounds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cs_rounds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SceneEditEndConditionProtoData)
  return target;
}

size_t SceneEditEndConditionProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SceneEditEndConditionProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 time_up = 1;
  if (this->_internal_time_up() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_up());
  }

  // uint32 score = 2;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
  }

  // uint32 cs_rounds = 3;
  if (this->_internal_cs_rounds() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cs_rounds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneEditEndConditionProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SceneEditEndConditionProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneEditEndConditionProtoData::GetClassData() const { return &_class_data_; }


void SceneEditEndConditionProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SceneEditEndConditionProtoData*>(&to_msg);
  auto& from = static_cast<const SceneEditEndConditionProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.SceneEditEndConditionProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time_up() != 0) {
    _this->_internal_set_time_up(from._internal_time_up());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_cs_rounds() != 0) {
    _this->_internal_set_cs_rounds(from._internal_cs_rounds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SceneEditEndConditionProtoData::CopyFrom(const SceneEditEndConditionProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SceneEditEndConditionProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEditEndConditionProtoData::IsInitialized() const {
  return true;
}

void SceneEditEndConditionProtoData::InternalSwap(SceneEditEndConditionProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SceneEditEndConditionProtoData, _impl_.cs_rounds_)
      + sizeof(SceneEditEndConditionProtoData::_impl_.cs_rounds_)
      - PROTOBUF_FIELD_OFFSET(SceneEditEndConditionProtoData, _impl_.time_up_)>(
          reinterpret_cast<char*>(&_impl_.time_up_),
          reinterpret_cast<char*>(&other->_impl_.time_up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SceneEditEndConditionProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[89]);
}

// ===================================================================

class UGCMoveObjectExportExtraInfo::_Internal {
 public:
  static const ::message::ProtoBuffVector3& moverootlocpos(const UGCMoveObjectExportExtraInfo* msg);
  static const ::message::ProtoBuffQuaternion& moverooloctrot(const UGCMoveObjectExportExtraInfo* msg);
};

const ::message::ProtoBuffVector3&
UGCMoveObjectExportExtraInfo::_Internal::moverootlocpos(const UGCMoveObjectExportExtraInfo* msg) {
  return *msg->_impl_.moverootlocpos_;
}
const ::message::ProtoBuffQuaternion&
UGCMoveObjectExportExtraInfo::_Internal::moverooloctrot(const UGCMoveObjectExportExtraInfo* msg) {
  return *msg->_impl_.moverooloctrot_;
}
void UGCMoveObjectExportExtraInfo::clear_moverootlocpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.moverootlocpos_ != nullptr) {
    delete _impl_.moverootlocpos_;
  }
  _impl_.moverootlocpos_ = nullptr;
}
void UGCMoveObjectExportExtraInfo::clear_moverooloctrot() {
  if (GetArenaForAllocation() == nullptr && _impl_.moverooloctrot_ != nullptr) {
    delete _impl_.moverooloctrot_;
  }
  _impl_.moverooloctrot_ = nullptr;
}
UGCMoveObjectExportExtraInfo::UGCMoveObjectExportExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCMoveObjectExportExtraInfo)
}
UGCMoveObjectExportExtraInfo::UGCMoveObjectExportExtraInfo(const UGCMoveObjectExportExtraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCMoveObjectExportExtraInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.moverootlocpos_){nullptr}
    , decltype(_impl_.moverooloctrot_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_moverootlocpos()) {
    _this->_impl_.moverootlocpos_ = new ::message::ProtoBuffVector3(*from._impl_.moverootlocpos_);
  }
  if (from._internal_has_moverooloctrot()) {
    _this->_impl_.moverooloctrot_ = new ::message::ProtoBuffQuaternion(*from._impl_.moverooloctrot_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCMoveObjectExportExtraInfo)
}

inline void UGCMoveObjectExportExtraInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.moverootlocpos_){nullptr}
    , decltype(_impl_.moverooloctrot_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCMoveObjectExportExtraInfo::~UGCMoveObjectExportExtraInfo() {
  // @@protoc_insertion_point(destructor:message.UGCMoveObjectExportExtraInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCMoveObjectExportExtraInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.moverootlocpos_;
  if (this != internal_default_instance()) delete _impl_.moverooloctrot_;
}

void UGCMoveObjectExportExtraInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCMoveObjectExportExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCMoveObjectExportExtraInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.moverootlocpos_ != nullptr) {
    delete _impl_.moverootlocpos_;
  }
  _impl_.moverootlocpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.moverooloctrot_ != nullptr) {
    delete _impl_.moverooloctrot_;
  }
  _impl_.moverooloctrot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCMoveObjectExportExtraInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.ProtoBuffVector3 MoveRootLocPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_moverootlocpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffQuaternion MoveRooLoctRot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_moverooloctrot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCMoveObjectExportExtraInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCMoveObjectExportExtraInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.ProtoBuffVector3 MoveRootLocPos = 1;
  if (this->_internal_has_moverootlocpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::moverootlocpos(this),
        _Internal::moverootlocpos(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffQuaternion MoveRooLoctRot = 2;
  if (this->_internal_has_moverooloctrot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::moverooloctrot(this),
        _Internal::moverooloctrot(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCMoveObjectExportExtraInfo)
  return target;
}

size_t UGCMoveObjectExportExtraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCMoveObjectExportExtraInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.ProtoBuffVector3 MoveRootLocPos = 1;
  if (this->_internal_has_moverootlocpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.moverootlocpos_);
  }

  // .message.ProtoBuffQuaternion MoveRooLoctRot = 2;
  if (this->_internal_has_moverooloctrot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.moverooloctrot_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCMoveObjectExportExtraInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCMoveObjectExportExtraInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCMoveObjectExportExtraInfo::GetClassData() const { return &_class_data_; }


void UGCMoveObjectExportExtraInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCMoveObjectExportExtraInfo*>(&to_msg);
  auto& from = static_cast<const UGCMoveObjectExportExtraInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCMoveObjectExportExtraInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_moverootlocpos()) {
    _this->_internal_mutable_moverootlocpos()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_moverootlocpos());
  }
  if (from._internal_has_moverooloctrot()) {
    _this->_internal_mutable_moverooloctrot()->::message::ProtoBuffQuaternion::MergeFrom(
        from._internal_moverooloctrot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCMoveObjectExportExtraInfo::CopyFrom(const UGCMoveObjectExportExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCMoveObjectExportExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCMoveObjectExportExtraInfo::IsInitialized() const {
  return true;
}

void UGCMoveObjectExportExtraInfo::InternalSwap(UGCMoveObjectExportExtraInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCMoveObjectExportExtraInfo, _impl_.moverooloctrot_)
      + sizeof(UGCMoveObjectExportExtraInfo::_impl_.moverooloctrot_)
      - PROTOBUF_FIELD_OFFSET(UGCMoveObjectExportExtraInfo, _impl_.moverootlocpos_)>(
          reinterpret_cast<char*>(&_impl_.moverootlocpos_),
          reinterpret_cast<char*>(&other->_impl_.moverootlocpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCMoveObjectExportExtraInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[90]);
}

// ===================================================================

class UGCCheckPointExportExtraInfo::_Internal {
 public:
};

void UGCCheckPointExportExtraInfo::clear_spawnpointpos() {
  _impl_.spawnpointpos_.Clear();
}
UGCCheckPointExportExtraInfo::UGCCheckPointExportExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCheckPointExportExtraInfo)
}
UGCCheckPointExportExtraInfo::UGCCheckPointExportExtraInfo(const UGCCheckPointExportExtraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCheckPointExportExtraInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spawnpointpos_){from._impl_.spawnpointpos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCCheckPointExportExtraInfo)
}

inline void UGCCheckPointExportExtraInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spawnpointpos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCCheckPointExportExtraInfo::~UGCCheckPointExportExtraInfo() {
  // @@protoc_insertion_point(destructor:message.UGCCheckPointExportExtraInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCheckPointExportExtraInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spawnpointpos_.~RepeatedPtrField();
}

void UGCCheckPointExportExtraInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCheckPointExportExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCheckPointExportExtraInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spawnpointpos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCheckPointExportExtraInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.ProtoBuffVector3 spawnPointPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spawnpointpos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCheckPointExportExtraInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCheckPointExportExtraInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.ProtoBuffVector3 spawnPointPos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spawnpointpos_size()); i < n; i++) {
    const auto& repfield = this->_internal_spawnpointpos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCheckPointExportExtraInfo)
  return target;
}

size_t UGCCheckPointExportExtraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCheckPointExportExtraInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.ProtoBuffVector3 spawnPointPos = 1;
  total_size += 1UL * this->_internal_spawnpointpos_size();
  for (const auto& msg : this->_impl_.spawnpointpos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCheckPointExportExtraInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCheckPointExportExtraInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCheckPointExportExtraInfo::GetClassData() const { return &_class_data_; }


void UGCCheckPointExportExtraInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCheckPointExportExtraInfo*>(&to_msg);
  auto& from = static_cast<const UGCCheckPointExportExtraInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCheckPointExportExtraInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.spawnpointpos_.MergeFrom(from._impl_.spawnpointpos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCheckPointExportExtraInfo::CopyFrom(const UGCCheckPointExportExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCheckPointExportExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCheckPointExportExtraInfo::IsInitialized() const {
  return true;
}

void UGCCheckPointExportExtraInfo::InternalSwap(UGCCheckPointExportExtraInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.spawnpointpos_.InternalSwap(&other->_impl_.spawnpointpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCheckPointExportExtraInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[91]);
}

// ===================================================================

class UGCBigToyBallExportExtraInfo::_Internal {
 public:
};

UGCBigToyBallExportExtraInfo::UGCBigToyBallExportExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCBigToyBallExportExtraInfo)
}
UGCBigToyBallExportExtraInfo::UGCBigToyBallExportExtraInfo(const UGCBigToyBallExportExtraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCBigToyBallExportExtraInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.moverange_){}
    , decltype(_impl_.triggerradius_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.moverange_, &from._impl_.moverange_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.triggerradius_) -
    reinterpret_cast<char*>(&_impl_.moverange_)) + sizeof(_impl_.triggerradius_));
  // @@protoc_insertion_point(copy_constructor:message.UGCBigToyBallExportExtraInfo)
}

inline void UGCBigToyBallExportExtraInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.moverange_){0}
    , decltype(_impl_.triggerradius_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCBigToyBallExportExtraInfo::~UGCBigToyBallExportExtraInfo() {
  // @@protoc_insertion_point(destructor:message.UGCBigToyBallExportExtraInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCBigToyBallExportExtraInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGCBigToyBallExportExtraInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCBigToyBallExportExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCBigToyBallExportExtraInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.moverange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.triggerradius_) -
      reinterpret_cast<char*>(&_impl_.moverange_)) + sizeof(_impl_.triggerradius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCBigToyBallExportExtraInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float MoveRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.moverange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float TriggerRadius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.triggerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCBigToyBallExportExtraInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCBigToyBallExportExtraInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float MoveRange = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_moverange = this->_internal_moverange();
  uint32_t raw_moverange;
  memcpy(&raw_moverange, &tmp_moverange, sizeof(tmp_moverange));
  if (raw_moverange != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_moverange(), target);
  }

  // float TriggerRadius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_triggerradius = this->_internal_triggerradius();
  uint32_t raw_triggerradius;
  memcpy(&raw_triggerradius, &tmp_triggerradius, sizeof(tmp_triggerradius));
  if (raw_triggerradius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_triggerradius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCBigToyBallExportExtraInfo)
  return target;
}

size_t UGCBigToyBallExportExtraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCBigToyBallExportExtraInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float MoveRange = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_moverange = this->_internal_moverange();
  uint32_t raw_moverange;
  memcpy(&raw_moverange, &tmp_moverange, sizeof(tmp_moverange));
  if (raw_moverange != 0) {
    total_size += 1 + 4;
  }

  // float TriggerRadius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_triggerradius = this->_internal_triggerradius();
  uint32_t raw_triggerradius;
  memcpy(&raw_triggerradius, &tmp_triggerradius, sizeof(tmp_triggerradius));
  if (raw_triggerradius != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCBigToyBallExportExtraInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCBigToyBallExportExtraInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCBigToyBallExportExtraInfo::GetClassData() const { return &_class_data_; }


void UGCBigToyBallExportExtraInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCBigToyBallExportExtraInfo*>(&to_msg);
  auto& from = static_cast<const UGCBigToyBallExportExtraInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCBigToyBallExportExtraInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_moverange = from._internal_moverange();
  uint32_t raw_moverange;
  memcpy(&raw_moverange, &tmp_moverange, sizeof(tmp_moverange));
  if (raw_moverange != 0) {
    _this->_internal_set_moverange(from._internal_moverange());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_triggerradius = from._internal_triggerradius();
  uint32_t raw_triggerradius;
  memcpy(&raw_triggerradius, &tmp_triggerradius, sizeof(tmp_triggerradius));
  if (raw_triggerradius != 0) {
    _this->_internal_set_triggerradius(from._internal_triggerradius());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCBigToyBallExportExtraInfo::CopyFrom(const UGCBigToyBallExportExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCBigToyBallExportExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCBigToyBallExportExtraInfo::IsInitialized() const {
  return true;
}

void UGCBigToyBallExportExtraInfo::InternalSwap(UGCBigToyBallExportExtraInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCBigToyBallExportExtraInfo, _impl_.triggerradius_)
      + sizeof(UGCBigToyBallExportExtraInfo::_impl_.triggerradius_)
      - PROTOBUF_FIELD_OFFSET(UGCBigToyBallExportExtraInfo, _impl_.moverange_)>(
          reinterpret_cast<char*>(&_impl_.moverange_),
          reinterpret_cast<char*>(&other->_impl_.moverange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCBigToyBallExportExtraInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[92]);
}

// ===================================================================

class UGCMiniSentryExportInfo::_Internal {
 public:
  static const ::message::ProtoBuffVector3& firepos(const UGCMiniSentryExportInfo* msg);
};

const ::message::ProtoBuffVector3&
UGCMiniSentryExportInfo::_Internal::firepos(const UGCMiniSentryExportInfo* msg) {
  return *msg->_impl_.firepos_;
}
void UGCMiniSentryExportInfo::clear_firepos() {
  if (GetArenaForAllocation() == nullptr && _impl_.firepos_ != nullptr) {
    delete _impl_.firepos_;
  }
  _impl_.firepos_ = nullptr;
}
UGCMiniSentryExportInfo::UGCMiniSentryExportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCMiniSentryExportInfo)
}
UGCMiniSentryExportInfo::UGCMiniSentryExportInfo(const UGCMiniSentryExportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCMiniSentryExportInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.firepos_){nullptr}
    , decltype(_impl_.anglespeed_){}
    , decltype(_impl_.angleup_){}
    , decltype(_impl_.angledown_){}
    , decltype(_impl_.fireangle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_firepos()) {
    _this->_impl_.firepos_ = new ::message::ProtoBuffVector3(*from._impl_.firepos_);
  }
  ::memcpy(&_impl_.anglespeed_, &from._impl_.anglespeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fireangle_) -
    reinterpret_cast<char*>(&_impl_.anglespeed_)) + sizeof(_impl_.fireangle_));
  // @@protoc_insertion_point(copy_constructor:message.UGCMiniSentryExportInfo)
}

inline void UGCMiniSentryExportInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.firepos_){nullptr}
    , decltype(_impl_.anglespeed_){0}
    , decltype(_impl_.angleup_){0}
    , decltype(_impl_.angledown_){0}
    , decltype(_impl_.fireangle_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCMiniSentryExportInfo::~UGCMiniSentryExportInfo() {
  // @@protoc_insertion_point(destructor:message.UGCMiniSentryExportInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCMiniSentryExportInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.firepos_;
}

void UGCMiniSentryExportInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCMiniSentryExportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCMiniSentryExportInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.firepos_ != nullptr) {
    delete _impl_.firepos_;
  }
  _impl_.firepos_ = nullptr;
  ::memset(&_impl_.anglespeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fireangle_) -
      reinterpret_cast<char*>(&_impl_.anglespeed_)) + sizeof(_impl_.fireangle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCMiniSentryExportInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float AngleSpeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.anglespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float AngleUp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.angleup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float AngleDown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.angledown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 FirePos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_firepos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float FireAngle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.fireangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCMiniSentryExportInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCMiniSentryExportInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float AngleSpeed = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_anglespeed = this->_internal_anglespeed();
  uint32_t raw_anglespeed;
  memcpy(&raw_anglespeed, &tmp_anglespeed, sizeof(tmp_anglespeed));
  if (raw_anglespeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_anglespeed(), target);
  }

  // float AngleUp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angleup = this->_internal_angleup();
  uint32_t raw_angleup;
  memcpy(&raw_angleup, &tmp_angleup, sizeof(tmp_angleup));
  if (raw_angleup != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_angleup(), target);
  }

  // float AngleDown = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angledown = this->_internal_angledown();
  uint32_t raw_angledown;
  memcpy(&raw_angledown, &tmp_angledown, sizeof(tmp_angledown));
  if (raw_angledown != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_angledown(), target);
  }

  // .message.ProtoBuffVector3 FirePos = 4;
  if (this->_internal_has_firepos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::firepos(this),
        _Internal::firepos(this).GetCachedSize(), target, stream);
  }

  // float FireAngle = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fireangle = this->_internal_fireangle();
  uint32_t raw_fireangle;
  memcpy(&raw_fireangle, &tmp_fireangle, sizeof(tmp_fireangle));
  if (raw_fireangle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_fireangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCMiniSentryExportInfo)
  return target;
}

size_t UGCMiniSentryExportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCMiniSentryExportInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.ProtoBuffVector3 FirePos = 4;
  if (this->_internal_has_firepos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.firepos_);
  }

  // float AngleSpeed = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_anglespeed = this->_internal_anglespeed();
  uint32_t raw_anglespeed;
  memcpy(&raw_anglespeed, &tmp_anglespeed, sizeof(tmp_anglespeed));
  if (raw_anglespeed != 0) {
    total_size += 1 + 4;
  }

  // float AngleUp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angleup = this->_internal_angleup();
  uint32_t raw_angleup;
  memcpy(&raw_angleup, &tmp_angleup, sizeof(tmp_angleup));
  if (raw_angleup != 0) {
    total_size += 1 + 4;
  }

  // float AngleDown = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angledown = this->_internal_angledown();
  uint32_t raw_angledown;
  memcpy(&raw_angledown, &tmp_angledown, sizeof(tmp_angledown));
  if (raw_angledown != 0) {
    total_size += 1 + 4;
  }

  // float FireAngle = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fireangle = this->_internal_fireangle();
  uint32_t raw_fireangle;
  memcpy(&raw_fireangle, &tmp_fireangle, sizeof(tmp_fireangle));
  if (raw_fireangle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCMiniSentryExportInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCMiniSentryExportInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCMiniSentryExportInfo::GetClassData() const { return &_class_data_; }


void UGCMiniSentryExportInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCMiniSentryExportInfo*>(&to_msg);
  auto& from = static_cast<const UGCMiniSentryExportInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCMiniSentryExportInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_firepos()) {
    _this->_internal_mutable_firepos()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_firepos());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_anglespeed = from._internal_anglespeed();
  uint32_t raw_anglespeed;
  memcpy(&raw_anglespeed, &tmp_anglespeed, sizeof(tmp_anglespeed));
  if (raw_anglespeed != 0) {
    _this->_internal_set_anglespeed(from._internal_anglespeed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angleup = from._internal_angleup();
  uint32_t raw_angleup;
  memcpy(&raw_angleup, &tmp_angleup, sizeof(tmp_angleup));
  if (raw_angleup != 0) {
    _this->_internal_set_angleup(from._internal_angleup());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angledown = from._internal_angledown();
  uint32_t raw_angledown;
  memcpy(&raw_angledown, &tmp_angledown, sizeof(tmp_angledown));
  if (raw_angledown != 0) {
    _this->_internal_set_angledown(from._internal_angledown());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fireangle = from._internal_fireangle();
  uint32_t raw_fireangle;
  memcpy(&raw_fireangle, &tmp_fireangle, sizeof(tmp_fireangle));
  if (raw_fireangle != 0) {
    _this->_internal_set_fireangle(from._internal_fireangle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCMiniSentryExportInfo::CopyFrom(const UGCMiniSentryExportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCMiniSentryExportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCMiniSentryExportInfo::IsInitialized() const {
  return true;
}

void UGCMiniSentryExportInfo::InternalSwap(UGCMiniSentryExportInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCMiniSentryExportInfo, _impl_.fireangle_)
      + sizeof(UGCMiniSentryExportInfo::_impl_.fireangle_)
      - PROTOBUF_FIELD_OFFSET(UGCMiniSentryExportInfo, _impl_.firepos_)>(
          reinterpret_cast<char*>(&_impl_.firepos_),
          reinterpret_cast<char*>(&other->_impl_.firepos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCMiniSentryExportInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[93]);
}

// ===================================================================

class ModeVariable::_Internal {
 public:
};

ModeVariable::ModeVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.ModeVariable)
}
ModeVariable::ModeVariable(const ModeVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModeVariable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.floatarrvalue_){from._impl_.floatarrvalue_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.boolvalue_){}
    , decltype(_impl_.intvalue_){}
    , decltype(_impl_.floatvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.floatvalue_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.floatvalue_));
  // @@protoc_insertion_point(copy_constructor:message.ModeVariable)
}

inline void ModeVariable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.floatarrvalue_){arena}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.boolvalue_){false}
    , decltype(_impl_.intvalue_){0}
    , decltype(_impl_.floatvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModeVariable::~ModeVariable() {
  // @@protoc_insertion_point(destructor:message.ModeVariable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModeVariable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.floatarrvalue_.~RepeatedField();
}

void ModeVariable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModeVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:message.ModeVariable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.floatarrvalue_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.floatvalue_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.floatvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeVariable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool boolValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.boolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 intValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.intvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float floatValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.floatvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float floatArrValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floatarrvalue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_floatarrvalue(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModeVariable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ModeVariable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bool boolValue = 2;
  if (this->_internal_boolvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_boolvalue(), target);
  }

  // int32 intValue = 3;
  if (this->_internal_intvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_intvalue(), target);
  }

  // float floatValue = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_floatvalue = this->_internal_floatvalue();
  uint32_t raw_floatvalue;
  memcpy(&raw_floatvalue, &tmp_floatvalue, sizeof(tmp_floatvalue));
  if (raw_floatvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_floatvalue(), target);
  }

  // repeated float floatArrValue = 5;
  if (this->_internal_floatarrvalue_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_floatarrvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ModeVariable)
  return target;
}

size_t ModeVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.ModeVariable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float floatArrValue = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floatarrvalue_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // bool boolValue = 2;
  if (this->_internal_boolvalue() != 0) {
    total_size += 1 + 1;
  }

  // int32 intValue = 3;
  if (this->_internal_intvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_intvalue());
  }

  // float floatValue = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_floatvalue = this->_internal_floatvalue();
  uint32_t raw_floatvalue;
  memcpy(&raw_floatvalue, &tmp_floatvalue, sizeof(tmp_floatvalue));
  if (raw_floatvalue != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModeVariable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModeVariable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModeVariable::GetClassData() const { return &_class_data_; }


void ModeVariable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModeVariable*>(&to_msg);
  auto& from = static_cast<const ModeVariable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.ModeVariable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.floatarrvalue_.MergeFrom(from._impl_.floatarrvalue_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_boolvalue() != 0) {
    _this->_internal_set_boolvalue(from._internal_boolvalue());
  }
  if (from._internal_intvalue() != 0) {
    _this->_internal_set_intvalue(from._internal_intvalue());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_floatvalue = from._internal_floatvalue();
  uint32_t raw_floatvalue;
  memcpy(&raw_floatvalue, &tmp_floatvalue, sizeof(tmp_floatvalue));
  if (raw_floatvalue != 0) {
    _this->_internal_set_floatvalue(from._internal_floatvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModeVariable::CopyFrom(const ModeVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.ModeVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeVariable::IsInitialized() const {
  return true;
}

void ModeVariable::InternalSwap(ModeVariable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.floatarrvalue_.InternalSwap(&other->_impl_.floatarrvalue_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModeVariable, _impl_.floatvalue_)
      + sizeof(ModeVariable::_impl_.floatvalue_)
      - PROTOBUF_FIELD_OFFSET(ModeVariable, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeVariable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[94]);
}

// ===================================================================

class UGCBlockEditProjectData::_Internal {
 public:
};

UGCBlockEditProjectData::UGCBlockEditProjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCBlockEditProjectData)
}
UGCBlockEditProjectData::UGCBlockEditProjectData(const UGCBlockEditProjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCBlockEditProjectData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.savetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.savetype_ = from._impl_.savetype_;
  // @@protoc_insertion_point(copy_constructor:message.UGCBlockEditProjectData)
}

inline void UGCBlockEditProjectData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.savetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCBlockEditProjectData::~UGCBlockEditProjectData() {
  // @@protoc_insertion_point(destructor:message.UGCBlockEditProjectData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCBlockEditProjectData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void UGCBlockEditProjectData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCBlockEditProjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCBlockEditProjectData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.savetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCBlockEditProjectData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SaveType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.savetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCBlockEditProjectData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCBlockEditProjectData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int32 SaveType = 2;
  if (this->_internal_savetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_savetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCBlockEditProjectData)
  return target;
}

size_t UGCBlockEditProjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCBlockEditProjectData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 SaveType = 2;
  if (this->_internal_savetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_savetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCBlockEditProjectData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCBlockEditProjectData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCBlockEditProjectData::GetClassData() const { return &_class_data_; }


void UGCBlockEditProjectData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCBlockEditProjectData*>(&to_msg);
  auto& from = static_cast<const UGCBlockEditProjectData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCBlockEditProjectData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_savetype() != 0) {
    _this->_internal_set_savetype(from._internal_savetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCBlockEditProjectData::CopyFrom(const UGCBlockEditProjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCBlockEditProjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCBlockEditProjectData::IsInitialized() const {
  return true;
}

void UGCBlockEditProjectData::InternalSwap(UGCBlockEditProjectData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.savetype_, other->_impl_.savetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCBlockEditProjectData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[95]);
}

// ===================================================================

class UGCHudTransformData::_Internal {
 public:
  static const ::message::ProtoBuffVector3& localposition(const UGCHudTransformData* msg);
  static const ::message::ProtoBuffVector3& localeulerangles(const UGCHudTransformData* msg);
  static const ::message::ProtoBuffVector3& localscale(const UGCHudTransformData* msg);
};

const ::message::ProtoBuffVector3&
UGCHudTransformData::_Internal::localposition(const UGCHudTransformData* msg) {
  return *msg->_impl_.localposition_;
}
const ::message::ProtoBuffVector3&
UGCHudTransformData::_Internal::localeulerangles(const UGCHudTransformData* msg) {
  return *msg->_impl_.localeulerangles_;
}
const ::message::ProtoBuffVector3&
UGCHudTransformData::_Internal::localscale(const UGCHudTransformData* msg) {
  return *msg->_impl_.localscale_;
}
void UGCHudTransformData::clear_localposition() {
  if (GetArenaForAllocation() == nullptr && _impl_.localposition_ != nullptr) {
    delete _impl_.localposition_;
  }
  _impl_.localposition_ = nullptr;
}
void UGCHudTransformData::clear_localeulerangles() {
  if (GetArenaForAllocation() == nullptr && _impl_.localeulerangles_ != nullptr) {
    delete _impl_.localeulerangles_;
  }
  _impl_.localeulerangles_ = nullptr;
}
void UGCHudTransformData::clear_localscale() {
  if (GetArenaForAllocation() == nullptr && _impl_.localscale_ != nullptr) {
    delete _impl_.localscale_;
  }
  _impl_.localscale_ = nullptr;
}
UGCHudTransformData::UGCHudTransformData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudTransformData)
}
UGCHudTransformData::UGCHudTransformData(const UGCHudTransformData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudTransformData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.localposition_){nullptr}
    , decltype(_impl_.localeulerangles_){nullptr}
    , decltype(_impl_.localscale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_localposition()) {
    _this->_impl_.localposition_ = new ::message::ProtoBuffVector3(*from._impl_.localposition_);
  }
  if (from._internal_has_localeulerangles()) {
    _this->_impl_.localeulerangles_ = new ::message::ProtoBuffVector3(*from._impl_.localeulerangles_);
  }
  if (from._internal_has_localscale()) {
    _this->_impl_.localscale_ = new ::message::ProtoBuffVector3(*from._impl_.localscale_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCHudTransformData)
}

inline void UGCHudTransformData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.localposition_){nullptr}
    , decltype(_impl_.localeulerangles_){nullptr}
    , decltype(_impl_.localscale_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudTransformData::~UGCHudTransformData() {
  // @@protoc_insertion_point(destructor:message.UGCHudTransformData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudTransformData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.localposition_;
  if (this != internal_default_instance()) delete _impl_.localeulerangles_;
  if (this != internal_default_instance()) delete _impl_.localscale_;
}

void UGCHudTransformData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudTransformData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudTransformData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.localposition_ != nullptr) {
    delete _impl_.localposition_;
  }
  _impl_.localposition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.localeulerangles_ != nullptr) {
    delete _impl_.localeulerangles_;
  }
  _impl_.localeulerangles_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.localscale_ != nullptr) {
    delete _impl_.localscale_;
  }
  _impl_.localscale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudTransformData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.ProtoBuffVector3 LocalPosition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_localposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 LocalEulerAngles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_localeulerangles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 LocalScale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_localscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudTransformData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudTransformData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.ProtoBuffVector3 LocalPosition = 1;
  if (this->_internal_has_localposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::localposition(this),
        _Internal::localposition(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 LocalEulerAngles = 2;
  if (this->_internal_has_localeulerangles()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::localeulerangles(this),
        _Internal::localeulerangles(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 LocalScale = 3;
  if (this->_internal_has_localscale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::localscale(this),
        _Internal::localscale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudTransformData)
  return target;
}

size_t UGCHudTransformData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudTransformData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.ProtoBuffVector3 LocalPosition = 1;
  if (this->_internal_has_localposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localposition_);
  }

  // .message.ProtoBuffVector3 LocalEulerAngles = 2;
  if (this->_internal_has_localeulerangles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localeulerangles_);
  }

  // .message.ProtoBuffVector3 LocalScale = 3;
  if (this->_internal_has_localscale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localscale_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudTransformData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudTransformData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudTransformData::GetClassData() const { return &_class_data_; }


void UGCHudTransformData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudTransformData*>(&to_msg);
  auto& from = static_cast<const UGCHudTransformData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudTransformData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_localposition()) {
    _this->_internal_mutable_localposition()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_localposition());
  }
  if (from._internal_has_localeulerangles()) {
    _this->_internal_mutable_localeulerangles()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_localeulerangles());
  }
  if (from._internal_has_localscale()) {
    _this->_internal_mutable_localscale()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_localscale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudTransformData::CopyFrom(const UGCHudTransformData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudTransformData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudTransformData::IsInitialized() const {
  return true;
}

void UGCHudTransformData::InternalSwap(UGCHudTransformData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudTransformData, _impl_.localscale_)
      + sizeof(UGCHudTransformData::_impl_.localscale_)
      - PROTOBUF_FIELD_OFFSET(UGCHudTransformData, _impl_.localposition_)>(
          reinterpret_cast<char*>(&_impl_.localposition_),
          reinterpret_cast<char*>(&other->_impl_.localposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudTransformData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[96]);
}

// ===================================================================

class UGCHudRectTransformData::_Internal {
 public:
  static const ::message::UGCHudTransformData& transform(const UGCHudRectTransformData* msg);
  static const ::message::ProtoBuffVector3& anchorposition(const UGCHudRectTransformData* msg);
};

const ::message::UGCHudTransformData&
UGCHudRectTransformData::_Internal::transform(const UGCHudRectTransformData* msg) {
  return *msg->_impl_.transform_;
}
const ::message::ProtoBuffVector3&
UGCHudRectTransformData::_Internal::anchorposition(const UGCHudRectTransformData* msg) {
  return *msg->_impl_.anchorposition_;
}
void UGCHudRectTransformData::clear_anchorposition() {
  if (GetArenaForAllocation() == nullptr && _impl_.anchorposition_ != nullptr) {
    delete _impl_.anchorposition_;
  }
  _impl_.anchorposition_ = nullptr;
}
UGCHudRectTransformData::UGCHudRectTransformData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudRectTransformData)
}
UGCHudRectTransformData::UGCHudRectTransformData(const UGCHudRectTransformData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudRectTransformData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.anchorposition_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    _this->_impl_.transform_ = new ::message::UGCHudTransformData(*from._impl_.transform_);
  }
  if (from._internal_has_anchorposition()) {
    _this->_impl_.anchorposition_ = new ::message::ProtoBuffVector3(*from._impl_.anchorposition_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCHudRectTransformData)
}

inline void UGCHudRectTransformData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.anchorposition_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudRectTransformData::~UGCHudRectTransformData() {
  // @@protoc_insertion_point(destructor:message.UGCHudRectTransformData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudRectTransformData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transform_;
  if (this != internal_default_instance()) delete _impl_.anchorposition_;
}

void UGCHudRectTransformData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudRectTransformData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudRectTransformData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.anchorposition_ != nullptr) {
    delete _impl_.anchorposition_;
  }
  _impl_.anchorposition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudRectTransformData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudTransformData Transform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 AnchorPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchorposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudRectTransformData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudRectTransformData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudTransformData Transform = 1;
  if (this->_internal_has_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 AnchorPosition = 2;
  if (this->_internal_has_anchorposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::anchorposition(this),
        _Internal::anchorposition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudRectTransformData)
  return target;
}

size_t UGCHudRectTransformData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudRectTransformData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCHudTransformData Transform = 1;
  if (this->_internal_has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  // .message.ProtoBuffVector3 AnchorPosition = 2;
  if (this->_internal_has_anchorposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anchorposition_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudRectTransformData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudRectTransformData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudRectTransformData::GetClassData() const { return &_class_data_; }


void UGCHudRectTransformData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudRectTransformData*>(&to_msg);
  auto& from = static_cast<const UGCHudRectTransformData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudRectTransformData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transform()) {
    _this->_internal_mutable_transform()->::message::UGCHudTransformData::MergeFrom(
        from._internal_transform());
  }
  if (from._internal_has_anchorposition()) {
    _this->_internal_mutable_anchorposition()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_anchorposition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudRectTransformData::CopyFrom(const UGCHudRectTransformData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudRectTransformData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudRectTransformData::IsInitialized() const {
  return true;
}

void UGCHudRectTransformData::InternalSwap(UGCHudRectTransformData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudRectTransformData, _impl_.anchorposition_)
      + sizeof(UGCHudRectTransformData::_impl_.anchorposition_)
      - PROTOBUF_FIELD_OFFSET(UGCHudRectTransformData, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudRectTransformData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[97]);
}

// ===================================================================

class UGCHudWidgetData::_Internal {
 public:
  static const ::message::ProtoBuffVector2& anchormin(const UGCHudWidgetData* msg);
  static const ::message::ProtoBuffVector2& anchormax(const UGCHudWidgetData* msg);
  static const ::message::ProtoBuffVector2& sizedelta(const UGCHudWidgetData* msg);
  static const ::message::ProtoBuffVector2& pivot(const UGCHudWidgetData* msg);
};

const ::message::ProtoBuffVector2&
UGCHudWidgetData::_Internal::anchormin(const UGCHudWidgetData* msg) {
  return *msg->_impl_.anchormin_;
}
const ::message::ProtoBuffVector2&
UGCHudWidgetData::_Internal::anchormax(const UGCHudWidgetData* msg) {
  return *msg->_impl_.anchormax_;
}
const ::message::ProtoBuffVector2&
UGCHudWidgetData::_Internal::sizedelta(const UGCHudWidgetData* msg) {
  return *msg->_impl_.sizedelta_;
}
const ::message::ProtoBuffVector2&
UGCHudWidgetData::_Internal::pivot(const UGCHudWidgetData* msg) {
  return *msg->_impl_.pivot_;
}
void UGCHudWidgetData::clear_anchormin() {
  if (GetArenaForAllocation() == nullptr && _impl_.anchormin_ != nullptr) {
    delete _impl_.anchormin_;
  }
  _impl_.anchormin_ = nullptr;
}
void UGCHudWidgetData::clear_anchormax() {
  if (GetArenaForAllocation() == nullptr && _impl_.anchormax_ != nullptr) {
    delete _impl_.anchormax_;
  }
  _impl_.anchormax_ = nullptr;
}
void UGCHudWidgetData::clear_sizedelta() {
  if (GetArenaForAllocation() == nullptr && _impl_.sizedelta_ != nullptr) {
    delete _impl_.sizedelta_;
  }
  _impl_.sizedelta_ = nullptr;
}
void UGCHudWidgetData::clear_pivot() {
  if (GetArenaForAllocation() == nullptr && _impl_.pivot_ != nullptr) {
    delete _impl_.pivot_;
  }
  _impl_.pivot_ = nullptr;
}
UGCHudWidgetData::UGCHudWidgetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudWidgetData)
}
UGCHudWidgetData::UGCHudWidgetData(const UGCHudWidgetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudWidgetData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.anchormin_){nullptr}
    , decltype(_impl_.anchormax_){nullptr}
    , decltype(_impl_.sizedelta_){nullptr}
    , decltype(_impl_.pivot_){nullptr}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.horizontalalignment_){}
    , decltype(_impl_.verticalalignment_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_anchormin()) {
    _this->_impl_.anchormin_ = new ::message::ProtoBuffVector2(*from._impl_.anchormin_);
  }
  if (from._internal_has_anchormax()) {
    _this->_impl_.anchormax_ = new ::message::ProtoBuffVector2(*from._impl_.anchormax_);
  }
  if (from._internal_has_sizedelta()) {
    _this->_impl_.sizedelta_ = new ::message::ProtoBuffVector2(*from._impl_.sizedelta_);
  }
  if (from._internal_has_pivot()) {
    _this->_impl_.pivot_ = new ::message::ProtoBuffVector2(*from._impl_.pivot_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudWidgetData)
}

inline void UGCHudWidgetData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.anchormin_){nullptr}
    , decltype(_impl_.anchormax_){nullptr}
    , decltype(_impl_.sizedelta_){nullptr}
    , decltype(_impl_.pivot_){nullptr}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.horizontalalignment_){0}
    , decltype(_impl_.verticalalignment_){0}
    , decltype(_impl_.color_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudWidgetData::~UGCHudWidgetData() {
  // @@protoc_insertion_point(destructor:message.UGCHudWidgetData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudWidgetData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.anchormin_;
  if (this != internal_default_instance()) delete _impl_.anchormax_;
  if (this != internal_default_instance()) delete _impl_.sizedelta_;
  if (this != internal_default_instance()) delete _impl_.pivot_;
}

void UGCHudWidgetData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudWidgetData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudWidgetData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.anchormin_ != nullptr) {
    delete _impl_.anchormin_;
  }
  _impl_.anchormin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.anchormax_ != nullptr) {
    delete _impl_.anchormax_;
  }
  _impl_.anchormax_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sizedelta_ != nullptr) {
    delete _impl_.sizedelta_;
  }
  _impl_.sizedelta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pivot_ != nullptr) {
    delete _impl_.pivot_;
  }
  _impl_.pivot_ = nullptr;
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.color_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudWidgetData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HorizontalAlignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.horizontalalignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 VerticalAlignment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.verticalalignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 AnchorMin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchormin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 AnchorMax = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchormax(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 SizeDelta = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sizedelta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 Pivot = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudWidgetData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudWidgetData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 Height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 Depth = 3;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth(), target);
  }

  // int32 HorizontalAlignment = 4;
  if (this->_internal_horizontalalignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_horizontalalignment(), target);
  }

  // int32 VerticalAlignment = 5;
  if (this->_internal_verticalalignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_verticalalignment(), target);
  }

  // int32 Color = 6;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_color(), target);
  }

  // .message.ProtoBuffVector2 AnchorMin = 7;
  if (this->_internal_has_anchormin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::anchormin(this),
        _Internal::anchormin(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 AnchorMax = 8;
  if (this->_internal_has_anchormax()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::anchormax(this),
        _Internal::anchormax(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 SizeDelta = 9;
  if (this->_internal_has_sizedelta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::sizedelta(this),
        _Internal::sizedelta(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 Pivot = 10;
  if (this->_internal_has_pivot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::pivot(this),
        _Internal::pivot(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudWidgetData)
  return target;
}

size_t UGCHudWidgetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudWidgetData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.ProtoBuffVector2 AnchorMin = 7;
  if (this->_internal_has_anchormin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anchormin_);
  }

  // .message.ProtoBuffVector2 AnchorMax = 8;
  if (this->_internal_has_anchormax()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anchormax_);
  }

  // .message.ProtoBuffVector2 SizeDelta = 9;
  if (this->_internal_has_sizedelta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sizedelta_);
  }

  // .message.ProtoBuffVector2 Pivot = 10;
  if (this->_internal_has_pivot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pivot_);
  }

  // int32 Width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 Height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 Depth = 3;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  // int32 HorizontalAlignment = 4;
  if (this->_internal_horizontalalignment() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_horizontalalignment());
  }

  // int32 VerticalAlignment = 5;
  if (this->_internal_verticalalignment() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_verticalalignment());
  }

  // int32 Color = 6;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudWidgetData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudWidgetData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudWidgetData::GetClassData() const { return &_class_data_; }


void UGCHudWidgetData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudWidgetData*>(&to_msg);
  auto& from = static_cast<const UGCHudWidgetData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudWidgetData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_anchormin()) {
    _this->_internal_mutable_anchormin()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_anchormin());
  }
  if (from._internal_has_anchormax()) {
    _this->_internal_mutable_anchormax()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_anchormax());
  }
  if (from._internal_has_sizedelta()) {
    _this->_internal_mutable_sizedelta()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_sizedelta());
  }
  if (from._internal_has_pivot()) {
    _this->_internal_mutable_pivot()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_pivot());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_horizontalalignment() != 0) {
    _this->_internal_set_horizontalalignment(from._internal_horizontalalignment());
  }
  if (from._internal_verticalalignment() != 0) {
    _this->_internal_set_verticalalignment(from._internal_verticalalignment());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudWidgetData::CopyFrom(const UGCHudWidgetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudWidgetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudWidgetData::IsInitialized() const {
  return true;
}

void UGCHudWidgetData::InternalSwap(UGCHudWidgetData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudWidgetData, _impl_.color_)
      + sizeof(UGCHudWidgetData::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(UGCHudWidgetData, _impl_.anchormin_)>(
          reinterpret_cast<char*>(&_impl_.anchormin_),
          reinterpret_cast<char*>(&other->_impl_.anchormin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudWidgetData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[98]);
}

// ===================================================================

class UGCHudLabelData::_Internal {
 public:
  static const ::message::UGCHudWidgetData& widget(const UGCHudLabelData* msg);
};

const ::message::UGCHudWidgetData&
UGCHudLabelData::_Internal::widget(const UGCHudLabelData* msg) {
  return *msg->_impl_.widget_;
}
UGCHudLabelData::UGCHudLabelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudLabelData)
}
UGCHudLabelData::UGCHudLabelData(const UGCHudLabelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudLabelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.font_){}
    , decltype(_impl_.lockey_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.fontsize_){}
    , decltype(_impl_.alignment_){}
    , decltype(_impl_.alignmentvertical_){}
    , decltype(_impl_.isbold_){}
    , decltype(_impl_.isitalic_){}
    , decltype(_impl_.isunderline_){}
    , decltype(_impl_.linespacing_){}
    , decltype(_impl_.overflow_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_font().empty()) {
    _this->_impl_.font_.Set(from._internal_font(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lockey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lockey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lockey().empty()) {
    _this->_impl_.lockey_.Set(from._internal_lockey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  ::memcpy(&_impl_.fontsize_, &from._impl_.fontsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.overflow_) -
    reinterpret_cast<char*>(&_impl_.fontsize_)) + sizeof(_impl_.overflow_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudLabelData)
}

inline void UGCHudLabelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.font_){}
    , decltype(_impl_.lockey_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.fontsize_){0}
    , decltype(_impl_.alignment_){0}
    , decltype(_impl_.alignmentvertical_){0}
    , decltype(_impl_.isbold_){false}
    , decltype(_impl_.isitalic_){false}
    , decltype(_impl_.isunderline_){false}
    , decltype(_impl_.linespacing_){0}
    , decltype(_impl_.overflow_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lockey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lockey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHudLabelData::~UGCHudLabelData() {
  // @@protoc_insertion_point(destructor:message.UGCHudLabelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudLabelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.font_.Destroy();
  _impl_.lockey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.widget_;
}

void UGCHudLabelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudLabelData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudLabelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.font_.ClearToEmpty();
  _impl_.lockey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  ::memset(&_impl_.fontsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.overflow_) -
      reinterpret_cast<char*>(&_impl_.fontsize_)) + sizeof(_impl_.overflow_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudLabelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudWidgetData Widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudLabelData.Text"));
        } else
          goto handle_unusual;
        continue;
      // int32 FontSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fontsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Alignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AlignmentVertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.alignmentvertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Font = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudLabelData.Font"));
        } else
          goto handle_unusual;
        continue;
      // bool IsBold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isbold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsItalic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.isitalic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsUnderline = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.isunderline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float LineSpacing = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.linespacing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 Overflow = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.overflow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LocKey = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_lockey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudLabelData.LocKey"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudLabelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudLabelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // string Text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudLabelData.Text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // int32 FontSize = 3;
  if (this->_internal_fontsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_fontsize(), target);
  }

  // int32 Alignment = 4;
  if (this->_internal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_alignment(), target);
  }

  // int32 AlignmentVertical = 5;
  if (this->_internal_alignmentvertical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_alignmentvertical(), target);
  }

  // string Font = 6;
  if (!this->_internal_font().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_font().data(), static_cast<int>(this->_internal_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudLabelData.Font");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_font(), target);
  }

  // bool IsBold = 7;
  if (this->_internal_isbold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isbold(), target);
  }

  // bool IsItalic = 8;
  if (this->_internal_isitalic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_isitalic(), target);
  }

  // bool IsUnderline = 9;
  if (this->_internal_isunderline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_isunderline(), target);
  }

  // float LineSpacing = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_linespacing = this->_internal_linespacing();
  uint32_t raw_linespacing;
  memcpy(&raw_linespacing, &tmp_linespacing, sizeof(tmp_linespacing));
  if (raw_linespacing != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_linespacing(), target);
  }

  // int32 Overflow = 11;
  if (this->_internal_overflow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_overflow(), target);
  }

  // string LocKey = 12;
  if (!this->_internal_lockey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lockey().data(), static_cast<int>(this->_internal_lockey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudLabelData.LocKey");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_lockey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudLabelData)
  return target;
}

size_t UGCHudLabelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudLabelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string Font = 6;
  if (!this->_internal_font().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font());
  }

  // string LocKey = 12;
  if (!this->_internal_lockey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lockey());
  }

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  // int32 FontSize = 3;
  if (this->_internal_fontsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fontsize());
  }

  // int32 Alignment = 4;
  if (this->_internal_alignment() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_alignment());
  }

  // int32 AlignmentVertical = 5;
  if (this->_internal_alignmentvertical() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_alignmentvertical());
  }

  // bool IsBold = 7;
  if (this->_internal_isbold() != 0) {
    total_size += 1 + 1;
  }

  // bool IsItalic = 8;
  if (this->_internal_isitalic() != 0) {
    total_size += 1 + 1;
  }

  // bool IsUnderline = 9;
  if (this->_internal_isunderline() != 0) {
    total_size += 1 + 1;
  }

  // float LineSpacing = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_linespacing = this->_internal_linespacing();
  uint32_t raw_linespacing;
  memcpy(&raw_linespacing, &tmp_linespacing, sizeof(tmp_linespacing));
  if (raw_linespacing != 0) {
    total_size += 1 + 4;
  }

  // int32 Overflow = 11;
  if (this->_internal_overflow() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_overflow());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudLabelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudLabelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudLabelData::GetClassData() const { return &_class_data_; }


void UGCHudLabelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudLabelData*>(&to_msg);
  auto& from = static_cast<const UGCHudLabelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudLabelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_font().empty()) {
    _this->_internal_set_font(from._internal_font());
  }
  if (!from._internal_lockey().empty()) {
    _this->_internal_set_lockey(from._internal_lockey());
  }
  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  if (from._internal_fontsize() != 0) {
    _this->_internal_set_fontsize(from._internal_fontsize());
  }
  if (from._internal_alignment() != 0) {
    _this->_internal_set_alignment(from._internal_alignment());
  }
  if (from._internal_alignmentvertical() != 0) {
    _this->_internal_set_alignmentvertical(from._internal_alignmentvertical());
  }
  if (from._internal_isbold() != 0) {
    _this->_internal_set_isbold(from._internal_isbold());
  }
  if (from._internal_isitalic() != 0) {
    _this->_internal_set_isitalic(from._internal_isitalic());
  }
  if (from._internal_isunderline() != 0) {
    _this->_internal_set_isunderline(from._internal_isunderline());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_linespacing = from._internal_linespacing();
  uint32_t raw_linespacing;
  memcpy(&raw_linespacing, &tmp_linespacing, sizeof(tmp_linespacing));
  if (raw_linespacing != 0) {
    _this->_internal_set_linespacing(from._internal_linespacing());
  }
  if (from._internal_overflow() != 0) {
    _this->_internal_set_overflow(from._internal_overflow());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudLabelData::CopyFrom(const UGCHudLabelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudLabelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudLabelData::IsInitialized() const {
  return true;
}

void UGCHudLabelData::InternalSwap(UGCHudLabelData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.font_, lhs_arena,
      &other->_impl_.font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lockey_, lhs_arena,
      &other->_impl_.lockey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudLabelData, _impl_.overflow_)
      + sizeof(UGCHudLabelData::_impl_.overflow_)
      - PROTOBUF_FIELD_OFFSET(UGCHudLabelData, _impl_.widget_)>(
          reinterpret_cast<char*>(&_impl_.widget_),
          reinterpret_cast<char*>(&other->_impl_.widget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudLabelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[99]);
}

// ===================================================================

class UGCHudImageData::_Internal {
 public:
  static const ::message::UGCHudWidgetData& widget(const UGCHudImageData* msg);
};

const ::message::UGCHudWidgetData&
UGCHudImageData::_Internal::widget(const UGCHudImageData* msg) {
  return *msg->_impl_.widget_;
}
UGCHudImageData::UGCHudImageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudImageData)
}
UGCHudImageData::UGCHudImageData(const UGCHudImageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudImageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spritename_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.spriteflip_){}
    , decltype(_impl_.spritetype_){}
    , decltype(_impl_.bordertop_){}
    , decltype(_impl_.borderbottom_){}
    , decltype(_impl_.borderleft_){}
    , decltype(_impl_.borderright_){}
    , decltype(_impl_.filldir_){}
    , decltype(_impl_.centerinvisible_){}
    , decltype(_impl_.invertfill_){}
    , decltype(_impl_.fillamount_){}
    , decltype(_impl_.gradient_){}
    , decltype(_impl_.gradienttop_){}
    , decltype(_impl_.gradientbottom_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spritename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spritename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spritename().empty()) {
    _this->_impl_.spritename_.Set(from._internal_spritename(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  ::memcpy(&_impl_.spriteflip_, &from._impl_.spriteflip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gradientbottom_) -
    reinterpret_cast<char*>(&_impl_.spriteflip_)) + sizeof(_impl_.gradientbottom_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudImageData)
}

inline void UGCHudImageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spritename_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.spriteflip_){0}
    , decltype(_impl_.spritetype_){0}
    , decltype(_impl_.bordertop_){0}
    , decltype(_impl_.borderbottom_){0}
    , decltype(_impl_.borderleft_){0}
    , decltype(_impl_.borderright_){0}
    , decltype(_impl_.filldir_){0}
    , decltype(_impl_.centerinvisible_){false}
    , decltype(_impl_.invertfill_){false}
    , decltype(_impl_.fillamount_){0}
    , decltype(_impl_.gradient_){0}
    , decltype(_impl_.gradienttop_){0}
    , decltype(_impl_.gradientbottom_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.spritename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spritename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHudImageData::~UGCHudImageData() {
  // @@protoc_insertion_point(destructor:message.UGCHudImageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudImageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spritename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.widget_;
}

void UGCHudImageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudImageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spritename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  ::memset(&_impl_.spriteflip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gradientbottom_) -
      reinterpret_cast<char*>(&_impl_.spriteflip_)) + sizeof(_impl_.gradientbottom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudImageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudWidgetData Widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SpriteName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_spritename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudImageData.SpriteName"));
        } else
          goto handle_unusual;
        continue;
      // int32 SpriteFlip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.spriteflip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SpriteType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.spritetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderTop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bordertop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderBottom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.borderbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderLeft = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.borderleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderRight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.borderright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool CenterInvisible = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.centerinvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FillDir = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.filldir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float FillAmount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.fillamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool InvertFill = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.invertfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Gradient = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.gradient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 GradientTop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.gradienttop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 GradientBottom = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.gradientbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudImageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudImageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // string SpriteName = 2;
  if (!this->_internal_spritename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spritename().data(), static_cast<int>(this->_internal_spritename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudImageData.SpriteName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_spritename(), target);
  }

  // int32 SpriteFlip = 3;
  if (this->_internal_spriteflip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_spriteflip(), target);
  }

  // int32 SpriteType = 4;
  if (this->_internal_spritetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_spritetype(), target);
  }

  // int32 BorderTop = 5;
  if (this->_internal_bordertop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_bordertop(), target);
  }

  // int32 BorderBottom = 6;
  if (this->_internal_borderbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_borderbottom(), target);
  }

  // int32 BorderLeft = 7;
  if (this->_internal_borderleft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_borderleft(), target);
  }

  // int32 BorderRight = 8;
  if (this->_internal_borderright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_borderright(), target);
  }

  // bool CenterInvisible = 9;
  if (this->_internal_centerinvisible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_centerinvisible(), target);
  }

  // int32 FillDir = 10;
  if (this->_internal_filldir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_filldir(), target);
  }

  // float FillAmount = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fillamount = this->_internal_fillamount();
  uint32_t raw_fillamount;
  memcpy(&raw_fillamount, &tmp_fillamount, sizeof(tmp_fillamount));
  if (raw_fillamount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_fillamount(), target);
  }

  // bool InvertFill = 12;
  if (this->_internal_invertfill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_invertfill(), target);
  }

  // int32 Gradient = 13;
  if (this->_internal_gradient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_gradient(), target);
  }

  // int32 GradientTop = 14;
  if (this->_internal_gradienttop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_gradienttop(), target);
  }

  // int32 GradientBottom = 15;
  if (this->_internal_gradientbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_gradientbottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudImageData)
  return target;
}

size_t UGCHudImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudImageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SpriteName = 2;
  if (!this->_internal_spritename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spritename());
  }

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  // int32 SpriteFlip = 3;
  if (this->_internal_spriteflip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spriteflip());
  }

  // int32 SpriteType = 4;
  if (this->_internal_spritetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spritetype());
  }

  // int32 BorderTop = 5;
  if (this->_internal_bordertop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bordertop());
  }

  // int32 BorderBottom = 6;
  if (this->_internal_borderbottom() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_borderbottom());
  }

  // int32 BorderLeft = 7;
  if (this->_internal_borderleft() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_borderleft());
  }

  // int32 BorderRight = 8;
  if (this->_internal_borderright() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_borderright());
  }

  // int32 FillDir = 10;
  if (this->_internal_filldir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filldir());
  }

  // bool CenterInvisible = 9;
  if (this->_internal_centerinvisible() != 0) {
    total_size += 1 + 1;
  }

  // bool InvertFill = 12;
  if (this->_internal_invertfill() != 0) {
    total_size += 1 + 1;
  }

  // float FillAmount = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fillamount = this->_internal_fillamount();
  uint32_t raw_fillamount;
  memcpy(&raw_fillamount, &tmp_fillamount, sizeof(tmp_fillamount));
  if (raw_fillamount != 0) {
    total_size += 1 + 4;
  }

  // int32 Gradient = 13;
  if (this->_internal_gradient() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gradient());
  }

  // int32 GradientTop = 14;
  if (this->_internal_gradienttop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gradienttop());
  }

  // int32 GradientBottom = 15;
  if (this->_internal_gradientbottom() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gradientbottom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudImageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudImageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudImageData::GetClassData() const { return &_class_data_; }


void UGCHudImageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudImageData*>(&to_msg);
  auto& from = static_cast<const UGCHudImageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudImageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spritename().empty()) {
    _this->_internal_set_spritename(from._internal_spritename());
  }
  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  if (from._internal_spriteflip() != 0) {
    _this->_internal_set_spriteflip(from._internal_spriteflip());
  }
  if (from._internal_spritetype() != 0) {
    _this->_internal_set_spritetype(from._internal_spritetype());
  }
  if (from._internal_bordertop() != 0) {
    _this->_internal_set_bordertop(from._internal_bordertop());
  }
  if (from._internal_borderbottom() != 0) {
    _this->_internal_set_borderbottom(from._internal_borderbottom());
  }
  if (from._internal_borderleft() != 0) {
    _this->_internal_set_borderleft(from._internal_borderleft());
  }
  if (from._internal_borderright() != 0) {
    _this->_internal_set_borderright(from._internal_borderright());
  }
  if (from._internal_filldir() != 0) {
    _this->_internal_set_filldir(from._internal_filldir());
  }
  if (from._internal_centerinvisible() != 0) {
    _this->_internal_set_centerinvisible(from._internal_centerinvisible());
  }
  if (from._internal_invertfill() != 0) {
    _this->_internal_set_invertfill(from._internal_invertfill());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fillamount = from._internal_fillamount();
  uint32_t raw_fillamount;
  memcpy(&raw_fillamount, &tmp_fillamount, sizeof(tmp_fillamount));
  if (raw_fillamount != 0) {
    _this->_internal_set_fillamount(from._internal_fillamount());
  }
  if (from._internal_gradient() != 0) {
    _this->_internal_set_gradient(from._internal_gradient());
  }
  if (from._internal_gradienttop() != 0) {
    _this->_internal_set_gradienttop(from._internal_gradienttop());
  }
  if (from._internal_gradientbottom() != 0) {
    _this->_internal_set_gradientbottom(from._internal_gradientbottom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudImageData::CopyFrom(const UGCHudImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudImageData::IsInitialized() const {
  return true;
}

void UGCHudImageData::InternalSwap(UGCHudImageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spritename_, lhs_arena,
      &other->_impl_.spritename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudImageData, _impl_.gradientbottom_)
      + sizeof(UGCHudImageData::_impl_.gradientbottom_)
      - PROTOBUF_FIELD_OFFSET(UGCHudImageData, _impl_.widget_)>(
          reinterpret_cast<char*>(&_impl_.widget_),
          reinterpret_cast<char*>(&other->_impl_.widget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudImageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[100]);
}

// ===================================================================

class UGCHudButtonData::_Internal {
 public:
  static const ::message::UGCHudWidgetData& widget(const UGCHudButtonData* msg);
};

const ::message::UGCHudWidgetData&
UGCHudButtonData::_Internal::widget(const UGCHudButtonData* msg) {
  return *msg->_impl_.widget_;
}
UGCHudButtonData::UGCHudButtonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudButtonData)
}
UGCHudButtonData::UGCHudButtonData(const UGCHudButtonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudButtonData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spritename_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.disablecolor_){}
    , decltype(_impl_.spritetype_){}
    , decltype(_impl_.normalcolor_){}
    , decltype(_impl_.pressedcolor_){}
    , decltype(_impl_.isfebutton_){}
    , decltype(_impl_.bordertop_){}
    , decltype(_impl_.borderbottom_){}
    , decltype(_impl_.borderleft_){}
    , decltype(_impl_.borderright_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spritename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spritename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spritename().empty()) {
    _this->_impl_.spritename_.Set(from._internal_spritename(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  ::memcpy(&_impl_.disablecolor_, &from._impl_.disablecolor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.borderright_) -
    reinterpret_cast<char*>(&_impl_.disablecolor_)) + sizeof(_impl_.borderright_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudButtonData)
}

inline void UGCHudButtonData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spritename_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.disablecolor_){0}
    , decltype(_impl_.spritetype_){0}
    , decltype(_impl_.normalcolor_){0}
    , decltype(_impl_.pressedcolor_){0}
    , decltype(_impl_.isfebutton_){false}
    , decltype(_impl_.bordertop_){0}
    , decltype(_impl_.borderbottom_){0}
    , decltype(_impl_.borderleft_){0}
    , decltype(_impl_.borderright_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.spritename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spritename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHudButtonData::~UGCHudButtonData() {
  // @@protoc_insertion_point(destructor:message.UGCHudButtonData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudButtonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spritename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.widget_;
}

void UGCHudButtonData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudButtonData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudButtonData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spritename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  ::memset(&_impl_.disablecolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.borderright_) -
      reinterpret_cast<char*>(&_impl_.disablecolor_)) + sizeof(_impl_.borderright_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudButtonData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudWidgetData Widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SpriteName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_spritename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudButtonData.SpriteName"));
        } else
          goto handle_unusual;
        continue;
      // int32 DisableColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.disablecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SpriteType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.spritetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NormalColor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.normalcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PressedColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.pressedcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsFEButton = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isfebutton_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderTop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.bordertop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderBottom = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.borderbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderLeft = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.borderleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderRight = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.borderright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudButtonData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudButtonData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // string SpriteName = 2;
  if (!this->_internal_spritename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spritename().data(), static_cast<int>(this->_internal_spritename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudButtonData.SpriteName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_spritename(), target);
  }

  // int32 DisableColor = 3;
  if (this->_internal_disablecolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_disablecolor(), target);
  }

  // int32 SpriteType = 4;
  if (this->_internal_spritetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_spritetype(), target);
  }

  // int32 NormalColor = 5;
  if (this->_internal_normalcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_normalcolor(), target);
  }

  // int32 PressedColor = 6;
  if (this->_internal_pressedcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_pressedcolor(), target);
  }

  // bool IsFEButton = 7;
  if (this->_internal_isfebutton() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isfebutton(), target);
  }

  // int32 BorderTop = 8;
  if (this->_internal_bordertop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_bordertop(), target);
  }

  // int32 BorderBottom = 9;
  if (this->_internal_borderbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_borderbottom(), target);
  }

  // int32 BorderLeft = 10;
  if (this->_internal_borderleft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_borderleft(), target);
  }

  // int32 BorderRight = 11;
  if (this->_internal_borderright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_borderright(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudButtonData)
  return target;
}

size_t UGCHudButtonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudButtonData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SpriteName = 2;
  if (!this->_internal_spritename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spritename());
  }

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  // int32 DisableColor = 3;
  if (this->_internal_disablecolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_disablecolor());
  }

  // int32 SpriteType = 4;
  if (this->_internal_spritetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spritetype());
  }

  // int32 NormalColor = 5;
  if (this->_internal_normalcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_normalcolor());
  }

  // int32 PressedColor = 6;
  if (this->_internal_pressedcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pressedcolor());
  }

  // bool IsFEButton = 7;
  if (this->_internal_isfebutton() != 0) {
    total_size += 1 + 1;
  }

  // int32 BorderTop = 8;
  if (this->_internal_bordertop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bordertop());
  }

  // int32 BorderBottom = 9;
  if (this->_internal_borderbottom() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_borderbottom());
  }

  // int32 BorderLeft = 10;
  if (this->_internal_borderleft() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_borderleft());
  }

  // int32 BorderRight = 11;
  if (this->_internal_borderright() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_borderright());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudButtonData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudButtonData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudButtonData::GetClassData() const { return &_class_data_; }


void UGCHudButtonData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudButtonData*>(&to_msg);
  auto& from = static_cast<const UGCHudButtonData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudButtonData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spritename().empty()) {
    _this->_internal_set_spritename(from._internal_spritename());
  }
  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  if (from._internal_disablecolor() != 0) {
    _this->_internal_set_disablecolor(from._internal_disablecolor());
  }
  if (from._internal_spritetype() != 0) {
    _this->_internal_set_spritetype(from._internal_spritetype());
  }
  if (from._internal_normalcolor() != 0) {
    _this->_internal_set_normalcolor(from._internal_normalcolor());
  }
  if (from._internal_pressedcolor() != 0) {
    _this->_internal_set_pressedcolor(from._internal_pressedcolor());
  }
  if (from._internal_isfebutton() != 0) {
    _this->_internal_set_isfebutton(from._internal_isfebutton());
  }
  if (from._internal_bordertop() != 0) {
    _this->_internal_set_bordertop(from._internal_bordertop());
  }
  if (from._internal_borderbottom() != 0) {
    _this->_internal_set_borderbottom(from._internal_borderbottom());
  }
  if (from._internal_borderleft() != 0) {
    _this->_internal_set_borderleft(from._internal_borderleft());
  }
  if (from._internal_borderright() != 0) {
    _this->_internal_set_borderright(from._internal_borderright());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudButtonData::CopyFrom(const UGCHudButtonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudButtonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudButtonData::IsInitialized() const {
  return true;
}

void UGCHudButtonData::InternalSwap(UGCHudButtonData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spritename_, lhs_arena,
      &other->_impl_.spritename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudButtonData, _impl_.borderright_)
      + sizeof(UGCHudButtonData::_impl_.borderright_)
      - PROTOBUF_FIELD_OFFSET(UGCHudButtonData, _impl_.widget_)>(
          reinterpret_cast<char*>(&_impl_.widget_),
          reinterpret_cast<char*>(&other->_impl_.widget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudButtonData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[101]);
}

// ===================================================================

class UGCHudInputData::_Internal {
 public:
  static const ::message::UGCHudWidgetData& widget(const UGCHudInputData* msg);
};

const ::message::UGCHudWidgetData&
UGCHudInputData::_Internal::widget(const UGCHudInputData* msg) {
  return *msg->_impl_.widget_;
}
UGCHudInputData::UGCHudInputData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudInputData)
}
UGCHudInputData::UGCHudInputData(const UGCHudInputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudInputData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.font_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.lockey_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.fontsize_){}
    , decltype(_impl_.isbold_){}
    , decltype(_impl_.isitalic_){}
    , decltype(_impl_.isunderline_){}
    , decltype(_impl_.alignment_){}
    , decltype(_impl_.alignmentvertical_){}
    , decltype(_impl_.linespacing_){}
    , decltype(_impl_.wordwrap_){}
    , decltype(_impl_.maxlength_){}
    , decltype(_impl_.transitiontype_){}
    , decltype(_impl_.normalcolor_){}
    , decltype(_impl_.pressedcolor_){}
    , decltype(_impl_.disablecolor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_font().empty()) {
    _this->_impl_.font_.Set(from._internal_font(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lockey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lockey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lockey().empty()) {
    _this->_impl_.lockey_.Set(from._internal_lockey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  ::memcpy(&_impl_.fontsize_, &from._impl_.fontsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.disablecolor_) -
    reinterpret_cast<char*>(&_impl_.fontsize_)) + sizeof(_impl_.disablecolor_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudInputData)
}

inline void UGCHudInputData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.font_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.lockey_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.fontsize_){0}
    , decltype(_impl_.isbold_){false}
    , decltype(_impl_.isitalic_){false}
    , decltype(_impl_.isunderline_){false}
    , decltype(_impl_.alignment_){0}
    , decltype(_impl_.alignmentvertical_){0}
    , decltype(_impl_.linespacing_){0}
    , decltype(_impl_.wordwrap_){0}
    , decltype(_impl_.maxlength_){0}
    , decltype(_impl_.transitiontype_){0}
    , decltype(_impl_.normalcolor_){0}
    , decltype(_impl_.pressedcolor_){0}
    , decltype(_impl_.disablecolor_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.font_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lockey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lockey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHudInputData::~UGCHudInputData() {
  // @@protoc_insertion_point(destructor:message.UGCHudInputData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudInputData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.font_.Destroy();
  _impl_.text_.Destroy();
  _impl_.lockey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.widget_;
}

void UGCHudInputData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudInputData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudInputData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.font_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _impl_.lockey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  ::memset(&_impl_.fontsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.disablecolor_) -
      reinterpret_cast<char*>(&_impl_.fontsize_)) + sizeof(_impl_.disablecolor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudInputData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudWidgetData Widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Font = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudInputData.Font"));
        } else
          goto handle_unusual;
        continue;
      // int32 FontSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fontsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsBold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isbold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsItalic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isitalic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsUnderline = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isunderline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Alignment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AlignmentVertical = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.alignmentvertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float LineSpacing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.linespacing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 WordWrap = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.wordwrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxLength = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.maxlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudInputData.text"));
        } else
          goto handle_unusual;
        continue;
      // int32 TransitionType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.transitiontype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 NormalColor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.normalcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PressedColor = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.pressedcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DisableColor = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.disablecolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LocKey = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_lockey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudInputData.LocKey"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudInputData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudInputData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // string Font = 2;
  if (!this->_internal_font().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_font().data(), static_cast<int>(this->_internal_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudInputData.Font");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_font(), target);
  }

  // int32 FontSize = 3;
  if (this->_internal_fontsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_fontsize(), target);
  }

  // bool IsBold = 4;
  if (this->_internal_isbold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isbold(), target);
  }

  // bool IsItalic = 5;
  if (this->_internal_isitalic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isitalic(), target);
  }

  // bool IsUnderline = 6;
  if (this->_internal_isunderline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isunderline(), target);
  }

  // int32 Alignment = 7;
  if (this->_internal_alignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_alignment(), target);
  }

  // int32 AlignmentVertical = 8;
  if (this->_internal_alignmentvertical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_alignmentvertical(), target);
  }

  // float LineSpacing = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_linespacing = this->_internal_linespacing();
  uint32_t raw_linespacing;
  memcpy(&raw_linespacing, &tmp_linespacing, sizeof(tmp_linespacing));
  if (raw_linespacing != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_linespacing(), target);
  }

  // int32 WordWrap = 10;
  if (this->_internal_wordwrap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_wordwrap(), target);
  }

  // int32 MaxLength = 11;
  if (this->_internal_maxlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_maxlength(), target);
  }

  // string text = 12;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudInputData.text");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_text(), target);
  }

  // int32 TransitionType = 13;
  if (this->_internal_transitiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_transitiontype(), target);
  }

  // int32 NormalColor = 14;
  if (this->_internal_normalcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_normalcolor(), target);
  }

  // int32 PressedColor = 15;
  if (this->_internal_pressedcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_pressedcolor(), target);
  }

  // int32 DisableColor = 16;
  if (this->_internal_disablecolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_disablecolor(), target);
  }

  // string LocKey = 17;
  if (!this->_internal_lockey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lockey().data(), static_cast<int>(this->_internal_lockey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudInputData.LocKey");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_lockey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudInputData)
  return target;
}

size_t UGCHudInputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudInputData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Font = 2;
  if (!this->_internal_font().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font());
  }

  // string text = 12;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string LocKey = 17;
  if (!this->_internal_lockey().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lockey());
  }

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  // int32 FontSize = 3;
  if (this->_internal_fontsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fontsize());
  }

  // bool IsBold = 4;
  if (this->_internal_isbold() != 0) {
    total_size += 1 + 1;
  }

  // bool IsItalic = 5;
  if (this->_internal_isitalic() != 0) {
    total_size += 1 + 1;
  }

  // bool IsUnderline = 6;
  if (this->_internal_isunderline() != 0) {
    total_size += 1 + 1;
  }

  // int32 Alignment = 7;
  if (this->_internal_alignment() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_alignment());
  }

  // int32 AlignmentVertical = 8;
  if (this->_internal_alignmentvertical() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_alignmentvertical());
  }

  // float LineSpacing = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_linespacing = this->_internal_linespacing();
  uint32_t raw_linespacing;
  memcpy(&raw_linespacing, &tmp_linespacing, sizeof(tmp_linespacing));
  if (raw_linespacing != 0) {
    total_size += 1 + 4;
  }

  // int32 WordWrap = 10;
  if (this->_internal_wordwrap() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wordwrap());
  }

  // int32 MaxLength = 11;
  if (this->_internal_maxlength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxlength());
  }

  // int32 TransitionType = 13;
  if (this->_internal_transitiontype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_transitiontype());
  }

  // int32 NormalColor = 14;
  if (this->_internal_normalcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_normalcolor());
  }

  // int32 PressedColor = 15;
  if (this->_internal_pressedcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pressedcolor());
  }

  // int32 DisableColor = 16;
  if (this->_internal_disablecolor() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_disablecolor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudInputData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudInputData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudInputData::GetClassData() const { return &_class_data_; }


void UGCHudInputData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudInputData*>(&to_msg);
  auto& from = static_cast<const UGCHudInputData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudInputData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_font().empty()) {
    _this->_internal_set_font(from._internal_font());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_lockey().empty()) {
    _this->_internal_set_lockey(from._internal_lockey());
  }
  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  if (from._internal_fontsize() != 0) {
    _this->_internal_set_fontsize(from._internal_fontsize());
  }
  if (from._internal_isbold() != 0) {
    _this->_internal_set_isbold(from._internal_isbold());
  }
  if (from._internal_isitalic() != 0) {
    _this->_internal_set_isitalic(from._internal_isitalic());
  }
  if (from._internal_isunderline() != 0) {
    _this->_internal_set_isunderline(from._internal_isunderline());
  }
  if (from._internal_alignment() != 0) {
    _this->_internal_set_alignment(from._internal_alignment());
  }
  if (from._internal_alignmentvertical() != 0) {
    _this->_internal_set_alignmentvertical(from._internal_alignmentvertical());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_linespacing = from._internal_linespacing();
  uint32_t raw_linespacing;
  memcpy(&raw_linespacing, &tmp_linespacing, sizeof(tmp_linespacing));
  if (raw_linespacing != 0) {
    _this->_internal_set_linespacing(from._internal_linespacing());
  }
  if (from._internal_wordwrap() != 0) {
    _this->_internal_set_wordwrap(from._internal_wordwrap());
  }
  if (from._internal_maxlength() != 0) {
    _this->_internal_set_maxlength(from._internal_maxlength());
  }
  if (from._internal_transitiontype() != 0) {
    _this->_internal_set_transitiontype(from._internal_transitiontype());
  }
  if (from._internal_normalcolor() != 0) {
    _this->_internal_set_normalcolor(from._internal_normalcolor());
  }
  if (from._internal_pressedcolor() != 0) {
    _this->_internal_set_pressedcolor(from._internal_pressedcolor());
  }
  if (from._internal_disablecolor() != 0) {
    _this->_internal_set_disablecolor(from._internal_disablecolor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudInputData::CopyFrom(const UGCHudInputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudInputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudInputData::IsInitialized() const {
  return true;
}

void UGCHudInputData::InternalSwap(UGCHudInputData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.font_, lhs_arena,
      &other->_impl_.font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lockey_, lhs_arena,
      &other->_impl_.lockey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudInputData, _impl_.disablecolor_)
      + sizeof(UGCHudInputData::_impl_.disablecolor_)
      - PROTOBUF_FIELD_OFFSET(UGCHudInputData, _impl_.widget_)>(
          reinterpret_cast<char*>(&_impl_.widget_),
          reinterpret_cast<char*>(&other->_impl_.widget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudInputData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[102]);
}

// ===================================================================

class UGCHudLayoutData::_Internal {
 public:
  static const ::message::UGCHudWidgetData& widget(const UGCHudLayoutData* msg);
};

const ::message::UGCHudWidgetData&
UGCHudLayoutData::_Internal::widget(const UGCHudLayoutData* msg) {
  return *msg->_impl_.widget_;
}
UGCHudLayoutData::UGCHudLayoutData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudLayoutData)
}
UGCHudLayoutData::UGCHudLayoutData(const UGCHudLayoutData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudLayoutData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.widget_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCHudLayoutData)
}

inline void UGCHudLayoutData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.widget_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudLayoutData::~UGCHudLayoutData() {
  // @@protoc_insertion_point(destructor:message.UGCHudLayoutData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudLayoutData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.widget_;
}

void UGCHudLayoutData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudLayoutData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudLayoutData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudLayoutData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudWidgetData Widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudLayoutData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudLayoutData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudLayoutData)
  return target;
}

size_t UGCHudLayoutData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudLayoutData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudLayoutData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudLayoutData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudLayoutData::GetClassData() const { return &_class_data_; }


void UGCHudLayoutData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudLayoutData*>(&to_msg);
  auto& from = static_cast<const UGCHudLayoutData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudLayoutData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudLayoutData::CopyFrom(const UGCHudLayoutData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudLayoutData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudLayoutData::IsInitialized() const {
  return true;
}

void UGCHudLayoutData::InternalSwap(UGCHudLayoutData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.widget_, other->_impl_.widget_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudLayoutData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[103]);
}

// ===================================================================

class UGCHudGridData::_Internal {
 public:
  static const ::message::UGCHudPanelData& panel(const UGCHudGridData* msg);
  static const ::message::ProtoBuffVector2& cellsize(const UGCHudGridData* msg);
  static const ::message::ProtoBuffVector2& space(const UGCHudGridData* msg);
  static const ::message::ProtoBuffVector2& offsetupdown(const UGCHudGridData* msg);
  static const ::message::ProtoBuffVector2& offsetleftright(const UGCHudGridData* msg);
};

const ::message::UGCHudPanelData&
UGCHudGridData::_Internal::panel(const UGCHudGridData* msg) {
  return *msg->_impl_.panel_;
}
const ::message::ProtoBuffVector2&
UGCHudGridData::_Internal::cellsize(const UGCHudGridData* msg) {
  return *msg->_impl_.cellsize_;
}
const ::message::ProtoBuffVector2&
UGCHudGridData::_Internal::space(const UGCHudGridData* msg) {
  return *msg->_impl_.space_;
}
const ::message::ProtoBuffVector2&
UGCHudGridData::_Internal::offsetupdown(const UGCHudGridData* msg) {
  return *msg->_impl_.offsetupdown_;
}
const ::message::ProtoBuffVector2&
UGCHudGridData::_Internal::offsetleftright(const UGCHudGridData* msg) {
  return *msg->_impl_.offsetleftright_;
}
void UGCHudGridData::clear_cellsize() {
  if (GetArenaForAllocation() == nullptr && _impl_.cellsize_ != nullptr) {
    delete _impl_.cellsize_;
  }
  _impl_.cellsize_ = nullptr;
}
void UGCHudGridData::clear_space() {
  if (GetArenaForAllocation() == nullptr && _impl_.space_ != nullptr) {
    delete _impl_.space_;
  }
  _impl_.space_ = nullptr;
}
void UGCHudGridData::clear_offsetupdown() {
  if (GetArenaForAllocation() == nullptr && _impl_.offsetupdown_ != nullptr) {
    delete _impl_.offsetupdown_;
  }
  _impl_.offsetupdown_ = nullptr;
}
void UGCHudGridData::clear_offsetleftright() {
  if (GetArenaForAllocation() == nullptr && _impl_.offsetleftright_ != nullptr) {
    delete _impl_.offsetleftright_;
  }
  _impl_.offsetleftright_ = nullptr;
}
UGCHudGridData::UGCHudGridData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudGridData)
}
UGCHudGridData::UGCHudGridData(const UGCHudGridData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudGridData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.panel_){nullptr}
    , decltype(_impl_.cellsize_){nullptr}
    , decltype(_impl_.space_){nullptr}
    , decltype(_impl_.offsetupdown_){nullptr}
    , decltype(_impl_.offsetleftright_){nullptr}
    , decltype(_impl_.layouttype_){}
    , decltype(_impl_.contentorigin_){}
    , decltype(_impl_.filldirection_){}
    , decltype(_impl_.constraint_){}
    , decltype(_impl_.constraintcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_panel()) {
    _this->_impl_.panel_ = new ::message::UGCHudPanelData(*from._impl_.panel_);
  }
  if (from._internal_has_cellsize()) {
    _this->_impl_.cellsize_ = new ::message::ProtoBuffVector2(*from._impl_.cellsize_);
  }
  if (from._internal_has_space()) {
    _this->_impl_.space_ = new ::message::ProtoBuffVector2(*from._impl_.space_);
  }
  if (from._internal_has_offsetupdown()) {
    _this->_impl_.offsetupdown_ = new ::message::ProtoBuffVector2(*from._impl_.offsetupdown_);
  }
  if (from._internal_has_offsetleftright()) {
    _this->_impl_.offsetleftright_ = new ::message::ProtoBuffVector2(*from._impl_.offsetleftright_);
  }
  ::memcpy(&_impl_.layouttype_, &from._impl_.layouttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.constraintcount_) -
    reinterpret_cast<char*>(&_impl_.layouttype_)) + sizeof(_impl_.constraintcount_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudGridData)
}

inline void UGCHudGridData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.panel_){nullptr}
    , decltype(_impl_.cellsize_){nullptr}
    , decltype(_impl_.space_){nullptr}
    , decltype(_impl_.offsetupdown_){nullptr}
    , decltype(_impl_.offsetleftright_){nullptr}
    , decltype(_impl_.layouttype_){0}
    , decltype(_impl_.contentorigin_){0}
    , decltype(_impl_.filldirection_){0}
    , decltype(_impl_.constraint_){0}
    , decltype(_impl_.constraintcount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudGridData::~UGCHudGridData() {
  // @@protoc_insertion_point(destructor:message.UGCHudGridData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudGridData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.panel_;
  if (this != internal_default_instance()) delete _impl_.cellsize_;
  if (this != internal_default_instance()) delete _impl_.space_;
  if (this != internal_default_instance()) delete _impl_.offsetupdown_;
  if (this != internal_default_instance()) delete _impl_.offsetleftright_;
}

void UGCHudGridData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudGridData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudGridData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.panel_ != nullptr) {
    delete _impl_.panel_;
  }
  _impl_.panel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cellsize_ != nullptr) {
    delete _impl_.cellsize_;
  }
  _impl_.cellsize_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.space_ != nullptr) {
    delete _impl_.space_;
  }
  _impl_.space_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offsetupdown_ != nullptr) {
    delete _impl_.offsetupdown_;
  }
  _impl_.offsetupdown_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offsetleftright_ != nullptr) {
    delete _impl_.offsetleftright_;
  }
  _impl_.offsetleftright_ = nullptr;
  ::memset(&_impl_.layouttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.constraintcount_) -
      reinterpret_cast<char*>(&_impl_.layouttype_)) + sizeof(_impl_.constraintcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudGridData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudPanelData Panel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_panel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LayoutType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.layouttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ContentOrigin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.contentorigin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FillDirection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.filldirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 CellSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 Space = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Constraint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 OffsetUpDown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_offsetupdown(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 OffsetLeftRight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_offsetleftright(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ConstraintCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.constraintcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudGridData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudGridData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudPanelData Panel = 1;
  if (this->_internal_has_panel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::panel(this),
        _Internal::panel(this).GetCachedSize(), target, stream);
  }

  // int32 LayoutType = 2;
  if (this->_internal_layouttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_layouttype(), target);
  }

  // int32 ContentOrigin = 3;
  if (this->_internal_contentorigin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_contentorigin(), target);
  }

  // int32 FillDirection = 4;
  if (this->_internal_filldirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_filldirection(), target);
  }

  // .message.ProtoBuffVector2 CellSize = 5;
  if (this->_internal_has_cellsize()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cellsize(this),
        _Internal::cellsize(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 Space = 6;
  if (this->_internal_has_space()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::space(this),
        _Internal::space(this).GetCachedSize(), target, stream);
  }

  // int32 Constraint = 7;
  if (this->_internal_constraint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_constraint(), target);
  }

  // .message.ProtoBuffVector2 OffsetUpDown = 8;
  if (this->_internal_has_offsetupdown()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::offsetupdown(this),
        _Internal::offsetupdown(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 OffsetLeftRight = 9;
  if (this->_internal_has_offsetleftright()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::offsetleftright(this),
        _Internal::offsetleftright(this).GetCachedSize(), target, stream);
  }

  // int32 ConstraintCount = 10;
  if (this->_internal_constraintcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_constraintcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudGridData)
  return target;
}

size_t UGCHudGridData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudGridData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCHudPanelData Panel = 1;
  if (this->_internal_has_panel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.panel_);
  }

  // .message.ProtoBuffVector2 CellSize = 5;
  if (this->_internal_has_cellsize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cellsize_);
  }

  // .message.ProtoBuffVector2 Space = 6;
  if (this->_internal_has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.space_);
  }

  // .message.ProtoBuffVector2 OffsetUpDown = 8;
  if (this->_internal_has_offsetupdown()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offsetupdown_);
  }

  // .message.ProtoBuffVector2 OffsetLeftRight = 9;
  if (this->_internal_has_offsetleftright()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offsetleftright_);
  }

  // int32 LayoutType = 2;
  if (this->_internal_layouttype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layouttype());
  }

  // int32 ContentOrigin = 3;
  if (this->_internal_contentorigin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_contentorigin());
  }

  // int32 FillDirection = 4;
  if (this->_internal_filldirection() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filldirection());
  }

  // int32 Constraint = 7;
  if (this->_internal_constraint() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_constraint());
  }

  // int32 ConstraintCount = 10;
  if (this->_internal_constraintcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_constraintcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudGridData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudGridData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudGridData::GetClassData() const { return &_class_data_; }


void UGCHudGridData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudGridData*>(&to_msg);
  auto& from = static_cast<const UGCHudGridData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudGridData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_panel()) {
    _this->_internal_mutable_panel()->::message::UGCHudPanelData::MergeFrom(
        from._internal_panel());
  }
  if (from._internal_has_cellsize()) {
    _this->_internal_mutable_cellsize()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_cellsize());
  }
  if (from._internal_has_space()) {
    _this->_internal_mutable_space()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_space());
  }
  if (from._internal_has_offsetupdown()) {
    _this->_internal_mutable_offsetupdown()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_offsetupdown());
  }
  if (from._internal_has_offsetleftright()) {
    _this->_internal_mutable_offsetleftright()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_offsetleftright());
  }
  if (from._internal_layouttype() != 0) {
    _this->_internal_set_layouttype(from._internal_layouttype());
  }
  if (from._internal_contentorigin() != 0) {
    _this->_internal_set_contentorigin(from._internal_contentorigin());
  }
  if (from._internal_filldirection() != 0) {
    _this->_internal_set_filldirection(from._internal_filldirection());
  }
  if (from._internal_constraint() != 0) {
    _this->_internal_set_constraint(from._internal_constraint());
  }
  if (from._internal_constraintcount() != 0) {
    _this->_internal_set_constraintcount(from._internal_constraintcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudGridData::CopyFrom(const UGCHudGridData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudGridData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudGridData::IsInitialized() const {
  return true;
}

void UGCHudGridData::InternalSwap(UGCHudGridData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudGridData, _impl_.constraintcount_)
      + sizeof(UGCHudGridData::_impl_.constraintcount_)
      - PROTOBUF_FIELD_OFFSET(UGCHudGridData, _impl_.panel_)>(
          reinterpret_cast<char*>(&_impl_.panel_),
          reinterpret_cast<char*>(&other->_impl_.panel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudGridData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[104]);
}

// ===================================================================

class UGCHudLayoutNewData::_Internal {
 public:
  static const ::message::UGCHudWidgetData& widget(const UGCHudLayoutNewData* msg);
  static const ::message::ProtoBuffVector2& cellsize(const UGCHudLayoutNewData* msg);
  static const ::message::ProtoBuffVector2& space(const UGCHudLayoutNewData* msg);
  static const ::message::ProtoBuffVector2& offsetupdown(const UGCHudLayoutNewData* msg);
  static const ::message::ProtoBuffVector2& offsetleftright(const UGCHudLayoutNewData* msg);
};

const ::message::UGCHudWidgetData&
UGCHudLayoutNewData::_Internal::widget(const UGCHudLayoutNewData* msg) {
  return *msg->_impl_.widget_;
}
const ::message::ProtoBuffVector2&
UGCHudLayoutNewData::_Internal::cellsize(const UGCHudLayoutNewData* msg) {
  return *msg->_impl_.cellsize_;
}
const ::message::ProtoBuffVector2&
UGCHudLayoutNewData::_Internal::space(const UGCHudLayoutNewData* msg) {
  return *msg->_impl_.space_;
}
const ::message::ProtoBuffVector2&
UGCHudLayoutNewData::_Internal::offsetupdown(const UGCHudLayoutNewData* msg) {
  return *msg->_impl_.offsetupdown_;
}
const ::message::ProtoBuffVector2&
UGCHudLayoutNewData::_Internal::offsetleftright(const UGCHudLayoutNewData* msg) {
  return *msg->_impl_.offsetleftright_;
}
void UGCHudLayoutNewData::clear_cellsize() {
  if (GetArenaForAllocation() == nullptr && _impl_.cellsize_ != nullptr) {
    delete _impl_.cellsize_;
  }
  _impl_.cellsize_ = nullptr;
}
void UGCHudLayoutNewData::clear_space() {
  if (GetArenaForAllocation() == nullptr && _impl_.space_ != nullptr) {
    delete _impl_.space_;
  }
  _impl_.space_ = nullptr;
}
void UGCHudLayoutNewData::clear_offsetupdown() {
  if (GetArenaForAllocation() == nullptr && _impl_.offsetupdown_ != nullptr) {
    delete _impl_.offsetupdown_;
  }
  _impl_.offsetupdown_ = nullptr;
}
void UGCHudLayoutNewData::clear_offsetleftright() {
  if (GetArenaForAllocation() == nullptr && _impl_.offsetleftright_ != nullptr) {
    delete _impl_.offsetleftright_;
  }
  _impl_.offsetleftright_ = nullptr;
}
UGCHudLayoutNewData::UGCHudLayoutNewData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudLayoutNewData)
}
UGCHudLayoutNewData::UGCHudLayoutNewData(const UGCHudLayoutNewData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudLayoutNewData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.cellsize_){nullptr}
    , decltype(_impl_.space_){nullptr}
    , decltype(_impl_.offsetupdown_){nullptr}
    , decltype(_impl_.offsetleftright_){nullptr}
    , decltype(_impl_.layouttype_){}
    , decltype(_impl_.contentorigin_){}
    , decltype(_impl_.filldirection_){}
    , decltype(_impl_.constraint_){}
    , decltype(_impl_.constraintcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  if (from._internal_has_cellsize()) {
    _this->_impl_.cellsize_ = new ::message::ProtoBuffVector2(*from._impl_.cellsize_);
  }
  if (from._internal_has_space()) {
    _this->_impl_.space_ = new ::message::ProtoBuffVector2(*from._impl_.space_);
  }
  if (from._internal_has_offsetupdown()) {
    _this->_impl_.offsetupdown_ = new ::message::ProtoBuffVector2(*from._impl_.offsetupdown_);
  }
  if (from._internal_has_offsetleftright()) {
    _this->_impl_.offsetleftright_ = new ::message::ProtoBuffVector2(*from._impl_.offsetleftright_);
  }
  ::memcpy(&_impl_.layouttype_, &from._impl_.layouttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.constraintcount_) -
    reinterpret_cast<char*>(&_impl_.layouttype_)) + sizeof(_impl_.constraintcount_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudLayoutNewData)
}

inline void UGCHudLayoutNewData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.cellsize_){nullptr}
    , decltype(_impl_.space_){nullptr}
    , decltype(_impl_.offsetupdown_){nullptr}
    , decltype(_impl_.offsetleftright_){nullptr}
    , decltype(_impl_.layouttype_){0}
    , decltype(_impl_.contentorigin_){0}
    , decltype(_impl_.filldirection_){0}
    , decltype(_impl_.constraint_){0}
    , decltype(_impl_.constraintcount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudLayoutNewData::~UGCHudLayoutNewData() {
  // @@protoc_insertion_point(destructor:message.UGCHudLayoutNewData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudLayoutNewData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.widget_;
  if (this != internal_default_instance()) delete _impl_.cellsize_;
  if (this != internal_default_instance()) delete _impl_.space_;
  if (this != internal_default_instance()) delete _impl_.offsetupdown_;
  if (this != internal_default_instance()) delete _impl_.offsetleftright_;
}

void UGCHudLayoutNewData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudLayoutNewData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudLayoutNewData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cellsize_ != nullptr) {
    delete _impl_.cellsize_;
  }
  _impl_.cellsize_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.space_ != nullptr) {
    delete _impl_.space_;
  }
  _impl_.space_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offsetupdown_ != nullptr) {
    delete _impl_.offsetupdown_;
  }
  _impl_.offsetupdown_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.offsetleftright_ != nullptr) {
    delete _impl_.offsetleftright_;
  }
  _impl_.offsetleftright_ = nullptr;
  ::memset(&_impl_.layouttype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.constraintcount_) -
      reinterpret_cast<char*>(&_impl_.layouttype_)) + sizeof(_impl_.constraintcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudLayoutNewData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudWidgetData Widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LayoutType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.layouttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ContentOrigin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.contentorigin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FillDirection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.filldirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 CellSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 Space = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Constraint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 OffsetUpDown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_offsetupdown(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 OffsetLeftRight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_offsetleftright(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ConstraintCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.constraintcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudLayoutNewData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudLayoutNewData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // int32 LayoutType = 2;
  if (this->_internal_layouttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_layouttype(), target);
  }

  // int32 ContentOrigin = 3;
  if (this->_internal_contentorigin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_contentorigin(), target);
  }

  // int32 FillDirection = 4;
  if (this->_internal_filldirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_filldirection(), target);
  }

  // .message.ProtoBuffVector2 CellSize = 5;
  if (this->_internal_has_cellsize()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cellsize(this),
        _Internal::cellsize(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 Space = 6;
  if (this->_internal_has_space()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::space(this),
        _Internal::space(this).GetCachedSize(), target, stream);
  }

  // int32 Constraint = 7;
  if (this->_internal_constraint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_constraint(), target);
  }

  // .message.ProtoBuffVector2 OffsetUpDown = 8;
  if (this->_internal_has_offsetupdown()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::offsetupdown(this),
        _Internal::offsetupdown(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 OffsetLeftRight = 9;
  if (this->_internal_has_offsetleftright()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::offsetleftright(this),
        _Internal::offsetleftright(this).GetCachedSize(), target, stream);
  }

  // int32 ConstraintCount = 10;
  if (this->_internal_constraintcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_constraintcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudLayoutNewData)
  return target;
}

size_t UGCHudLayoutNewData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudLayoutNewData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  // .message.ProtoBuffVector2 CellSize = 5;
  if (this->_internal_has_cellsize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cellsize_);
  }

  // .message.ProtoBuffVector2 Space = 6;
  if (this->_internal_has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.space_);
  }

  // .message.ProtoBuffVector2 OffsetUpDown = 8;
  if (this->_internal_has_offsetupdown()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offsetupdown_);
  }

  // .message.ProtoBuffVector2 OffsetLeftRight = 9;
  if (this->_internal_has_offsetleftright()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offsetleftright_);
  }

  // int32 LayoutType = 2;
  if (this->_internal_layouttype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_layouttype());
  }

  // int32 ContentOrigin = 3;
  if (this->_internal_contentorigin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_contentorigin());
  }

  // int32 FillDirection = 4;
  if (this->_internal_filldirection() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filldirection());
  }

  // int32 Constraint = 7;
  if (this->_internal_constraint() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_constraint());
  }

  // int32 ConstraintCount = 10;
  if (this->_internal_constraintcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_constraintcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudLayoutNewData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudLayoutNewData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudLayoutNewData::GetClassData() const { return &_class_data_; }


void UGCHudLayoutNewData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudLayoutNewData*>(&to_msg);
  auto& from = static_cast<const UGCHudLayoutNewData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudLayoutNewData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  if (from._internal_has_cellsize()) {
    _this->_internal_mutable_cellsize()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_cellsize());
  }
  if (from._internal_has_space()) {
    _this->_internal_mutable_space()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_space());
  }
  if (from._internal_has_offsetupdown()) {
    _this->_internal_mutable_offsetupdown()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_offsetupdown());
  }
  if (from._internal_has_offsetleftright()) {
    _this->_internal_mutable_offsetleftright()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_offsetleftright());
  }
  if (from._internal_layouttype() != 0) {
    _this->_internal_set_layouttype(from._internal_layouttype());
  }
  if (from._internal_contentorigin() != 0) {
    _this->_internal_set_contentorigin(from._internal_contentorigin());
  }
  if (from._internal_filldirection() != 0) {
    _this->_internal_set_filldirection(from._internal_filldirection());
  }
  if (from._internal_constraint() != 0) {
    _this->_internal_set_constraint(from._internal_constraint());
  }
  if (from._internal_constraintcount() != 0) {
    _this->_internal_set_constraintcount(from._internal_constraintcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudLayoutNewData::CopyFrom(const UGCHudLayoutNewData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudLayoutNewData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudLayoutNewData::IsInitialized() const {
  return true;
}

void UGCHudLayoutNewData::InternalSwap(UGCHudLayoutNewData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudLayoutNewData, _impl_.constraintcount_)
      + sizeof(UGCHudLayoutNewData::_impl_.constraintcount_)
      - PROTOBUF_FIELD_OFFSET(UGCHudLayoutNewData, _impl_.widget_)>(
          reinterpret_cast<char*>(&_impl_.widget_),
          reinterpret_cast<char*>(&other->_impl_.widget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudLayoutNewData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[105]);
}

// ===================================================================

class UGCHudPanelData::_Internal {
 public:
  static const ::message::ProtoBuffVector2& bgsizedelta(const UGCHudPanelData* msg);
  static const ::message::ProtoBuffVector2& softness(const UGCHudPanelData* msg);
  static const ::message::ProtoBuffVector2& anchormin(const UGCHudPanelData* msg);
  static const ::message::ProtoBuffVector2& anchormax(const UGCHudPanelData* msg);
  static const ::message::ProtoBuffVector2& sizedelta(const UGCHudPanelData* msg);
  static const ::message::ProtoBuffVector2& pivot(const UGCHudPanelData* msg);
};

const ::message::ProtoBuffVector2&
UGCHudPanelData::_Internal::bgsizedelta(const UGCHudPanelData* msg) {
  return *msg->_impl_.bgsizedelta_;
}
const ::message::ProtoBuffVector2&
UGCHudPanelData::_Internal::softness(const UGCHudPanelData* msg) {
  return *msg->_impl_.softness_;
}
const ::message::ProtoBuffVector2&
UGCHudPanelData::_Internal::anchormin(const UGCHudPanelData* msg) {
  return *msg->_impl_.anchormin_;
}
const ::message::ProtoBuffVector2&
UGCHudPanelData::_Internal::anchormax(const UGCHudPanelData* msg) {
  return *msg->_impl_.anchormax_;
}
const ::message::ProtoBuffVector2&
UGCHudPanelData::_Internal::sizedelta(const UGCHudPanelData* msg) {
  return *msg->_impl_.sizedelta_;
}
const ::message::ProtoBuffVector2&
UGCHudPanelData::_Internal::pivot(const UGCHudPanelData* msg) {
  return *msg->_impl_.pivot_;
}
void UGCHudPanelData::clear_bgsizedelta() {
  if (GetArenaForAllocation() == nullptr && _impl_.bgsizedelta_ != nullptr) {
    delete _impl_.bgsizedelta_;
  }
  _impl_.bgsizedelta_ = nullptr;
}
void UGCHudPanelData::clear_softness() {
  if (GetArenaForAllocation() == nullptr && _impl_.softness_ != nullptr) {
    delete _impl_.softness_;
  }
  _impl_.softness_ = nullptr;
}
void UGCHudPanelData::clear_anchormin() {
  if (GetArenaForAllocation() == nullptr && _impl_.anchormin_ != nullptr) {
    delete _impl_.anchormin_;
  }
  _impl_.anchormin_ = nullptr;
}
void UGCHudPanelData::clear_anchormax() {
  if (GetArenaForAllocation() == nullptr && _impl_.anchormax_ != nullptr) {
    delete _impl_.anchormax_;
  }
  _impl_.anchormax_ = nullptr;
}
void UGCHudPanelData::clear_sizedelta() {
  if (GetArenaForAllocation() == nullptr && _impl_.sizedelta_ != nullptr) {
    delete _impl_.sizedelta_;
  }
  _impl_.sizedelta_ = nullptr;
}
void UGCHudPanelData::clear_pivot() {
  if (GetArenaForAllocation() == nullptr && _impl_.pivot_ != nullptr) {
    delete _impl_.pivot_;
  }
  _impl_.pivot_ = nullptr;
}
UGCHudPanelData::UGCHudPanelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudPanelData)
}
UGCHudPanelData::UGCHudPanelData(const UGCHudPanelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudPanelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bgname_){}
    , decltype(_impl_.maskname_){}
    , decltype(_impl_.bgsizedelta_){nullptr}
    , decltype(_impl_.softness_){nullptr}
    , decltype(_impl_.anchormin_){nullptr}
    , decltype(_impl_.anchormax_){nullptr}
    , decltype(_impl_.sizedelta_){nullptr}
    , decltype(_impl_.pivot_){nullptr}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.bgfill_){}
    , decltype(_impl_.bgcolor_){}
    , decltype(_impl_.clippingtype_){}
    , decltype(_impl_.bgalpha_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bgname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bgname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bgname().empty()) {
    _this->_impl_.bgname_.Set(from._internal_bgname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.maskname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maskname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maskname().empty()) {
    _this->_impl_.maskname_.Set(from._internal_maskname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_bgsizedelta()) {
    _this->_impl_.bgsizedelta_ = new ::message::ProtoBuffVector2(*from._impl_.bgsizedelta_);
  }
  if (from._internal_has_softness()) {
    _this->_impl_.softness_ = new ::message::ProtoBuffVector2(*from._impl_.softness_);
  }
  if (from._internal_has_anchormin()) {
    _this->_impl_.anchormin_ = new ::message::ProtoBuffVector2(*from._impl_.anchormin_);
  }
  if (from._internal_has_anchormax()) {
    _this->_impl_.anchormax_ = new ::message::ProtoBuffVector2(*from._impl_.anchormax_);
  }
  if (from._internal_has_sizedelta()) {
    _this->_impl_.sizedelta_ = new ::message::ProtoBuffVector2(*from._impl_.sizedelta_);
  }
  if (from._internal_has_pivot()) {
    _this->_impl_.pivot_ = new ::message::ProtoBuffVector2(*from._impl_.pivot_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bgalpha_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.bgalpha_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudPanelData)
}

inline void UGCHudPanelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bgname_){}
    , decltype(_impl_.maskname_){}
    , decltype(_impl_.bgsizedelta_){nullptr}
    , decltype(_impl_.softness_){nullptr}
    , decltype(_impl_.anchormin_){nullptr}
    , decltype(_impl_.anchormax_){nullptr}
    , decltype(_impl_.sizedelta_){nullptr}
    , decltype(_impl_.pivot_){nullptr}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.bgfill_){false}
    , decltype(_impl_.bgcolor_){0}
    , decltype(_impl_.clippingtype_){0}
    , decltype(_impl_.bgalpha_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bgname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bgname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maskname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maskname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHudPanelData::~UGCHudPanelData() {
  // @@protoc_insertion_point(destructor:message.UGCHudPanelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudPanelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bgname_.Destroy();
  _impl_.maskname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.bgsizedelta_;
  if (this != internal_default_instance()) delete _impl_.softness_;
  if (this != internal_default_instance()) delete _impl_.anchormin_;
  if (this != internal_default_instance()) delete _impl_.anchormax_;
  if (this != internal_default_instance()) delete _impl_.sizedelta_;
  if (this != internal_default_instance()) delete _impl_.pivot_;
}

void UGCHudPanelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudPanelData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudPanelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bgname_.ClearToEmpty();
  _impl_.maskname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.bgsizedelta_ != nullptr) {
    delete _impl_.bgsizedelta_;
  }
  _impl_.bgsizedelta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.softness_ != nullptr) {
    delete _impl_.softness_;
  }
  _impl_.softness_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.anchormin_ != nullptr) {
    delete _impl_.anchormin_;
  }
  _impl_.anchormin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.anchormax_ != nullptr) {
    delete _impl_.anchormax_;
  }
  _impl_.anchormax_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sizedelta_ != nullptr) {
    delete _impl_.sizedelta_;
  }
  _impl_.sizedelta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pivot_ != nullptr) {
    delete _impl_.pivot_;
  }
  _impl_.pivot_ = nullptr;
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bgalpha_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.bgalpha_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudPanelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool BgFill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bgfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BgName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bgname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudPanelData.BgName"));
        } else
          goto handle_unusual;
        continue;
      // int32 BgColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bgcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 BgSizeDelta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bgsizedelta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ClippingType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.clippingtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MaskName = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_maskname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudPanelData.MaskName"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 Softness = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_softness(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 AnchorMin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchormin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 AnchorMax = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchormax(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 SizeDelta = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sizedelta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 Pivot = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float BgAlpha = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.bgalpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudPanelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudPanelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 Height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 Depth = 3;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_depth(), target);
  }

  // bool BgFill = 4;
  if (this->_internal_bgfill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_bgfill(), target);
  }

  // string BgName = 5;
  if (!this->_internal_bgname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgname().data(), static_cast<int>(this->_internal_bgname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudPanelData.BgName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bgname(), target);
  }

  // int32 BgColor = 6;
  if (this->_internal_bgcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_bgcolor(), target);
  }

  // .message.ProtoBuffVector2 BgSizeDelta = 7;
  if (this->_internal_has_bgsizedelta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::bgsizedelta(this),
        _Internal::bgsizedelta(this).GetCachedSize(), target, stream);
  }

  // int32 ClippingType = 8;
  if (this->_internal_clippingtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_clippingtype(), target);
  }

  // string MaskName = 9;
  if (!this->_internal_maskname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maskname().data(), static_cast<int>(this->_internal_maskname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudPanelData.MaskName");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_maskname(), target);
  }

  // .message.ProtoBuffVector2 Softness = 10;
  if (this->_internal_has_softness()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::softness(this),
        _Internal::softness(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 AnchorMin = 11;
  if (this->_internal_has_anchormin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::anchormin(this),
        _Internal::anchormin(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 AnchorMax = 12;
  if (this->_internal_has_anchormax()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::anchormax(this),
        _Internal::anchormax(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 SizeDelta = 13;
  if (this->_internal_has_sizedelta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::sizedelta(this),
        _Internal::sizedelta(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 Pivot = 14;
  if (this->_internal_has_pivot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::pivot(this),
        _Internal::pivot(this).GetCachedSize(), target, stream);
  }

  // float BgAlpha = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bgalpha = this->_internal_bgalpha();
  uint32_t raw_bgalpha;
  memcpy(&raw_bgalpha, &tmp_bgalpha, sizeof(tmp_bgalpha));
  if (raw_bgalpha != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_bgalpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudPanelData)
  return target;
}

size_t UGCHudPanelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudPanelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BgName = 5;
  if (!this->_internal_bgname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgname());
  }

  // string MaskName = 9;
  if (!this->_internal_maskname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maskname());
  }

  // .message.ProtoBuffVector2 BgSizeDelta = 7;
  if (this->_internal_has_bgsizedelta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bgsizedelta_);
  }

  // .message.ProtoBuffVector2 Softness = 10;
  if (this->_internal_has_softness()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.softness_);
  }

  // .message.ProtoBuffVector2 AnchorMin = 11;
  if (this->_internal_has_anchormin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anchormin_);
  }

  // .message.ProtoBuffVector2 AnchorMax = 12;
  if (this->_internal_has_anchormax()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anchormax_);
  }

  // .message.ProtoBuffVector2 SizeDelta = 13;
  if (this->_internal_has_sizedelta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sizedelta_);
  }

  // .message.ProtoBuffVector2 Pivot = 14;
  if (this->_internal_has_pivot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pivot_);
  }

  // int32 Width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 Height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 Depth = 3;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  // bool BgFill = 4;
  if (this->_internal_bgfill() != 0) {
    total_size += 1 + 1;
  }

  // int32 BgColor = 6;
  if (this->_internal_bgcolor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bgcolor());
  }

  // int32 ClippingType = 8;
  if (this->_internal_clippingtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clippingtype());
  }

  // float BgAlpha = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bgalpha = this->_internal_bgalpha();
  uint32_t raw_bgalpha;
  memcpy(&raw_bgalpha, &tmp_bgalpha, sizeof(tmp_bgalpha));
  if (raw_bgalpha != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudPanelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudPanelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudPanelData::GetClassData() const { return &_class_data_; }


void UGCHudPanelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudPanelData*>(&to_msg);
  auto& from = static_cast<const UGCHudPanelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudPanelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bgname().empty()) {
    _this->_internal_set_bgname(from._internal_bgname());
  }
  if (!from._internal_maskname().empty()) {
    _this->_internal_set_maskname(from._internal_maskname());
  }
  if (from._internal_has_bgsizedelta()) {
    _this->_internal_mutable_bgsizedelta()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_bgsizedelta());
  }
  if (from._internal_has_softness()) {
    _this->_internal_mutable_softness()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_softness());
  }
  if (from._internal_has_anchormin()) {
    _this->_internal_mutable_anchormin()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_anchormin());
  }
  if (from._internal_has_anchormax()) {
    _this->_internal_mutable_anchormax()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_anchormax());
  }
  if (from._internal_has_sizedelta()) {
    _this->_internal_mutable_sizedelta()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_sizedelta());
  }
  if (from._internal_has_pivot()) {
    _this->_internal_mutable_pivot()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_pivot());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_bgfill() != 0) {
    _this->_internal_set_bgfill(from._internal_bgfill());
  }
  if (from._internal_bgcolor() != 0) {
    _this->_internal_set_bgcolor(from._internal_bgcolor());
  }
  if (from._internal_clippingtype() != 0) {
    _this->_internal_set_clippingtype(from._internal_clippingtype());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bgalpha = from._internal_bgalpha();
  uint32_t raw_bgalpha;
  memcpy(&raw_bgalpha, &tmp_bgalpha, sizeof(tmp_bgalpha));
  if (raw_bgalpha != 0) {
    _this->_internal_set_bgalpha(from._internal_bgalpha());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudPanelData::CopyFrom(const UGCHudPanelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudPanelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudPanelData::IsInitialized() const {
  return true;
}

void UGCHudPanelData::InternalSwap(UGCHudPanelData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bgname_, lhs_arena,
      &other->_impl_.bgname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.maskname_, lhs_arena,
      &other->_impl_.maskname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudPanelData, _impl_.bgalpha_)
      + sizeof(UGCHudPanelData::_impl_.bgalpha_)
      - PROTOBUF_FIELD_OFFSET(UGCHudPanelData, _impl_.bgsizedelta_)>(
          reinterpret_cast<char*>(&_impl_.bgsizedelta_),
          reinterpret_cast<char*>(&other->_impl_.bgsizedelta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudPanelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[106]);
}

// ===================================================================

class UGCHudScrollViewData::_Internal {
 public:
  static const ::message::UGCHudPanelData& panel(const UGCHudScrollViewData* msg);
  static const ::message::ProtoBuffVector2& customxy(const UGCHudScrollViewData* msg);
};

const ::message::UGCHudPanelData&
UGCHudScrollViewData::_Internal::panel(const UGCHudScrollViewData* msg) {
  return *msg->_impl_.panel_;
}
const ::message::ProtoBuffVector2&
UGCHudScrollViewData::_Internal::customxy(const UGCHudScrollViewData* msg) {
  return *msg->_impl_.customxy_;
}
void UGCHudScrollViewData::clear_customxy() {
  if (GetArenaForAllocation() == nullptr && _impl_.customxy_ != nullptr) {
    delete _impl_.customxy_;
  }
  _impl_.customxy_ = nullptr;
}
UGCHudScrollViewData::UGCHudScrollViewData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudScrollViewData)
}
UGCHudScrollViewData::UGCHudScrollViewData(const UGCHudScrollViewData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudScrollViewData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.panel_){nullptr}
    , decltype(_impl_.customxy_){nullptr}
    , decltype(_impl_.contentorigin_){}
    , decltype(_impl_.scrolldirection_){}
    , decltype(_impl_.drageffect_){}
    , decltype(_impl_.scrollwheelfactor_){}
    , decltype(_impl_.momentumamount_){}
    , decltype(_impl_.restrictwithinpanel_){}
    , decltype(_impl_.smoothdragstart_){}
    , decltype(_impl_.canceldragiffits_){}
    , decltype(_impl_.verticalbar_){}
    , decltype(_impl_.horizontalbar_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_panel()) {
    _this->_impl_.panel_ = new ::message::UGCHudPanelData(*from._impl_.panel_);
  }
  if (from._internal_has_customxy()) {
    _this->_impl_.customxy_ = new ::message::ProtoBuffVector2(*from._impl_.customxy_);
  }
  ::memcpy(&_impl_.contentorigin_, &from._impl_.contentorigin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.horizontalbar_) -
    reinterpret_cast<char*>(&_impl_.contentorigin_)) + sizeof(_impl_.horizontalbar_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudScrollViewData)
}

inline void UGCHudScrollViewData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.panel_){nullptr}
    , decltype(_impl_.customxy_){nullptr}
    , decltype(_impl_.contentorigin_){0}
    , decltype(_impl_.scrolldirection_){0}
    , decltype(_impl_.drageffect_){0}
    , decltype(_impl_.scrollwheelfactor_){0}
    , decltype(_impl_.momentumamount_){0}
    , decltype(_impl_.restrictwithinpanel_){false}
    , decltype(_impl_.smoothdragstart_){false}
    , decltype(_impl_.canceldragiffits_){false}
    , decltype(_impl_.verticalbar_){0}
    , decltype(_impl_.horizontalbar_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudScrollViewData::~UGCHudScrollViewData() {
  // @@protoc_insertion_point(destructor:message.UGCHudScrollViewData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudScrollViewData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.panel_;
  if (this != internal_default_instance()) delete _impl_.customxy_;
}

void UGCHudScrollViewData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudScrollViewData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudScrollViewData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.panel_ != nullptr) {
    delete _impl_.panel_;
  }
  _impl_.panel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.customxy_ != nullptr) {
    delete _impl_.customxy_;
  }
  _impl_.customxy_ = nullptr;
  ::memset(&_impl_.contentorigin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.horizontalbar_) -
      reinterpret_cast<char*>(&_impl_.contentorigin_)) + sizeof(_impl_.horizontalbar_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudScrollViewData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudPanelData Panel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_panel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ContentOrigin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.contentorigin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ScrollDirection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.scrolldirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 CustomXY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_customxy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DragEffect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.drageffect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ScrollWheelFactor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.scrollwheelfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float MomentumAmount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.momentumamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool RestrictWithinPanel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.restrictwithinpanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool SmoothDragStart = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.smoothdragstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool CancelDragIfFits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.canceldragiffits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 VerticalBar = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.verticalbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HorizontalBar = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.horizontalbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudScrollViewData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudScrollViewData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudPanelData Panel = 1;
  if (this->_internal_has_panel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::panel(this),
        _Internal::panel(this).GetCachedSize(), target, stream);
  }

  // int32 ContentOrigin = 2;
  if (this->_internal_contentorigin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_contentorigin(), target);
  }

  // int32 ScrollDirection = 3;
  if (this->_internal_scrolldirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_scrolldirection(), target);
  }

  // .message.ProtoBuffVector2 CustomXY = 4;
  if (this->_internal_has_customxy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::customxy(this),
        _Internal::customxy(this).GetCachedSize(), target, stream);
  }

  // int32 DragEffect = 5;
  if (this->_internal_drageffect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_drageffect(), target);
  }

  // float ScrollWheelFactor = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scrollwheelfactor = this->_internal_scrollwheelfactor();
  uint32_t raw_scrollwheelfactor;
  memcpy(&raw_scrollwheelfactor, &tmp_scrollwheelfactor, sizeof(tmp_scrollwheelfactor));
  if (raw_scrollwheelfactor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_scrollwheelfactor(), target);
  }

  // float MomentumAmount = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_momentumamount = this->_internal_momentumamount();
  uint32_t raw_momentumamount;
  memcpy(&raw_momentumamount, &tmp_momentumamount, sizeof(tmp_momentumamount));
  if (raw_momentumamount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_momentumamount(), target);
  }

  // bool RestrictWithinPanel = 8;
  if (this->_internal_restrictwithinpanel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_restrictwithinpanel(), target);
  }

  // bool SmoothDragStart = 9;
  if (this->_internal_smoothdragstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_smoothdragstart(), target);
  }

  // bool CancelDragIfFits = 10;
  if (this->_internal_canceldragiffits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_canceldragiffits(), target);
  }

  // int32 VerticalBar = 11;
  if (this->_internal_verticalbar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_verticalbar(), target);
  }

  // int32 HorizontalBar = 12;
  if (this->_internal_horizontalbar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_horizontalbar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudScrollViewData)
  return target;
}

size_t UGCHudScrollViewData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudScrollViewData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCHudPanelData Panel = 1;
  if (this->_internal_has_panel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.panel_);
  }

  // .message.ProtoBuffVector2 CustomXY = 4;
  if (this->_internal_has_customxy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.customxy_);
  }

  // int32 ContentOrigin = 2;
  if (this->_internal_contentorigin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_contentorigin());
  }

  // int32 ScrollDirection = 3;
  if (this->_internal_scrolldirection() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scrolldirection());
  }

  // int32 DragEffect = 5;
  if (this->_internal_drageffect() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_drageffect());
  }

  // float ScrollWheelFactor = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scrollwheelfactor = this->_internal_scrollwheelfactor();
  uint32_t raw_scrollwheelfactor;
  memcpy(&raw_scrollwheelfactor, &tmp_scrollwheelfactor, sizeof(tmp_scrollwheelfactor));
  if (raw_scrollwheelfactor != 0) {
    total_size += 1 + 4;
  }

  // float MomentumAmount = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_momentumamount = this->_internal_momentumamount();
  uint32_t raw_momentumamount;
  memcpy(&raw_momentumamount, &tmp_momentumamount, sizeof(tmp_momentumamount));
  if (raw_momentumamount != 0) {
    total_size += 1 + 4;
  }

  // bool RestrictWithinPanel = 8;
  if (this->_internal_restrictwithinpanel() != 0) {
    total_size += 1 + 1;
  }

  // bool SmoothDragStart = 9;
  if (this->_internal_smoothdragstart() != 0) {
    total_size += 1 + 1;
  }

  // bool CancelDragIfFits = 10;
  if (this->_internal_canceldragiffits() != 0) {
    total_size += 1 + 1;
  }

  // int32 VerticalBar = 11;
  if (this->_internal_verticalbar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_verticalbar());
  }

  // int32 HorizontalBar = 12;
  if (this->_internal_horizontalbar() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_horizontalbar());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudScrollViewData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudScrollViewData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudScrollViewData::GetClassData() const { return &_class_data_; }


void UGCHudScrollViewData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudScrollViewData*>(&to_msg);
  auto& from = static_cast<const UGCHudScrollViewData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudScrollViewData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_panel()) {
    _this->_internal_mutable_panel()->::message::UGCHudPanelData::MergeFrom(
        from._internal_panel());
  }
  if (from._internal_has_customxy()) {
    _this->_internal_mutable_customxy()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_customxy());
  }
  if (from._internal_contentorigin() != 0) {
    _this->_internal_set_contentorigin(from._internal_contentorigin());
  }
  if (from._internal_scrolldirection() != 0) {
    _this->_internal_set_scrolldirection(from._internal_scrolldirection());
  }
  if (from._internal_drageffect() != 0) {
    _this->_internal_set_drageffect(from._internal_drageffect());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scrollwheelfactor = from._internal_scrollwheelfactor();
  uint32_t raw_scrollwheelfactor;
  memcpy(&raw_scrollwheelfactor, &tmp_scrollwheelfactor, sizeof(tmp_scrollwheelfactor));
  if (raw_scrollwheelfactor != 0) {
    _this->_internal_set_scrollwheelfactor(from._internal_scrollwheelfactor());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_momentumamount = from._internal_momentumamount();
  uint32_t raw_momentumamount;
  memcpy(&raw_momentumamount, &tmp_momentumamount, sizeof(tmp_momentumamount));
  if (raw_momentumamount != 0) {
    _this->_internal_set_momentumamount(from._internal_momentumamount());
  }
  if (from._internal_restrictwithinpanel() != 0) {
    _this->_internal_set_restrictwithinpanel(from._internal_restrictwithinpanel());
  }
  if (from._internal_smoothdragstart() != 0) {
    _this->_internal_set_smoothdragstart(from._internal_smoothdragstart());
  }
  if (from._internal_canceldragiffits() != 0) {
    _this->_internal_set_canceldragiffits(from._internal_canceldragiffits());
  }
  if (from._internal_verticalbar() != 0) {
    _this->_internal_set_verticalbar(from._internal_verticalbar());
  }
  if (from._internal_horizontalbar() != 0) {
    _this->_internal_set_horizontalbar(from._internal_horizontalbar());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudScrollViewData::CopyFrom(const UGCHudScrollViewData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudScrollViewData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudScrollViewData::IsInitialized() const {
  return true;
}

void UGCHudScrollViewData::InternalSwap(UGCHudScrollViewData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudScrollViewData, _impl_.horizontalbar_)
      + sizeof(UGCHudScrollViewData::_impl_.horizontalbar_)
      - PROTOBUF_FIELD_OFFSET(UGCHudScrollViewData, _impl_.panel_)>(
          reinterpret_cast<char*>(&_impl_.panel_),
          reinterpret_cast<char*>(&other->_impl_.panel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudScrollViewData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[107]);
}

// ===================================================================

class UGCHud3DContainerData::_Internal {
 public:
  static const ::message::UGCHudWidgetData& widget(const UGCHud3DContainerData* msg);
  static const ::message::ProtoBuffVector3& scale(const UGCHud3DContainerData* msg);
  static const ::message::ProtoBuffVector3& rotation(const UGCHud3DContainerData* msg);
};

const ::message::UGCHudWidgetData&
UGCHud3DContainerData::_Internal::widget(const UGCHud3DContainerData* msg) {
  return *msg->_impl_.widget_;
}
const ::message::ProtoBuffVector3&
UGCHud3DContainerData::_Internal::scale(const UGCHud3DContainerData* msg) {
  return *msg->_impl_.scale_;
}
const ::message::ProtoBuffVector3&
UGCHud3DContainerData::_Internal::rotation(const UGCHud3DContainerData* msg) {
  return *msg->_impl_.rotation_;
}
void UGCHud3DContainerData::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
void UGCHud3DContainerData::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
UGCHud3DContainerData::UGCHud3DContainerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHud3DContainerData)
}
UGCHud3DContainerData::UGCHud3DContainerData(const UGCHud3DContainerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHud3DContainerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resourceid_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resourceid().empty()) {
    _this->_impl_.resourceid_.Set(from._internal_resourceid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  if (from._internal_has_scale()) {
    _this->_impl_.scale_ = new ::message::ProtoBuffVector3(*from._impl_.scale_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::message::ProtoBuffVector3(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCHud3DContainerData)
}

inline void UGCHud3DContainerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resourceid_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHud3DContainerData::~UGCHud3DContainerData() {
  // @@protoc_insertion_point(destructor:message.UGCHud3DContainerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHud3DContainerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resourceid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.widget_;
  if (this != internal_default_instance()) delete _impl_.scale_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void UGCHud3DContainerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHud3DContainerData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHud3DContainerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resourceid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHud3DContainerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudWidgetData Widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ResourceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_resourceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHud3DContainerData.ResourceID"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 Scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 Rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHud3DContainerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHud3DContainerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // string ResourceID = 2;
  if (!this->_internal_resourceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourceid().data(), static_cast<int>(this->_internal_resourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHud3DContainerData.ResourceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resourceid(), target);
  }

  // .message.ProtoBuffVector3 Scale = 3;
  if (this->_internal_has_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 Rotation = 4;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHud3DContainerData)
  return target;
}

size_t UGCHud3DContainerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHud3DContainerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ResourceID = 2;
  if (!this->_internal_resourceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourceid());
  }

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  // .message.ProtoBuffVector3 Scale = 3;
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_);
  }

  // .message.ProtoBuffVector3 Rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHud3DContainerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHud3DContainerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHud3DContainerData::GetClassData() const { return &_class_data_; }


void UGCHud3DContainerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHud3DContainerData*>(&to_msg);
  auto& from = static_cast<const UGCHud3DContainerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHud3DContainerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resourceid().empty()) {
    _this->_internal_set_resourceid(from._internal_resourceid());
  }
  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  if (from._internal_has_scale()) {
    _this->_internal_mutable_scale()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_scale());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHud3DContainerData::CopyFrom(const UGCHud3DContainerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHud3DContainerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHud3DContainerData::IsInitialized() const {
  return true;
}

void UGCHud3DContainerData::InternalSwap(UGCHud3DContainerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourceid_, lhs_arena,
      &other->_impl_.resourceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHud3DContainerData, _impl_.rotation_)
      + sizeof(UGCHud3DContainerData::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(UGCHud3DContainerData, _impl_.widget_)>(
          reinterpret_cast<char*>(&_impl_.widget_),
          reinterpret_cast<char*>(&other->_impl_.widget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHud3DContainerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[108]);
}

// ===================================================================

class UGCHudTextureData::_Internal {
 public:
  static const ::message::UGCHudWidgetData& widget(const UGCHudTextureData* msg);
  static const ::message::ProtoBuffVector2& uvrectxy(const UGCHudTextureData* msg);
  static const ::message::ProtoBuffVector2& uvrectwh(const UGCHudTextureData* msg);
  static const ::message::ProtoBuffVector2& borderlr(const UGCHudTextureData* msg);
  static const ::message::ProtoBuffVector2& bordertb(const UGCHudTextureData* msg);
};

const ::message::UGCHudWidgetData&
UGCHudTextureData::_Internal::widget(const UGCHudTextureData* msg) {
  return *msg->_impl_.widget_;
}
const ::message::ProtoBuffVector2&
UGCHudTextureData::_Internal::uvrectxy(const UGCHudTextureData* msg) {
  return *msg->_impl_.uvrectxy_;
}
const ::message::ProtoBuffVector2&
UGCHudTextureData::_Internal::uvrectwh(const UGCHudTextureData* msg) {
  return *msg->_impl_.uvrectwh_;
}
const ::message::ProtoBuffVector2&
UGCHudTextureData::_Internal::borderlr(const UGCHudTextureData* msg) {
  return *msg->_impl_.borderlr_;
}
const ::message::ProtoBuffVector2&
UGCHudTextureData::_Internal::bordertb(const UGCHudTextureData* msg) {
  return *msg->_impl_.bordertb_;
}
void UGCHudTextureData::clear_uvrectxy() {
  if (GetArenaForAllocation() == nullptr && _impl_.uvrectxy_ != nullptr) {
    delete _impl_.uvrectxy_;
  }
  _impl_.uvrectxy_ = nullptr;
}
void UGCHudTextureData::clear_uvrectwh() {
  if (GetArenaForAllocation() == nullptr && _impl_.uvrectwh_ != nullptr) {
    delete _impl_.uvrectwh_;
  }
  _impl_.uvrectwh_ = nullptr;
}
void UGCHudTextureData::clear_borderlr() {
  if (GetArenaForAllocation() == nullptr && _impl_.borderlr_ != nullptr) {
    delete _impl_.borderlr_;
  }
  _impl_.borderlr_ = nullptr;
}
void UGCHudTextureData::clear_bordertb() {
  if (GetArenaForAllocation() == nullptr && _impl_.bordertb_ != nullptr) {
    delete _impl_.bordertb_;
  }
  _impl_.bordertb_ = nullptr;
}
UGCHudTextureData::UGCHudTextureData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudTextureData)
}
UGCHudTextureData::UGCHudTextureData(const UGCHudTextureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudTextureData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.texturename_){}
    , decltype(_impl_.shadername_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.uvrectxy_){nullptr}
    , decltype(_impl_.uvrectwh_){nullptr}
    , decltype(_impl_.borderlr_){nullptr}
    , decltype(_impl_.bordertb_){nullptr}
    , decltype(_impl_.filltype_){}
    , decltype(_impl_.filldir_){}
    , decltype(_impl_.centerinvisible_){}
    , decltype(_impl_.invertfill_){}
    , decltype(_impl_.fillamount_){}
    , decltype(_impl_.flip_){}
    , decltype(_impl_.gradient_){}
    , decltype(_impl_.gradienttop_){}
    , decltype(_impl_.gradientbottom_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.texturename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.texturename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_texturename().empty()) {
    _this->_impl_.texturename_.Set(from._internal_texturename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.shadername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shadername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shadername().empty()) {
    _this->_impl_.shadername_.Set(from._internal_shadername(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  if (from._internal_has_uvrectxy()) {
    _this->_impl_.uvrectxy_ = new ::message::ProtoBuffVector2(*from._impl_.uvrectxy_);
  }
  if (from._internal_has_uvrectwh()) {
    _this->_impl_.uvrectwh_ = new ::message::ProtoBuffVector2(*from._impl_.uvrectwh_);
  }
  if (from._internal_has_borderlr()) {
    _this->_impl_.borderlr_ = new ::message::ProtoBuffVector2(*from._impl_.borderlr_);
  }
  if (from._internal_has_bordertb()) {
    _this->_impl_.bordertb_ = new ::message::ProtoBuffVector2(*from._impl_.bordertb_);
  }
  ::memcpy(&_impl_.filltype_, &from._impl_.filltype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gradientbottom_) -
    reinterpret_cast<char*>(&_impl_.filltype_)) + sizeof(_impl_.gradientbottom_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudTextureData)
}

inline void UGCHudTextureData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.texturename_){}
    , decltype(_impl_.shadername_){}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.uvrectxy_){nullptr}
    , decltype(_impl_.uvrectwh_){nullptr}
    , decltype(_impl_.borderlr_){nullptr}
    , decltype(_impl_.bordertb_){nullptr}
    , decltype(_impl_.filltype_){0}
    , decltype(_impl_.filldir_){0}
    , decltype(_impl_.centerinvisible_){false}
    , decltype(_impl_.invertfill_){false}
    , decltype(_impl_.fillamount_){0}
    , decltype(_impl_.flip_){0}
    , decltype(_impl_.gradient_){0}
    , decltype(_impl_.gradienttop_){0}
    , decltype(_impl_.gradientbottom_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.texturename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.texturename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shadername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shadername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHudTextureData::~UGCHudTextureData() {
  // @@protoc_insertion_point(destructor:message.UGCHudTextureData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudTextureData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.texturename_.Destroy();
  _impl_.shadername_.Destroy();
  if (this != internal_default_instance()) delete _impl_.widget_;
  if (this != internal_default_instance()) delete _impl_.uvrectxy_;
  if (this != internal_default_instance()) delete _impl_.uvrectwh_;
  if (this != internal_default_instance()) delete _impl_.borderlr_;
  if (this != internal_default_instance()) delete _impl_.bordertb_;
}

void UGCHudTextureData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudTextureData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudTextureData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.texturename_.ClearToEmpty();
  _impl_.shadername_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.uvrectxy_ != nullptr) {
    delete _impl_.uvrectxy_;
  }
  _impl_.uvrectxy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.uvrectwh_ != nullptr) {
    delete _impl_.uvrectwh_;
  }
  _impl_.uvrectwh_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.borderlr_ != nullptr) {
    delete _impl_.borderlr_;
  }
  _impl_.borderlr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bordertb_ != nullptr) {
    delete _impl_.bordertb_;
  }
  _impl_.bordertb_ = nullptr;
  ::memset(&_impl_.filltype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gradientbottom_) -
      reinterpret_cast<char*>(&_impl_.filltype_)) + sizeof(_impl_.gradientbottom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudTextureData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudWidgetData Widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TextureName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_texturename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudTextureData.TextureName"));
        } else
          goto handle_unusual;
        continue;
      // string ShaderName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_shadername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudTextureData.ShaderName"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 UVRectXY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_uvrectxy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 UVRectWH = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uvrectwh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FillType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.filltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 BorderLR = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_borderlr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 BorderTB = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bordertb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool CenterInvisible = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.centerinvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FillDir = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.filldir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float FillAmount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.fillamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool InvertFill = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.invertfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Flip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Gradient = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.gradient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 GradientTop = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.gradienttop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 GradientBottom = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.gradientbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudTextureData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudTextureData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // string TextureName = 2;
  if (!this->_internal_texturename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_texturename().data(), static_cast<int>(this->_internal_texturename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudTextureData.TextureName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_texturename(), target);
  }

  // string ShaderName = 3;
  if (!this->_internal_shadername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shadername().data(), static_cast<int>(this->_internal_shadername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudTextureData.ShaderName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_shadername(), target);
  }

  // .message.ProtoBuffVector2 UVRectXY = 4;
  if (this->_internal_has_uvrectxy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::uvrectxy(this),
        _Internal::uvrectxy(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 UVRectWH = 5;
  if (this->_internal_has_uvrectwh()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::uvrectwh(this),
        _Internal::uvrectwh(this).GetCachedSize(), target, stream);
  }

  // int32 FillType = 6;
  if (this->_internal_filltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_filltype(), target);
  }

  // .message.ProtoBuffVector2 BorderLR = 7;
  if (this->_internal_has_borderlr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::borderlr(this),
        _Internal::borderlr(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector2 BorderTB = 8;
  if (this->_internal_has_bordertb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::bordertb(this),
        _Internal::bordertb(this).GetCachedSize(), target, stream);
  }

  // bool CenterInvisible = 9;
  if (this->_internal_centerinvisible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_centerinvisible(), target);
  }

  // int32 FillDir = 10;
  if (this->_internal_filldir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_filldir(), target);
  }

  // float FillAmount = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fillamount = this->_internal_fillamount();
  uint32_t raw_fillamount;
  memcpy(&raw_fillamount, &tmp_fillamount, sizeof(tmp_fillamount));
  if (raw_fillamount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_fillamount(), target);
  }

  // bool InvertFill = 12;
  if (this->_internal_invertfill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_invertfill(), target);
  }

  // int32 Flip = 13;
  if (this->_internal_flip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_flip(), target);
  }

  // int32 Gradient = 14;
  if (this->_internal_gradient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_gradient(), target);
  }

  // int32 GradientTop = 15;
  if (this->_internal_gradienttop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_gradienttop(), target);
  }

  // int32 GradientBottom = 16;
  if (this->_internal_gradientbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_gradientbottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudTextureData)
  return target;
}

size_t UGCHudTextureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudTextureData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TextureName = 2;
  if (!this->_internal_texturename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_texturename());
  }

  // string ShaderName = 3;
  if (!this->_internal_shadername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shadername());
  }

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  // .message.ProtoBuffVector2 UVRectXY = 4;
  if (this->_internal_has_uvrectxy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uvrectxy_);
  }

  // .message.ProtoBuffVector2 UVRectWH = 5;
  if (this->_internal_has_uvrectwh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uvrectwh_);
  }

  // .message.ProtoBuffVector2 BorderLR = 7;
  if (this->_internal_has_borderlr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.borderlr_);
  }

  // .message.ProtoBuffVector2 BorderTB = 8;
  if (this->_internal_has_bordertb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bordertb_);
  }

  // int32 FillType = 6;
  if (this->_internal_filltype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filltype());
  }

  // int32 FillDir = 10;
  if (this->_internal_filldir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filldir());
  }

  // bool CenterInvisible = 9;
  if (this->_internal_centerinvisible() != 0) {
    total_size += 1 + 1;
  }

  // bool InvertFill = 12;
  if (this->_internal_invertfill() != 0) {
    total_size += 1 + 1;
  }

  // float FillAmount = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fillamount = this->_internal_fillamount();
  uint32_t raw_fillamount;
  memcpy(&raw_fillamount, &tmp_fillamount, sizeof(tmp_fillamount));
  if (raw_fillamount != 0) {
    total_size += 1 + 4;
  }

  // int32 Flip = 13;
  if (this->_internal_flip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flip());
  }

  // int32 Gradient = 14;
  if (this->_internal_gradient() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gradient());
  }

  // int32 GradientTop = 15;
  if (this->_internal_gradienttop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gradienttop());
  }

  // int32 GradientBottom = 16;
  if (this->_internal_gradientbottom() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_gradientbottom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudTextureData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudTextureData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudTextureData::GetClassData() const { return &_class_data_; }


void UGCHudTextureData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudTextureData*>(&to_msg);
  auto& from = static_cast<const UGCHudTextureData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudTextureData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_texturename().empty()) {
    _this->_internal_set_texturename(from._internal_texturename());
  }
  if (!from._internal_shadername().empty()) {
    _this->_internal_set_shadername(from._internal_shadername());
  }
  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  if (from._internal_has_uvrectxy()) {
    _this->_internal_mutable_uvrectxy()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_uvrectxy());
  }
  if (from._internal_has_uvrectwh()) {
    _this->_internal_mutable_uvrectwh()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_uvrectwh());
  }
  if (from._internal_has_borderlr()) {
    _this->_internal_mutable_borderlr()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_borderlr());
  }
  if (from._internal_has_bordertb()) {
    _this->_internal_mutable_bordertb()->::message::ProtoBuffVector2::MergeFrom(
        from._internal_bordertb());
  }
  if (from._internal_filltype() != 0) {
    _this->_internal_set_filltype(from._internal_filltype());
  }
  if (from._internal_filldir() != 0) {
    _this->_internal_set_filldir(from._internal_filldir());
  }
  if (from._internal_centerinvisible() != 0) {
    _this->_internal_set_centerinvisible(from._internal_centerinvisible());
  }
  if (from._internal_invertfill() != 0) {
    _this->_internal_set_invertfill(from._internal_invertfill());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fillamount = from._internal_fillamount();
  uint32_t raw_fillamount;
  memcpy(&raw_fillamount, &tmp_fillamount, sizeof(tmp_fillamount));
  if (raw_fillamount != 0) {
    _this->_internal_set_fillamount(from._internal_fillamount());
  }
  if (from._internal_flip() != 0) {
    _this->_internal_set_flip(from._internal_flip());
  }
  if (from._internal_gradient() != 0) {
    _this->_internal_set_gradient(from._internal_gradient());
  }
  if (from._internal_gradienttop() != 0) {
    _this->_internal_set_gradienttop(from._internal_gradienttop());
  }
  if (from._internal_gradientbottom() != 0) {
    _this->_internal_set_gradientbottom(from._internal_gradientbottom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudTextureData::CopyFrom(const UGCHudTextureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudTextureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudTextureData::IsInitialized() const {
  return true;
}

void UGCHudTextureData::InternalSwap(UGCHudTextureData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.texturename_, lhs_arena,
      &other->_impl_.texturename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shadername_, lhs_arena,
      &other->_impl_.shadername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudTextureData, _impl_.gradientbottom_)
      + sizeof(UGCHudTextureData::_impl_.gradientbottom_)
      - PROTOBUF_FIELD_OFFSET(UGCHudTextureData, _impl_.widget_)>(
          reinterpret_cast<char*>(&_impl_.widget_),
          reinterpret_cast<char*>(&other->_impl_.widget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudTextureData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[109]);
}

// ===================================================================

class UGCHudProfileInfoData::_Internal {
 public:
  static const ::message::UGCHudWidgetData& widget(const UGCHudProfileInfoData* msg);
  static const ::message::ProtoBuffVector3& scale(const UGCHudProfileInfoData* msg);
};

const ::message::UGCHudWidgetData&
UGCHudProfileInfoData::_Internal::widget(const UGCHudProfileInfoData* msg) {
  return *msg->_impl_.widget_;
}
const ::message::ProtoBuffVector3&
UGCHudProfileInfoData::_Internal::scale(const UGCHudProfileInfoData* msg) {
  return *msg->_impl_.scale_;
}
void UGCHudProfileInfoData::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
UGCHudProfileInfoData::UGCHudProfileInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudProfileInfoData)
}
UGCHudProfileInfoData::UGCHudProfileInfoData(const UGCHudProfileInfoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudProfileInfoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.showtype_){}
    , decltype(_impl_.showrank_){}
    , decltype(_impl_.showpin_){}
    , decltype(_impl_.showname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  if (from._internal_has_scale()) {
    _this->_impl_.scale_ = new ::message::ProtoBuffVector3(*from._impl_.scale_);
  }
  ::memcpy(&_impl_.showtype_, &from._impl_.showtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showname_) -
    reinterpret_cast<char*>(&_impl_.showtype_)) + sizeof(_impl_.showname_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudProfileInfoData)
}

inline void UGCHudProfileInfoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.showtype_){0}
    , decltype(_impl_.showrank_){0}
    , decltype(_impl_.showpin_){false}
    , decltype(_impl_.showname_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudProfileInfoData::~UGCHudProfileInfoData() {
  // @@protoc_insertion_point(destructor:message.UGCHudProfileInfoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudProfileInfoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.widget_;
  if (this != internal_default_instance()) delete _impl_.scale_;
}

void UGCHudProfileInfoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudProfileInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudProfileInfoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
  ::memset(&_impl_.showtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.showname_) -
      reinterpret_cast<char*>(&_impl_.showtype_)) + sizeof(_impl_.showname_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudProfileInfoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudWidgetData Widget = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 Scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ShowType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.showtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowPin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.showpin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ShowRank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.showrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.showname_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudProfileInfoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudProfileInfoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 Scale = 2;
  if (this->_internal_has_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // int32 ShowType = 3;
  if (this->_internal_showtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_showtype(), target);
  }

  // bool ShowPin = 4;
  if (this->_internal_showpin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_showpin(), target);
  }

  // int32 ShowRank = 5;
  if (this->_internal_showrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_showrank(), target);
  }

  // bool ShowName = 6;
  if (this->_internal_showname() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_showname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudProfileInfoData)
  return target;
}

size_t UGCHudProfileInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudProfileInfoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCHudWidgetData Widget = 1;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  // .message.ProtoBuffVector3 Scale = 2;
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_);
  }

  // int32 ShowType = 3;
  if (this->_internal_showtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_showtype());
  }

  // int32 ShowRank = 5;
  if (this->_internal_showrank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_showrank());
  }

  // bool ShowPin = 4;
  if (this->_internal_showpin() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowName = 6;
  if (this->_internal_showname() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudProfileInfoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudProfileInfoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudProfileInfoData::GetClassData() const { return &_class_data_; }


void UGCHudProfileInfoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudProfileInfoData*>(&to_msg);
  auto& from = static_cast<const UGCHudProfileInfoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudProfileInfoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  if (from._internal_has_scale()) {
    _this->_internal_mutable_scale()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_scale());
  }
  if (from._internal_showtype() != 0) {
    _this->_internal_set_showtype(from._internal_showtype());
  }
  if (from._internal_showrank() != 0) {
    _this->_internal_set_showrank(from._internal_showrank());
  }
  if (from._internal_showpin() != 0) {
    _this->_internal_set_showpin(from._internal_showpin());
  }
  if (from._internal_showname() != 0) {
    _this->_internal_set_showname(from._internal_showname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudProfileInfoData::CopyFrom(const UGCHudProfileInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudProfileInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudProfileInfoData::IsInitialized() const {
  return true;
}

void UGCHudProfileInfoData::InternalSwap(UGCHudProfileInfoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudProfileInfoData, _impl_.showname_)
      + sizeof(UGCHudProfileInfoData::_impl_.showname_)
      - PROTOBUF_FIELD_OFFSET(UGCHudProfileInfoData, _impl_.widget_)>(
          reinterpret_cast<char*>(&_impl_.widget_),
          reinterpret_cast<char*>(&other->_impl_.widget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudProfileInfoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[110]);
}

// ===================================================================

class UGCHudGameObjectCommonData::_Internal {
 public:
  static const ::message::UGCHudRectTransformData& recttransform(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudWidgetData& widget(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudLabelData& label(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudImageData& image(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudButtonData& button(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudInputData& input(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudLayoutData& layout(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudPanelData& panel(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudScrollViewData& scrollview(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudGridData& grid(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudLayoutNewData& layoutnew(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHud3DContainerData& container3d(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudTextureData& texture(const UGCHudGameObjectCommonData* msg);
  static const ::message::UGCHudProfileInfoData& profileinfo(const UGCHudGameObjectCommonData* msg);
};

const ::message::UGCHudRectTransformData&
UGCHudGameObjectCommonData::_Internal::recttransform(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.recttransform_;
}
const ::message::UGCHudWidgetData&
UGCHudGameObjectCommonData::_Internal::widget(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.widget_;
}
const ::message::UGCHudLabelData&
UGCHudGameObjectCommonData::_Internal::label(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.label_;
}
const ::message::UGCHudImageData&
UGCHudGameObjectCommonData::_Internal::image(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.image_;
}
const ::message::UGCHudButtonData&
UGCHudGameObjectCommonData::_Internal::button(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.button_;
}
const ::message::UGCHudInputData&
UGCHudGameObjectCommonData::_Internal::input(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.input_;
}
const ::message::UGCHudLayoutData&
UGCHudGameObjectCommonData::_Internal::layout(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.layout_;
}
const ::message::UGCHudPanelData&
UGCHudGameObjectCommonData::_Internal::panel(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.panel_;
}
const ::message::UGCHudScrollViewData&
UGCHudGameObjectCommonData::_Internal::scrollview(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.scrollview_;
}
const ::message::UGCHudGridData&
UGCHudGameObjectCommonData::_Internal::grid(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.grid_;
}
const ::message::UGCHudLayoutNewData&
UGCHudGameObjectCommonData::_Internal::layoutnew(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.layoutnew_;
}
const ::message::UGCHud3DContainerData&
UGCHudGameObjectCommonData::_Internal::container3d(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.container3d_;
}
const ::message::UGCHudTextureData&
UGCHudGameObjectCommonData::_Internal::texture(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.texture_;
}
const ::message::UGCHudProfileInfoData&
UGCHudGameObjectCommonData::_Internal::profileinfo(const UGCHudGameObjectCommonData* msg) {
  return *msg->_impl_.profileinfo_;
}
UGCHudGameObjectCommonData::UGCHudGameObjectCommonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudGameObjectCommonData)
}
UGCHudGameObjectCommonData::UGCHudGameObjectCommonData(const UGCHudGameObjectCommonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudGameObjectCommonData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.recttransform_){nullptr}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.label_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.button_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.layout_){nullptr}
    , decltype(_impl_.panel_){nullptr}
    , decltype(_impl_.scrollview_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.layoutnew_){nullptr}
    , decltype(_impl_.container3d_){nullptr}
    , decltype(_impl_.texture_){nullptr}
    , decltype(_impl_.profileinfo_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.actived_){}
    , decltype(_impl_.widgettype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_recttransform()) {
    _this->_impl_.recttransform_ = new ::message::UGCHudRectTransformData(*from._impl_.recttransform_);
  }
  if (from._internal_has_widget()) {
    _this->_impl_.widget_ = new ::message::UGCHudWidgetData(*from._impl_.widget_);
  }
  if (from._internal_has_label()) {
    _this->_impl_.label_ = new ::message::UGCHudLabelData(*from._impl_.label_);
  }
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::message::UGCHudImageData(*from._impl_.image_);
  }
  if (from._internal_has_button()) {
    _this->_impl_.button_ = new ::message::UGCHudButtonData(*from._impl_.button_);
  }
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::message::UGCHudInputData(*from._impl_.input_);
  }
  if (from._internal_has_layout()) {
    _this->_impl_.layout_ = new ::message::UGCHudLayoutData(*from._impl_.layout_);
  }
  if (from._internal_has_panel()) {
    _this->_impl_.panel_ = new ::message::UGCHudPanelData(*from._impl_.panel_);
  }
  if (from._internal_has_scrollview()) {
    _this->_impl_.scrollview_ = new ::message::UGCHudScrollViewData(*from._impl_.scrollview_);
  }
  if (from._internal_has_grid()) {
    _this->_impl_.grid_ = new ::message::UGCHudGridData(*from._impl_.grid_);
  }
  if (from._internal_has_layoutnew()) {
    _this->_impl_.layoutnew_ = new ::message::UGCHudLayoutNewData(*from._impl_.layoutnew_);
  }
  if (from._internal_has_container3d()) {
    _this->_impl_.container3d_ = new ::message::UGCHud3DContainerData(*from._impl_.container3d_);
  }
  if (from._internal_has_texture()) {
    _this->_impl_.texture_ = new ::message::UGCHudTextureData(*from._impl_.texture_);
  }
  if (from._internal_has_profileinfo()) {
    _this->_impl_.profileinfo_ = new ::message::UGCHudProfileInfoData(*from._impl_.profileinfo_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.widgettype_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.widgettype_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudGameObjectCommonData)
}

inline void UGCHudGameObjectCommonData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.recttransform_){nullptr}
    , decltype(_impl_.widget_){nullptr}
    , decltype(_impl_.label_){nullptr}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.button_){nullptr}
    , decltype(_impl_.input_){nullptr}
    , decltype(_impl_.layout_){nullptr}
    , decltype(_impl_.panel_){nullptr}
    , decltype(_impl_.scrollview_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.layoutnew_){nullptr}
    , decltype(_impl_.container3d_){nullptr}
    , decltype(_impl_.texture_){nullptr}
    , decltype(_impl_.profileinfo_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.actived_){false}
    , decltype(_impl_.widgettype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHudGameObjectCommonData::~UGCHudGameObjectCommonData() {
  // @@protoc_insertion_point(destructor:message.UGCHudGameObjectCommonData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudGameObjectCommonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.recttransform_;
  if (this != internal_default_instance()) delete _impl_.widget_;
  if (this != internal_default_instance()) delete _impl_.label_;
  if (this != internal_default_instance()) delete _impl_.image_;
  if (this != internal_default_instance()) delete _impl_.button_;
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.layout_;
  if (this != internal_default_instance()) delete _impl_.panel_;
  if (this != internal_default_instance()) delete _impl_.scrollview_;
  if (this != internal_default_instance()) delete _impl_.grid_;
  if (this != internal_default_instance()) delete _impl_.layoutnew_;
  if (this != internal_default_instance()) delete _impl_.container3d_;
  if (this != internal_default_instance()) delete _impl_.texture_;
  if (this != internal_default_instance()) delete _impl_.profileinfo_;
}

void UGCHudGameObjectCommonData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudGameObjectCommonData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudGameObjectCommonData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.recttransform_ != nullptr) {
    delete _impl_.recttransform_;
  }
  _impl_.recttransform_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.widget_ != nullptr) {
    delete _impl_.widget_;
  }
  _impl_.widget_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.label_ != nullptr) {
    delete _impl_.label_;
  }
  _impl_.label_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.button_ != nullptr) {
    delete _impl_.button_;
  }
  _impl_.button_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.layout_ != nullptr) {
    delete _impl_.layout_;
  }
  _impl_.layout_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.panel_ != nullptr) {
    delete _impl_.panel_;
  }
  _impl_.panel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scrollview_ != nullptr) {
    delete _impl_.scrollview_;
  }
  _impl_.scrollview_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.grid_ != nullptr) {
    delete _impl_.grid_;
  }
  _impl_.grid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.layoutnew_ != nullptr) {
    delete _impl_.layoutnew_;
  }
  _impl_.layoutnew_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.container3d_ != nullptr) {
    delete _impl_.container3d_;
  }
  _impl_.container3d_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.texture_ != nullptr) {
    delete _impl_.texture_;
  }
  _impl_.texture_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.profileinfo_ != nullptr) {
    delete _impl_.profileinfo_;
  }
  _impl_.profileinfo_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.widgettype_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.widgettype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudGameObjectCommonData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Actived = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.actived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudRectTransformData RectTransform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_recttransform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 WidgetType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.widgettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudWidgetData Widget = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_widget(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudLabelData Label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_label(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudImageData Image = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudButtonData Button = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_button(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudInputData Input = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudLayoutData Layout = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudGameObjectCommonData.Name"));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudPanelData Panel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_panel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudScrollViewData ScrollView = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_scrollview(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudGridData Grid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudLayoutNewData LayoutNew = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_layoutnew(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHud3DContainerData Container3D = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_container3d(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudTextureData Texture = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudProfileInfoData ProfileInfo = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_profileinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudGameObjectCommonData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudGameObjectCommonData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bool Actived = 2;
  if (this->_internal_actived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_actived(), target);
  }

  // .message.UGCHudRectTransformData RectTransform = 3;
  if (this->_internal_has_recttransform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::recttransform(this),
        _Internal::recttransform(this).GetCachedSize(), target, stream);
  }

  // uint32 WidgetType = 4;
  if (this->_internal_widgettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_widgettype(), target);
  }

  // .message.UGCHudWidgetData Widget = 5;
  if (this->_internal_has_widget()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::widget(this),
        _Internal::widget(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudLabelData Label = 6;
  if (this->_internal_has_label()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::label(this),
        _Internal::label(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudImageData Image = 7;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudButtonData Button = 8;
  if (this->_internal_has_button()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::button(this),
        _Internal::button(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudInputData Input = 9;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudLayoutData Layout = 10;
  if (this->_internal_has_layout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::layout(this),
        _Internal::layout(this).GetCachedSize(), target, stream);
  }

  // string Name = 11;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudGameObjectCommonData.Name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_name(), target);
  }

  // .message.UGCHudPanelData Panel = 12;
  if (this->_internal_has_panel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::panel(this),
        _Internal::panel(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudScrollViewData ScrollView = 13;
  if (this->_internal_has_scrollview()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::scrollview(this),
        _Internal::scrollview(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudGridData Grid = 14;
  if (this->_internal_has_grid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::grid(this),
        _Internal::grid(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudLayoutNewData LayoutNew = 15;
  if (this->_internal_has_layoutnew()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::layoutnew(this),
        _Internal::layoutnew(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHud3DContainerData Container3D = 16;
  if (this->_internal_has_container3d()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::container3d(this),
        _Internal::container3d(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudTextureData Texture = 17;
  if (this->_internal_has_texture()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::texture(this),
        _Internal::texture(this).GetCachedSize(), target, stream);
  }

  // .message.UGCHudProfileInfoData ProfileInfo = 18;
  if (this->_internal_has_profileinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::profileinfo(this),
        _Internal::profileinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudGameObjectCommonData)
  return target;
}

size_t UGCHudGameObjectCommonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudGameObjectCommonData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 11;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .message.UGCHudRectTransformData RectTransform = 3;
  if (this->_internal_has_recttransform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recttransform_);
  }

  // .message.UGCHudWidgetData Widget = 5;
  if (this->_internal_has_widget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.widget_);
  }

  // .message.UGCHudLabelData Label = 6;
  if (this->_internal_has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.label_);
  }

  // .message.UGCHudImageData Image = 7;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  // .message.UGCHudButtonData Button = 8;
  if (this->_internal_has_button()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.button_);
  }

  // .message.UGCHudInputData Input = 9;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .message.UGCHudLayoutData Layout = 10;
  if (this->_internal_has_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.layout_);
  }

  // .message.UGCHudPanelData Panel = 12;
  if (this->_internal_has_panel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.panel_);
  }

  // .message.UGCHudScrollViewData ScrollView = 13;
  if (this->_internal_has_scrollview()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scrollview_);
  }

  // .message.UGCHudGridData Grid = 14;
  if (this->_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grid_);
  }

  // .message.UGCHudLayoutNewData LayoutNew = 15;
  if (this->_internal_has_layoutnew()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.layoutnew_);
  }

  // .message.UGCHud3DContainerData Container3D = 16;
  if (this->_internal_has_container3d()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.container3d_);
  }

  // .message.UGCHudTextureData Texture = 17;
  if (this->_internal_has_texture()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texture_);
  }

  // .message.UGCHudProfileInfoData ProfileInfo = 18;
  if (this->_internal_has_profileinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profileinfo_);
  }

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // bool Actived = 2;
  if (this->_internal_actived() != 0) {
    total_size += 1 + 1;
  }

  // uint32 WidgetType = 4;
  if (this->_internal_widgettype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_widgettype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudGameObjectCommonData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudGameObjectCommonData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudGameObjectCommonData::GetClassData() const { return &_class_data_; }


void UGCHudGameObjectCommonData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudGameObjectCommonData*>(&to_msg);
  auto& from = static_cast<const UGCHudGameObjectCommonData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudGameObjectCommonData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_recttransform()) {
    _this->_internal_mutable_recttransform()->::message::UGCHudRectTransformData::MergeFrom(
        from._internal_recttransform());
  }
  if (from._internal_has_widget()) {
    _this->_internal_mutable_widget()->::message::UGCHudWidgetData::MergeFrom(
        from._internal_widget());
  }
  if (from._internal_has_label()) {
    _this->_internal_mutable_label()->::message::UGCHudLabelData::MergeFrom(
        from._internal_label());
  }
  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::message::UGCHudImageData::MergeFrom(
        from._internal_image());
  }
  if (from._internal_has_button()) {
    _this->_internal_mutable_button()->::message::UGCHudButtonData::MergeFrom(
        from._internal_button());
  }
  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::message::UGCHudInputData::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_layout()) {
    _this->_internal_mutable_layout()->::message::UGCHudLayoutData::MergeFrom(
        from._internal_layout());
  }
  if (from._internal_has_panel()) {
    _this->_internal_mutable_panel()->::message::UGCHudPanelData::MergeFrom(
        from._internal_panel());
  }
  if (from._internal_has_scrollview()) {
    _this->_internal_mutable_scrollview()->::message::UGCHudScrollViewData::MergeFrom(
        from._internal_scrollview());
  }
  if (from._internal_has_grid()) {
    _this->_internal_mutable_grid()->::message::UGCHudGridData::MergeFrom(
        from._internal_grid());
  }
  if (from._internal_has_layoutnew()) {
    _this->_internal_mutable_layoutnew()->::message::UGCHudLayoutNewData::MergeFrom(
        from._internal_layoutnew());
  }
  if (from._internal_has_container3d()) {
    _this->_internal_mutable_container3d()->::message::UGCHud3DContainerData::MergeFrom(
        from._internal_container3d());
  }
  if (from._internal_has_texture()) {
    _this->_internal_mutable_texture()->::message::UGCHudTextureData::MergeFrom(
        from._internal_texture());
  }
  if (from._internal_has_profileinfo()) {
    _this->_internal_mutable_profileinfo()->::message::UGCHudProfileInfoData::MergeFrom(
        from._internal_profileinfo());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_actived() != 0) {
    _this->_internal_set_actived(from._internal_actived());
  }
  if (from._internal_widgettype() != 0) {
    _this->_internal_set_widgettype(from._internal_widgettype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudGameObjectCommonData::CopyFrom(const UGCHudGameObjectCommonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudGameObjectCommonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudGameObjectCommonData::IsInitialized() const {
  return true;
}

void UGCHudGameObjectCommonData::InternalSwap(UGCHudGameObjectCommonData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudGameObjectCommonData, _impl_.widgettype_)
      + sizeof(UGCHudGameObjectCommonData::_impl_.widgettype_)
      - PROTOBUF_FIELD_OFFSET(UGCHudGameObjectCommonData, _impl_.recttransform_)>(
          reinterpret_cast<char*>(&_impl_.recttransform_),
          reinterpret_cast<char*>(&other->_impl_.recttransform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudGameObjectCommonData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[111]);
}

// ===================================================================

class UGCHudGameObjectData::_Internal {
 public:
  static const ::message::UGCHudGameObjectCommonData& commondata(const UGCHudGameObjectData* msg);
};

const ::message::UGCHudGameObjectCommonData&
UGCHudGameObjectData::_Internal::commondata(const UGCHudGameObjectData* msg) {
  return *msg->_impl_.commondata_;
}
UGCHudGameObjectData::UGCHudGameObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudGameObjectData)
}
UGCHudGameObjectData::UGCHudGameObjectData(const UGCHudGameObjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudGameObjectData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.commondata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commondata()) {
    _this->_impl_.commondata_ = new ::message::UGCHudGameObjectCommonData(*from._impl_.commondata_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCHudGameObjectData)
}

inline void UGCHudGameObjectData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){arena}
    , decltype(_impl_.commondata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudGameObjectData::~UGCHudGameObjectData() {
  // @@protoc_insertion_point(destructor:message.UGCHudGameObjectData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudGameObjectData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.commondata_;
}

void UGCHudGameObjectData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudGameObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudGameObjectData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.commondata_ != nullptr) {
    delete _impl_.commondata_;
  }
  _impl_.commondata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudGameObjectData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudGameObjectCommonData CommonData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commondata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCHudGameObjectData Children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudGameObjectData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudGameObjectData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudGameObjectCommonData CommonData = 1;
  if (this->_internal_has_commondata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::commondata(this),
        _Internal::commondata(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCHudGameObjectData Children = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudGameObjectData)
  return target;
}

size_t UGCHudGameObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudGameObjectData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCHudGameObjectData Children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.UGCHudGameObjectCommonData CommonData = 1;
  if (this->_internal_has_commondata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.commondata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudGameObjectData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudGameObjectData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudGameObjectData::GetClassData() const { return &_class_data_; }


void UGCHudGameObjectData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudGameObjectData*>(&to_msg);
  auto& from = static_cast<const UGCHudGameObjectData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudGameObjectData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (from._internal_has_commondata()) {
    _this->_internal_mutable_commondata()->::message::UGCHudGameObjectCommonData::MergeFrom(
        from._internal_commondata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudGameObjectData::CopyFrom(const UGCHudGameObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudGameObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudGameObjectData::IsInitialized() const {
  return true;
}

void UGCHudGameObjectData::InternalSwap(UGCHudGameObjectData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  swap(_impl_.commondata_, other->_impl_.commondata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudGameObjectData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[112]);
}

// ===================================================================

class UGCHudGameObjectDataForEditor::_Internal {
 public:
  static const ::message::UGCHudGameObjectCommonData& commondata(const UGCHudGameObjectDataForEditor* msg);
};

const ::message::UGCHudGameObjectCommonData&
UGCHudGameObjectDataForEditor::_Internal::commondata(const UGCHudGameObjectDataForEditor* msg) {
  return *msg->_impl_.commondata_;
}
UGCHudGameObjectDataForEditor::UGCHudGameObjectDataForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudGameObjectDataForEditor)
}
UGCHudGameObjectDataForEditor::UGCHudGameObjectDataForEditor(const UGCHudGameObjectDataForEditor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudGameObjectDataForEditor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.commondata_){nullptr}
    , decltype(_impl_.customadapt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_commondata()) {
    _this->_impl_.commondata_ = new ::message::UGCHudGameObjectCommonData(*from._impl_.commondata_);
  }
  _this->_impl_.customadapt_ = from._impl_.customadapt_;
  // @@protoc_insertion_point(copy_constructor:message.UGCHudGameObjectDataForEditor)
}

inline void UGCHudGameObjectDataForEditor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.commondata_){nullptr}
    , decltype(_impl_.customadapt_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHudGameObjectDataForEditor::~UGCHudGameObjectDataForEditor() {
  // @@protoc_insertion_point(destructor:message.UGCHudGameObjectDataForEditor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudGameObjectDataForEditor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.commondata_;
}

void UGCHudGameObjectDataForEditor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudGameObjectDataForEditor::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudGameObjectDataForEditor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.commondata_ != nullptr) {
    delete _impl_.commondata_;
  }
  _impl_.commondata_ = nullptr;
  _impl_.customadapt_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudGameObjectDataForEditor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudGameObjectCommonData CommonData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commondata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudGameObjectDataForEditor.Name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCHudGameObjectDataForEditor Children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool CustomAdapt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.customadapt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudGameObjectDataForEditor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudGameObjectDataForEditor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudGameObjectCommonData CommonData = 1;
  if (this->_internal_has_commondata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::commondata(this),
        _Internal::commondata(this).GetCachedSize(), target, stream);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudGameObjectDataForEditor.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .message.UGCHudGameObjectDataForEditor Children = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool CustomAdapt = 4;
  if (this->_internal_customadapt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_customadapt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudGameObjectDataForEditor)
  return target;
}

size_t UGCHudGameObjectDataForEditor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudGameObjectDataForEditor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCHudGameObjectDataForEditor Children = 3;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .message.UGCHudGameObjectCommonData CommonData = 1;
  if (this->_internal_has_commondata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.commondata_);
  }

  // bool CustomAdapt = 4;
  if (this->_internal_customadapt() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudGameObjectDataForEditor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudGameObjectDataForEditor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudGameObjectDataForEditor::GetClassData() const { return &_class_data_; }


void UGCHudGameObjectDataForEditor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudGameObjectDataForEditor*>(&to_msg);
  auto& from = static_cast<const UGCHudGameObjectDataForEditor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudGameObjectDataForEditor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_commondata()) {
    _this->_internal_mutable_commondata()->::message::UGCHudGameObjectCommonData::MergeFrom(
        from._internal_commondata());
  }
  if (from._internal_customadapt() != 0) {
    _this->_internal_set_customadapt(from._internal_customadapt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudGameObjectDataForEditor::CopyFrom(const UGCHudGameObjectDataForEditor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudGameObjectDataForEditor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudGameObjectDataForEditor::IsInitialized() const {
  return true;
}

void UGCHudGameObjectDataForEditor::InternalSwap(UGCHudGameObjectDataForEditor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudGameObjectDataForEditor, _impl_.customadapt_)
      + sizeof(UGCHudGameObjectDataForEditor::_impl_.customadapt_)
      - PROTOBUF_FIELD_OFFSET(UGCHudGameObjectDataForEditor, _impl_.commondata_)>(
          reinterpret_cast<char*>(&_impl_.commondata_),
          reinterpret_cast<char*>(&other->_impl_.commondata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudGameObjectDataForEditor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[113]);
}

// ===================================================================

class UGCHudPrefabCommonData::_Internal {
 public:
  static const ::message::UGCHudTransformData& transform(const UGCHudPrefabCommonData* msg);
};

const ::message::UGCHudTransformData&
UGCHudPrefabCommonData::_Internal::transform(const UGCHudPrefabCommonData* msg) {
  return *msg->_impl_.transform_;
}
UGCHudPrefabCommonData::UGCHudPrefabCommonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudPrefabCommonData)
}
UGCHudPrefabCommonData::UGCHudPrefabCommonData(const UGCHudPrefabCommonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudPrefabCommonData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.screenwidth_){}
    , decltype(_impl_.screenheight_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    _this->_impl_.transform_ = new ::message::UGCHudTransformData(*from._impl_.transform_);
  }
  ::memcpy(&_impl_.screenwidth_, &from._impl_.screenwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.screenwidth_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudPrefabCommonData)
}

inline void UGCHudPrefabCommonData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.screenwidth_){0}
    , decltype(_impl_.screenheight_){0}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudPrefabCommonData::~UGCHudPrefabCommonData() {
  // @@protoc_insertion_point(destructor:message.UGCHudPrefabCommonData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudPrefabCommonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void UGCHudPrefabCommonData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudPrefabCommonData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudPrefabCommonData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
  ::memset(&_impl_.screenwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.screenwidth_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudPrefabCommonData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ScreenWidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.screenwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ScreenHeight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.screenheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCHudTransformData Transform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudPrefabCommonData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudPrefabCommonData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ScreenWidth = 1;
  if (this->_internal_screenwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_screenwidth(), target);
  }

  // int32 ScreenHeight = 2;
  if (this->_internal_screenheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_screenheight(), target);
  }

  // uint32 ID = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // .message.UGCHudTransformData Transform = 4;
  if (this->_internal_has_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudPrefabCommonData)
  return target;
}

size_t UGCHudPrefabCommonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudPrefabCommonData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCHudTransformData Transform = 4;
  if (this->_internal_has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  // int32 ScreenWidth = 1;
  if (this->_internal_screenwidth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_screenwidth());
  }

  // int32 ScreenHeight = 2;
  if (this->_internal_screenheight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_screenheight());
  }

  // uint32 ID = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudPrefabCommonData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudPrefabCommonData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudPrefabCommonData::GetClassData() const { return &_class_data_; }


void UGCHudPrefabCommonData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudPrefabCommonData*>(&to_msg);
  auto& from = static_cast<const UGCHudPrefabCommonData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudPrefabCommonData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transform()) {
    _this->_internal_mutable_transform()->::message::UGCHudTransformData::MergeFrom(
        from._internal_transform());
  }
  if (from._internal_screenwidth() != 0) {
    _this->_internal_set_screenwidth(from._internal_screenwidth());
  }
  if (from._internal_screenheight() != 0) {
    _this->_internal_set_screenheight(from._internal_screenheight());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudPrefabCommonData::CopyFrom(const UGCHudPrefabCommonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudPrefabCommonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudPrefabCommonData::IsInitialized() const {
  return true;
}

void UGCHudPrefabCommonData::InternalSwap(UGCHudPrefabCommonData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudPrefabCommonData, _impl_.id_)
      + sizeof(UGCHudPrefabCommonData::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(UGCHudPrefabCommonData, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudPrefabCommonData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[114]);
}

// ===================================================================

class UGCHudPrefabData::_Internal {
 public:
  static const ::message::UGCHudPrefabCommonData& commondata(const UGCHudPrefabData* msg);
};

const ::message::UGCHudPrefabCommonData&
UGCHudPrefabData::_Internal::commondata(const UGCHudPrefabData* msg) {
  return *msg->_impl_.commondata_;
}
UGCHudPrefabData::UGCHudPrefabData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudPrefabData)
}
UGCHudPrefabData::UGCHudPrefabData(const UGCHudPrefabData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudPrefabData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.commondata_){nullptr}
    , decltype(_impl_.maxwidgetid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commondata()) {
    _this->_impl_.commondata_ = new ::message::UGCHudPrefabCommonData(*from._impl_.commondata_);
  }
  _this->_impl_.maxwidgetid_ = from._impl_.maxwidgetid_;
  // @@protoc_insertion_point(copy_constructor:message.UGCHudPrefabData)
}

inline void UGCHudPrefabData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){arena}
    , decltype(_impl_.commondata_){nullptr}
    , decltype(_impl_.maxwidgetid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudPrefabData::~UGCHudPrefabData() {
  // @@protoc_insertion_point(destructor:message.UGCHudPrefabData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudPrefabData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.commondata_;
}

void UGCHudPrefabData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudPrefabData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudPrefabData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.commondata_ != nullptr) {
    delete _impl_.commondata_;
  }
  _impl_.commondata_ = nullptr;
  _impl_.maxwidgetid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudPrefabData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudPrefabCommonData CommonData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commondata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCHudGameObjectData Children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxWidgetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxwidgetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudPrefabData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudPrefabData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudPrefabCommonData CommonData = 1;
  if (this->_internal_has_commondata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::commondata(this),
        _Internal::commondata(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCHudGameObjectData Children = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 MaxWidgetID = 3;
  if (this->_internal_maxwidgetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxwidgetid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudPrefabData)
  return target;
}

size_t UGCHudPrefabData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudPrefabData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCHudGameObjectData Children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.UGCHudPrefabCommonData CommonData = 1;
  if (this->_internal_has_commondata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.commondata_);
  }

  // uint32 MaxWidgetID = 3;
  if (this->_internal_maxwidgetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxwidgetid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudPrefabData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudPrefabData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudPrefabData::GetClassData() const { return &_class_data_; }


void UGCHudPrefabData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudPrefabData*>(&to_msg);
  auto& from = static_cast<const UGCHudPrefabData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudPrefabData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (from._internal_has_commondata()) {
    _this->_internal_mutable_commondata()->::message::UGCHudPrefabCommonData::MergeFrom(
        from._internal_commondata());
  }
  if (from._internal_maxwidgetid() != 0) {
    _this->_internal_set_maxwidgetid(from._internal_maxwidgetid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudPrefabData::CopyFrom(const UGCHudPrefabData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudPrefabData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudPrefabData::IsInitialized() const {
  return true;
}

void UGCHudPrefabData::InternalSwap(UGCHudPrefabData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudPrefabData, _impl_.maxwidgetid_)
      + sizeof(UGCHudPrefabData::_impl_.maxwidgetid_)
      - PROTOBUF_FIELD_OFFSET(UGCHudPrefabData, _impl_.commondata_)>(
          reinterpret_cast<char*>(&_impl_.commondata_),
          reinterpret_cast<char*>(&other->_impl_.commondata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudPrefabData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[115]);
}

// ===================================================================

class UGCHudPrefabDataForEditor::_Internal {
 public:
  static const ::message::UGCHudPrefabCommonData& commondata(const UGCHudPrefabDataForEditor* msg);
};

const ::message::UGCHudPrefabCommonData&
UGCHudPrefabDataForEditor::_Internal::commondata(const UGCHudPrefabDataForEditor* msg) {
  return *msg->_impl_.commondata_;
}
UGCHudPrefabDataForEditor::UGCHudPrefabDataForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudPrefabDataForEditor)
}
UGCHudPrefabDataForEditor::UGCHudPrefabDataForEditor(const UGCHudPrefabDataForEditor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudPrefabDataForEditor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.commondata_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.maxwidgetid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_commondata()) {
    _this->_impl_.commondata_ = new ::message::UGCHudPrefabCommonData(*from._impl_.commondata_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxwidgetid_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.maxwidgetid_));
  // @@protoc_insertion_point(copy_constructor:message.UGCHudPrefabDataForEditor)
}

inline void UGCHudPrefabDataForEditor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.commondata_){nullptr}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.maxwidgetid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCHudPrefabDataForEditor::~UGCHudPrefabDataForEditor() {
  // @@protoc_insertion_point(destructor:message.UGCHudPrefabDataForEditor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudPrefabDataForEditor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.commondata_;
}

void UGCHudPrefabDataForEditor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudPrefabDataForEditor::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudPrefabDataForEditor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.commondata_ != nullptr) {
    delete _impl_.commondata_;
  }
  _impl_.commondata_ = nullptr;
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxwidgetid_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.maxwidgetid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudPrefabDataForEditor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCHudPrefabCommonData CommonData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commondata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCHudGameObjectDataForEditor Children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCHudPrefabDataForEditor.Name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxWidgetID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maxwidgetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudPrefabDataForEditor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudPrefabDataForEditor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCHudPrefabCommonData CommonData = 1;
  if (this->_internal_has_commondata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::commondata(this),
        _Internal::commondata(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCHudGameObjectDataForEditor Children = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCHudPrefabDataForEditor.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint32 Index = 4;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // uint32 MaxWidgetID = 5;
  if (this->_internal_maxwidgetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxwidgetid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudPrefabDataForEditor)
  return target;
}

size_t UGCHudPrefabDataForEditor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudPrefabDataForEditor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCHudGameObjectDataForEditor Children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .message.UGCHudPrefabCommonData CommonData = 1;
  if (this->_internal_has_commondata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.commondata_);
  }

  // uint32 Index = 4;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 MaxWidgetID = 5;
  if (this->_internal_maxwidgetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxwidgetid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudPrefabDataForEditor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudPrefabDataForEditor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudPrefabDataForEditor::GetClassData() const { return &_class_data_; }


void UGCHudPrefabDataForEditor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudPrefabDataForEditor*>(&to_msg);
  auto& from = static_cast<const UGCHudPrefabDataForEditor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudPrefabDataForEditor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_commondata()) {
    _this->_internal_mutable_commondata()->::message::UGCHudPrefabCommonData::MergeFrom(
        from._internal_commondata());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_maxwidgetid() != 0) {
    _this->_internal_set_maxwidgetid(from._internal_maxwidgetid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudPrefabDataForEditor::CopyFrom(const UGCHudPrefabDataForEditor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudPrefabDataForEditor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudPrefabDataForEditor::IsInitialized() const {
  return true;
}

void UGCHudPrefabDataForEditor::InternalSwap(UGCHudPrefabDataForEditor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCHudPrefabDataForEditor, _impl_.maxwidgetid_)
      + sizeof(UGCHudPrefabDataForEditor::_impl_.maxwidgetid_)
      - PROTOBUF_FIELD_OFFSET(UGCHudPrefabDataForEditor, _impl_.commondata_)>(
          reinterpret_cast<char*>(&_impl_.commondata_),
          reinterpret_cast<char*>(&other->_impl_.commondata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudPrefabDataForEditor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[116]);
}

// ===================================================================

class UGCHudPrefabDatas::_Internal {
 public:
};

UGCHudPrefabDatas::UGCHudPrefabDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudPrefabDatas)
}
UGCHudPrefabDatas::UGCHudPrefabDatas(const UGCHudPrefabDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudPrefabDatas* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prefabs_){from._impl_.prefabs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCHudPrefabDatas)
}

inline void UGCHudPrefabDatas::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prefabs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudPrefabDatas::~UGCHudPrefabDatas() {
  // @@protoc_insertion_point(destructor:message.UGCHudPrefabDatas)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudPrefabDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prefabs_.~RepeatedPtrField();
}

void UGCHudPrefabDatas::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudPrefabDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudPrefabDatas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefabs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudPrefabDatas::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCHudPrefabData Prefabs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudPrefabDatas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudPrefabDatas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCHudPrefabData Prefabs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prefabs_size()); i < n; i++) {
    const auto& repfield = this->_internal_prefabs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudPrefabDatas)
  return target;
}

size_t UGCHudPrefabDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudPrefabDatas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCHudPrefabData Prefabs = 1;
  total_size += 1UL * this->_internal_prefabs_size();
  for (const auto& msg : this->_impl_.prefabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudPrefabDatas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudPrefabDatas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudPrefabDatas::GetClassData() const { return &_class_data_; }


void UGCHudPrefabDatas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudPrefabDatas*>(&to_msg);
  auto& from = static_cast<const UGCHudPrefabDatas&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudPrefabDatas)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prefabs_.MergeFrom(from._impl_.prefabs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudPrefabDatas::CopyFrom(const UGCHudPrefabDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudPrefabDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudPrefabDatas::IsInitialized() const {
  return true;
}

void UGCHudPrefabDatas::InternalSwap(UGCHudPrefabDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prefabs_.InternalSwap(&other->_impl_.prefabs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudPrefabDatas::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[117]);
}

// ===================================================================

class UGCHudPrefabDatasForEditor::_Internal {
 public:
};

UGCHudPrefabDatasForEditor::UGCHudPrefabDatasForEditor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCHudPrefabDatasForEditor)
}
UGCHudPrefabDatasForEditor::UGCHudPrefabDatasForEditor(const UGCHudPrefabDatasForEditor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCHudPrefabDatasForEditor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prefabs_){from._impl_.prefabs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCHudPrefabDatasForEditor)
}

inline void UGCHudPrefabDatasForEditor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prefabs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCHudPrefabDatasForEditor::~UGCHudPrefabDatasForEditor() {
  // @@protoc_insertion_point(destructor:message.UGCHudPrefabDatasForEditor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCHudPrefabDatasForEditor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prefabs_.~RepeatedPtrField();
}

void UGCHudPrefabDatasForEditor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCHudPrefabDatasForEditor::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCHudPrefabDatasForEditor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prefabs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCHudPrefabDatasForEditor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCHudPrefabDataForEditor Prefabs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefabs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCHudPrefabDatasForEditor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCHudPrefabDatasForEditor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCHudPrefabDataForEditor Prefabs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prefabs_size()); i < n; i++) {
    const auto& repfield = this->_internal_prefabs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCHudPrefabDatasForEditor)
  return target;
}

size_t UGCHudPrefabDatasForEditor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCHudPrefabDatasForEditor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCHudPrefabDataForEditor Prefabs = 1;
  total_size += 1UL * this->_internal_prefabs_size();
  for (const auto& msg : this->_impl_.prefabs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCHudPrefabDatasForEditor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCHudPrefabDatasForEditor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCHudPrefabDatasForEditor::GetClassData() const { return &_class_data_; }


void UGCHudPrefabDatasForEditor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCHudPrefabDatasForEditor*>(&to_msg);
  auto& from = static_cast<const UGCHudPrefabDatasForEditor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCHudPrefabDatasForEditor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.prefabs_.MergeFrom(from._impl_.prefabs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCHudPrefabDatasForEditor::CopyFrom(const UGCHudPrefabDatasForEditor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCHudPrefabDatasForEditor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCHudPrefabDatasForEditor::IsInitialized() const {
  return true;
}

void UGCHudPrefabDatasForEditor::InternalSwap(UGCHudPrefabDatasForEditor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.prefabs_.InternalSwap(&other->_impl_.prefabs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCHudPrefabDatasForEditor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[118]);
}

// ===================================================================

class UGCProjectData::_Internal {
 public:
};

UGCProjectData::UGCProjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCProjectData)
}
UGCProjectData::UGCProjectData(const UGCProjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCProjectData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grapheditorproject_){}
    , decltype(_impl_.workfloweditorproject_){}
    , decltype(_impl_.entityeditorproject_){}
    , decltype(_impl_.hudeditorproject_){}
    , decltype(_impl_.mapeditorproject_){}
    , decltype(_impl_.modesettingeditorproject_){}
    , decltype(_impl_.compatibleversion_){}
    , decltype(_impl_.publicversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.grapheditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grapheditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_grapheditorproject().empty()) {
    _this->_impl_.grapheditorproject_.Set(from._internal_grapheditorproject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.workfloweditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workfloweditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workfloweditorproject().empty()) {
    _this->_impl_.workfloweditorproject_.Set(from._internal_workfloweditorproject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entityeditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entityeditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entityeditorproject().empty()) {
    _this->_impl_.entityeditorproject_.Set(from._internal_entityeditorproject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hudeditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hudeditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hudeditorproject().empty()) {
    _this->_impl_.hudeditorproject_.Set(from._internal_hudeditorproject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapeditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapeditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapeditorproject().empty()) {
    _this->_impl_.mapeditorproject_.Set(from._internal_mapeditorproject(), 
      _this->GetArenaForAllocation());
  }
  _impl_.modesettingeditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modesettingeditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_modesettingeditorproject().empty()) {
    _this->_impl_.modesettingeditorproject_.Set(from._internal_modesettingeditorproject(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.compatibleversion_, &from._impl_.compatibleversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.publicversion_) -
    reinterpret_cast<char*>(&_impl_.compatibleversion_)) + sizeof(_impl_.publicversion_));
  // @@protoc_insertion_point(copy_constructor:message.UGCProjectData)
}

inline void UGCProjectData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grapheditorproject_){}
    , decltype(_impl_.workfloweditorproject_){}
    , decltype(_impl_.entityeditorproject_){}
    , decltype(_impl_.hudeditorproject_){}
    , decltype(_impl_.mapeditorproject_){}
    , decltype(_impl_.modesettingeditorproject_){}
    , decltype(_impl_.compatibleversion_){0}
    , decltype(_impl_.publicversion_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.grapheditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grapheditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workfloweditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workfloweditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entityeditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entityeditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hudeditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hudeditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapeditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapeditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.modesettingeditorproject_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.modesettingeditorproject_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCProjectData::~UGCProjectData() {
  // @@protoc_insertion_point(destructor:message.UGCProjectData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCProjectData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grapheditorproject_.Destroy();
  _impl_.workfloweditorproject_.Destroy();
  _impl_.entityeditorproject_.Destroy();
  _impl_.hudeditorproject_.Destroy();
  _impl_.mapeditorproject_.Destroy();
  _impl_.modesettingeditorproject_.Destroy();
}

void UGCProjectData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCProjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCProjectData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grapheditorproject_.ClearToEmpty();
  _impl_.workfloweditorproject_.ClearToEmpty();
  _impl_.entityeditorproject_.ClearToEmpty();
  _impl_.hudeditorproject_.ClearToEmpty();
  _impl_.mapeditorproject_.ClearToEmpty();
  _impl_.modesettingeditorproject_.ClearToEmpty();
  ::memset(&_impl_.compatibleversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.publicversion_) -
      reinterpret_cast<char*>(&_impl_.compatibleversion_)) + sizeof(_impl_.publicversion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCProjectData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes GraphEditorProject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_grapheditorproject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes WorkflowEditorProject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_workfloweditorproject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes EntityEditorProject = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_entityeditorproject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes HudEditorProject = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hudeditorproject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes MapEditorProject = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mapeditorproject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ModeSettingEditorProject = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_modesettingeditorproject();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCProjectVersion CompatibleVersion = 999;
      case 999:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compatibleversion(static_cast<::message::EUGCProjectVersion>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 PublicVersion = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.publicversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCProjectData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCProjectData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes GraphEditorProject = 1;
  if (!this->_internal_grapheditorproject().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_grapheditorproject(), target);
  }

  // bytes WorkflowEditorProject = 2;
  if (!this->_internal_workfloweditorproject().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_workfloweditorproject(), target);
  }

  // bytes EntityEditorProject = 3;
  if (!this->_internal_entityeditorproject().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_entityeditorproject(), target);
  }

  // bytes HudEditorProject = 4;
  if (!this->_internal_hudeditorproject().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hudeditorproject(), target);
  }

  // bytes MapEditorProject = 5;
  if (!this->_internal_mapeditorproject().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_mapeditorproject(), target);
  }

  // bytes ModeSettingEditorProject = 6;
  if (!this->_internal_modesettingeditorproject().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_modesettingeditorproject(), target);
  }

  // .message.EUGCProjectVersion CompatibleVersion = 999;
  if (this->_internal_compatibleversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      999, this->_internal_compatibleversion(), target);
  }

  // int32 PublicVersion = 1000;
  if (this->_internal_publicversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1000, this->_internal_publicversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCProjectData)
  return target;
}

size_t UGCProjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCProjectData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes GraphEditorProject = 1;
  if (!this->_internal_grapheditorproject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_grapheditorproject());
  }

  // bytes WorkflowEditorProject = 2;
  if (!this->_internal_workfloweditorproject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_workfloweditorproject());
  }

  // bytes EntityEditorProject = 3;
  if (!this->_internal_entityeditorproject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entityeditorproject());
  }

  // bytes HudEditorProject = 4;
  if (!this->_internal_hudeditorproject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hudeditorproject());
  }

  // bytes MapEditorProject = 5;
  if (!this->_internal_mapeditorproject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mapeditorproject());
  }

  // bytes ModeSettingEditorProject = 6;
  if (!this->_internal_modesettingeditorproject().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_modesettingeditorproject());
  }

  // .message.EUGCProjectVersion CompatibleVersion = 999;
  if (this->_internal_compatibleversion() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compatibleversion());
  }

  // int32 PublicVersion = 1000;
  if (this->_internal_publicversion() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_publicversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCProjectData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCProjectData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCProjectData::GetClassData() const { return &_class_data_; }


void UGCProjectData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCProjectData*>(&to_msg);
  auto& from = static_cast<const UGCProjectData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCProjectData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_grapheditorproject().empty()) {
    _this->_internal_set_grapheditorproject(from._internal_grapheditorproject());
  }
  if (!from._internal_workfloweditorproject().empty()) {
    _this->_internal_set_workfloweditorproject(from._internal_workfloweditorproject());
  }
  if (!from._internal_entityeditorproject().empty()) {
    _this->_internal_set_entityeditorproject(from._internal_entityeditorproject());
  }
  if (!from._internal_hudeditorproject().empty()) {
    _this->_internal_set_hudeditorproject(from._internal_hudeditorproject());
  }
  if (!from._internal_mapeditorproject().empty()) {
    _this->_internal_set_mapeditorproject(from._internal_mapeditorproject());
  }
  if (!from._internal_modesettingeditorproject().empty()) {
    _this->_internal_set_modesettingeditorproject(from._internal_modesettingeditorproject());
  }
  if (from._internal_compatibleversion() != 0) {
    _this->_internal_set_compatibleversion(from._internal_compatibleversion());
  }
  if (from._internal_publicversion() != 0) {
    _this->_internal_set_publicversion(from._internal_publicversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCProjectData::CopyFrom(const UGCProjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCProjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCProjectData::IsInitialized() const {
  return true;
}

void UGCProjectData::InternalSwap(UGCProjectData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.grapheditorproject_, lhs_arena,
      &other->_impl_.grapheditorproject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workfloweditorproject_, lhs_arena,
      &other->_impl_.workfloweditorproject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entityeditorproject_, lhs_arena,
      &other->_impl_.entityeditorproject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hudeditorproject_, lhs_arena,
      &other->_impl_.hudeditorproject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapeditorproject_, lhs_arena,
      &other->_impl_.mapeditorproject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.modesettingeditorproject_, lhs_arena,
      &other->_impl_.modesettingeditorproject_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCProjectData, _impl_.publicversion_)
      + sizeof(UGCProjectData::_impl_.publicversion_)
      - PROTOBUF_FIELD_OFFSET(UGCProjectData, _impl_.compatibleversion_)>(
          reinterpret_cast<char*>(&_impl_.compatibleversion_),
          reinterpret_cast<char*>(&other->_impl_.compatibleversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCProjectData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[119]);
}

// ===================================================================

class UGCProjectMetaData::_Internal {
 public:
  static const ::message::SceneEditModeProtoData& modesettings(const UGCProjectMetaData* msg);
  static const ::message::UGCUserDataForCensorship& userdataforcensorship(const UGCProjectMetaData* msg);
  static const ::message::UGCRoomHalfWayJoinRule& halfwayjoinrule(const UGCProjectMetaData* msg);
};

const ::message::SceneEditModeProtoData&
UGCProjectMetaData::_Internal::modesettings(const UGCProjectMetaData* msg) {
  return *msg->_impl_.modesettings_;
}
const ::message::UGCUserDataForCensorship&
UGCProjectMetaData::_Internal::userdataforcensorship(const UGCProjectMetaData* msg) {
  return *msg->_impl_.userdataforcensorship_;
}
const ::message::UGCRoomHalfWayJoinRule&
UGCProjectMetaData::_Internal::halfwayjoinrule(const UGCProjectMetaData* msg) {
  return *msg->_impl_.halfwayjoinrule_;
}
UGCProjectMetaData::UGCProjectMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCProjectMetaData)
}
UGCProjectMetaData::UGCProjectMetaData(const UGCProjectMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCProjectMetaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
    , decltype(_impl_.locdata_){from._impl_.locdata_}
    , decltype(_impl_.datastorage_){from._impl_.datastorage_}
    , decltype(_impl_.leaderboard_){from._impl_.leaderboard_}
    , decltype(_impl_.statistic_){from._impl_.statistic_}
    , decltype(_impl_.gamename_){}
    , decltype(_impl_.gamedesc_){}
    , decltype(_impl_.workshopbitmap_){}
    , decltype(_impl_.workshopiconmap_){}
    , decltype(_impl_.runtimedatamd5_){}
    , decltype(_impl_.projectdatamd5_){}
    , decltype(_impl_.originalworkshopcode_){}
    , decltype(_impl_.gamenamekey_){}
    , decltype(_impl_.gamedesckey_){}
    , decltype(_impl_.customcover_){}
    , decltype(_impl_.customcoverurl_){}
    , decltype(_impl_.roomparams_){}
    , decltype(_impl_.packagedatamd5_){}
    , decltype(_impl_.openroomlocdatamd5_){}
    , decltype(_impl_.subdesc_){}
    , decltype(_impl_.modesettings_){nullptr}
    , decltype(_impl_.userdataforcensorship_){nullptr}
    , decltype(_impl_.halfwayjoinrule_){nullptr}
    , decltype(_impl_.slotid_){}
    , decltype(_impl_.gamemode_){}
    , decltype(_impl_.groupmode_){}
    , decltype(_impl_.teamcount_){}
    , decltype(_impl_.gameresourcecount_){}
    , decltype(_impl_.gametotalcost_){}
    , decltype(_impl_.updatetime_){}
    , decltype(_impl_.runtimedatalength_){}
    , decltype(_impl_.projectdatalength_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.compatibleversion_){}
    , decltype(_impl_.modetemplateid_){}
    , decltype(_impl_.severity_){}
    , decltype(_impl_.publicversion_){}
    , decltype(_impl_.secedit_){}
    , decltype(_impl_.notify_subscriber_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gamename().empty()) {
    _this->_impl_.gamename_.Set(from._internal_gamename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gamedesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamedesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gamedesc().empty()) {
    _this->_impl_.gamedesc_.Set(from._internal_gamedesc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.workshopbitmap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workshopbitmap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workshopbitmap().empty()) {
    _this->_impl_.workshopbitmap_.Set(from._internal_workshopbitmap(), 
      _this->GetArenaForAllocation());
  }
  _impl_.workshopiconmap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workshopiconmap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workshopiconmap().empty()) {
    _this->_impl_.workshopiconmap_.Set(from._internal_workshopiconmap(), 
      _this->GetArenaForAllocation());
  }
  _impl_.runtimedatamd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtimedatamd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_runtimedatamd5().empty()) {
    _this->_impl_.runtimedatamd5_.Set(from._internal_runtimedatamd5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.projectdatamd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectdatamd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_projectdatamd5().empty()) {
    _this->_impl_.projectdatamd5_.Set(from._internal_projectdatamd5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.originalworkshopcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalworkshopcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_originalworkshopcode().empty()) {
    _this->_impl_.originalworkshopcode_.Set(from._internal_originalworkshopcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gamenamekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamenamekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gamenamekey().empty()) {
    _this->_impl_.gamenamekey_.Set(from._internal_gamenamekey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gamedesckey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamedesckey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gamedesckey().empty()) {
    _this->_impl_.gamedesckey_.Set(from._internal_gamedesckey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.customcover_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customcover_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customcover().empty()) {
    _this->_impl_.customcover_.Set(from._internal_customcover(), 
      _this->GetArenaForAllocation());
  }
  _impl_.customcoverurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customcoverurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customcoverurl().empty()) {
    _this->_impl_.customcoverurl_.Set(from._internal_customcoverurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.roomparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomparams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomparams().empty()) {
    _this->_impl_.roomparams_.Set(from._internal_roomparams(), 
      _this->GetArenaForAllocation());
  }
  _impl_.packagedatamd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packagedatamd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packagedatamd5().empty()) {
    _this->_impl_.packagedatamd5_.Set(from._internal_packagedatamd5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.openroomlocdatamd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openroomlocdatamd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_openroomlocdatamd5().empty()) {
    _this->_impl_.openroomlocdatamd5_.Set(from._internal_openroomlocdatamd5(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subdesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subdesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subdesc().empty()) {
    _this->_impl_.subdesc_.Set(from._internal_subdesc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_modesettings()) {
    _this->_impl_.modesettings_ = new ::message::SceneEditModeProtoData(*from._impl_.modesettings_);
  }
  if (from._internal_has_userdataforcensorship()) {
    _this->_impl_.userdataforcensorship_ = new ::message::UGCUserDataForCensorship(*from._impl_.userdataforcensorship_);
  }
  if (from._internal_has_halfwayjoinrule()) {
    _this->_impl_.halfwayjoinrule_ = new ::message::UGCRoomHalfWayJoinRule(*from._impl_.halfwayjoinrule_);
  }
  ::memcpy(&_impl_.slotid_, &from._impl_.slotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.notify_subscriber_) -
    reinterpret_cast<char*>(&_impl_.slotid_)) + sizeof(_impl_.notify_subscriber_));
  // @@protoc_insertion_point(copy_constructor:message.UGCProjectMetaData)
}

inline void UGCProjectMetaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
    , decltype(_impl_.locdata_){arena}
    , decltype(_impl_.datastorage_){arena}
    , decltype(_impl_.leaderboard_){arena}
    , decltype(_impl_.statistic_){arena}
    , decltype(_impl_.gamename_){}
    , decltype(_impl_.gamedesc_){}
    , decltype(_impl_.workshopbitmap_){}
    , decltype(_impl_.workshopiconmap_){}
    , decltype(_impl_.runtimedatamd5_){}
    , decltype(_impl_.projectdatamd5_){}
    , decltype(_impl_.originalworkshopcode_){}
    , decltype(_impl_.gamenamekey_){}
    , decltype(_impl_.gamedesckey_){}
    , decltype(_impl_.customcover_){}
    , decltype(_impl_.customcoverurl_){}
    , decltype(_impl_.roomparams_){}
    , decltype(_impl_.packagedatamd5_){}
    , decltype(_impl_.openroomlocdatamd5_){}
    , decltype(_impl_.subdesc_){}
    , decltype(_impl_.modesettings_){nullptr}
    , decltype(_impl_.userdataforcensorship_){nullptr}
    , decltype(_impl_.halfwayjoinrule_){nullptr}
    , decltype(_impl_.slotid_){0u}
    , decltype(_impl_.gamemode_){0u}
    , decltype(_impl_.groupmode_){0u}
    , decltype(_impl_.teamcount_){0u}
    , decltype(_impl_.gameresourcecount_){uint64_t{0u}}
    , decltype(_impl_.gametotalcost_){uint64_t{0u}}
    , decltype(_impl_.updatetime_){uint64_t{0u}}
    , decltype(_impl_.runtimedatalength_){uint64_t{0u}}
    , decltype(_impl_.projectdatalength_){uint64_t{0u}}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.compatibleversion_){0}
    , decltype(_impl_.modetemplateid_){0u}
    , decltype(_impl_.severity_){0}
    , decltype(_impl_.publicversion_){0}
    , decltype(_impl_.secedit_){false}
    , decltype(_impl_.notify_subscriber_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gamedesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamedesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workshopbitmap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workshopbitmap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workshopiconmap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workshopiconmap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.runtimedatamd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtimedatamd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.projectdatamd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.projectdatamd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.originalworkshopcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.originalworkshopcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gamenamekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamenamekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gamedesckey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamedesckey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customcover_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customcover_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customcoverurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customcoverurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.roomparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomparams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.packagedatamd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packagedatamd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openroomlocdatamd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openroomlocdatamd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subdesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subdesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCProjectMetaData::~UGCProjectMetaData() {
  // @@protoc_insertion_point(destructor:message.UGCProjectMetaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCProjectMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedField();
  _impl_.locdata_.~RepeatedPtrField();
  _impl_.datastorage_.~RepeatedPtrField();
  _impl_.leaderboard_.~RepeatedPtrField();
  _impl_.statistic_.~RepeatedPtrField();
  _impl_.gamename_.Destroy();
  _impl_.gamedesc_.Destroy();
  _impl_.workshopbitmap_.Destroy();
  _impl_.workshopiconmap_.Destroy();
  _impl_.runtimedatamd5_.Destroy();
  _impl_.projectdatamd5_.Destroy();
  _impl_.originalworkshopcode_.Destroy();
  _impl_.gamenamekey_.Destroy();
  _impl_.gamedesckey_.Destroy();
  _impl_.customcover_.Destroy();
  _impl_.customcoverurl_.Destroy();
  _impl_.roomparams_.Destroy();
  _impl_.packagedatamd5_.Destroy();
  _impl_.openroomlocdatamd5_.Destroy();
  _impl_.subdesc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.modesettings_;
  if (this != internal_default_instance()) delete _impl_.userdataforcensorship_;
  if (this != internal_default_instance()) delete _impl_.halfwayjoinrule_;
}

void UGCProjectMetaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCProjectMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCProjectMetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.locdata_.Clear();
  _impl_.datastorage_.Clear();
  _impl_.leaderboard_.Clear();
  _impl_.statistic_.Clear();
  _impl_.gamename_.ClearToEmpty();
  _impl_.gamedesc_.ClearToEmpty();
  _impl_.workshopbitmap_.ClearToEmpty();
  _impl_.workshopiconmap_.ClearToEmpty();
  _impl_.runtimedatamd5_.ClearToEmpty();
  _impl_.projectdatamd5_.ClearToEmpty();
  _impl_.originalworkshopcode_.ClearToEmpty();
  _impl_.gamenamekey_.ClearToEmpty();
  _impl_.gamedesckey_.ClearToEmpty();
  _impl_.customcover_.ClearToEmpty();
  _impl_.customcoverurl_.ClearToEmpty();
  _impl_.roomparams_.ClearToEmpty();
  _impl_.packagedatamd5_.ClearToEmpty();
  _impl_.openroomlocdatamd5_.ClearToEmpty();
  _impl_.subdesc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.modesettings_ != nullptr) {
    delete _impl_.modesettings_;
  }
  _impl_.modesettings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.userdataforcensorship_ != nullptr) {
    delete _impl_.userdataforcensorship_;
  }
  _impl_.userdataforcensorship_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.halfwayjoinrule_ != nullptr) {
    delete _impl_.halfwayjoinrule_;
  }
  _impl_.halfwayjoinrule_ = nullptr;
  ::memset(&_impl_.slotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.notify_subscriber_) -
      reinterpret_cast<char*>(&_impl_.slotid_)) + sizeof(_impl_.notify_subscriber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCProjectMetaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SlotID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.slotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string GameName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gamename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCProjectMetaData.GameName"));
        } else
          goto handle_unusual;
        continue;
      // string GameDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gamedesc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCProjectMetaData.GameDesc"));
        } else
          goto handle_unusual;
        continue;
      // uint32 GameMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gamemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GroupMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.groupmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.teamcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 GameResourceCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.gameresourcecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 GameTotalCost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.gametotalcost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 UpdateTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.updatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 Tags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_tags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes WorkshopBitMap = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_workshopbitmap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes WorkshopIconMap = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_workshopiconmap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.SceneEditModeProtoData ModeSettings = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_modesettings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 RuntimeDataLength = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.runtimedatalength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ProjectDataLength = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.projectdatalength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCUserDataForCensorship UserDataForCensorship = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_userdataforcensorship(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MapID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCProjectVersion CompatibleVersion = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compatibleversion(static_cast<::message::EUGCProjectVersion>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes RuntimeDataMD5 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_runtimedatamd5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ProjectDataMD5 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_projectdatamd5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ModeTemplateId = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.modetemplateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCEditorError.ErrorSeverity Severity = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::message::UGCEditorError_ErrorSeverity>(val));
        } else
          goto handle_unusual;
        continue;
      // bool SecEdit = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.secedit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PublicVersion = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.publicversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OriginalWorkshopCode = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_originalworkshopcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCProjectMetaData.OriginalWorkshopCode"));
        } else
          goto handle_unusual;
        continue;
      // string GameNameKey = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_gamenamekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCProjectMetaData.GameNameKey"));
        } else
          goto handle_unusual;
        continue;
      // string GameDescKey = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_gamedesckey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCProjectMetaData.GameDescKey"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCLocData LocData = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_locdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes CustomCover = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_customcover();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string CustomCoverUrl = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_customcoverurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCProjectMetaData.CustomCoverUrl"));
        } else
          goto handle_unusual;
        continue;
      // bytes RoomParams = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_roomparams();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes PackageDataMD5 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_packagedatamd5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes OpenRoomLocDataMD5 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_openroomlocdatamd5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCRoomHalfWayJoinRule halfWayJoinRule = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_halfwayjoinrule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SubDesc = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subdesc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCProjectMetaData.SubDesc"));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes DataStorage = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_datastorage();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes LeaderBoard = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_leaderboard();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<298>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool notify_subscriber = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.notify_subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes Statistic = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_statistic();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<314>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCProjectMetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCProjectMetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SlotID = 1;
  if (this->_internal_slotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slotid(), target);
  }

  // string GameName = 2;
  if (!this->_internal_gamename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamename().data(), static_cast<int>(this->_internal_gamename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCProjectMetaData.GameName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gamename(), target);
  }

  // string GameDesc = 3;
  if (!this->_internal_gamedesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamedesc().data(), static_cast<int>(this->_internal_gamedesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCProjectMetaData.GameDesc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gamedesc(), target);
  }

  // uint32 GameMode = 4;
  if (this->_internal_gamemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gamemode(), target);
  }

  // uint32 GroupMode = 5;
  if (this->_internal_groupmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_groupmode(), target);
  }

  // uint32 TeamCount = 6;
  if (this->_internal_teamcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_teamcount(), target);
  }

  // uint64 GameResourceCount = 7;
  if (this->_internal_gameresourcecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gameresourcecount(), target);
  }

  // uint64 GameTotalCost = 8;
  if (this->_internal_gametotalcost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gametotalcost(), target);
  }

  // uint64 UpdateTime = 9;
  if (this->_internal_updatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_updatetime(), target);
  }

  // repeated uint32 Tags = 10;
  {
    int byte_size = _impl_._tags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_tags(), byte_size, target);
    }
  }

  // bytes WorkshopBitMap = 11;
  if (!this->_internal_workshopbitmap().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_workshopbitmap(), target);
  }

  // bytes WorkshopIconMap = 12;
  if (!this->_internal_workshopiconmap().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_workshopiconmap(), target);
  }

  // .message.SceneEditModeProtoData ModeSettings = 13;
  if (this->_internal_has_modesettings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::modesettings(this),
        _Internal::modesettings(this).GetCachedSize(), target, stream);
  }

  // uint64 RuntimeDataLength = 14;
  if (this->_internal_runtimedatalength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_runtimedatalength(), target);
  }

  // uint64 ProjectDataLength = 15;
  if (this->_internal_projectdatalength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_projectdatalength(), target);
  }

  // .message.UGCUserDataForCensorship UserDataForCensorship = 16;
  if (this->_internal_has_userdataforcensorship()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::userdataforcensorship(this),
        _Internal::userdataforcensorship(this).GetCachedSize(), target, stream);
  }

  // uint32 MapID = 17;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_mapid(), target);
  }

  // .message.EUGCProjectVersion CompatibleVersion = 18;
  if (this->_internal_compatibleversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_compatibleversion(), target);
  }

  // bytes RuntimeDataMD5 = 19;
  if (!this->_internal_runtimedatamd5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_runtimedatamd5(), target);
  }

  // bytes ProjectDataMD5 = 20;
  if (!this->_internal_projectdatamd5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_projectdatamd5(), target);
  }

  // uint32 ModeTemplateId = 21;
  if (this->_internal_modetemplateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_modetemplateid(), target);
  }

  // .message.UGCEditorError.ErrorSeverity Severity = 22;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_severity(), target);
  }

  // bool SecEdit = 23;
  if (this->_internal_secedit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_secedit(), target);
  }

  // int32 PublicVersion = 24;
  if (this->_internal_publicversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_publicversion(), target);
  }

  // string OriginalWorkshopCode = 25;
  if (!this->_internal_originalworkshopcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_originalworkshopcode().data(), static_cast<int>(this->_internal_originalworkshopcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCProjectMetaData.OriginalWorkshopCode");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_originalworkshopcode(), target);
  }

  // string GameNameKey = 26;
  if (!this->_internal_gamenamekey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamenamekey().data(), static_cast<int>(this->_internal_gamenamekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCProjectMetaData.GameNameKey");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_gamenamekey(), target);
  }

  // string GameDescKey = 27;
  if (!this->_internal_gamedesckey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamedesckey().data(), static_cast<int>(this->_internal_gamedesckey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCProjectMetaData.GameDescKey");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_gamedesckey(), target);
  }

  // repeated .message.UGCLocData LocData = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_locdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_locdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes CustomCover = 29;
  if (!this->_internal_customcover().empty()) {
    target = stream->WriteBytesMaybeAliased(
        29, this->_internal_customcover(), target);
  }

  // string CustomCoverUrl = 30;
  if (!this->_internal_customcoverurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customcoverurl().data(), static_cast<int>(this->_internal_customcoverurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCProjectMetaData.CustomCoverUrl");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_customcoverurl(), target);
  }

  // bytes RoomParams = 31;
  if (!this->_internal_roomparams().empty()) {
    target = stream->WriteBytesMaybeAliased(
        31, this->_internal_roomparams(), target);
  }

  // bytes PackageDataMD5 = 32;
  if (!this->_internal_packagedatamd5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        32, this->_internal_packagedatamd5(), target);
  }

  // bytes OpenRoomLocDataMD5 = 33;
  if (!this->_internal_openroomlocdatamd5().empty()) {
    target = stream->WriteBytesMaybeAliased(
        33, this->_internal_openroomlocdatamd5(), target);
  }

  // .message.UGCRoomHalfWayJoinRule halfWayJoinRule = 34;
  if (this->_internal_has_halfwayjoinrule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::halfwayjoinrule(this),
        _Internal::halfwayjoinrule(this).GetCachedSize(), target, stream);
  }

  // string SubDesc = 35;
  if (!this->_internal_subdesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subdesc().data(), static_cast<int>(this->_internal_subdesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCProjectMetaData.SubDesc");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_subdesc(), target);
  }

  // repeated bytes DataStorage = 36;
  for (int i = 0, n = this->_internal_datastorage_size(); i < n; i++) {
    const auto& s = this->_internal_datastorage(i);
    target = stream->WriteBytes(36, s, target);
  }

  // repeated bytes LeaderBoard = 37;
  for (int i = 0, n = this->_internal_leaderboard_size(); i < n; i++) {
    const auto& s = this->_internal_leaderboard(i);
    target = stream->WriteBytes(37, s, target);
  }

  // bool notify_subscriber = 38;
  if (this->_internal_notify_subscriber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_notify_subscriber(), target);
  }

  // repeated bytes Statistic = 39;
  for (int i = 0, n = this->_internal_statistic_size(); i < n; i++) {
    const auto& s = this->_internal_statistic(i);
    target = stream->WriteBytes(39, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCProjectMetaData)
  return target;
}

size_t UGCProjectMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCProjectMetaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Tags = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.tags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .message.UGCLocData LocData = 28;
  total_size += 2UL * this->_internal_locdata_size();
  for (const auto& msg : this->_impl_.locdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes DataStorage = 36;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datastorage_.size());
  for (int i = 0, n = _impl_.datastorage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.datastorage_.Get(i));
  }

  // repeated bytes LeaderBoard = 37;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.leaderboard_.size());
  for (int i = 0, n = _impl_.leaderboard_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.leaderboard_.Get(i));
  }

  // repeated bytes Statistic = 39;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.statistic_.size());
  for (int i = 0, n = _impl_.statistic_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.statistic_.Get(i));
  }

  // string GameName = 2;
  if (!this->_internal_gamename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamename());
  }

  // string GameDesc = 3;
  if (!this->_internal_gamedesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamedesc());
  }

  // bytes WorkshopBitMap = 11;
  if (!this->_internal_workshopbitmap().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_workshopbitmap());
  }

  // bytes WorkshopIconMap = 12;
  if (!this->_internal_workshopiconmap().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_workshopiconmap());
  }

  // bytes RuntimeDataMD5 = 19;
  if (!this->_internal_runtimedatamd5().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_runtimedatamd5());
  }

  // bytes ProjectDataMD5 = 20;
  if (!this->_internal_projectdatamd5().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_projectdatamd5());
  }

  // string OriginalWorkshopCode = 25;
  if (!this->_internal_originalworkshopcode().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_originalworkshopcode());
  }

  // string GameNameKey = 26;
  if (!this->_internal_gamenamekey().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamenamekey());
  }

  // string GameDescKey = 27;
  if (!this->_internal_gamedesckey().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamedesckey());
  }

  // bytes CustomCover = 29;
  if (!this->_internal_customcover().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_customcover());
  }

  // string CustomCoverUrl = 30;
  if (!this->_internal_customcoverurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customcoverurl());
  }

  // bytes RoomParams = 31;
  if (!this->_internal_roomparams().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_roomparams());
  }

  // bytes PackageDataMD5 = 32;
  if (!this->_internal_packagedatamd5().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_packagedatamd5());
  }

  // bytes OpenRoomLocDataMD5 = 33;
  if (!this->_internal_openroomlocdatamd5().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_openroomlocdatamd5());
  }

  // string SubDesc = 35;
  if (!this->_internal_subdesc().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subdesc());
  }

  // .message.SceneEditModeProtoData ModeSettings = 13;
  if (this->_internal_has_modesettings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modesettings_);
  }

  // .message.UGCUserDataForCensorship UserDataForCensorship = 16;
  if (this->_internal_has_userdataforcensorship()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.userdataforcensorship_);
  }

  // .message.UGCRoomHalfWayJoinRule halfWayJoinRule = 34;
  if (this->_internal_has_halfwayjoinrule()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.halfwayjoinrule_);
  }

  // uint32 SlotID = 1;
  if (this->_internal_slotid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slotid());
  }

  // uint32 GameMode = 4;
  if (this->_internal_gamemode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gamemode());
  }

  // uint32 GroupMode = 5;
  if (this->_internal_groupmode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupmode());
  }

  // uint32 TeamCount = 6;
  if (this->_internal_teamcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamcount());
  }

  // uint64 GameResourceCount = 7;
  if (this->_internal_gameresourcecount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gameresourcecount());
  }

  // uint64 GameTotalCost = 8;
  if (this->_internal_gametotalcost() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gametotalcost());
  }

  // uint64 UpdateTime = 9;
  if (this->_internal_updatetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_updatetime());
  }

  // uint64 RuntimeDataLength = 14;
  if (this->_internal_runtimedatalength() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_runtimedatalength());
  }

  // uint64 ProjectDataLength = 15;
  if (this->_internal_projectdatalength() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_projectdatalength());
  }

  // uint32 MapID = 17;
  if (this->_internal_mapid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  // .message.EUGCProjectVersion CompatibleVersion = 18;
  if (this->_internal_compatibleversion() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compatibleversion());
  }

  // uint32 ModeTemplateId = 21;
  if (this->_internal_modetemplateid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_modetemplateid());
  }

  // .message.UGCEditorError.ErrorSeverity Severity = 22;
  if (this->_internal_severity() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // int32 PublicVersion = 24;
  if (this->_internal_publicversion() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_publicversion());
  }

  // bool SecEdit = 23;
  if (this->_internal_secedit() != 0) {
    total_size += 2 + 1;
  }

  // bool notify_subscriber = 38;
  if (this->_internal_notify_subscriber() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCProjectMetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCProjectMetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCProjectMetaData::GetClassData() const { return &_class_data_; }


void UGCProjectMetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCProjectMetaData*>(&to_msg);
  auto& from = static_cast<const UGCProjectMetaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCProjectMetaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  _this->_impl_.locdata_.MergeFrom(from._impl_.locdata_);
  _this->_impl_.datastorage_.MergeFrom(from._impl_.datastorage_);
  _this->_impl_.leaderboard_.MergeFrom(from._impl_.leaderboard_);
  _this->_impl_.statistic_.MergeFrom(from._impl_.statistic_);
  if (!from._internal_gamename().empty()) {
    _this->_internal_set_gamename(from._internal_gamename());
  }
  if (!from._internal_gamedesc().empty()) {
    _this->_internal_set_gamedesc(from._internal_gamedesc());
  }
  if (!from._internal_workshopbitmap().empty()) {
    _this->_internal_set_workshopbitmap(from._internal_workshopbitmap());
  }
  if (!from._internal_workshopiconmap().empty()) {
    _this->_internal_set_workshopiconmap(from._internal_workshopiconmap());
  }
  if (!from._internal_runtimedatamd5().empty()) {
    _this->_internal_set_runtimedatamd5(from._internal_runtimedatamd5());
  }
  if (!from._internal_projectdatamd5().empty()) {
    _this->_internal_set_projectdatamd5(from._internal_projectdatamd5());
  }
  if (!from._internal_originalworkshopcode().empty()) {
    _this->_internal_set_originalworkshopcode(from._internal_originalworkshopcode());
  }
  if (!from._internal_gamenamekey().empty()) {
    _this->_internal_set_gamenamekey(from._internal_gamenamekey());
  }
  if (!from._internal_gamedesckey().empty()) {
    _this->_internal_set_gamedesckey(from._internal_gamedesckey());
  }
  if (!from._internal_customcover().empty()) {
    _this->_internal_set_customcover(from._internal_customcover());
  }
  if (!from._internal_customcoverurl().empty()) {
    _this->_internal_set_customcoverurl(from._internal_customcoverurl());
  }
  if (!from._internal_roomparams().empty()) {
    _this->_internal_set_roomparams(from._internal_roomparams());
  }
  if (!from._internal_packagedatamd5().empty()) {
    _this->_internal_set_packagedatamd5(from._internal_packagedatamd5());
  }
  if (!from._internal_openroomlocdatamd5().empty()) {
    _this->_internal_set_openroomlocdatamd5(from._internal_openroomlocdatamd5());
  }
  if (!from._internal_subdesc().empty()) {
    _this->_internal_set_subdesc(from._internal_subdesc());
  }
  if (from._internal_has_modesettings()) {
    _this->_internal_mutable_modesettings()->::message::SceneEditModeProtoData::MergeFrom(
        from._internal_modesettings());
  }
  if (from._internal_has_userdataforcensorship()) {
    _this->_internal_mutable_userdataforcensorship()->::message::UGCUserDataForCensorship::MergeFrom(
        from._internal_userdataforcensorship());
  }
  if (from._internal_has_halfwayjoinrule()) {
    _this->_internal_mutable_halfwayjoinrule()->::message::UGCRoomHalfWayJoinRule::MergeFrom(
        from._internal_halfwayjoinrule());
  }
  if (from._internal_slotid() != 0) {
    _this->_internal_set_slotid(from._internal_slotid());
  }
  if (from._internal_gamemode() != 0) {
    _this->_internal_set_gamemode(from._internal_gamemode());
  }
  if (from._internal_groupmode() != 0) {
    _this->_internal_set_groupmode(from._internal_groupmode());
  }
  if (from._internal_teamcount() != 0) {
    _this->_internal_set_teamcount(from._internal_teamcount());
  }
  if (from._internal_gameresourcecount() != 0) {
    _this->_internal_set_gameresourcecount(from._internal_gameresourcecount());
  }
  if (from._internal_gametotalcost() != 0) {
    _this->_internal_set_gametotalcost(from._internal_gametotalcost());
  }
  if (from._internal_updatetime() != 0) {
    _this->_internal_set_updatetime(from._internal_updatetime());
  }
  if (from._internal_runtimedatalength() != 0) {
    _this->_internal_set_runtimedatalength(from._internal_runtimedatalength());
  }
  if (from._internal_projectdatalength() != 0) {
    _this->_internal_set_projectdatalength(from._internal_projectdatalength());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_compatibleversion() != 0) {
    _this->_internal_set_compatibleversion(from._internal_compatibleversion());
  }
  if (from._internal_modetemplateid() != 0) {
    _this->_internal_set_modetemplateid(from._internal_modetemplateid());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  if (from._internal_publicversion() != 0) {
    _this->_internal_set_publicversion(from._internal_publicversion());
  }
  if (from._internal_secedit() != 0) {
    _this->_internal_set_secedit(from._internal_secedit());
  }
  if (from._internal_notify_subscriber() != 0) {
    _this->_internal_set_notify_subscriber(from._internal_notify_subscriber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCProjectMetaData::CopyFrom(const UGCProjectMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCProjectMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCProjectMetaData::IsInitialized() const {
  return true;
}

void UGCProjectMetaData::InternalSwap(UGCProjectMetaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  _impl_.locdata_.InternalSwap(&other->_impl_.locdata_);
  _impl_.datastorage_.InternalSwap(&other->_impl_.datastorage_);
  _impl_.leaderboard_.InternalSwap(&other->_impl_.leaderboard_);
  _impl_.statistic_.InternalSwap(&other->_impl_.statistic_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamename_, lhs_arena,
      &other->_impl_.gamename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamedesc_, lhs_arena,
      &other->_impl_.gamedesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workshopbitmap_, lhs_arena,
      &other->_impl_.workshopbitmap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workshopiconmap_, lhs_arena,
      &other->_impl_.workshopiconmap_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.runtimedatamd5_, lhs_arena,
      &other->_impl_.runtimedatamd5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.projectdatamd5_, lhs_arena,
      &other->_impl_.projectdatamd5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.originalworkshopcode_, lhs_arena,
      &other->_impl_.originalworkshopcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamenamekey_, lhs_arena,
      &other->_impl_.gamenamekey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamedesckey_, lhs_arena,
      &other->_impl_.gamedesckey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customcover_, lhs_arena,
      &other->_impl_.customcover_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customcoverurl_, lhs_arena,
      &other->_impl_.customcoverurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roomparams_, lhs_arena,
      &other->_impl_.roomparams_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packagedatamd5_, lhs_arena,
      &other->_impl_.packagedatamd5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.openroomlocdatamd5_, lhs_arena,
      &other->_impl_.openroomlocdatamd5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subdesc_, lhs_arena,
      &other->_impl_.subdesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCProjectMetaData, _impl_.notify_subscriber_)
      + sizeof(UGCProjectMetaData::_impl_.notify_subscriber_)
      - PROTOBUF_FIELD_OFFSET(UGCProjectMetaData, _impl_.modesettings_)>(
          reinterpret_cast<char*>(&_impl_.modesettings_),
          reinterpret_cast<char*>(&other->_impl_.modesettings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCProjectMetaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[120]);
}

// ===================================================================

class UGCUserDataForCensorship_BlobOfCustomStrings::_Internal {
 public:
};

UGCUserDataForCensorship_BlobOfCustomStrings::UGCUserDataForCensorship_BlobOfCustomStrings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCUserDataForCensorship.BlobOfCustomStrings)
}
UGCUserDataForCensorship_BlobOfCustomStrings::UGCUserDataForCensorship_BlobOfCustomStrings(const UGCUserDataForCensorship_BlobOfCustomStrings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCUserDataForCensorship_BlobOfCustomStrings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stringlist_){from._impl_.stringlist_}
    , decltype(_impl_.entitytypename_){}
    , decltype(_impl_.graphid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.entitytype_){}
    , decltype(_impl_.wordfiltertype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entitytypename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitytypename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entitytypename().empty()) {
    _this->_impl_.entitytypename_.Set(from._internal_entitytypename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.graphid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graphid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_graphid().empty()) {
    _this->_impl_.graphid_.Set(from._internal_graphid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.entitytype_, &from._impl_.entitytype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wordfiltertype_) -
    reinterpret_cast<char*>(&_impl_.entitytype_)) + sizeof(_impl_.wordfiltertype_));
  // @@protoc_insertion_point(copy_constructor:message.UGCUserDataForCensorship.BlobOfCustomStrings)
}

inline void UGCUserDataForCensorship_BlobOfCustomStrings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stringlist_){arena}
    , decltype(_impl_.entitytypename_){}
    , decltype(_impl_.graphid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.entitytype_){0u}
    , decltype(_impl_.wordfiltertype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entitytypename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitytypename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.graphid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graphid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCUserDataForCensorship_BlobOfCustomStrings::~UGCUserDataForCensorship_BlobOfCustomStrings() {
  // @@protoc_insertion_point(destructor:message.UGCUserDataForCensorship.BlobOfCustomStrings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCUserDataForCensorship_BlobOfCustomStrings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stringlist_.~RepeatedPtrField();
  _impl_.entitytypename_.Destroy();
  _impl_.graphid_.Destroy();
  _impl_.id_.Destroy();
}

void UGCUserDataForCensorship_BlobOfCustomStrings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCUserDataForCensorship_BlobOfCustomStrings::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCUserDataForCensorship.BlobOfCustomStrings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stringlist_.Clear();
  _impl_.entitytypename_.ClearToEmpty();
  _impl_.graphid_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  ::memset(&_impl_.entitytype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.wordfiltertype_) -
      reinterpret_cast<char*>(&_impl_.entitytype_)) + sizeof(_impl_.wordfiltertype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCUserDataForCensorship_BlobOfCustomStrings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string StringList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stringlist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 EntityType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.entitytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string EntityTypeName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_entitytypename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCUserDataForCensorship.BlobOfCustomStrings.EntityTypeName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 WordFilterType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.wordfiltertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string GraphID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_graphid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCUserDataForCensorship.BlobOfCustomStrings.GraphID"));
        } else
          goto handle_unusual;
        continue;
      // string ID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCUserDataForCensorship.BlobOfCustomStrings.ID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCUserDataForCensorship_BlobOfCustomStrings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCUserDataForCensorship.BlobOfCustomStrings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string StringList = 1;
  for (int i = 0, n = this->_internal_stringlist_size(); i < n; i++) {
    const auto& s = this->_internal_stringlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCUserDataForCensorship.BlobOfCustomStrings.StringList");
    target = stream->WriteString(1, s, target);
  }

  // uint32 EntityType = 2;
  if (this->_internal_entitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entitytype(), target);
  }

  // string EntityTypeName = 3;
  if (!this->_internal_entitytypename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entitytypename().data(), static_cast<int>(this->_internal_entitytypename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCUserDataForCensorship.BlobOfCustomStrings.EntityTypeName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_entitytypename(), target);
  }

  // uint32 WordFilterType = 4;
  if (this->_internal_wordfiltertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_wordfiltertype(), target);
  }

  // string GraphID = 5;
  if (!this->_internal_graphid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graphid().data(), static_cast<int>(this->_internal_graphid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCUserDataForCensorship.BlobOfCustomStrings.GraphID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_graphid(), target);
  }

  // string ID = 6;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCUserDataForCensorship.BlobOfCustomStrings.ID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCUserDataForCensorship.BlobOfCustomStrings)
  return target;
}

size_t UGCUserDataForCensorship_BlobOfCustomStrings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCUserDataForCensorship.BlobOfCustomStrings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string StringList = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stringlist_.size());
  for (int i = 0, n = _impl_.stringlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stringlist_.Get(i));
  }

  // string EntityTypeName = 3;
  if (!this->_internal_entitytypename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entitytypename());
  }

  // string GraphID = 5;
  if (!this->_internal_graphid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graphid());
  }

  // string ID = 6;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 EntityType = 2;
  if (this->_internal_entitytype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entitytype());
  }

  // uint32 WordFilterType = 4;
  if (this->_internal_wordfiltertype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wordfiltertype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCUserDataForCensorship_BlobOfCustomStrings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCUserDataForCensorship_BlobOfCustomStrings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCUserDataForCensorship_BlobOfCustomStrings::GetClassData() const { return &_class_data_; }


void UGCUserDataForCensorship_BlobOfCustomStrings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCUserDataForCensorship_BlobOfCustomStrings*>(&to_msg);
  auto& from = static_cast<const UGCUserDataForCensorship_BlobOfCustomStrings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCUserDataForCensorship.BlobOfCustomStrings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stringlist_.MergeFrom(from._impl_.stringlist_);
  if (!from._internal_entitytypename().empty()) {
    _this->_internal_set_entitytypename(from._internal_entitytypename());
  }
  if (!from._internal_graphid().empty()) {
    _this->_internal_set_graphid(from._internal_graphid());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_entitytype() != 0) {
    _this->_internal_set_entitytype(from._internal_entitytype());
  }
  if (from._internal_wordfiltertype() != 0) {
    _this->_internal_set_wordfiltertype(from._internal_wordfiltertype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCUserDataForCensorship_BlobOfCustomStrings::CopyFrom(const UGCUserDataForCensorship_BlobOfCustomStrings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCUserDataForCensorship.BlobOfCustomStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCUserDataForCensorship_BlobOfCustomStrings::IsInitialized() const {
  return true;
}

void UGCUserDataForCensorship_BlobOfCustomStrings::InternalSwap(UGCUserDataForCensorship_BlobOfCustomStrings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stringlist_.InternalSwap(&other->_impl_.stringlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entitytypename_, lhs_arena,
      &other->_impl_.entitytypename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.graphid_, lhs_arena,
      &other->_impl_.graphid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCUserDataForCensorship_BlobOfCustomStrings, _impl_.wordfiltertype_)
      + sizeof(UGCUserDataForCensorship_BlobOfCustomStrings::_impl_.wordfiltertype_)
      - PROTOBUF_FIELD_OFFSET(UGCUserDataForCensorship_BlobOfCustomStrings, _impl_.entitytype_)>(
          reinterpret_cast<char*>(&_impl_.entitytype_),
          reinterpret_cast<char*>(&other->_impl_.entitytype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCUserDataForCensorship_BlobOfCustomStrings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[121]);
}

// ===================================================================

class UGCUserDataForCensorship::_Internal {
 public:
};

UGCUserDataForCensorship::UGCUserDataForCensorship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCUserDataForCensorship)
}
UGCUserDataForCensorship::UGCUserDataForCensorship(const UGCUserDataForCensorship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCUserDataForCensorship* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.customstrings_){from._impl_.customstrings_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCUserDataForCensorship)
}

inline void UGCUserDataForCensorship::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.customstrings_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCUserDataForCensorship::~UGCUserDataForCensorship() {
  // @@protoc_insertion_point(destructor:message.UGCUserDataForCensorship)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCUserDataForCensorship::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.customstrings_.~RepeatedPtrField();
}

void UGCUserDataForCensorship::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCUserDataForCensorship::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCUserDataForCensorship)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.customstrings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCUserDataForCensorship::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCUserDataForCensorship.BlobOfCustomStrings CustomStrings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_customstrings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCUserDataForCensorship::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCUserDataForCensorship)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCUserDataForCensorship.BlobOfCustomStrings CustomStrings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_customstrings_size()); i < n; i++) {
    const auto& repfield = this->_internal_customstrings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCUserDataForCensorship)
  return target;
}

size_t UGCUserDataForCensorship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCUserDataForCensorship)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCUserDataForCensorship.BlobOfCustomStrings CustomStrings = 1;
  total_size += 1UL * this->_internal_customstrings_size();
  for (const auto& msg : this->_impl_.customstrings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCUserDataForCensorship::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCUserDataForCensorship::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCUserDataForCensorship::GetClassData() const { return &_class_data_; }


void UGCUserDataForCensorship::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCUserDataForCensorship*>(&to_msg);
  auto& from = static_cast<const UGCUserDataForCensorship&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCUserDataForCensorship)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.customstrings_.MergeFrom(from._impl_.customstrings_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCUserDataForCensorship::CopyFrom(const UGCUserDataForCensorship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCUserDataForCensorship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCUserDataForCensorship::IsInitialized() const {
  return true;
}

void UGCUserDataForCensorship::InternalSwap(UGCUserDataForCensorship* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.customstrings_.InternalSwap(&other->_impl_.customstrings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCUserDataForCensorship::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[122]);
}

// ===================================================================

class UGCMapProjectData_OB35_And_Earlier::_Internal {
 public:
};

UGCMapProjectData_OB35_And_Earlier::UGCMapProjectData_OB35_And_Earlier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCMapProjectData_OB35_And_Earlier)
}
UGCMapProjectData_OB35_And_Earlier::UGCMapProjectData_OB35_And_Earlier(const UGCMapProjectData_OB35_And_Earlier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCMapProjectData_OB35_And_Earlier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entitybindingdatabytes_){}
    , decltype(_impl_.runtimedatabytes_){}
    , decltype(_impl_.gamename_){}
    , decltype(_impl_.gamedesc_){}
    , decltype(_impl_.gamemode_){}
    , decltype(_impl_.groupmode_){}
    , decltype(_impl_.teamcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entitybindingdatabytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitybindingdatabytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entitybindingdatabytes().empty()) {
    _this->_impl_.entitybindingdatabytes_.Set(from._internal_entitybindingdatabytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.runtimedatabytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtimedatabytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_runtimedatabytes().empty()) {
    _this->_impl_.runtimedatabytes_.Set(from._internal_runtimedatabytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gamename().empty()) {
    _this->_impl_.gamename_.Set(from._internal_gamename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gamedesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamedesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gamedesc().empty()) {
    _this->_impl_.gamedesc_.Set(from._internal_gamedesc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gamemode_, &from._impl_.gamemode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teamcount_) -
    reinterpret_cast<char*>(&_impl_.gamemode_)) + sizeof(_impl_.teamcount_));
  // @@protoc_insertion_point(copy_constructor:message.UGCMapProjectData_OB35_And_Earlier)
}

inline void UGCMapProjectData_OB35_And_Earlier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entitybindingdatabytes_){}
    , decltype(_impl_.runtimedatabytes_){}
    , decltype(_impl_.gamename_){}
    , decltype(_impl_.gamedesc_){}
    , decltype(_impl_.gamemode_){0u}
    , decltype(_impl_.groupmode_){0u}
    , decltype(_impl_.teamcount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entitybindingdatabytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitybindingdatabytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.runtimedatabytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtimedatabytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gamedesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamedesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCMapProjectData_OB35_And_Earlier::~UGCMapProjectData_OB35_And_Earlier() {
  // @@protoc_insertion_point(destructor:message.UGCMapProjectData_OB35_And_Earlier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCMapProjectData_OB35_And_Earlier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entitybindingdatabytes_.Destroy();
  _impl_.runtimedatabytes_.Destroy();
  _impl_.gamename_.Destroy();
  _impl_.gamedesc_.Destroy();
}

void UGCMapProjectData_OB35_And_Earlier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCMapProjectData_OB35_And_Earlier::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCMapProjectData_OB35_And_Earlier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entitybindingdatabytes_.ClearToEmpty();
  _impl_.runtimedatabytes_.ClearToEmpty();
  _impl_.gamename_.ClearToEmpty();
  _impl_.gamedesc_.ClearToEmpty();
  ::memset(&_impl_.gamemode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.teamcount_) -
      reinterpret_cast<char*>(&_impl_.gamemode_)) + sizeof(_impl_.teamcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCMapProjectData_OB35_And_Earlier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes EntityBindingDataBytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entitybindingdatabytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes RuntimeDataBytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_runtimedatabytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string GameName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gamename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCMapProjectData_OB35_And_Earlier.GameName"));
        } else
          goto handle_unusual;
        continue;
      // string GameDesc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_gamedesc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCMapProjectData_OB35_And_Earlier.GameDesc"));
        } else
          goto handle_unusual;
        continue;
      // uint32 GameMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gamemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GroupMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.groupmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.teamcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCMapProjectData_OB35_And_Earlier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCMapProjectData_OB35_And_Earlier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes EntityBindingDataBytes = 1;
  if (!this->_internal_entitybindingdatabytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_entitybindingdatabytes(), target);
  }

  // bytes RuntimeDataBytes = 2;
  if (!this->_internal_runtimedatabytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_runtimedatabytes(), target);
  }

  // string GameName = 3;
  if (!this->_internal_gamename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamename().data(), static_cast<int>(this->_internal_gamename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCMapProjectData_OB35_And_Earlier.GameName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gamename(), target);
  }

  // string GameDesc = 4;
  if (!this->_internal_gamedesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamedesc().data(), static_cast<int>(this->_internal_gamedesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCMapProjectData_OB35_And_Earlier.GameDesc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_gamedesc(), target);
  }

  // uint32 GameMode = 5;
  if (this->_internal_gamemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gamemode(), target);
  }

  // uint32 GroupMode = 6;
  if (this->_internal_groupmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_groupmode(), target);
  }

  // uint32 TeamCount = 7;
  if (this->_internal_teamcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_teamcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCMapProjectData_OB35_And_Earlier)
  return target;
}

size_t UGCMapProjectData_OB35_And_Earlier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCMapProjectData_OB35_And_Earlier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes EntityBindingDataBytes = 1;
  if (!this->_internal_entitybindingdatabytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entitybindingdatabytes());
  }

  // bytes RuntimeDataBytes = 2;
  if (!this->_internal_runtimedatabytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_runtimedatabytes());
  }

  // string GameName = 3;
  if (!this->_internal_gamename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamename());
  }

  // string GameDesc = 4;
  if (!this->_internal_gamedesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamedesc());
  }

  // uint32 GameMode = 5;
  if (this->_internal_gamemode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gamemode());
  }

  // uint32 GroupMode = 6;
  if (this->_internal_groupmode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupmode());
  }

  // uint32 TeamCount = 7;
  if (this->_internal_teamcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCMapProjectData_OB35_And_Earlier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCMapProjectData_OB35_And_Earlier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCMapProjectData_OB35_And_Earlier::GetClassData() const { return &_class_data_; }


void UGCMapProjectData_OB35_And_Earlier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCMapProjectData_OB35_And_Earlier*>(&to_msg);
  auto& from = static_cast<const UGCMapProjectData_OB35_And_Earlier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCMapProjectData_OB35_And_Earlier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entitybindingdatabytes().empty()) {
    _this->_internal_set_entitybindingdatabytes(from._internal_entitybindingdatabytes());
  }
  if (!from._internal_runtimedatabytes().empty()) {
    _this->_internal_set_runtimedatabytes(from._internal_runtimedatabytes());
  }
  if (!from._internal_gamename().empty()) {
    _this->_internal_set_gamename(from._internal_gamename());
  }
  if (!from._internal_gamedesc().empty()) {
    _this->_internal_set_gamedesc(from._internal_gamedesc());
  }
  if (from._internal_gamemode() != 0) {
    _this->_internal_set_gamemode(from._internal_gamemode());
  }
  if (from._internal_groupmode() != 0) {
    _this->_internal_set_groupmode(from._internal_groupmode());
  }
  if (from._internal_teamcount() != 0) {
    _this->_internal_set_teamcount(from._internal_teamcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCMapProjectData_OB35_And_Earlier::CopyFrom(const UGCMapProjectData_OB35_And_Earlier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCMapProjectData_OB35_And_Earlier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCMapProjectData_OB35_And_Earlier::IsInitialized() const {
  return true;
}

void UGCMapProjectData_OB35_And_Earlier::InternalSwap(UGCMapProjectData_OB35_And_Earlier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entitybindingdatabytes_, lhs_arena,
      &other->_impl_.entitybindingdatabytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.runtimedatabytes_, lhs_arena,
      &other->_impl_.runtimedatabytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamename_, lhs_arena,
      &other->_impl_.gamename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamedesc_, lhs_arena,
      &other->_impl_.gamedesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCMapProjectData_OB35_And_Earlier, _impl_.teamcount_)
      + sizeof(UGCMapProjectData_OB35_And_Earlier::_impl_.teamcount_)
      - PROTOBUF_FIELD_OFFSET(UGCMapProjectData_OB35_And_Earlier, _impl_.gamemode_)>(
          reinterpret_cast<char*>(&_impl_.gamemode_),
          reinterpret_cast<char*>(&other->_impl_.gamemode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCMapProjectData_OB35_And_Earlier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[123]);
}

// ===================================================================

class UGCMapProjectData::_Internal {
 public:
};

UGCMapProjectData::UGCMapProjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCMapProjectData)
}
UGCMapProjectData::UGCMapProjectData(const UGCMapProjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCMapProjectData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allentitydata_){from._impl_.allentitydata_}
    , decltype(_impl_.runtimedatabytes_){}
    , decltype(_impl_.gamename_){}
    , decltype(_impl_.gamedesc_){}
    , decltype(_impl_.gamemode_){}
    , decltype(_impl_.groupmode_){}
    , decltype(_impl_.teamcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.runtimedatabytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtimedatabytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_runtimedatabytes().empty()) {
    _this->_impl_.runtimedatabytes_.Set(from._internal_runtimedatabytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gamename().empty()) {
    _this->_impl_.gamename_.Set(from._internal_gamename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gamedesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamedesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gamedesc().empty()) {
    _this->_impl_.gamedesc_.Set(from._internal_gamedesc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gamemode_, &from._impl_.gamemode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teamcount_) -
    reinterpret_cast<char*>(&_impl_.gamemode_)) + sizeof(_impl_.teamcount_));
  // @@protoc_insertion_point(copy_constructor:message.UGCMapProjectData)
}

inline void UGCMapProjectData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.allentitydata_){arena}
    , decltype(_impl_.runtimedatabytes_){}
    , decltype(_impl_.gamename_){}
    , decltype(_impl_.gamedesc_){}
    , decltype(_impl_.gamemode_){0u}
    , decltype(_impl_.groupmode_){0u}
    , decltype(_impl_.teamcount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.runtimedatabytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtimedatabytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gamedesc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamedesc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCMapProjectData::~UGCMapProjectData() {
  // @@protoc_insertion_point(destructor:message.UGCMapProjectData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCMapProjectData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allentitydata_.~RepeatedPtrField();
  _impl_.runtimedatabytes_.Destroy();
  _impl_.gamename_.Destroy();
  _impl_.gamedesc_.Destroy();
}

void UGCMapProjectData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCMapProjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCMapProjectData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allentitydata_.Clear();
  _impl_.runtimedatabytes_.ClearToEmpty();
  _impl_.gamename_.ClearToEmpty();
  _impl_.gamedesc_.ClearToEmpty();
  ::memset(&_impl_.gamemode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.teamcount_) -
      reinterpret_cast<char*>(&_impl_.gamemode_)) + sizeof(_impl_.teamcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCMapProjectData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCLogicEntityDataForEditor AllEntityData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allentitydata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes RuntimeDataBytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_runtimedatabytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string GameName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gamename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCMapProjectData.GameName"));
        } else
          goto handle_unusual;
        continue;
      // string GameDesc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_gamedesc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCMapProjectData.GameDesc"));
        } else
          goto handle_unusual;
        continue;
      // uint32 GameMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gamemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GroupMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.groupmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.teamcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCMapProjectData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCMapProjectData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCLogicEntityDataForEditor AllEntityData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allentitydata_size()); i < n; i++) {
    const auto& repfield = this->_internal_allentitydata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes RuntimeDataBytes = 2;
  if (!this->_internal_runtimedatabytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_runtimedatabytes(), target);
  }

  // string GameName = 3;
  if (!this->_internal_gamename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamename().data(), static_cast<int>(this->_internal_gamename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCMapProjectData.GameName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gamename(), target);
  }

  // string GameDesc = 4;
  if (!this->_internal_gamedesc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamedesc().data(), static_cast<int>(this->_internal_gamedesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCMapProjectData.GameDesc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_gamedesc(), target);
  }

  // uint32 GameMode = 5;
  if (this->_internal_gamemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gamemode(), target);
  }

  // uint32 GroupMode = 6;
  if (this->_internal_groupmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_groupmode(), target);
  }

  // uint32 TeamCount = 7;
  if (this->_internal_teamcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_teamcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCMapProjectData)
  return target;
}

size_t UGCMapProjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCMapProjectData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCLogicEntityDataForEditor AllEntityData = 1;
  total_size += 1UL * this->_internal_allentitydata_size();
  for (const auto& msg : this->_impl_.allentitydata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes RuntimeDataBytes = 2;
  if (!this->_internal_runtimedatabytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_runtimedatabytes());
  }

  // string GameName = 3;
  if (!this->_internal_gamename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamename());
  }

  // string GameDesc = 4;
  if (!this->_internal_gamedesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamedesc());
  }

  // uint32 GameMode = 5;
  if (this->_internal_gamemode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gamemode());
  }

  // uint32 GroupMode = 6;
  if (this->_internal_groupmode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupmode());
  }

  // uint32 TeamCount = 7;
  if (this->_internal_teamcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCMapProjectData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCMapProjectData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCMapProjectData::GetClassData() const { return &_class_data_; }


void UGCMapProjectData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCMapProjectData*>(&to_msg);
  auto& from = static_cast<const UGCMapProjectData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCMapProjectData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allentitydata_.MergeFrom(from._impl_.allentitydata_);
  if (!from._internal_runtimedatabytes().empty()) {
    _this->_internal_set_runtimedatabytes(from._internal_runtimedatabytes());
  }
  if (!from._internal_gamename().empty()) {
    _this->_internal_set_gamename(from._internal_gamename());
  }
  if (!from._internal_gamedesc().empty()) {
    _this->_internal_set_gamedesc(from._internal_gamedesc());
  }
  if (from._internal_gamemode() != 0) {
    _this->_internal_set_gamemode(from._internal_gamemode());
  }
  if (from._internal_groupmode() != 0) {
    _this->_internal_set_groupmode(from._internal_groupmode());
  }
  if (from._internal_teamcount() != 0) {
    _this->_internal_set_teamcount(from._internal_teamcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCMapProjectData::CopyFrom(const UGCMapProjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCMapProjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCMapProjectData::IsInitialized() const {
  return true;
}

void UGCMapProjectData::InternalSwap(UGCMapProjectData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.allentitydata_.InternalSwap(&other->_impl_.allentitydata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.runtimedatabytes_, lhs_arena,
      &other->_impl_.runtimedatabytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamename_, lhs_arena,
      &other->_impl_.gamename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamedesc_, lhs_arena,
      &other->_impl_.gamedesc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCMapProjectData, _impl_.teamcount_)
      + sizeof(UGCMapProjectData::_impl_.teamcount_)
      - PROTOBUF_FIELD_OFFSET(UGCMapProjectData, _impl_.gamemode_)>(
          reinterpret_cast<char*>(&_impl_.gamemode_),
          reinterpret_cast<char*>(&other->_impl_.gamemode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCMapProjectData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[124]);
}

// ===================================================================

class UGCEditorError_ErrorCodeData::_Internal {
 public:
};

UGCEditorError_ErrorCodeData::UGCEditorError_ErrorCodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCEditorError.ErrorCodeData)
}
UGCEditorError_ErrorCodeData::UGCEditorError_ErrorCodeData(const UGCEditorError_ErrorCodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCEditorError_ErrorCodeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lockey_){}
    , decltype(_impl_.consolekey_){}
    , decltype(_impl_.errorcode_){}
    , decltype(_impl_.severity_){}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lockey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lockey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lockey().empty()) {
    _this->_impl_.lockey_.Set(from._internal_lockey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consolekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consolekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consolekey().empty()) {
    _this->_impl_.consolekey_.Set(from._internal_consolekey(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.errorcode_, &from._impl_.errorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.errorcode_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:message.UGCEditorError.ErrorCodeData)
}

inline void UGCEditorError_ErrorCodeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lockey_){}
    , decltype(_impl_.consolekey_){}
    , decltype(_impl_.errorcode_){0}
    , decltype(_impl_.severity_){0}
    , decltype(_impl_.priority_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lockey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lockey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consolekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consolekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCEditorError_ErrorCodeData::~UGCEditorError_ErrorCodeData() {
  // @@protoc_insertion_point(destructor:message.UGCEditorError.ErrorCodeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCEditorError_ErrorCodeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lockey_.Destroy();
  _impl_.consolekey_.Destroy();
}

void UGCEditorError_ErrorCodeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCEditorError_ErrorCodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCEditorError.ErrorCodeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lockey_.ClearToEmpty();
  _impl_.consolekey_.ClearToEmpty();
  ::memset(&_impl_.errorcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.errorcode_)) + sizeof(_impl_.priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCEditorError_ErrorCodeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCEditorError.ErrorCode ErrorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errorcode(static_cast<::message::UGCEditorError_ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .message.UGCEditorError.ErrorSeverity Severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::message::UGCEditorError_ErrorSeverity>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LocKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_lockey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCEditorError.ErrorCodeData.LocKey"));
        } else
          goto handle_unusual;
        continue;
      // string ConsoleKEY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_consolekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCEditorError.ErrorCodeData.ConsoleKEY"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCEditorError_ErrorCodeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCEditorError.ErrorCodeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCEditorError.ErrorCode ErrorCode = 1;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorcode(), target);
  }

  // .message.UGCEditorError.ErrorSeverity Severity = 2;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_severity(), target);
  }

  // uint32 Priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_priority(), target);
  }

  // string LocKey = 4;
  if (!this->_internal_lockey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lockey().data(), static_cast<int>(this->_internal_lockey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCEditorError.ErrorCodeData.LocKey");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lockey(), target);
  }

  // string ConsoleKEY = 5;
  if (!this->_internal_consolekey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consolekey().data(), static_cast<int>(this->_internal_consolekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCEditorError.ErrorCodeData.ConsoleKEY");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_consolekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCEditorError.ErrorCodeData)
  return target;
}

size_t UGCEditorError_ErrorCodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCEditorError.ErrorCodeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LocKey = 4;
  if (!this->_internal_lockey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lockey());
  }

  // string ConsoleKEY = 5;
  if (!this->_internal_consolekey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consolekey());
  }

  // .message.UGCEditorError.ErrorCode ErrorCode = 1;
  if (this->_internal_errorcode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_errorcode());
  }

  // .message.UGCEditorError.ErrorSeverity Severity = 2;
  if (this->_internal_severity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // uint32 Priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCEditorError_ErrorCodeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCEditorError_ErrorCodeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCEditorError_ErrorCodeData::GetClassData() const { return &_class_data_; }


void UGCEditorError_ErrorCodeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCEditorError_ErrorCodeData*>(&to_msg);
  auto& from = static_cast<const UGCEditorError_ErrorCodeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCEditorError.ErrorCodeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lockey().empty()) {
    _this->_internal_set_lockey(from._internal_lockey());
  }
  if (!from._internal_consolekey().empty()) {
    _this->_internal_set_consolekey(from._internal_consolekey());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCEditorError_ErrorCodeData::CopyFrom(const UGCEditorError_ErrorCodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCEditorError.ErrorCodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCEditorError_ErrorCodeData::IsInitialized() const {
  return true;
}

void UGCEditorError_ErrorCodeData::InternalSwap(UGCEditorError_ErrorCodeData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lockey_, lhs_arena,
      &other->_impl_.lockey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consolekey_, lhs_arena,
      &other->_impl_.consolekey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCEditorError_ErrorCodeData, _impl_.priority_)
      + sizeof(UGCEditorError_ErrorCodeData::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(UGCEditorError_ErrorCodeData, _impl_.errorcode_)>(
          reinterpret_cast<char*>(&_impl_.errorcode_),
          reinterpret_cast<char*>(&other->_impl_.errorcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCEditorError_ErrorCodeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[125]);
}

// ===================================================================

class UGCEditorError_ErrorEntry::_Internal {
 public:
};

UGCEditorError_ErrorEntry::UGCEditorError_ErrorEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCEditorError.ErrorEntry)
}
UGCEditorError_ErrorEntry::UGCEditorError_ErrorEntry(const UGCEditorError_ErrorEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCEditorError_ErrorEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extraparams_){from._impl_.extraparams_}
    , decltype(_impl_.entitytype_){}
    , decltype(_impl_.entityid_){}
    , decltype(_impl_.graphid_){}
    , decltype(_impl_.blockid_){}
    , decltype(_impl_.errorcode_){}
    , decltype(_impl_.sceneedititemtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entitytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entitytype().empty()) {
    _this->_impl_.entitytype_.Set(from._internal_entitytype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entityid().empty()) {
    _this->_impl_.entityid_.Set(from._internal_entityid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.graphid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graphid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_graphid().empty()) {
    _this->_impl_.graphid_.Set(from._internal_graphid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blockid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockid().empty()) {
    _this->_impl_.blockid_.Set(from._internal_blockid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.errorcode_, &from._impl_.errorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sceneedititemtype_) -
    reinterpret_cast<char*>(&_impl_.errorcode_)) + sizeof(_impl_.sceneedititemtype_));
  // @@protoc_insertion_point(copy_constructor:message.UGCEditorError.ErrorEntry)
}

inline void UGCEditorError_ErrorEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extraparams_){arena}
    , decltype(_impl_.entitytype_){}
    , decltype(_impl_.entityid_){}
    , decltype(_impl_.graphid_){}
    , decltype(_impl_.blockid_){}
    , decltype(_impl_.errorcode_){0}
    , decltype(_impl_.sceneedititemtype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.entitytype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitytype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entityid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entityid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.graphid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graphid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blockid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCEditorError_ErrorEntry::~UGCEditorError_ErrorEntry() {
  // @@protoc_insertion_point(destructor:message.UGCEditorError.ErrorEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCEditorError_ErrorEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extraparams_.~RepeatedPtrField();
  _impl_.entitytype_.Destroy();
  _impl_.entityid_.Destroy();
  _impl_.graphid_.Destroy();
  _impl_.blockid_.Destroy();
}

void UGCEditorError_ErrorEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCEditorError_ErrorEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCEditorError.ErrorEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extraparams_.Clear();
  _impl_.entitytype_.ClearToEmpty();
  _impl_.entityid_.ClearToEmpty();
  _impl_.graphid_.ClearToEmpty();
  _impl_.blockid_.ClearToEmpty();
  ::memset(&_impl_.errorcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sceneedititemtype_) -
      reinterpret_cast<char*>(&_impl_.errorcode_)) + sizeof(_impl_.sceneedititemtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCEditorError_ErrorEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCEditorError.ErrorCode ErrorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errorcode(static_cast<::message::UGCEditorError_ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string EntityType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_entitytype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCEditorError.ErrorEntry.EntityType"));
        } else
          goto handle_unusual;
        continue;
      // string EntityID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_entityid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCEditorError.ErrorEntry.EntityID"));
        } else
          goto handle_unusual;
        continue;
      // string GraphID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_graphid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCEditorError.ErrorEntry.GraphID"));
        } else
          goto handle_unusual;
        continue;
      // uint32 SceneEditItemType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sceneedititemtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string BlockID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_blockid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCEditorError.ErrorEntry.BlockID"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ExtraParams = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_extraparams();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCEditorError.ErrorEntry.ExtraParams"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCEditorError_ErrorEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCEditorError.ErrorEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCEditorError.ErrorCode ErrorCode = 1;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorcode(), target);
  }

  // string EntityType = 2;
  if (!this->_internal_entitytype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entitytype().data(), static_cast<int>(this->_internal_entitytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCEditorError.ErrorEntry.EntityType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entitytype(), target);
  }

  // string EntityID = 3;
  if (!this->_internal_entityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entityid().data(), static_cast<int>(this->_internal_entityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCEditorError.ErrorEntry.EntityID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_entityid(), target);
  }

  // string GraphID = 4;
  if (!this->_internal_graphid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graphid().data(), static_cast<int>(this->_internal_graphid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCEditorError.ErrorEntry.GraphID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_graphid(), target);
  }

  // uint32 SceneEditItemType = 5;
  if (this->_internal_sceneedititemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sceneedititemtype(), target);
  }

  // string BlockID = 6;
  if (!this->_internal_blockid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blockid().data(), static_cast<int>(this->_internal_blockid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCEditorError.ErrorEntry.BlockID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_blockid(), target);
  }

  // repeated string ExtraParams = 7;
  for (int i = 0, n = this->_internal_extraparams_size(); i < n; i++) {
    const auto& s = this->_internal_extraparams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCEditorError.ErrorEntry.ExtraParams");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCEditorError.ErrorEntry)
  return target;
}

size_t UGCEditorError_ErrorEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCEditorError.ErrorEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ExtraParams = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.extraparams_.size());
  for (int i = 0, n = _impl_.extraparams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.extraparams_.Get(i));
  }

  // string EntityType = 2;
  if (!this->_internal_entitytype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entitytype());
  }

  // string EntityID = 3;
  if (!this->_internal_entityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entityid());
  }

  // string GraphID = 4;
  if (!this->_internal_graphid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graphid());
  }

  // string BlockID = 6;
  if (!this->_internal_blockid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blockid());
  }

  // .message.UGCEditorError.ErrorCode ErrorCode = 1;
  if (this->_internal_errorcode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_errorcode());
  }

  // uint32 SceneEditItemType = 5;
  if (this->_internal_sceneedititemtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sceneedititemtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCEditorError_ErrorEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCEditorError_ErrorEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCEditorError_ErrorEntry::GetClassData() const { return &_class_data_; }


void UGCEditorError_ErrorEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCEditorError_ErrorEntry*>(&to_msg);
  auto& from = static_cast<const UGCEditorError_ErrorEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCEditorError.ErrorEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extraparams_.MergeFrom(from._impl_.extraparams_);
  if (!from._internal_entitytype().empty()) {
    _this->_internal_set_entitytype(from._internal_entitytype());
  }
  if (!from._internal_entityid().empty()) {
    _this->_internal_set_entityid(from._internal_entityid());
  }
  if (!from._internal_graphid().empty()) {
    _this->_internal_set_graphid(from._internal_graphid());
  }
  if (!from._internal_blockid().empty()) {
    _this->_internal_set_blockid(from._internal_blockid());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  if (from._internal_sceneedititemtype() != 0) {
    _this->_internal_set_sceneedititemtype(from._internal_sceneedititemtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCEditorError_ErrorEntry::CopyFrom(const UGCEditorError_ErrorEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCEditorError.ErrorEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCEditorError_ErrorEntry::IsInitialized() const {
  return true;
}

void UGCEditorError_ErrorEntry::InternalSwap(UGCEditorError_ErrorEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extraparams_.InternalSwap(&other->_impl_.extraparams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entitytype_, lhs_arena,
      &other->_impl_.entitytype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entityid_, lhs_arena,
      &other->_impl_.entityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.graphid_, lhs_arena,
      &other->_impl_.graphid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blockid_, lhs_arena,
      &other->_impl_.blockid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCEditorError_ErrorEntry, _impl_.sceneedititemtype_)
      + sizeof(UGCEditorError_ErrorEntry::_impl_.sceneedititemtype_)
      - PROTOBUF_FIELD_OFFSET(UGCEditorError_ErrorEntry, _impl_.errorcode_)>(
          reinterpret_cast<char*>(&_impl_.errorcode_),
          reinterpret_cast<char*>(&other->_impl_.errorcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCEditorError_ErrorEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[126]);
}

// ===================================================================

class UGCEditorError::_Internal {
 public:
};

UGCEditorError::UGCEditorError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:message.UGCEditorError)
}
UGCEditorError::UGCEditorError(const UGCEditorError& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UGCEditorError* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCEditorError)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCEditorError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCEditorError::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UGCEditorError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[127]);
}

// ===================================================================

class RoomCustomParamSingleIntItem::_Internal {
 public:
};

RoomCustomParamSingleIntItem::RoomCustomParamSingleIntItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamSingleIntItem)
}
RoomCustomParamSingleIntItem::RoomCustomParamSingleIntItem(const RoomCustomParamSingleIntItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamSingleIntItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.labelkey_){}
    , decltype(_impl_.defaulttext_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.labelkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.labelkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_labelkey().empty()) {
    _this->_impl_.labelkey_.Set(from._internal_labelkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.defaulttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.defaulttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_defaulttext().empty()) {
    _this->_impl_.defaulttext_.Set(from._internal_defaulttext(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamSingleIntItem)
}

inline void RoomCustomParamSingleIntItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.labelkey_){}
    , decltype(_impl_.defaulttext_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.labelkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.labelkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.defaulttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.defaulttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomCustomParamSingleIntItem::~RoomCustomParamSingleIntItem() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamSingleIntItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamSingleIntItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labelkey_.Destroy();
  _impl_.defaulttext_.Destroy();
}

void RoomCustomParamSingleIntItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamSingleIntItem::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamSingleIntItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labelkey_.ClearToEmpty();
  _impl_.defaulttext_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamSingleIntItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LabelKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_labelkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.RoomCustomParamSingleIntItem.LabelKey"));
        } else
          goto handle_unusual;
        continue;
      // string DefaultText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_defaulttext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.RoomCustomParamSingleIntItem.DefaultText"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamSingleIntItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamSingleIntItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // string LabelKey = 2;
  if (!this->_internal_labelkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_labelkey().data(), static_cast<int>(this->_internal_labelkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.RoomCustomParamSingleIntItem.LabelKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_labelkey(), target);
  }

  // string DefaultText = 3;
  if (!this->_internal_defaulttext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defaulttext().data(), static_cast<int>(this->_internal_defaulttext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.RoomCustomParamSingleIntItem.DefaultText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_defaulttext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamSingleIntItem)
  return target;
}

size_t RoomCustomParamSingleIntItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamSingleIntItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LabelKey = 2;
  if (!this->_internal_labelkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_labelkey());
  }

  // string DefaultText = 3;
  if (!this->_internal_defaulttext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaulttext());
  }

  // int32 Value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamSingleIntItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamSingleIntItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamSingleIntItem::GetClassData() const { return &_class_data_; }


void RoomCustomParamSingleIntItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamSingleIntItem*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamSingleIntItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamSingleIntItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_labelkey().empty()) {
    _this->_internal_set_labelkey(from._internal_labelkey());
  }
  if (!from._internal_defaulttext().empty()) {
    _this->_internal_set_defaulttext(from._internal_defaulttext());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamSingleIntItem::CopyFrom(const RoomCustomParamSingleIntItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamSingleIntItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamSingleIntItem::IsInitialized() const {
  return true;
}

void RoomCustomParamSingleIntItem::InternalSwap(RoomCustomParamSingleIntItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.labelkey_, lhs_arena,
      &other->_impl_.labelkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.defaulttext_, lhs_arena,
      &other->_impl_.defaulttext_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamSingleIntItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[128]);
}

// ===================================================================

class RoomCustomParamSingleFloatItem::_Internal {
 public:
};

RoomCustomParamSingleFloatItem::RoomCustomParamSingleFloatItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamSingleFloatItem)
}
RoomCustomParamSingleFloatItem::RoomCustomParamSingleFloatItem(const RoomCustomParamSingleFloatItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamSingleFloatItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.labelkey_){}
    , decltype(_impl_.defaulttext_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.labelkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.labelkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_labelkey().empty()) {
    _this->_impl_.labelkey_.Set(from._internal_labelkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.defaulttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.defaulttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_defaulttext().empty()) {
    _this->_impl_.defaulttext_.Set(from._internal_defaulttext(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamSingleFloatItem)
}

inline void RoomCustomParamSingleFloatItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.labelkey_){}
    , decltype(_impl_.defaulttext_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.labelkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.labelkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.defaulttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.defaulttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomCustomParamSingleFloatItem::~RoomCustomParamSingleFloatItem() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamSingleFloatItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamSingleFloatItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labelkey_.Destroy();
  _impl_.defaulttext_.Destroy();
}

void RoomCustomParamSingleFloatItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamSingleFloatItem::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamSingleFloatItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labelkey_.ClearToEmpty();
  _impl_.defaulttext_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamSingleFloatItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float Value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string LabelKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_labelkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.RoomCustomParamSingleFloatItem.LabelKey"));
        } else
          goto handle_unusual;
        continue;
      // string DefaultText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_defaulttext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.RoomCustomParamSingleFloatItem.DefaultText"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamSingleFloatItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamSingleFloatItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float Value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  // string LabelKey = 2;
  if (!this->_internal_labelkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_labelkey().data(), static_cast<int>(this->_internal_labelkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.RoomCustomParamSingleFloatItem.LabelKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_labelkey(), target);
  }

  // string DefaultText = 3;
  if (!this->_internal_defaulttext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defaulttext().data(), static_cast<int>(this->_internal_defaulttext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.RoomCustomParamSingleFloatItem.DefaultText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_defaulttext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamSingleFloatItem)
  return target;
}

size_t RoomCustomParamSingleFloatItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamSingleFloatItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LabelKey = 2;
  if (!this->_internal_labelkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_labelkey());
  }

  // string DefaultText = 3;
  if (!this->_internal_defaulttext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaulttext());
  }

  // float Value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamSingleFloatItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamSingleFloatItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamSingleFloatItem::GetClassData() const { return &_class_data_; }


void RoomCustomParamSingleFloatItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamSingleFloatItem*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamSingleFloatItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamSingleFloatItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_labelkey().empty()) {
    _this->_internal_set_labelkey(from._internal_labelkey());
  }
  if (!from._internal_defaulttext().empty()) {
    _this->_internal_set_defaulttext(from._internal_defaulttext());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamSingleFloatItem::CopyFrom(const RoomCustomParamSingleFloatItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamSingleFloatItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamSingleFloatItem::IsInitialized() const {
  return true;
}

void RoomCustomParamSingleFloatItem::InternalSwap(RoomCustomParamSingleFloatItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.labelkey_, lhs_arena,
      &other->_impl_.labelkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.defaulttext_, lhs_arena,
      &other->_impl_.defaulttext_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamSingleFloatItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[129]);
}

// ===================================================================

class RoomCustomParamSliderInt::_Internal {
 public:
};

RoomCustomParamSliderInt::RoomCustomParamSliderInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamSliderInt)
}
RoomCustomParamSliderInt::RoomCustomParamSliderInt(const RoomCustomParamSliderInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamSliderInt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.minvalue_){}
    , decltype(_impl_.maxvalue_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.minvalue_, &from._impl_.minvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.minvalue_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamSliderInt)
}

inline void RoomCustomParamSliderInt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.minvalue_){0}
    , decltype(_impl_.maxvalue_){0}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomCustomParamSliderInt::~RoomCustomParamSliderInt() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamSliderInt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamSliderInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoomCustomParamSliderInt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamSliderInt::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamSliderInt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.minvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.minvalue_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamSliderInt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 MinValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.minvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamSliderInt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamSliderInt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MinValue = 1;
  if (this->_internal_minvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_minvalue(), target);
  }

  // int32 MaxValue = 2;
  if (this->_internal_maxvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxvalue(), target);
  }

  // int32 Value = 3;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamSliderInt)
  return target;
}

size_t RoomCustomParamSliderInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamSliderInt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 MinValue = 1;
  if (this->_internal_minvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_minvalue());
  }

  // int32 MaxValue = 2;
  if (this->_internal_maxvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxvalue());
  }

  // int32 Value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamSliderInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamSliderInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamSliderInt::GetClassData() const { return &_class_data_; }


void RoomCustomParamSliderInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamSliderInt*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamSliderInt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamSliderInt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_minvalue() != 0) {
    _this->_internal_set_minvalue(from._internal_minvalue());
  }
  if (from._internal_maxvalue() != 0) {
    _this->_internal_set_maxvalue(from._internal_maxvalue());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamSliderInt::CopyFrom(const RoomCustomParamSliderInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamSliderInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamSliderInt::IsInitialized() const {
  return true;
}

void RoomCustomParamSliderInt::InternalSwap(RoomCustomParamSliderInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomCustomParamSliderInt, _impl_.value_)
      + sizeof(RoomCustomParamSliderInt::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(RoomCustomParamSliderInt, _impl_.minvalue_)>(
          reinterpret_cast<char*>(&_impl_.minvalue_),
          reinterpret_cast<char*>(&other->_impl_.minvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamSliderInt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[130]);
}

// ===================================================================

class RoomCustomParamSliderFloat::_Internal {
 public:
};

RoomCustomParamSliderFloat::RoomCustomParamSliderFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamSliderFloat)
}
RoomCustomParamSliderFloat::RoomCustomParamSliderFloat(const RoomCustomParamSliderFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamSliderFloat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.minvalue_){}
    , decltype(_impl_.maxvalue_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.minvalue_, &from._impl_.minvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.minvalue_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamSliderFloat)
}

inline void RoomCustomParamSliderFloat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.minvalue_){0}
    , decltype(_impl_.maxvalue_){0}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomCustomParamSliderFloat::~RoomCustomParamSliderFloat() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamSliderFloat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamSliderFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoomCustomParamSliderFloat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamSliderFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamSliderFloat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.minvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.minvalue_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamSliderFloat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float MinValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.minvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float MaxValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.maxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamSliderFloat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamSliderFloat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float MinValue = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_minvalue = this->_internal_minvalue();
  uint32_t raw_minvalue;
  memcpy(&raw_minvalue, &tmp_minvalue, sizeof(tmp_minvalue));
  if (raw_minvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_minvalue(), target);
  }

  // float MaxValue = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxvalue = this->_internal_maxvalue();
  uint32_t raw_maxvalue;
  memcpy(&raw_maxvalue, &tmp_maxvalue, sizeof(tmp_maxvalue));
  if (raw_maxvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_maxvalue(), target);
  }

  // float Value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamSliderFloat)
  return target;
}

size_t RoomCustomParamSliderFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamSliderFloat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float MinValue = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_minvalue = this->_internal_minvalue();
  uint32_t raw_minvalue;
  memcpy(&raw_minvalue, &tmp_minvalue, sizeof(tmp_minvalue));
  if (raw_minvalue != 0) {
    total_size += 1 + 4;
  }

  // float MaxValue = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxvalue = this->_internal_maxvalue();
  uint32_t raw_maxvalue;
  memcpy(&raw_maxvalue, &tmp_maxvalue, sizeof(tmp_maxvalue));
  if (raw_maxvalue != 0) {
    total_size += 1 + 4;
  }

  // float Value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamSliderFloat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamSliderFloat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamSliderFloat::GetClassData() const { return &_class_data_; }


void RoomCustomParamSliderFloat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamSliderFloat*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamSliderFloat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamSliderFloat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_minvalue = from._internal_minvalue();
  uint32_t raw_minvalue;
  memcpy(&raw_minvalue, &tmp_minvalue, sizeof(tmp_minvalue));
  if (raw_minvalue != 0) {
    _this->_internal_set_minvalue(from._internal_minvalue());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxvalue = from._internal_maxvalue();
  uint32_t raw_maxvalue;
  memcpy(&raw_maxvalue, &tmp_maxvalue, sizeof(tmp_maxvalue));
  if (raw_maxvalue != 0) {
    _this->_internal_set_maxvalue(from._internal_maxvalue());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamSliderFloat::CopyFrom(const RoomCustomParamSliderFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamSliderFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamSliderFloat::IsInitialized() const {
  return true;
}

void RoomCustomParamSliderFloat::InternalSwap(RoomCustomParamSliderFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomCustomParamSliderFloat, _impl_.value_)
      + sizeof(RoomCustomParamSliderFloat::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(RoomCustomParamSliderFloat, _impl_.minvalue_)>(
          reinterpret_cast<char*>(&_impl_.minvalue_),
          reinterpret_cast<char*>(&other->_impl_.minvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamSliderFloat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[131]);
}

// ===================================================================

class RoomCustomParamSingleChooseInt::_Internal {
 public:
};

RoomCustomParamSingleChooseInt::RoomCustomParamSingleChooseInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamSingleChooseInt)
}
RoomCustomParamSingleChooseInt::RoomCustomParamSingleChooseInt(const RoomCustomParamSingleChooseInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamSingleChooseInt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamSingleChooseInt)
}

inline void RoomCustomParamSingleChooseInt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomCustomParamSingleChooseInt::~RoomCustomParamSingleChooseInt() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamSingleChooseInt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamSingleChooseInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RoomCustomParamSingleChooseInt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamSingleChooseInt::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamSingleChooseInt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamSingleChooseInt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.RoomCustomParamSingleIntItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamSingleChooseInt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamSingleChooseInt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // repeated .message.RoomCustomParamSingleIntItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamSingleChooseInt)
  return target;
}

size_t RoomCustomParamSingleChooseInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamSingleChooseInt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.RoomCustomParamSingleIntItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamSingleChooseInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamSingleChooseInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamSingleChooseInt::GetClassData() const { return &_class_data_; }


void RoomCustomParamSingleChooseInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamSingleChooseInt*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamSingleChooseInt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamSingleChooseInt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamSingleChooseInt::CopyFrom(const RoomCustomParamSingleChooseInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamSingleChooseInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamSingleChooseInt::IsInitialized() const {
  return true;
}

void RoomCustomParamSingleChooseInt::InternalSwap(RoomCustomParamSingleChooseInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamSingleChooseInt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[132]);
}

// ===================================================================

class RoomCustomParamSingleChooseFloat::_Internal {
 public:
};

RoomCustomParamSingleChooseFloat::RoomCustomParamSingleChooseFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamSingleChooseFloat)
}
RoomCustomParamSingleChooseFloat::RoomCustomParamSingleChooseFloat(const RoomCustomParamSingleChooseFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamSingleChooseFloat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamSingleChooseFloat)
}

inline void RoomCustomParamSingleChooseFloat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomCustomParamSingleChooseFloat::~RoomCustomParamSingleChooseFloat() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamSingleChooseFloat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamSingleChooseFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RoomCustomParamSingleChooseFloat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamSingleChooseFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamSingleChooseFloat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamSingleChooseFloat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.RoomCustomParamSingleFloatItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamSingleChooseFloat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamSingleChooseFloat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // repeated .message.RoomCustomParamSingleFloatItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamSingleChooseFloat)
  return target;
}

size_t RoomCustomParamSingleChooseFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamSingleChooseFloat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.RoomCustomParamSingleFloatItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 Index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamSingleChooseFloat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamSingleChooseFloat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamSingleChooseFloat::GetClassData() const { return &_class_data_; }


void RoomCustomParamSingleChooseFloat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamSingleChooseFloat*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamSingleChooseFloat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamSingleChooseFloat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamSingleChooseFloat::CopyFrom(const RoomCustomParamSingleChooseFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamSingleChooseFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamSingleChooseFloat::IsInitialized() const {
  return true;
}

void RoomCustomParamSingleChooseFloat::InternalSwap(RoomCustomParamSingleChooseFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamSingleChooseFloat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[133]);
}

// ===================================================================

class RoomCustomParamMultiChooseInt::_Internal {
 public:
};

RoomCustomParamMultiChooseInt::RoomCustomParamMultiChooseInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamMultiChooseInt)
}
RoomCustomParamMultiChooseInt::RoomCustomParamMultiChooseInt(const RoomCustomParamMultiChooseInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamMultiChooseInt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indexlist_){from._impl_.indexlist_}
    , /*decltype(_impl_._indexlist_cached_byte_size_)*/{0}
    , decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamMultiChooseInt)
}

inline void RoomCustomParamMultiChooseInt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.indexlist_){arena}
    , /*decltype(_impl_._indexlist_cached_byte_size_)*/{0}
    , decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomCustomParamMultiChooseInt::~RoomCustomParamMultiChooseInt() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamMultiChooseInt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamMultiChooseInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.indexlist_.~RepeatedField();
  _impl_.items_.~RepeatedPtrField();
}

void RoomCustomParamMultiChooseInt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamMultiChooseInt::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamMultiChooseInt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.indexlist_.Clear();
  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamMultiChooseInt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 IndexList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indexlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_indexlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.RoomCustomParamSingleIntItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamMultiChooseInt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamMultiChooseInt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 IndexList = 1;
  {
    int byte_size = _impl_._indexlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_indexlist(), byte_size, target);
    }
  }

  // repeated .message.RoomCustomParamSingleIntItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamMultiChooseInt)
  return target;
}

size_t RoomCustomParamMultiChooseInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamMultiChooseInt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 IndexList = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.indexlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indexlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .message.RoomCustomParamSingleIntItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamMultiChooseInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamMultiChooseInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamMultiChooseInt::GetClassData() const { return &_class_data_; }


void RoomCustomParamMultiChooseInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamMultiChooseInt*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamMultiChooseInt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamMultiChooseInt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.indexlist_.MergeFrom(from._impl_.indexlist_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamMultiChooseInt::CopyFrom(const RoomCustomParamMultiChooseInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamMultiChooseInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamMultiChooseInt::IsInitialized() const {
  return true;
}

void RoomCustomParamMultiChooseInt::InternalSwap(RoomCustomParamMultiChooseInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.indexlist_.InternalSwap(&other->_impl_.indexlist_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamMultiChooseInt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[134]);
}

// ===================================================================

class RoomCustomParamData::_Internal {
 public:
  static const ::message::RoomCustomParamSliderInt& sliderint(const RoomCustomParamData* msg);
  static const ::message::RoomCustomParamSliderFloat& sliderfloat(const RoomCustomParamData* msg);
  static const ::message::RoomCustomParamSingleChooseInt& singlechooseint(const RoomCustomParamData* msg);
  static const ::message::RoomCustomParamSingleChooseFloat& singlechoosefloat(const RoomCustomParamData* msg);
  static const ::message::RoomCustomParamMultiChooseInt& multichooseint(const RoomCustomParamData* msg);
};

const ::message::RoomCustomParamSliderInt&
RoomCustomParamData::_Internal::sliderint(const RoomCustomParamData* msg) {
  return *msg->_impl_.Value_.sliderint_;
}
const ::message::RoomCustomParamSliderFloat&
RoomCustomParamData::_Internal::sliderfloat(const RoomCustomParamData* msg) {
  return *msg->_impl_.Value_.sliderfloat_;
}
const ::message::RoomCustomParamSingleChooseInt&
RoomCustomParamData::_Internal::singlechooseint(const RoomCustomParamData* msg) {
  return *msg->_impl_.Value_.singlechooseint_;
}
const ::message::RoomCustomParamSingleChooseFloat&
RoomCustomParamData::_Internal::singlechoosefloat(const RoomCustomParamData* msg) {
  return *msg->_impl_.Value_.singlechoosefloat_;
}
const ::message::RoomCustomParamMultiChooseInt&
RoomCustomParamData::_Internal::multichooseint(const RoomCustomParamData* msg) {
  return *msg->_impl_.multichooseint_;
}
void RoomCustomParamData::set_allocated_sliderint(::message::RoomCustomParamSliderInt* sliderint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (sliderint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sliderint);
    if (message_arena != submessage_arena) {
      sliderint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sliderint, submessage_arena);
    }
    set_has_sliderint();
    _impl_.Value_.sliderint_ = sliderint;
  }
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamData.SliderInt)
}
void RoomCustomParamData::set_allocated_sliderfloat(::message::RoomCustomParamSliderFloat* sliderfloat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (sliderfloat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sliderfloat);
    if (message_arena != submessage_arena) {
      sliderfloat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sliderfloat, submessage_arena);
    }
    set_has_sliderfloat();
    _impl_.Value_.sliderfloat_ = sliderfloat;
  }
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamData.SliderFloat)
}
void RoomCustomParamData::set_allocated_singlechooseint(::message::RoomCustomParamSingleChooseInt* singlechooseint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (singlechooseint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(singlechooseint);
    if (message_arena != submessage_arena) {
      singlechooseint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, singlechooseint, submessage_arena);
    }
    set_has_singlechooseint();
    _impl_.Value_.singlechooseint_ = singlechooseint;
  }
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamData.SingleChooseInt)
}
void RoomCustomParamData::set_allocated_singlechoosefloat(::message::RoomCustomParamSingleChooseFloat* singlechoosefloat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (singlechoosefloat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(singlechoosefloat);
    if (message_arena != submessage_arena) {
      singlechoosefloat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, singlechoosefloat, submessage_arena);
    }
    set_has_singlechoosefloat();
    _impl_.Value_.singlechoosefloat_ = singlechoosefloat;
  }
  // @@protoc_insertion_point(field_set_allocated:message.RoomCustomParamData.SingleChooseFloat)
}
RoomCustomParamData::RoomCustomParamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamData)
}
RoomCustomParamData::RoomCustomParamData(const RoomCustomParamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.labelkey_){}
    , decltype(_impl_.defaulttext_){}
    , decltype(_impl_.multichooseint_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.labelkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.labelkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_labelkey().empty()) {
    _this->_impl_.labelkey_.Set(from._internal_labelkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.defaulttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.defaulttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_defaulttext().empty()) {
    _this->_impl_.defaulttext_.Set(from._internal_defaulttext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_multichooseint()) {
    _this->_impl_.multichooseint_ = new ::message::RoomCustomParamMultiChooseInt(*from._impl_.multichooseint_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  clear_has_Value();
  switch (from.Value_case()) {
    case kBoolValue: {
      _this->_internal_set_boolvalue(from._internal_boolvalue());
      break;
    }
    case kSliderInt: {
      _this->_internal_mutable_sliderint()->::message::RoomCustomParamSliderInt::MergeFrom(
          from._internal_sliderint());
      break;
    }
    case kSliderFloat: {
      _this->_internal_mutable_sliderfloat()->::message::RoomCustomParamSliderFloat::MergeFrom(
          from._internal_sliderfloat());
      break;
    }
    case kSingleChooseInt: {
      _this->_internal_mutable_singlechooseint()->::message::RoomCustomParamSingleChooseInt::MergeFrom(
          from._internal_singlechooseint());
      break;
    }
    case kSingleChooseFloat: {
      _this->_internal_mutable_singlechoosefloat()->::message::RoomCustomParamSingleChooseFloat::MergeFrom(
          from._internal_singlechoosefloat());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamData)
}

inline void RoomCustomParamData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.labelkey_){}
    , decltype(_impl_.defaulttext_){}
    , decltype(_impl_.multichooseint_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.labelkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.labelkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.defaulttext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.defaulttext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_Value();
}

RoomCustomParamData::~RoomCustomParamData() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.labelkey_.Destroy();
  _impl_.defaulttext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.multichooseint_;
  if (has_Value()) {
    clear_Value();
  }
}

void RoomCustomParamData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamData::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:message.RoomCustomParamData)
  switch (Value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kSliderInt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.sliderint_;
      }
      break;
    }
    case kSliderFloat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.sliderfloat_;
      }
      break;
    }
    case kSingleChooseInt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.singlechooseint_;
      }
      break;
    }
    case kSingleChooseFloat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.singlechoosefloat_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void RoomCustomParamData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.labelkey_.ClearToEmpty();
  _impl_.defaulttext_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.multichooseint_ != nullptr) {
    delete _impl_.multichooseint_;
  }
  _impl_.multichooseint_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  clear_Value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LabelKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_labelkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.RoomCustomParamData.LabelKey"));
        } else
          goto handle_unusual;
        continue;
      // string DefaultText = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_defaulttext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.RoomCustomParamData.DefaultText"));
        } else
          goto handle_unusual;
        continue;
      // .message.RoomCustomParamsDataType Type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::message::RoomCustomParamsDataType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool BoolValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_boolvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.RoomCustomParamMultiChooseInt MultiChooseInt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_multichooseint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.RoomCustomParamSliderInt SliderInt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sliderint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.RoomCustomParamSliderFloat SliderFloat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sliderfloat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.RoomCustomParamSingleChooseInt SingleChooseInt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_singlechooseint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.RoomCustomParamSingleChooseFloat SingleChooseFloat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_singlechoosefloat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string LabelKey = 2;
  if (!this->_internal_labelkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_labelkey().data(), static_cast<int>(this->_internal_labelkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.RoomCustomParamData.LabelKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_labelkey(), target);
  }

  // string DefaultText = 3;
  if (!this->_internal_defaulttext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defaulttext().data(), static_cast<int>(this->_internal_defaulttext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.RoomCustomParamData.DefaultText");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_defaulttext(), target);
  }

  // .message.RoomCustomParamsDataType Type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // bool BoolValue = 5;
  if (_internal_has_boolvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_boolvalue(), target);
  }

  // .message.RoomCustomParamMultiChooseInt MultiChooseInt = 6;
  if (this->_internal_has_multichooseint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::multichooseint(this),
        _Internal::multichooseint(this).GetCachedSize(), target, stream);
  }

  // .message.RoomCustomParamSliderInt SliderInt = 7;
  if (_internal_has_sliderint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::sliderint(this),
        _Internal::sliderint(this).GetCachedSize(), target, stream);
  }

  // .message.RoomCustomParamSliderFloat SliderFloat = 8;
  if (_internal_has_sliderfloat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::sliderfloat(this),
        _Internal::sliderfloat(this).GetCachedSize(), target, stream);
  }

  // .message.RoomCustomParamSingleChooseInt SingleChooseInt = 9;
  if (_internal_has_singlechooseint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::singlechooseint(this),
        _Internal::singlechooseint(this).GetCachedSize(), target, stream);
  }

  // .message.RoomCustomParamSingleChooseFloat SingleChooseFloat = 10;
  if (_internal_has_singlechoosefloat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::singlechoosefloat(this),
        _Internal::singlechoosefloat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamData)
  return target;
}

size_t RoomCustomParamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LabelKey = 2;
  if (!this->_internal_labelkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_labelkey());
  }

  // string DefaultText = 3;
  if (!this->_internal_defaulttext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defaulttext());
  }

  // .message.RoomCustomParamMultiChooseInt MultiChooseInt = 6;
  if (this->_internal_has_multichooseint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.multichooseint_);
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .message.RoomCustomParamsDataType Type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (Value_case()) {
    // bool BoolValue = 5;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // .message.RoomCustomParamSliderInt SliderInt = 7;
    case kSliderInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.sliderint_);
      break;
    }
    // .message.RoomCustomParamSliderFloat SliderFloat = 8;
    case kSliderFloat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.sliderfloat_);
      break;
    }
    // .message.RoomCustomParamSingleChooseInt SingleChooseInt = 9;
    case kSingleChooseInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.singlechooseint_);
      break;
    }
    // .message.RoomCustomParamSingleChooseFloat SingleChooseFloat = 10;
    case kSingleChooseFloat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.singlechoosefloat_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamData::GetClassData() const { return &_class_data_; }


void RoomCustomParamData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamData*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_labelkey().empty()) {
    _this->_internal_set_labelkey(from._internal_labelkey());
  }
  if (!from._internal_defaulttext().empty()) {
    _this->_internal_set_defaulttext(from._internal_defaulttext());
  }
  if (from._internal_has_multichooseint()) {
    _this->_internal_mutable_multichooseint()->::message::RoomCustomParamMultiChooseInt::MergeFrom(
        from._internal_multichooseint());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.Value_case()) {
    case kBoolValue: {
      _this->_internal_set_boolvalue(from._internal_boolvalue());
      break;
    }
    case kSliderInt: {
      _this->_internal_mutable_sliderint()->::message::RoomCustomParamSliderInt::MergeFrom(
          from._internal_sliderint());
      break;
    }
    case kSliderFloat: {
      _this->_internal_mutable_sliderfloat()->::message::RoomCustomParamSliderFloat::MergeFrom(
          from._internal_sliderfloat());
      break;
    }
    case kSingleChooseInt: {
      _this->_internal_mutable_singlechooseint()->::message::RoomCustomParamSingleChooseInt::MergeFrom(
          from._internal_singlechooseint());
      break;
    }
    case kSingleChooseFloat: {
      _this->_internal_mutable_singlechoosefloat()->::message::RoomCustomParamSingleChooseFloat::MergeFrom(
          from._internal_singlechoosefloat());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamData::CopyFrom(const RoomCustomParamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamData::IsInitialized() const {
  return true;
}

void RoomCustomParamData::InternalSwap(RoomCustomParamData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.labelkey_, lhs_arena,
      &other->_impl_.labelkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.defaulttext_, lhs_arena,
      &other->_impl_.defaulttext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomCustomParamData, _impl_.type_)
      + sizeof(RoomCustomParamData::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoomCustomParamData, _impl_.multichooseint_)>(
          reinterpret_cast<char*>(&_impl_.multichooseint_),
          reinterpret_cast<char*>(&other->_impl_.multichooseint_));
  swap(_impl_.Value_, other->_impl_.Value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[135]);
}

// ===================================================================

class RoomCustomParamsSettingData::_Internal {
 public:
};

RoomCustomParamsSettingData::RoomCustomParamsSettingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamsSettingData)
}
RoomCustomParamsSettingData::RoomCustomParamsSettingData(const RoomCustomParamsSettingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamsSettingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.loccdnurl_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.loccdnurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loccdnurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loccdnurl().empty()) {
    _this->_impl_.loccdnurl_.Set(from._internal_loccdnurl(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamsSettingData)
}

inline void RoomCustomParamsSettingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.loccdnurl_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.loccdnurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loccdnurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomCustomParamsSettingData::~RoomCustomParamsSettingData() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamsSettingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamsSettingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.loccdnurl_.Destroy();
}

void RoomCustomParamsSettingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamsSettingData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamsSettingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.loccdnurl_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamsSettingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.RoomCustomParamData Params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string LocCDNURL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_loccdnurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.RoomCustomParamsSettingData.LocCDNURL"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamsSettingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamsSettingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.RoomCustomParamData Params = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string LocCDNURL = 2;
  if (!this->_internal_loccdnurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loccdnurl().data(), static_cast<int>(this->_internal_loccdnurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.RoomCustomParamsSettingData.LocCDNURL");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_loccdnurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamsSettingData)
  return target;
}

size_t RoomCustomParamsSettingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamsSettingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.RoomCustomParamData Params = 1;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string LocCDNURL = 2;
  if (!this->_internal_loccdnurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loccdnurl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamsSettingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamsSettingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamsSettingData::GetClassData() const { return &_class_data_; }


void RoomCustomParamsSettingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamsSettingData*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamsSettingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamsSettingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (!from._internal_loccdnurl().empty()) {
    _this->_internal_set_loccdnurl(from._internal_loccdnurl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamsSettingData::CopyFrom(const RoomCustomParamsSettingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamsSettingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamsSettingData::IsInitialized() const {
  return true;
}

void RoomCustomParamsSettingData::InternalSwap(RoomCustomParamsSettingData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loccdnurl_, lhs_arena,
      &other->_impl_.loccdnurl_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamsSettingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[136]);
}

// ===================================================================

class RoomCustomParamProtoData::_Internal {
 public:
};

RoomCustomParamProtoData::RoomCustomParamProtoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RoomCustomParamProtoData)
}
RoomCustomParamProtoData::RoomCustomParamProtoData(const RoomCustomParamProtoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomCustomParamProtoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.listint_){from._impl_.listint_}
    , /*decltype(_impl_._listint_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  clear_has_Value();
  switch (from.Value_case()) {
    case kBoolValue: {
      _this->_internal_set_boolvalue(from._internal_boolvalue());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:message.RoomCustomParamProtoData)
}

inline void RoomCustomParamProtoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.listint_){arena}
    , /*decltype(_impl_._listint_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Value();
}

RoomCustomParamProtoData::~RoomCustomParamProtoData() {
  // @@protoc_insertion_point(destructor:message.RoomCustomParamProtoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomCustomParamProtoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listint_.~RepeatedField();
  if (has_Value()) {
    clear_Value();
  }
}

void RoomCustomParamProtoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomCustomParamProtoData::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:message.RoomCustomParamProtoData)
  switch (Value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void RoomCustomParamProtoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomCustomParamProtoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listint_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  clear_Value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomCustomParamProtoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.RoomCustomParamsDataType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::message::RoomCustomParamsDataType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool BoolValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_boolvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ListInt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_listint(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_listint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IntValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float FloatValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _internal_set_floatvalue(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomCustomParamProtoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomCustomParamProtoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .message.RoomCustomParamsDataType Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bool BoolValue = 3;
  if (_internal_has_boolvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_boolvalue(), target);
  }

  // repeated int32 ListInt = 4;
  {
    int byte_size = _impl_._listint_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_listint(), byte_size, target);
    }
  }

  // int32 IntValue = 5;
  if (_internal_has_intvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_intvalue(), target);
  }

  // float FloatValue = 6;
  if (_internal_has_floatvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_floatvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomCustomParamProtoData)
  return target;
}

size_t RoomCustomParamProtoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomCustomParamProtoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ListInt = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.listint_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._listint_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .message.RoomCustomParamsDataType Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (Value_case()) {
    // bool BoolValue = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // int32 IntValue = 5;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_intvalue());
      break;
    }
    // float FloatValue = 6;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomCustomParamProtoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomCustomParamProtoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomCustomParamProtoData::GetClassData() const { return &_class_data_; }


void RoomCustomParamProtoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomCustomParamProtoData*>(&to_msg);
  auto& from = static_cast<const RoomCustomParamProtoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RoomCustomParamProtoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.listint_.MergeFrom(from._impl_.listint_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.Value_case()) {
    case kBoolValue: {
      _this->_internal_set_boolvalue(from._internal_boolvalue());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCustomParamProtoData::CopyFrom(const RoomCustomParamProtoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomCustomParamProtoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCustomParamProtoData::IsInitialized() const {
  return true;
}

void RoomCustomParamProtoData::InternalSwap(RoomCustomParamProtoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.listint_.InternalSwap(&other->_impl_.listint_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomCustomParamProtoData, _impl_.type_)
      + sizeof(RoomCustomParamProtoData::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RoomCustomParamProtoData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
  swap(_impl_.Value_, other->_impl_.Value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomCustomParamProtoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[137]);
}

// ===================================================================

class UGCResourceData::_Internal {
 public:
};

UGCResourceData::UGCResourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourceData)
}
UGCResourceData::UGCResourceData(const UGCResourceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:message.UGCResourceData)
}

inline void UGCResourceData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResourceData::~UGCResourceData() {
  // @@protoc_insertion_point(destructor:message.UGCResourceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void UGCResourceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCResourceData.UGCResourceDataVersion Version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_version(static_cast<::message::UGCResourceData_UGCResourceDataVersion>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCResourceData.UGCResourceDataVersion Version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_version(), target);
  }

  // bytes Content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourceData)
  return target;
}

size_t UGCResourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // .message.UGCResourceData.UGCResourceDataVersion Version = 1;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourceData::GetClassData() const { return &_class_data_; }


void UGCResourceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourceData*>(&to_msg);
  auto& from = static_cast<const UGCResourceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourceData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourceData::CopyFrom(const UGCResourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourceData::IsInitialized() const {
  return true;
}

void UGCResourceData::InternalSwap(UGCResourceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[138]);
}

// ===================================================================

class UGCResourceContentData::_Internal {
 public:
  static const ::message::UGCGameDataResourcePackageInfo& resourcepackageinfo(const UGCResourceContentData* msg);
  static const ::message::UGCResourceContentData& notnecessaryresdata(const UGCResourceContentData* msg);
};

const ::message::UGCGameDataResourcePackageInfo&
UGCResourceContentData::_Internal::resourcepackageinfo(const UGCResourceContentData* msg) {
  return *msg->_impl_.resourcepackageinfo_;
}
const ::message::UGCResourceContentData&
UGCResourceContentData::_Internal::notnecessaryresdata(const UGCResourceContentData* msg) {
  return *msg->_impl_.notnecessaryresdata_;
}
void UGCResourceContentData::clear_resourcepackageinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.resourcepackageinfo_ != nullptr) {
    delete _impl_.resourcepackageinfo_;
  }
  _impl_.resourcepackageinfo_ = nullptr;
}
UGCResourceContentData::UGCResourceContentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourceContentData)
}
UGCResourceContentData::UGCResourceContentData(const UGCResourceContentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourceContentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.optionalresourcenames_){from._impl_.optionalresourcenames_}
    , decltype(_impl_.mapids_){from._impl_.mapids_}
    , /*decltype(_impl_._mapids_cached_byte_size_)*/{0}
    , decltype(_impl_.itemids_){from._impl_.itemids_}
    , /*decltype(_impl_._itemids_cached_byte_size_)*/{0}
    , decltype(_impl_.csshareditemid_){from._impl_.csshareditemid_}
    , /*decltype(_impl_._csshareditemid_cached_byte_size_)*/{0}
    , decltype(_impl_.urlcache_){}
    , decltype(_impl_.resourcepackageinfo_){nullptr}
    , decltype(_impl_.notnecessaryresdata_){nullptr}
    , decltype(_impl_.modetemplateid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.urlcache_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.urlcache_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_urlcache().empty()) {
    _this->_impl_.urlcache_.Set(from._internal_urlcache(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_resourcepackageinfo()) {
    _this->_impl_.resourcepackageinfo_ = new ::message::UGCGameDataResourcePackageInfo(*from._impl_.resourcepackageinfo_);
  }
  if (from._internal_has_notnecessaryresdata()) {
    _this->_impl_.notnecessaryresdata_ = new ::message::UGCResourceContentData(*from._impl_.notnecessaryresdata_);
  }
  _this->_impl_.modetemplateid_ = from._impl_.modetemplateid_;
  // @@protoc_insertion_point(copy_constructor:message.UGCResourceContentData)
}

inline void UGCResourceContentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.optionalresourcenames_){arena}
    , decltype(_impl_.mapids_){arena}
    , /*decltype(_impl_._mapids_cached_byte_size_)*/{0}
    , decltype(_impl_.itemids_){arena}
    , /*decltype(_impl_._itemids_cached_byte_size_)*/{0}
    , decltype(_impl_.csshareditemid_){arena}
    , /*decltype(_impl_._csshareditemid_cached_byte_size_)*/{0}
    , decltype(_impl_.urlcache_){}
    , decltype(_impl_.resourcepackageinfo_){nullptr}
    , decltype(_impl_.notnecessaryresdata_){nullptr}
    , decltype(_impl_.modetemplateid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.urlcache_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.urlcache_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResourceContentData::~UGCResourceContentData() {
  // @@protoc_insertion_point(destructor:message.UGCResourceContentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourceContentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.optionalresourcenames_.~RepeatedPtrField();
  _impl_.mapids_.~RepeatedField();
  _impl_.itemids_.~RepeatedField();
  _impl_.csshareditemid_.~RepeatedField();
  _impl_.urlcache_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resourcepackageinfo_;
  if (this != internal_default_instance()) delete _impl_.notnecessaryresdata_;
}

void UGCResourceContentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourceContentData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourceContentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.optionalresourcenames_.Clear();
  _impl_.mapids_.Clear();
  _impl_.itemids_.Clear();
  _impl_.csshareditemid_.Clear();
  _impl_.urlcache_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.resourcepackageinfo_ != nullptr) {
    delete _impl_.resourcepackageinfo_;
  }
  _impl_.resourcepackageinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.notnecessaryresdata_ != nullptr) {
    delete _impl_.notnecessaryresdata_;
  }
  _impl_.notnecessaryresdata_ = nullptr;
  _impl_.modetemplateid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourceContentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string OptionalResourceNames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_optionalresourcenames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourceContentData.OptionalResourceNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string UrlCache = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_urlcache();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourceContentData.UrlCache"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 MapIds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mapids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_mapids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ItemIds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_itemids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_itemids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCGameDataResourcePackageInfo ResourcePackageInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resourcepackageinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ModeTemplateId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.modetemplateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCResourceContentData NotNecessaryResData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_notnecessaryresdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 CSSharedItemID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_csshareditemid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_csshareditemid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourceContentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourceContentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string OptionalResourceNames = 1;
  for (int i = 0, n = this->_internal_optionalresourcenames_size(); i < n; i++) {
    const auto& s = this->_internal_optionalresourcenames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourceContentData.OptionalResourceNames");
    target = stream->WriteString(1, s, target);
  }

  // string UrlCache = 2;
  if (!this->_internal_urlcache().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_urlcache().data(), static_cast<int>(this->_internal_urlcache().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourceContentData.UrlCache");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_urlcache(), target);
  }

  // repeated uint32 MapIds = 3;
  {
    int byte_size = _impl_._mapids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_mapids(), byte_size, target);
    }
  }

  // repeated uint32 ItemIds = 4;
  {
    int byte_size = _impl_._itemids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_itemids(), byte_size, target);
    }
  }

  // .message.UGCGameDataResourcePackageInfo ResourcePackageInfo = 5;
  if (this->_internal_has_resourcepackageinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::resourcepackageinfo(this),
        _Internal::resourcepackageinfo(this).GetCachedSize(), target, stream);
  }

  // int32 ModeTemplateId = 6;
  if (this->_internal_modetemplateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_modetemplateid(), target);
  }

  // .message.UGCResourceContentData NotNecessaryResData = 7;
  if (this->_internal_has_notnecessaryresdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::notnecessaryresdata(this),
        _Internal::notnecessaryresdata(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 CSSharedItemID = 8;
  {
    int byte_size = _impl_._csshareditemid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_csshareditemid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourceContentData)
  return target;
}

size_t UGCResourceContentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourceContentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string OptionalResourceNames = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.optionalresourcenames_.size());
  for (int i = 0, n = _impl_.optionalresourcenames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.optionalresourcenames_.Get(i));
  }

  // repeated uint32 MapIds = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.mapids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mapids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ItemIds = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.itemids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._itemids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 CSSharedItemID = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.csshareditemid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._csshareditemid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string UrlCache = 2;
  if (!this->_internal_urlcache().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_urlcache());
  }

  // .message.UGCGameDataResourcePackageInfo ResourcePackageInfo = 5;
  if (this->_internal_has_resourcepackageinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resourcepackageinfo_);
  }

  // .message.UGCResourceContentData NotNecessaryResData = 7;
  if (this->_internal_has_notnecessaryresdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.notnecessaryresdata_);
  }

  // int32 ModeTemplateId = 6;
  if (this->_internal_modetemplateid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_modetemplateid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourceContentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourceContentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourceContentData::GetClassData() const { return &_class_data_; }


void UGCResourceContentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourceContentData*>(&to_msg);
  auto& from = static_cast<const UGCResourceContentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourceContentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.optionalresourcenames_.MergeFrom(from._impl_.optionalresourcenames_);
  _this->_impl_.mapids_.MergeFrom(from._impl_.mapids_);
  _this->_impl_.itemids_.MergeFrom(from._impl_.itemids_);
  _this->_impl_.csshareditemid_.MergeFrom(from._impl_.csshareditemid_);
  if (!from._internal_urlcache().empty()) {
    _this->_internal_set_urlcache(from._internal_urlcache());
  }
  if (from._internal_has_resourcepackageinfo()) {
    _this->_internal_mutable_resourcepackageinfo()->::message::UGCGameDataResourcePackageInfo::MergeFrom(
        from._internal_resourcepackageinfo());
  }
  if (from._internal_has_notnecessaryresdata()) {
    _this->_internal_mutable_notnecessaryresdata()->::message::UGCResourceContentData::MergeFrom(
        from._internal_notnecessaryresdata());
  }
  if (from._internal_modetemplateid() != 0) {
    _this->_internal_set_modetemplateid(from._internal_modetemplateid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourceContentData::CopyFrom(const UGCResourceContentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourceContentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourceContentData::IsInitialized() const {
  return true;
}

void UGCResourceContentData::InternalSwap(UGCResourceContentData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.optionalresourcenames_.InternalSwap(&other->_impl_.optionalresourcenames_);
  _impl_.mapids_.InternalSwap(&other->_impl_.mapids_);
  _impl_.itemids_.InternalSwap(&other->_impl_.itemids_);
  _impl_.csshareditemid_.InternalSwap(&other->_impl_.csshareditemid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.urlcache_, lhs_arena,
      &other->_impl_.urlcache_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResourceContentData, _impl_.modetemplateid_)
      + sizeof(UGCResourceContentData::_impl_.modetemplateid_)
      - PROTOBUF_FIELD_OFFSET(UGCResourceContentData, _impl_.resourcepackageinfo_)>(
          reinterpret_cast<char*>(&_impl_.resourcepackageinfo_),
          reinterpret_cast<char*>(&other->_impl_.resourcepackageinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourceContentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[139]);
}

// ===================================================================

class UGCRoomCustomParamLocDatas::_Internal {
 public:
};

UGCRoomCustomParamLocDatas::UGCRoomCustomParamLocDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCRoomCustomParamLocDatas)
}
UGCRoomCustomParamLocDatas::UGCRoomCustomParamLocDatas(const UGCRoomCustomParamLocDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCRoomCustomParamLocDatas* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.locdata_){from._impl_.locdata_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCRoomCustomParamLocDatas)
}

inline void UGCRoomCustomParamLocDatas::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.locdata_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCRoomCustomParamLocDatas::~UGCRoomCustomParamLocDatas() {
  // @@protoc_insertion_point(destructor:message.UGCRoomCustomParamLocDatas)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCRoomCustomParamLocDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.locdata_.~RepeatedPtrField();
}

void UGCRoomCustomParamLocDatas::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCRoomCustomParamLocDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCRoomCustomParamLocDatas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCRoomCustomParamLocDatas::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCLocData LocData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCRoomCustomParamLocDatas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCRoomCustomParamLocDatas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCLocData LocData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_locdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_locdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCRoomCustomParamLocDatas)
  return target;
}

size_t UGCRoomCustomParamLocDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCRoomCustomParamLocDatas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCLocData LocData = 1;
  total_size += 1UL * this->_internal_locdata_size();
  for (const auto& msg : this->_impl_.locdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCRoomCustomParamLocDatas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCRoomCustomParamLocDatas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCRoomCustomParamLocDatas::GetClassData() const { return &_class_data_; }


void UGCRoomCustomParamLocDatas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCRoomCustomParamLocDatas*>(&to_msg);
  auto& from = static_cast<const UGCRoomCustomParamLocDatas&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCRoomCustomParamLocDatas)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.locdata_.MergeFrom(from._impl_.locdata_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCRoomCustomParamLocDatas::CopyFrom(const UGCRoomCustomParamLocDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCRoomCustomParamLocDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCRoomCustomParamLocDatas::IsInitialized() const {
  return true;
}

void UGCRoomCustomParamLocDatas::InternalSwap(UGCRoomCustomParamLocDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.locdata_.InternalSwap(&other->_impl_.locdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCRoomCustomParamLocDatas::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[140]);
}

// ===================================================================

class UGCDatabaseData::_Internal {
 public:
  static const ::message::ProtoBuffVector2& vector2value(const UGCDatabaseData* msg);
  static const ::message::ProtoBuffVector3& vector3value(const UGCDatabaseData* msg);
  static const ::message::ProtoBuffQuaternion& quaternionvalue(const UGCDatabaseData* msg);
  static const ::message::ProtoBuffColor& colorvalue(const UGCDatabaseData* msg);
};

const ::message::ProtoBuffVector2&
UGCDatabaseData::_Internal::vector2value(const UGCDatabaseData* msg) {
  return *msg->_impl_.Value_.vector2value_;
}
const ::message::ProtoBuffVector3&
UGCDatabaseData::_Internal::vector3value(const UGCDatabaseData* msg) {
  return *msg->_impl_.Value_.vector3value_;
}
const ::message::ProtoBuffQuaternion&
UGCDatabaseData::_Internal::quaternionvalue(const UGCDatabaseData* msg) {
  return *msg->_impl_.Value_.quaternionvalue_;
}
const ::message::ProtoBuffColor&
UGCDatabaseData::_Internal::colorvalue(const UGCDatabaseData* msg) {
  return *msg->_impl_.Value_.colorvalue_;
}
void UGCDatabaseData::set_allocated_vector2value(::message::ProtoBuffVector2* vector2value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (vector2value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector2value));
    if (message_arena != submessage_arena) {
      vector2value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector2value, submessage_arena);
    }
    set_has_vector2value();
    _impl_.Value_.vector2value_ = vector2value;
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCDatabaseData.Vector2Value)
}
void UGCDatabaseData::clear_vector2value() {
  if (_internal_has_vector2value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.vector2value_;
    }
    clear_has_Value();
  }
}
void UGCDatabaseData::set_allocated_vector3value(::message::ProtoBuffVector3* vector3value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (vector3value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector3value));
    if (message_arena != submessage_arena) {
      vector3value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector3value, submessage_arena);
    }
    set_has_vector3value();
    _impl_.Value_.vector3value_ = vector3value;
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCDatabaseData.Vector3Value)
}
void UGCDatabaseData::clear_vector3value() {
  if (_internal_has_vector3value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.vector3value_;
    }
    clear_has_Value();
  }
}
void UGCDatabaseData::set_allocated_quaternionvalue(::message::ProtoBuffQuaternion* quaternionvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (quaternionvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternionvalue));
    if (message_arena != submessage_arena) {
      quaternionvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternionvalue, submessage_arena);
    }
    set_has_quaternionvalue();
    _impl_.Value_.quaternionvalue_ = quaternionvalue;
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCDatabaseData.QuaternionValue)
}
void UGCDatabaseData::clear_quaternionvalue() {
  if (_internal_has_quaternionvalue()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.quaternionvalue_;
    }
    clear_has_Value();
  }
}
void UGCDatabaseData::set_allocated_colorvalue(::message::ProtoBuffColor* colorvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (colorvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(colorvalue));
    if (message_arena != submessage_arena) {
      colorvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, colorvalue, submessage_arena);
    }
    set_has_colorvalue();
    _impl_.Value_.colorvalue_ = colorvalue;
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCDatabaseData.ColorValue)
}
void UGCDatabaseData::clear_colorvalue() {
  if (_internal_has_colorvalue()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.colorvalue_;
    }
    clear_has_Value();
  }
}
UGCDatabaseData::UGCDatabaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCDatabaseData)
}
UGCDatabaseData::UGCDatabaseData(const UGCDatabaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCDatabaseData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.listdata_){from._impl_.listdata_}
    , decltype(_impl_.typeid__){}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.typeid__ = from._impl_.typeid__;
  clear_has_Value();
  switch (from.Value_case()) {
    case kBoolValue: {
      _this->_internal_set_boolvalue(from._internal_boolvalue());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case kStringValue: {
      _this->_internal_set_stringvalue(from._internal_stringvalue());
      break;
    }
    case kVector2Value: {
      _this->_internal_mutable_vector2value()->::message::ProtoBuffVector2::MergeFrom(
          from._internal_vector2value());
      break;
    }
    case kVector3Value: {
      _this->_internal_mutable_vector3value()->::message::ProtoBuffVector3::MergeFrom(
          from._internal_vector3value());
      break;
    }
    case kQuaternionValue: {
      _this->_internal_mutable_quaternionvalue()->::message::ProtoBuffQuaternion::MergeFrom(
          from._internal_quaternionvalue());
      break;
    }
    case kColorValue: {
      _this->_internal_mutable_colorvalue()->::message::ProtoBuffColor::MergeFrom(
          from._internal_colorvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCDatabaseData)
}

inline void UGCDatabaseData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.listdata_){arena}
    , decltype(_impl_.typeid__){0}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Value();
}

UGCDatabaseData::~UGCDatabaseData() {
  // @@protoc_insertion_point(destructor:message.UGCDatabaseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCDatabaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.listdata_.~RepeatedPtrField();
  if (has_Value()) {
    clear_Value();
  }
}

void UGCDatabaseData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCDatabaseData::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:message.UGCDatabaseData)
  switch (Value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.Value_.stringvalue_.Destroy();
      break;
    }
    case kVector2Value: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.vector2value_;
      }
      break;
    }
    case kVector3Value: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.vector3value_;
      }
      break;
    }
    case kQuaternionValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.quaternionvalue_;
      }
      break;
    }
    case kColorValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.colorvalue_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void UGCDatabaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCDatabaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.listdata_.Clear();
  _impl_.typeid__ = 0;
  clear_Value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCDatabaseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 TypeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.typeid__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCDatabaseData ListData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_listdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool BoolValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_boolvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IntValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float FloatValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _internal_set_floatvalue(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string StringValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCDatabaseData.StringValue"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector2 Vector2Value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector2value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 Vector3Value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector3value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffQuaternion QuaternionValue = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternionvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffColor ColorValue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_colorvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCDatabaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCDatabaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TypeID = 1;
  if (this->_internal_typeid_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_typeid_(), target);
  }

  // repeated .message.UGCDatabaseData ListData = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_listdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_listdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool BoolValue = 3;
  if (_internal_has_boolvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_boolvalue(), target);
  }

  // int32 IntValue = 4;
  if (_internal_has_intvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_intvalue(), target);
  }

  // float FloatValue = 5;
  if (_internal_has_floatvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_floatvalue(), target);
  }

  // string StringValue = 6;
  if (_internal_has_stringvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCDatabaseData.StringValue");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_stringvalue(), target);
  }

  // .message.ProtoBuffVector2 Vector2Value = 7;
  if (_internal_has_vector2value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::vector2value(this),
        _Internal::vector2value(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 Vector3Value = 8;
  if (_internal_has_vector3value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::vector3value(this),
        _Internal::vector3value(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffQuaternion QuaternionValue = 9;
  if (_internal_has_quaternionvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::quaternionvalue(this),
        _Internal::quaternionvalue(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffColor ColorValue = 10;
  if (_internal_has_colorvalue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::colorvalue(this),
        _Internal::colorvalue(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCDatabaseData)
  return target;
}

size_t UGCDatabaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCDatabaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCDatabaseData ListData = 2;
  total_size += 1UL * this->_internal_listdata_size();
  for (const auto& msg : this->_impl_.listdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 TypeID = 1;
  if (this->_internal_typeid_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_typeid_());
  }

  switch (Value_case()) {
    // bool BoolValue = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // int32 IntValue = 4;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_intvalue());
      break;
    }
    // float FloatValue = 5;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // string StringValue = 6;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
      break;
    }
    // .message.ProtoBuffVector2 Vector2Value = 7;
    case kVector2Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.vector2value_);
      break;
    }
    // .message.ProtoBuffVector3 Vector3Value = 8;
    case kVector3Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.vector3value_);
      break;
    }
    // .message.ProtoBuffQuaternion QuaternionValue = 9;
    case kQuaternionValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.quaternionvalue_);
      break;
    }
    // .message.ProtoBuffColor ColorValue = 10;
    case kColorValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.colorvalue_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCDatabaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCDatabaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCDatabaseData::GetClassData() const { return &_class_data_; }


void UGCDatabaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCDatabaseData*>(&to_msg);
  auto& from = static_cast<const UGCDatabaseData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCDatabaseData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.listdata_.MergeFrom(from._impl_.listdata_);
  if (from._internal_typeid_() != 0) {
    _this->_internal_set_typeid_(from._internal_typeid_());
  }
  switch (from.Value_case()) {
    case kBoolValue: {
      _this->_internal_set_boolvalue(from._internal_boolvalue());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case kStringValue: {
      _this->_internal_set_stringvalue(from._internal_stringvalue());
      break;
    }
    case kVector2Value: {
      _this->_internal_mutable_vector2value()->::message::ProtoBuffVector2::MergeFrom(
          from._internal_vector2value());
      break;
    }
    case kVector3Value: {
      _this->_internal_mutable_vector3value()->::message::ProtoBuffVector3::MergeFrom(
          from._internal_vector3value());
      break;
    }
    case kQuaternionValue: {
      _this->_internal_mutable_quaternionvalue()->::message::ProtoBuffQuaternion::MergeFrom(
          from._internal_quaternionvalue());
      break;
    }
    case kColorValue: {
      _this->_internal_mutable_colorvalue()->::message::ProtoBuffColor::MergeFrom(
          from._internal_colorvalue());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCDatabaseData::CopyFrom(const UGCDatabaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCDatabaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCDatabaseData::IsInitialized() const {
  return true;
}

void UGCDatabaseData::InternalSwap(UGCDatabaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.listdata_.InternalSwap(&other->_impl_.listdata_);
  swap(_impl_.typeid__, other->_impl_.typeid__);
  swap(_impl_.Value_, other->_impl_.Value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCDatabaseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[141]);
}

// ===================================================================

class UGCRoomHalfWayJoinRule::_Internal {
 public:
};

UGCRoomHalfWayJoinRule::UGCRoomHalfWayJoinRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCRoomHalfWayJoinRule)
}
UGCRoomHalfWayJoinRule::UGCRoomHalfWayJoinRule(const UGCRoomHalfWayJoinRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCRoomHalfWayJoinRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recommendstartgamenumber_){}
    , decltype(_impl_.halfwayjoineffecttime_){}
    , decltype(_impl_.enablehalfwayjoin_){}
    , decltype(_impl_.enablehalfwayjoineffecttime_){}
    , decltype(_impl_.halfwayjoinnumberlimit_){}
    , decltype(_impl_.enablehalfwaysubmitmatchstats_){}
    , decltype(_impl_.halfwayjoinnumber_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.recommendstartgamenumber_, &from._impl_.recommendstartgamenumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.halfwayjoinnumber_) -
    reinterpret_cast<char*>(&_impl_.recommendstartgamenumber_)) + sizeof(_impl_.halfwayjoinnumber_));
  // @@protoc_insertion_point(copy_constructor:message.UGCRoomHalfWayJoinRule)
}

inline void UGCRoomHalfWayJoinRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recommendstartgamenumber_){0}
    , decltype(_impl_.halfwayjoineffecttime_){0}
    , decltype(_impl_.enablehalfwayjoin_){false}
    , decltype(_impl_.enablehalfwayjoineffecttime_){false}
    , decltype(_impl_.halfwayjoinnumberlimit_){false}
    , decltype(_impl_.enablehalfwaysubmitmatchstats_){false}
    , decltype(_impl_.halfwayjoinnumber_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCRoomHalfWayJoinRule::~UGCRoomHalfWayJoinRule() {
  // @@protoc_insertion_point(destructor:message.UGCRoomHalfWayJoinRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCRoomHalfWayJoinRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGCRoomHalfWayJoinRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCRoomHalfWayJoinRule::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCRoomHalfWayJoinRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.recommendstartgamenumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.halfwayjoinnumber_) -
      reinterpret_cast<char*>(&_impl_.recommendstartgamenumber_)) + sizeof(_impl_.halfwayjoinnumber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCRoomHalfWayJoinRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 RecommendStartGameNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.recommendstartgamenumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool EnableHalfWayJoin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enablehalfwayjoin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool EnableHalfWayJoinEffectTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.enablehalfwayjoineffecttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HalfWayJoinEffectTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.halfwayjoineffecttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool HalfWayJoinNumberLimit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.halfwayjoinnumberlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HalfWayJoinNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.halfwayjoinnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool EnableHalfwaySubmitMatchStats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.enablehalfwaysubmitmatchstats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCRoomHalfWayJoinRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCRoomHalfWayJoinRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 RecommendStartGameNumber = 1;
  if (this->_internal_recommendstartgamenumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_recommendstartgamenumber(), target);
  }

  // bool EnableHalfWayJoin = 2;
  if (this->_internal_enablehalfwayjoin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enablehalfwayjoin(), target);
  }

  // bool EnableHalfWayJoinEffectTime = 3;
  if (this->_internal_enablehalfwayjoineffecttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enablehalfwayjoineffecttime(), target);
  }

  // int32 HalfWayJoinEffectTime = 4;
  if (this->_internal_halfwayjoineffecttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_halfwayjoineffecttime(), target);
  }

  // bool HalfWayJoinNumberLimit = 5;
  if (this->_internal_halfwayjoinnumberlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_halfwayjoinnumberlimit(), target);
  }

  // int32 HalfWayJoinNumber = 6;
  if (this->_internal_halfwayjoinnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_halfwayjoinnumber(), target);
  }

  // bool EnableHalfwaySubmitMatchStats = 7;
  if (this->_internal_enablehalfwaysubmitmatchstats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_enablehalfwaysubmitmatchstats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCRoomHalfWayJoinRule)
  return target;
}

size_t UGCRoomHalfWayJoinRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCRoomHalfWayJoinRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 RecommendStartGameNumber = 1;
  if (this->_internal_recommendstartgamenumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recommendstartgamenumber());
  }

  // int32 HalfWayJoinEffectTime = 4;
  if (this->_internal_halfwayjoineffecttime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_halfwayjoineffecttime());
  }

  // bool EnableHalfWayJoin = 2;
  if (this->_internal_enablehalfwayjoin() != 0) {
    total_size += 1 + 1;
  }

  // bool EnableHalfWayJoinEffectTime = 3;
  if (this->_internal_enablehalfwayjoineffecttime() != 0) {
    total_size += 1 + 1;
  }

  // bool HalfWayJoinNumberLimit = 5;
  if (this->_internal_halfwayjoinnumberlimit() != 0) {
    total_size += 1 + 1;
  }

  // bool EnableHalfwaySubmitMatchStats = 7;
  if (this->_internal_enablehalfwaysubmitmatchstats() != 0) {
    total_size += 1 + 1;
  }

  // int32 HalfWayJoinNumber = 6;
  if (this->_internal_halfwayjoinnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_halfwayjoinnumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCRoomHalfWayJoinRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCRoomHalfWayJoinRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCRoomHalfWayJoinRule::GetClassData() const { return &_class_data_; }


void UGCRoomHalfWayJoinRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCRoomHalfWayJoinRule*>(&to_msg);
  auto& from = static_cast<const UGCRoomHalfWayJoinRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCRoomHalfWayJoinRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_recommendstartgamenumber() != 0) {
    _this->_internal_set_recommendstartgamenumber(from._internal_recommendstartgamenumber());
  }
  if (from._internal_halfwayjoineffecttime() != 0) {
    _this->_internal_set_halfwayjoineffecttime(from._internal_halfwayjoineffecttime());
  }
  if (from._internal_enablehalfwayjoin() != 0) {
    _this->_internal_set_enablehalfwayjoin(from._internal_enablehalfwayjoin());
  }
  if (from._internal_enablehalfwayjoineffecttime() != 0) {
    _this->_internal_set_enablehalfwayjoineffecttime(from._internal_enablehalfwayjoineffecttime());
  }
  if (from._internal_halfwayjoinnumberlimit() != 0) {
    _this->_internal_set_halfwayjoinnumberlimit(from._internal_halfwayjoinnumberlimit());
  }
  if (from._internal_enablehalfwaysubmitmatchstats() != 0) {
    _this->_internal_set_enablehalfwaysubmitmatchstats(from._internal_enablehalfwaysubmitmatchstats());
  }
  if (from._internal_halfwayjoinnumber() != 0) {
    _this->_internal_set_halfwayjoinnumber(from._internal_halfwayjoinnumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCRoomHalfWayJoinRule::CopyFrom(const UGCRoomHalfWayJoinRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCRoomHalfWayJoinRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCRoomHalfWayJoinRule::IsInitialized() const {
  return true;
}

void UGCRoomHalfWayJoinRule::InternalSwap(UGCRoomHalfWayJoinRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCRoomHalfWayJoinRule, _impl_.halfwayjoinnumber_)
      + sizeof(UGCRoomHalfWayJoinRule::_impl_.halfwayjoinnumber_)
      - PROTOBUF_FIELD_OFFSET(UGCRoomHalfWayJoinRule, _impl_.recommendstartgamenumber_)>(
          reinterpret_cast<char*>(&_impl_.recommendstartgamenumber_),
          reinterpret_cast<char*>(&other->_impl_.recommendstartgamenumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCRoomHalfWayJoinRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[142]);
}

// ===================================================================

class UGCResAnimationClipEvent::_Internal {
 public:
  static const ::message::UGCVarValueDataV2& eventparamlist(const UGCResAnimationClipEvent* msg);
};

const ::message::UGCVarValueDataV2&
UGCResAnimationClipEvent::_Internal::eventparamlist(const UGCResAnimationClipEvent* msg) {
  return *msg->_impl_.eventparamlist_;
}
UGCResAnimationClipEvent::UGCResAnimationClipEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResAnimationClipEvent)
}
UGCResAnimationClipEvent::UGCResAnimationClipEvent(const UGCResAnimationClipEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResAnimationClipEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eventname_){}
    , decltype(_impl_.eventparamlist_){nullptr}
    , decltype(_impl_.eventid_){}
    , decltype(_impl_.eventtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.eventname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eventname().empty()) {
    _this->_impl_.eventname_.Set(from._internal_eventname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_eventparamlist()) {
    _this->_impl_.eventparamlist_ = new ::message::UGCVarValueDataV2(*from._impl_.eventparamlist_);
  }
  ::memcpy(&_impl_.eventid_, &from._impl_.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eventtime_) -
    reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.eventtime_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResAnimationClipEvent)
}

inline void UGCResAnimationClipEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.eventname_){}
    , decltype(_impl_.eventparamlist_){nullptr}
    , decltype(_impl_.eventid_){0}
    , decltype(_impl_.eventtime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.eventname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eventname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResAnimationClipEvent::~UGCResAnimationClipEvent() {
  // @@protoc_insertion_point(destructor:message.UGCResAnimationClipEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResAnimationClipEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.eventname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.eventparamlist_;
}

void UGCResAnimationClipEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResAnimationClipEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResAnimationClipEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eventname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.eventparamlist_ != nullptr) {
    delete _impl_.eventparamlist_;
  }
  _impl_.eventparamlist_ = nullptr;
  ::memset(&_impl_.eventid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.eventtime_) -
      reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.eventtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResAnimationClipEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 EventID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string EventName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_eventname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAnimationClipEvent.EventName"));
        } else
          goto handle_unusual;
        continue;
      // float EventTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.eventtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCVarValueDataV2 EventParamList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_eventparamlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResAnimationClipEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResAnimationClipEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 EventID = 1;
  if (this->_internal_eventid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventid(), target);
  }

  // string EventName = 2;
  if (!this->_internal_eventname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eventname().data(), static_cast<int>(this->_internal_eventname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAnimationClipEvent.EventName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_eventname(), target);
  }

  // float EventTime = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eventtime = this->_internal_eventtime();
  uint32_t raw_eventtime;
  memcpy(&raw_eventtime, &tmp_eventtime, sizeof(tmp_eventtime));
  if (raw_eventtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_eventtime(), target);
  }

  // .message.UGCVarValueDataV2 EventParamList = 4;
  if (this->_internal_has_eventparamlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::eventparamlist(this),
        _Internal::eventparamlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResAnimationClipEvent)
  return target;
}

size_t UGCResAnimationClipEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResAnimationClipEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string EventName = 2;
  if (!this->_internal_eventname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eventname());
  }

  // .message.UGCVarValueDataV2 EventParamList = 4;
  if (this->_internal_has_eventparamlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eventparamlist_);
  }

  // int32 EventID = 1;
  if (this->_internal_eventid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventid());
  }

  // float EventTime = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eventtime = this->_internal_eventtime();
  uint32_t raw_eventtime;
  memcpy(&raw_eventtime, &tmp_eventtime, sizeof(tmp_eventtime));
  if (raw_eventtime != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResAnimationClipEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResAnimationClipEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResAnimationClipEvent::GetClassData() const { return &_class_data_; }


void UGCResAnimationClipEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResAnimationClipEvent*>(&to_msg);
  auto& from = static_cast<const UGCResAnimationClipEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResAnimationClipEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_eventname().empty()) {
    _this->_internal_set_eventname(from._internal_eventname());
  }
  if (from._internal_has_eventparamlist()) {
    _this->_internal_mutable_eventparamlist()->::message::UGCVarValueDataV2::MergeFrom(
        from._internal_eventparamlist());
  }
  if (from._internal_eventid() != 0) {
    _this->_internal_set_eventid(from._internal_eventid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eventtime = from._internal_eventtime();
  uint32_t raw_eventtime;
  memcpy(&raw_eventtime, &tmp_eventtime, sizeof(tmp_eventtime));
  if (raw_eventtime != 0) {
    _this->_internal_set_eventtime(from._internal_eventtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResAnimationClipEvent::CopyFrom(const UGCResAnimationClipEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResAnimationClipEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResAnimationClipEvent::IsInitialized() const {
  return true;
}

void UGCResAnimationClipEvent::InternalSwap(UGCResAnimationClipEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eventname_, lhs_arena,
      &other->_impl_.eventname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResAnimationClipEvent, _impl_.eventtime_)
      + sizeof(UGCResAnimationClipEvent::_impl_.eventtime_)
      - PROTOBUF_FIELD_OFFSET(UGCResAnimationClipEvent, _impl_.eventparamlist_)>(
          reinterpret_cast<char*>(&_impl_.eventparamlist_),
          reinterpret_cast<char*>(&other->_impl_.eventparamlist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResAnimationClipEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[143]);
}

// ===================================================================

class UGCResEventAnimationClipData::_Internal {
 public:
};

UGCResEventAnimationClipData::UGCResEventAnimationClipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResEventAnimationClipData)
}
UGCResEventAnimationClipData::UGCResEventAnimationClipData(const UGCResEventAnimationClipData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResEventAnimationClipData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.clipname_){}
    , decltype(_impl_.animationclipdata_){}
    , decltype(_impl_.animationclipresuuid_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.fps_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clipname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clipname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clipname().empty()) {
    _this->_impl_.clipname_.Set(from._internal_clipname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.animationclipdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationclipdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_animationclipdata().empty()) {
    _this->_impl_.animationclipdata_.Set(from._internal_animationclipdata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.animationclipresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationclipresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_animationclipresuuid().empty()) {
    _this->_impl_.animationclipresuuid_.Set(from._internal_animationclipresuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fps_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.fps_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResEventAnimationClipData)
}

inline void UGCResEventAnimationClipData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.clipname_){}
    , decltype(_impl_.animationclipdata_){}
    , decltype(_impl_.animationclipresuuid_){}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.fps_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clipname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clipname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.animationclipdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationclipdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.animationclipresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animationclipresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResEventAnimationClipData::~UGCResEventAnimationClipData() {
  // @@protoc_insertion_point(destructor:message.UGCResEventAnimationClipData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResEventAnimationClipData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.clipname_.Destroy();
  _impl_.animationclipdata_.Destroy();
  _impl_.animationclipresuuid_.Destroy();
}

void UGCResEventAnimationClipData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResEventAnimationClipData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResEventAnimationClipData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _impl_.clipname_.ClearToEmpty();
  _impl_.animationclipdata_.ClearToEmpty();
  _impl_.animationclipresuuid_.ClearToEmpty();
  ::memset(&_impl_.length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fps_) -
      reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.fps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResEventAnimationClipData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ClipName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clipname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResEventAnimationClipData.ClipName"));
        } else
          goto handle_unusual;
        continue;
      // float Length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float FPS = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResAnimationClipEvent Events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes AnimationClipData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_animationclipdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string AnimationClipResUUID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_animationclipresuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResEventAnimationClipData.AnimationClipResUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResEventAnimationClipData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResEventAnimationClipData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ClipName = 1;
  if (!this->_internal_clipname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clipname().data(), static_cast<int>(this->_internal_clipname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResEventAnimationClipData.ClipName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clipname(), target);
  }

  // float Length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_length(), target);
  }

  // float FPS = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_fps(), target);
  }

  // repeated .message.UGCResAnimationClipEvent Events = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes AnimationClipData = 5;
  if (!this->_internal_animationclipdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_animationclipdata(), target);
  }

  // string AnimationClipResUUID = 6;
  if (!this->_internal_animationclipresuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animationclipresuuid().data(), static_cast<int>(this->_internal_animationclipresuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResEventAnimationClipData.AnimationClipResUUID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_animationclipresuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResEventAnimationClipData)
  return target;
}

size_t UGCResEventAnimationClipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResEventAnimationClipData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResAnimationClipEvent Events = 4;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ClipName = 1;
  if (!this->_internal_clipname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clipname());
  }

  // bytes AnimationClipData = 5;
  if (!this->_internal_animationclipdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_animationclipdata());
  }

  // string AnimationClipResUUID = 6;
  if (!this->_internal_animationclipresuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animationclipresuuid());
  }

  // float Length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 4;
  }

  // float FPS = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResEventAnimationClipData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResEventAnimationClipData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResEventAnimationClipData::GetClassData() const { return &_class_data_; }


void UGCResEventAnimationClipData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResEventAnimationClipData*>(&to_msg);
  auto& from = static_cast<const UGCResEventAnimationClipData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResEventAnimationClipData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_clipname().empty()) {
    _this->_internal_set_clipname(from._internal_clipname());
  }
  if (!from._internal_animationclipdata().empty()) {
    _this->_internal_set_animationclipdata(from._internal_animationclipdata());
  }
  if (!from._internal_animationclipresuuid().empty()) {
    _this->_internal_set_animationclipresuuid(from._internal_animationclipresuuid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = from._internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = from._internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    _this->_internal_set_fps(from._internal_fps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResEventAnimationClipData::CopyFrom(const UGCResEventAnimationClipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResEventAnimationClipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResEventAnimationClipData::IsInitialized() const {
  return true;
}

void UGCResEventAnimationClipData::InternalSwap(UGCResEventAnimationClipData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clipname_, lhs_arena,
      &other->_impl_.clipname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animationclipdata_, lhs_arena,
      &other->_impl_.animationclipdata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animationclipresuuid_, lhs_arena,
      &other->_impl_.animationclipresuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResEventAnimationClipData, _impl_.fps_)
      + sizeof(UGCResEventAnimationClipData::_impl_.fps_)
      - PROTOBUF_FIELD_OFFSET(UGCResEventAnimationClipData, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResEventAnimationClipData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ugccommon_2eproto_getter, &descriptor_table_ugccommon_2eproto_once,
      file_level_metadata_ugccommon_2eproto[144]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::UGCDebugSettingData*
Arena::CreateMaybeMessage< ::message::UGCDebugSettingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCDebugSettingData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCPhaseData*
Arena::CreateMaybeMessage< ::message::UGCPhaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCPhaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCRoundData*
Arena::CreateMaybeMessage< ::message::UGCRoundData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCRoundData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCWorkflowSequenceItem*
Arena::CreateMaybeMessage< ::message::UGCWorkflowSequenceItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCWorkflowSequenceItem >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCWorkflowSequence*
Arena::CreateMaybeMessage< ::message::UGCWorkflowSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCWorkflowSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCType*
Arena::CreateMaybeMessage< ::message::UGCType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCType >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCTypeTree*
Arena::CreateMaybeMessage< ::message::UGCTypeTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCTypeTree >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCTypeComponent*
Arena::CreateMaybeMessage< ::message::UGCTypeComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCTypeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCTypeComponentProp*
Arena::CreateMaybeMessage< ::message::UGCTypeComponentProp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCTypeComponentProp >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCustomReplicationDataItemForEditor*
Arena::CreateMaybeMessage< ::message::UGCCustomReplicationDataItemForEditor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCustomReplicationDataItemForEditor >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCLogicEntityDataForEditor*
Arena::CreateMaybeMessage< ::message::UGCLogicEntityDataForEditor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCLogicEntityDataForEditor >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCustomReplicationDataForEditor*
Arena::CreateMaybeMessage< ::message::UGCCustomReplicationDataForEditor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCustomReplicationDataForEditor >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCVarValueData*
Arena::CreateMaybeMessage< ::message::UGCVarValueData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCVarValueData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCFuncCallerData*
Arena::CreateMaybeMessage< ::message::UGCFuncCallerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCFuncCallerData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCVarDefineData*
Arena::CreateMaybeMessage< ::message::UGCVarDefineData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCVarDefineData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCRuleData*
Arena::CreateMaybeMessage< ::message::UGCRuleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCRuleData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCGraphData*
Arena::CreateMaybeMessage< ::message::UGCGraphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCGraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCustomReplicationDataItemInstance*
Arena::CreateMaybeMessage< ::message::UGCCustomReplicationDataItemInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCustomReplicationDataItemInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCLogicEntityData*
Arena::CreateMaybeMessage< ::message::UGCLogicEntityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCLogicEntityData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCustomReplicationDataItem*
Arena::CreateMaybeMessage< ::message::UGCCustomReplicationDataItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCustomReplicationDataItem >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCustomReplicationData*
Arena::CreateMaybeMessage< ::message::UGCCustomReplicationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCustomReplicationData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCLevelData*
Arena::CreateMaybeMessage< ::message::UGCLevelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCLevelData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCLogicEntityDataV2*
Arena::CreateMaybeMessage< ::message::UGCLogicEntityDataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCLogicEntityDataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCLevelDataV2*
Arena::CreateMaybeMessage< ::message::UGCLevelDataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCLevelDataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCVersionControlData*
Arena::CreateMaybeMessage< ::message::UGCVersionControlData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCVersionControlData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCMapValue*
Arena::CreateMaybeMessage< ::message::UGCMapValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCMapValue >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCVarValueDataV2*
Arena::CreateMaybeMessage< ::message::UGCVarValueDataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCVarValueDataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCFuncDefParamData*
Arena::CreateMaybeMessage< ::message::UGCFuncDefParamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCFuncDefParamData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCFuncCallerDataV2*
Arena::CreateMaybeMessage< ::message::UGCFuncCallerDataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCFuncCallerDataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCVarDefineDataV2*
Arena::CreateMaybeMessage< ::message::UGCVarDefineDataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCVarDefineDataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCRuleDataV2*
Arena::CreateMaybeMessage< ::message::UGCRuleDataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCRuleDataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCGraphDataV2*
Arena::CreateMaybeMessage< ::message::UGCGraphDataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCGraphDataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCustomReplicationDataItemInstanceV2*
Arena::CreateMaybeMessage< ::message::UGCCustomReplicationDataItemInstanceV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCustomReplicationDataItemInstanceV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCLogicEntityDataV3*
Arena::CreateMaybeMessage< ::message::UGCLogicEntityDataV3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCLogicEntityDataV3 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCustomReplicationDataItemV2*
Arena::CreateMaybeMessage< ::message::UGCCustomReplicationDataItemV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCustomReplicationDataItemV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCustomReplicationDataV2*
Arena::CreateMaybeMessage< ::message::UGCCustomReplicationDataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCustomReplicationDataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCInternalLibrary*
Arena::CreateMaybeMessage< ::message::UGCInternalLibrary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCInternalLibrary >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCWorkflowData*
Arena::CreateMaybeMessage< ::message::UGCWorkflowData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCWorkflowData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCLocItem*
Arena::CreateMaybeMessage< ::message::UGCLocItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCLocItem >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCLocKeyData*
Arena::CreateMaybeMessage< ::message::UGCLocKeyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCLocKeyData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCLocData*
Arena::CreateMaybeMessage< ::message::UGCLocData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCLocData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCPrefabData*
Arena::CreateMaybeMessage< ::message::UGCPrefabData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCPrefabData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCustomEventData*
Arena::CreateMaybeMessage< ::message::UGCCustomEventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCustomEventData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCBTreeData*
Arena::CreateMaybeMessage< ::message::UGCBTreeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCBTreeData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCGameData*
Arena::CreateMaybeMessage< ::message::UGCGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCSubLevelItemRuntimeData*
Arena::CreateMaybeMessage< ::message::UGCSubLevelItemRuntimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCSubLevelItemRuntimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCSubLevelDescData*
Arena::CreateMaybeMessage< ::message::UGCSubLevelDescData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCSubLevelDescData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCSubLevelSkyEnvData*
Arena::CreateMaybeMessage< ::message::UGCSubLevelSkyEnvData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCSubLevelSkyEnvData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCSubLevelResourceData*
Arena::CreateMaybeMessage< ::message::UGCSubLevelResourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCSubLevelResourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCTransformNodeData*
Arena::CreateMaybeMessage< ::message::UGCTransformNodeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCTransformNodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCAllSceneRuntimeData*
Arena::CreateMaybeMessage< ::message::UGCAllSceneRuntimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCAllSceneRuntimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCMapRuntimeData*
Arena::CreateMaybeMessage< ::message::UGCMapRuntimeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCMapRuntimeData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditObjectProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditObjectProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditObjectProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditEntityProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditEntityProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditEntityProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditTeleportDoorProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditTeleportDoorProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditTeleportDoorProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditPianoKeyProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditPianoKeyProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditPianoKeyProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditBuffProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditBuffProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditBuffProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditMoveObjectProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditMoveObjectProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditMoveObjectProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditScalableItemProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditScalableItemProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditScalableItemProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditItemBoxProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditItemBoxProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditItemBoxProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditCustomItemBoxProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditCustomItemBoxProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditCustomItemBoxProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditCustomItemBoxGroupProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditCustomItemBoxGroupProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditCustomItemBoxGroupProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditCustomItemBoxItemProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditCustomItemBoxItemProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditCustomItemBoxItemProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditTriggerProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditTriggerProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditTriggerProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditShapeTriggerProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditShapeTriggerProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditShapeTriggerProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditBigToyBallProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditBigToyBallProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditBigToyBallProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditMiniSentryProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditMiniSentryProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditMiniSentryProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditBotGeneratorProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditBotGeneratorProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditBotGeneratorProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditUGCVendingMachineProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditUGCVendingMachineProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditUGCVendingMachineProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditUGCWardrobeProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditUGCWardrobeProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditUGCWardrobeProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditUGCPointLightProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditUGCPointLightProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditUGCPointLightProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditUGCFootballProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditUGCFootballProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditUGCFootballProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditUGCCoinGeneratorProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditUGCCoinGeneratorProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditUGCCoinGeneratorProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditUGCEntityGeneratorProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditUGCEntityGeneratorProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditUGCEntityGeneratorProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditUGCAIProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditUGCAIProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditUGCAIProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCAIConfigParams*
Arena::CreateMaybeMessage< ::message::UGCAIConfigParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCAIConfigParams >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditUGCCustomPathProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditUGCCustomPathProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditUGCCustomPathProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditEntityAttributeProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditEntityAttributeProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditEntityAttributeProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditModeProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditModeProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditModeProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditOildrumData*
Arena::CreateMaybeMessage< ::message::SceneEditOildrumData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditOildrumData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditBasicSphereProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditBasicSphereProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditBasicSphereProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditCustomLevelObjectProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditCustomLevelObjectProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditCustomLevelObjectProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditGoalData*
Arena::CreateMaybeMessage< ::message::SceneEditGoalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditGoalData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditSpawnBoxData*
Arena::CreateMaybeMessage< ::message::SceneEditSpawnBoxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditSpawnBoxData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditGeneralProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditGeneralProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditGeneralProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditCSModeProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditCSModeProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditCSModeProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditIntegralModeProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditIntegralModeProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditIntegralModeProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditPartyModeProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditPartyModeProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditPartyModeProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditCustomModeProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditCustomModeProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditCustomModeProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SceneEditEndConditionProtoData*
Arena::CreateMaybeMessage< ::message::SceneEditEndConditionProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SceneEditEndConditionProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCMoveObjectExportExtraInfo*
Arena::CreateMaybeMessage< ::message::UGCMoveObjectExportExtraInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCMoveObjectExportExtraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCheckPointExportExtraInfo*
Arena::CreateMaybeMessage< ::message::UGCCheckPointExportExtraInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCheckPointExportExtraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCBigToyBallExportExtraInfo*
Arena::CreateMaybeMessage< ::message::UGCBigToyBallExportExtraInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCBigToyBallExportExtraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCMiniSentryExportInfo*
Arena::CreateMaybeMessage< ::message::UGCMiniSentryExportInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCMiniSentryExportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::message::ModeVariable*
Arena::CreateMaybeMessage< ::message::ModeVariable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::ModeVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCBlockEditProjectData*
Arena::CreateMaybeMessage< ::message::UGCBlockEditProjectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCBlockEditProjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudTransformData*
Arena::CreateMaybeMessage< ::message::UGCHudTransformData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudTransformData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudRectTransformData*
Arena::CreateMaybeMessage< ::message::UGCHudRectTransformData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudRectTransformData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudWidgetData*
Arena::CreateMaybeMessage< ::message::UGCHudWidgetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudWidgetData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudLabelData*
Arena::CreateMaybeMessage< ::message::UGCHudLabelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudLabelData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudImageData*
Arena::CreateMaybeMessage< ::message::UGCHudImageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudImageData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudButtonData*
Arena::CreateMaybeMessage< ::message::UGCHudButtonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudButtonData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudInputData*
Arena::CreateMaybeMessage< ::message::UGCHudInputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudInputData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudLayoutData*
Arena::CreateMaybeMessage< ::message::UGCHudLayoutData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudLayoutData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudGridData*
Arena::CreateMaybeMessage< ::message::UGCHudGridData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudGridData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudLayoutNewData*
Arena::CreateMaybeMessage< ::message::UGCHudLayoutNewData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudLayoutNewData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudPanelData*
Arena::CreateMaybeMessage< ::message::UGCHudPanelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudPanelData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudScrollViewData*
Arena::CreateMaybeMessage< ::message::UGCHudScrollViewData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudScrollViewData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHud3DContainerData*
Arena::CreateMaybeMessage< ::message::UGCHud3DContainerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHud3DContainerData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudTextureData*
Arena::CreateMaybeMessage< ::message::UGCHudTextureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudTextureData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudProfileInfoData*
Arena::CreateMaybeMessage< ::message::UGCHudProfileInfoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudProfileInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudGameObjectCommonData*
Arena::CreateMaybeMessage< ::message::UGCHudGameObjectCommonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudGameObjectCommonData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudGameObjectData*
Arena::CreateMaybeMessage< ::message::UGCHudGameObjectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudGameObjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudGameObjectDataForEditor*
Arena::CreateMaybeMessage< ::message::UGCHudGameObjectDataForEditor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudGameObjectDataForEditor >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudPrefabCommonData*
Arena::CreateMaybeMessage< ::message::UGCHudPrefabCommonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudPrefabCommonData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudPrefabData*
Arena::CreateMaybeMessage< ::message::UGCHudPrefabData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudPrefabData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudPrefabDataForEditor*
Arena::CreateMaybeMessage< ::message::UGCHudPrefabDataForEditor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudPrefabDataForEditor >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudPrefabDatas*
Arena::CreateMaybeMessage< ::message::UGCHudPrefabDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudPrefabDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCHudPrefabDatasForEditor*
Arena::CreateMaybeMessage< ::message::UGCHudPrefabDatasForEditor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCHudPrefabDatasForEditor >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCProjectData*
Arena::CreateMaybeMessage< ::message::UGCProjectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCProjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCProjectMetaData*
Arena::CreateMaybeMessage< ::message::UGCProjectMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCProjectMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCUserDataForCensorship_BlobOfCustomStrings*
Arena::CreateMaybeMessage< ::message::UGCUserDataForCensorship_BlobOfCustomStrings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCUserDataForCensorship_BlobOfCustomStrings >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCUserDataForCensorship*
Arena::CreateMaybeMessage< ::message::UGCUserDataForCensorship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCUserDataForCensorship >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCMapProjectData_OB35_And_Earlier*
Arena::CreateMaybeMessage< ::message::UGCMapProjectData_OB35_And_Earlier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCMapProjectData_OB35_And_Earlier >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCMapProjectData*
Arena::CreateMaybeMessage< ::message::UGCMapProjectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCMapProjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCEditorError_ErrorCodeData*
Arena::CreateMaybeMessage< ::message::UGCEditorError_ErrorCodeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCEditorError_ErrorCodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCEditorError_ErrorEntry*
Arena::CreateMaybeMessage< ::message::UGCEditorError_ErrorEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCEditorError_ErrorEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCEditorError*
Arena::CreateMaybeMessage< ::message::UGCEditorError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCEditorError >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamSingleIntItem*
Arena::CreateMaybeMessage< ::message::RoomCustomParamSingleIntItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamSingleIntItem >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamSingleFloatItem*
Arena::CreateMaybeMessage< ::message::RoomCustomParamSingleFloatItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamSingleFloatItem >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamSliderInt*
Arena::CreateMaybeMessage< ::message::RoomCustomParamSliderInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamSliderInt >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamSliderFloat*
Arena::CreateMaybeMessage< ::message::RoomCustomParamSliderFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamSliderFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamSingleChooseInt*
Arena::CreateMaybeMessage< ::message::RoomCustomParamSingleChooseInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamSingleChooseInt >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamSingleChooseFloat*
Arena::CreateMaybeMessage< ::message::RoomCustomParamSingleChooseFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamSingleChooseFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamMultiChooseInt*
Arena::CreateMaybeMessage< ::message::RoomCustomParamMultiChooseInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamMultiChooseInt >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamData*
Arena::CreateMaybeMessage< ::message::RoomCustomParamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamsSettingData*
Arena::CreateMaybeMessage< ::message::RoomCustomParamsSettingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamsSettingData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomCustomParamProtoData*
Arena::CreateMaybeMessage< ::message::RoomCustomParamProtoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomCustomParamProtoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourceData*
Arena::CreateMaybeMessage< ::message::UGCResourceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourceData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourceContentData*
Arena::CreateMaybeMessage< ::message::UGCResourceContentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourceContentData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCRoomCustomParamLocDatas*
Arena::CreateMaybeMessage< ::message::UGCRoomCustomParamLocDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCRoomCustomParamLocDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCDatabaseData*
Arena::CreateMaybeMessage< ::message::UGCDatabaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCDatabaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCRoomHalfWayJoinRule*
Arena::CreateMaybeMessage< ::message::UGCRoomHalfWayJoinRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCRoomHalfWayJoinRule >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResAnimationClipEvent*
Arena::CreateMaybeMessage< ::message::UGCResAnimationClipEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResAnimationClipEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResEventAnimationClipData*
Arena::CreateMaybeMessage< ::message::UGCResEventAnimationClipData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResEventAnimationClipData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
