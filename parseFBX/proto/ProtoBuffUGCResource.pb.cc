// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffUGCResource.proto

#include "ProtoBuffUGCResource.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message {
PROTOBUF_CONSTEXPR UGCColliderMeshData::UGCColliderMeshData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertexs_)*/{}
  , /*decltype(_impl_.indices_)*/{}
  , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCColliderMeshDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCColliderMeshDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCColliderMeshDataDefaultTypeInternal() {}
  union {
    UGCColliderMeshData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCColliderMeshDataDefaultTypeInternal _UGCColliderMeshData_default_instance_;
PROTOBUF_CONSTEXPR UGCColliderInfoData::UGCColliderInfoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meshcollideruuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offset_)*/nullptr
  , /*decltype(_impl_.scale_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.collidertype_)*/0
  , /*decltype(_impl_.istrigger_)*/false
  , /*decltype(_impl_.isconvexifmesh_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCColliderInfoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCColliderInfoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCColliderInfoDataDefaultTypeInternal() {}
  union {
    UGCColliderInfoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCColliderInfoDataDefaultTypeInternal _UGCColliderInfoData_default_instance_;
PROTOBUF_CONSTEXPR UGCGameObjectData::UGCGameObjectData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ugcmaterialuuidlist_)*/{}
  , /*decltype(_impl_.colliderlist_)*/{}
  , /*decltype(_impl_.enginemeshuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abgameobjectresuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rendererdatasource_)*/0
  , /*decltype(_impl_.disableabrescollision_)*/false
  , /*decltype(_impl_.isskinnedmesh_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCGameObjectDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCGameObjectDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCGameObjectDataDefaultTypeInternal() {}
  union {
    UGCGameObjectData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCGameObjectDataDefaultTypeInternal _UGCGameObjectData_default_instance_;
PROTOBUF_CONSTEXPR UGCResourceColliderData::UGCResourceColliderData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.colliderlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourceColliderDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourceColliderDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourceColliderDataDefaultTypeInternal() {}
  union {
    UGCResourceColliderData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourceColliderDataDefaultTypeInternal _UGCResourceColliderData_default_instance_;
PROTOBUF_CONSTEXPR ProtoBuffVector4::ProtoBuffVector4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtoBuffVector4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoBuffVector4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoBuffVector4DefaultTypeInternal() {}
  union {
    ProtoBuffVector4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoBuffVector4DefaultTypeInternal _ProtoBuffVector4_default_instance_;
PROTOBUF_CONSTEXPR UGCMaterialParamData::UGCMaterialParamData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.Value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UGCMaterialParamDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCMaterialParamDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCMaterialParamDataDefaultTypeInternal() {}
  union {
    UGCMaterialParamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCMaterialParamDataDefaultTypeInternal _UGCMaterialParamData_default_instance_;
PROTOBUF_CONSTEXPR UGCMaterialData::UGCMaterialData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shaderparamlist_)*/{}
  , /*decltype(_impl_.shadername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCMaterialDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCMaterialDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCMaterialDataDefaultTypeInternal() {}
  union {
    UGCMaterialData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCMaterialDataDefaultTypeInternal _UGCMaterialData_default_instance_;
PROTOBUF_CONSTEXPR UGCResourceUIAtlasData::UGCResourceUIAtlasData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sprites_)*/{}
  , /*decltype(_impl_.materialresuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pixelsize_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourceUIAtlasDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourceUIAtlasDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourceUIAtlasDataDefaultTypeInternal() {}
  union {
    UGCResourceUIAtlasData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourceUIAtlasDataDefaultTypeInternal _UGCResourceUIAtlasData_default_instance_;
PROTOBUF_CONSTEXPR UGCResourceUISpriteData::UGCResourceUISpriteData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.borderleft_)*/0
  , /*decltype(_impl_.borderright_)*/0
  , /*decltype(_impl_.bordertop_)*/0
  , /*decltype(_impl_.borderbottom_)*/0
  , /*decltype(_impl_.paddingleft_)*/0
  , /*decltype(_impl_.paddingright_)*/0
  , /*decltype(_impl_.paddingtop_)*/0
  , /*decltype(_impl_.paddingbottom_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourceUISpriteDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourceUISpriteDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourceUISpriteDataDefaultTypeInternal() {}
  union {
    UGCResourceUISpriteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourceUISpriteDataDefaultTypeInternal _UGCResourceUISpriteData_default_instance_;
PROTOBUF_CONSTEXPR UGCResourcePackageItem::UGCResourcePackageItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.isunityassetbundleres_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourcePackageItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourcePackageItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourcePackageItemDefaultTypeInternal() {}
  union {
    UGCResourcePackageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourcePackageItemDefaultTypeInternal _UGCResourcePackageItem_default_instance_;
PROTOBUF_CONSTEXPR UGCAssetBundleData::UGCAssetBundleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dependencesbundle_)*/{}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCAssetBundleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCAssetBundleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCAssetBundleDataDefaultTypeInternal() {}
  union {
    UGCAssetBundleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCAssetBundleDataDefaultTypeInternal _UGCAssetBundleData_default_instance_;
PROTOBUF_CONSTEXPR UGCAllUnityBundle::UGCAllUnityBundle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bundlelist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCAllUnityBundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCAllUnityBundleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCAllUnityBundleDefaultTypeInternal() {}
  union {
    UGCAllUnityBundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCAllUnityBundleDefaultTypeInternal _UGCAllUnityBundle_default_instance_;
PROTOBUF_CONSTEXPR UGCResourcePackageData::UGCResourcePackageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resourcelist_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.allunitybundles_)*/nullptr
  , /*decltype(_impl_.sharetype_)*/0
  , /*decltype(_impl_.packagetype_)*/0
  , /*decltype(_impl_.useabletype_)*/0
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_.dataformatversion_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourcePackageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourcePackageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourcePackageDataDefaultTypeInternal() {}
  union {
    UGCResourcePackageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourcePackageDataDefaultTypeInternal _UGCResourcePackageData_default_instance_;
PROTOBUF_CONSTEXPR UGCResourcePackageRefInfo::UGCResourcePackageRefInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.useversionmd5_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.refversiontype_)*/0
  , /*decltype(_impl_.whorequire_)*/0
  , /*decltype(_impl_.platformspecial_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourcePackageRefInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourcePackageRefInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourcePackageRefInfoDefaultTypeInternal() {}
  union {
    UGCResourcePackageRefInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourcePackageRefInfoDefaultTypeInternal _UGCResourcePackageRefInfo_default_instance_;
PROTOBUF_CONSTEXPR UGCResourcePackageDownloadDesc::UGCResourcePackageDownloadDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.downloadexturlinfolist_)*/{}
  , /*decltype(_impl_.packageuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloadpackageurltag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloadpackageurlinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloadexturltag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filebytes_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourcePackageDownloadDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourcePackageDownloadDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourcePackageDownloadDescDefaultTypeInternal() {}
  union {
    UGCResourcePackageDownloadDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourcePackageDownloadDescDefaultTypeInternal _UGCResourcePackageDownloadDesc_default_instance_;
PROTOBUF_CONSTEXPR UGCGameDataResourcePackageInfo::UGCGameDataResourcePackageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refpackages_)*/{}
  , /*decltype(_impl_.buildinpackages_)*/{}
  , /*decltype(_impl_.downloaddescs_)*/{}
  , /*decltype(_impl_.dataformatversion_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCGameDataResourcePackageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCGameDataResourcePackageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCGameDataResourcePackageInfoDefaultTypeInternal() {}
  union {
    UGCGameDataResourcePackageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCGameDataResourcePackageInfoDefaultTypeInternal _UGCGameDataResourcePackageInfo_default_instance_;
PROTOBUF_CONSTEXPR UGCResourceFileDownloadDesc::UGCResourceFileDownloadDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subfileid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sha1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.filesize_)*/0
  , /*decltype(_impl_.platformrequiremask_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResourceFileDownloadDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResourceFileDownloadDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResourceFileDownloadDescDefaultTypeInternal() {}
  union {
    UGCResourceFileDownloadDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResourceFileDownloadDescDefaultTypeInternal _UGCResourceFileDownloadDesc_default_instance_;
PROTOBUF_CONSTEXPR UGCPackageDownloadDesc::UGCPackageDownloadDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filelist_)*/{}
  , /*decltype(_impl_.packageuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.downloadpriority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCPackageDownloadDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCPackageDownloadDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCPackageDownloadDescDefaultTypeInternal() {}
  union {
    UGCPackageDownloadDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCPackageDownloadDescDefaultTypeInternal _UGCPackageDownloadDesc_default_instance_;
PROTOBUF_CONSTEXPR UGCGameDataDownloadDesc::UGCGameDataDownloadDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packagelist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCGameDataDownloadDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCGameDataDownloadDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCGameDataDownloadDescDefaultTypeInternal() {}
  union {
    UGCGameDataDownloadDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCGameDataDownloadDescDefaultTypeInternal _UGCGameDataDownloadDesc_default_instance_;
PROTOBUF_CONSTEXPR UGCCSVRowData::UGCCSVRowData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rowdata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCSVRowDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCSVRowDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCSVRowDataDefaultTypeInternal() {}
  union {
    UGCCSVRowData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCSVRowDataDefaultTypeInternal _UGCCSVRowData_default_instance_;
PROTOBUF_CONSTEXPR UGCCSVData::UGCCSVData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.csvdata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCCSVDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCCSVDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCCSVDataDefaultTypeInternal() {}
  union {
    UGCCSVData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCCSVDataDefaultTypeInternal _UGCCSVData_default_instance_;
PROTOBUF_CONSTEXPR UGCResFFBuildin::UGCResFFBuildin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ffresourcename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResFFBuildinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResFFBuildinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResFFBuildinDefaultTypeInternal() {}
  union {
    UGCResFFBuildin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResFFBuildinDefaultTypeInternal _UGCResFFBuildin_default_instance_;
PROTOBUF_CONSTEXPR UGCResAnimationStateClipData::UGCResAnimationStateClipData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clipuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clipname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isloop_)*/false
  , /*decltype(_impl_.playspeed_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResAnimationStateClipDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResAnimationStateClipDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResAnimationStateClipDataDefaultTypeInternal() {}
  union {
    UGCResAnimationStateClipData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResAnimationStateClipDataDefaultTypeInternal _UGCResAnimationStateClipData_default_instance_;
PROTOBUF_CONSTEXPR UGCResAnimationStateData::UGCResAnimationStateData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clips_)*/{}
  , /*decltype(_impl_.statename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isloop_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResAnimationStateDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResAnimationStateDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResAnimationStateDataDefaultTypeInternal() {}
  union {
    UGCResAnimationStateData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResAnimationStateDataDefaultTypeInternal _UGCResAnimationStateData_default_instance_;
PROTOBUF_CONSTEXPR UGCResAnimationControllerData::UGCResAnimationControllerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResAnimationControllerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResAnimationControllerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResAnimationControllerDataDefaultTypeInternal() {}
  union {
    UGCResAnimationControllerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResAnimationControllerDataDefaultTypeInternal _UGCResAnimationControllerData_default_instance_;
PROTOBUF_CONSTEXPR UGCResBoneNodeCapsuleData::UGCResBoneNodeCapsuleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.center_)*/nullptr
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.bodytype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResBoneNodeCapsuleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResBoneNodeCapsuleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResBoneNodeCapsuleDataDefaultTypeInternal() {}
  union {
    UGCResBoneNodeCapsuleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResBoneNodeCapsuleDataDefaultTypeInternal _UGCResBoneNodeCapsuleData_default_instance_;
PROTOBUF_CONSTEXPR UGCResBoneNodeData::UGCResBoneNodeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.childbones_)*/{}
  , /*decltype(_impl_.bonename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localposition_)*/nullptr
  , /*decltype(_impl_.localscale_)*/nullptr
  , /*decltype(_impl_.localrotation_)*/nullptr
  , /*decltype(_impl_.capsuleinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResBoneNodeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResBoneNodeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResBoneNodeDataDefaultTypeInternal() {}
  union {
    UGCResBoneNodeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResBoneNodeDataDefaultTypeInternal _UGCResBoneNodeData_default_instance_;
PROTOBUF_CONSTEXPR UGCResSkeletonData::UGCResSkeletonData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rootbone_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResSkeletonDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResSkeletonDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResSkeletonDataDefaultTypeInternal() {}
  union {
    UGCResSkeletonData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResSkeletonDataDefaultTypeInternal _UGCResSkeletonData_default_instance_;
PROTOBUF_CONSTEXPR UGCResAvatarOnePartData::UGCResAvatarOnePartData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gameobjresuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localposition_)*/nullptr
  , /*decltype(_impl_.localscale_)*/nullptr
  , /*decltype(_impl_.localrotation_)*/nullptr
  , /*decltype(_impl_.groupid_)*/0
  , /*decltype(_impl_.repbitindex_)*/0
  , /*decltype(_impl_.bindtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResAvatarOnePartDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResAvatarOnePartDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResAvatarOnePartDataDefaultTypeInternal() {}
  union {
    UGCResAvatarOnePartData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResAvatarOnePartDataDefaultTypeInternal _UGCResAvatarOnePartData_default_instance_;
PROTOBUF_CONSTEXPR UGCResOneAvatarData::UGCResOneAvatarData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partlist_)*/{}
  , /*decltype(_impl_.skeletonresuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.defaultvisablemask1_)*/0
  , /*decltype(_impl_.defaultvisablemask2_)*/0
  , /*decltype(_impl_.defaultvisablemask3_)*/0
  , /*decltype(_impl_.preloadallpart_)*/false
  , /*decltype(_impl_.autocombinemesh_)*/false
  , /*decltype(_impl_.defaultvisablemask4_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResOneAvatarDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResOneAvatarDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResOneAvatarDataDefaultTypeInternal() {}
  union {
    UGCResOneAvatarData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResOneAvatarDataDefaultTypeInternal _UGCResOneAvatarData_default_instance_;
PROTOBUF_CONSTEXPR UGCResSkinnedMeshExtData::UGCResSkinnedMeshExtData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bonenames_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResSkinnedMeshExtDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResSkinnedMeshExtDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResSkinnedMeshExtDataDefaultTypeInternal() {}
  union {
    UGCResSkinnedMeshExtData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResSkinnedMeshExtDataDefaultTypeInternal _UGCResSkinnedMeshExtData_default_instance_;
PROTOBUF_CONSTEXPR UGCResAnimKeyFrameFloat::UGCResAnimKeyFrameFloat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_.weightedmode_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.inslope_)*/0
  , /*decltype(_impl_.outslope_)*/0
  , /*decltype(_impl_.inweight_)*/0
  , /*decltype(_impl_.outweight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResAnimKeyFrameFloatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResAnimKeyFrameFloatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResAnimKeyFrameFloatDefaultTypeInternal() {}
  union {
    UGCResAnimKeyFrameFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResAnimKeyFrameFloatDefaultTypeInternal _UGCResAnimKeyFrameFloat_default_instance_;
PROTOBUF_CONSTEXPR FBXAnimationCurve::FBXAnimationCurve(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keyframes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FBXAnimationCurveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FBXAnimationCurveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FBXAnimationCurveDefaultTypeInternal() {}
  union {
    FBXAnimationCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FBXAnimationCurveDefaultTypeInternal _FBXAnimationCurve_default_instance_;
PROTOBUF_CONSTEXPR UGCResAnimFloatCurves::UGCResAnimFloatCurves(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.curve_)*/{}
  , /*decltype(_impl_.classname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.propertyname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResAnimFloatCurvesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResAnimFloatCurvesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResAnimFloatCurvesDefaultTypeInternal() {}
  union {
    UGCResAnimFloatCurves _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResAnimFloatCurvesDefaultTypeInternal _UGCResAnimFloatCurves_default_instance_;
PROTOBUF_CONSTEXPR UGCResAnimNodeCurves::UGCResAnimNodeCurves(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rotation_)*/{}
  , /*decltype(_impl_.translation_)*/{}
  , /*decltype(_impl_.scale_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResAnimNodeCurvesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResAnimNodeCurvesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResAnimNodeCurvesDefaultTypeInternal() {}
  union {
    UGCResAnimNodeCurves _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResAnimNodeCurvesDefaultTypeInternal _UGCResAnimNodeCurves_default_instance_;
PROTOBUF_CONSTEXPR UGCResAnimClipData::UGCResAnimClipData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.floatanim_)*/{}
  , /*decltype(_impl_.nodeanim_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bakestart_)*/0
  , /*decltype(_impl_.bakestop_)*/0
  , /*decltype(_impl_.samplerate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UGCResAnimClipDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UGCResAnimClipDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UGCResAnimClipDataDefaultTypeInternal() {}
  union {
    UGCResAnimClipData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UGCResAnimClipDataDefaultTypeInternal _UGCResAnimClipData_default_instance_;
}  // namespace message
static ::_pb::Metadata file_level_metadata_ProtoBuffUGCResource_2eproto[36];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ProtoBuffUGCResource_2eproto = nullptr;

const uint32_t TableStruct_ProtoBuffUGCResource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderMeshData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderMeshData, _impl_.vertexs_),
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderMeshData, _impl_.indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderInfoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderInfoData, _impl_.collidertype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderInfoData, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderInfoData, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderInfoData, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderInfoData, _impl_.istrigger_),
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderInfoData, _impl_.isconvexifmesh_),
  PROTOBUF_FIELD_OFFSET(::message::UGCColliderInfoData, _impl_.meshcollideruuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCGameObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCGameObjectData, _impl_.enginemeshuuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameObjectData, _impl_.ugcmaterialuuidlist_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameObjectData, _impl_.colliderlist_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameObjectData, _impl_.rendererdatasource_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameObjectData, _impl_.abgameobjectresuuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameObjectData, _impl_.disableabrescollision_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameObjectData, _impl_.isskinnedmesh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceColliderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceColliderData, _impl_.colliderlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::ProtoBuffVector4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::ProtoBuffVector4, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::message::ProtoBuffVector4, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::message::ProtoBuffVector4, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::message::ProtoBuffVector4, _impl_.w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCMaterialParamData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::message::UGCMaterialParamData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCMaterialParamData, _impl_.name_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::message::UGCMaterialParamData, _impl_.Value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCMaterialData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCMaterialData, _impl_.shadername_),
  PROTOBUF_FIELD_OFFSET(::message::UGCMaterialData, _impl_.shaderparamlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUIAtlasData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUIAtlasData, _impl_.materialresuuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUIAtlasData, _impl_.pixelsize_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUIAtlasData, _impl_.sprites_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.borderleft_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.borderright_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.bordertop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.borderbottom_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.paddingleft_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.paddingright_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.paddingtop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceUISpriteData, _impl_.paddingbottom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageItem, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageItem, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageItem, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageItem, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageItem, _impl_.isunityassetbundleres_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCAssetBundleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCAssetBundleData, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAssetBundleData, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAssetBundleData, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::message::UGCAssetBundleData, _impl_.dependencesbundle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCAllUnityBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCAllUnityBundle, _impl_.bundlelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.sharetype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.packagetype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.useabletype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.dataformatversion_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.allunitybundles_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageData, _impl_.resourcelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageRefInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageRefInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageRefInfo, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageRefInfo, _impl_.refversiontype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageRefInfo, _impl_.useversionmd5_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageRefInfo, _impl_.whorequire_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageRefInfo, _impl_.platformspecial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageDownloadDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageDownloadDesc, _impl_.packageuuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageDownloadDesc, _impl_.downloadpackageurltag_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageDownloadDesc, _impl_.downloadpackageurlinfo_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageDownloadDesc, _impl_.downloadexturltag_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageDownloadDesc, _impl_.downloadexturlinfolist_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourcePackageDownloadDesc, _impl_.filebytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCGameDataResourcePackageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCGameDataResourcePackageInfo, _impl_.dataformatversion_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameDataResourcePackageInfo, _impl_.refpackages_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameDataResourcePackageInfo, _impl_.buildinpackages_),
  PROTOBUF_FIELD_OFFSET(::message::UGCGameDataResourcePackageInfo, _impl_.downloaddescs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceFileDownloadDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceFileDownloadDesc, _impl_.subfileid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceFileDownloadDesc, _impl_.sha1_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceFileDownloadDesc, _impl_.filesize_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceFileDownloadDesc, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResourceFileDownloadDesc, _impl_.platformrequiremask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCPackageDownloadDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCPackageDownloadDesc, _impl_.packageuuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCPackageDownloadDesc, _impl_.filelist_),
  PROTOBUF_FIELD_OFFSET(::message::UGCPackageDownloadDesc, _impl_.downloadpriority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCGameDataDownloadDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCGameDataDownloadDesc, _impl_.packagelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCSVRowData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCSVRowData, _impl_.rowdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCCSVData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCCSVData, _impl_.csvdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResFFBuildin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResFFBuildin, _impl_.ffresourcename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateClipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateClipData, _impl_.clipuuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateClipData, _impl_.clipname_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateClipData, _impl_.isloop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateClipData, _impl_.playspeed_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateClipData, _impl_.length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateData, _impl_.statename_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateData, _impl_.isloop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationStateData, _impl_.clips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationControllerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimationControllerData, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeCapsuleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeCapsuleData, _impl_.center_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeCapsuleData, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeCapsuleData, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeCapsuleData, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeCapsuleData, _impl_.bodytype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeData, _impl_.bonename_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeData, _impl_.localposition_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeData, _impl_.localscale_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeData, _impl_.localrotation_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeData, _impl_.capsuleinfo_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResBoneNodeData, _impl_.childbones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResSkeletonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResSkeletonData, _impl_.rootbone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _impl_.repbitindex_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _impl_.gameobjresuuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _impl_.bone_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _impl_.bindtype_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _impl_.localposition_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _impl_.localscale_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAvatarOnePartData, _impl_.localrotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResOneAvatarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResOneAvatarData, _impl_.skeletonresuuid_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResOneAvatarData, _impl_.preloadallpart_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResOneAvatarData, _impl_.defaultvisablemask1_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResOneAvatarData, _impl_.defaultvisablemask2_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResOneAvatarData, _impl_.defaultvisablemask3_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResOneAvatarData, _impl_.defaultvisablemask4_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResOneAvatarData, _impl_.partlist_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResOneAvatarData, _impl_.autocombinemesh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResSkinnedMeshExtData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResSkinnedMeshExtData, _impl_.bonenames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimKeyFrameFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimKeyFrameFloat, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimKeyFrameFloat, _impl_.weightedmode_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimKeyFrameFloat, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimKeyFrameFloat, _impl_.inslope_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimKeyFrameFloat, _impl_.outslope_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimKeyFrameFloat, _impl_.inweight_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimKeyFrameFloat, _impl_.outweight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::FBXAnimationCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::FBXAnimationCurve, _impl_.keyframes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimFloatCurves, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimFloatCurves, _impl_.curve_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimFloatCurves, _impl_.classname_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimFloatCurves, _impl_.propertyname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimNodeCurves, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimNodeCurves, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimNodeCurves, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimNodeCurves, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimNodeCurves, _impl_.scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimClipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimClipData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimClipData, _impl_.bakestart_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimClipData, _impl_.bakestop_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimClipData, _impl_.samplerate_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimClipData, _impl_.floatanim_),
  PROTOBUF_FIELD_OFFSET(::message::UGCResAnimClipData, _impl_.nodeanim_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::message::UGCColliderMeshData)},
  { 8, -1, -1, sizeof(::message::UGCColliderInfoData)},
  { 21, -1, -1, sizeof(::message::UGCGameObjectData)},
  { 34, -1, -1, sizeof(::message::UGCResourceColliderData)},
  { 41, -1, -1, sizeof(::message::ProtoBuffVector4)},
  { 51, -1, -1, sizeof(::message::UGCMaterialParamData)},
  { 65, -1, -1, sizeof(::message::UGCMaterialData)},
  { 73, -1, -1, sizeof(::message::UGCResourceUIAtlasData)},
  { 82, -1, -1, sizeof(::message::UGCResourceUISpriteData)},
  { 101, -1, -1, sizeof(::message::UGCResourcePackageItem)},
  { 112, -1, -1, sizeof(::message::UGCAssetBundleData)},
  { 122, -1, -1, sizeof(::message::UGCAllUnityBundle)},
  { 129, -1, -1, sizeof(::message::UGCResourcePackageData)},
  { 145, -1, -1, sizeof(::message::UGCResourcePackageRefInfo)},
  { 157, -1, -1, sizeof(::message::UGCResourcePackageDownloadDesc)},
  { 169, -1, -1, sizeof(::message::UGCGameDataResourcePackageInfo)},
  { 179, -1, -1, sizeof(::message::UGCResourceFileDownloadDesc)},
  { 190, -1, -1, sizeof(::message::UGCPackageDownloadDesc)},
  { 199, -1, -1, sizeof(::message::UGCGameDataDownloadDesc)},
  { 206, -1, -1, sizeof(::message::UGCCSVRowData)},
  { 213, -1, -1, sizeof(::message::UGCCSVData)},
  { 220, -1, -1, sizeof(::message::UGCResFFBuildin)},
  { 227, -1, -1, sizeof(::message::UGCResAnimationStateClipData)},
  { 238, -1, -1, sizeof(::message::UGCResAnimationStateData)},
  { 247, -1, -1, sizeof(::message::UGCResAnimationControllerData)},
  { 254, -1, -1, sizeof(::message::UGCResBoneNodeCapsuleData)},
  { 265, -1, -1, sizeof(::message::UGCResBoneNodeData)},
  { 277, -1, -1, sizeof(::message::UGCResSkeletonData)},
  { 284, -1, -1, sizeof(::message::UGCResAvatarOnePartData)},
  { 299, -1, -1, sizeof(::message::UGCResOneAvatarData)},
  { 313, -1, -1, sizeof(::message::UGCResSkinnedMeshExtData)},
  { 320, -1, -1, sizeof(::message::UGCResAnimKeyFrameFloat)},
  { 333, -1, -1, sizeof(::message::FBXAnimationCurve)},
  { 340, -1, -1, sizeof(::message::UGCResAnimFloatCurves)},
  { 349, -1, -1, sizeof(::message::UGCResAnimNodeCurves)},
  { 359, -1, -1, sizeof(::message::UGCResAnimClipData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::message::_UGCColliderMeshData_default_instance_._instance,
  &::message::_UGCColliderInfoData_default_instance_._instance,
  &::message::_UGCGameObjectData_default_instance_._instance,
  &::message::_UGCResourceColliderData_default_instance_._instance,
  &::message::_ProtoBuffVector4_default_instance_._instance,
  &::message::_UGCMaterialParamData_default_instance_._instance,
  &::message::_UGCMaterialData_default_instance_._instance,
  &::message::_UGCResourceUIAtlasData_default_instance_._instance,
  &::message::_UGCResourceUISpriteData_default_instance_._instance,
  &::message::_UGCResourcePackageItem_default_instance_._instance,
  &::message::_UGCAssetBundleData_default_instance_._instance,
  &::message::_UGCAllUnityBundle_default_instance_._instance,
  &::message::_UGCResourcePackageData_default_instance_._instance,
  &::message::_UGCResourcePackageRefInfo_default_instance_._instance,
  &::message::_UGCResourcePackageDownloadDesc_default_instance_._instance,
  &::message::_UGCGameDataResourcePackageInfo_default_instance_._instance,
  &::message::_UGCResourceFileDownloadDesc_default_instance_._instance,
  &::message::_UGCPackageDownloadDesc_default_instance_._instance,
  &::message::_UGCGameDataDownloadDesc_default_instance_._instance,
  &::message::_UGCCSVRowData_default_instance_._instance,
  &::message::_UGCCSVData_default_instance_._instance,
  &::message::_UGCResFFBuildin_default_instance_._instance,
  &::message::_UGCResAnimationStateClipData_default_instance_._instance,
  &::message::_UGCResAnimationStateData_default_instance_._instance,
  &::message::_UGCResAnimationControllerData_default_instance_._instance,
  &::message::_UGCResBoneNodeCapsuleData_default_instance_._instance,
  &::message::_UGCResBoneNodeData_default_instance_._instance,
  &::message::_UGCResSkeletonData_default_instance_._instance,
  &::message::_UGCResAvatarOnePartData_default_instance_._instance,
  &::message::_UGCResOneAvatarData_default_instance_._instance,
  &::message::_UGCResSkinnedMeshExtData_default_instance_._instance,
  &::message::_UGCResAnimKeyFrameFloat_default_instance_._instance,
  &::message::_FBXAnimationCurve_default_instance_._instance,
  &::message::_UGCResAnimFloatCurves_default_instance_._instance,
  &::message::_UGCResAnimNodeCurves_default_instance_._instance,
  &::message::_UGCResAnimClipData_default_instance_._instance,
};

const char descriptor_table_protodef_ProtoBuffUGCResource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032ProtoBuffUGCResource.proto\022\007message\032\025P"
  "rotoBuffCommon.proto\"7\n\023UGCColliderMeshD"
  "ata\022\017\n\007Vertexs\030\001 \003(\002\022\017\n\007Indices\030\002 \003(\005\"\220\002"
  "\n\023UGCColliderInfoData\022/\n\014ColliderType\030\001 "
  "\001(\0162\031.message.EUGCColliderType\022)\n\006Offset"
  "\030\002 \001(\0132\031.message.ProtoBuffVector3\022(\n\005Sca"
  "le\030\003 \001(\0132\031.message.ProtoBuffVector3\022.\n\010R"
  "otation\030\004 \001(\0132\034.message.ProtoBuffQuatern"
  "ion\022\021\n\tIsTrigger\030\005 \001(\010\022\026\n\016IsConvexIfMesh"
  "\030\006 \001(\010\022\030\n\020MeshColliderUUID\030\007 \001(\t\"\214\002\n\021UGC"
  "GameObjectData\022\026\n\016EngineMeshUUID\030\001 \001(\t\022\033"
  "\n\023UGCMaterialUUIDList\030\002 \003(\t\0222\n\014ColliderL"
  "ist\030\003 \003(\0132\034.message.UGCColliderInfoData\022"
  ";\n\022RendererDataSource\030\004 \001(\0162\037.message.EU"
  "GCRendererDataSource\022\033\n\023ABGameObjectResU"
  "UID\030\005 \001(\t\022\035\n\025DisableABResCollision\030\006 \001(\010"
  "\022\025\n\rIsSkinnedMesh\030\007 \001(\010\"M\n\027UGCResourceCo"
  "lliderData\0222\n\014ColliderList\030\003 \003(\0132\034.messa"
  "ge.UGCColliderInfoData\">\n\020ProtoBuffVecto"
  "r4\022\t\n\001X\030\001 \001(\002\022\t\n\001Y\030\002 \001(\002\022\t\n\001Z\030\003 \001(\002\022\t\n\001W"
  "\030\004 \001(\002\"\312\001\n\024UGCMaterialParamData\022\014\n\004Name\030"
  "\001 \001(\t\022\024\n\nFloatValue\030\002 \001(\002H\000\022\025\n\013TextureUU"
  "ID\030\003 \001(\tH\000\022+\n\006Vector\030\004 \001(\0132\031.message.Pro"
  "toBuffVector4H\000\022\022\n\010IntValue\030\005 \001(\005H\000\022\024\n\nC"
  "olorValue\030\006 \001(\005H\000\022\027\n\rEnableKeyword\030\007 \001(\t"
  "H\000B\007\n\005Value\"]\n\017UGCMaterialData\022\022\n\nShader"
  "Name\030\001 \001(\t\0226\n\017ShaderParamList\030\002 \003(\0132\035.me"
  "ssage.UGCMaterialParamData\"w\n\026UGCResourc"
  "eUIAtlasData\022\027\n\017MaterialResUUID\030\001 \001(\t\022\021\n"
  "\tPixelSize\030\002 \001(\002\0221\n\007Sprites\030\003 \003(\0132 .mess"
  "age.UGCResourceUISpriteData\"\204\002\n\027UGCResou"
  "rceUISpriteData\022\014\n\004Name\030\001 \001(\t\022\t\n\001X\030\002 \001(\005"
  "\022\t\n\001Y\030\003 \001(\005\022\r\n\005Width\030\004 \001(\005\022\016\n\006Height\030\005 \001"
  "(\005\022\022\n\nBorderLeft\030\006 \001(\005\022\023\n\013BorderRight\030\007 "
  "\001(\005\022\021\n\tBorderTop\030\010 \001(\005\022\024\n\014BorderBottom\030\t"
  " \001(\005\022\023\n\013PaddingLeft\030\n \001(\005\022\024\n\014PaddingRigh"
  "t\030\013 \001(\005\022\022\n\nPaddingTop\030\014 \001(\005\022\025\n\rPaddingBo"
  "ttom\030\r \001(\005\"\212\001\n\026UGCResourcePackageItem\022\014\n"
  "\004UUID\030\001 \001(\t\022\'\n\004Type\030\002 \001(\0162\031.message.EUGC"
  "ResourceType\022\014\n\004Path\030\003 \001(\t\022\014\n\004Data\030\004 \001(\014"
  "\022\035\n\025IsUnityAssetBundleRes\030\005 \001(\010\"Y\n\022UGCAs"
  "setBundleData\022\014\n\004Path\030\001 \001(\t\022\014\n\004Hash\030\002 \001("
  "\t\022\014\n\004Size\030\003 \001(\005\022\031\n\021DependencesBundle\030\004 \003"
  "(\t\"D\n\021UGCAllUnityBundle\022/\n\nBundleList\030\001 "
  "\003(\0132\033.message.UGCAssetBundleData\"\223\003\n\026UGC"
  "ResourcePackageData\022\014\n\004Name\030\001 \001(\t\022\014\n\004UUI"
  "D\030\002 \001(\t\0220\n\tShareType\030\003 \001(\0162\035.message.EUG"
  "CPackageShareType\022-\n\013PackageType\030\004 \001(\0162\030"
  ".message.EUGCPackageType\0224\n\013UseableType\030"
  "\005 \001(\0162\037.message.EUGCPackageUseableType\022."
  "\n\010Platform\030\006 \001(\0162\034.message.EUGCPackagePl"
  "atform\022\017\n\007Version\030\007 \001(\t\022\031\n\021DataFormatVer"
  "sion\030\010 \001(\005\0223\n\017AllUnityBundles\030\t \001(\0132\032.me"
  "ssage.UGCAllUnityBundle\0225\n\014ResourceList\030"
  "\n \003(\0132\037.message.UGCResourcePackageItem\"\330"
  "\001\n\031UGCResourcePackageRefInfo\022\014\n\004Name\030\001 \001"
  "(\t\022\014\n\004UUID\030\002 \001(\t\022:\n\016RefVersionType\030\003 \001(\016"
  "2\".message.EUGCPackageRefVersionType\022\025\n\r"
  "UseVersionMD5\030\004 \001(\t\0223\n\nWhoRequire\030\005 \001(\0162"
  "\037.message.EUGCPackageUseableType\022\027\n\017Plat"
  "formSpecial\030\006 \001(\010\"\302\001\n\036UGCResourcePackage"
  "DownloadDesc\022\023\n\013PackageUUID\030\001 \001(\t\022\035\n\025Dow"
  "nloadPackageUrlTag\030\002 \001(\t\022\036\n\026DownloadPack"
  "ageUrlInfo\030\003 \001(\t\022\031\n\021DownloadExtUrlTag\030\004 "
  "\001(\t\022\036\n\026DownloadExtUrlInfoList\030\005 \003(\t\022\021\n\tF"
  "ileBytes\030\006 \001(\005\"\356\001\n\036UGCGameDataResourcePa"
  "ckageInfo\022\031\n\021DataFormatVersion\030\001 \001(\r\0227\n\013"
  "RefPackages\030\003 \003(\0132\".message.UGCResourceP"
  "ackageRefInfo\0228\n\017BuildinPackages\030\004 \003(\0132\037"
  ".message.UGCResourcePackageData\022>\n\rDownl"
  "oadDescs\030\005 \003(\0132\'.message.UGCResourcePack"
  "ageDownloadDesc\"z\n\033UGCResourceFileDownlo"
  "adDesc\022\021\n\tSubFileID\030\001 \001(\t\022\014\n\004SHA1\030\002 \001(\t\022"
  "\020\n\010FileSize\030\003 \001(\005\022\013\n\003URL\030\004 \001(\t\022\033\n\023Platfo"
  "rmRequireMask\030\005 \001(\005\"\177\n\026UGCPackageDownloa"
  "dDesc\022\023\n\013PackageUUID\030\001 \001(\t\0226\n\010FileList\030\002"
  " \003(\0132$.message.UGCResourceFileDownloadDe"
  "sc\022\030\n\020DownloadPriority\030\003 \001(\005\"O\n\027UGCGameD"
  "ataDownloadDesc\0224\n\013PackageList\030\001 \003(\0132\037.m"
  "essage.UGCPackageDownloadDesc\" \n\rUGCCSVR"
  "owData\022\017\n\007RowData\030\001 \003(\t\"5\n\nUGCCSVData\022\'\n"
  "\007CSVData\030\001 \003(\0132\026.message.UGCCSVRowData\")"
  "\n\017UGCResFFBuildin\022\026\n\016FFResourceName\030\001 \001("
  "\t\"u\n\034UGCResAnimationStateClipData\022\020\n\010Cli"
  "pUUID\030\001 \001(\t\022\020\n\010ClipName\030\002 \001(\t\022\016\n\006IsLoop\030"
  "\003 \001(\010\022\021\n\tPlaySpeed\030\004 \001(\002\022\016\n\006Length\030\005 \001(\002"
  "\"s\n\030UGCResAnimationStateData\022\021\n\tStateNam"
  "e\030\001 \001(\t\022\016\n\006IsLoop\030\002 \001(\010\0224\n\005Clips\030\003 \003(\0132%"
  ".message.UGCResAnimationStateClipData\"R\n"
  "\035UGCResAnimationControllerData\0221\n\006States"
  "\030\001 \003(\0132!.message.UGCResAnimationStateDat"
  "a\"\213\001\n\031UGCResBoneNodeCapsuleData\022)\n\006Cente"
  "r\030\001 \001(\0132\031.message.ProtoBuffVector3\022\016\n\006Ra"
  "dius\030\002 \001(\002\022\016\n\006Height\030\003 \001(\002\022\021\n\tDirection\030"
  "\004 \001(\005\022\020\n\010BodyType\030\005 \001(\005\"\246\002\n\022UGCResBoneNo"
  "deData\022\020\n\010BoneName\030\001 \001(\t\0220\n\rLocalPositio"
  "n\030\002 \001(\0132\031.message.ProtoBuffVector3\022-\n\nLo"
  "calScale\030\003 \001(\0132\031.message.ProtoBuffVector"
  "3\0223\n\rLocalRotation\030\004 \001(\0132\034.message.Proto"
  "BuffQuaternion\0227\n\013CapsuleInfo\030\005 \001(\0132\".me"
  "ssage.UGCResBoneNodeCapsuleData\022/\n\nChild"
  "Bones\030\006 \003(\0132\033.message.UGCResBoneNodeData"
  "\"C\n\022UGCResSkeletonData\022-\n\010RootBone\030\001 \001(\013"
  "2\033.message.UGCResBoneNodeData\"\233\002\n\027UGCRes"
  "AvatarOnePartData\022\014\n\004Name\030\001 \001(\t\022\017\n\007Group"
  "ID\030\002 \001(\005\022\023\n\013RepBitIndex\030\003 \001(\005\022\026\n\016GameObj"
  "ResUUID\030\004 \001(\t\022\014\n\004Bone\030\005 \001(\t\022\020\n\010BindType\030"
  "\006 \001(\005\0220\n\rLocalPosition\030\007 \001(\0132\031.message.P"
  "rotoBuffVector3\022-\n\nLocalScale\030\010 \001(\0132\031.me"
  "ssage.ProtoBuffVector3\0223\n\rLocalRotation\030"
  "\t \001(\0132\034.message.ProtoBuffQuaternion\"\207\002\n\023"
  "UGCResOneAvatarData\022\027\n\017SkeletonResUUID\030\001"
  " \001(\t\022\026\n\016PreloadAllPart\030\002 \001(\010\022\033\n\023DefaultV"
  "isableMask1\030\003 \001(\005\022\033\n\023DefaultVisableMask2"
  "\030\004 \001(\005\022\033\n\023DefaultVisableMask3\030\005 \001(\005\022\033\n\023D"
  "efaultVisableMask4\030\006 \001(\005\0222\n\010PartList\030\007 \003"
  "(\0132 .message.UGCResAvatarOnePartData\022\027\n\017"
  "AutoCombineMesh\030\010 \001(\010\"-\n\030UGCResSkinnedMe"
  "shExtData\022\021\n\tBoneNames\030\001 \003(\t\"\224\001\n\027UGCResA"
  "nimKeyFrameFloat\022\014\n\004Time\030\001 \001(\002\022\024\n\014Weight"
  "edMode\030\002 \001(\005\022\r\n\005Value\030\003 \001(\002\022\017\n\007InSlope\030\004"
  " \001(\002\022\020\n\010OutSlope\030\005 \001(\002\022\020\n\010InWeight\030\006 \001(\002"
  "\022\021\n\tOutWeight\030\007 \001(\002\"H\n\021FBXAnimationCurve"
  "\0223\n\tKeyframes\030\001 \003(\0132 .message.UGCResAnim"
  "KeyFrameFloat\"k\n\025UGCResAnimFloatCurves\022)"
  "\n\005Curve\030\001 \003(\0132\032.message.FBXAnimationCurv"
  "e\022\021\n\tClassName\030\002 \001(\t\022\024\n\014PropertyName\030\003 \001"
  "(\t\"\256\001\n\024UGCResAnimNodeCurves\022\014\n\004Name\030\001 \001("
  "\t\022,\n\010Rotation\030\002 \003(\0132\032.message.FBXAnimati"
  "onCurve\022/\n\013Translation\030\003 \003(\0132\032.message.F"
  "BXAnimationCurve\022)\n\005Scale\030\004 \003(\0132\032.messag"
  "e.FBXAnimationCurve\"\277\001\n\022UGCResAnimClipDa"
  "ta\022\014\n\004Name\030\001 \001(\t\022\021\n\tBakeStart\030\002 \001(\001\022\020\n\010B"
  "akeStop\030\003 \001(\001\022\022\n\nSampleRate\030\004 \001(\002\0221\n\tFlo"
  "atAnim\030\005 \003(\0132\036.message.UGCResAnimFloatCu"
  "rves\022/\n\010NodeAnim\030\006 \003(\0132\035.message.UGCResA"
  "nimNodeCurves*F\n\020EUGCColliderType\022\007\n\003Box"
  "\020\000\022\n\n\006Sphere\020\001\022\013\n\007Capsule\020\002\022\020\n\014MeshColli"
  "der\020\003*K\n\026EUGCRendererDataSource\022\031\n\025Sourc"
  "eMeshAndMaterial\020\000\022\026\n\022SourceABGameObject"
  "\020\001*/\n\024EUGCPackageShareType\022\013\n\007Private\020\000\022"
  "\n\n\006Public\020\001*i\n\017EUGCPackageType\022\n\n\006Custom"
  "\020\000\022\017\n\013UnityBundle\020\001\022\025\n\021FFBuildinResource"
  "\020\002\022\r\n\tWebCustom\020\003\022\023\n\017VirtualResource\020\004*A"
  "\n\023EUGCPackagePlatform\022\007\n\003Any\020\000\022\013\n\007Androi"
  "d\020\001\022\007\n\003IOS\020\002\022\013\n\007Desktop\020\003*J\n\026EUGCPackage"
  "UseableType\022\016\n\nClientOnly\020\000\022\016\n\nServerOnl"
  "y\020\001\022\020\n\014ClientServer\020\002*\305\002\n\020EUGCResourceTy"
  "pe\022\016\n\nGameObject\020\000\022\r\n\tTexture2D\020\001\022\010\n\004Mes"
  "h\020\002\022\014\n\010Material\020\003\022\021\n\rAnimationClip\020\004\022\r\n\t"
  "AudioClip\020\005\022\020\n\014SkeletonMesh\020\006\022\014\n\010Skeleto"
  "n\020\007\022\020\n\014ColliderMesh\020\n\022\010\n\004Text\020\013\022\017\n\013Grass"
  "System\020\014\022\007\n\003CSV\020\r\022\013\n\007UIAtlas\020\016\022\023\n\017ABGame"
  "ObjectRes\020\017\022\014\n\010Collider\020\020\022\027\n\023AnimationCo"
  "ntroller\020\021\022\026\n\022EventAnimationClip\020\022\022\n\n\006Av"
  "atar\020\023\022\t\n\005Other\020\035\022\n\n\006Folder\020\036*H\n\031EUGCPac"
  "kageRefVersionType\022\022\n\016SpecialVersion\020\000\022\027"
  "\n\023AlwaysNewestVersion\020\001*x\n\027EUGCFilePlatf"
  "ormRequire\022\014\n\010EFPRSkip\020\000\022\025\n\021EFPRClientAn"
  "droid\020\001\022\021\n\rEFPRClientIOS\020\002\022\025\n\021EFPRClient"
  "Desktop\020\004\022\016\n\nEFPRServer\020\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ProtoBuffUGCResource_2eproto_deps[1] = {
  &::descriptor_table_ProtoBuffCommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_ProtoBuffUGCResource_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ProtoBuffUGCResource_2eproto = {
    false, false, 6433, descriptor_table_protodef_ProtoBuffUGCResource_2eproto,
    "ProtoBuffUGCResource.proto",
    &descriptor_table_ProtoBuffUGCResource_2eproto_once, descriptor_table_ProtoBuffUGCResource_2eproto_deps, 1, 36,
    schemas, file_default_instances, TableStruct_ProtoBuffUGCResource_2eproto::offsets,
    file_level_metadata_ProtoBuffUGCResource_2eproto, file_level_enum_descriptors_ProtoBuffUGCResource_2eproto,
    file_level_service_descriptors_ProtoBuffUGCResource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ProtoBuffUGCResource_2eproto_getter() {
  return &descriptor_table_ProtoBuffUGCResource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ProtoBuffUGCResource_2eproto(&descriptor_table_ProtoBuffUGCResource_2eproto);
namespace message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCColliderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoBuffUGCResource_2eproto);
  return file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[0];
}
bool EUGCColliderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCRendererDataSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoBuffUGCResource_2eproto);
  return file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[1];
}
bool EUGCRendererDataSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackageShareType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoBuffUGCResource_2eproto);
  return file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[2];
}
bool EUGCPackageShareType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoBuffUGCResource_2eproto);
  return file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[3];
}
bool EUGCPackageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackagePlatform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoBuffUGCResource_2eproto);
  return file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[4];
}
bool EUGCPackagePlatform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackageUseableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoBuffUGCResource_2eproto);
  return file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[5];
}
bool EUGCPackageUseableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoBuffUGCResource_2eproto);
  return file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[6];
}
bool EUGCResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackageRefVersionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoBuffUGCResource_2eproto);
  return file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[7];
}
bool EUGCPackageRefVersionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCFilePlatformRequire_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoBuffUGCResource_2eproto);
  return file_level_enum_descriptors_ProtoBuffUGCResource_2eproto[8];
}
bool EUGCFilePlatformRequire_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UGCColliderMeshData::_Internal {
 public:
};

UGCColliderMeshData::UGCColliderMeshData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCColliderMeshData)
}
UGCColliderMeshData::UGCColliderMeshData(const UGCColliderMeshData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCColliderMeshData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertexs_){from._impl_.vertexs_}
    , decltype(_impl_.indices_){from._impl_.indices_}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCColliderMeshData)
}

inline void UGCColliderMeshData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertexs_){arena}
    , decltype(_impl_.indices_){arena}
    , /*decltype(_impl_._indices_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCColliderMeshData::~UGCColliderMeshData() {
  // @@protoc_insertion_point(destructor:message.UGCColliderMeshData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCColliderMeshData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertexs_.~RepeatedField();
  _impl_.indices_.~RepeatedField();
}

void UGCColliderMeshData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCColliderMeshData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCColliderMeshData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertexs_.Clear();
  _impl_.indices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCColliderMeshData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float Vertexs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vertexs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_vertexs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCColliderMeshData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCColliderMeshData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float Vertexs = 1;
  if (this->_internal_vertexs_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vertexs(), target);
  }

  // repeated int32 Indices = 2;
  {
    int byte_size = _impl_._indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCColliderMeshData)
  return target;
}

size_t UGCColliderMeshData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCColliderMeshData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float Vertexs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vertexs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 Indices = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCColliderMeshData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCColliderMeshData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCColliderMeshData::GetClassData() const { return &_class_data_; }


void UGCColliderMeshData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCColliderMeshData*>(&to_msg);
  auto& from = static_cast<const UGCColliderMeshData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCColliderMeshData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertexs_.MergeFrom(from._impl_.vertexs_);
  _this->_impl_.indices_.MergeFrom(from._impl_.indices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCColliderMeshData::CopyFrom(const UGCColliderMeshData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCColliderMeshData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCColliderMeshData::IsInitialized() const {
  return true;
}

void UGCColliderMeshData::InternalSwap(UGCColliderMeshData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertexs_.InternalSwap(&other->_impl_.vertexs_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCColliderMeshData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[0]);
}

// ===================================================================

class UGCColliderInfoData::_Internal {
 public:
  static const ::message::ProtoBuffVector3& offset(const UGCColliderInfoData* msg);
  static const ::message::ProtoBuffVector3& scale(const UGCColliderInfoData* msg);
  static const ::message::ProtoBuffQuaternion& rotation(const UGCColliderInfoData* msg);
};

const ::message::ProtoBuffVector3&
UGCColliderInfoData::_Internal::offset(const UGCColliderInfoData* msg) {
  return *msg->_impl_.offset_;
}
const ::message::ProtoBuffVector3&
UGCColliderInfoData::_Internal::scale(const UGCColliderInfoData* msg) {
  return *msg->_impl_.scale_;
}
const ::message::ProtoBuffQuaternion&
UGCColliderInfoData::_Internal::rotation(const UGCColliderInfoData* msg) {
  return *msg->_impl_.rotation_;
}
void UGCColliderInfoData::clear_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.offset_ != nullptr) {
    delete _impl_.offset_;
  }
  _impl_.offset_ = nullptr;
}
void UGCColliderInfoData::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
void UGCColliderInfoData::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
UGCColliderInfoData::UGCColliderInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCColliderInfoData)
}
UGCColliderInfoData::UGCColliderInfoData(const UGCColliderInfoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCColliderInfoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.meshcollideruuid_){}
    , decltype(_impl_.offset_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.collidertype_){}
    , decltype(_impl_.istrigger_){}
    , decltype(_impl_.isconvexifmesh_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.meshcollideruuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meshcollideruuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meshcollideruuid().empty()) {
    _this->_impl_.meshcollideruuid_.Set(from._internal_meshcollideruuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_offset()) {
    _this->_impl_.offset_ = new ::message::ProtoBuffVector3(*from._impl_.offset_);
  }
  if (from._internal_has_scale()) {
    _this->_impl_.scale_ = new ::message::ProtoBuffVector3(*from._impl_.scale_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::message::ProtoBuffQuaternion(*from._impl_.rotation_);
  }
  ::memcpy(&_impl_.collidertype_, &from._impl_.collidertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isconvexifmesh_) -
    reinterpret_cast<char*>(&_impl_.collidertype_)) + sizeof(_impl_.isconvexifmesh_));
  // @@protoc_insertion_point(copy_constructor:message.UGCColliderInfoData)
}

inline void UGCColliderInfoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.meshcollideruuid_){}
    , decltype(_impl_.offset_){nullptr}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.collidertype_){0}
    , decltype(_impl_.istrigger_){false}
    , decltype(_impl_.isconvexifmesh_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.meshcollideruuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.meshcollideruuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCColliderInfoData::~UGCColliderInfoData() {
  // @@protoc_insertion_point(destructor:message.UGCColliderInfoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCColliderInfoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.meshcollideruuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.offset_;
  if (this != internal_default_instance()) delete _impl_.scale_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void UGCColliderInfoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCColliderInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCColliderInfoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.meshcollideruuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.offset_ != nullptr) {
    delete _impl_.offset_;
  }
  _impl_.offset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  ::memset(&_impl_.collidertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isconvexifmesh_) -
      reinterpret_cast<char*>(&_impl_.collidertype_)) + sizeof(_impl_.isconvexifmesh_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCColliderInfoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.EUGCColliderType ColliderType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_collidertype(static_cast<::message::EUGCColliderType>(val));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 Offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 Scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffQuaternion Rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsTrigger = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.istrigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsConvexIfMesh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isconvexifmesh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MeshColliderUUID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_meshcollideruuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCColliderInfoData.MeshColliderUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCColliderInfoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCColliderInfoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.EUGCColliderType ColliderType = 1;
  if (this->_internal_collidertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_collidertype(), target);
  }

  // .message.ProtoBuffVector3 Offset = 2;
  if (this->_internal_has_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::offset(this),
        _Internal::offset(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 Scale = 3;
  if (this->_internal_has_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffQuaternion Rotation = 4;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // bool IsTrigger = 5;
  if (this->_internal_istrigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_istrigger(), target);
  }

  // bool IsConvexIfMesh = 6;
  if (this->_internal_isconvexifmesh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isconvexifmesh(), target);
  }

  // string MeshColliderUUID = 7;
  if (!this->_internal_meshcollideruuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_meshcollideruuid().data(), static_cast<int>(this->_internal_meshcollideruuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCColliderInfoData.MeshColliderUUID");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_meshcollideruuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCColliderInfoData)
  return target;
}

size_t UGCColliderInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCColliderInfoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string MeshColliderUUID = 7;
  if (!this->_internal_meshcollideruuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meshcollideruuid());
  }

  // .message.ProtoBuffVector3 Offset = 2;
  if (this->_internal_has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offset_);
  }

  // .message.ProtoBuffVector3 Scale = 3;
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_);
  }

  // .message.ProtoBuffQuaternion Rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // .message.EUGCColliderType ColliderType = 1;
  if (this->_internal_collidertype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_collidertype());
  }

  // bool IsTrigger = 5;
  if (this->_internal_istrigger() != 0) {
    total_size += 1 + 1;
  }

  // bool IsConvexIfMesh = 6;
  if (this->_internal_isconvexifmesh() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCColliderInfoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCColliderInfoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCColliderInfoData::GetClassData() const { return &_class_data_; }


void UGCColliderInfoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCColliderInfoData*>(&to_msg);
  auto& from = static_cast<const UGCColliderInfoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCColliderInfoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_meshcollideruuid().empty()) {
    _this->_internal_set_meshcollideruuid(from._internal_meshcollideruuid());
  }
  if (from._internal_has_offset()) {
    _this->_internal_mutable_offset()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_offset());
  }
  if (from._internal_has_scale()) {
    _this->_internal_mutable_scale()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_scale());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::message::ProtoBuffQuaternion::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_collidertype() != 0) {
    _this->_internal_set_collidertype(from._internal_collidertype());
  }
  if (from._internal_istrigger() != 0) {
    _this->_internal_set_istrigger(from._internal_istrigger());
  }
  if (from._internal_isconvexifmesh() != 0) {
    _this->_internal_set_isconvexifmesh(from._internal_isconvexifmesh());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCColliderInfoData::CopyFrom(const UGCColliderInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCColliderInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCColliderInfoData::IsInitialized() const {
  return true;
}

void UGCColliderInfoData::InternalSwap(UGCColliderInfoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.meshcollideruuid_, lhs_arena,
      &other->_impl_.meshcollideruuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCColliderInfoData, _impl_.isconvexifmesh_)
      + sizeof(UGCColliderInfoData::_impl_.isconvexifmesh_)
      - PROTOBUF_FIELD_OFFSET(UGCColliderInfoData, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCColliderInfoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[1]);
}

// ===================================================================

class UGCGameObjectData::_Internal {
 public:
};

UGCGameObjectData::UGCGameObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCGameObjectData)
}
UGCGameObjectData::UGCGameObjectData(const UGCGameObjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCGameObjectData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ugcmaterialuuidlist_){from._impl_.ugcmaterialuuidlist_}
    , decltype(_impl_.colliderlist_){from._impl_.colliderlist_}
    , decltype(_impl_.enginemeshuuid_){}
    , decltype(_impl_.abgameobjectresuuid_){}
    , decltype(_impl_.rendererdatasource_){}
    , decltype(_impl_.disableabrescollision_){}
    , decltype(_impl_.isskinnedmesh_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.enginemeshuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enginemeshuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enginemeshuuid().empty()) {
    _this->_impl_.enginemeshuuid_.Set(from._internal_enginemeshuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abgameobjectresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abgameobjectresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_abgameobjectresuuid().empty()) {
    _this->_impl_.abgameobjectresuuid_.Set(from._internal_abgameobjectresuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rendererdatasource_, &from._impl_.rendererdatasource_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isskinnedmesh_) -
    reinterpret_cast<char*>(&_impl_.rendererdatasource_)) + sizeof(_impl_.isskinnedmesh_));
  // @@protoc_insertion_point(copy_constructor:message.UGCGameObjectData)
}

inline void UGCGameObjectData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ugcmaterialuuidlist_){arena}
    , decltype(_impl_.colliderlist_){arena}
    , decltype(_impl_.enginemeshuuid_){}
    , decltype(_impl_.abgameobjectresuuid_){}
    , decltype(_impl_.rendererdatasource_){0}
    , decltype(_impl_.disableabrescollision_){false}
    , decltype(_impl_.isskinnedmesh_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.enginemeshuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enginemeshuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abgameobjectresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abgameobjectresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCGameObjectData::~UGCGameObjectData() {
  // @@protoc_insertion_point(destructor:message.UGCGameObjectData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCGameObjectData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ugcmaterialuuidlist_.~RepeatedPtrField();
  _impl_.colliderlist_.~RepeatedPtrField();
  _impl_.enginemeshuuid_.Destroy();
  _impl_.abgameobjectresuuid_.Destroy();
}

void UGCGameObjectData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCGameObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCGameObjectData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ugcmaterialuuidlist_.Clear();
  _impl_.colliderlist_.Clear();
  _impl_.enginemeshuuid_.ClearToEmpty();
  _impl_.abgameobjectresuuid_.ClearToEmpty();
  ::memset(&_impl_.rendererdatasource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isskinnedmesh_) -
      reinterpret_cast<char*>(&_impl_.rendererdatasource_)) + sizeof(_impl_.isskinnedmesh_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCGameObjectData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string EngineMeshUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_enginemeshuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCGameObjectData.EngineMeshUUID"));
        } else
          goto handle_unusual;
        continue;
      // repeated string UGCMaterialUUIDList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ugcmaterialuuidlist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCGameObjectData.UGCMaterialUUIDList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCColliderInfoData ColliderList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colliderlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCRendererDataSource RendererDataSource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rendererdatasource(static_cast<::message::EUGCRendererDataSource>(val));
        } else
          goto handle_unusual;
        continue;
      // string ABGameObjectResUUID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_abgameobjectresuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCGameObjectData.ABGameObjectResUUID"));
        } else
          goto handle_unusual;
        continue;
      // bool DisableABResCollision = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.disableabrescollision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsSkinnedMesh = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isskinnedmesh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCGameObjectData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCGameObjectData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string EngineMeshUUID = 1;
  if (!this->_internal_enginemeshuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enginemeshuuid().data(), static_cast<int>(this->_internal_enginemeshuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCGameObjectData.EngineMeshUUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enginemeshuuid(), target);
  }

  // repeated string UGCMaterialUUIDList = 2;
  for (int i = 0, n = this->_internal_ugcmaterialuuidlist_size(); i < n; i++) {
    const auto& s = this->_internal_ugcmaterialuuidlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCGameObjectData.UGCMaterialUUIDList");
    target = stream->WriteString(2, s, target);
  }

  // repeated .message.UGCColliderInfoData ColliderList = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colliderlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_colliderlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .message.EUGCRendererDataSource RendererDataSource = 4;
  if (this->_internal_rendererdatasource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rendererdatasource(), target);
  }

  // string ABGameObjectResUUID = 5;
  if (!this->_internal_abgameobjectresuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abgameobjectresuuid().data(), static_cast<int>(this->_internal_abgameobjectresuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCGameObjectData.ABGameObjectResUUID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_abgameobjectresuuid(), target);
  }

  // bool DisableABResCollision = 6;
  if (this->_internal_disableabrescollision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_disableabrescollision(), target);
  }

  // bool IsSkinnedMesh = 7;
  if (this->_internal_isskinnedmesh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isskinnedmesh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCGameObjectData)
  return target;
}

size_t UGCGameObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCGameObjectData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string UGCMaterialUUIDList = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ugcmaterialuuidlist_.size());
  for (int i = 0, n = _impl_.ugcmaterialuuidlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ugcmaterialuuidlist_.Get(i));
  }

  // repeated .message.UGCColliderInfoData ColliderList = 3;
  total_size += 1UL * this->_internal_colliderlist_size();
  for (const auto& msg : this->_impl_.colliderlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string EngineMeshUUID = 1;
  if (!this->_internal_enginemeshuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enginemeshuuid());
  }

  // string ABGameObjectResUUID = 5;
  if (!this->_internal_abgameobjectresuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abgameobjectresuuid());
  }

  // .message.EUGCRendererDataSource RendererDataSource = 4;
  if (this->_internal_rendererdatasource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rendererdatasource());
  }

  // bool DisableABResCollision = 6;
  if (this->_internal_disableabrescollision() != 0) {
    total_size += 1 + 1;
  }

  // bool IsSkinnedMesh = 7;
  if (this->_internal_isskinnedmesh() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCGameObjectData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCGameObjectData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCGameObjectData::GetClassData() const { return &_class_data_; }


void UGCGameObjectData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCGameObjectData*>(&to_msg);
  auto& from = static_cast<const UGCGameObjectData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCGameObjectData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ugcmaterialuuidlist_.MergeFrom(from._impl_.ugcmaterialuuidlist_);
  _this->_impl_.colliderlist_.MergeFrom(from._impl_.colliderlist_);
  if (!from._internal_enginemeshuuid().empty()) {
    _this->_internal_set_enginemeshuuid(from._internal_enginemeshuuid());
  }
  if (!from._internal_abgameobjectresuuid().empty()) {
    _this->_internal_set_abgameobjectresuuid(from._internal_abgameobjectresuuid());
  }
  if (from._internal_rendererdatasource() != 0) {
    _this->_internal_set_rendererdatasource(from._internal_rendererdatasource());
  }
  if (from._internal_disableabrescollision() != 0) {
    _this->_internal_set_disableabrescollision(from._internal_disableabrescollision());
  }
  if (from._internal_isskinnedmesh() != 0) {
    _this->_internal_set_isskinnedmesh(from._internal_isskinnedmesh());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCGameObjectData::CopyFrom(const UGCGameObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCGameObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCGameObjectData::IsInitialized() const {
  return true;
}

void UGCGameObjectData::InternalSwap(UGCGameObjectData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ugcmaterialuuidlist_.InternalSwap(&other->_impl_.ugcmaterialuuidlist_);
  _impl_.colliderlist_.InternalSwap(&other->_impl_.colliderlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enginemeshuuid_, lhs_arena,
      &other->_impl_.enginemeshuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abgameobjectresuuid_, lhs_arena,
      &other->_impl_.abgameobjectresuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCGameObjectData, _impl_.isskinnedmesh_)
      + sizeof(UGCGameObjectData::_impl_.isskinnedmesh_)
      - PROTOBUF_FIELD_OFFSET(UGCGameObjectData, _impl_.rendererdatasource_)>(
          reinterpret_cast<char*>(&_impl_.rendererdatasource_),
          reinterpret_cast<char*>(&other->_impl_.rendererdatasource_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCGameObjectData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[2]);
}

// ===================================================================

class UGCResourceColliderData::_Internal {
 public:
};

UGCResourceColliderData::UGCResourceColliderData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourceColliderData)
}
UGCResourceColliderData::UGCResourceColliderData(const UGCResourceColliderData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourceColliderData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.colliderlist_){from._impl_.colliderlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCResourceColliderData)
}

inline void UGCResourceColliderData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.colliderlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCResourceColliderData::~UGCResourceColliderData() {
  // @@protoc_insertion_point(destructor:message.UGCResourceColliderData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourceColliderData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.colliderlist_.~RepeatedPtrField();
}

void UGCResourceColliderData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourceColliderData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourceColliderData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.colliderlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourceColliderData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCColliderInfoData ColliderList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colliderlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourceColliderData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourceColliderData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCColliderInfoData ColliderList = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colliderlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_colliderlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourceColliderData)
  return target;
}

size_t UGCResourceColliderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourceColliderData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCColliderInfoData ColliderList = 3;
  total_size += 1UL * this->_internal_colliderlist_size();
  for (const auto& msg : this->_impl_.colliderlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourceColliderData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourceColliderData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourceColliderData::GetClassData() const { return &_class_data_; }


void UGCResourceColliderData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourceColliderData*>(&to_msg);
  auto& from = static_cast<const UGCResourceColliderData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourceColliderData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.colliderlist_.MergeFrom(from._impl_.colliderlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourceColliderData::CopyFrom(const UGCResourceColliderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourceColliderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourceColliderData::IsInitialized() const {
  return true;
}

void UGCResourceColliderData::InternalSwap(UGCResourceColliderData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.colliderlist_.InternalSwap(&other->_impl_.colliderlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourceColliderData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[3]);
}

// ===================================================================

class ProtoBuffVector4::_Internal {
 public:
};

ProtoBuffVector4::ProtoBuffVector4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.ProtoBuffVector4)
}
ProtoBuffVector4::ProtoBuffVector4(const ProtoBuffVector4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoBuffVector4* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:message.ProtoBuffVector4)
}

inline void ProtoBuffVector4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtoBuffVector4::~ProtoBuffVector4() {
  // @@protoc_insertion_point(destructor:message.ProtoBuffVector4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoBuffVector4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtoBuffVector4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoBuffVector4::Clear() {
// @@protoc_insertion_point(message_clear_start:message.ProtoBuffVector4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoBuffVector4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float W = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoBuffVector4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ProtoBuffVector4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float Z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float W = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ProtoBuffVector4)
  return target;
}

size_t ProtoBuffVector4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.ProtoBuffVector4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float Z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float W = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoBuffVector4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoBuffVector4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoBuffVector4::GetClassData() const { return &_class_data_; }


void ProtoBuffVector4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoBuffVector4*>(&to_msg);
  auto& from = static_cast<const ProtoBuffVector4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.ProtoBuffVector4)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoBuffVector4::CopyFrom(const ProtoBuffVector4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.ProtoBuffVector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBuffVector4::IsInitialized() const {
  return true;
}

void ProtoBuffVector4::InternalSwap(ProtoBuffVector4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoBuffVector4, _impl_.w_)
      + sizeof(ProtoBuffVector4::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(ProtoBuffVector4, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoBuffVector4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[4]);
}

// ===================================================================

class UGCMaterialParamData::_Internal {
 public:
  static const ::message::ProtoBuffVector4& vector(const UGCMaterialParamData* msg);
};

const ::message::ProtoBuffVector4&
UGCMaterialParamData::_Internal::vector(const UGCMaterialParamData* msg) {
  return *msg->_impl_.Value_.vector_;
}
void UGCMaterialParamData::set_allocated_vector(::message::ProtoBuffVector4* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Value();
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vector);
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    set_has_vector();
    _impl_.Value_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCMaterialParamData.Vector)
}
UGCMaterialParamData::UGCMaterialParamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCMaterialParamData)
}
UGCMaterialParamData::UGCMaterialParamData(const UGCMaterialParamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCMaterialParamData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  clear_has_Value();
  switch (from.Value_case()) {
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case kTextureUUID: {
      _this->_internal_set_textureuuid(from._internal_textureuuid());
      break;
    }
    case kVector: {
      _this->_internal_mutable_vector()->::message::ProtoBuffVector4::MergeFrom(
          from._internal_vector());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kColorValue: {
      _this->_internal_set_colorvalue(from._internal_colorvalue());
      break;
    }
    case kEnableKeyword: {
      _this->_internal_set_enablekeyword(from._internal_enablekeyword());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCMaterialParamData)
}

inline void UGCMaterialParamData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.Value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_Value();
}

UGCMaterialParamData::~UGCMaterialParamData() {
  // @@protoc_insertion_point(destructor:message.UGCMaterialParamData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCMaterialParamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_Value()) {
    clear_Value();
  }
}

void UGCMaterialParamData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCMaterialParamData::clear_Value() {
// @@protoc_insertion_point(one_of_clear_start:message.UGCMaterialParamData)
  switch (Value_case()) {
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kTextureUUID: {
      _impl_.Value_.textureuuid_.Destroy();
      break;
    }
    case kVector: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Value_.vector_;
      }
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kColorValue: {
      // No need to clear
      break;
    }
    case kEnableKeyword: {
      _impl_.Value_.enablekeyword_.Destroy();
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void UGCMaterialParamData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCMaterialParamData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  clear_Value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCMaterialParamData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCMaterialParamData.Name"));
        } else
          goto handle_unusual;
        continue;
      // float FloatValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _internal_set_floatvalue(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string TextureUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_textureuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCMaterialParamData.TextureUUID"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector4 Vector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IntValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ColorValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_colorvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string EnableKeyword = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_enablekeyword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCMaterialParamData.EnableKeyword"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCMaterialParamData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCMaterialParamData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCMaterialParamData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float FloatValue = 2;
  if (_internal_has_floatvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_floatvalue(), target);
  }

  // string TextureUUID = 3;
  if (_internal_has_textureuuid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_textureuuid().data(), static_cast<int>(this->_internal_textureuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCMaterialParamData.TextureUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_textureuuid(), target);
  }

  // .message.ProtoBuffVector4 Vector = 4;
  if (_internal_has_vector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vector(this),
        _Internal::vector(this).GetCachedSize(), target, stream);
  }

  // int32 IntValue = 5;
  if (_internal_has_intvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_intvalue(), target);
  }

  // int32 ColorValue = 6;
  if (_internal_has_colorvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_colorvalue(), target);
  }

  // string EnableKeyword = 7;
  if (_internal_has_enablekeyword()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enablekeyword().data(), static_cast<int>(this->_internal_enablekeyword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCMaterialParamData.EnableKeyword");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_enablekeyword(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCMaterialParamData)
  return target;
}

size_t UGCMaterialParamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCMaterialParamData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (Value_case()) {
    // float FloatValue = 2;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // string TextureUUID = 3;
    case kTextureUUID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_textureuuid());
      break;
    }
    // .message.ProtoBuffVector4 Vector = 4;
    case kVector: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Value_.vector_);
      break;
    }
    // int32 IntValue = 5;
    case kIntValue: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_intvalue());
      break;
    }
    // int32 ColorValue = 6;
    case kColorValue: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_colorvalue());
      break;
    }
    // string EnableKeyword = 7;
    case kEnableKeyword: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enablekeyword());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCMaterialParamData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCMaterialParamData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCMaterialParamData::GetClassData() const { return &_class_data_; }


void UGCMaterialParamData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCMaterialParamData*>(&to_msg);
  auto& from = static_cast<const UGCMaterialParamData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCMaterialParamData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.Value_case()) {
    case kFloatValue: {
      _this->_internal_set_floatvalue(from._internal_floatvalue());
      break;
    }
    case kTextureUUID: {
      _this->_internal_set_textureuuid(from._internal_textureuuid());
      break;
    }
    case kVector: {
      _this->_internal_mutable_vector()->::message::ProtoBuffVector4::MergeFrom(
          from._internal_vector());
      break;
    }
    case kIntValue: {
      _this->_internal_set_intvalue(from._internal_intvalue());
      break;
    }
    case kColorValue: {
      _this->_internal_set_colorvalue(from._internal_colorvalue());
      break;
    }
    case kEnableKeyword: {
      _this->_internal_set_enablekeyword(from._internal_enablekeyword());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCMaterialParamData::CopyFrom(const UGCMaterialParamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCMaterialParamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCMaterialParamData::IsInitialized() const {
  return true;
}

void UGCMaterialParamData::InternalSwap(UGCMaterialParamData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.Value_, other->_impl_.Value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCMaterialParamData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[5]);
}

// ===================================================================

class UGCMaterialData::_Internal {
 public:
};

UGCMaterialData::UGCMaterialData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCMaterialData)
}
UGCMaterialData::UGCMaterialData(const UGCMaterialData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCMaterialData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shaderparamlist_){from._impl_.shaderparamlist_}
    , decltype(_impl_.shadername_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.shadername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shadername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shadername().empty()) {
    _this->_impl_.shadername_.Set(from._internal_shadername(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCMaterialData)
}

inline void UGCMaterialData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shaderparamlist_){arena}
    , decltype(_impl_.shadername_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.shadername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shadername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCMaterialData::~UGCMaterialData() {
  // @@protoc_insertion_point(destructor:message.UGCMaterialData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCMaterialData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shaderparamlist_.~RepeatedPtrField();
  _impl_.shadername_.Destroy();
}

void UGCMaterialData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCMaterialData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCMaterialData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shaderparamlist_.Clear();
  _impl_.shadername_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCMaterialData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ShaderName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_shadername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCMaterialData.ShaderName"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCMaterialParamData ShaderParamList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shaderparamlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCMaterialData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCMaterialData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ShaderName = 1;
  if (!this->_internal_shadername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shadername().data(), static_cast<int>(this->_internal_shadername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCMaterialData.ShaderName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_shadername(), target);
  }

  // repeated .message.UGCMaterialParamData ShaderParamList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shaderparamlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_shaderparamlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCMaterialData)
  return target;
}

size_t UGCMaterialData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCMaterialData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCMaterialParamData ShaderParamList = 2;
  total_size += 1UL * this->_internal_shaderparamlist_size();
  for (const auto& msg : this->_impl_.shaderparamlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ShaderName = 1;
  if (!this->_internal_shadername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shadername());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCMaterialData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCMaterialData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCMaterialData::GetClassData() const { return &_class_data_; }


void UGCMaterialData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCMaterialData*>(&to_msg);
  auto& from = static_cast<const UGCMaterialData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCMaterialData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shaderparamlist_.MergeFrom(from._impl_.shaderparamlist_);
  if (!from._internal_shadername().empty()) {
    _this->_internal_set_shadername(from._internal_shadername());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCMaterialData::CopyFrom(const UGCMaterialData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCMaterialData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCMaterialData::IsInitialized() const {
  return true;
}

void UGCMaterialData::InternalSwap(UGCMaterialData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shaderparamlist_.InternalSwap(&other->_impl_.shaderparamlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shadername_, lhs_arena,
      &other->_impl_.shadername_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCMaterialData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[6]);
}

// ===================================================================

class UGCResourceUIAtlasData::_Internal {
 public:
};

UGCResourceUIAtlasData::UGCResourceUIAtlasData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourceUIAtlasData)
}
UGCResourceUIAtlasData::UGCResourceUIAtlasData(const UGCResourceUIAtlasData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourceUIAtlasData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sprites_){from._impl_.sprites_}
    , decltype(_impl_.materialresuuid_){}
    , decltype(_impl_.pixelsize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.materialresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.materialresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_materialresuuid().empty()) {
    _this->_impl_.materialresuuid_.Set(from._internal_materialresuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pixelsize_ = from._impl_.pixelsize_;
  // @@protoc_insertion_point(copy_constructor:message.UGCResourceUIAtlasData)
}

inline void UGCResourceUIAtlasData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sprites_){arena}
    , decltype(_impl_.materialresuuid_){}
    , decltype(_impl_.pixelsize_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.materialresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.materialresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResourceUIAtlasData::~UGCResourceUIAtlasData() {
  // @@protoc_insertion_point(destructor:message.UGCResourceUIAtlasData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourceUIAtlasData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sprites_.~RepeatedPtrField();
  _impl_.materialresuuid_.Destroy();
}

void UGCResourceUIAtlasData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourceUIAtlasData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourceUIAtlasData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sprites_.Clear();
  _impl_.materialresuuid_.ClearToEmpty();
  _impl_.pixelsize_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourceUIAtlasData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string MaterialResUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_materialresuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourceUIAtlasData.MaterialResUUID"));
        } else
          goto handle_unusual;
        continue;
      // float PixelSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pixelsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResourceUISpriteData Sprites = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sprites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourceUIAtlasData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourceUIAtlasData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string MaterialResUUID = 1;
  if (!this->_internal_materialresuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_materialresuuid().data(), static_cast<int>(this->_internal_materialresuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourceUIAtlasData.MaterialResUUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_materialresuuid(), target);
  }

  // float PixelSize = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pixelsize = this->_internal_pixelsize();
  uint32_t raw_pixelsize;
  memcpy(&raw_pixelsize, &tmp_pixelsize, sizeof(tmp_pixelsize));
  if (raw_pixelsize != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pixelsize(), target);
  }

  // repeated .message.UGCResourceUISpriteData Sprites = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sprites_size()); i < n; i++) {
    const auto& repfield = this->_internal_sprites(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourceUIAtlasData)
  return target;
}

size_t UGCResourceUIAtlasData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourceUIAtlasData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResourceUISpriteData Sprites = 3;
  total_size += 1UL * this->_internal_sprites_size();
  for (const auto& msg : this->_impl_.sprites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string MaterialResUUID = 1;
  if (!this->_internal_materialresuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_materialresuuid());
  }

  // float PixelSize = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pixelsize = this->_internal_pixelsize();
  uint32_t raw_pixelsize;
  memcpy(&raw_pixelsize, &tmp_pixelsize, sizeof(tmp_pixelsize));
  if (raw_pixelsize != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourceUIAtlasData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourceUIAtlasData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourceUIAtlasData::GetClassData() const { return &_class_data_; }


void UGCResourceUIAtlasData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourceUIAtlasData*>(&to_msg);
  auto& from = static_cast<const UGCResourceUIAtlasData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourceUIAtlasData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sprites_.MergeFrom(from._impl_.sprites_);
  if (!from._internal_materialresuuid().empty()) {
    _this->_internal_set_materialresuuid(from._internal_materialresuuid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pixelsize = from._internal_pixelsize();
  uint32_t raw_pixelsize;
  memcpy(&raw_pixelsize, &tmp_pixelsize, sizeof(tmp_pixelsize));
  if (raw_pixelsize != 0) {
    _this->_internal_set_pixelsize(from._internal_pixelsize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourceUIAtlasData::CopyFrom(const UGCResourceUIAtlasData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourceUIAtlasData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourceUIAtlasData::IsInitialized() const {
  return true;
}

void UGCResourceUIAtlasData::InternalSwap(UGCResourceUIAtlasData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sprites_.InternalSwap(&other->_impl_.sprites_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.materialresuuid_, lhs_arena,
      &other->_impl_.materialresuuid_, rhs_arena
  );
  swap(_impl_.pixelsize_, other->_impl_.pixelsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourceUIAtlasData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[7]);
}

// ===================================================================

class UGCResourceUISpriteData::_Internal {
 public:
};

UGCResourceUISpriteData::UGCResourceUISpriteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourceUISpriteData)
}
UGCResourceUISpriteData::UGCResourceUISpriteData(const UGCResourceUISpriteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourceUISpriteData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.borderleft_){}
    , decltype(_impl_.borderright_){}
    , decltype(_impl_.bordertop_){}
    , decltype(_impl_.borderbottom_){}
    , decltype(_impl_.paddingleft_){}
    , decltype(_impl_.paddingright_){}
    , decltype(_impl_.paddingtop_){}
    , decltype(_impl_.paddingbottom_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.paddingbottom_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.paddingbottom_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResourceUISpriteData)
}

inline void UGCResourceUISpriteData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.borderleft_){0}
    , decltype(_impl_.borderright_){0}
    , decltype(_impl_.bordertop_){0}
    , decltype(_impl_.borderbottom_){0}
    , decltype(_impl_.paddingleft_){0}
    , decltype(_impl_.paddingright_){0}
    , decltype(_impl_.paddingtop_){0}
    , decltype(_impl_.paddingbottom_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResourceUISpriteData::~UGCResourceUISpriteData() {
  // @@protoc_insertion_point(destructor:message.UGCResourceUISpriteData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourceUISpriteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void UGCResourceUISpriteData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourceUISpriteData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourceUISpriteData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.paddingbottom_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.paddingbottom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourceUISpriteData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourceUISpriteData.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 X = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderLeft = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.borderleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderRight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.borderright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderTop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.bordertop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BorderBottom = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.borderbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PaddingLeft = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.paddingleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PaddingRight = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.paddingright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PaddingTop = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.paddingtop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PaddingBottom = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.paddingbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourceUISpriteData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourceUISpriteData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourceUISpriteData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 X = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 Y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // int32 Width = 4;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // int32 Height = 5;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_height(), target);
  }

  // int32 BorderLeft = 6;
  if (this->_internal_borderleft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_borderleft(), target);
  }

  // int32 BorderRight = 7;
  if (this->_internal_borderright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_borderright(), target);
  }

  // int32 BorderTop = 8;
  if (this->_internal_bordertop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_bordertop(), target);
  }

  // int32 BorderBottom = 9;
  if (this->_internal_borderbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_borderbottom(), target);
  }

  // int32 PaddingLeft = 10;
  if (this->_internal_paddingleft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_paddingleft(), target);
  }

  // int32 PaddingRight = 11;
  if (this->_internal_paddingright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_paddingright(), target);
  }

  // int32 PaddingTop = 12;
  if (this->_internal_paddingtop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_paddingtop(), target);
  }

  // int32 PaddingBottom = 13;
  if (this->_internal_paddingbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_paddingbottom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourceUISpriteData)
  return target;
}

size_t UGCResourceUISpriteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourceUISpriteData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 X = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 Y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 Width = 4;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 Height = 5;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 BorderLeft = 6;
  if (this->_internal_borderleft() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_borderleft());
  }

  // int32 BorderRight = 7;
  if (this->_internal_borderright() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_borderright());
  }

  // int32 BorderTop = 8;
  if (this->_internal_bordertop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bordertop());
  }

  // int32 BorderBottom = 9;
  if (this->_internal_borderbottom() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_borderbottom());
  }

  // int32 PaddingLeft = 10;
  if (this->_internal_paddingleft() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_paddingleft());
  }

  // int32 PaddingRight = 11;
  if (this->_internal_paddingright() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_paddingright());
  }

  // int32 PaddingTop = 12;
  if (this->_internal_paddingtop() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_paddingtop());
  }

  // int32 PaddingBottom = 13;
  if (this->_internal_paddingbottom() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_paddingbottom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourceUISpriteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourceUISpriteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourceUISpriteData::GetClassData() const { return &_class_data_; }


void UGCResourceUISpriteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourceUISpriteData*>(&to_msg);
  auto& from = static_cast<const UGCResourceUISpriteData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourceUISpriteData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_borderleft() != 0) {
    _this->_internal_set_borderleft(from._internal_borderleft());
  }
  if (from._internal_borderright() != 0) {
    _this->_internal_set_borderright(from._internal_borderright());
  }
  if (from._internal_bordertop() != 0) {
    _this->_internal_set_bordertop(from._internal_bordertop());
  }
  if (from._internal_borderbottom() != 0) {
    _this->_internal_set_borderbottom(from._internal_borderbottom());
  }
  if (from._internal_paddingleft() != 0) {
    _this->_internal_set_paddingleft(from._internal_paddingleft());
  }
  if (from._internal_paddingright() != 0) {
    _this->_internal_set_paddingright(from._internal_paddingright());
  }
  if (from._internal_paddingtop() != 0) {
    _this->_internal_set_paddingtop(from._internal_paddingtop());
  }
  if (from._internal_paddingbottom() != 0) {
    _this->_internal_set_paddingbottom(from._internal_paddingbottom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourceUISpriteData::CopyFrom(const UGCResourceUISpriteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourceUISpriteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourceUISpriteData::IsInitialized() const {
  return true;
}

void UGCResourceUISpriteData::InternalSwap(UGCResourceUISpriteData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResourceUISpriteData, _impl_.paddingbottom_)
      + sizeof(UGCResourceUISpriteData::_impl_.paddingbottom_)
      - PROTOBUF_FIELD_OFFSET(UGCResourceUISpriteData, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourceUISpriteData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[8]);
}

// ===================================================================

class UGCResourcePackageItem::_Internal {
 public:
};

UGCResourcePackageItem::UGCResourcePackageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourcePackageItem)
}
UGCResourcePackageItem::UGCResourcePackageItem(const UGCResourcePackageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourcePackageItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.isunityassetbundleres_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isunityassetbundleres_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.isunityassetbundleres_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResourcePackageItem)
}

inline void UGCResourcePackageItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.isunityassetbundleres_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResourcePackageItem::~UGCResourcePackageItem() {
  // @@protoc_insertion_point(destructor:message.UGCResourcePackageItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourcePackageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.path_.Destroy();
  _impl_.data_.Destroy();
}

void UGCResourcePackageItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourcePackageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourcePackageItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isunityassetbundleres_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.isunityassetbundleres_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourcePackageItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string UUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageItem.UUID"));
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCResourceType Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::message::EUGCResourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // string Path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageItem.Path"));
        } else
          goto handle_unusual;
        continue;
      // bytes Data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsUnityAssetBundleRes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isunityassetbundleres_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourcePackageItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourcePackageItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string UUID = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageItem.UUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .message.EUGCResourceType Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string Path = 3;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageItem.Path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // bytes Data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // bool IsUnityAssetBundleRes = 5;
  if (this->_internal_isunityassetbundleres() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isunityassetbundleres(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourcePackageItem)
  return target;
}

size_t UGCResourcePackageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourcePackageItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UUID = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string Path = 3;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bytes Data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .message.EUGCResourceType Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool IsUnityAssetBundleRes = 5;
  if (this->_internal_isunityassetbundleres() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourcePackageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourcePackageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourcePackageItem::GetClassData() const { return &_class_data_; }


void UGCResourcePackageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourcePackageItem*>(&to_msg);
  auto& from = static_cast<const UGCResourcePackageItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourcePackageItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_isunityassetbundleres() != 0) {
    _this->_internal_set_isunityassetbundleres(from._internal_isunityassetbundleres());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourcePackageItem::CopyFrom(const UGCResourcePackageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourcePackageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourcePackageItem::IsInitialized() const {
  return true;
}

void UGCResourcePackageItem::InternalSwap(UGCResourcePackageItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResourcePackageItem, _impl_.isunityassetbundleres_)
      + sizeof(UGCResourcePackageItem::_impl_.isunityassetbundleres_)
      - PROTOBUF_FIELD_OFFSET(UGCResourcePackageItem, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourcePackageItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[9]);
}

// ===================================================================

class UGCAssetBundleData::_Internal {
 public:
};

UGCAssetBundleData::UGCAssetBundleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCAssetBundleData)
}
UGCAssetBundleData::UGCAssetBundleData(const UGCAssetBundleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCAssetBundleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dependencesbundle_){from._impl_.dependencesbundle_}
    , decltype(_impl_.path_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:message.UGCAssetBundleData)
}

inline void UGCAssetBundleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dependencesbundle_){arena}
    , decltype(_impl_.path_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCAssetBundleData::~UGCAssetBundleData() {
  // @@protoc_insertion_point(destructor:message.UGCAssetBundleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCAssetBundleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dependencesbundle_.~RepeatedPtrField();
  _impl_.path_.Destroy();
  _impl_.hash_.Destroy();
}

void UGCAssetBundleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCAssetBundleData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCAssetBundleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dependencesbundle_.Clear();
  _impl_.path_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCAssetBundleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCAssetBundleData.Path"));
        } else
          goto handle_unusual;
        continue;
      // string Hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCAssetBundleData.Hash"));
        } else
          goto handle_unusual;
        continue;
      // int32 Size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string DependencesBundle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dependencesbundle();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCAssetBundleData.DependencesBundle"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCAssetBundleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCAssetBundleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCAssetBundleData.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // string Hash = 2;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCAssetBundleData.Hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // int32 Size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  // repeated string DependencesBundle = 4;
  for (int i = 0, n = this->_internal_dependencesbundle_size(); i < n; i++) {
    const auto& s = this->_internal_dependencesbundle(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCAssetBundleData.DependencesBundle");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCAssetBundleData)
  return target;
}

size_t UGCAssetBundleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCAssetBundleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string DependencesBundle = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.dependencesbundle_.size());
  for (int i = 0, n = _impl_.dependencesbundle_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.dependencesbundle_.Get(i));
  }

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string Hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // int32 Size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCAssetBundleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCAssetBundleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCAssetBundleData::GetClassData() const { return &_class_data_; }


void UGCAssetBundleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCAssetBundleData*>(&to_msg);
  auto& from = static_cast<const UGCAssetBundleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCAssetBundleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dependencesbundle_.MergeFrom(from._impl_.dependencesbundle_);
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCAssetBundleData::CopyFrom(const UGCAssetBundleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCAssetBundleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCAssetBundleData::IsInitialized() const {
  return true;
}

void UGCAssetBundleData::InternalSwap(UGCAssetBundleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dependencesbundle_.InternalSwap(&other->_impl_.dependencesbundle_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCAssetBundleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[10]);
}

// ===================================================================

class UGCAllUnityBundle::_Internal {
 public:
};

UGCAllUnityBundle::UGCAllUnityBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCAllUnityBundle)
}
UGCAllUnityBundle::UGCAllUnityBundle(const UGCAllUnityBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCAllUnityBundle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bundlelist_){from._impl_.bundlelist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCAllUnityBundle)
}

inline void UGCAllUnityBundle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bundlelist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCAllUnityBundle::~UGCAllUnityBundle() {
  // @@protoc_insertion_point(destructor:message.UGCAllUnityBundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCAllUnityBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bundlelist_.~RepeatedPtrField();
}

void UGCAllUnityBundle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCAllUnityBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCAllUnityBundle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bundlelist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCAllUnityBundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCAssetBundleData BundleList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bundlelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCAllUnityBundle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCAllUnityBundle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCAssetBundleData BundleList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bundlelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_bundlelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCAllUnityBundle)
  return target;
}

size_t UGCAllUnityBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCAllUnityBundle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCAssetBundleData BundleList = 1;
  total_size += 1UL * this->_internal_bundlelist_size();
  for (const auto& msg : this->_impl_.bundlelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCAllUnityBundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCAllUnityBundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCAllUnityBundle::GetClassData() const { return &_class_data_; }


void UGCAllUnityBundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCAllUnityBundle*>(&to_msg);
  auto& from = static_cast<const UGCAllUnityBundle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCAllUnityBundle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bundlelist_.MergeFrom(from._impl_.bundlelist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCAllUnityBundle::CopyFrom(const UGCAllUnityBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCAllUnityBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCAllUnityBundle::IsInitialized() const {
  return true;
}

void UGCAllUnityBundle::InternalSwap(UGCAllUnityBundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bundlelist_.InternalSwap(&other->_impl_.bundlelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCAllUnityBundle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[11]);
}

// ===================================================================

class UGCResourcePackageData::_Internal {
 public:
  static const ::message::UGCAllUnityBundle& allunitybundles(const UGCResourcePackageData* msg);
};

const ::message::UGCAllUnityBundle&
UGCResourcePackageData::_Internal::allunitybundles(const UGCResourcePackageData* msg) {
  return *msg->_impl_.allunitybundles_;
}
UGCResourcePackageData::UGCResourcePackageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourcePackageData)
}
UGCResourcePackageData::UGCResourcePackageData(const UGCResourcePackageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourcePackageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resourcelist_){from._impl_.resourcelist_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.allunitybundles_){nullptr}
    , decltype(_impl_.sharetype_){}
    , decltype(_impl_.packagetype_){}
    , decltype(_impl_.useabletype_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.dataformatversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_allunitybundles()) {
    _this->_impl_.allunitybundles_ = new ::message::UGCAllUnityBundle(*from._impl_.allunitybundles_);
  }
  ::memcpy(&_impl_.sharetype_, &from._impl_.sharetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dataformatversion_) -
    reinterpret_cast<char*>(&_impl_.sharetype_)) + sizeof(_impl_.dataformatversion_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResourcePackageData)
}

inline void UGCResourcePackageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resourcelist_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.allunitybundles_){nullptr}
    , decltype(_impl_.sharetype_){0}
    , decltype(_impl_.packagetype_){0}
    , decltype(_impl_.useabletype_){0}
    , decltype(_impl_.platform_){0}
    , decltype(_impl_.dataformatversion_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResourcePackageData::~UGCResourcePackageData() {
  // @@protoc_insertion_point(destructor:message.UGCResourcePackageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourcePackageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resourcelist_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.allunitybundles_;
}

void UGCResourcePackageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourcePackageData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourcePackageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resourcelist_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.allunitybundles_ != nullptr) {
    delete _impl_.allunitybundles_;
  }
  _impl_.allunitybundles_ = nullptr;
  ::memset(&_impl_.sharetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dataformatversion_) -
      reinterpret_cast<char*>(&_impl_.sharetype_)) + sizeof(_impl_.dataformatversion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourcePackageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageData.Name"));
        } else
          goto handle_unusual;
        continue;
      // string UUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageData.UUID"));
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCPackageShareType ShareType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sharetype(static_cast<::message::EUGCPackageShareType>(val));
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCPackageType PackageType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_packagetype(static_cast<::message::EUGCPackageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCPackageUseableType UseableType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_useabletype(static_cast<::message::EUGCPackageUseableType>(val));
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCPackagePlatform Platform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::message::EUGCPackagePlatform>(val));
        } else
          goto handle_unusual;
        continue;
      // string Version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageData.Version"));
        } else
          goto handle_unusual;
        continue;
      // int32 DataFormatVersion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.dataformatversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCAllUnityBundle AllUnityBundles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_allunitybundles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResourcePackageItem ResourceList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resourcelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourcePackageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourcePackageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string UUID = 2;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageData.UUID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  // .message.EUGCPackageShareType ShareType = 3;
  if (this->_internal_sharetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_sharetype(), target);
  }

  // .message.EUGCPackageType PackageType = 4;
  if (this->_internal_packagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_packagetype(), target);
  }

  // .message.EUGCPackageUseableType UseableType = 5;
  if (this->_internal_useabletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_useabletype(), target);
  }

  // .message.EUGCPackagePlatform Platform = 6;
  if (this->_internal_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_platform(), target);
  }

  // string Version = 7;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageData.Version");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version(), target);
  }

  // int32 DataFormatVersion = 8;
  if (this->_internal_dataformatversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_dataformatversion(), target);
  }

  // .message.UGCAllUnityBundle AllUnityBundles = 9;
  if (this->_internal_has_allunitybundles()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::allunitybundles(this),
        _Internal::allunitybundles(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCResourcePackageItem ResourceList = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resourcelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_resourcelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourcePackageData)
  return target;
}

size_t UGCResourcePackageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourcePackageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResourcePackageItem ResourceList = 10;
  total_size += 1UL * this->_internal_resourcelist_size();
  for (const auto& msg : this->_impl_.resourcelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string UUID = 2;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string Version = 7;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .message.UGCAllUnityBundle AllUnityBundles = 9;
  if (this->_internal_has_allunitybundles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allunitybundles_);
  }

  // .message.EUGCPackageShareType ShareType = 3;
  if (this->_internal_sharetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sharetype());
  }

  // .message.EUGCPackageType PackageType = 4;
  if (this->_internal_packagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_packagetype());
  }

  // .message.EUGCPackageUseableType UseableType = 5;
  if (this->_internal_useabletype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_useabletype());
  }

  // .message.EUGCPackagePlatform Platform = 6;
  if (this->_internal_platform() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
  }

  // int32 DataFormatVersion = 8;
  if (this->_internal_dataformatversion() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dataformatversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourcePackageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourcePackageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourcePackageData::GetClassData() const { return &_class_data_; }


void UGCResourcePackageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourcePackageData*>(&to_msg);
  auto& from = static_cast<const UGCResourcePackageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourcePackageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.resourcelist_.MergeFrom(from._impl_.resourcelist_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_has_allunitybundles()) {
    _this->_internal_mutable_allunitybundles()->::message::UGCAllUnityBundle::MergeFrom(
        from._internal_allunitybundles());
  }
  if (from._internal_sharetype() != 0) {
    _this->_internal_set_sharetype(from._internal_sharetype());
  }
  if (from._internal_packagetype() != 0) {
    _this->_internal_set_packagetype(from._internal_packagetype());
  }
  if (from._internal_useabletype() != 0) {
    _this->_internal_set_useabletype(from._internal_useabletype());
  }
  if (from._internal_platform() != 0) {
    _this->_internal_set_platform(from._internal_platform());
  }
  if (from._internal_dataformatversion() != 0) {
    _this->_internal_set_dataformatversion(from._internal_dataformatversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourcePackageData::CopyFrom(const UGCResourcePackageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourcePackageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourcePackageData::IsInitialized() const {
  return true;
}

void UGCResourcePackageData::InternalSwap(UGCResourcePackageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resourcelist_.InternalSwap(&other->_impl_.resourcelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResourcePackageData, _impl_.dataformatversion_)
      + sizeof(UGCResourcePackageData::_impl_.dataformatversion_)
      - PROTOBUF_FIELD_OFFSET(UGCResourcePackageData, _impl_.allunitybundles_)>(
          reinterpret_cast<char*>(&_impl_.allunitybundles_),
          reinterpret_cast<char*>(&other->_impl_.allunitybundles_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourcePackageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[12]);
}

// ===================================================================

class UGCResourcePackageRefInfo::_Internal {
 public:
};

UGCResourcePackageRefInfo::UGCResourcePackageRefInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourcePackageRefInfo)
}
UGCResourcePackageRefInfo::UGCResourcePackageRefInfo(const UGCResourcePackageRefInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourcePackageRefInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.useversionmd5_){}
    , decltype(_impl_.refversiontype_){}
    , decltype(_impl_.whorequire_){}
    , decltype(_impl_.platformspecial_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.useversionmd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.useversionmd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_useversionmd5().empty()) {
    _this->_impl_.useversionmd5_.Set(from._internal_useversionmd5(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.refversiontype_, &from._impl_.refversiontype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.platformspecial_) -
    reinterpret_cast<char*>(&_impl_.refversiontype_)) + sizeof(_impl_.platformspecial_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResourcePackageRefInfo)
}

inline void UGCResourcePackageRefInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.useversionmd5_){}
    , decltype(_impl_.refversiontype_){0}
    , decltype(_impl_.whorequire_){0}
    , decltype(_impl_.platformspecial_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.useversionmd5_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.useversionmd5_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResourcePackageRefInfo::~UGCResourcePackageRefInfo() {
  // @@protoc_insertion_point(destructor:message.UGCResourcePackageRefInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourcePackageRefInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.useversionmd5_.Destroy();
}

void UGCResourcePackageRefInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourcePackageRefInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourcePackageRefInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  _impl_.useversionmd5_.ClearToEmpty();
  ::memset(&_impl_.refversiontype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.platformspecial_) -
      reinterpret_cast<char*>(&_impl_.refversiontype_)) + sizeof(_impl_.platformspecial_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourcePackageRefInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageRefInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // string UUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageRefInfo.UUID"));
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCPackageRefVersionType RefVersionType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_refversiontype(static_cast<::message::EUGCPackageRefVersionType>(val));
        } else
          goto handle_unusual;
        continue;
      // string UseVersionMD5 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_useversionmd5();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageRefInfo.UseVersionMD5"));
        } else
          goto handle_unusual;
        continue;
      // .message.EUGCPackageUseableType WhoRequire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_whorequire(static_cast<::message::EUGCPackageUseableType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool PlatformSpecial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.platformspecial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourcePackageRefInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourcePackageRefInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageRefInfo.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string UUID = 2;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageRefInfo.UUID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  // .message.EUGCPackageRefVersionType RefVersionType = 3;
  if (this->_internal_refversiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_refversiontype(), target);
  }

  // string UseVersionMD5 = 4;
  if (!this->_internal_useversionmd5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_useversionmd5().data(), static_cast<int>(this->_internal_useversionmd5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageRefInfo.UseVersionMD5");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_useversionmd5(), target);
  }

  // .message.EUGCPackageUseableType WhoRequire = 5;
  if (this->_internal_whorequire() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_whorequire(), target);
  }

  // bool PlatformSpecial = 6;
  if (this->_internal_platformspecial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_platformspecial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourcePackageRefInfo)
  return target;
}

size_t UGCResourcePackageRefInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourcePackageRefInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string UUID = 2;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string UseVersionMD5 = 4;
  if (!this->_internal_useversionmd5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_useversionmd5());
  }

  // .message.EUGCPackageRefVersionType RefVersionType = 3;
  if (this->_internal_refversiontype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_refversiontype());
  }

  // .message.EUGCPackageUseableType WhoRequire = 5;
  if (this->_internal_whorequire() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_whorequire());
  }

  // bool PlatformSpecial = 6;
  if (this->_internal_platformspecial() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourcePackageRefInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourcePackageRefInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourcePackageRefInfo::GetClassData() const { return &_class_data_; }


void UGCResourcePackageRefInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourcePackageRefInfo*>(&to_msg);
  auto& from = static_cast<const UGCResourcePackageRefInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourcePackageRefInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_useversionmd5().empty()) {
    _this->_internal_set_useversionmd5(from._internal_useversionmd5());
  }
  if (from._internal_refversiontype() != 0) {
    _this->_internal_set_refversiontype(from._internal_refversiontype());
  }
  if (from._internal_whorequire() != 0) {
    _this->_internal_set_whorequire(from._internal_whorequire());
  }
  if (from._internal_platformspecial() != 0) {
    _this->_internal_set_platformspecial(from._internal_platformspecial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourcePackageRefInfo::CopyFrom(const UGCResourcePackageRefInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourcePackageRefInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourcePackageRefInfo::IsInitialized() const {
  return true;
}

void UGCResourcePackageRefInfo::InternalSwap(UGCResourcePackageRefInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.useversionmd5_, lhs_arena,
      &other->_impl_.useversionmd5_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResourcePackageRefInfo, _impl_.platformspecial_)
      + sizeof(UGCResourcePackageRefInfo::_impl_.platformspecial_)
      - PROTOBUF_FIELD_OFFSET(UGCResourcePackageRefInfo, _impl_.refversiontype_)>(
          reinterpret_cast<char*>(&_impl_.refversiontype_),
          reinterpret_cast<char*>(&other->_impl_.refversiontype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourcePackageRefInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[13]);
}

// ===================================================================

class UGCResourcePackageDownloadDesc::_Internal {
 public:
};

UGCResourcePackageDownloadDesc::UGCResourcePackageDownloadDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourcePackageDownloadDesc)
}
UGCResourcePackageDownloadDesc::UGCResourcePackageDownloadDesc(const UGCResourcePackageDownloadDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourcePackageDownloadDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.downloadexturlinfolist_){from._impl_.downloadexturlinfolist_}
    , decltype(_impl_.packageuuid_){}
    , decltype(_impl_.downloadpackageurltag_){}
    , decltype(_impl_.downloadpackageurlinfo_){}
    , decltype(_impl_.downloadexturltag_){}
    , decltype(_impl_.filebytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packageuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packageuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packageuuid().empty()) {
    _this->_impl_.packageuuid_.Set(from._internal_packageuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.downloadpackageurltag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadpackageurltag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_downloadpackageurltag().empty()) {
    _this->_impl_.downloadpackageurltag_.Set(from._internal_downloadpackageurltag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.downloadpackageurlinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadpackageurlinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_downloadpackageurlinfo().empty()) {
    _this->_impl_.downloadpackageurlinfo_.Set(from._internal_downloadpackageurlinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.downloadexturltag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadexturltag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_downloadexturltag().empty()) {
    _this->_impl_.downloadexturltag_.Set(from._internal_downloadexturltag(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.filebytes_ = from._impl_.filebytes_;
  // @@protoc_insertion_point(copy_constructor:message.UGCResourcePackageDownloadDesc)
}

inline void UGCResourcePackageDownloadDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.downloadexturlinfolist_){arena}
    , decltype(_impl_.packageuuid_){}
    , decltype(_impl_.downloadpackageurltag_){}
    , decltype(_impl_.downloadpackageurlinfo_){}
    , decltype(_impl_.downloadexturltag_){}
    , decltype(_impl_.filebytes_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packageuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packageuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.downloadpackageurltag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadpackageurltag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.downloadpackageurlinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadpackageurlinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.downloadexturltag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.downloadexturltag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResourcePackageDownloadDesc::~UGCResourcePackageDownloadDesc() {
  // @@protoc_insertion_point(destructor:message.UGCResourcePackageDownloadDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourcePackageDownloadDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.downloadexturlinfolist_.~RepeatedPtrField();
  _impl_.packageuuid_.Destroy();
  _impl_.downloadpackageurltag_.Destroy();
  _impl_.downloadpackageurlinfo_.Destroy();
  _impl_.downloadexturltag_.Destroy();
}

void UGCResourcePackageDownloadDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourcePackageDownloadDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourcePackageDownloadDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.downloadexturlinfolist_.Clear();
  _impl_.packageuuid_.ClearToEmpty();
  _impl_.downloadpackageurltag_.ClearToEmpty();
  _impl_.downloadpackageurlinfo_.ClearToEmpty();
  _impl_.downloadexturltag_.ClearToEmpty();
  _impl_.filebytes_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourcePackageDownloadDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PackageUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packageuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageDownloadDesc.PackageUUID"));
        } else
          goto handle_unusual;
        continue;
      // string DownloadPackageUrlTag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_downloadpackageurltag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageDownloadDesc.DownloadPackageUrlTag"));
        } else
          goto handle_unusual;
        continue;
      // string DownloadPackageUrlInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_downloadpackageurlinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageDownloadDesc.DownloadPackageUrlInfo"));
        } else
          goto handle_unusual;
        continue;
      // string DownloadExtUrlTag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_downloadexturltag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageDownloadDesc.DownloadExtUrlTag"));
        } else
          goto handle_unusual;
        continue;
      // repeated string DownloadExtUrlInfoList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_downloadexturlinfolist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 FileBytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.filebytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourcePackageDownloadDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourcePackageDownloadDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PackageUUID = 1;
  if (!this->_internal_packageuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packageuuid().data(), static_cast<int>(this->_internal_packageuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageDownloadDesc.PackageUUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packageuuid(), target);
  }

  // string DownloadPackageUrlTag = 2;
  if (!this->_internal_downloadpackageurltag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_downloadpackageurltag().data(), static_cast<int>(this->_internal_downloadpackageurltag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageDownloadDesc.DownloadPackageUrlTag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_downloadpackageurltag(), target);
  }

  // string DownloadPackageUrlInfo = 3;
  if (!this->_internal_downloadpackageurlinfo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_downloadpackageurlinfo().data(), static_cast<int>(this->_internal_downloadpackageurlinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageDownloadDesc.DownloadPackageUrlInfo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_downloadpackageurlinfo(), target);
  }

  // string DownloadExtUrlTag = 4;
  if (!this->_internal_downloadexturltag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_downloadexturltag().data(), static_cast<int>(this->_internal_downloadexturltag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageDownloadDesc.DownloadExtUrlTag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_downloadexturltag(), target);
  }

  // repeated string DownloadExtUrlInfoList = 5;
  for (int i = 0, n = this->_internal_downloadexturlinfolist_size(); i < n; i++) {
    const auto& s = this->_internal_downloadexturlinfolist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList");
    target = stream->WriteString(5, s, target);
  }

  // int32 FileBytes = 6;
  if (this->_internal_filebytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_filebytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourcePackageDownloadDesc)
  return target;
}

size_t UGCResourcePackageDownloadDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourcePackageDownloadDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string DownloadExtUrlInfoList = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.downloadexturlinfolist_.size());
  for (int i = 0, n = _impl_.downloadexturlinfolist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.downloadexturlinfolist_.Get(i));
  }

  // string PackageUUID = 1;
  if (!this->_internal_packageuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packageuuid());
  }

  // string DownloadPackageUrlTag = 2;
  if (!this->_internal_downloadpackageurltag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_downloadpackageurltag());
  }

  // string DownloadPackageUrlInfo = 3;
  if (!this->_internal_downloadpackageurlinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_downloadpackageurlinfo());
  }

  // string DownloadExtUrlTag = 4;
  if (!this->_internal_downloadexturltag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_downloadexturltag());
  }

  // int32 FileBytes = 6;
  if (this->_internal_filebytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filebytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourcePackageDownloadDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourcePackageDownloadDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourcePackageDownloadDesc::GetClassData() const { return &_class_data_; }


void UGCResourcePackageDownloadDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourcePackageDownloadDesc*>(&to_msg);
  auto& from = static_cast<const UGCResourcePackageDownloadDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourcePackageDownloadDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.downloadexturlinfolist_.MergeFrom(from._impl_.downloadexturlinfolist_);
  if (!from._internal_packageuuid().empty()) {
    _this->_internal_set_packageuuid(from._internal_packageuuid());
  }
  if (!from._internal_downloadpackageurltag().empty()) {
    _this->_internal_set_downloadpackageurltag(from._internal_downloadpackageurltag());
  }
  if (!from._internal_downloadpackageurlinfo().empty()) {
    _this->_internal_set_downloadpackageurlinfo(from._internal_downloadpackageurlinfo());
  }
  if (!from._internal_downloadexturltag().empty()) {
    _this->_internal_set_downloadexturltag(from._internal_downloadexturltag());
  }
  if (from._internal_filebytes() != 0) {
    _this->_internal_set_filebytes(from._internal_filebytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourcePackageDownloadDesc::CopyFrom(const UGCResourcePackageDownloadDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourcePackageDownloadDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourcePackageDownloadDesc::IsInitialized() const {
  return true;
}

void UGCResourcePackageDownloadDesc::InternalSwap(UGCResourcePackageDownloadDesc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.downloadexturlinfolist_.InternalSwap(&other->_impl_.downloadexturlinfolist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packageuuid_, lhs_arena,
      &other->_impl_.packageuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloadpackageurltag_, lhs_arena,
      &other->_impl_.downloadpackageurltag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloadpackageurlinfo_, lhs_arena,
      &other->_impl_.downloadpackageurlinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.downloadexturltag_, lhs_arena,
      &other->_impl_.downloadexturltag_, rhs_arena
  );
  swap(_impl_.filebytes_, other->_impl_.filebytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourcePackageDownloadDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[14]);
}

// ===================================================================

class UGCGameDataResourcePackageInfo::_Internal {
 public:
};

UGCGameDataResourcePackageInfo::UGCGameDataResourcePackageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCGameDataResourcePackageInfo)
}
UGCGameDataResourcePackageInfo::UGCGameDataResourcePackageInfo(const UGCGameDataResourcePackageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCGameDataResourcePackageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refpackages_){from._impl_.refpackages_}
    , decltype(_impl_.buildinpackages_){from._impl_.buildinpackages_}
    , decltype(_impl_.downloaddescs_){from._impl_.downloaddescs_}
    , decltype(_impl_.dataformatversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dataformatversion_ = from._impl_.dataformatversion_;
  // @@protoc_insertion_point(copy_constructor:message.UGCGameDataResourcePackageInfo)
}

inline void UGCGameDataResourcePackageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refpackages_){arena}
    , decltype(_impl_.buildinpackages_){arena}
    , decltype(_impl_.downloaddescs_){arena}
    , decltype(_impl_.dataformatversion_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCGameDataResourcePackageInfo::~UGCGameDataResourcePackageInfo() {
  // @@protoc_insertion_point(destructor:message.UGCGameDataResourcePackageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCGameDataResourcePackageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.refpackages_.~RepeatedPtrField();
  _impl_.buildinpackages_.~RepeatedPtrField();
  _impl_.downloaddescs_.~RepeatedPtrField();
}

void UGCGameDataResourcePackageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCGameDataResourcePackageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCGameDataResourcePackageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refpackages_.Clear();
  _impl_.buildinpackages_.Clear();
  _impl_.downloaddescs_.Clear();
  _impl_.dataformatversion_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCGameDataResourcePackageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 DataFormatVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dataformatversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResourcePackageRefInfo RefPackages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refpackages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResourcePackageData BuildinPackages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildinpackages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResourcePackageDownloadDesc DownloadDescs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_downloaddescs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCGameDataResourcePackageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCGameDataResourcePackageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 DataFormatVersion = 1;
  if (this->_internal_dataformatversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dataformatversion(), target);
  }

  // repeated .message.UGCResourcePackageRefInfo RefPackages = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refpackages_size()); i < n; i++) {
    const auto& repfield = this->_internal_refpackages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCResourcePackageData BuildinPackages = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildinpackages_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildinpackages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCResourcePackageDownloadDesc DownloadDescs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_downloaddescs_size()); i < n; i++) {
    const auto& repfield = this->_internal_downloaddescs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCGameDataResourcePackageInfo)
  return target;
}

size_t UGCGameDataResourcePackageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCGameDataResourcePackageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResourcePackageRefInfo RefPackages = 3;
  total_size += 1UL * this->_internal_refpackages_size();
  for (const auto& msg : this->_impl_.refpackages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCResourcePackageData BuildinPackages = 4;
  total_size += 1UL * this->_internal_buildinpackages_size();
  for (const auto& msg : this->_impl_.buildinpackages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCResourcePackageDownloadDesc DownloadDescs = 5;
  total_size += 1UL * this->_internal_downloaddescs_size();
  for (const auto& msg : this->_impl_.downloaddescs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 DataFormatVersion = 1;
  if (this->_internal_dataformatversion() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dataformatversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCGameDataResourcePackageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCGameDataResourcePackageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCGameDataResourcePackageInfo::GetClassData() const { return &_class_data_; }


void UGCGameDataResourcePackageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCGameDataResourcePackageInfo*>(&to_msg);
  auto& from = static_cast<const UGCGameDataResourcePackageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCGameDataResourcePackageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.refpackages_.MergeFrom(from._impl_.refpackages_);
  _this->_impl_.buildinpackages_.MergeFrom(from._impl_.buildinpackages_);
  _this->_impl_.downloaddescs_.MergeFrom(from._impl_.downloaddescs_);
  if (from._internal_dataformatversion() != 0) {
    _this->_internal_set_dataformatversion(from._internal_dataformatversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCGameDataResourcePackageInfo::CopyFrom(const UGCGameDataResourcePackageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCGameDataResourcePackageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCGameDataResourcePackageInfo::IsInitialized() const {
  return true;
}

void UGCGameDataResourcePackageInfo::InternalSwap(UGCGameDataResourcePackageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.refpackages_.InternalSwap(&other->_impl_.refpackages_);
  _impl_.buildinpackages_.InternalSwap(&other->_impl_.buildinpackages_);
  _impl_.downloaddescs_.InternalSwap(&other->_impl_.downloaddescs_);
  swap(_impl_.dataformatversion_, other->_impl_.dataformatversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCGameDataResourcePackageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[15]);
}

// ===================================================================

class UGCResourceFileDownloadDesc::_Internal {
 public:
};

UGCResourceFileDownloadDesc::UGCResourceFileDownloadDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResourceFileDownloadDesc)
}
UGCResourceFileDownloadDesc::UGCResourceFileDownloadDesc(const UGCResourceFileDownloadDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResourceFileDownloadDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subfileid_){}
    , decltype(_impl_.sha1_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filesize_){}
    , decltype(_impl_.platformrequiremask_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subfileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subfileid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subfileid().empty()) {
    _this->_impl_.subfileid_.Set(from._internal_subfileid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sha1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sha1().empty()) {
    _this->_impl_.sha1_.Set(from._internal_sha1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.filesize_, &from._impl_.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.platformrequiremask_) -
    reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.platformrequiremask_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResourceFileDownloadDesc)
}

inline void UGCResourceFileDownloadDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subfileid_){}
    , decltype(_impl_.sha1_){}
    , decltype(_impl_.url_){}
    , decltype(_impl_.filesize_){0}
    , decltype(_impl_.platformrequiremask_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subfileid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subfileid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sha1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResourceFileDownloadDesc::~UGCResourceFileDownloadDesc() {
  // @@protoc_insertion_point(destructor:message.UGCResourceFileDownloadDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResourceFileDownloadDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subfileid_.Destroy();
  _impl_.sha1_.Destroy();
  _impl_.url_.Destroy();
}

void UGCResourceFileDownloadDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResourceFileDownloadDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResourceFileDownloadDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subfileid_.ClearToEmpty();
  _impl_.sha1_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  ::memset(&_impl_.filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.platformrequiremask_) -
      reinterpret_cast<char*>(&_impl_.filesize_)) + sizeof(_impl_.platformrequiremask_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResourceFileDownloadDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SubFileID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subfileid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourceFileDownloadDesc.SubFileID"));
        } else
          goto handle_unusual;
        continue;
      // string SHA1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sha1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourceFileDownloadDesc.SHA1"));
        } else
          goto handle_unusual;
        continue;
      // int32 FileSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string URL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResourceFileDownloadDesc.URL"));
        } else
          goto handle_unusual;
        continue;
      // int32 PlatformRequireMask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.platformrequiremask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResourceFileDownloadDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResourceFileDownloadDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SubFileID = 1;
  if (!this->_internal_subfileid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subfileid().data(), static_cast<int>(this->_internal_subfileid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourceFileDownloadDesc.SubFileID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subfileid(), target);
  }

  // string SHA1 = 2;
  if (!this->_internal_sha1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sha1().data(), static_cast<int>(this->_internal_sha1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourceFileDownloadDesc.SHA1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sha1(), target);
  }

  // int32 FileSize = 3;
  if (this->_internal_filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_filesize(), target);
  }

  // string URL = 4;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResourceFileDownloadDesc.URL");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  // int32 PlatformRequireMask = 5;
  if (this->_internal_platformrequiremask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_platformrequiremask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResourceFileDownloadDesc)
  return target;
}

size_t UGCResourceFileDownloadDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResourceFileDownloadDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SubFileID = 1;
  if (!this->_internal_subfileid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subfileid());
  }

  // string SHA1 = 2;
  if (!this->_internal_sha1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sha1());
  }

  // string URL = 4;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // int32 FileSize = 3;
  if (this->_internal_filesize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_filesize());
  }

  // int32 PlatformRequireMask = 5;
  if (this->_internal_platformrequiremask() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_platformrequiremask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResourceFileDownloadDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResourceFileDownloadDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResourceFileDownloadDesc::GetClassData() const { return &_class_data_; }


void UGCResourceFileDownloadDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResourceFileDownloadDesc*>(&to_msg);
  auto& from = static_cast<const UGCResourceFileDownloadDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResourceFileDownloadDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subfileid().empty()) {
    _this->_internal_set_subfileid(from._internal_subfileid());
  }
  if (!from._internal_sha1().empty()) {
    _this->_internal_set_sha1(from._internal_sha1());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_filesize() != 0) {
    _this->_internal_set_filesize(from._internal_filesize());
  }
  if (from._internal_platformrequiremask() != 0) {
    _this->_internal_set_platformrequiremask(from._internal_platformrequiremask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResourceFileDownloadDesc::CopyFrom(const UGCResourceFileDownloadDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResourceFileDownloadDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResourceFileDownloadDesc::IsInitialized() const {
  return true;
}

void UGCResourceFileDownloadDesc::InternalSwap(UGCResourceFileDownloadDesc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subfileid_, lhs_arena,
      &other->_impl_.subfileid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha1_, lhs_arena,
      &other->_impl_.sha1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResourceFileDownloadDesc, _impl_.platformrequiremask_)
      + sizeof(UGCResourceFileDownloadDesc::_impl_.platformrequiremask_)
      - PROTOBUF_FIELD_OFFSET(UGCResourceFileDownloadDesc, _impl_.filesize_)>(
          reinterpret_cast<char*>(&_impl_.filesize_),
          reinterpret_cast<char*>(&other->_impl_.filesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResourceFileDownloadDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[16]);
}

// ===================================================================

class UGCPackageDownloadDesc::_Internal {
 public:
};

UGCPackageDownloadDesc::UGCPackageDownloadDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCPackageDownloadDesc)
}
UGCPackageDownloadDesc::UGCPackageDownloadDesc(const UGCPackageDownloadDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCPackageDownloadDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filelist_){from._impl_.filelist_}
    , decltype(_impl_.packageuuid_){}
    , decltype(_impl_.downloadpriority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packageuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packageuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packageuuid().empty()) {
    _this->_impl_.packageuuid_.Set(from._internal_packageuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.downloadpriority_ = from._impl_.downloadpriority_;
  // @@protoc_insertion_point(copy_constructor:message.UGCPackageDownloadDesc)
}

inline void UGCPackageDownloadDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filelist_){arena}
    , decltype(_impl_.packageuuid_){}
    , decltype(_impl_.downloadpriority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packageuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packageuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCPackageDownloadDesc::~UGCPackageDownloadDesc() {
  // @@protoc_insertion_point(destructor:message.UGCPackageDownloadDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCPackageDownloadDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filelist_.~RepeatedPtrField();
  _impl_.packageuuid_.Destroy();
}

void UGCPackageDownloadDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCPackageDownloadDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCPackageDownloadDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filelist_.Clear();
  _impl_.packageuuid_.ClearToEmpty();
  _impl_.downloadpriority_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCPackageDownloadDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PackageUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packageuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCPackageDownloadDesc.PackageUUID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResourceFileDownloadDesc FileList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 DownloadPriority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.downloadpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCPackageDownloadDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCPackageDownloadDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PackageUUID = 1;
  if (!this->_internal_packageuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packageuuid().data(), static_cast<int>(this->_internal_packageuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCPackageDownloadDesc.PackageUUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packageuuid(), target);
  }

  // repeated .message.UGCResourceFileDownloadDesc FileList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_filelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 DownloadPriority = 3;
  if (this->_internal_downloadpriority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_downloadpriority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCPackageDownloadDesc)
  return target;
}

size_t UGCPackageDownloadDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCPackageDownloadDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResourceFileDownloadDesc FileList = 2;
  total_size += 1UL * this->_internal_filelist_size();
  for (const auto& msg : this->_impl_.filelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string PackageUUID = 1;
  if (!this->_internal_packageuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packageuuid());
  }

  // int32 DownloadPriority = 3;
  if (this->_internal_downloadpriority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_downloadpriority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCPackageDownloadDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCPackageDownloadDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCPackageDownloadDesc::GetClassData() const { return &_class_data_; }


void UGCPackageDownloadDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCPackageDownloadDesc*>(&to_msg);
  auto& from = static_cast<const UGCPackageDownloadDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCPackageDownloadDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filelist_.MergeFrom(from._impl_.filelist_);
  if (!from._internal_packageuuid().empty()) {
    _this->_internal_set_packageuuid(from._internal_packageuuid());
  }
  if (from._internal_downloadpriority() != 0) {
    _this->_internal_set_downloadpriority(from._internal_downloadpriority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCPackageDownloadDesc::CopyFrom(const UGCPackageDownloadDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCPackageDownloadDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCPackageDownloadDesc::IsInitialized() const {
  return true;
}

void UGCPackageDownloadDesc::InternalSwap(UGCPackageDownloadDesc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filelist_.InternalSwap(&other->_impl_.filelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packageuuid_, lhs_arena,
      &other->_impl_.packageuuid_, rhs_arena
  );
  swap(_impl_.downloadpriority_, other->_impl_.downloadpriority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCPackageDownloadDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[17]);
}

// ===================================================================

class UGCGameDataDownloadDesc::_Internal {
 public:
};

UGCGameDataDownloadDesc::UGCGameDataDownloadDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCGameDataDownloadDesc)
}
UGCGameDataDownloadDesc::UGCGameDataDownloadDesc(const UGCGameDataDownloadDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCGameDataDownloadDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packagelist_){from._impl_.packagelist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCGameDataDownloadDesc)
}

inline void UGCGameDataDownloadDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packagelist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCGameDataDownloadDesc::~UGCGameDataDownloadDesc() {
  // @@protoc_insertion_point(destructor:message.UGCGameDataDownloadDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCGameDataDownloadDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packagelist_.~RepeatedPtrField();
}

void UGCGameDataDownloadDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCGameDataDownloadDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCGameDataDownloadDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packagelist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCGameDataDownloadDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCPackageDownloadDesc PackageList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packagelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCGameDataDownloadDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCGameDataDownloadDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCPackageDownloadDesc PackageList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packagelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_packagelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCGameDataDownloadDesc)
  return target;
}

size_t UGCGameDataDownloadDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCGameDataDownloadDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCPackageDownloadDesc PackageList = 1;
  total_size += 1UL * this->_internal_packagelist_size();
  for (const auto& msg : this->_impl_.packagelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCGameDataDownloadDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCGameDataDownloadDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCGameDataDownloadDesc::GetClassData() const { return &_class_data_; }


void UGCGameDataDownloadDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCGameDataDownloadDesc*>(&to_msg);
  auto& from = static_cast<const UGCGameDataDownloadDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCGameDataDownloadDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packagelist_.MergeFrom(from._impl_.packagelist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCGameDataDownloadDesc::CopyFrom(const UGCGameDataDownloadDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCGameDataDownloadDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCGameDataDownloadDesc::IsInitialized() const {
  return true;
}

void UGCGameDataDownloadDesc::InternalSwap(UGCGameDataDownloadDesc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.packagelist_.InternalSwap(&other->_impl_.packagelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCGameDataDownloadDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[18]);
}

// ===================================================================

class UGCCSVRowData::_Internal {
 public:
};

UGCCSVRowData::UGCCSVRowData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCSVRowData)
}
UGCCSVRowData::UGCCSVRowData(const UGCCSVRowData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCSVRowData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rowdata_){from._impl_.rowdata_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCCSVRowData)
}

inline void UGCCSVRowData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rowdata_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCCSVRowData::~UGCCSVRowData() {
  // @@protoc_insertion_point(destructor:message.UGCCSVRowData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCSVRowData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rowdata_.~RepeatedPtrField();
}

void UGCCSVRowData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCSVRowData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCSVRowData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rowdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCSVRowData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string RowData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rowdata();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCCSVRowData.RowData"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCSVRowData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCSVRowData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string RowData = 1;
  for (int i = 0, n = this->_internal_rowdata_size(); i < n; i++) {
    const auto& s = this->_internal_rowdata(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCCSVRowData.RowData");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCSVRowData)
  return target;
}

size_t UGCCSVRowData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCSVRowData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string RowData = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.rowdata_.size());
  for (int i = 0, n = _impl_.rowdata_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.rowdata_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCSVRowData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCSVRowData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCSVRowData::GetClassData() const { return &_class_data_; }


void UGCCSVRowData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCSVRowData*>(&to_msg);
  auto& from = static_cast<const UGCCSVRowData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCSVRowData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rowdata_.MergeFrom(from._impl_.rowdata_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCSVRowData::CopyFrom(const UGCCSVRowData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCSVRowData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCSVRowData::IsInitialized() const {
  return true;
}

void UGCCSVRowData::InternalSwap(UGCCSVRowData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rowdata_.InternalSwap(&other->_impl_.rowdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCSVRowData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[19]);
}

// ===================================================================

class UGCCSVData::_Internal {
 public:
};

UGCCSVData::UGCCSVData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCCSVData)
}
UGCCSVData::UGCCSVData(const UGCCSVData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCCSVData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.csvdata_){from._impl_.csvdata_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCCSVData)
}

inline void UGCCSVData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.csvdata_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCCSVData::~UGCCSVData() {
  // @@protoc_insertion_point(destructor:message.UGCCSVData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCCSVData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.csvdata_.~RepeatedPtrField();
}

void UGCCSVData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCCSVData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCCSVData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.csvdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCCSVData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCCSVRowData CSVData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_csvdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCCSVData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCCSVData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCCSVRowData CSVData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_csvdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_csvdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCCSVData)
  return target;
}

size_t UGCCSVData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCCSVData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCCSVRowData CSVData = 1;
  total_size += 1UL * this->_internal_csvdata_size();
  for (const auto& msg : this->_impl_.csvdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCCSVData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCCSVData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCCSVData::GetClassData() const { return &_class_data_; }


void UGCCSVData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCCSVData*>(&to_msg);
  auto& from = static_cast<const UGCCSVData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCCSVData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.csvdata_.MergeFrom(from._impl_.csvdata_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCCSVData::CopyFrom(const UGCCSVData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCCSVData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCCSVData::IsInitialized() const {
  return true;
}

void UGCCSVData::InternalSwap(UGCCSVData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.csvdata_.InternalSwap(&other->_impl_.csvdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCCSVData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[20]);
}

// ===================================================================

class UGCResFFBuildin::_Internal {
 public:
};

UGCResFFBuildin::UGCResFFBuildin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResFFBuildin)
}
UGCResFFBuildin::UGCResFFBuildin(const UGCResFFBuildin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResFFBuildin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ffresourcename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ffresourcename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ffresourcename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ffresourcename().empty()) {
    _this->_impl_.ffresourcename_.Set(from._internal_ffresourcename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCResFFBuildin)
}

inline void UGCResFFBuildin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ffresourcename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ffresourcename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ffresourcename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResFFBuildin::~UGCResFFBuildin() {
  // @@protoc_insertion_point(destructor:message.UGCResFFBuildin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResFFBuildin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ffresourcename_.Destroy();
}

void UGCResFFBuildin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResFFBuildin::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResFFBuildin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ffresourcename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResFFBuildin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FFResourceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ffresourcename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResFFBuildin.FFResourceName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResFFBuildin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResFFBuildin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string FFResourceName = 1;
  if (!this->_internal_ffresourcename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ffresourcename().data(), static_cast<int>(this->_internal_ffresourcename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResFFBuildin.FFResourceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ffresourcename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResFFBuildin)
  return target;
}

size_t UGCResFFBuildin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResFFBuildin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FFResourceName = 1;
  if (!this->_internal_ffresourcename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ffresourcename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResFFBuildin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResFFBuildin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResFFBuildin::GetClassData() const { return &_class_data_; }


void UGCResFFBuildin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResFFBuildin*>(&to_msg);
  auto& from = static_cast<const UGCResFFBuildin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResFFBuildin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ffresourcename().empty()) {
    _this->_internal_set_ffresourcename(from._internal_ffresourcename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResFFBuildin::CopyFrom(const UGCResFFBuildin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResFFBuildin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResFFBuildin::IsInitialized() const {
  return true;
}

void UGCResFFBuildin::InternalSwap(UGCResFFBuildin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ffresourcename_, lhs_arena,
      &other->_impl_.ffresourcename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResFFBuildin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[21]);
}

// ===================================================================

class UGCResAnimationStateClipData::_Internal {
 public:
};

UGCResAnimationStateClipData::UGCResAnimationStateClipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResAnimationStateClipData)
}
UGCResAnimationStateClipData::UGCResAnimationStateClipData(const UGCResAnimationStateClipData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResAnimationStateClipData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clipuuid_){}
    , decltype(_impl_.clipname_){}
    , decltype(_impl_.isloop_){}
    , decltype(_impl_.playspeed_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clipuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clipuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clipuuid().empty()) {
    _this->_impl_.clipuuid_.Set(from._internal_clipuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clipname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clipname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clipname().empty()) {
    _this->_impl_.clipname_.Set(from._internal_clipname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isloop_, &from._impl_.isloop_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.isloop_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResAnimationStateClipData)
}

inline void UGCResAnimationStateClipData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clipuuid_){}
    , decltype(_impl_.clipname_){}
    , decltype(_impl_.isloop_){false}
    , decltype(_impl_.playspeed_){0}
    , decltype(_impl_.length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clipuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clipuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clipname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clipname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResAnimationStateClipData::~UGCResAnimationStateClipData() {
  // @@protoc_insertion_point(destructor:message.UGCResAnimationStateClipData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResAnimationStateClipData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clipuuid_.Destroy();
  _impl_.clipname_.Destroy();
}

void UGCResAnimationStateClipData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResAnimationStateClipData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResAnimationStateClipData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clipuuid_.ClearToEmpty();
  _impl_.clipname_.ClearToEmpty();
  ::memset(&_impl_.isloop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.isloop_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResAnimationStateClipData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ClipUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clipuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAnimationStateClipData.ClipUUID"));
        } else
          goto handle_unusual;
        continue;
      // string ClipName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clipname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAnimationStateClipData.ClipName"));
        } else
          goto handle_unusual;
        continue;
      // bool IsLoop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isloop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float PlaySpeed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.playspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResAnimationStateClipData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResAnimationStateClipData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ClipUUID = 1;
  if (!this->_internal_clipuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clipuuid().data(), static_cast<int>(this->_internal_clipuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAnimationStateClipData.ClipUUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clipuuid(), target);
  }

  // string ClipName = 2;
  if (!this->_internal_clipname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clipname().data(), static_cast<int>(this->_internal_clipname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAnimationStateClipData.ClipName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clipname(), target);
  }

  // bool IsLoop = 3;
  if (this->_internal_isloop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isloop(), target);
  }

  // float PlaySpeed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_playspeed = this->_internal_playspeed();
  uint32_t raw_playspeed;
  memcpy(&raw_playspeed, &tmp_playspeed, sizeof(tmp_playspeed));
  if (raw_playspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_playspeed(), target);
  }

  // float Length = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResAnimationStateClipData)
  return target;
}

size_t UGCResAnimationStateClipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResAnimationStateClipData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ClipUUID = 1;
  if (!this->_internal_clipuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clipuuid());
  }

  // string ClipName = 2;
  if (!this->_internal_clipname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clipname());
  }

  // bool IsLoop = 3;
  if (this->_internal_isloop() != 0) {
    total_size += 1 + 1;
  }

  // float PlaySpeed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_playspeed = this->_internal_playspeed();
  uint32_t raw_playspeed;
  memcpy(&raw_playspeed, &tmp_playspeed, sizeof(tmp_playspeed));
  if (raw_playspeed != 0) {
    total_size += 1 + 4;
  }

  // float Length = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResAnimationStateClipData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResAnimationStateClipData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResAnimationStateClipData::GetClassData() const { return &_class_data_; }


void UGCResAnimationStateClipData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResAnimationStateClipData*>(&to_msg);
  auto& from = static_cast<const UGCResAnimationStateClipData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResAnimationStateClipData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clipuuid().empty()) {
    _this->_internal_set_clipuuid(from._internal_clipuuid());
  }
  if (!from._internal_clipname().empty()) {
    _this->_internal_set_clipname(from._internal_clipname());
  }
  if (from._internal_isloop() != 0) {
    _this->_internal_set_isloop(from._internal_isloop());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_playspeed = from._internal_playspeed();
  uint32_t raw_playspeed;
  memcpy(&raw_playspeed, &tmp_playspeed, sizeof(tmp_playspeed));
  if (raw_playspeed != 0) {
    _this->_internal_set_playspeed(from._internal_playspeed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = from._internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResAnimationStateClipData::CopyFrom(const UGCResAnimationStateClipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResAnimationStateClipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResAnimationStateClipData::IsInitialized() const {
  return true;
}

void UGCResAnimationStateClipData::InternalSwap(UGCResAnimationStateClipData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clipuuid_, lhs_arena,
      &other->_impl_.clipuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clipname_, lhs_arena,
      &other->_impl_.clipname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResAnimationStateClipData, _impl_.length_)
      + sizeof(UGCResAnimationStateClipData::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(UGCResAnimationStateClipData, _impl_.isloop_)>(
          reinterpret_cast<char*>(&_impl_.isloop_),
          reinterpret_cast<char*>(&other->_impl_.isloop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResAnimationStateClipData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[22]);
}

// ===================================================================

class UGCResAnimationStateData::_Internal {
 public:
};

UGCResAnimationStateData::UGCResAnimationStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResAnimationStateData)
}
UGCResAnimationStateData::UGCResAnimationStateData(const UGCResAnimationStateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResAnimationStateData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clips_){from._impl_.clips_}
    , decltype(_impl_.statename_){}
    , decltype(_impl_.isloop_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.statename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_statename().empty()) {
    _this->_impl_.statename_.Set(from._internal_statename(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.isloop_ = from._impl_.isloop_;
  // @@protoc_insertion_point(copy_constructor:message.UGCResAnimationStateData)
}

inline void UGCResAnimationStateData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clips_){arena}
    , decltype(_impl_.statename_){}
    , decltype(_impl_.isloop_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.statename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResAnimationStateData::~UGCResAnimationStateData() {
  // @@protoc_insertion_point(destructor:message.UGCResAnimationStateData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResAnimationStateData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clips_.~RepeatedPtrField();
  _impl_.statename_.Destroy();
}

void UGCResAnimationStateData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResAnimationStateData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResAnimationStateData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clips_.Clear();
  _impl_.statename_.ClearToEmpty();
  _impl_.isloop_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResAnimationStateData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string StateName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_statename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAnimationStateData.StateName"));
        } else
          goto handle_unusual;
        continue;
      // bool IsLoop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isloop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResAnimationStateClipData Clips = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResAnimationStateData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResAnimationStateData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string StateName = 1;
  if (!this->_internal_statename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statename().data(), static_cast<int>(this->_internal_statename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAnimationStateData.StateName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_statename(), target);
  }

  // bool IsLoop = 2;
  if (this->_internal_isloop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isloop(), target);
  }

  // repeated .message.UGCResAnimationStateClipData Clips = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clips_size()); i < n; i++) {
    const auto& repfield = this->_internal_clips(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResAnimationStateData)
  return target;
}

size_t UGCResAnimationStateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResAnimationStateData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResAnimationStateClipData Clips = 3;
  total_size += 1UL * this->_internal_clips_size();
  for (const auto& msg : this->_impl_.clips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string StateName = 1;
  if (!this->_internal_statename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statename());
  }

  // bool IsLoop = 2;
  if (this->_internal_isloop() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResAnimationStateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResAnimationStateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResAnimationStateData::GetClassData() const { return &_class_data_; }


void UGCResAnimationStateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResAnimationStateData*>(&to_msg);
  auto& from = static_cast<const UGCResAnimationStateData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResAnimationStateData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clips_.MergeFrom(from._impl_.clips_);
  if (!from._internal_statename().empty()) {
    _this->_internal_set_statename(from._internal_statename());
  }
  if (from._internal_isloop() != 0) {
    _this->_internal_set_isloop(from._internal_isloop());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResAnimationStateData::CopyFrom(const UGCResAnimationStateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResAnimationStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResAnimationStateData::IsInitialized() const {
  return true;
}

void UGCResAnimationStateData::InternalSwap(UGCResAnimationStateData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clips_.InternalSwap(&other->_impl_.clips_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.statename_, lhs_arena,
      &other->_impl_.statename_, rhs_arena
  );
  swap(_impl_.isloop_, other->_impl_.isloop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResAnimationStateData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[23]);
}

// ===================================================================

class UGCResAnimationControllerData::_Internal {
 public:
};

UGCResAnimationControllerData::UGCResAnimationControllerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResAnimationControllerData)
}
UGCResAnimationControllerData::UGCResAnimationControllerData(const UGCResAnimationControllerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResAnimationControllerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCResAnimationControllerData)
}

inline void UGCResAnimationControllerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCResAnimationControllerData::~UGCResAnimationControllerData() {
  // @@protoc_insertion_point(destructor:message.UGCResAnimationControllerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResAnimationControllerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
}

void UGCResAnimationControllerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResAnimationControllerData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResAnimationControllerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResAnimationControllerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCResAnimationStateData States = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResAnimationControllerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResAnimationControllerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCResAnimationStateData States = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResAnimationControllerData)
  return target;
}

size_t UGCResAnimationControllerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResAnimationControllerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResAnimationStateData States = 1;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResAnimationControllerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResAnimationControllerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResAnimationControllerData::GetClassData() const { return &_class_data_; }


void UGCResAnimationControllerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResAnimationControllerData*>(&to_msg);
  auto& from = static_cast<const UGCResAnimationControllerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResAnimationControllerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResAnimationControllerData::CopyFrom(const UGCResAnimationControllerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResAnimationControllerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResAnimationControllerData::IsInitialized() const {
  return true;
}

void UGCResAnimationControllerData::InternalSwap(UGCResAnimationControllerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResAnimationControllerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[24]);
}

// ===================================================================

class UGCResBoneNodeCapsuleData::_Internal {
 public:
  static const ::message::ProtoBuffVector3& center(const UGCResBoneNodeCapsuleData* msg);
};

const ::message::ProtoBuffVector3&
UGCResBoneNodeCapsuleData::_Internal::center(const UGCResBoneNodeCapsuleData* msg) {
  return *msg->_impl_.center_;
}
void UGCResBoneNodeCapsuleData::clear_center() {
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
}
UGCResBoneNodeCapsuleData::UGCResBoneNodeCapsuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResBoneNodeCapsuleData)
}
UGCResBoneNodeCapsuleData::UGCResBoneNodeCapsuleData(const UGCResBoneNodeCapsuleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResBoneNodeCapsuleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.center_){nullptr}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.bodytype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    _this->_impl_.center_ = new ::message::ProtoBuffVector3(*from._impl_.center_);
  }
  ::memcpy(&_impl_.radius_, &from._impl_.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bodytype_) -
    reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.bodytype_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResBoneNodeCapsuleData)
}

inline void UGCResBoneNodeCapsuleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.center_){nullptr}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.bodytype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCResBoneNodeCapsuleData::~UGCResBoneNodeCapsuleData() {
  // @@protoc_insertion_point(destructor:message.UGCResBoneNodeCapsuleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResBoneNodeCapsuleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.center_;
}

void UGCResBoneNodeCapsuleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResBoneNodeCapsuleData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResBoneNodeCapsuleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
  ::memset(&_impl_.radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bodytype_) -
      reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.bodytype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResBoneNodeCapsuleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.ProtoBuffVector3 Center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float Radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 Direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BodyType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bodytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResBoneNodeCapsuleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResBoneNodeCapsuleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.ProtoBuffVector3 Center = 1;
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float Radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_radius(), target);
  }

  // float Height = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_height(), target);
  }

  // int32 Direction = 4;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_direction(), target);
  }

  // int32 BodyType = 5;
  if (this->_internal_bodytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_bodytype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResBoneNodeCapsuleData)
  return target;
}

size_t UGCResBoneNodeCapsuleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResBoneNodeCapsuleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.ProtoBuffVector3 Center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_);
  }

  // float Radius = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float Height = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  // int32 Direction = 4;
  if (this->_internal_direction() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_direction());
  }

  // int32 BodyType = 5;
  if (this->_internal_bodytype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bodytype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResBoneNodeCapsuleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResBoneNodeCapsuleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResBoneNodeCapsuleData::GetClassData() const { return &_class_data_; }


void UGCResBoneNodeCapsuleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResBoneNodeCapsuleData*>(&to_msg);
  auto& from = static_cast<const UGCResBoneNodeCapsuleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResBoneNodeCapsuleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center()) {
    _this->_internal_mutable_center()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_center());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_bodytype() != 0) {
    _this->_internal_set_bodytype(from._internal_bodytype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResBoneNodeCapsuleData::CopyFrom(const UGCResBoneNodeCapsuleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResBoneNodeCapsuleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResBoneNodeCapsuleData::IsInitialized() const {
  return true;
}

void UGCResBoneNodeCapsuleData::InternalSwap(UGCResBoneNodeCapsuleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResBoneNodeCapsuleData, _impl_.bodytype_)
      + sizeof(UGCResBoneNodeCapsuleData::_impl_.bodytype_)
      - PROTOBUF_FIELD_OFFSET(UGCResBoneNodeCapsuleData, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResBoneNodeCapsuleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[25]);
}

// ===================================================================

class UGCResBoneNodeData::_Internal {
 public:
  static const ::message::ProtoBuffVector3& localposition(const UGCResBoneNodeData* msg);
  static const ::message::ProtoBuffVector3& localscale(const UGCResBoneNodeData* msg);
  static const ::message::ProtoBuffQuaternion& localrotation(const UGCResBoneNodeData* msg);
  static const ::message::UGCResBoneNodeCapsuleData& capsuleinfo(const UGCResBoneNodeData* msg);
};

const ::message::ProtoBuffVector3&
UGCResBoneNodeData::_Internal::localposition(const UGCResBoneNodeData* msg) {
  return *msg->_impl_.localposition_;
}
const ::message::ProtoBuffVector3&
UGCResBoneNodeData::_Internal::localscale(const UGCResBoneNodeData* msg) {
  return *msg->_impl_.localscale_;
}
const ::message::ProtoBuffQuaternion&
UGCResBoneNodeData::_Internal::localrotation(const UGCResBoneNodeData* msg) {
  return *msg->_impl_.localrotation_;
}
const ::message::UGCResBoneNodeCapsuleData&
UGCResBoneNodeData::_Internal::capsuleinfo(const UGCResBoneNodeData* msg) {
  return *msg->_impl_.capsuleinfo_;
}
void UGCResBoneNodeData::clear_localposition() {
  if (GetArenaForAllocation() == nullptr && _impl_.localposition_ != nullptr) {
    delete _impl_.localposition_;
  }
  _impl_.localposition_ = nullptr;
}
void UGCResBoneNodeData::clear_localscale() {
  if (GetArenaForAllocation() == nullptr && _impl_.localscale_ != nullptr) {
    delete _impl_.localscale_;
  }
  _impl_.localscale_ = nullptr;
}
void UGCResBoneNodeData::clear_localrotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.localrotation_ != nullptr) {
    delete _impl_.localrotation_;
  }
  _impl_.localrotation_ = nullptr;
}
UGCResBoneNodeData::UGCResBoneNodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResBoneNodeData)
}
UGCResBoneNodeData::UGCResBoneNodeData(const UGCResBoneNodeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResBoneNodeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.childbones_){from._impl_.childbones_}
    , decltype(_impl_.bonename_){}
    , decltype(_impl_.localposition_){nullptr}
    , decltype(_impl_.localscale_){nullptr}
    , decltype(_impl_.localrotation_){nullptr}
    , decltype(_impl_.capsuleinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bonename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bonename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bonename().empty()) {
    _this->_impl_.bonename_.Set(from._internal_bonename(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_localposition()) {
    _this->_impl_.localposition_ = new ::message::ProtoBuffVector3(*from._impl_.localposition_);
  }
  if (from._internal_has_localscale()) {
    _this->_impl_.localscale_ = new ::message::ProtoBuffVector3(*from._impl_.localscale_);
  }
  if (from._internal_has_localrotation()) {
    _this->_impl_.localrotation_ = new ::message::ProtoBuffQuaternion(*from._impl_.localrotation_);
  }
  if (from._internal_has_capsuleinfo()) {
    _this->_impl_.capsuleinfo_ = new ::message::UGCResBoneNodeCapsuleData(*from._impl_.capsuleinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCResBoneNodeData)
}

inline void UGCResBoneNodeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.childbones_){arena}
    , decltype(_impl_.bonename_){}
    , decltype(_impl_.localposition_){nullptr}
    , decltype(_impl_.localscale_){nullptr}
    , decltype(_impl_.localrotation_){nullptr}
    , decltype(_impl_.capsuleinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bonename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bonename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResBoneNodeData::~UGCResBoneNodeData() {
  // @@protoc_insertion_point(destructor:message.UGCResBoneNodeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResBoneNodeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.childbones_.~RepeatedPtrField();
  _impl_.bonename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.localposition_;
  if (this != internal_default_instance()) delete _impl_.localscale_;
  if (this != internal_default_instance()) delete _impl_.localrotation_;
  if (this != internal_default_instance()) delete _impl_.capsuleinfo_;
}

void UGCResBoneNodeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResBoneNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResBoneNodeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.childbones_.Clear();
  _impl_.bonename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.localposition_ != nullptr) {
    delete _impl_.localposition_;
  }
  _impl_.localposition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.localscale_ != nullptr) {
    delete _impl_.localscale_;
  }
  _impl_.localscale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.localrotation_ != nullptr) {
    delete _impl_.localrotation_;
  }
  _impl_.localrotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.capsuleinfo_ != nullptr) {
    delete _impl_.capsuleinfo_;
  }
  _impl_.capsuleinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResBoneNodeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string BoneName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bonename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResBoneNodeData.BoneName"));
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 LocalPosition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_localposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 LocalScale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_localscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffQuaternion LocalRotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_localrotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.UGCResBoneNodeCapsuleData CapsuleInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_capsuleinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResBoneNodeData ChildBones = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_childbones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResBoneNodeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResBoneNodeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string BoneName = 1;
  if (!this->_internal_bonename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bonename().data(), static_cast<int>(this->_internal_bonename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResBoneNodeData.BoneName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bonename(), target);
  }

  // .message.ProtoBuffVector3 LocalPosition = 2;
  if (this->_internal_has_localposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::localposition(this),
        _Internal::localposition(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 LocalScale = 3;
  if (this->_internal_has_localscale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::localscale(this),
        _Internal::localscale(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffQuaternion LocalRotation = 4;
  if (this->_internal_has_localrotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::localrotation(this),
        _Internal::localrotation(this).GetCachedSize(), target, stream);
  }

  // .message.UGCResBoneNodeCapsuleData CapsuleInfo = 5;
  if (this->_internal_has_capsuleinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::capsuleinfo(this),
        _Internal::capsuleinfo(this).GetCachedSize(), target, stream);
  }

  // repeated .message.UGCResBoneNodeData ChildBones = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_childbones_size()); i < n; i++) {
    const auto& repfield = this->_internal_childbones(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResBoneNodeData)
  return target;
}

size_t UGCResBoneNodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResBoneNodeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResBoneNodeData ChildBones = 6;
  total_size += 1UL * this->_internal_childbones_size();
  for (const auto& msg : this->_impl_.childbones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string BoneName = 1;
  if (!this->_internal_bonename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bonename());
  }

  // .message.ProtoBuffVector3 LocalPosition = 2;
  if (this->_internal_has_localposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localposition_);
  }

  // .message.ProtoBuffVector3 LocalScale = 3;
  if (this->_internal_has_localscale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localscale_);
  }

  // .message.ProtoBuffQuaternion LocalRotation = 4;
  if (this->_internal_has_localrotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localrotation_);
  }

  // .message.UGCResBoneNodeCapsuleData CapsuleInfo = 5;
  if (this->_internal_has_capsuleinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.capsuleinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResBoneNodeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResBoneNodeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResBoneNodeData::GetClassData() const { return &_class_data_; }


void UGCResBoneNodeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResBoneNodeData*>(&to_msg);
  auto& from = static_cast<const UGCResBoneNodeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResBoneNodeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.childbones_.MergeFrom(from._impl_.childbones_);
  if (!from._internal_bonename().empty()) {
    _this->_internal_set_bonename(from._internal_bonename());
  }
  if (from._internal_has_localposition()) {
    _this->_internal_mutable_localposition()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_localposition());
  }
  if (from._internal_has_localscale()) {
    _this->_internal_mutable_localscale()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_localscale());
  }
  if (from._internal_has_localrotation()) {
    _this->_internal_mutable_localrotation()->::message::ProtoBuffQuaternion::MergeFrom(
        from._internal_localrotation());
  }
  if (from._internal_has_capsuleinfo()) {
    _this->_internal_mutable_capsuleinfo()->::message::UGCResBoneNodeCapsuleData::MergeFrom(
        from._internal_capsuleinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResBoneNodeData::CopyFrom(const UGCResBoneNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResBoneNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResBoneNodeData::IsInitialized() const {
  return true;
}

void UGCResBoneNodeData::InternalSwap(UGCResBoneNodeData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.childbones_.InternalSwap(&other->_impl_.childbones_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bonename_, lhs_arena,
      &other->_impl_.bonename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResBoneNodeData, _impl_.capsuleinfo_)
      + sizeof(UGCResBoneNodeData::_impl_.capsuleinfo_)
      - PROTOBUF_FIELD_OFFSET(UGCResBoneNodeData, _impl_.localposition_)>(
          reinterpret_cast<char*>(&_impl_.localposition_),
          reinterpret_cast<char*>(&other->_impl_.localposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResBoneNodeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[26]);
}

// ===================================================================

class UGCResSkeletonData::_Internal {
 public:
  static const ::message::UGCResBoneNodeData& rootbone(const UGCResSkeletonData* msg);
};

const ::message::UGCResBoneNodeData&
UGCResSkeletonData::_Internal::rootbone(const UGCResSkeletonData* msg) {
  return *msg->_impl_.rootbone_;
}
UGCResSkeletonData::UGCResSkeletonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResSkeletonData)
}
UGCResSkeletonData::UGCResSkeletonData(const UGCResSkeletonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResSkeletonData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rootbone_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rootbone()) {
    _this->_impl_.rootbone_ = new ::message::UGCResBoneNodeData(*from._impl_.rootbone_);
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCResSkeletonData)
}

inline void UGCResSkeletonData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rootbone_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCResSkeletonData::~UGCResSkeletonData() {
  // @@protoc_insertion_point(destructor:message.UGCResSkeletonData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResSkeletonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rootbone_;
}

void UGCResSkeletonData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResSkeletonData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResSkeletonData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rootbone_ != nullptr) {
    delete _impl_.rootbone_;
  }
  _impl_.rootbone_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResSkeletonData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.UGCResBoneNodeData RootBone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rootbone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResSkeletonData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResSkeletonData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.UGCResBoneNodeData RootBone = 1;
  if (this->_internal_has_rootbone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rootbone(this),
        _Internal::rootbone(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResSkeletonData)
  return target;
}

size_t UGCResSkeletonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResSkeletonData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.UGCResBoneNodeData RootBone = 1;
  if (this->_internal_has_rootbone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rootbone_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResSkeletonData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResSkeletonData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResSkeletonData::GetClassData() const { return &_class_data_; }


void UGCResSkeletonData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResSkeletonData*>(&to_msg);
  auto& from = static_cast<const UGCResSkeletonData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResSkeletonData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rootbone()) {
    _this->_internal_mutable_rootbone()->::message::UGCResBoneNodeData::MergeFrom(
        from._internal_rootbone());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResSkeletonData::CopyFrom(const UGCResSkeletonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResSkeletonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResSkeletonData::IsInitialized() const {
  return true;
}

void UGCResSkeletonData::InternalSwap(UGCResSkeletonData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rootbone_, other->_impl_.rootbone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResSkeletonData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[27]);
}

// ===================================================================

class UGCResAvatarOnePartData::_Internal {
 public:
  static const ::message::ProtoBuffVector3& localposition(const UGCResAvatarOnePartData* msg);
  static const ::message::ProtoBuffVector3& localscale(const UGCResAvatarOnePartData* msg);
  static const ::message::ProtoBuffQuaternion& localrotation(const UGCResAvatarOnePartData* msg);
};

const ::message::ProtoBuffVector3&
UGCResAvatarOnePartData::_Internal::localposition(const UGCResAvatarOnePartData* msg) {
  return *msg->_impl_.localposition_;
}
const ::message::ProtoBuffVector3&
UGCResAvatarOnePartData::_Internal::localscale(const UGCResAvatarOnePartData* msg) {
  return *msg->_impl_.localscale_;
}
const ::message::ProtoBuffQuaternion&
UGCResAvatarOnePartData::_Internal::localrotation(const UGCResAvatarOnePartData* msg) {
  return *msg->_impl_.localrotation_;
}
void UGCResAvatarOnePartData::clear_localposition() {
  if (GetArenaForAllocation() == nullptr && _impl_.localposition_ != nullptr) {
    delete _impl_.localposition_;
  }
  _impl_.localposition_ = nullptr;
}
void UGCResAvatarOnePartData::clear_localscale() {
  if (GetArenaForAllocation() == nullptr && _impl_.localscale_ != nullptr) {
    delete _impl_.localscale_;
  }
  _impl_.localscale_ = nullptr;
}
void UGCResAvatarOnePartData::clear_localrotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.localrotation_ != nullptr) {
    delete _impl_.localrotation_;
  }
  _impl_.localrotation_ = nullptr;
}
UGCResAvatarOnePartData::UGCResAvatarOnePartData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResAvatarOnePartData)
}
UGCResAvatarOnePartData::UGCResAvatarOnePartData(const UGCResAvatarOnePartData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResAvatarOnePartData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.gameobjresuuid_){}
    , decltype(_impl_.bone_){}
    , decltype(_impl_.localposition_){nullptr}
    , decltype(_impl_.localscale_){nullptr}
    , decltype(_impl_.localrotation_){nullptr}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.repbitindex_){}
    , decltype(_impl_.bindtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gameobjresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gameobjresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gameobjresuuid().empty()) {
    _this->_impl_.gameobjresuuid_.Set(from._internal_gameobjresuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bone().empty()) {
    _this->_impl_.bone_.Set(from._internal_bone(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_localposition()) {
    _this->_impl_.localposition_ = new ::message::ProtoBuffVector3(*from._impl_.localposition_);
  }
  if (from._internal_has_localscale()) {
    _this->_impl_.localscale_ = new ::message::ProtoBuffVector3(*from._impl_.localscale_);
  }
  if (from._internal_has_localrotation()) {
    _this->_impl_.localrotation_ = new ::message::ProtoBuffQuaternion(*from._impl_.localrotation_);
  }
  ::memcpy(&_impl_.groupid_, &from._impl_.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bindtype_) -
    reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.bindtype_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResAvatarOnePartData)
}

inline void UGCResAvatarOnePartData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.gameobjresuuid_){}
    , decltype(_impl_.bone_){}
    , decltype(_impl_.localposition_){nullptr}
    , decltype(_impl_.localscale_){nullptr}
    , decltype(_impl_.localrotation_){nullptr}
    , decltype(_impl_.groupid_){0}
    , decltype(_impl_.repbitindex_){0}
    , decltype(_impl_.bindtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gameobjresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gameobjresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResAvatarOnePartData::~UGCResAvatarOnePartData() {
  // @@protoc_insertion_point(destructor:message.UGCResAvatarOnePartData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResAvatarOnePartData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.gameobjresuuid_.Destroy();
  _impl_.bone_.Destroy();
  if (this != internal_default_instance()) delete _impl_.localposition_;
  if (this != internal_default_instance()) delete _impl_.localscale_;
  if (this != internal_default_instance()) delete _impl_.localrotation_;
}

void UGCResAvatarOnePartData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResAvatarOnePartData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResAvatarOnePartData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.gameobjresuuid_.ClearToEmpty();
  _impl_.bone_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.localposition_ != nullptr) {
    delete _impl_.localposition_;
  }
  _impl_.localposition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.localscale_ != nullptr) {
    delete _impl_.localscale_;
  }
  _impl_.localscale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.localrotation_ != nullptr) {
    delete _impl_.localrotation_;
  }
  _impl_.localrotation_ = nullptr;
  ::memset(&_impl_.groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bindtype_) -
      reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.bindtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResAvatarOnePartData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAvatarOnePartData.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 GroupID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RepBitIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.repbitindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string GameObjResUUID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_gameobjresuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAvatarOnePartData.GameObjResUUID"));
        } else
          goto handle_unusual;
        continue;
      // string Bone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAvatarOnePartData.Bone"));
        } else
          goto handle_unusual;
        continue;
      // int32 BindType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bindtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 LocalPosition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_localposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffVector3 LocalScale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_localscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ProtoBuffQuaternion LocalRotation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_localrotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResAvatarOnePartData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResAvatarOnePartData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAvatarOnePartData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 GroupID = 2;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_groupid(), target);
  }

  // int32 RepBitIndex = 3;
  if (this->_internal_repbitindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_repbitindex(), target);
  }

  // string GameObjResUUID = 4;
  if (!this->_internal_gameobjresuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameobjresuuid().data(), static_cast<int>(this->_internal_gameobjresuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAvatarOnePartData.GameObjResUUID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_gameobjresuuid(), target);
  }

  // string Bone = 5;
  if (!this->_internal_bone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bone().data(), static_cast<int>(this->_internal_bone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAvatarOnePartData.Bone");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bone(), target);
  }

  // int32 BindType = 6;
  if (this->_internal_bindtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_bindtype(), target);
  }

  // .message.ProtoBuffVector3 LocalPosition = 7;
  if (this->_internal_has_localposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::localposition(this),
        _Internal::localposition(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffVector3 LocalScale = 8;
  if (this->_internal_has_localscale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::localscale(this),
        _Internal::localscale(this).GetCachedSize(), target, stream);
  }

  // .message.ProtoBuffQuaternion LocalRotation = 9;
  if (this->_internal_has_localrotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::localrotation(this),
        _Internal::localrotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResAvatarOnePartData)
  return target;
}

size_t UGCResAvatarOnePartData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResAvatarOnePartData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string GameObjResUUID = 4;
  if (!this->_internal_gameobjresuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameobjresuuid());
  }

  // string Bone = 5;
  if (!this->_internal_bone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bone());
  }

  // .message.ProtoBuffVector3 LocalPosition = 7;
  if (this->_internal_has_localposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localposition_);
  }

  // .message.ProtoBuffVector3 LocalScale = 8;
  if (this->_internal_has_localscale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localscale_);
  }

  // .message.ProtoBuffQuaternion LocalRotation = 9;
  if (this->_internal_has_localrotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localrotation_);
  }

  // int32 GroupID = 2;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
  }

  // int32 RepBitIndex = 3;
  if (this->_internal_repbitindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_repbitindex());
  }

  // int32 BindType = 6;
  if (this->_internal_bindtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bindtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResAvatarOnePartData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResAvatarOnePartData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResAvatarOnePartData::GetClassData() const { return &_class_data_; }


void UGCResAvatarOnePartData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResAvatarOnePartData*>(&to_msg);
  auto& from = static_cast<const UGCResAvatarOnePartData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResAvatarOnePartData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_gameobjresuuid().empty()) {
    _this->_internal_set_gameobjresuuid(from._internal_gameobjresuuid());
  }
  if (!from._internal_bone().empty()) {
    _this->_internal_set_bone(from._internal_bone());
  }
  if (from._internal_has_localposition()) {
    _this->_internal_mutable_localposition()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_localposition());
  }
  if (from._internal_has_localscale()) {
    _this->_internal_mutable_localscale()->::message::ProtoBuffVector3::MergeFrom(
        from._internal_localscale());
  }
  if (from._internal_has_localrotation()) {
    _this->_internal_mutable_localrotation()->::message::ProtoBuffQuaternion::MergeFrom(
        from._internal_localrotation());
  }
  if (from._internal_groupid() != 0) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_repbitindex() != 0) {
    _this->_internal_set_repbitindex(from._internal_repbitindex());
  }
  if (from._internal_bindtype() != 0) {
    _this->_internal_set_bindtype(from._internal_bindtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResAvatarOnePartData::CopyFrom(const UGCResAvatarOnePartData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResAvatarOnePartData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResAvatarOnePartData::IsInitialized() const {
  return true;
}

void UGCResAvatarOnePartData::InternalSwap(UGCResAvatarOnePartData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gameobjresuuid_, lhs_arena,
      &other->_impl_.gameobjresuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bone_, lhs_arena,
      &other->_impl_.bone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResAvatarOnePartData, _impl_.bindtype_)
      + sizeof(UGCResAvatarOnePartData::_impl_.bindtype_)
      - PROTOBUF_FIELD_OFFSET(UGCResAvatarOnePartData, _impl_.localposition_)>(
          reinterpret_cast<char*>(&_impl_.localposition_),
          reinterpret_cast<char*>(&other->_impl_.localposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResAvatarOnePartData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[28]);
}

// ===================================================================

class UGCResOneAvatarData::_Internal {
 public:
};

UGCResOneAvatarData::UGCResOneAvatarData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResOneAvatarData)
}
UGCResOneAvatarData::UGCResOneAvatarData(const UGCResOneAvatarData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResOneAvatarData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partlist_){from._impl_.partlist_}
    , decltype(_impl_.skeletonresuuid_){}
    , decltype(_impl_.defaultvisablemask1_){}
    , decltype(_impl_.defaultvisablemask2_){}
    , decltype(_impl_.defaultvisablemask3_){}
    , decltype(_impl_.preloadallpart_){}
    , decltype(_impl_.autocombinemesh_){}
    , decltype(_impl_.defaultvisablemask4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.skeletonresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skeletonresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skeletonresuuid().empty()) {
    _this->_impl_.skeletonresuuid_.Set(from._internal_skeletonresuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.defaultvisablemask1_, &from._impl_.defaultvisablemask1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.defaultvisablemask4_) -
    reinterpret_cast<char*>(&_impl_.defaultvisablemask1_)) + sizeof(_impl_.defaultvisablemask4_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResOneAvatarData)
}

inline void UGCResOneAvatarData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partlist_){arena}
    , decltype(_impl_.skeletonresuuid_){}
    , decltype(_impl_.defaultvisablemask1_){0}
    , decltype(_impl_.defaultvisablemask2_){0}
    , decltype(_impl_.defaultvisablemask3_){0}
    , decltype(_impl_.preloadallpart_){false}
    , decltype(_impl_.autocombinemesh_){false}
    , decltype(_impl_.defaultvisablemask4_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.skeletonresuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skeletonresuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResOneAvatarData::~UGCResOneAvatarData() {
  // @@protoc_insertion_point(destructor:message.UGCResOneAvatarData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResOneAvatarData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partlist_.~RepeatedPtrField();
  _impl_.skeletonresuuid_.Destroy();
}

void UGCResOneAvatarData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResOneAvatarData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResOneAvatarData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partlist_.Clear();
  _impl_.skeletonresuuid_.ClearToEmpty();
  ::memset(&_impl_.defaultvisablemask1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.defaultvisablemask4_) -
      reinterpret_cast<char*>(&_impl_.defaultvisablemask1_)) + sizeof(_impl_.defaultvisablemask4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResOneAvatarData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SkeletonResUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_skeletonresuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResOneAvatarData.SkeletonResUUID"));
        } else
          goto handle_unusual;
        continue;
      // bool PreloadAllPart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.preloadallpart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DefaultVisableMask1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.defaultvisablemask1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DefaultVisableMask2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.defaultvisablemask2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DefaultVisableMask3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.defaultvisablemask3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DefaultVisableMask4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.defaultvisablemask4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResAvatarOnePartData PartList = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool AutoCombineMesh = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.autocombinemesh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResOneAvatarData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResOneAvatarData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SkeletonResUUID = 1;
  if (!this->_internal_skeletonresuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skeletonresuuid().data(), static_cast<int>(this->_internal_skeletonresuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResOneAvatarData.SkeletonResUUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_skeletonresuuid(), target);
  }

  // bool PreloadAllPart = 2;
  if (this->_internal_preloadallpart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_preloadallpart(), target);
  }

  // int32 DefaultVisableMask1 = 3;
  if (this->_internal_defaultvisablemask1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_defaultvisablemask1(), target);
  }

  // int32 DefaultVisableMask2 = 4;
  if (this->_internal_defaultvisablemask2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_defaultvisablemask2(), target);
  }

  // int32 DefaultVisableMask3 = 5;
  if (this->_internal_defaultvisablemask3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_defaultvisablemask3(), target);
  }

  // int32 DefaultVisableMask4 = 6;
  if (this->_internal_defaultvisablemask4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_defaultvisablemask4(), target);
  }

  // repeated .message.UGCResAvatarOnePartData PartList = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_partlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool AutoCombineMesh = 8;
  if (this->_internal_autocombinemesh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_autocombinemesh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResOneAvatarData)
  return target;
}

size_t UGCResOneAvatarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResOneAvatarData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResAvatarOnePartData PartList = 7;
  total_size += 1UL * this->_internal_partlist_size();
  for (const auto& msg : this->_impl_.partlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string SkeletonResUUID = 1;
  if (!this->_internal_skeletonresuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skeletonresuuid());
  }

  // int32 DefaultVisableMask1 = 3;
  if (this->_internal_defaultvisablemask1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_defaultvisablemask1());
  }

  // int32 DefaultVisableMask2 = 4;
  if (this->_internal_defaultvisablemask2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_defaultvisablemask2());
  }

  // int32 DefaultVisableMask3 = 5;
  if (this->_internal_defaultvisablemask3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_defaultvisablemask3());
  }

  // bool PreloadAllPart = 2;
  if (this->_internal_preloadallpart() != 0) {
    total_size += 1 + 1;
  }

  // bool AutoCombineMesh = 8;
  if (this->_internal_autocombinemesh() != 0) {
    total_size += 1 + 1;
  }

  // int32 DefaultVisableMask4 = 6;
  if (this->_internal_defaultvisablemask4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_defaultvisablemask4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResOneAvatarData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResOneAvatarData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResOneAvatarData::GetClassData() const { return &_class_data_; }


void UGCResOneAvatarData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResOneAvatarData*>(&to_msg);
  auto& from = static_cast<const UGCResOneAvatarData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResOneAvatarData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partlist_.MergeFrom(from._impl_.partlist_);
  if (!from._internal_skeletonresuuid().empty()) {
    _this->_internal_set_skeletonresuuid(from._internal_skeletonresuuid());
  }
  if (from._internal_defaultvisablemask1() != 0) {
    _this->_internal_set_defaultvisablemask1(from._internal_defaultvisablemask1());
  }
  if (from._internal_defaultvisablemask2() != 0) {
    _this->_internal_set_defaultvisablemask2(from._internal_defaultvisablemask2());
  }
  if (from._internal_defaultvisablemask3() != 0) {
    _this->_internal_set_defaultvisablemask3(from._internal_defaultvisablemask3());
  }
  if (from._internal_preloadallpart() != 0) {
    _this->_internal_set_preloadallpart(from._internal_preloadallpart());
  }
  if (from._internal_autocombinemesh() != 0) {
    _this->_internal_set_autocombinemesh(from._internal_autocombinemesh());
  }
  if (from._internal_defaultvisablemask4() != 0) {
    _this->_internal_set_defaultvisablemask4(from._internal_defaultvisablemask4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResOneAvatarData::CopyFrom(const UGCResOneAvatarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResOneAvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResOneAvatarData::IsInitialized() const {
  return true;
}

void UGCResOneAvatarData::InternalSwap(UGCResOneAvatarData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partlist_.InternalSwap(&other->_impl_.partlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skeletonresuuid_, lhs_arena,
      &other->_impl_.skeletonresuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResOneAvatarData, _impl_.defaultvisablemask4_)
      + sizeof(UGCResOneAvatarData::_impl_.defaultvisablemask4_)
      - PROTOBUF_FIELD_OFFSET(UGCResOneAvatarData, _impl_.defaultvisablemask1_)>(
          reinterpret_cast<char*>(&_impl_.defaultvisablemask1_),
          reinterpret_cast<char*>(&other->_impl_.defaultvisablemask1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResOneAvatarData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[29]);
}

// ===================================================================

class UGCResSkinnedMeshExtData::_Internal {
 public:
};

UGCResSkinnedMeshExtData::UGCResSkinnedMeshExtData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResSkinnedMeshExtData)
}
UGCResSkinnedMeshExtData::UGCResSkinnedMeshExtData(const UGCResSkinnedMeshExtData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResSkinnedMeshExtData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bonenames_){from._impl_.bonenames_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.UGCResSkinnedMeshExtData)
}

inline void UGCResSkinnedMeshExtData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bonenames_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCResSkinnedMeshExtData::~UGCResSkinnedMeshExtData() {
  // @@protoc_insertion_point(destructor:message.UGCResSkinnedMeshExtData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResSkinnedMeshExtData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bonenames_.~RepeatedPtrField();
}

void UGCResSkinnedMeshExtData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResSkinnedMeshExtData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResSkinnedMeshExtData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bonenames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResSkinnedMeshExtData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string BoneNames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bonenames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "message.UGCResSkinnedMeshExtData.BoneNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResSkinnedMeshExtData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResSkinnedMeshExtData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string BoneNames = 1;
  for (int i = 0, n = this->_internal_bonenames_size(); i < n; i++) {
    const auto& s = this->_internal_bonenames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResSkinnedMeshExtData.BoneNames");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResSkinnedMeshExtData)
  return target;
}

size_t UGCResSkinnedMeshExtData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResSkinnedMeshExtData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string BoneNames = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bonenames_.size());
  for (int i = 0, n = _impl_.bonenames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.bonenames_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResSkinnedMeshExtData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResSkinnedMeshExtData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResSkinnedMeshExtData::GetClassData() const { return &_class_data_; }


void UGCResSkinnedMeshExtData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResSkinnedMeshExtData*>(&to_msg);
  auto& from = static_cast<const UGCResSkinnedMeshExtData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResSkinnedMeshExtData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bonenames_.MergeFrom(from._impl_.bonenames_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResSkinnedMeshExtData::CopyFrom(const UGCResSkinnedMeshExtData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResSkinnedMeshExtData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResSkinnedMeshExtData::IsInitialized() const {
  return true;
}

void UGCResSkinnedMeshExtData::InternalSwap(UGCResSkinnedMeshExtData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bonenames_.InternalSwap(&other->_impl_.bonenames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResSkinnedMeshExtData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[30]);
}

// ===================================================================

class UGCResAnimKeyFrameFloat::_Internal {
 public:
};

UGCResAnimKeyFrameFloat::UGCResAnimKeyFrameFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResAnimKeyFrameFloat)
}
UGCResAnimKeyFrameFloat::UGCResAnimKeyFrameFloat(const UGCResAnimKeyFrameFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResAnimKeyFrameFloat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.weightedmode_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.inslope_){}
    , decltype(_impl_.outslope_){}
    , decltype(_impl_.inweight_){}
    , decltype(_impl_.outweight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.outweight_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.outweight_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResAnimKeyFrameFloat)
}

inline void UGCResAnimKeyFrameFloat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){0}
    , decltype(_impl_.weightedmode_){0}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.inslope_){0}
    , decltype(_impl_.outslope_){0}
    , decltype(_impl_.inweight_){0}
    , decltype(_impl_.outweight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UGCResAnimKeyFrameFloat::~UGCResAnimKeyFrameFloat() {
  // @@protoc_insertion_point(destructor:message.UGCResAnimKeyFrameFloat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResAnimKeyFrameFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UGCResAnimKeyFrameFloat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResAnimKeyFrameFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResAnimKeyFrameFloat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.outweight_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.outweight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResAnimKeyFrameFloat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float Time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 WeightedMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.weightedmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float Value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float InSlope = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.inslope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float OutSlope = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.outslope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float InWeight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.inweight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float OutWeight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.outweight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResAnimKeyFrameFloat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResAnimKeyFrameFloat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float Time = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_time(), target);
  }

  // int32 WeightedMode = 2;
  if (this->_internal_weightedmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_weightedmode(), target);
  }

  // float Value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  // float InSlope = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inslope = this->_internal_inslope();
  uint32_t raw_inslope;
  memcpy(&raw_inslope, &tmp_inslope, sizeof(tmp_inslope));
  if (raw_inslope != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_inslope(), target);
  }

  // float OutSlope = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_outslope = this->_internal_outslope();
  uint32_t raw_outslope;
  memcpy(&raw_outslope, &tmp_outslope, sizeof(tmp_outslope));
  if (raw_outslope != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_outslope(), target);
  }

  // float InWeight = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inweight = this->_internal_inweight();
  uint32_t raw_inweight;
  memcpy(&raw_inweight, &tmp_inweight, sizeof(tmp_inweight));
  if (raw_inweight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_inweight(), target);
  }

  // float OutWeight = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_outweight = this->_internal_outweight();
  uint32_t raw_outweight;
  memcpy(&raw_outweight, &tmp_outweight, sizeof(tmp_outweight));
  if (raw_outweight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_outweight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResAnimKeyFrameFloat)
  return target;
}

size_t UGCResAnimKeyFrameFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResAnimKeyFrameFloat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float Time = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = this->_internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 4;
  }

  // int32 WeightedMode = 2;
  if (this->_internal_weightedmode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weightedmode());
  }

  // float Value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  // float InSlope = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inslope = this->_internal_inslope();
  uint32_t raw_inslope;
  memcpy(&raw_inslope, &tmp_inslope, sizeof(tmp_inslope));
  if (raw_inslope != 0) {
    total_size += 1 + 4;
  }

  // float OutSlope = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_outslope = this->_internal_outslope();
  uint32_t raw_outslope;
  memcpy(&raw_outslope, &tmp_outslope, sizeof(tmp_outslope));
  if (raw_outslope != 0) {
    total_size += 1 + 4;
  }

  // float InWeight = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inweight = this->_internal_inweight();
  uint32_t raw_inweight;
  memcpy(&raw_inweight, &tmp_inweight, sizeof(tmp_inweight));
  if (raw_inweight != 0) {
    total_size += 1 + 4;
  }

  // float OutWeight = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_outweight = this->_internal_outweight();
  uint32_t raw_outweight;
  memcpy(&raw_outweight, &tmp_outweight, sizeof(tmp_outweight));
  if (raw_outweight != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResAnimKeyFrameFloat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResAnimKeyFrameFloat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResAnimKeyFrameFloat::GetClassData() const { return &_class_data_; }


void UGCResAnimKeyFrameFloat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResAnimKeyFrameFloat*>(&to_msg);
  auto& from = static_cast<const UGCResAnimKeyFrameFloat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResAnimKeyFrameFloat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_time = from._internal_time();
  uint32_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_weightedmode() != 0) {
    _this->_internal_set_weightedmode(from._internal_weightedmode());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inslope = from._internal_inslope();
  uint32_t raw_inslope;
  memcpy(&raw_inslope, &tmp_inslope, sizeof(tmp_inslope));
  if (raw_inslope != 0) {
    _this->_internal_set_inslope(from._internal_inslope());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_outslope = from._internal_outslope();
  uint32_t raw_outslope;
  memcpy(&raw_outslope, &tmp_outslope, sizeof(tmp_outslope));
  if (raw_outslope != 0) {
    _this->_internal_set_outslope(from._internal_outslope());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_inweight = from._internal_inweight();
  uint32_t raw_inweight;
  memcpy(&raw_inweight, &tmp_inweight, sizeof(tmp_inweight));
  if (raw_inweight != 0) {
    _this->_internal_set_inweight(from._internal_inweight());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_outweight = from._internal_outweight();
  uint32_t raw_outweight;
  memcpy(&raw_outweight, &tmp_outweight, sizeof(tmp_outweight));
  if (raw_outweight != 0) {
    _this->_internal_set_outweight(from._internal_outweight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResAnimKeyFrameFloat::CopyFrom(const UGCResAnimKeyFrameFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResAnimKeyFrameFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResAnimKeyFrameFloat::IsInitialized() const {
  return true;
}

void UGCResAnimKeyFrameFloat::InternalSwap(UGCResAnimKeyFrameFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResAnimKeyFrameFloat, _impl_.outweight_)
      + sizeof(UGCResAnimKeyFrameFloat::_impl_.outweight_)
      - PROTOBUF_FIELD_OFFSET(UGCResAnimKeyFrameFloat, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResAnimKeyFrameFloat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[31]);
}

// ===================================================================

class FBXAnimationCurve::_Internal {
 public:
};

FBXAnimationCurve::FBXAnimationCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.FBXAnimationCurve)
}
FBXAnimationCurve::FBXAnimationCurve(const FBXAnimationCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FBXAnimationCurve* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keyframes_){from._impl_.keyframes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.FBXAnimationCurve)
}

inline void FBXAnimationCurve::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keyframes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FBXAnimationCurve::~FBXAnimationCurve() {
  // @@protoc_insertion_point(destructor:message.FBXAnimationCurve)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FBXAnimationCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keyframes_.~RepeatedPtrField();
}

void FBXAnimationCurve::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FBXAnimationCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:message.FBXAnimationCurve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keyframes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FBXAnimationCurve::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.UGCResAnimKeyFrameFloat Keyframes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keyframes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FBXAnimationCurve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.FBXAnimationCurve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.UGCResAnimKeyFrameFloat Keyframes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keyframes_size()); i < n; i++) {
    const auto& repfield = this->_internal_keyframes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.FBXAnimationCurve)
  return target;
}

size_t FBXAnimationCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.FBXAnimationCurve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResAnimKeyFrameFloat Keyframes = 1;
  total_size += 1UL * this->_internal_keyframes_size();
  for (const auto& msg : this->_impl_.keyframes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FBXAnimationCurve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FBXAnimationCurve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FBXAnimationCurve::GetClassData() const { return &_class_data_; }


void FBXAnimationCurve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FBXAnimationCurve*>(&to_msg);
  auto& from = static_cast<const FBXAnimationCurve&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.FBXAnimationCurve)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keyframes_.MergeFrom(from._impl_.keyframes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FBXAnimationCurve::CopyFrom(const FBXAnimationCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.FBXAnimationCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FBXAnimationCurve::IsInitialized() const {
  return true;
}

void FBXAnimationCurve::InternalSwap(FBXAnimationCurve* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keyframes_.InternalSwap(&other->_impl_.keyframes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FBXAnimationCurve::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[32]);
}

// ===================================================================

class UGCResAnimFloatCurves::_Internal {
 public:
};

UGCResAnimFloatCurves::UGCResAnimFloatCurves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResAnimFloatCurves)
}
UGCResAnimFloatCurves::UGCResAnimFloatCurves(const UGCResAnimFloatCurves& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResAnimFloatCurves* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.curve_){from._impl_.curve_}
    , decltype(_impl_.classname_){}
    , decltype(_impl_.propertyname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.classname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.classname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_classname().empty()) {
    _this->_impl_.classname_.Set(from._internal_classname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.propertyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.propertyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_propertyname().empty()) {
    _this->_impl_.propertyname_.Set(from._internal_propertyname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCResAnimFloatCurves)
}

inline void UGCResAnimFloatCurves::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.curve_){arena}
    , decltype(_impl_.classname_){}
    , decltype(_impl_.propertyname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.classname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.classname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.propertyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.propertyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResAnimFloatCurves::~UGCResAnimFloatCurves() {
  // @@protoc_insertion_point(destructor:message.UGCResAnimFloatCurves)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResAnimFloatCurves::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.curve_.~RepeatedPtrField();
  _impl_.classname_.Destroy();
  _impl_.propertyname_.Destroy();
}

void UGCResAnimFloatCurves::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResAnimFloatCurves::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResAnimFloatCurves)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.curve_.Clear();
  _impl_.classname_.ClearToEmpty();
  _impl_.propertyname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResAnimFloatCurves::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.FBXAnimationCurve Curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_curve(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string ClassName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_classname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAnimFloatCurves.ClassName"));
        } else
          goto handle_unusual;
        continue;
      // string PropertyName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_propertyname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAnimFloatCurves.PropertyName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResAnimFloatCurves::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResAnimFloatCurves)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.FBXAnimationCurve Curve = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_curve_size()); i < n; i++) {
    const auto& repfield = this->_internal_curve(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string ClassName = 2;
  if (!this->_internal_classname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classname().data(), static_cast<int>(this->_internal_classname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAnimFloatCurves.ClassName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_classname(), target);
  }

  // string PropertyName = 3;
  if (!this->_internal_propertyname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_propertyname().data(), static_cast<int>(this->_internal_propertyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAnimFloatCurves.PropertyName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_propertyname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResAnimFloatCurves)
  return target;
}

size_t UGCResAnimFloatCurves::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResAnimFloatCurves)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.FBXAnimationCurve Curve = 1;
  total_size += 1UL * this->_internal_curve_size();
  for (const auto& msg : this->_impl_.curve_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ClassName = 2;
  if (!this->_internal_classname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classname());
  }

  // string PropertyName = 3;
  if (!this->_internal_propertyname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propertyname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResAnimFloatCurves::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResAnimFloatCurves::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResAnimFloatCurves::GetClassData() const { return &_class_data_; }


void UGCResAnimFloatCurves::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResAnimFloatCurves*>(&to_msg);
  auto& from = static_cast<const UGCResAnimFloatCurves&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResAnimFloatCurves)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.curve_.MergeFrom(from._impl_.curve_);
  if (!from._internal_classname().empty()) {
    _this->_internal_set_classname(from._internal_classname());
  }
  if (!from._internal_propertyname().empty()) {
    _this->_internal_set_propertyname(from._internal_propertyname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResAnimFloatCurves::CopyFrom(const UGCResAnimFloatCurves& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResAnimFloatCurves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResAnimFloatCurves::IsInitialized() const {
  return true;
}

void UGCResAnimFloatCurves::InternalSwap(UGCResAnimFloatCurves* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.curve_.InternalSwap(&other->_impl_.curve_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.classname_, lhs_arena,
      &other->_impl_.classname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.propertyname_, lhs_arena,
      &other->_impl_.propertyname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResAnimFloatCurves::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[33]);
}

// ===================================================================

class UGCResAnimNodeCurves::_Internal {
 public:
};

UGCResAnimNodeCurves::UGCResAnimNodeCurves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResAnimNodeCurves)
}
UGCResAnimNodeCurves::UGCResAnimNodeCurves(const UGCResAnimNodeCurves& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResAnimNodeCurves* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rotation_){from._impl_.rotation_}
    , decltype(_impl_.translation_){from._impl_.translation_}
    , decltype(_impl_.scale_){from._impl_.scale_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:message.UGCResAnimNodeCurves)
}

inline void UGCResAnimNodeCurves::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rotation_){arena}
    , decltype(_impl_.translation_){arena}
    , decltype(_impl_.scale_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResAnimNodeCurves::~UGCResAnimNodeCurves() {
  // @@protoc_insertion_point(destructor:message.UGCResAnimNodeCurves)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResAnimNodeCurves::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rotation_.~RepeatedPtrField();
  _impl_.translation_.~RepeatedPtrField();
  _impl_.scale_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void UGCResAnimNodeCurves::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResAnimNodeCurves::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResAnimNodeCurves)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rotation_.Clear();
  _impl_.translation_.Clear();
  _impl_.scale_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResAnimNodeCurves::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAnimNodeCurves.Name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.FBXAnimationCurve Rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rotation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.FBXAnimationCurve Translation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_translation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.FBXAnimationCurve Scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scale(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResAnimNodeCurves::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResAnimNodeCurves)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAnimNodeCurves.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .message.FBXAnimationCurve Rotation = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rotation_size()); i < n; i++) {
    const auto& repfield = this->_internal_rotation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.FBXAnimationCurve Translation = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_translation_size()); i < n; i++) {
    const auto& repfield = this->_internal_translation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.FBXAnimationCurve Scale = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scale_size()); i < n; i++) {
    const auto& repfield = this->_internal_scale(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResAnimNodeCurves)
  return target;
}

size_t UGCResAnimNodeCurves::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResAnimNodeCurves)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.FBXAnimationCurve Rotation = 2;
  total_size += 1UL * this->_internal_rotation_size();
  for (const auto& msg : this->_impl_.rotation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.FBXAnimationCurve Translation = 3;
  total_size += 1UL * this->_internal_translation_size();
  for (const auto& msg : this->_impl_.translation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.FBXAnimationCurve Scale = 4;
  total_size += 1UL * this->_internal_scale_size();
  for (const auto& msg : this->_impl_.scale_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResAnimNodeCurves::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResAnimNodeCurves::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResAnimNodeCurves::GetClassData() const { return &_class_data_; }


void UGCResAnimNodeCurves::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResAnimNodeCurves*>(&to_msg);
  auto& from = static_cast<const UGCResAnimNodeCurves&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResAnimNodeCurves)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rotation_.MergeFrom(from._impl_.rotation_);
  _this->_impl_.translation_.MergeFrom(from._impl_.translation_);
  _this->_impl_.scale_.MergeFrom(from._impl_.scale_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResAnimNodeCurves::CopyFrom(const UGCResAnimNodeCurves& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResAnimNodeCurves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResAnimNodeCurves::IsInitialized() const {
  return true;
}

void UGCResAnimNodeCurves::InternalSwap(UGCResAnimNodeCurves* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rotation_.InternalSwap(&other->_impl_.rotation_);
  _impl_.translation_.InternalSwap(&other->_impl_.translation_);
  _impl_.scale_.InternalSwap(&other->_impl_.scale_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResAnimNodeCurves::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[34]);
}

// ===================================================================

class UGCResAnimClipData::_Internal {
 public:
};

UGCResAnimClipData::UGCResAnimClipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.UGCResAnimClipData)
}
UGCResAnimClipData::UGCResAnimClipData(const UGCResAnimClipData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UGCResAnimClipData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.floatanim_){from._impl_.floatanim_}
    , decltype(_impl_.nodeanim_){from._impl_.nodeanim_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.bakestart_){}
    , decltype(_impl_.bakestop_){}
    , decltype(_impl_.samplerate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bakestart_, &from._impl_.bakestart_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.samplerate_) -
    reinterpret_cast<char*>(&_impl_.bakestart_)) + sizeof(_impl_.samplerate_));
  // @@protoc_insertion_point(copy_constructor:message.UGCResAnimClipData)
}

inline void UGCResAnimClipData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.floatanim_){arena}
    , decltype(_impl_.nodeanim_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.bakestart_){0}
    , decltype(_impl_.bakestop_){0}
    , decltype(_impl_.samplerate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UGCResAnimClipData::~UGCResAnimClipData() {
  // @@protoc_insertion_point(destructor:message.UGCResAnimClipData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UGCResAnimClipData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.floatanim_.~RepeatedPtrField();
  _impl_.nodeanim_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void UGCResAnimClipData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UGCResAnimClipData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.UGCResAnimClipData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.floatanim_.Clear();
  _impl_.nodeanim_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.bakestart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.samplerate_) -
      reinterpret_cast<char*>(&_impl_.bakestart_)) + sizeof(_impl_.samplerate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UGCResAnimClipData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.UGCResAnimClipData.Name"));
        } else
          goto handle_unusual;
        continue;
      // double BakeStart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.bakestart_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double BakeStop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.bakestop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float SampleRate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.samplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResAnimFloatCurves FloatAnim = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_floatanim(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.UGCResAnimNodeCurves NodeAnim = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodeanim(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UGCResAnimClipData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.UGCResAnimClipData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.UGCResAnimClipData.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double BakeStart = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bakestart = this->_internal_bakestart();
  uint64_t raw_bakestart;
  memcpy(&raw_bakestart, &tmp_bakestart, sizeof(tmp_bakestart));
  if (raw_bakestart != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_bakestart(), target);
  }

  // double BakeStop = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bakestop = this->_internal_bakestop();
  uint64_t raw_bakestop;
  memcpy(&raw_bakestop, &tmp_bakestop, sizeof(tmp_bakestop));
  if (raw_bakestop != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_bakestop(), target);
  }

  // float SampleRate = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplerate = this->_internal_samplerate();
  uint32_t raw_samplerate;
  memcpy(&raw_samplerate, &tmp_samplerate, sizeof(tmp_samplerate));
  if (raw_samplerate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_samplerate(), target);
  }

  // repeated .message.UGCResAnimFloatCurves FloatAnim = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_floatanim_size()); i < n; i++) {
    const auto& repfield = this->_internal_floatanim(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .message.UGCResAnimNodeCurves NodeAnim = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodeanim_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodeanim(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.UGCResAnimClipData)
  return target;
}

size_t UGCResAnimClipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.UGCResAnimClipData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.UGCResAnimFloatCurves FloatAnim = 5;
  total_size += 1UL * this->_internal_floatanim_size();
  for (const auto& msg : this->_impl_.floatanim_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .message.UGCResAnimNodeCurves NodeAnim = 6;
  total_size += 1UL * this->_internal_nodeanim_size();
  for (const auto& msg : this->_impl_.nodeanim_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double BakeStart = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bakestart = this->_internal_bakestart();
  uint64_t raw_bakestart;
  memcpy(&raw_bakestart, &tmp_bakestart, sizeof(tmp_bakestart));
  if (raw_bakestart != 0) {
    total_size += 1 + 8;
  }

  // double BakeStop = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bakestop = this->_internal_bakestop();
  uint64_t raw_bakestop;
  memcpy(&raw_bakestop, &tmp_bakestop, sizeof(tmp_bakestop));
  if (raw_bakestop != 0) {
    total_size += 1 + 8;
  }

  // float SampleRate = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplerate = this->_internal_samplerate();
  uint32_t raw_samplerate;
  memcpy(&raw_samplerate, &tmp_samplerate, sizeof(tmp_samplerate));
  if (raw_samplerate != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UGCResAnimClipData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UGCResAnimClipData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UGCResAnimClipData::GetClassData() const { return &_class_data_; }


void UGCResAnimClipData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UGCResAnimClipData*>(&to_msg);
  auto& from = static_cast<const UGCResAnimClipData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.UGCResAnimClipData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.floatanim_.MergeFrom(from._impl_.floatanim_);
  _this->_impl_.nodeanim_.MergeFrom(from._impl_.nodeanim_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bakestart = from._internal_bakestart();
  uint64_t raw_bakestart;
  memcpy(&raw_bakestart, &tmp_bakestart, sizeof(tmp_bakestart));
  if (raw_bakestart != 0) {
    _this->_internal_set_bakestart(from._internal_bakestart());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bakestop = from._internal_bakestop();
  uint64_t raw_bakestop;
  memcpy(&raw_bakestop, &tmp_bakestop, sizeof(tmp_bakestop));
  if (raw_bakestop != 0) {
    _this->_internal_set_bakestop(from._internal_bakestop());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_samplerate = from._internal_samplerate();
  uint32_t raw_samplerate;
  memcpy(&raw_samplerate, &tmp_samplerate, sizeof(tmp_samplerate));
  if (raw_samplerate != 0) {
    _this->_internal_set_samplerate(from._internal_samplerate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UGCResAnimClipData::CopyFrom(const UGCResAnimClipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.UGCResAnimClipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCResAnimClipData::IsInitialized() const {
  return true;
}

void UGCResAnimClipData::InternalSwap(UGCResAnimClipData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.floatanim_.InternalSwap(&other->_impl_.floatanim_);
  _impl_.nodeanim_.InternalSwap(&other->_impl_.nodeanim_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UGCResAnimClipData, _impl_.samplerate_)
      + sizeof(UGCResAnimClipData::_impl_.samplerate_)
      - PROTOBUF_FIELD_OFFSET(UGCResAnimClipData, _impl_.bakestart_)>(
          reinterpret_cast<char*>(&_impl_.bakestart_),
          reinterpret_cast<char*>(&other->_impl_.bakestart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UGCResAnimClipData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoBuffUGCResource_2eproto_getter, &descriptor_table_ProtoBuffUGCResource_2eproto_once,
      file_level_metadata_ProtoBuffUGCResource_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::UGCColliderMeshData*
Arena::CreateMaybeMessage< ::message::UGCColliderMeshData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCColliderMeshData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCColliderInfoData*
Arena::CreateMaybeMessage< ::message::UGCColliderInfoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCColliderInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCGameObjectData*
Arena::CreateMaybeMessage< ::message::UGCGameObjectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCGameObjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourceColliderData*
Arena::CreateMaybeMessage< ::message::UGCResourceColliderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourceColliderData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::ProtoBuffVector4*
Arena::CreateMaybeMessage< ::message::ProtoBuffVector4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::ProtoBuffVector4 >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCMaterialParamData*
Arena::CreateMaybeMessage< ::message::UGCMaterialParamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCMaterialParamData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCMaterialData*
Arena::CreateMaybeMessage< ::message::UGCMaterialData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCMaterialData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourceUIAtlasData*
Arena::CreateMaybeMessage< ::message::UGCResourceUIAtlasData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourceUIAtlasData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourceUISpriteData*
Arena::CreateMaybeMessage< ::message::UGCResourceUISpriteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourceUISpriteData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourcePackageItem*
Arena::CreateMaybeMessage< ::message::UGCResourcePackageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourcePackageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCAssetBundleData*
Arena::CreateMaybeMessage< ::message::UGCAssetBundleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCAssetBundleData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCAllUnityBundle*
Arena::CreateMaybeMessage< ::message::UGCAllUnityBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCAllUnityBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourcePackageData*
Arena::CreateMaybeMessage< ::message::UGCResourcePackageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourcePackageData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourcePackageRefInfo*
Arena::CreateMaybeMessage< ::message::UGCResourcePackageRefInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourcePackageRefInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourcePackageDownloadDesc*
Arena::CreateMaybeMessage< ::message::UGCResourcePackageDownloadDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourcePackageDownloadDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCGameDataResourcePackageInfo*
Arena::CreateMaybeMessage< ::message::UGCGameDataResourcePackageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCGameDataResourcePackageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResourceFileDownloadDesc*
Arena::CreateMaybeMessage< ::message::UGCResourceFileDownloadDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResourceFileDownloadDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCPackageDownloadDesc*
Arena::CreateMaybeMessage< ::message::UGCPackageDownloadDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCPackageDownloadDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCGameDataDownloadDesc*
Arena::CreateMaybeMessage< ::message::UGCGameDataDownloadDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCGameDataDownloadDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCSVRowData*
Arena::CreateMaybeMessage< ::message::UGCCSVRowData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCSVRowData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCCSVData*
Arena::CreateMaybeMessage< ::message::UGCCSVData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCCSVData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResFFBuildin*
Arena::CreateMaybeMessage< ::message::UGCResFFBuildin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResFFBuildin >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResAnimationStateClipData*
Arena::CreateMaybeMessage< ::message::UGCResAnimationStateClipData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResAnimationStateClipData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResAnimationStateData*
Arena::CreateMaybeMessage< ::message::UGCResAnimationStateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResAnimationStateData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResAnimationControllerData*
Arena::CreateMaybeMessage< ::message::UGCResAnimationControllerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResAnimationControllerData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResBoneNodeCapsuleData*
Arena::CreateMaybeMessage< ::message::UGCResBoneNodeCapsuleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResBoneNodeCapsuleData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResBoneNodeData*
Arena::CreateMaybeMessage< ::message::UGCResBoneNodeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResBoneNodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResSkeletonData*
Arena::CreateMaybeMessage< ::message::UGCResSkeletonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResSkeletonData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResAvatarOnePartData*
Arena::CreateMaybeMessage< ::message::UGCResAvatarOnePartData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResAvatarOnePartData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResOneAvatarData*
Arena::CreateMaybeMessage< ::message::UGCResOneAvatarData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResOneAvatarData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResSkinnedMeshExtData*
Arena::CreateMaybeMessage< ::message::UGCResSkinnedMeshExtData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResSkinnedMeshExtData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResAnimKeyFrameFloat*
Arena::CreateMaybeMessage< ::message::UGCResAnimKeyFrameFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResAnimKeyFrameFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::message::FBXAnimationCurve*
Arena::CreateMaybeMessage< ::message::FBXAnimationCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::FBXAnimationCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResAnimFloatCurves*
Arena::CreateMaybeMessage< ::message::UGCResAnimFloatCurves >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResAnimFloatCurves >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResAnimNodeCurves*
Arena::CreateMaybeMessage< ::message::UGCResAnimNodeCurves >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResAnimNodeCurves >(arena);
}
template<> PROTOBUF_NOINLINE ::message::UGCResAnimClipData*
Arena::CreateMaybeMessage< ::message::UGCResAnimClipData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::UGCResAnimClipData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
