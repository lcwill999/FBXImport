// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuffUGCResource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtoBuffUGCResource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtoBuffUGCResource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBuffCommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtoBuffUGCResource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtoBuffUGCResource_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtoBuffUGCResource_2eproto;
namespace message {
class FBXAnimationCurve;
struct FBXAnimationCurveDefaultTypeInternal;
extern FBXAnimationCurveDefaultTypeInternal _FBXAnimationCurve_default_instance_;
class ProtoBuffVector4;
struct ProtoBuffVector4DefaultTypeInternal;
extern ProtoBuffVector4DefaultTypeInternal _ProtoBuffVector4_default_instance_;
class UGCAllUnityBundle;
struct UGCAllUnityBundleDefaultTypeInternal;
extern UGCAllUnityBundleDefaultTypeInternal _UGCAllUnityBundle_default_instance_;
class UGCAssetBundleData;
struct UGCAssetBundleDataDefaultTypeInternal;
extern UGCAssetBundleDataDefaultTypeInternal _UGCAssetBundleData_default_instance_;
class UGCCSVData;
struct UGCCSVDataDefaultTypeInternal;
extern UGCCSVDataDefaultTypeInternal _UGCCSVData_default_instance_;
class UGCCSVRowData;
struct UGCCSVRowDataDefaultTypeInternal;
extern UGCCSVRowDataDefaultTypeInternal _UGCCSVRowData_default_instance_;
class UGCColliderInfoData;
struct UGCColliderInfoDataDefaultTypeInternal;
extern UGCColliderInfoDataDefaultTypeInternal _UGCColliderInfoData_default_instance_;
class UGCColliderMeshData;
struct UGCColliderMeshDataDefaultTypeInternal;
extern UGCColliderMeshDataDefaultTypeInternal _UGCColliderMeshData_default_instance_;
class UGCGameDataDownloadDesc;
struct UGCGameDataDownloadDescDefaultTypeInternal;
extern UGCGameDataDownloadDescDefaultTypeInternal _UGCGameDataDownloadDesc_default_instance_;
class UGCGameDataResourcePackageInfo;
struct UGCGameDataResourcePackageInfoDefaultTypeInternal;
extern UGCGameDataResourcePackageInfoDefaultTypeInternal _UGCGameDataResourcePackageInfo_default_instance_;
class UGCGameObjectData;
struct UGCGameObjectDataDefaultTypeInternal;
extern UGCGameObjectDataDefaultTypeInternal _UGCGameObjectData_default_instance_;
class UGCMaterialData;
struct UGCMaterialDataDefaultTypeInternal;
extern UGCMaterialDataDefaultTypeInternal _UGCMaterialData_default_instance_;
class UGCMaterialParamData;
struct UGCMaterialParamDataDefaultTypeInternal;
extern UGCMaterialParamDataDefaultTypeInternal _UGCMaterialParamData_default_instance_;
class UGCPackageDownloadDesc;
struct UGCPackageDownloadDescDefaultTypeInternal;
extern UGCPackageDownloadDescDefaultTypeInternal _UGCPackageDownloadDesc_default_instance_;
class UGCResAnimClipData;
struct UGCResAnimClipDataDefaultTypeInternal;
extern UGCResAnimClipDataDefaultTypeInternal _UGCResAnimClipData_default_instance_;
class UGCResAnimFloatCurves;
struct UGCResAnimFloatCurvesDefaultTypeInternal;
extern UGCResAnimFloatCurvesDefaultTypeInternal _UGCResAnimFloatCurves_default_instance_;
class UGCResAnimKeyFrameFloat;
struct UGCResAnimKeyFrameFloatDefaultTypeInternal;
extern UGCResAnimKeyFrameFloatDefaultTypeInternal _UGCResAnimKeyFrameFloat_default_instance_;
class UGCResAnimNodeCurves;
struct UGCResAnimNodeCurvesDefaultTypeInternal;
extern UGCResAnimNodeCurvesDefaultTypeInternal _UGCResAnimNodeCurves_default_instance_;
class UGCResAnimationControllerData;
struct UGCResAnimationControllerDataDefaultTypeInternal;
extern UGCResAnimationControllerDataDefaultTypeInternal _UGCResAnimationControllerData_default_instance_;
class UGCResAnimationStateClipData;
struct UGCResAnimationStateClipDataDefaultTypeInternal;
extern UGCResAnimationStateClipDataDefaultTypeInternal _UGCResAnimationStateClipData_default_instance_;
class UGCResAnimationStateData;
struct UGCResAnimationStateDataDefaultTypeInternal;
extern UGCResAnimationStateDataDefaultTypeInternal _UGCResAnimationStateData_default_instance_;
class UGCResAvatarOnePartData;
struct UGCResAvatarOnePartDataDefaultTypeInternal;
extern UGCResAvatarOnePartDataDefaultTypeInternal _UGCResAvatarOnePartData_default_instance_;
class UGCResBoneNodeCapsuleData;
struct UGCResBoneNodeCapsuleDataDefaultTypeInternal;
extern UGCResBoneNodeCapsuleDataDefaultTypeInternal _UGCResBoneNodeCapsuleData_default_instance_;
class UGCResBoneNodeData;
struct UGCResBoneNodeDataDefaultTypeInternal;
extern UGCResBoneNodeDataDefaultTypeInternal _UGCResBoneNodeData_default_instance_;
class UGCResFFBuildin;
struct UGCResFFBuildinDefaultTypeInternal;
extern UGCResFFBuildinDefaultTypeInternal _UGCResFFBuildin_default_instance_;
class UGCResOneAvatarData;
struct UGCResOneAvatarDataDefaultTypeInternal;
extern UGCResOneAvatarDataDefaultTypeInternal _UGCResOneAvatarData_default_instance_;
class UGCResSkeletonData;
struct UGCResSkeletonDataDefaultTypeInternal;
extern UGCResSkeletonDataDefaultTypeInternal _UGCResSkeletonData_default_instance_;
class UGCResSkinnedMeshExtData;
struct UGCResSkinnedMeshExtDataDefaultTypeInternal;
extern UGCResSkinnedMeshExtDataDefaultTypeInternal _UGCResSkinnedMeshExtData_default_instance_;
class UGCResourceColliderData;
struct UGCResourceColliderDataDefaultTypeInternal;
extern UGCResourceColliderDataDefaultTypeInternal _UGCResourceColliderData_default_instance_;
class UGCResourceFileDownloadDesc;
struct UGCResourceFileDownloadDescDefaultTypeInternal;
extern UGCResourceFileDownloadDescDefaultTypeInternal _UGCResourceFileDownloadDesc_default_instance_;
class UGCResourcePackageData;
struct UGCResourcePackageDataDefaultTypeInternal;
extern UGCResourcePackageDataDefaultTypeInternal _UGCResourcePackageData_default_instance_;
class UGCResourcePackageDownloadDesc;
struct UGCResourcePackageDownloadDescDefaultTypeInternal;
extern UGCResourcePackageDownloadDescDefaultTypeInternal _UGCResourcePackageDownloadDesc_default_instance_;
class UGCResourcePackageItem;
struct UGCResourcePackageItemDefaultTypeInternal;
extern UGCResourcePackageItemDefaultTypeInternal _UGCResourcePackageItem_default_instance_;
class UGCResourcePackageRefInfo;
struct UGCResourcePackageRefInfoDefaultTypeInternal;
extern UGCResourcePackageRefInfoDefaultTypeInternal _UGCResourcePackageRefInfo_default_instance_;
class UGCResourceUIAtlasData;
struct UGCResourceUIAtlasDataDefaultTypeInternal;
extern UGCResourceUIAtlasDataDefaultTypeInternal _UGCResourceUIAtlasData_default_instance_;
class UGCResourceUISpriteData;
struct UGCResourceUISpriteDataDefaultTypeInternal;
extern UGCResourceUISpriteDataDefaultTypeInternal _UGCResourceUISpriteData_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::FBXAnimationCurve* Arena::CreateMaybeMessage<::message::FBXAnimationCurve>(Arena*);
template<> ::message::ProtoBuffVector4* Arena::CreateMaybeMessage<::message::ProtoBuffVector4>(Arena*);
template<> ::message::UGCAllUnityBundle* Arena::CreateMaybeMessage<::message::UGCAllUnityBundle>(Arena*);
template<> ::message::UGCAssetBundleData* Arena::CreateMaybeMessage<::message::UGCAssetBundleData>(Arena*);
template<> ::message::UGCCSVData* Arena::CreateMaybeMessage<::message::UGCCSVData>(Arena*);
template<> ::message::UGCCSVRowData* Arena::CreateMaybeMessage<::message::UGCCSVRowData>(Arena*);
template<> ::message::UGCColliderInfoData* Arena::CreateMaybeMessage<::message::UGCColliderInfoData>(Arena*);
template<> ::message::UGCColliderMeshData* Arena::CreateMaybeMessage<::message::UGCColliderMeshData>(Arena*);
template<> ::message::UGCGameDataDownloadDesc* Arena::CreateMaybeMessage<::message::UGCGameDataDownloadDesc>(Arena*);
template<> ::message::UGCGameDataResourcePackageInfo* Arena::CreateMaybeMessage<::message::UGCGameDataResourcePackageInfo>(Arena*);
template<> ::message::UGCGameObjectData* Arena::CreateMaybeMessage<::message::UGCGameObjectData>(Arena*);
template<> ::message::UGCMaterialData* Arena::CreateMaybeMessage<::message::UGCMaterialData>(Arena*);
template<> ::message::UGCMaterialParamData* Arena::CreateMaybeMessage<::message::UGCMaterialParamData>(Arena*);
template<> ::message::UGCPackageDownloadDesc* Arena::CreateMaybeMessage<::message::UGCPackageDownloadDesc>(Arena*);
template<> ::message::UGCResAnimClipData* Arena::CreateMaybeMessage<::message::UGCResAnimClipData>(Arena*);
template<> ::message::UGCResAnimFloatCurves* Arena::CreateMaybeMessage<::message::UGCResAnimFloatCurves>(Arena*);
template<> ::message::UGCResAnimKeyFrameFloat* Arena::CreateMaybeMessage<::message::UGCResAnimKeyFrameFloat>(Arena*);
template<> ::message::UGCResAnimNodeCurves* Arena::CreateMaybeMessage<::message::UGCResAnimNodeCurves>(Arena*);
template<> ::message::UGCResAnimationControllerData* Arena::CreateMaybeMessage<::message::UGCResAnimationControllerData>(Arena*);
template<> ::message::UGCResAnimationStateClipData* Arena::CreateMaybeMessage<::message::UGCResAnimationStateClipData>(Arena*);
template<> ::message::UGCResAnimationStateData* Arena::CreateMaybeMessage<::message::UGCResAnimationStateData>(Arena*);
template<> ::message::UGCResAvatarOnePartData* Arena::CreateMaybeMessage<::message::UGCResAvatarOnePartData>(Arena*);
template<> ::message::UGCResBoneNodeCapsuleData* Arena::CreateMaybeMessage<::message::UGCResBoneNodeCapsuleData>(Arena*);
template<> ::message::UGCResBoneNodeData* Arena::CreateMaybeMessage<::message::UGCResBoneNodeData>(Arena*);
template<> ::message::UGCResFFBuildin* Arena::CreateMaybeMessage<::message::UGCResFFBuildin>(Arena*);
template<> ::message::UGCResOneAvatarData* Arena::CreateMaybeMessage<::message::UGCResOneAvatarData>(Arena*);
template<> ::message::UGCResSkeletonData* Arena::CreateMaybeMessage<::message::UGCResSkeletonData>(Arena*);
template<> ::message::UGCResSkinnedMeshExtData* Arena::CreateMaybeMessage<::message::UGCResSkinnedMeshExtData>(Arena*);
template<> ::message::UGCResourceColliderData* Arena::CreateMaybeMessage<::message::UGCResourceColliderData>(Arena*);
template<> ::message::UGCResourceFileDownloadDesc* Arena::CreateMaybeMessage<::message::UGCResourceFileDownloadDesc>(Arena*);
template<> ::message::UGCResourcePackageData* Arena::CreateMaybeMessage<::message::UGCResourcePackageData>(Arena*);
template<> ::message::UGCResourcePackageDownloadDesc* Arena::CreateMaybeMessage<::message::UGCResourcePackageDownloadDesc>(Arena*);
template<> ::message::UGCResourcePackageItem* Arena::CreateMaybeMessage<::message::UGCResourcePackageItem>(Arena*);
template<> ::message::UGCResourcePackageRefInfo* Arena::CreateMaybeMessage<::message::UGCResourcePackageRefInfo>(Arena*);
template<> ::message::UGCResourceUIAtlasData* Arena::CreateMaybeMessage<::message::UGCResourceUIAtlasData>(Arena*);
template<> ::message::UGCResourceUISpriteData* Arena::CreateMaybeMessage<::message::UGCResourceUISpriteData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

enum EUGCColliderType : int {
  Box = 0,
  Sphere = 1,
  Capsule = 2,
  MeshCollider = 3,
  EUGCColliderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCColliderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCColliderType_IsValid(int value);
constexpr EUGCColliderType EUGCColliderType_MIN = Box;
constexpr EUGCColliderType EUGCColliderType_MAX = MeshCollider;
constexpr int EUGCColliderType_ARRAYSIZE = EUGCColliderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCColliderType_descriptor();
template<typename T>
inline const std::string& EUGCColliderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCColliderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCColliderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCColliderType_descriptor(), enum_t_value);
}
inline bool EUGCColliderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCColliderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCColliderType>(
    EUGCColliderType_descriptor(), name, value);
}
enum EUGCRendererDataSource : int {
  SourceMeshAndMaterial = 0,
  SourceABGameObject = 1,
  EUGCRendererDataSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCRendererDataSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCRendererDataSource_IsValid(int value);
constexpr EUGCRendererDataSource EUGCRendererDataSource_MIN = SourceMeshAndMaterial;
constexpr EUGCRendererDataSource EUGCRendererDataSource_MAX = SourceABGameObject;
constexpr int EUGCRendererDataSource_ARRAYSIZE = EUGCRendererDataSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCRendererDataSource_descriptor();
template<typename T>
inline const std::string& EUGCRendererDataSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCRendererDataSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCRendererDataSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCRendererDataSource_descriptor(), enum_t_value);
}
inline bool EUGCRendererDataSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCRendererDataSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCRendererDataSource>(
    EUGCRendererDataSource_descriptor(), name, value);
}
enum EUGCPackageShareType : int {
  Private = 0,
  Public = 1,
  EUGCPackageShareType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCPackageShareType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCPackageShareType_IsValid(int value);
constexpr EUGCPackageShareType EUGCPackageShareType_MIN = Private;
constexpr EUGCPackageShareType EUGCPackageShareType_MAX = Public;
constexpr int EUGCPackageShareType_ARRAYSIZE = EUGCPackageShareType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackageShareType_descriptor();
template<typename T>
inline const std::string& EUGCPackageShareType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCPackageShareType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCPackageShareType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCPackageShareType_descriptor(), enum_t_value);
}
inline bool EUGCPackageShareType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCPackageShareType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCPackageShareType>(
    EUGCPackageShareType_descriptor(), name, value);
}
enum EUGCPackageType : int {
  Custom = 0,
  UnityBundle = 1,
  FFBuildinResource = 2,
  WebCustom = 3,
  VirtualResource = 4,
  EUGCPackageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCPackageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCPackageType_IsValid(int value);
constexpr EUGCPackageType EUGCPackageType_MIN = Custom;
constexpr EUGCPackageType EUGCPackageType_MAX = VirtualResource;
constexpr int EUGCPackageType_ARRAYSIZE = EUGCPackageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackageType_descriptor();
template<typename T>
inline const std::string& EUGCPackageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCPackageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCPackageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCPackageType_descriptor(), enum_t_value);
}
inline bool EUGCPackageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCPackageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCPackageType>(
    EUGCPackageType_descriptor(), name, value);
}
enum EUGCPackagePlatform : int {
  Any = 0,
  Android = 1,
  IOS = 2,
  Desktop = 3,
  EUGCPackagePlatform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCPackagePlatform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCPackagePlatform_IsValid(int value);
constexpr EUGCPackagePlatform EUGCPackagePlatform_MIN = Any;
constexpr EUGCPackagePlatform EUGCPackagePlatform_MAX = Desktop;
constexpr int EUGCPackagePlatform_ARRAYSIZE = EUGCPackagePlatform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackagePlatform_descriptor();
template<typename T>
inline const std::string& EUGCPackagePlatform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCPackagePlatform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCPackagePlatform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCPackagePlatform_descriptor(), enum_t_value);
}
inline bool EUGCPackagePlatform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCPackagePlatform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCPackagePlatform>(
    EUGCPackagePlatform_descriptor(), name, value);
}
enum EUGCPackageUseableType : int {
  ClientOnly = 0,
  ServerOnly = 1,
  ClientServer = 2,
  EUGCPackageUseableType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCPackageUseableType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCPackageUseableType_IsValid(int value);
constexpr EUGCPackageUseableType EUGCPackageUseableType_MIN = ClientOnly;
constexpr EUGCPackageUseableType EUGCPackageUseableType_MAX = ClientServer;
constexpr int EUGCPackageUseableType_ARRAYSIZE = EUGCPackageUseableType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackageUseableType_descriptor();
template<typename T>
inline const std::string& EUGCPackageUseableType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCPackageUseableType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCPackageUseableType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCPackageUseableType_descriptor(), enum_t_value);
}
inline bool EUGCPackageUseableType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCPackageUseableType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCPackageUseableType>(
    EUGCPackageUseableType_descriptor(), name, value);
}
enum EUGCResourceType : int {
  GameObject = 0,
  Texture2D = 1,
  Mesh = 2,
  Material = 3,
  AnimationClip = 4,
  AudioClip = 5,
  SkeletonMesh = 6,
  Skeleton = 7,
  ColliderMesh = 10,
  Text = 11,
  GrassSystem = 12,
  CSV = 13,
  UIAtlas = 14,
  ABGameObjectRes = 15,
  Collider = 16,
  AnimationController = 17,
  EventAnimationClip = 18,
  Avatar = 19,
  Other = 29,
  Folder = 30,
  EUGCResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCResourceType_IsValid(int value);
constexpr EUGCResourceType EUGCResourceType_MIN = GameObject;
constexpr EUGCResourceType EUGCResourceType_MAX = Folder;
constexpr int EUGCResourceType_ARRAYSIZE = EUGCResourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCResourceType_descriptor();
template<typename T>
inline const std::string& EUGCResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCResourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCResourceType_descriptor(), enum_t_value);
}
inline bool EUGCResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCResourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCResourceType>(
    EUGCResourceType_descriptor(), name, value);
}
enum EUGCPackageRefVersionType : int {
  SpecialVersion = 0,
  AlwaysNewestVersion = 1,
  EUGCPackageRefVersionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCPackageRefVersionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCPackageRefVersionType_IsValid(int value);
constexpr EUGCPackageRefVersionType EUGCPackageRefVersionType_MIN = SpecialVersion;
constexpr EUGCPackageRefVersionType EUGCPackageRefVersionType_MAX = AlwaysNewestVersion;
constexpr int EUGCPackageRefVersionType_ARRAYSIZE = EUGCPackageRefVersionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCPackageRefVersionType_descriptor();
template<typename T>
inline const std::string& EUGCPackageRefVersionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCPackageRefVersionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCPackageRefVersionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCPackageRefVersionType_descriptor(), enum_t_value);
}
inline bool EUGCPackageRefVersionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCPackageRefVersionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCPackageRefVersionType>(
    EUGCPackageRefVersionType_descriptor(), name, value);
}
enum EUGCFilePlatformRequire : int {
  EFPRSkip = 0,
  EFPRClientAndroid = 1,
  EFPRClientIOS = 2,
  EFPRClientDesktop = 4,
  EFPRServer = 8,
  EUGCFilePlatformRequire_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EUGCFilePlatformRequire_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EUGCFilePlatformRequire_IsValid(int value);
constexpr EUGCFilePlatformRequire EUGCFilePlatformRequire_MIN = EFPRSkip;
constexpr EUGCFilePlatformRequire EUGCFilePlatformRequire_MAX = EFPRServer;
constexpr int EUGCFilePlatformRequire_ARRAYSIZE = EUGCFilePlatformRequire_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EUGCFilePlatformRequire_descriptor();
template<typename T>
inline const std::string& EUGCFilePlatformRequire_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EUGCFilePlatformRequire>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EUGCFilePlatformRequire_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EUGCFilePlatformRequire_descriptor(), enum_t_value);
}
inline bool EUGCFilePlatformRequire_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EUGCFilePlatformRequire* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EUGCFilePlatformRequire>(
    EUGCFilePlatformRequire_descriptor(), name, value);
}
// ===================================================================

class UGCColliderMeshData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCColliderMeshData) */ {
 public:
  inline UGCColliderMeshData() : UGCColliderMeshData(nullptr) {}
  ~UGCColliderMeshData() override;
  explicit PROTOBUF_CONSTEXPR UGCColliderMeshData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCColliderMeshData(const UGCColliderMeshData& from);
  UGCColliderMeshData(UGCColliderMeshData&& from) noexcept
    : UGCColliderMeshData() {
    *this = ::std::move(from);
  }

  inline UGCColliderMeshData& operator=(const UGCColliderMeshData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCColliderMeshData& operator=(UGCColliderMeshData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCColliderMeshData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCColliderMeshData* internal_default_instance() {
    return reinterpret_cast<const UGCColliderMeshData*>(
               &_UGCColliderMeshData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UGCColliderMeshData& a, UGCColliderMeshData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCColliderMeshData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCColliderMeshData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCColliderMeshData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCColliderMeshData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCColliderMeshData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCColliderMeshData& from) {
    UGCColliderMeshData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCColliderMeshData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCColliderMeshData";
  }
  protected:
  explicit UGCColliderMeshData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexsFieldNumber = 1,
    kIndicesFieldNumber = 2,
  };
  // repeated float Vertexs = 1;
  int vertexs_size() const;
  private:
  int _internal_vertexs_size() const;
  public:
  void clear_vertexs();
  private:
  float _internal_vertexs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vertexs() const;
  void _internal_add_vertexs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vertexs();
  public:
  float vertexs(int index) const;
  void set_vertexs(int index, float value);
  void add_vertexs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vertexs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vertexs();

  // repeated int32 Indices = 2;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  int32_t _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_indices() const;
  void _internal_add_indices(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_indices();
  public:
  int32_t indices(int index) const;
  void set_indices(int index, int32_t value);
  void add_indices(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_indices();

  // @@protoc_insertion_point(class_scope:message.UGCColliderMeshData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vertexs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > indices_;
    mutable std::atomic<int> _indices_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCColliderInfoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCColliderInfoData) */ {
 public:
  inline UGCColliderInfoData() : UGCColliderInfoData(nullptr) {}
  ~UGCColliderInfoData() override;
  explicit PROTOBUF_CONSTEXPR UGCColliderInfoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCColliderInfoData(const UGCColliderInfoData& from);
  UGCColliderInfoData(UGCColliderInfoData&& from) noexcept
    : UGCColliderInfoData() {
    *this = ::std::move(from);
  }

  inline UGCColliderInfoData& operator=(const UGCColliderInfoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCColliderInfoData& operator=(UGCColliderInfoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCColliderInfoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCColliderInfoData* internal_default_instance() {
    return reinterpret_cast<const UGCColliderInfoData*>(
               &_UGCColliderInfoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UGCColliderInfoData& a, UGCColliderInfoData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCColliderInfoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCColliderInfoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCColliderInfoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCColliderInfoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCColliderInfoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCColliderInfoData& from) {
    UGCColliderInfoData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCColliderInfoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCColliderInfoData";
  }
  protected:
  explicit UGCColliderInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshColliderUUIDFieldNumber = 7,
    kOffsetFieldNumber = 2,
    kScaleFieldNumber = 3,
    kRotationFieldNumber = 4,
    kColliderTypeFieldNumber = 1,
    kIsTriggerFieldNumber = 5,
    kIsConvexIfMeshFieldNumber = 6,
  };
  // string MeshColliderUUID = 7;
  void clear_meshcollideruuid();
  const std::string& meshcollideruuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meshcollideruuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meshcollideruuid();
  PROTOBUF_NODISCARD std::string* release_meshcollideruuid();
  void set_allocated_meshcollideruuid(std::string* meshcollideruuid);
  private:
  const std::string& _internal_meshcollideruuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meshcollideruuid(const std::string& value);
  std::string* _internal_mutable_meshcollideruuid();
  public:

  // .message.ProtoBuffVector3 Offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::message::ProtoBuffVector3& offset() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_offset();
  ::message::ProtoBuffVector3* mutable_offset();
  void set_allocated_offset(::message::ProtoBuffVector3* offset);
  private:
  const ::message::ProtoBuffVector3& _internal_offset() const;
  ::message::ProtoBuffVector3* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::message::ProtoBuffVector3* offset);
  ::message::ProtoBuffVector3* unsafe_arena_release_offset();

  // .message.ProtoBuffVector3 Scale = 3;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::message::ProtoBuffVector3& scale() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_scale();
  ::message::ProtoBuffVector3* mutable_scale();
  void set_allocated_scale(::message::ProtoBuffVector3* scale);
  private:
  const ::message::ProtoBuffVector3& _internal_scale() const;
  ::message::ProtoBuffVector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::message::ProtoBuffVector3* scale);
  ::message::ProtoBuffVector3* unsafe_arena_release_scale();

  // .message.ProtoBuffQuaternion Rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::message::ProtoBuffQuaternion& rotation() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffQuaternion* release_rotation();
  ::message::ProtoBuffQuaternion* mutable_rotation();
  void set_allocated_rotation(::message::ProtoBuffQuaternion* rotation);
  private:
  const ::message::ProtoBuffQuaternion& _internal_rotation() const;
  ::message::ProtoBuffQuaternion* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::message::ProtoBuffQuaternion* rotation);
  ::message::ProtoBuffQuaternion* unsafe_arena_release_rotation();

  // .message.EUGCColliderType ColliderType = 1;
  void clear_collidertype();
  ::message::EUGCColliderType collidertype() const;
  void set_collidertype(::message::EUGCColliderType value);
  private:
  ::message::EUGCColliderType _internal_collidertype() const;
  void _internal_set_collidertype(::message::EUGCColliderType value);
  public:

  // bool IsTrigger = 5;
  void clear_istrigger();
  bool istrigger() const;
  void set_istrigger(bool value);
  private:
  bool _internal_istrigger() const;
  void _internal_set_istrigger(bool value);
  public:

  // bool IsConvexIfMesh = 6;
  void clear_isconvexifmesh();
  bool isconvexifmesh() const;
  void set_isconvexifmesh(bool value);
  private:
  bool _internal_isconvexifmesh() const;
  void _internal_set_isconvexifmesh(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCColliderInfoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meshcollideruuid_;
    ::message::ProtoBuffVector3* offset_;
    ::message::ProtoBuffVector3* scale_;
    ::message::ProtoBuffQuaternion* rotation_;
    int collidertype_;
    bool istrigger_;
    bool isconvexifmesh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCGameObjectData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCGameObjectData) */ {
 public:
  inline UGCGameObjectData() : UGCGameObjectData(nullptr) {}
  ~UGCGameObjectData() override;
  explicit PROTOBUF_CONSTEXPR UGCGameObjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCGameObjectData(const UGCGameObjectData& from);
  UGCGameObjectData(UGCGameObjectData&& from) noexcept
    : UGCGameObjectData() {
    *this = ::std::move(from);
  }

  inline UGCGameObjectData& operator=(const UGCGameObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCGameObjectData& operator=(UGCGameObjectData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCGameObjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCGameObjectData* internal_default_instance() {
    return reinterpret_cast<const UGCGameObjectData*>(
               &_UGCGameObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UGCGameObjectData& a, UGCGameObjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCGameObjectData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCGameObjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCGameObjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCGameObjectData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCGameObjectData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCGameObjectData& from) {
    UGCGameObjectData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCGameObjectData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCGameObjectData";
  }
  protected:
  explicit UGCGameObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUGCMaterialUUIDListFieldNumber = 2,
    kColliderListFieldNumber = 3,
    kEngineMeshUUIDFieldNumber = 1,
    kABGameObjectResUUIDFieldNumber = 5,
    kRendererDataSourceFieldNumber = 4,
    kDisableABResCollisionFieldNumber = 6,
    kIsSkinnedMeshFieldNumber = 7,
  };
  // repeated string UGCMaterialUUIDList = 2;
  int ugcmaterialuuidlist_size() const;
  private:
  int _internal_ugcmaterialuuidlist_size() const;
  public:
  void clear_ugcmaterialuuidlist();
  const std::string& ugcmaterialuuidlist(int index) const;
  std::string* mutable_ugcmaterialuuidlist(int index);
  void set_ugcmaterialuuidlist(int index, const std::string& value);
  void set_ugcmaterialuuidlist(int index, std::string&& value);
  void set_ugcmaterialuuidlist(int index, const char* value);
  void set_ugcmaterialuuidlist(int index, const char* value, size_t size);
  std::string* add_ugcmaterialuuidlist();
  void add_ugcmaterialuuidlist(const std::string& value);
  void add_ugcmaterialuuidlist(std::string&& value);
  void add_ugcmaterialuuidlist(const char* value);
  void add_ugcmaterialuuidlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ugcmaterialuuidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ugcmaterialuuidlist();
  private:
  const std::string& _internal_ugcmaterialuuidlist(int index) const;
  std::string* _internal_add_ugcmaterialuuidlist();
  public:

  // repeated .message.UGCColliderInfoData ColliderList = 3;
  int colliderlist_size() const;
  private:
  int _internal_colliderlist_size() const;
  public:
  void clear_colliderlist();
  ::message::UGCColliderInfoData* mutable_colliderlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData >*
      mutable_colliderlist();
  private:
  const ::message::UGCColliderInfoData& _internal_colliderlist(int index) const;
  ::message::UGCColliderInfoData* _internal_add_colliderlist();
  public:
  const ::message::UGCColliderInfoData& colliderlist(int index) const;
  ::message::UGCColliderInfoData* add_colliderlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData >&
      colliderlist() const;

  // string EngineMeshUUID = 1;
  void clear_enginemeshuuid();
  const std::string& enginemeshuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enginemeshuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enginemeshuuid();
  PROTOBUF_NODISCARD std::string* release_enginemeshuuid();
  void set_allocated_enginemeshuuid(std::string* enginemeshuuid);
  private:
  const std::string& _internal_enginemeshuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enginemeshuuid(const std::string& value);
  std::string* _internal_mutable_enginemeshuuid();
  public:

  // string ABGameObjectResUUID = 5;
  void clear_abgameobjectresuuid();
  const std::string& abgameobjectresuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abgameobjectresuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abgameobjectresuuid();
  PROTOBUF_NODISCARD std::string* release_abgameobjectresuuid();
  void set_allocated_abgameobjectresuuid(std::string* abgameobjectresuuid);
  private:
  const std::string& _internal_abgameobjectresuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abgameobjectresuuid(const std::string& value);
  std::string* _internal_mutable_abgameobjectresuuid();
  public:

  // .message.EUGCRendererDataSource RendererDataSource = 4;
  void clear_rendererdatasource();
  ::message::EUGCRendererDataSource rendererdatasource() const;
  void set_rendererdatasource(::message::EUGCRendererDataSource value);
  private:
  ::message::EUGCRendererDataSource _internal_rendererdatasource() const;
  void _internal_set_rendererdatasource(::message::EUGCRendererDataSource value);
  public:

  // bool DisableABResCollision = 6;
  void clear_disableabrescollision();
  bool disableabrescollision() const;
  void set_disableabrescollision(bool value);
  private:
  bool _internal_disableabrescollision() const;
  void _internal_set_disableabrescollision(bool value);
  public:

  // bool IsSkinnedMesh = 7;
  void clear_isskinnedmesh();
  bool isskinnedmesh() const;
  void set_isskinnedmesh(bool value);
  private:
  bool _internal_isskinnedmesh() const;
  void _internal_set_isskinnedmesh(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCGameObjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ugcmaterialuuidlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData > colliderlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enginemeshuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abgameobjectresuuid_;
    int rendererdatasource_;
    bool disableabrescollision_;
    bool isskinnedmesh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResourceColliderData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourceColliderData) */ {
 public:
  inline UGCResourceColliderData() : UGCResourceColliderData(nullptr) {}
  ~UGCResourceColliderData() override;
  explicit PROTOBUF_CONSTEXPR UGCResourceColliderData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourceColliderData(const UGCResourceColliderData& from);
  UGCResourceColliderData(UGCResourceColliderData&& from) noexcept
    : UGCResourceColliderData() {
    *this = ::std::move(from);
  }

  inline UGCResourceColliderData& operator=(const UGCResourceColliderData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourceColliderData& operator=(UGCResourceColliderData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourceColliderData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourceColliderData* internal_default_instance() {
    return reinterpret_cast<const UGCResourceColliderData*>(
               &_UGCResourceColliderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UGCResourceColliderData& a, UGCResourceColliderData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourceColliderData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourceColliderData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourceColliderData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourceColliderData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourceColliderData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourceColliderData& from) {
    UGCResourceColliderData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourceColliderData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourceColliderData";
  }
  protected:
  explicit UGCResourceColliderData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColliderListFieldNumber = 3,
  };
  // repeated .message.UGCColliderInfoData ColliderList = 3;
  int colliderlist_size() const;
  private:
  int _internal_colliderlist_size() const;
  public:
  void clear_colliderlist();
  ::message::UGCColliderInfoData* mutable_colliderlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData >*
      mutable_colliderlist();
  private:
  const ::message::UGCColliderInfoData& _internal_colliderlist(int index) const;
  ::message::UGCColliderInfoData* _internal_add_colliderlist();
  public:
  const ::message::UGCColliderInfoData& colliderlist(int index) const;
  ::message::UGCColliderInfoData* add_colliderlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData >&
      colliderlist() const;

  // @@protoc_insertion_point(class_scope:message.UGCResourceColliderData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData > colliderlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class ProtoBuffVector4 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ProtoBuffVector4) */ {
 public:
  inline ProtoBuffVector4() : ProtoBuffVector4(nullptr) {}
  ~ProtoBuffVector4() override;
  explicit PROTOBUF_CONSTEXPR ProtoBuffVector4(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoBuffVector4(const ProtoBuffVector4& from);
  ProtoBuffVector4(ProtoBuffVector4&& from) noexcept
    : ProtoBuffVector4() {
    *this = ::std::move(from);
  }

  inline ProtoBuffVector4& operator=(const ProtoBuffVector4& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoBuffVector4& operator=(ProtoBuffVector4&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtoBuffVector4& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoBuffVector4* internal_default_instance() {
    return reinterpret_cast<const ProtoBuffVector4*>(
               &_ProtoBuffVector4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProtoBuffVector4& a, ProtoBuffVector4& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoBuffVector4* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoBuffVector4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoBuffVector4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtoBuffVector4>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtoBuffVector4& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtoBuffVector4& from) {
    ProtoBuffVector4::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoBuffVector4* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ProtoBuffVector4";
  }
  protected:
  explicit ProtoBuffVector4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float W = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.ProtoBuffVector4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float w_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCMaterialParamData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCMaterialParamData) */ {
 public:
  inline UGCMaterialParamData() : UGCMaterialParamData(nullptr) {}
  ~UGCMaterialParamData() override;
  explicit PROTOBUF_CONSTEXPR UGCMaterialParamData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCMaterialParamData(const UGCMaterialParamData& from);
  UGCMaterialParamData(UGCMaterialParamData&& from) noexcept
    : UGCMaterialParamData() {
    *this = ::std::move(from);
  }

  inline UGCMaterialParamData& operator=(const UGCMaterialParamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCMaterialParamData& operator=(UGCMaterialParamData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCMaterialParamData& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kFloatValue = 2,
    kTextureUUID = 3,
    kVector = 4,
    kIntValue = 5,
    kColorValue = 6,
    kEnableKeyword = 7,
    VALUE_NOT_SET = 0,
  };

  static inline const UGCMaterialParamData* internal_default_instance() {
    return reinterpret_cast<const UGCMaterialParamData*>(
               &_UGCMaterialParamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UGCMaterialParamData& a, UGCMaterialParamData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCMaterialParamData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCMaterialParamData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCMaterialParamData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCMaterialParamData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCMaterialParamData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCMaterialParamData& from) {
    UGCMaterialParamData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCMaterialParamData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCMaterialParamData";
  }
  protected:
  explicit UGCMaterialParamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFloatValueFieldNumber = 2,
    kTextureUUIDFieldNumber = 3,
    kVectorFieldNumber = 4,
    kIntValueFieldNumber = 5,
    kColorValueFieldNumber = 6,
    kEnableKeywordFieldNumber = 7,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float FloatValue = 2;
  bool has_floatvalue() const;
  private:
  bool _internal_has_floatvalue() const;
  public:
  void clear_floatvalue();
  float floatvalue() const;
  void set_floatvalue(float value);
  private:
  float _internal_floatvalue() const;
  void _internal_set_floatvalue(float value);
  public:

  // string TextureUUID = 3;
  bool has_textureuuid() const;
  private:
  bool _internal_has_textureuuid() const;
  public:
  void clear_textureuuid();
  const std::string& textureuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_textureuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_textureuuid();
  PROTOBUF_NODISCARD std::string* release_textureuuid();
  void set_allocated_textureuuid(std::string* textureuuid);
  private:
  const std::string& _internal_textureuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_textureuuid(const std::string& value);
  std::string* _internal_mutable_textureuuid();
  public:

  // .message.ProtoBuffVector4 Vector = 4;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::message::ProtoBuffVector4& vector() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector4* release_vector();
  ::message::ProtoBuffVector4* mutable_vector();
  void set_allocated_vector(::message::ProtoBuffVector4* vector);
  private:
  const ::message::ProtoBuffVector4& _internal_vector() const;
  ::message::ProtoBuffVector4* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::message::ProtoBuffVector4* vector);
  ::message::ProtoBuffVector4* unsafe_arena_release_vector();

  // int32 IntValue = 5;
  bool has_intvalue() const;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  int32_t intvalue() const;
  void set_intvalue(int32_t value);
  private:
  int32_t _internal_intvalue() const;
  void _internal_set_intvalue(int32_t value);
  public:

  // int32 ColorValue = 6;
  bool has_colorvalue() const;
  private:
  bool _internal_has_colorvalue() const;
  public:
  void clear_colorvalue();
  int32_t colorvalue() const;
  void set_colorvalue(int32_t value);
  private:
  int32_t _internal_colorvalue() const;
  void _internal_set_colorvalue(int32_t value);
  public:

  // string EnableKeyword = 7;
  bool has_enablekeyword() const;
  private:
  bool _internal_has_enablekeyword() const;
  public:
  void clear_enablekeyword();
  const std::string& enablekeyword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enablekeyword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enablekeyword();
  PROTOBUF_NODISCARD std::string* release_enablekeyword();
  void set_allocated_enablekeyword(std::string* enablekeyword);
  private:
  const std::string& _internal_enablekeyword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enablekeyword(const std::string& value);
  std::string* _internal_mutable_enablekeyword();
  public:

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:message.UGCMaterialParamData)
 private:
  class _Internal;
  void set_has_floatvalue();
  void set_has_textureuuid();
  void set_has_vector();
  void set_has_intvalue();
  void set_has_colorvalue();
  void set_has_enablekeyword();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      float floatvalue_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textureuuid_;
      ::message::ProtoBuffVector4* vector_;
      int32_t intvalue_;
      int32_t colorvalue_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enablekeyword_;
    } Value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCMaterialData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCMaterialData) */ {
 public:
  inline UGCMaterialData() : UGCMaterialData(nullptr) {}
  ~UGCMaterialData() override;
  explicit PROTOBUF_CONSTEXPR UGCMaterialData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCMaterialData(const UGCMaterialData& from);
  UGCMaterialData(UGCMaterialData&& from) noexcept
    : UGCMaterialData() {
    *this = ::std::move(from);
  }

  inline UGCMaterialData& operator=(const UGCMaterialData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCMaterialData& operator=(UGCMaterialData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCMaterialData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCMaterialData* internal_default_instance() {
    return reinterpret_cast<const UGCMaterialData*>(
               &_UGCMaterialData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UGCMaterialData& a, UGCMaterialData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCMaterialData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCMaterialData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCMaterialData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCMaterialData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCMaterialData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCMaterialData& from) {
    UGCMaterialData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCMaterialData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCMaterialData";
  }
  protected:
  explicit UGCMaterialData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaderParamListFieldNumber = 2,
    kShaderNameFieldNumber = 1,
  };
  // repeated .message.UGCMaterialParamData ShaderParamList = 2;
  int shaderparamlist_size() const;
  private:
  int _internal_shaderparamlist_size() const;
  public:
  void clear_shaderparamlist();
  ::message::UGCMaterialParamData* mutable_shaderparamlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCMaterialParamData >*
      mutable_shaderparamlist();
  private:
  const ::message::UGCMaterialParamData& _internal_shaderparamlist(int index) const;
  ::message::UGCMaterialParamData* _internal_add_shaderparamlist();
  public:
  const ::message::UGCMaterialParamData& shaderparamlist(int index) const;
  ::message::UGCMaterialParamData* add_shaderparamlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCMaterialParamData >&
      shaderparamlist() const;

  // string ShaderName = 1;
  void clear_shadername();
  const std::string& shadername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shadername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shadername();
  PROTOBUF_NODISCARD std::string* release_shadername();
  void set_allocated_shadername(std::string* shadername);
  private:
  const std::string& _internal_shadername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shadername(const std::string& value);
  std::string* _internal_mutable_shadername();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCMaterialData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCMaterialParamData > shaderparamlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shadername_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResourceUIAtlasData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourceUIAtlasData) */ {
 public:
  inline UGCResourceUIAtlasData() : UGCResourceUIAtlasData(nullptr) {}
  ~UGCResourceUIAtlasData() override;
  explicit PROTOBUF_CONSTEXPR UGCResourceUIAtlasData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourceUIAtlasData(const UGCResourceUIAtlasData& from);
  UGCResourceUIAtlasData(UGCResourceUIAtlasData&& from) noexcept
    : UGCResourceUIAtlasData() {
    *this = ::std::move(from);
  }

  inline UGCResourceUIAtlasData& operator=(const UGCResourceUIAtlasData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourceUIAtlasData& operator=(UGCResourceUIAtlasData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourceUIAtlasData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourceUIAtlasData* internal_default_instance() {
    return reinterpret_cast<const UGCResourceUIAtlasData*>(
               &_UGCResourceUIAtlasData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UGCResourceUIAtlasData& a, UGCResourceUIAtlasData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourceUIAtlasData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourceUIAtlasData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourceUIAtlasData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourceUIAtlasData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourceUIAtlasData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourceUIAtlasData& from) {
    UGCResourceUIAtlasData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourceUIAtlasData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourceUIAtlasData";
  }
  protected:
  explicit UGCResourceUIAtlasData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpritesFieldNumber = 3,
    kMaterialResUUIDFieldNumber = 1,
    kPixelSizeFieldNumber = 2,
  };
  // repeated .message.UGCResourceUISpriteData Sprites = 3;
  int sprites_size() const;
  private:
  int _internal_sprites_size() const;
  public:
  void clear_sprites();
  ::message::UGCResourceUISpriteData* mutable_sprites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceUISpriteData >*
      mutable_sprites();
  private:
  const ::message::UGCResourceUISpriteData& _internal_sprites(int index) const;
  ::message::UGCResourceUISpriteData* _internal_add_sprites();
  public:
  const ::message::UGCResourceUISpriteData& sprites(int index) const;
  ::message::UGCResourceUISpriteData* add_sprites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceUISpriteData >&
      sprites() const;

  // string MaterialResUUID = 1;
  void clear_materialresuuid();
  const std::string& materialresuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_materialresuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_materialresuuid();
  PROTOBUF_NODISCARD std::string* release_materialresuuid();
  void set_allocated_materialresuuid(std::string* materialresuuid);
  private:
  const std::string& _internal_materialresuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_materialresuuid(const std::string& value);
  std::string* _internal_mutable_materialresuuid();
  public:

  // float PixelSize = 2;
  void clear_pixelsize();
  float pixelsize() const;
  void set_pixelsize(float value);
  private:
  float _internal_pixelsize() const;
  void _internal_set_pixelsize(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResourceUIAtlasData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceUISpriteData > sprites_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr materialresuuid_;
    float pixelsize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResourceUISpriteData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourceUISpriteData) */ {
 public:
  inline UGCResourceUISpriteData() : UGCResourceUISpriteData(nullptr) {}
  ~UGCResourceUISpriteData() override;
  explicit PROTOBUF_CONSTEXPR UGCResourceUISpriteData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourceUISpriteData(const UGCResourceUISpriteData& from);
  UGCResourceUISpriteData(UGCResourceUISpriteData&& from) noexcept
    : UGCResourceUISpriteData() {
    *this = ::std::move(from);
  }

  inline UGCResourceUISpriteData& operator=(const UGCResourceUISpriteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourceUISpriteData& operator=(UGCResourceUISpriteData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourceUISpriteData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourceUISpriteData* internal_default_instance() {
    return reinterpret_cast<const UGCResourceUISpriteData*>(
               &_UGCResourceUISpriteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UGCResourceUISpriteData& a, UGCResourceUISpriteData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourceUISpriteData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourceUISpriteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourceUISpriteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourceUISpriteData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourceUISpriteData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourceUISpriteData& from) {
    UGCResourceUISpriteData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourceUISpriteData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourceUISpriteData";
  }
  protected:
  explicit UGCResourceUISpriteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kBorderLeftFieldNumber = 6,
    kBorderRightFieldNumber = 7,
    kBorderTopFieldNumber = 8,
    kBorderBottomFieldNumber = 9,
    kPaddingLeftFieldNumber = 10,
    kPaddingRightFieldNumber = 11,
    kPaddingTopFieldNumber = 12,
    kPaddingBottomFieldNumber = 13,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 X = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 Y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 Width = 4;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 Height = 5;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 BorderLeft = 6;
  void clear_borderleft();
  int32_t borderleft() const;
  void set_borderleft(int32_t value);
  private:
  int32_t _internal_borderleft() const;
  void _internal_set_borderleft(int32_t value);
  public:

  // int32 BorderRight = 7;
  void clear_borderright();
  int32_t borderright() const;
  void set_borderright(int32_t value);
  private:
  int32_t _internal_borderright() const;
  void _internal_set_borderright(int32_t value);
  public:

  // int32 BorderTop = 8;
  void clear_bordertop();
  int32_t bordertop() const;
  void set_bordertop(int32_t value);
  private:
  int32_t _internal_bordertop() const;
  void _internal_set_bordertop(int32_t value);
  public:

  // int32 BorderBottom = 9;
  void clear_borderbottom();
  int32_t borderbottom() const;
  void set_borderbottom(int32_t value);
  private:
  int32_t _internal_borderbottom() const;
  void _internal_set_borderbottom(int32_t value);
  public:

  // int32 PaddingLeft = 10;
  void clear_paddingleft();
  int32_t paddingleft() const;
  void set_paddingleft(int32_t value);
  private:
  int32_t _internal_paddingleft() const;
  void _internal_set_paddingleft(int32_t value);
  public:

  // int32 PaddingRight = 11;
  void clear_paddingright();
  int32_t paddingright() const;
  void set_paddingright(int32_t value);
  private:
  int32_t _internal_paddingright() const;
  void _internal_set_paddingright(int32_t value);
  public:

  // int32 PaddingTop = 12;
  void clear_paddingtop();
  int32_t paddingtop() const;
  void set_paddingtop(int32_t value);
  private:
  int32_t _internal_paddingtop() const;
  void _internal_set_paddingtop(int32_t value);
  public:

  // int32 PaddingBottom = 13;
  void clear_paddingbottom();
  int32_t paddingbottom() const;
  void set_paddingbottom(int32_t value);
  private:
  int32_t _internal_paddingbottom() const;
  void _internal_set_paddingbottom(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResourceUISpriteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t x_;
    int32_t y_;
    int32_t width_;
    int32_t height_;
    int32_t borderleft_;
    int32_t borderright_;
    int32_t bordertop_;
    int32_t borderbottom_;
    int32_t paddingleft_;
    int32_t paddingright_;
    int32_t paddingtop_;
    int32_t paddingbottom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResourcePackageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourcePackageItem) */ {
 public:
  inline UGCResourcePackageItem() : UGCResourcePackageItem(nullptr) {}
  ~UGCResourcePackageItem() override;
  explicit PROTOBUF_CONSTEXPR UGCResourcePackageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourcePackageItem(const UGCResourcePackageItem& from);
  UGCResourcePackageItem(UGCResourcePackageItem&& from) noexcept
    : UGCResourcePackageItem() {
    *this = ::std::move(from);
  }

  inline UGCResourcePackageItem& operator=(const UGCResourcePackageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourcePackageItem& operator=(UGCResourcePackageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourcePackageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourcePackageItem* internal_default_instance() {
    return reinterpret_cast<const UGCResourcePackageItem*>(
               &_UGCResourcePackageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UGCResourcePackageItem& a, UGCResourcePackageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourcePackageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourcePackageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourcePackageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourcePackageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourcePackageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourcePackageItem& from) {
    UGCResourcePackageItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourcePackageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourcePackageItem";
  }
  protected:
  explicit UGCResourcePackageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUUIDFieldNumber = 1,
    kPathFieldNumber = 3,
    kDataFieldNumber = 4,
    kTypeFieldNumber = 2,
    kIsUnityAssetBundleResFieldNumber = 5,
  };
  // string UUID = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string Path = 3;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bytes Data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .message.EUGCResourceType Type = 2;
  void clear_type();
  ::message::EUGCResourceType type() const;
  void set_type(::message::EUGCResourceType value);
  private:
  ::message::EUGCResourceType _internal_type() const;
  void _internal_set_type(::message::EUGCResourceType value);
  public:

  // bool IsUnityAssetBundleRes = 5;
  void clear_isunityassetbundleres();
  bool isunityassetbundleres() const;
  void set_isunityassetbundleres(bool value);
  private:
  bool _internal_isunityassetbundleres() const;
  void _internal_set_isunityassetbundleres(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResourcePackageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int type_;
    bool isunityassetbundleres_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCAssetBundleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCAssetBundleData) */ {
 public:
  inline UGCAssetBundleData() : UGCAssetBundleData(nullptr) {}
  ~UGCAssetBundleData() override;
  explicit PROTOBUF_CONSTEXPR UGCAssetBundleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCAssetBundleData(const UGCAssetBundleData& from);
  UGCAssetBundleData(UGCAssetBundleData&& from) noexcept
    : UGCAssetBundleData() {
    *this = ::std::move(from);
  }

  inline UGCAssetBundleData& operator=(const UGCAssetBundleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCAssetBundleData& operator=(UGCAssetBundleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCAssetBundleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCAssetBundleData* internal_default_instance() {
    return reinterpret_cast<const UGCAssetBundleData*>(
               &_UGCAssetBundleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UGCAssetBundleData& a, UGCAssetBundleData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCAssetBundleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCAssetBundleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCAssetBundleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCAssetBundleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCAssetBundleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCAssetBundleData& from) {
    UGCAssetBundleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCAssetBundleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCAssetBundleData";
  }
  protected:
  explicit UGCAssetBundleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependencesBundleFieldNumber = 4,
    kPathFieldNumber = 1,
    kHashFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // repeated string DependencesBundle = 4;
  int dependencesbundle_size() const;
  private:
  int _internal_dependencesbundle_size() const;
  public:
  void clear_dependencesbundle();
  const std::string& dependencesbundle(int index) const;
  std::string* mutable_dependencesbundle(int index);
  void set_dependencesbundle(int index, const std::string& value);
  void set_dependencesbundle(int index, std::string&& value);
  void set_dependencesbundle(int index, const char* value);
  void set_dependencesbundle(int index, const char* value, size_t size);
  std::string* add_dependencesbundle();
  void add_dependencesbundle(const std::string& value);
  void add_dependencesbundle(std::string&& value);
  void add_dependencesbundle(const char* value);
  void add_dependencesbundle(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependencesbundle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependencesbundle();
  private:
  const std::string& _internal_dependencesbundle(int index) const;
  std::string* _internal_add_dependencesbundle();
  public:

  // string Path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string Hash = 2;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 Size = 3;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCAssetBundleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependencesbundle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    int32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCAllUnityBundle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCAllUnityBundle) */ {
 public:
  inline UGCAllUnityBundle() : UGCAllUnityBundle(nullptr) {}
  ~UGCAllUnityBundle() override;
  explicit PROTOBUF_CONSTEXPR UGCAllUnityBundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCAllUnityBundle(const UGCAllUnityBundle& from);
  UGCAllUnityBundle(UGCAllUnityBundle&& from) noexcept
    : UGCAllUnityBundle() {
    *this = ::std::move(from);
  }

  inline UGCAllUnityBundle& operator=(const UGCAllUnityBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCAllUnityBundle& operator=(UGCAllUnityBundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCAllUnityBundle& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCAllUnityBundle* internal_default_instance() {
    return reinterpret_cast<const UGCAllUnityBundle*>(
               &_UGCAllUnityBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UGCAllUnityBundle& a, UGCAllUnityBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCAllUnityBundle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCAllUnityBundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCAllUnityBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCAllUnityBundle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCAllUnityBundle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCAllUnityBundle& from) {
    UGCAllUnityBundle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCAllUnityBundle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCAllUnityBundle";
  }
  protected:
  explicit UGCAllUnityBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBundleListFieldNumber = 1,
  };
  // repeated .message.UGCAssetBundleData BundleList = 1;
  int bundlelist_size() const;
  private:
  int _internal_bundlelist_size() const;
  public:
  void clear_bundlelist();
  ::message::UGCAssetBundleData* mutable_bundlelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCAssetBundleData >*
      mutable_bundlelist();
  private:
  const ::message::UGCAssetBundleData& _internal_bundlelist(int index) const;
  ::message::UGCAssetBundleData* _internal_add_bundlelist();
  public:
  const ::message::UGCAssetBundleData& bundlelist(int index) const;
  ::message::UGCAssetBundleData* add_bundlelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCAssetBundleData >&
      bundlelist() const;

  // @@protoc_insertion_point(class_scope:message.UGCAllUnityBundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCAssetBundleData > bundlelist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResourcePackageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourcePackageData) */ {
 public:
  inline UGCResourcePackageData() : UGCResourcePackageData(nullptr) {}
  ~UGCResourcePackageData() override;
  explicit PROTOBUF_CONSTEXPR UGCResourcePackageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourcePackageData(const UGCResourcePackageData& from);
  UGCResourcePackageData(UGCResourcePackageData&& from) noexcept
    : UGCResourcePackageData() {
    *this = ::std::move(from);
  }

  inline UGCResourcePackageData& operator=(const UGCResourcePackageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourcePackageData& operator=(UGCResourcePackageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourcePackageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourcePackageData* internal_default_instance() {
    return reinterpret_cast<const UGCResourcePackageData*>(
               &_UGCResourcePackageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UGCResourcePackageData& a, UGCResourcePackageData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourcePackageData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourcePackageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourcePackageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourcePackageData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourcePackageData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourcePackageData& from) {
    UGCResourcePackageData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourcePackageData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourcePackageData";
  }
  protected:
  explicit UGCResourcePackageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceListFieldNumber = 10,
    kNameFieldNumber = 1,
    kUUIDFieldNumber = 2,
    kVersionFieldNumber = 7,
    kAllUnityBundlesFieldNumber = 9,
    kShareTypeFieldNumber = 3,
    kPackageTypeFieldNumber = 4,
    kUseableTypeFieldNumber = 5,
    kPlatformFieldNumber = 6,
    kDataFormatVersionFieldNumber = 8,
  };
  // repeated .message.UGCResourcePackageItem ResourceList = 10;
  int resourcelist_size() const;
  private:
  int _internal_resourcelist_size() const;
  public:
  void clear_resourcelist();
  ::message::UGCResourcePackageItem* mutable_resourcelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageItem >*
      mutable_resourcelist();
  private:
  const ::message::UGCResourcePackageItem& _internal_resourcelist(int index) const;
  ::message::UGCResourcePackageItem* _internal_add_resourcelist();
  public:
  const ::message::UGCResourcePackageItem& resourcelist(int index) const;
  ::message::UGCResourcePackageItem* add_resourcelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageItem >&
      resourcelist() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string UUID = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string Version = 7;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .message.UGCAllUnityBundle AllUnityBundles = 9;
  bool has_allunitybundles() const;
  private:
  bool _internal_has_allunitybundles() const;
  public:
  void clear_allunitybundles();
  const ::message::UGCAllUnityBundle& allunitybundles() const;
  PROTOBUF_NODISCARD ::message::UGCAllUnityBundle* release_allunitybundles();
  ::message::UGCAllUnityBundle* mutable_allunitybundles();
  void set_allocated_allunitybundles(::message::UGCAllUnityBundle* allunitybundles);
  private:
  const ::message::UGCAllUnityBundle& _internal_allunitybundles() const;
  ::message::UGCAllUnityBundle* _internal_mutable_allunitybundles();
  public:
  void unsafe_arena_set_allocated_allunitybundles(
      ::message::UGCAllUnityBundle* allunitybundles);
  ::message::UGCAllUnityBundle* unsafe_arena_release_allunitybundles();

  // .message.EUGCPackageShareType ShareType = 3;
  void clear_sharetype();
  ::message::EUGCPackageShareType sharetype() const;
  void set_sharetype(::message::EUGCPackageShareType value);
  private:
  ::message::EUGCPackageShareType _internal_sharetype() const;
  void _internal_set_sharetype(::message::EUGCPackageShareType value);
  public:

  // .message.EUGCPackageType PackageType = 4;
  void clear_packagetype();
  ::message::EUGCPackageType packagetype() const;
  void set_packagetype(::message::EUGCPackageType value);
  private:
  ::message::EUGCPackageType _internal_packagetype() const;
  void _internal_set_packagetype(::message::EUGCPackageType value);
  public:

  // .message.EUGCPackageUseableType UseableType = 5;
  void clear_useabletype();
  ::message::EUGCPackageUseableType useabletype() const;
  void set_useabletype(::message::EUGCPackageUseableType value);
  private:
  ::message::EUGCPackageUseableType _internal_useabletype() const;
  void _internal_set_useabletype(::message::EUGCPackageUseableType value);
  public:

  // .message.EUGCPackagePlatform Platform = 6;
  void clear_platform();
  ::message::EUGCPackagePlatform platform() const;
  void set_platform(::message::EUGCPackagePlatform value);
  private:
  ::message::EUGCPackagePlatform _internal_platform() const;
  void _internal_set_platform(::message::EUGCPackagePlatform value);
  public:

  // int32 DataFormatVersion = 8;
  void clear_dataformatversion();
  int32_t dataformatversion() const;
  void set_dataformatversion(int32_t value);
  private:
  int32_t _internal_dataformatversion() const;
  void _internal_set_dataformatversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResourcePackageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageItem > resourcelist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::message::UGCAllUnityBundle* allunitybundles_;
    int sharetype_;
    int packagetype_;
    int useabletype_;
    int platform_;
    int32_t dataformatversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResourcePackageRefInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourcePackageRefInfo) */ {
 public:
  inline UGCResourcePackageRefInfo() : UGCResourcePackageRefInfo(nullptr) {}
  ~UGCResourcePackageRefInfo() override;
  explicit PROTOBUF_CONSTEXPR UGCResourcePackageRefInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourcePackageRefInfo(const UGCResourcePackageRefInfo& from);
  UGCResourcePackageRefInfo(UGCResourcePackageRefInfo&& from) noexcept
    : UGCResourcePackageRefInfo() {
    *this = ::std::move(from);
  }

  inline UGCResourcePackageRefInfo& operator=(const UGCResourcePackageRefInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourcePackageRefInfo& operator=(UGCResourcePackageRefInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourcePackageRefInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourcePackageRefInfo* internal_default_instance() {
    return reinterpret_cast<const UGCResourcePackageRefInfo*>(
               &_UGCResourcePackageRefInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UGCResourcePackageRefInfo& a, UGCResourcePackageRefInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourcePackageRefInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourcePackageRefInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourcePackageRefInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourcePackageRefInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourcePackageRefInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourcePackageRefInfo& from) {
    UGCResourcePackageRefInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourcePackageRefInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourcePackageRefInfo";
  }
  protected:
  explicit UGCResourcePackageRefInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUUIDFieldNumber = 2,
    kUseVersionMD5FieldNumber = 4,
    kRefVersionTypeFieldNumber = 3,
    kWhoRequireFieldNumber = 5,
    kPlatformSpecialFieldNumber = 6,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string UUID = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string UseVersionMD5 = 4;
  void clear_useversionmd5();
  const std::string& useversionmd5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_useversionmd5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_useversionmd5();
  PROTOBUF_NODISCARD std::string* release_useversionmd5();
  void set_allocated_useversionmd5(std::string* useversionmd5);
  private:
  const std::string& _internal_useversionmd5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_useversionmd5(const std::string& value);
  std::string* _internal_mutable_useversionmd5();
  public:

  // .message.EUGCPackageRefVersionType RefVersionType = 3;
  void clear_refversiontype();
  ::message::EUGCPackageRefVersionType refversiontype() const;
  void set_refversiontype(::message::EUGCPackageRefVersionType value);
  private:
  ::message::EUGCPackageRefVersionType _internal_refversiontype() const;
  void _internal_set_refversiontype(::message::EUGCPackageRefVersionType value);
  public:

  // .message.EUGCPackageUseableType WhoRequire = 5;
  void clear_whorequire();
  ::message::EUGCPackageUseableType whorequire() const;
  void set_whorequire(::message::EUGCPackageUseableType value);
  private:
  ::message::EUGCPackageUseableType _internal_whorequire() const;
  void _internal_set_whorequire(::message::EUGCPackageUseableType value);
  public:

  // bool PlatformSpecial = 6;
  void clear_platformspecial();
  bool platformspecial() const;
  void set_platformspecial(bool value);
  private:
  bool _internal_platformspecial() const;
  void _internal_set_platformspecial(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResourcePackageRefInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useversionmd5_;
    int refversiontype_;
    int whorequire_;
    bool platformspecial_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResourcePackageDownloadDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourcePackageDownloadDesc) */ {
 public:
  inline UGCResourcePackageDownloadDesc() : UGCResourcePackageDownloadDesc(nullptr) {}
  ~UGCResourcePackageDownloadDesc() override;
  explicit PROTOBUF_CONSTEXPR UGCResourcePackageDownloadDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourcePackageDownloadDesc(const UGCResourcePackageDownloadDesc& from);
  UGCResourcePackageDownloadDesc(UGCResourcePackageDownloadDesc&& from) noexcept
    : UGCResourcePackageDownloadDesc() {
    *this = ::std::move(from);
  }

  inline UGCResourcePackageDownloadDesc& operator=(const UGCResourcePackageDownloadDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourcePackageDownloadDesc& operator=(UGCResourcePackageDownloadDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourcePackageDownloadDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourcePackageDownloadDesc* internal_default_instance() {
    return reinterpret_cast<const UGCResourcePackageDownloadDesc*>(
               &_UGCResourcePackageDownloadDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UGCResourcePackageDownloadDesc& a, UGCResourcePackageDownloadDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourcePackageDownloadDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourcePackageDownloadDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourcePackageDownloadDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourcePackageDownloadDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourcePackageDownloadDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourcePackageDownloadDesc& from) {
    UGCResourcePackageDownloadDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourcePackageDownloadDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourcePackageDownloadDesc";
  }
  protected:
  explicit UGCResourcePackageDownloadDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownloadExtUrlInfoListFieldNumber = 5,
    kPackageUUIDFieldNumber = 1,
    kDownloadPackageUrlTagFieldNumber = 2,
    kDownloadPackageUrlInfoFieldNumber = 3,
    kDownloadExtUrlTagFieldNumber = 4,
    kFileBytesFieldNumber = 6,
  };
  // repeated string DownloadExtUrlInfoList = 5;
  int downloadexturlinfolist_size() const;
  private:
  int _internal_downloadexturlinfolist_size() const;
  public:
  void clear_downloadexturlinfolist();
  const std::string& downloadexturlinfolist(int index) const;
  std::string* mutable_downloadexturlinfolist(int index);
  void set_downloadexturlinfolist(int index, const std::string& value);
  void set_downloadexturlinfolist(int index, std::string&& value);
  void set_downloadexturlinfolist(int index, const char* value);
  void set_downloadexturlinfolist(int index, const char* value, size_t size);
  std::string* add_downloadexturlinfolist();
  void add_downloadexturlinfolist(const std::string& value);
  void add_downloadexturlinfolist(std::string&& value);
  void add_downloadexturlinfolist(const char* value);
  void add_downloadexturlinfolist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& downloadexturlinfolist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_downloadexturlinfolist();
  private:
  const std::string& _internal_downloadexturlinfolist(int index) const;
  std::string* _internal_add_downloadexturlinfolist();
  public:

  // string PackageUUID = 1;
  void clear_packageuuid();
  const std::string& packageuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packageuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packageuuid();
  PROTOBUF_NODISCARD std::string* release_packageuuid();
  void set_allocated_packageuuid(std::string* packageuuid);
  private:
  const std::string& _internal_packageuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packageuuid(const std::string& value);
  std::string* _internal_mutable_packageuuid();
  public:

  // string DownloadPackageUrlTag = 2;
  void clear_downloadpackageurltag();
  const std::string& downloadpackageurltag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloadpackageurltag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloadpackageurltag();
  PROTOBUF_NODISCARD std::string* release_downloadpackageurltag();
  void set_allocated_downloadpackageurltag(std::string* downloadpackageurltag);
  private:
  const std::string& _internal_downloadpackageurltag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloadpackageurltag(const std::string& value);
  std::string* _internal_mutable_downloadpackageurltag();
  public:

  // string DownloadPackageUrlInfo = 3;
  void clear_downloadpackageurlinfo();
  const std::string& downloadpackageurlinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloadpackageurlinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloadpackageurlinfo();
  PROTOBUF_NODISCARD std::string* release_downloadpackageurlinfo();
  void set_allocated_downloadpackageurlinfo(std::string* downloadpackageurlinfo);
  private:
  const std::string& _internal_downloadpackageurlinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloadpackageurlinfo(const std::string& value);
  std::string* _internal_mutable_downloadpackageurlinfo();
  public:

  // string DownloadExtUrlTag = 4;
  void clear_downloadexturltag();
  const std::string& downloadexturltag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_downloadexturltag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_downloadexturltag();
  PROTOBUF_NODISCARD std::string* release_downloadexturltag();
  void set_allocated_downloadexturltag(std::string* downloadexturltag);
  private:
  const std::string& _internal_downloadexturltag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_downloadexturltag(const std::string& value);
  std::string* _internal_mutable_downloadexturltag();
  public:

  // int32 FileBytes = 6;
  void clear_filebytes();
  int32_t filebytes() const;
  void set_filebytes(int32_t value);
  private:
  int32_t _internal_filebytes() const;
  void _internal_set_filebytes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResourcePackageDownloadDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> downloadexturlinfolist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packageuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloadpackageurltag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloadpackageurlinfo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr downloadexturltag_;
    int32_t filebytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCGameDataResourcePackageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCGameDataResourcePackageInfo) */ {
 public:
  inline UGCGameDataResourcePackageInfo() : UGCGameDataResourcePackageInfo(nullptr) {}
  ~UGCGameDataResourcePackageInfo() override;
  explicit PROTOBUF_CONSTEXPR UGCGameDataResourcePackageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCGameDataResourcePackageInfo(const UGCGameDataResourcePackageInfo& from);
  UGCGameDataResourcePackageInfo(UGCGameDataResourcePackageInfo&& from) noexcept
    : UGCGameDataResourcePackageInfo() {
    *this = ::std::move(from);
  }

  inline UGCGameDataResourcePackageInfo& operator=(const UGCGameDataResourcePackageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCGameDataResourcePackageInfo& operator=(UGCGameDataResourcePackageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCGameDataResourcePackageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCGameDataResourcePackageInfo* internal_default_instance() {
    return reinterpret_cast<const UGCGameDataResourcePackageInfo*>(
               &_UGCGameDataResourcePackageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UGCGameDataResourcePackageInfo& a, UGCGameDataResourcePackageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCGameDataResourcePackageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCGameDataResourcePackageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCGameDataResourcePackageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCGameDataResourcePackageInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCGameDataResourcePackageInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCGameDataResourcePackageInfo& from) {
    UGCGameDataResourcePackageInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCGameDataResourcePackageInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCGameDataResourcePackageInfo";
  }
  protected:
  explicit UGCGameDataResourcePackageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefPackagesFieldNumber = 3,
    kBuildinPackagesFieldNumber = 4,
    kDownloadDescsFieldNumber = 5,
    kDataFormatVersionFieldNumber = 1,
  };
  // repeated .message.UGCResourcePackageRefInfo RefPackages = 3;
  int refpackages_size() const;
  private:
  int _internal_refpackages_size() const;
  public:
  void clear_refpackages();
  ::message::UGCResourcePackageRefInfo* mutable_refpackages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageRefInfo >*
      mutable_refpackages();
  private:
  const ::message::UGCResourcePackageRefInfo& _internal_refpackages(int index) const;
  ::message::UGCResourcePackageRefInfo* _internal_add_refpackages();
  public:
  const ::message::UGCResourcePackageRefInfo& refpackages(int index) const;
  ::message::UGCResourcePackageRefInfo* add_refpackages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageRefInfo >&
      refpackages() const;

  // repeated .message.UGCResourcePackageData BuildinPackages = 4;
  int buildinpackages_size() const;
  private:
  int _internal_buildinpackages_size() const;
  public:
  void clear_buildinpackages();
  ::message::UGCResourcePackageData* mutable_buildinpackages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageData >*
      mutable_buildinpackages();
  private:
  const ::message::UGCResourcePackageData& _internal_buildinpackages(int index) const;
  ::message::UGCResourcePackageData* _internal_add_buildinpackages();
  public:
  const ::message::UGCResourcePackageData& buildinpackages(int index) const;
  ::message::UGCResourcePackageData* add_buildinpackages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageData >&
      buildinpackages() const;

  // repeated .message.UGCResourcePackageDownloadDesc DownloadDescs = 5;
  int downloaddescs_size() const;
  private:
  int _internal_downloaddescs_size() const;
  public:
  void clear_downloaddescs();
  ::message::UGCResourcePackageDownloadDesc* mutable_downloaddescs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageDownloadDesc >*
      mutable_downloaddescs();
  private:
  const ::message::UGCResourcePackageDownloadDesc& _internal_downloaddescs(int index) const;
  ::message::UGCResourcePackageDownloadDesc* _internal_add_downloaddescs();
  public:
  const ::message::UGCResourcePackageDownloadDesc& downloaddescs(int index) const;
  ::message::UGCResourcePackageDownloadDesc* add_downloaddescs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageDownloadDesc >&
      downloaddescs() const;

  // uint32 DataFormatVersion = 1;
  void clear_dataformatversion();
  uint32_t dataformatversion() const;
  void set_dataformatversion(uint32_t value);
  private:
  uint32_t _internal_dataformatversion() const;
  void _internal_set_dataformatversion(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCGameDataResourcePackageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageRefInfo > refpackages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageData > buildinpackages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageDownloadDesc > downloaddescs_;
    uint32_t dataformatversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResourceFileDownloadDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResourceFileDownloadDesc) */ {
 public:
  inline UGCResourceFileDownloadDesc() : UGCResourceFileDownloadDesc(nullptr) {}
  ~UGCResourceFileDownloadDesc() override;
  explicit PROTOBUF_CONSTEXPR UGCResourceFileDownloadDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResourceFileDownloadDesc(const UGCResourceFileDownloadDesc& from);
  UGCResourceFileDownloadDesc(UGCResourceFileDownloadDesc&& from) noexcept
    : UGCResourceFileDownloadDesc() {
    *this = ::std::move(from);
  }

  inline UGCResourceFileDownloadDesc& operator=(const UGCResourceFileDownloadDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResourceFileDownloadDesc& operator=(UGCResourceFileDownloadDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResourceFileDownloadDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResourceFileDownloadDesc* internal_default_instance() {
    return reinterpret_cast<const UGCResourceFileDownloadDesc*>(
               &_UGCResourceFileDownloadDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UGCResourceFileDownloadDesc& a, UGCResourceFileDownloadDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResourceFileDownloadDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResourceFileDownloadDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResourceFileDownloadDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResourceFileDownloadDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResourceFileDownloadDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResourceFileDownloadDesc& from) {
    UGCResourceFileDownloadDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResourceFileDownloadDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResourceFileDownloadDesc";
  }
  protected:
  explicit UGCResourceFileDownloadDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubFileIDFieldNumber = 1,
    kSHA1FieldNumber = 2,
    kURLFieldNumber = 4,
    kFileSizeFieldNumber = 3,
    kPlatformRequireMaskFieldNumber = 5,
  };
  // string SubFileID = 1;
  void clear_subfileid();
  const std::string& subfileid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subfileid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subfileid();
  PROTOBUF_NODISCARD std::string* release_subfileid();
  void set_allocated_subfileid(std::string* subfileid);
  private:
  const std::string& _internal_subfileid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subfileid(const std::string& value);
  std::string* _internal_mutable_subfileid();
  public:

  // string SHA1 = 2;
  void clear_sha1();
  const std::string& sha1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha1();
  PROTOBUF_NODISCARD std::string* release_sha1();
  void set_allocated_sha1(std::string* sha1);
  private:
  const std::string& _internal_sha1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha1(const std::string& value);
  std::string* _internal_mutable_sha1();
  public:

  // string URL = 4;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // int32 FileSize = 3;
  void clear_filesize();
  int32_t filesize() const;
  void set_filesize(int32_t value);
  private:
  int32_t _internal_filesize() const;
  void _internal_set_filesize(int32_t value);
  public:

  // int32 PlatformRequireMask = 5;
  void clear_platformrequiremask();
  int32_t platformrequiremask() const;
  void set_platformrequiremask(int32_t value);
  private:
  int32_t _internal_platformrequiremask() const;
  void _internal_set_platformrequiremask(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResourceFileDownloadDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subfileid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    int32_t filesize_;
    int32_t platformrequiremask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCPackageDownloadDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCPackageDownloadDesc) */ {
 public:
  inline UGCPackageDownloadDesc() : UGCPackageDownloadDesc(nullptr) {}
  ~UGCPackageDownloadDesc() override;
  explicit PROTOBUF_CONSTEXPR UGCPackageDownloadDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCPackageDownloadDesc(const UGCPackageDownloadDesc& from);
  UGCPackageDownloadDesc(UGCPackageDownloadDesc&& from) noexcept
    : UGCPackageDownloadDesc() {
    *this = ::std::move(from);
  }

  inline UGCPackageDownloadDesc& operator=(const UGCPackageDownloadDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCPackageDownloadDesc& operator=(UGCPackageDownloadDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCPackageDownloadDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCPackageDownloadDesc* internal_default_instance() {
    return reinterpret_cast<const UGCPackageDownloadDesc*>(
               &_UGCPackageDownloadDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UGCPackageDownloadDesc& a, UGCPackageDownloadDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCPackageDownloadDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCPackageDownloadDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCPackageDownloadDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCPackageDownloadDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCPackageDownloadDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCPackageDownloadDesc& from) {
    UGCPackageDownloadDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCPackageDownloadDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCPackageDownloadDesc";
  }
  protected:
  explicit UGCPackageDownloadDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileListFieldNumber = 2,
    kPackageUUIDFieldNumber = 1,
    kDownloadPriorityFieldNumber = 3,
  };
  // repeated .message.UGCResourceFileDownloadDesc FileList = 2;
  int filelist_size() const;
  private:
  int _internal_filelist_size() const;
  public:
  void clear_filelist();
  ::message::UGCResourceFileDownloadDesc* mutable_filelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceFileDownloadDesc >*
      mutable_filelist();
  private:
  const ::message::UGCResourceFileDownloadDesc& _internal_filelist(int index) const;
  ::message::UGCResourceFileDownloadDesc* _internal_add_filelist();
  public:
  const ::message::UGCResourceFileDownloadDesc& filelist(int index) const;
  ::message::UGCResourceFileDownloadDesc* add_filelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceFileDownloadDesc >&
      filelist() const;

  // string PackageUUID = 1;
  void clear_packageuuid();
  const std::string& packageuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packageuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packageuuid();
  PROTOBUF_NODISCARD std::string* release_packageuuid();
  void set_allocated_packageuuid(std::string* packageuuid);
  private:
  const std::string& _internal_packageuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packageuuid(const std::string& value);
  std::string* _internal_mutable_packageuuid();
  public:

  // int32 DownloadPriority = 3;
  void clear_downloadpriority();
  int32_t downloadpriority() const;
  void set_downloadpriority(int32_t value);
  private:
  int32_t _internal_downloadpriority() const;
  void _internal_set_downloadpriority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCPackageDownloadDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceFileDownloadDesc > filelist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packageuuid_;
    int32_t downloadpriority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCGameDataDownloadDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCGameDataDownloadDesc) */ {
 public:
  inline UGCGameDataDownloadDesc() : UGCGameDataDownloadDesc(nullptr) {}
  ~UGCGameDataDownloadDesc() override;
  explicit PROTOBUF_CONSTEXPR UGCGameDataDownloadDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCGameDataDownloadDesc(const UGCGameDataDownloadDesc& from);
  UGCGameDataDownloadDesc(UGCGameDataDownloadDesc&& from) noexcept
    : UGCGameDataDownloadDesc() {
    *this = ::std::move(from);
  }

  inline UGCGameDataDownloadDesc& operator=(const UGCGameDataDownloadDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCGameDataDownloadDesc& operator=(UGCGameDataDownloadDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCGameDataDownloadDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCGameDataDownloadDesc* internal_default_instance() {
    return reinterpret_cast<const UGCGameDataDownloadDesc*>(
               &_UGCGameDataDownloadDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UGCGameDataDownloadDesc& a, UGCGameDataDownloadDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCGameDataDownloadDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCGameDataDownloadDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCGameDataDownloadDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCGameDataDownloadDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCGameDataDownloadDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCGameDataDownloadDesc& from) {
    UGCGameDataDownloadDesc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCGameDataDownloadDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCGameDataDownloadDesc";
  }
  protected:
  explicit UGCGameDataDownloadDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageListFieldNumber = 1,
  };
  // repeated .message.UGCPackageDownloadDesc PackageList = 1;
  int packagelist_size() const;
  private:
  int _internal_packagelist_size() const;
  public:
  void clear_packagelist();
  ::message::UGCPackageDownloadDesc* mutable_packagelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPackageDownloadDesc >*
      mutable_packagelist();
  private:
  const ::message::UGCPackageDownloadDesc& _internal_packagelist(int index) const;
  ::message::UGCPackageDownloadDesc* _internal_add_packagelist();
  public:
  const ::message::UGCPackageDownloadDesc& packagelist(int index) const;
  ::message::UGCPackageDownloadDesc* add_packagelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPackageDownloadDesc >&
      packagelist() const;

  // @@protoc_insertion_point(class_scope:message.UGCGameDataDownloadDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPackageDownloadDesc > packagelist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCCSVRowData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCSVRowData) */ {
 public:
  inline UGCCSVRowData() : UGCCSVRowData(nullptr) {}
  ~UGCCSVRowData() override;
  explicit PROTOBUF_CONSTEXPR UGCCSVRowData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCSVRowData(const UGCCSVRowData& from);
  UGCCSVRowData(UGCCSVRowData&& from) noexcept
    : UGCCSVRowData() {
    *this = ::std::move(from);
  }

  inline UGCCSVRowData& operator=(const UGCCSVRowData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCSVRowData& operator=(UGCCSVRowData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCSVRowData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCSVRowData* internal_default_instance() {
    return reinterpret_cast<const UGCCSVRowData*>(
               &_UGCCSVRowData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UGCCSVRowData& a, UGCCSVRowData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCSVRowData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCSVRowData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCSVRowData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCSVRowData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCSVRowData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCSVRowData& from) {
    UGCCSVRowData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCSVRowData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCSVRowData";
  }
  protected:
  explicit UGCCSVRowData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowDataFieldNumber = 1,
  };
  // repeated string RowData = 1;
  int rowdata_size() const;
  private:
  int _internal_rowdata_size() const;
  public:
  void clear_rowdata();
  const std::string& rowdata(int index) const;
  std::string* mutable_rowdata(int index);
  void set_rowdata(int index, const std::string& value);
  void set_rowdata(int index, std::string&& value);
  void set_rowdata(int index, const char* value);
  void set_rowdata(int index, const char* value, size_t size);
  std::string* add_rowdata();
  void add_rowdata(const std::string& value);
  void add_rowdata(std::string&& value);
  void add_rowdata(const char* value);
  void add_rowdata(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rowdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rowdata();
  private:
  const std::string& _internal_rowdata(int index) const;
  std::string* _internal_add_rowdata();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCCSVRowData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rowdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCCSVData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCCSVData) */ {
 public:
  inline UGCCSVData() : UGCCSVData(nullptr) {}
  ~UGCCSVData() override;
  explicit PROTOBUF_CONSTEXPR UGCCSVData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCCSVData(const UGCCSVData& from);
  UGCCSVData(UGCCSVData&& from) noexcept
    : UGCCSVData() {
    *this = ::std::move(from);
  }

  inline UGCCSVData& operator=(const UGCCSVData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCCSVData& operator=(UGCCSVData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCCSVData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCCSVData* internal_default_instance() {
    return reinterpret_cast<const UGCCSVData*>(
               &_UGCCSVData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UGCCSVData& a, UGCCSVData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCCSVData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCCSVData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCCSVData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCCSVData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCCSVData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCCSVData& from) {
    UGCCSVData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCCSVData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCCSVData";
  }
  protected:
  explicit UGCCSVData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCSVDataFieldNumber = 1,
  };
  // repeated .message.UGCCSVRowData CSVData = 1;
  int csvdata_size() const;
  private:
  int _internal_csvdata_size() const;
  public:
  void clear_csvdata();
  ::message::UGCCSVRowData* mutable_csvdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCSVRowData >*
      mutable_csvdata();
  private:
  const ::message::UGCCSVRowData& _internal_csvdata(int index) const;
  ::message::UGCCSVRowData* _internal_add_csvdata();
  public:
  const ::message::UGCCSVRowData& csvdata(int index) const;
  ::message::UGCCSVRowData* add_csvdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCSVRowData >&
      csvdata() const;

  // @@protoc_insertion_point(class_scope:message.UGCCSVData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCSVRowData > csvdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResFFBuildin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResFFBuildin) */ {
 public:
  inline UGCResFFBuildin() : UGCResFFBuildin(nullptr) {}
  ~UGCResFFBuildin() override;
  explicit PROTOBUF_CONSTEXPR UGCResFFBuildin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResFFBuildin(const UGCResFFBuildin& from);
  UGCResFFBuildin(UGCResFFBuildin&& from) noexcept
    : UGCResFFBuildin() {
    *this = ::std::move(from);
  }

  inline UGCResFFBuildin& operator=(const UGCResFFBuildin& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResFFBuildin& operator=(UGCResFFBuildin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResFFBuildin& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResFFBuildin* internal_default_instance() {
    return reinterpret_cast<const UGCResFFBuildin*>(
               &_UGCResFFBuildin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UGCResFFBuildin& a, UGCResFFBuildin& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResFFBuildin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResFFBuildin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResFFBuildin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResFFBuildin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResFFBuildin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResFFBuildin& from) {
    UGCResFFBuildin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResFFBuildin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResFFBuildin";
  }
  protected:
  explicit UGCResFFBuildin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFFResourceNameFieldNumber = 1,
  };
  // string FFResourceName = 1;
  void clear_ffresourcename();
  const std::string& ffresourcename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ffresourcename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ffresourcename();
  PROTOBUF_NODISCARD std::string* release_ffresourcename();
  void set_allocated_ffresourcename(std::string* ffresourcename);
  private:
  const std::string& _internal_ffresourcename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ffresourcename(const std::string& value);
  std::string* _internal_mutable_ffresourcename();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResFFBuildin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ffresourcename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResAnimationStateClipData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResAnimationStateClipData) */ {
 public:
  inline UGCResAnimationStateClipData() : UGCResAnimationStateClipData(nullptr) {}
  ~UGCResAnimationStateClipData() override;
  explicit PROTOBUF_CONSTEXPR UGCResAnimationStateClipData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResAnimationStateClipData(const UGCResAnimationStateClipData& from);
  UGCResAnimationStateClipData(UGCResAnimationStateClipData&& from) noexcept
    : UGCResAnimationStateClipData() {
    *this = ::std::move(from);
  }

  inline UGCResAnimationStateClipData& operator=(const UGCResAnimationStateClipData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResAnimationStateClipData& operator=(UGCResAnimationStateClipData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResAnimationStateClipData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResAnimationStateClipData* internal_default_instance() {
    return reinterpret_cast<const UGCResAnimationStateClipData*>(
               &_UGCResAnimationStateClipData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UGCResAnimationStateClipData& a, UGCResAnimationStateClipData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResAnimationStateClipData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResAnimationStateClipData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResAnimationStateClipData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResAnimationStateClipData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResAnimationStateClipData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResAnimationStateClipData& from) {
    UGCResAnimationStateClipData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResAnimationStateClipData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResAnimationStateClipData";
  }
  protected:
  explicit UGCResAnimationStateClipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipUUIDFieldNumber = 1,
    kClipNameFieldNumber = 2,
    kIsLoopFieldNumber = 3,
    kPlaySpeedFieldNumber = 4,
    kLengthFieldNumber = 5,
  };
  // string ClipUUID = 1;
  void clear_clipuuid();
  const std::string& clipuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clipuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clipuuid();
  PROTOBUF_NODISCARD std::string* release_clipuuid();
  void set_allocated_clipuuid(std::string* clipuuid);
  private:
  const std::string& _internal_clipuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clipuuid(const std::string& value);
  std::string* _internal_mutable_clipuuid();
  public:

  // string ClipName = 2;
  void clear_clipname();
  const std::string& clipname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clipname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clipname();
  PROTOBUF_NODISCARD std::string* release_clipname();
  void set_allocated_clipname(std::string* clipname);
  private:
  const std::string& _internal_clipname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clipname(const std::string& value);
  std::string* _internal_mutable_clipname();
  public:

  // bool IsLoop = 3;
  void clear_isloop();
  bool isloop() const;
  void set_isloop(bool value);
  private:
  bool _internal_isloop() const;
  void _internal_set_isloop(bool value);
  public:

  // float PlaySpeed = 4;
  void clear_playspeed();
  float playspeed() const;
  void set_playspeed(float value);
  private:
  float _internal_playspeed() const;
  void _internal_set_playspeed(float value);
  public:

  // float Length = 5;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResAnimationStateClipData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clipuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clipname_;
    bool isloop_;
    float playspeed_;
    float length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResAnimationStateData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResAnimationStateData) */ {
 public:
  inline UGCResAnimationStateData() : UGCResAnimationStateData(nullptr) {}
  ~UGCResAnimationStateData() override;
  explicit PROTOBUF_CONSTEXPR UGCResAnimationStateData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResAnimationStateData(const UGCResAnimationStateData& from);
  UGCResAnimationStateData(UGCResAnimationStateData&& from) noexcept
    : UGCResAnimationStateData() {
    *this = ::std::move(from);
  }

  inline UGCResAnimationStateData& operator=(const UGCResAnimationStateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResAnimationStateData& operator=(UGCResAnimationStateData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResAnimationStateData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResAnimationStateData* internal_default_instance() {
    return reinterpret_cast<const UGCResAnimationStateData*>(
               &_UGCResAnimationStateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UGCResAnimationStateData& a, UGCResAnimationStateData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResAnimationStateData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResAnimationStateData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResAnimationStateData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResAnimationStateData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResAnimationStateData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResAnimationStateData& from) {
    UGCResAnimationStateData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResAnimationStateData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResAnimationStateData";
  }
  protected:
  explicit UGCResAnimationStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipsFieldNumber = 3,
    kStateNameFieldNumber = 1,
    kIsLoopFieldNumber = 2,
  };
  // repeated .message.UGCResAnimationStateClipData Clips = 3;
  int clips_size() const;
  private:
  int _internal_clips_size() const;
  public:
  void clear_clips();
  ::message::UGCResAnimationStateClipData* mutable_clips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateClipData >*
      mutable_clips();
  private:
  const ::message::UGCResAnimationStateClipData& _internal_clips(int index) const;
  ::message::UGCResAnimationStateClipData* _internal_add_clips();
  public:
  const ::message::UGCResAnimationStateClipData& clips(int index) const;
  ::message::UGCResAnimationStateClipData* add_clips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateClipData >&
      clips() const;

  // string StateName = 1;
  void clear_statename();
  const std::string& statename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statename();
  PROTOBUF_NODISCARD std::string* release_statename();
  void set_allocated_statename(std::string* statename);
  private:
  const std::string& _internal_statename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statename(const std::string& value);
  std::string* _internal_mutable_statename();
  public:

  // bool IsLoop = 2;
  void clear_isloop();
  bool isloop() const;
  void set_isloop(bool value);
  private:
  bool _internal_isloop() const;
  void _internal_set_isloop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResAnimationStateData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateClipData > clips_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statename_;
    bool isloop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResAnimationControllerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResAnimationControllerData) */ {
 public:
  inline UGCResAnimationControllerData() : UGCResAnimationControllerData(nullptr) {}
  ~UGCResAnimationControllerData() override;
  explicit PROTOBUF_CONSTEXPR UGCResAnimationControllerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResAnimationControllerData(const UGCResAnimationControllerData& from);
  UGCResAnimationControllerData(UGCResAnimationControllerData&& from) noexcept
    : UGCResAnimationControllerData() {
    *this = ::std::move(from);
  }

  inline UGCResAnimationControllerData& operator=(const UGCResAnimationControllerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResAnimationControllerData& operator=(UGCResAnimationControllerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResAnimationControllerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResAnimationControllerData* internal_default_instance() {
    return reinterpret_cast<const UGCResAnimationControllerData*>(
               &_UGCResAnimationControllerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UGCResAnimationControllerData& a, UGCResAnimationControllerData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResAnimationControllerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResAnimationControllerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResAnimationControllerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResAnimationControllerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResAnimationControllerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResAnimationControllerData& from) {
    UGCResAnimationControllerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResAnimationControllerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResAnimationControllerData";
  }
  protected:
  explicit UGCResAnimationControllerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .message.UGCResAnimationStateData States = 1;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::message::UGCResAnimationStateData* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateData >*
      mutable_states();
  private:
  const ::message::UGCResAnimationStateData& _internal_states(int index) const;
  ::message::UGCResAnimationStateData* _internal_add_states();
  public:
  const ::message::UGCResAnimationStateData& states(int index) const;
  ::message::UGCResAnimationStateData* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateData >&
      states() const;

  // @@protoc_insertion_point(class_scope:message.UGCResAnimationControllerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateData > states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResBoneNodeCapsuleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResBoneNodeCapsuleData) */ {
 public:
  inline UGCResBoneNodeCapsuleData() : UGCResBoneNodeCapsuleData(nullptr) {}
  ~UGCResBoneNodeCapsuleData() override;
  explicit PROTOBUF_CONSTEXPR UGCResBoneNodeCapsuleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResBoneNodeCapsuleData(const UGCResBoneNodeCapsuleData& from);
  UGCResBoneNodeCapsuleData(UGCResBoneNodeCapsuleData&& from) noexcept
    : UGCResBoneNodeCapsuleData() {
    *this = ::std::move(from);
  }

  inline UGCResBoneNodeCapsuleData& operator=(const UGCResBoneNodeCapsuleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResBoneNodeCapsuleData& operator=(UGCResBoneNodeCapsuleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResBoneNodeCapsuleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResBoneNodeCapsuleData* internal_default_instance() {
    return reinterpret_cast<const UGCResBoneNodeCapsuleData*>(
               &_UGCResBoneNodeCapsuleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UGCResBoneNodeCapsuleData& a, UGCResBoneNodeCapsuleData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResBoneNodeCapsuleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResBoneNodeCapsuleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResBoneNodeCapsuleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResBoneNodeCapsuleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResBoneNodeCapsuleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResBoneNodeCapsuleData& from) {
    UGCResBoneNodeCapsuleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResBoneNodeCapsuleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResBoneNodeCapsuleData";
  }
  protected:
  explicit UGCResBoneNodeCapsuleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kHeightFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kBodyTypeFieldNumber = 5,
  };
  // .message.ProtoBuffVector3 Center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::message::ProtoBuffVector3& center() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_center();
  ::message::ProtoBuffVector3* mutable_center();
  void set_allocated_center(::message::ProtoBuffVector3* center);
  private:
  const ::message::ProtoBuffVector3& _internal_center() const;
  ::message::ProtoBuffVector3* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::message::ProtoBuffVector3* center);
  ::message::ProtoBuffVector3* unsafe_arena_release_center();

  // float Radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float Height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // int32 Direction = 4;
  void clear_direction();
  int32_t direction() const;
  void set_direction(int32_t value);
  private:
  int32_t _internal_direction() const;
  void _internal_set_direction(int32_t value);
  public:

  // int32 BodyType = 5;
  void clear_bodytype();
  int32_t bodytype() const;
  void set_bodytype(int32_t value);
  private:
  int32_t _internal_bodytype() const;
  void _internal_set_bodytype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResBoneNodeCapsuleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::ProtoBuffVector3* center_;
    float radius_;
    float height_;
    int32_t direction_;
    int32_t bodytype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResBoneNodeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResBoneNodeData) */ {
 public:
  inline UGCResBoneNodeData() : UGCResBoneNodeData(nullptr) {}
  ~UGCResBoneNodeData() override;
  explicit PROTOBUF_CONSTEXPR UGCResBoneNodeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResBoneNodeData(const UGCResBoneNodeData& from);
  UGCResBoneNodeData(UGCResBoneNodeData&& from) noexcept
    : UGCResBoneNodeData() {
    *this = ::std::move(from);
  }

  inline UGCResBoneNodeData& operator=(const UGCResBoneNodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResBoneNodeData& operator=(UGCResBoneNodeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResBoneNodeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResBoneNodeData* internal_default_instance() {
    return reinterpret_cast<const UGCResBoneNodeData*>(
               &_UGCResBoneNodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UGCResBoneNodeData& a, UGCResBoneNodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResBoneNodeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResBoneNodeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResBoneNodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResBoneNodeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResBoneNodeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResBoneNodeData& from) {
    UGCResBoneNodeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResBoneNodeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResBoneNodeData";
  }
  protected:
  explicit UGCResBoneNodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildBonesFieldNumber = 6,
    kBoneNameFieldNumber = 1,
    kLocalPositionFieldNumber = 2,
    kLocalScaleFieldNumber = 3,
    kLocalRotationFieldNumber = 4,
    kCapsuleInfoFieldNumber = 5,
  };
  // repeated .message.UGCResBoneNodeData ChildBones = 6;
  int childbones_size() const;
  private:
  int _internal_childbones_size() const;
  public:
  void clear_childbones();
  ::message::UGCResBoneNodeData* mutable_childbones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResBoneNodeData >*
      mutable_childbones();
  private:
  const ::message::UGCResBoneNodeData& _internal_childbones(int index) const;
  ::message::UGCResBoneNodeData* _internal_add_childbones();
  public:
  const ::message::UGCResBoneNodeData& childbones(int index) const;
  ::message::UGCResBoneNodeData* add_childbones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResBoneNodeData >&
      childbones() const;

  // string BoneName = 1;
  void clear_bonename();
  const std::string& bonename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bonename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bonename();
  PROTOBUF_NODISCARD std::string* release_bonename();
  void set_allocated_bonename(std::string* bonename);
  private:
  const std::string& _internal_bonename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bonename(const std::string& value);
  std::string* _internal_mutable_bonename();
  public:

  // .message.ProtoBuffVector3 LocalPosition = 2;
  bool has_localposition() const;
  private:
  bool _internal_has_localposition() const;
  public:
  void clear_localposition();
  const ::message::ProtoBuffVector3& localposition() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_localposition();
  ::message::ProtoBuffVector3* mutable_localposition();
  void set_allocated_localposition(::message::ProtoBuffVector3* localposition);
  private:
  const ::message::ProtoBuffVector3& _internal_localposition() const;
  ::message::ProtoBuffVector3* _internal_mutable_localposition();
  public:
  void unsafe_arena_set_allocated_localposition(
      ::message::ProtoBuffVector3* localposition);
  ::message::ProtoBuffVector3* unsafe_arena_release_localposition();

  // .message.ProtoBuffVector3 LocalScale = 3;
  bool has_localscale() const;
  private:
  bool _internal_has_localscale() const;
  public:
  void clear_localscale();
  const ::message::ProtoBuffVector3& localscale() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_localscale();
  ::message::ProtoBuffVector3* mutable_localscale();
  void set_allocated_localscale(::message::ProtoBuffVector3* localscale);
  private:
  const ::message::ProtoBuffVector3& _internal_localscale() const;
  ::message::ProtoBuffVector3* _internal_mutable_localscale();
  public:
  void unsafe_arena_set_allocated_localscale(
      ::message::ProtoBuffVector3* localscale);
  ::message::ProtoBuffVector3* unsafe_arena_release_localscale();

  // .message.ProtoBuffQuaternion LocalRotation = 4;
  bool has_localrotation() const;
  private:
  bool _internal_has_localrotation() const;
  public:
  void clear_localrotation();
  const ::message::ProtoBuffQuaternion& localrotation() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffQuaternion* release_localrotation();
  ::message::ProtoBuffQuaternion* mutable_localrotation();
  void set_allocated_localrotation(::message::ProtoBuffQuaternion* localrotation);
  private:
  const ::message::ProtoBuffQuaternion& _internal_localrotation() const;
  ::message::ProtoBuffQuaternion* _internal_mutable_localrotation();
  public:
  void unsafe_arena_set_allocated_localrotation(
      ::message::ProtoBuffQuaternion* localrotation);
  ::message::ProtoBuffQuaternion* unsafe_arena_release_localrotation();

  // .message.UGCResBoneNodeCapsuleData CapsuleInfo = 5;
  bool has_capsuleinfo() const;
  private:
  bool _internal_has_capsuleinfo() const;
  public:
  void clear_capsuleinfo();
  const ::message::UGCResBoneNodeCapsuleData& capsuleinfo() const;
  PROTOBUF_NODISCARD ::message::UGCResBoneNodeCapsuleData* release_capsuleinfo();
  ::message::UGCResBoneNodeCapsuleData* mutable_capsuleinfo();
  void set_allocated_capsuleinfo(::message::UGCResBoneNodeCapsuleData* capsuleinfo);
  private:
  const ::message::UGCResBoneNodeCapsuleData& _internal_capsuleinfo() const;
  ::message::UGCResBoneNodeCapsuleData* _internal_mutable_capsuleinfo();
  public:
  void unsafe_arena_set_allocated_capsuleinfo(
      ::message::UGCResBoneNodeCapsuleData* capsuleinfo);
  ::message::UGCResBoneNodeCapsuleData* unsafe_arena_release_capsuleinfo();

  // @@protoc_insertion_point(class_scope:message.UGCResBoneNodeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResBoneNodeData > childbones_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bonename_;
    ::message::ProtoBuffVector3* localposition_;
    ::message::ProtoBuffVector3* localscale_;
    ::message::ProtoBuffQuaternion* localrotation_;
    ::message::UGCResBoneNodeCapsuleData* capsuleinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResSkeletonData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResSkeletonData) */ {
 public:
  inline UGCResSkeletonData() : UGCResSkeletonData(nullptr) {}
  ~UGCResSkeletonData() override;
  explicit PROTOBUF_CONSTEXPR UGCResSkeletonData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResSkeletonData(const UGCResSkeletonData& from);
  UGCResSkeletonData(UGCResSkeletonData&& from) noexcept
    : UGCResSkeletonData() {
    *this = ::std::move(from);
  }

  inline UGCResSkeletonData& operator=(const UGCResSkeletonData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResSkeletonData& operator=(UGCResSkeletonData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResSkeletonData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResSkeletonData* internal_default_instance() {
    return reinterpret_cast<const UGCResSkeletonData*>(
               &_UGCResSkeletonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UGCResSkeletonData& a, UGCResSkeletonData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResSkeletonData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResSkeletonData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResSkeletonData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResSkeletonData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResSkeletonData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResSkeletonData& from) {
    UGCResSkeletonData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResSkeletonData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResSkeletonData";
  }
  protected:
  explicit UGCResSkeletonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootBoneFieldNumber = 1,
  };
  // .message.UGCResBoneNodeData RootBone = 1;
  bool has_rootbone() const;
  private:
  bool _internal_has_rootbone() const;
  public:
  void clear_rootbone();
  const ::message::UGCResBoneNodeData& rootbone() const;
  PROTOBUF_NODISCARD ::message::UGCResBoneNodeData* release_rootbone();
  ::message::UGCResBoneNodeData* mutable_rootbone();
  void set_allocated_rootbone(::message::UGCResBoneNodeData* rootbone);
  private:
  const ::message::UGCResBoneNodeData& _internal_rootbone() const;
  ::message::UGCResBoneNodeData* _internal_mutable_rootbone();
  public:
  void unsafe_arena_set_allocated_rootbone(
      ::message::UGCResBoneNodeData* rootbone);
  ::message::UGCResBoneNodeData* unsafe_arena_release_rootbone();

  // @@protoc_insertion_point(class_scope:message.UGCResSkeletonData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::message::UGCResBoneNodeData* rootbone_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResAvatarOnePartData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResAvatarOnePartData) */ {
 public:
  inline UGCResAvatarOnePartData() : UGCResAvatarOnePartData(nullptr) {}
  ~UGCResAvatarOnePartData() override;
  explicit PROTOBUF_CONSTEXPR UGCResAvatarOnePartData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResAvatarOnePartData(const UGCResAvatarOnePartData& from);
  UGCResAvatarOnePartData(UGCResAvatarOnePartData&& from) noexcept
    : UGCResAvatarOnePartData() {
    *this = ::std::move(from);
  }

  inline UGCResAvatarOnePartData& operator=(const UGCResAvatarOnePartData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResAvatarOnePartData& operator=(UGCResAvatarOnePartData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResAvatarOnePartData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResAvatarOnePartData* internal_default_instance() {
    return reinterpret_cast<const UGCResAvatarOnePartData*>(
               &_UGCResAvatarOnePartData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(UGCResAvatarOnePartData& a, UGCResAvatarOnePartData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResAvatarOnePartData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResAvatarOnePartData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResAvatarOnePartData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResAvatarOnePartData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResAvatarOnePartData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResAvatarOnePartData& from) {
    UGCResAvatarOnePartData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResAvatarOnePartData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResAvatarOnePartData";
  }
  protected:
  explicit UGCResAvatarOnePartData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGameObjResUUIDFieldNumber = 4,
    kBoneFieldNumber = 5,
    kLocalPositionFieldNumber = 7,
    kLocalScaleFieldNumber = 8,
    kLocalRotationFieldNumber = 9,
    kGroupIDFieldNumber = 2,
    kRepBitIndexFieldNumber = 3,
    kBindTypeFieldNumber = 6,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string GameObjResUUID = 4;
  void clear_gameobjresuuid();
  const std::string& gameobjresuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gameobjresuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gameobjresuuid();
  PROTOBUF_NODISCARD std::string* release_gameobjresuuid();
  void set_allocated_gameobjresuuid(std::string* gameobjresuuid);
  private:
  const std::string& _internal_gameobjresuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gameobjresuuid(const std::string& value);
  std::string* _internal_mutable_gameobjresuuid();
  public:

  // string Bone = 5;
  void clear_bone();
  const std::string& bone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bone();
  PROTOBUF_NODISCARD std::string* release_bone();
  void set_allocated_bone(std::string* bone);
  private:
  const std::string& _internal_bone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bone(const std::string& value);
  std::string* _internal_mutable_bone();
  public:

  // .message.ProtoBuffVector3 LocalPosition = 7;
  bool has_localposition() const;
  private:
  bool _internal_has_localposition() const;
  public:
  void clear_localposition();
  const ::message::ProtoBuffVector3& localposition() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_localposition();
  ::message::ProtoBuffVector3* mutable_localposition();
  void set_allocated_localposition(::message::ProtoBuffVector3* localposition);
  private:
  const ::message::ProtoBuffVector3& _internal_localposition() const;
  ::message::ProtoBuffVector3* _internal_mutable_localposition();
  public:
  void unsafe_arena_set_allocated_localposition(
      ::message::ProtoBuffVector3* localposition);
  ::message::ProtoBuffVector3* unsafe_arena_release_localposition();

  // .message.ProtoBuffVector3 LocalScale = 8;
  bool has_localscale() const;
  private:
  bool _internal_has_localscale() const;
  public:
  void clear_localscale();
  const ::message::ProtoBuffVector3& localscale() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffVector3* release_localscale();
  ::message::ProtoBuffVector3* mutable_localscale();
  void set_allocated_localscale(::message::ProtoBuffVector3* localscale);
  private:
  const ::message::ProtoBuffVector3& _internal_localscale() const;
  ::message::ProtoBuffVector3* _internal_mutable_localscale();
  public:
  void unsafe_arena_set_allocated_localscale(
      ::message::ProtoBuffVector3* localscale);
  ::message::ProtoBuffVector3* unsafe_arena_release_localscale();

  // .message.ProtoBuffQuaternion LocalRotation = 9;
  bool has_localrotation() const;
  private:
  bool _internal_has_localrotation() const;
  public:
  void clear_localrotation();
  const ::message::ProtoBuffQuaternion& localrotation() const;
  PROTOBUF_NODISCARD ::message::ProtoBuffQuaternion* release_localrotation();
  ::message::ProtoBuffQuaternion* mutable_localrotation();
  void set_allocated_localrotation(::message::ProtoBuffQuaternion* localrotation);
  private:
  const ::message::ProtoBuffQuaternion& _internal_localrotation() const;
  ::message::ProtoBuffQuaternion* _internal_mutable_localrotation();
  public:
  void unsafe_arena_set_allocated_localrotation(
      ::message::ProtoBuffQuaternion* localrotation);
  ::message::ProtoBuffQuaternion* unsafe_arena_release_localrotation();

  // int32 GroupID = 2;
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // int32 RepBitIndex = 3;
  void clear_repbitindex();
  int32_t repbitindex() const;
  void set_repbitindex(int32_t value);
  private:
  int32_t _internal_repbitindex() const;
  void _internal_set_repbitindex(int32_t value);
  public:

  // int32 BindType = 6;
  void clear_bindtype();
  int32_t bindtype() const;
  void set_bindtype(int32_t value);
  private:
  int32_t _internal_bindtype() const;
  void _internal_set_bindtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResAvatarOnePartData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameobjresuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bone_;
    ::message::ProtoBuffVector3* localposition_;
    ::message::ProtoBuffVector3* localscale_;
    ::message::ProtoBuffQuaternion* localrotation_;
    int32_t groupid_;
    int32_t repbitindex_;
    int32_t bindtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResOneAvatarData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResOneAvatarData) */ {
 public:
  inline UGCResOneAvatarData() : UGCResOneAvatarData(nullptr) {}
  ~UGCResOneAvatarData() override;
  explicit PROTOBUF_CONSTEXPR UGCResOneAvatarData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResOneAvatarData(const UGCResOneAvatarData& from);
  UGCResOneAvatarData(UGCResOneAvatarData&& from) noexcept
    : UGCResOneAvatarData() {
    *this = ::std::move(from);
  }

  inline UGCResOneAvatarData& operator=(const UGCResOneAvatarData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResOneAvatarData& operator=(UGCResOneAvatarData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResOneAvatarData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResOneAvatarData* internal_default_instance() {
    return reinterpret_cast<const UGCResOneAvatarData*>(
               &_UGCResOneAvatarData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UGCResOneAvatarData& a, UGCResOneAvatarData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResOneAvatarData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResOneAvatarData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResOneAvatarData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResOneAvatarData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResOneAvatarData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResOneAvatarData& from) {
    UGCResOneAvatarData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResOneAvatarData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResOneAvatarData";
  }
  protected:
  explicit UGCResOneAvatarData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartListFieldNumber = 7,
    kSkeletonResUUIDFieldNumber = 1,
    kDefaultVisableMask1FieldNumber = 3,
    kDefaultVisableMask2FieldNumber = 4,
    kDefaultVisableMask3FieldNumber = 5,
    kPreloadAllPartFieldNumber = 2,
    kAutoCombineMeshFieldNumber = 8,
    kDefaultVisableMask4FieldNumber = 6,
  };
  // repeated .message.UGCResAvatarOnePartData PartList = 7;
  int partlist_size() const;
  private:
  int _internal_partlist_size() const;
  public:
  void clear_partlist();
  ::message::UGCResAvatarOnePartData* mutable_partlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAvatarOnePartData >*
      mutable_partlist();
  private:
  const ::message::UGCResAvatarOnePartData& _internal_partlist(int index) const;
  ::message::UGCResAvatarOnePartData* _internal_add_partlist();
  public:
  const ::message::UGCResAvatarOnePartData& partlist(int index) const;
  ::message::UGCResAvatarOnePartData* add_partlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAvatarOnePartData >&
      partlist() const;

  // string SkeletonResUUID = 1;
  void clear_skeletonresuuid();
  const std::string& skeletonresuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skeletonresuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skeletonresuuid();
  PROTOBUF_NODISCARD std::string* release_skeletonresuuid();
  void set_allocated_skeletonresuuid(std::string* skeletonresuuid);
  private:
  const std::string& _internal_skeletonresuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skeletonresuuid(const std::string& value);
  std::string* _internal_mutable_skeletonresuuid();
  public:

  // int32 DefaultVisableMask1 = 3;
  void clear_defaultvisablemask1();
  int32_t defaultvisablemask1() const;
  void set_defaultvisablemask1(int32_t value);
  private:
  int32_t _internal_defaultvisablemask1() const;
  void _internal_set_defaultvisablemask1(int32_t value);
  public:

  // int32 DefaultVisableMask2 = 4;
  void clear_defaultvisablemask2();
  int32_t defaultvisablemask2() const;
  void set_defaultvisablemask2(int32_t value);
  private:
  int32_t _internal_defaultvisablemask2() const;
  void _internal_set_defaultvisablemask2(int32_t value);
  public:

  // int32 DefaultVisableMask3 = 5;
  void clear_defaultvisablemask3();
  int32_t defaultvisablemask3() const;
  void set_defaultvisablemask3(int32_t value);
  private:
  int32_t _internal_defaultvisablemask3() const;
  void _internal_set_defaultvisablemask3(int32_t value);
  public:

  // bool PreloadAllPart = 2;
  void clear_preloadallpart();
  bool preloadallpart() const;
  void set_preloadallpart(bool value);
  private:
  bool _internal_preloadallpart() const;
  void _internal_set_preloadallpart(bool value);
  public:

  // bool AutoCombineMesh = 8;
  void clear_autocombinemesh();
  bool autocombinemesh() const;
  void set_autocombinemesh(bool value);
  private:
  bool _internal_autocombinemesh() const;
  void _internal_set_autocombinemesh(bool value);
  public:

  // int32 DefaultVisableMask4 = 6;
  void clear_defaultvisablemask4();
  int32_t defaultvisablemask4() const;
  void set_defaultvisablemask4(int32_t value);
  private:
  int32_t _internal_defaultvisablemask4() const;
  void _internal_set_defaultvisablemask4(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResOneAvatarData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAvatarOnePartData > partlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skeletonresuuid_;
    int32_t defaultvisablemask1_;
    int32_t defaultvisablemask2_;
    int32_t defaultvisablemask3_;
    bool preloadallpart_;
    bool autocombinemesh_;
    int32_t defaultvisablemask4_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResSkinnedMeshExtData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResSkinnedMeshExtData) */ {
 public:
  inline UGCResSkinnedMeshExtData() : UGCResSkinnedMeshExtData(nullptr) {}
  ~UGCResSkinnedMeshExtData() override;
  explicit PROTOBUF_CONSTEXPR UGCResSkinnedMeshExtData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResSkinnedMeshExtData(const UGCResSkinnedMeshExtData& from);
  UGCResSkinnedMeshExtData(UGCResSkinnedMeshExtData&& from) noexcept
    : UGCResSkinnedMeshExtData() {
    *this = ::std::move(from);
  }

  inline UGCResSkinnedMeshExtData& operator=(const UGCResSkinnedMeshExtData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResSkinnedMeshExtData& operator=(UGCResSkinnedMeshExtData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResSkinnedMeshExtData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResSkinnedMeshExtData* internal_default_instance() {
    return reinterpret_cast<const UGCResSkinnedMeshExtData*>(
               &_UGCResSkinnedMeshExtData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(UGCResSkinnedMeshExtData& a, UGCResSkinnedMeshExtData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResSkinnedMeshExtData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResSkinnedMeshExtData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResSkinnedMeshExtData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResSkinnedMeshExtData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResSkinnedMeshExtData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResSkinnedMeshExtData& from) {
    UGCResSkinnedMeshExtData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResSkinnedMeshExtData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResSkinnedMeshExtData";
  }
  protected:
  explicit UGCResSkinnedMeshExtData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoneNamesFieldNumber = 1,
  };
  // repeated string BoneNames = 1;
  int bonenames_size() const;
  private:
  int _internal_bonenames_size() const;
  public:
  void clear_bonenames();
  const std::string& bonenames(int index) const;
  std::string* mutable_bonenames(int index);
  void set_bonenames(int index, const std::string& value);
  void set_bonenames(int index, std::string&& value);
  void set_bonenames(int index, const char* value);
  void set_bonenames(int index, const char* value, size_t size);
  std::string* add_bonenames();
  void add_bonenames(const std::string& value);
  void add_bonenames(std::string&& value);
  void add_bonenames(const char* value);
  void add_bonenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bonenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bonenames();
  private:
  const std::string& _internal_bonenames(int index) const;
  std::string* _internal_add_bonenames();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResSkinnedMeshExtData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bonenames_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResAnimKeyFrameFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResAnimKeyFrameFloat) */ {
 public:
  inline UGCResAnimKeyFrameFloat() : UGCResAnimKeyFrameFloat(nullptr) {}
  ~UGCResAnimKeyFrameFloat() override;
  explicit PROTOBUF_CONSTEXPR UGCResAnimKeyFrameFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResAnimKeyFrameFloat(const UGCResAnimKeyFrameFloat& from);
  UGCResAnimKeyFrameFloat(UGCResAnimKeyFrameFloat&& from) noexcept
    : UGCResAnimKeyFrameFloat() {
    *this = ::std::move(from);
  }

  inline UGCResAnimKeyFrameFloat& operator=(const UGCResAnimKeyFrameFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResAnimKeyFrameFloat& operator=(UGCResAnimKeyFrameFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResAnimKeyFrameFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResAnimKeyFrameFloat* internal_default_instance() {
    return reinterpret_cast<const UGCResAnimKeyFrameFloat*>(
               &_UGCResAnimKeyFrameFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UGCResAnimKeyFrameFloat& a, UGCResAnimKeyFrameFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResAnimKeyFrameFloat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResAnimKeyFrameFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResAnimKeyFrameFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResAnimKeyFrameFloat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResAnimKeyFrameFloat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResAnimKeyFrameFloat& from) {
    UGCResAnimKeyFrameFloat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResAnimKeyFrameFloat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResAnimKeyFrameFloat";
  }
  protected:
  explicit UGCResAnimKeyFrameFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kWeightedModeFieldNumber = 2,
    kValueFieldNumber = 3,
    kInSlopeFieldNumber = 4,
    kOutSlopeFieldNumber = 5,
    kInWeightFieldNumber = 6,
    kOutWeightFieldNumber = 7,
  };
  // float Time = 1;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // int32 WeightedMode = 2;
  void clear_weightedmode();
  int32_t weightedmode() const;
  void set_weightedmode(int32_t value);
  private:
  int32_t _internal_weightedmode() const;
  void _internal_set_weightedmode(int32_t value);
  public:

  // float Value = 3;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // float InSlope = 4;
  void clear_inslope();
  float inslope() const;
  void set_inslope(float value);
  private:
  float _internal_inslope() const;
  void _internal_set_inslope(float value);
  public:

  // float OutSlope = 5;
  void clear_outslope();
  float outslope() const;
  void set_outslope(float value);
  private:
  float _internal_outslope() const;
  void _internal_set_outslope(float value);
  public:

  // float InWeight = 6;
  void clear_inweight();
  float inweight() const;
  void set_inweight(float value);
  private:
  float _internal_inweight() const;
  void _internal_set_inweight(float value);
  public:

  // float OutWeight = 7;
  void clear_outweight();
  float outweight() const;
  void set_outweight(float value);
  private:
  float _internal_outweight() const;
  void _internal_set_outweight(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResAnimKeyFrameFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float time_;
    int32_t weightedmode_;
    float value_;
    float inslope_;
    float outslope_;
    float inweight_;
    float outweight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class FBXAnimationCurve final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.FBXAnimationCurve) */ {
 public:
  inline FBXAnimationCurve() : FBXAnimationCurve(nullptr) {}
  ~FBXAnimationCurve() override;
  explicit PROTOBUF_CONSTEXPR FBXAnimationCurve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FBXAnimationCurve(const FBXAnimationCurve& from);
  FBXAnimationCurve(FBXAnimationCurve&& from) noexcept
    : FBXAnimationCurve() {
    *this = ::std::move(from);
  }

  inline FBXAnimationCurve& operator=(const FBXAnimationCurve& from) {
    CopyFrom(from);
    return *this;
  }
  inline FBXAnimationCurve& operator=(FBXAnimationCurve&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FBXAnimationCurve& default_instance() {
    return *internal_default_instance();
  }
  static inline const FBXAnimationCurve* internal_default_instance() {
    return reinterpret_cast<const FBXAnimationCurve*>(
               &_FBXAnimationCurve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FBXAnimationCurve& a, FBXAnimationCurve& b) {
    a.Swap(&b);
  }
  inline void Swap(FBXAnimationCurve* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FBXAnimationCurve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FBXAnimationCurve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FBXAnimationCurve>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FBXAnimationCurve& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FBXAnimationCurve& from) {
    FBXAnimationCurve::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FBXAnimationCurve* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.FBXAnimationCurve";
  }
  protected:
  explicit FBXAnimationCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 1,
  };
  // repeated .message.UGCResAnimKeyFrameFloat Keyframes = 1;
  int keyframes_size() const;
  private:
  int _internal_keyframes_size() const;
  public:
  void clear_keyframes();
  ::message::UGCResAnimKeyFrameFloat* mutable_keyframes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimKeyFrameFloat >*
      mutable_keyframes();
  private:
  const ::message::UGCResAnimKeyFrameFloat& _internal_keyframes(int index) const;
  ::message::UGCResAnimKeyFrameFloat* _internal_add_keyframes();
  public:
  const ::message::UGCResAnimKeyFrameFloat& keyframes(int index) const;
  ::message::UGCResAnimKeyFrameFloat* add_keyframes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimKeyFrameFloat >&
      keyframes() const;

  // @@protoc_insertion_point(class_scope:message.FBXAnimationCurve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimKeyFrameFloat > keyframes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResAnimFloatCurves final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResAnimFloatCurves) */ {
 public:
  inline UGCResAnimFloatCurves() : UGCResAnimFloatCurves(nullptr) {}
  ~UGCResAnimFloatCurves() override;
  explicit PROTOBUF_CONSTEXPR UGCResAnimFloatCurves(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResAnimFloatCurves(const UGCResAnimFloatCurves& from);
  UGCResAnimFloatCurves(UGCResAnimFloatCurves&& from) noexcept
    : UGCResAnimFloatCurves() {
    *this = ::std::move(from);
  }

  inline UGCResAnimFloatCurves& operator=(const UGCResAnimFloatCurves& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResAnimFloatCurves& operator=(UGCResAnimFloatCurves&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResAnimFloatCurves& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResAnimFloatCurves* internal_default_instance() {
    return reinterpret_cast<const UGCResAnimFloatCurves*>(
               &_UGCResAnimFloatCurves_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(UGCResAnimFloatCurves& a, UGCResAnimFloatCurves& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResAnimFloatCurves* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResAnimFloatCurves* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResAnimFloatCurves* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResAnimFloatCurves>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResAnimFloatCurves& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResAnimFloatCurves& from) {
    UGCResAnimFloatCurves::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResAnimFloatCurves* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResAnimFloatCurves";
  }
  protected:
  explicit UGCResAnimFloatCurves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurveFieldNumber = 1,
    kClassNameFieldNumber = 2,
    kPropertyNameFieldNumber = 3,
  };
  // repeated .message.FBXAnimationCurve Curve = 1;
  int curve_size() const;
  private:
  int _internal_curve_size() const;
  public:
  void clear_curve();
  ::message::FBXAnimationCurve* mutable_curve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >*
      mutable_curve();
  private:
  const ::message::FBXAnimationCurve& _internal_curve(int index) const;
  ::message::FBXAnimationCurve* _internal_add_curve();
  public:
  const ::message::FBXAnimationCurve& curve(int index) const;
  ::message::FBXAnimationCurve* add_curve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >&
      curve() const;

  // string ClassName = 2;
  void clear_classname();
  const std::string& classname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_classname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_classname();
  PROTOBUF_NODISCARD std::string* release_classname();
  void set_allocated_classname(std::string* classname);
  private:
  const std::string& _internal_classname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_classname(const std::string& value);
  std::string* _internal_mutable_classname();
  public:

  // string PropertyName = 3;
  void clear_propertyname();
  const std::string& propertyname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_propertyname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_propertyname();
  PROTOBUF_NODISCARD std::string* release_propertyname();
  void set_allocated_propertyname(std::string* propertyname);
  private:
  const std::string& _internal_propertyname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_propertyname(const std::string& value);
  std::string* _internal_mutable_propertyname();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResAnimFloatCurves)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve > curve_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr propertyname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResAnimNodeCurves final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResAnimNodeCurves) */ {
 public:
  inline UGCResAnimNodeCurves() : UGCResAnimNodeCurves(nullptr) {}
  ~UGCResAnimNodeCurves() override;
  explicit PROTOBUF_CONSTEXPR UGCResAnimNodeCurves(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResAnimNodeCurves(const UGCResAnimNodeCurves& from);
  UGCResAnimNodeCurves(UGCResAnimNodeCurves&& from) noexcept
    : UGCResAnimNodeCurves() {
    *this = ::std::move(from);
  }

  inline UGCResAnimNodeCurves& operator=(const UGCResAnimNodeCurves& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResAnimNodeCurves& operator=(UGCResAnimNodeCurves&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResAnimNodeCurves& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResAnimNodeCurves* internal_default_instance() {
    return reinterpret_cast<const UGCResAnimNodeCurves*>(
               &_UGCResAnimNodeCurves_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UGCResAnimNodeCurves& a, UGCResAnimNodeCurves& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResAnimNodeCurves* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResAnimNodeCurves* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResAnimNodeCurves* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResAnimNodeCurves>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResAnimNodeCurves& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResAnimNodeCurves& from) {
    UGCResAnimNodeCurves::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResAnimNodeCurves* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResAnimNodeCurves";
  }
  protected:
  explicit UGCResAnimNodeCurves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 2,
    kTranslationFieldNumber = 3,
    kScaleFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated .message.FBXAnimationCurve Rotation = 2;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  ::message::FBXAnimationCurve* mutable_rotation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >*
      mutable_rotation();
  private:
  const ::message::FBXAnimationCurve& _internal_rotation(int index) const;
  ::message::FBXAnimationCurve* _internal_add_rotation();
  public:
  const ::message::FBXAnimationCurve& rotation(int index) const;
  ::message::FBXAnimationCurve* add_rotation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >&
      rotation() const;

  // repeated .message.FBXAnimationCurve Translation = 3;
  int translation_size() const;
  private:
  int _internal_translation_size() const;
  public:
  void clear_translation();
  ::message::FBXAnimationCurve* mutable_translation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >*
      mutable_translation();
  private:
  const ::message::FBXAnimationCurve& _internal_translation(int index) const;
  ::message::FBXAnimationCurve* _internal_add_translation();
  public:
  const ::message::FBXAnimationCurve& translation(int index) const;
  ::message::FBXAnimationCurve* add_translation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >&
      translation() const;

  // repeated .message.FBXAnimationCurve Scale = 4;
  int scale_size() const;
  private:
  int _internal_scale_size() const;
  public:
  void clear_scale();
  ::message::FBXAnimationCurve* mutable_scale(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >*
      mutable_scale();
  private:
  const ::message::FBXAnimationCurve& _internal_scale(int index) const;
  ::message::FBXAnimationCurve* _internal_add_scale();
  public:
  const ::message::FBXAnimationCurve& scale(int index) const;
  ::message::FBXAnimationCurve* add_scale();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >&
      scale() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResAnimNodeCurves)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve > rotation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve > translation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve > scale_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// -------------------------------------------------------------------

class UGCResAnimClipData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UGCResAnimClipData) */ {
 public:
  inline UGCResAnimClipData() : UGCResAnimClipData(nullptr) {}
  ~UGCResAnimClipData() override;
  explicit PROTOBUF_CONSTEXPR UGCResAnimClipData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UGCResAnimClipData(const UGCResAnimClipData& from);
  UGCResAnimClipData(UGCResAnimClipData&& from) noexcept
    : UGCResAnimClipData() {
    *this = ::std::move(from);
  }

  inline UGCResAnimClipData& operator=(const UGCResAnimClipData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UGCResAnimClipData& operator=(UGCResAnimClipData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UGCResAnimClipData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UGCResAnimClipData* internal_default_instance() {
    return reinterpret_cast<const UGCResAnimClipData*>(
               &_UGCResAnimClipData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UGCResAnimClipData& a, UGCResAnimClipData& b) {
    a.Swap(&b);
  }
  inline void Swap(UGCResAnimClipData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UGCResAnimClipData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UGCResAnimClipData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UGCResAnimClipData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UGCResAnimClipData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UGCResAnimClipData& from) {
    UGCResAnimClipData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UGCResAnimClipData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UGCResAnimClipData";
  }
  protected:
  explicit UGCResAnimClipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatAnimFieldNumber = 5,
    kNodeAnimFieldNumber = 6,
    kNameFieldNumber = 1,
    kBakeStartFieldNumber = 2,
    kBakeStopFieldNumber = 3,
    kSampleRateFieldNumber = 4,
  };
  // repeated .message.UGCResAnimFloatCurves FloatAnim = 5;
  int floatanim_size() const;
  private:
  int _internal_floatanim_size() const;
  public:
  void clear_floatanim();
  ::message::UGCResAnimFloatCurves* mutable_floatanim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimFloatCurves >*
      mutable_floatanim();
  private:
  const ::message::UGCResAnimFloatCurves& _internal_floatanim(int index) const;
  ::message::UGCResAnimFloatCurves* _internal_add_floatanim();
  public:
  const ::message::UGCResAnimFloatCurves& floatanim(int index) const;
  ::message::UGCResAnimFloatCurves* add_floatanim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimFloatCurves >&
      floatanim() const;

  // repeated .message.UGCResAnimNodeCurves NodeAnim = 6;
  int nodeanim_size() const;
  private:
  int _internal_nodeanim_size() const;
  public:
  void clear_nodeanim();
  ::message::UGCResAnimNodeCurves* mutable_nodeanim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimNodeCurves >*
      mutable_nodeanim();
  private:
  const ::message::UGCResAnimNodeCurves& _internal_nodeanim(int index) const;
  ::message::UGCResAnimNodeCurves* _internal_add_nodeanim();
  public:
  const ::message::UGCResAnimNodeCurves& nodeanim(int index) const;
  ::message::UGCResAnimNodeCurves* add_nodeanim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimNodeCurves >&
      nodeanim() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double BakeStart = 2;
  void clear_bakestart();
  double bakestart() const;
  void set_bakestart(double value);
  private:
  double _internal_bakestart() const;
  void _internal_set_bakestart(double value);
  public:

  // double BakeStop = 3;
  void clear_bakestop();
  double bakestop() const;
  void set_bakestop(double value);
  private:
  double _internal_bakestop() const;
  void _internal_set_bakestop(double value);
  public:

  // float SampleRate = 4;
  void clear_samplerate();
  float samplerate() const;
  void set_samplerate(float value);
  private:
  float _internal_samplerate() const;
  void _internal_set_samplerate(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.UGCResAnimClipData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimFloatCurves > floatanim_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimNodeCurves > nodeanim_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double bakestart_;
    double bakestop_;
    float samplerate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoBuffUGCResource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UGCColliderMeshData

// repeated float Vertexs = 1;
inline int UGCColliderMeshData::_internal_vertexs_size() const {
  return _impl_.vertexs_.size();
}
inline int UGCColliderMeshData::vertexs_size() const {
  return _internal_vertexs_size();
}
inline void UGCColliderMeshData::clear_vertexs() {
  _impl_.vertexs_.Clear();
}
inline float UGCColliderMeshData::_internal_vertexs(int index) const {
  return _impl_.vertexs_.Get(index);
}
inline float UGCColliderMeshData::vertexs(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCColliderMeshData.Vertexs)
  return _internal_vertexs(index);
}
inline void UGCColliderMeshData::set_vertexs(int index, float value) {
  _impl_.vertexs_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCColliderMeshData.Vertexs)
}
inline void UGCColliderMeshData::_internal_add_vertexs(float value) {
  _impl_.vertexs_.Add(value);
}
inline void UGCColliderMeshData::add_vertexs(float value) {
  _internal_add_vertexs(value);
  // @@protoc_insertion_point(field_add:message.UGCColliderMeshData.Vertexs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UGCColliderMeshData::_internal_vertexs() const {
  return _impl_.vertexs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UGCColliderMeshData::vertexs() const {
  // @@protoc_insertion_point(field_list:message.UGCColliderMeshData.Vertexs)
  return _internal_vertexs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UGCColliderMeshData::_internal_mutable_vertexs() {
  return &_impl_.vertexs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UGCColliderMeshData::mutable_vertexs() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCColliderMeshData.Vertexs)
  return _internal_mutable_vertexs();
}

// repeated int32 Indices = 2;
inline int UGCColliderMeshData::_internal_indices_size() const {
  return _impl_.indices_.size();
}
inline int UGCColliderMeshData::indices_size() const {
  return _internal_indices_size();
}
inline void UGCColliderMeshData::clear_indices() {
  _impl_.indices_.Clear();
}
inline int32_t UGCColliderMeshData::_internal_indices(int index) const {
  return _impl_.indices_.Get(index);
}
inline int32_t UGCColliderMeshData::indices(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCColliderMeshData.Indices)
  return _internal_indices(index);
}
inline void UGCColliderMeshData::set_indices(int index, int32_t value) {
  _impl_.indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.UGCColliderMeshData.Indices)
}
inline void UGCColliderMeshData::_internal_add_indices(int32_t value) {
  _impl_.indices_.Add(value);
}
inline void UGCColliderMeshData::add_indices(int32_t value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:message.UGCColliderMeshData.Indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCColliderMeshData::_internal_indices() const {
  return _impl_.indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UGCColliderMeshData::indices() const {
  // @@protoc_insertion_point(field_list:message.UGCColliderMeshData.Indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCColliderMeshData::_internal_mutable_indices() {
  return &_impl_.indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UGCColliderMeshData::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCColliderMeshData.Indices)
  return _internal_mutable_indices();
}

// -------------------------------------------------------------------

// UGCColliderInfoData

// .message.EUGCColliderType ColliderType = 1;
inline void UGCColliderInfoData::clear_collidertype() {
  _impl_.collidertype_ = 0;
}
inline ::message::EUGCColliderType UGCColliderInfoData::_internal_collidertype() const {
  return static_cast< ::message::EUGCColliderType >(_impl_.collidertype_);
}
inline ::message::EUGCColliderType UGCColliderInfoData::collidertype() const {
  // @@protoc_insertion_point(field_get:message.UGCColliderInfoData.ColliderType)
  return _internal_collidertype();
}
inline void UGCColliderInfoData::_internal_set_collidertype(::message::EUGCColliderType value) {
  
  _impl_.collidertype_ = value;
}
inline void UGCColliderInfoData::set_collidertype(::message::EUGCColliderType value) {
  _internal_set_collidertype(value);
  // @@protoc_insertion_point(field_set:message.UGCColliderInfoData.ColliderType)
}

// .message.ProtoBuffVector3 Offset = 2;
inline bool UGCColliderInfoData::_internal_has_offset() const {
  return this != internal_default_instance() && _impl_.offset_ != nullptr;
}
inline bool UGCColliderInfoData::has_offset() const {
  return _internal_has_offset();
}
inline const ::message::ProtoBuffVector3& UGCColliderInfoData::_internal_offset() const {
  const ::message::ProtoBuffVector3* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCColliderInfoData::offset() const {
  // @@protoc_insertion_point(field_get:message.UGCColliderInfoData.Offset)
  return _internal_offset();
}
inline void UGCColliderInfoData::unsafe_arena_set_allocated_offset(
    ::message::ProtoBuffVector3* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCColliderInfoData.Offset)
}
inline ::message::ProtoBuffVector3* UGCColliderInfoData::release_offset() {
  
  ::message::ProtoBuffVector3* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCColliderInfoData::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:message.UGCColliderInfoData.Offset)
  
  ::message::ProtoBuffVector3* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCColliderInfoData::_internal_mutable_offset() {
  
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::message::ProtoBuffVector3* UGCColliderInfoData::mutable_offset() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:message.UGCColliderInfoData.Offset)
  return _msg;
}
inline void UGCColliderInfoData::set_allocated_offset(::message::ProtoBuffVector3* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:message.UGCColliderInfoData.Offset)
}

// .message.ProtoBuffVector3 Scale = 3;
inline bool UGCColliderInfoData::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool UGCColliderInfoData::has_scale() const {
  return _internal_has_scale();
}
inline const ::message::ProtoBuffVector3& UGCColliderInfoData::_internal_scale() const {
  const ::message::ProtoBuffVector3* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCColliderInfoData::scale() const {
  // @@protoc_insertion_point(field_get:message.UGCColliderInfoData.Scale)
  return _internal_scale();
}
inline void UGCColliderInfoData::unsafe_arena_set_allocated_scale(
    ::message::ProtoBuffVector3* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCColliderInfoData.Scale)
}
inline ::message::ProtoBuffVector3* UGCColliderInfoData::release_scale() {
  
  ::message::ProtoBuffVector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCColliderInfoData::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:message.UGCColliderInfoData.Scale)
  
  ::message::ProtoBuffVector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCColliderInfoData::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::message::ProtoBuffVector3* UGCColliderInfoData::mutable_scale() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:message.UGCColliderInfoData.Scale)
  return _msg;
}
inline void UGCColliderInfoData::set_allocated_scale(::message::ProtoBuffVector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale));
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:message.UGCColliderInfoData.Scale)
}

// .message.ProtoBuffQuaternion Rotation = 4;
inline bool UGCColliderInfoData::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool UGCColliderInfoData::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::message::ProtoBuffQuaternion& UGCColliderInfoData::_internal_rotation() const {
  const ::message::ProtoBuffQuaternion* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffQuaternion&>(
      ::message::_ProtoBuffQuaternion_default_instance_);
}
inline const ::message::ProtoBuffQuaternion& UGCColliderInfoData::rotation() const {
  // @@protoc_insertion_point(field_get:message.UGCColliderInfoData.Rotation)
  return _internal_rotation();
}
inline void UGCColliderInfoData::unsafe_arena_set_allocated_rotation(
    ::message::ProtoBuffQuaternion* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCColliderInfoData.Rotation)
}
inline ::message::ProtoBuffQuaternion* UGCColliderInfoData::release_rotation() {
  
  ::message::ProtoBuffQuaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCColliderInfoData::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:message.UGCColliderInfoData.Rotation)
  
  ::message::ProtoBuffQuaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCColliderInfoData::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffQuaternion>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::message::ProtoBuffQuaternion* UGCColliderInfoData::mutable_rotation() {
  ::message::ProtoBuffQuaternion* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:message.UGCColliderInfoData.Rotation)
  return _msg;
}
inline void UGCColliderInfoData::set_allocated_rotation(::message::ProtoBuffQuaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:message.UGCColliderInfoData.Rotation)
}

// bool IsTrigger = 5;
inline void UGCColliderInfoData::clear_istrigger() {
  _impl_.istrigger_ = false;
}
inline bool UGCColliderInfoData::_internal_istrigger() const {
  return _impl_.istrigger_;
}
inline bool UGCColliderInfoData::istrigger() const {
  // @@protoc_insertion_point(field_get:message.UGCColliderInfoData.IsTrigger)
  return _internal_istrigger();
}
inline void UGCColliderInfoData::_internal_set_istrigger(bool value) {
  
  _impl_.istrigger_ = value;
}
inline void UGCColliderInfoData::set_istrigger(bool value) {
  _internal_set_istrigger(value);
  // @@protoc_insertion_point(field_set:message.UGCColliderInfoData.IsTrigger)
}

// bool IsConvexIfMesh = 6;
inline void UGCColliderInfoData::clear_isconvexifmesh() {
  _impl_.isconvexifmesh_ = false;
}
inline bool UGCColliderInfoData::_internal_isconvexifmesh() const {
  return _impl_.isconvexifmesh_;
}
inline bool UGCColliderInfoData::isconvexifmesh() const {
  // @@protoc_insertion_point(field_get:message.UGCColliderInfoData.IsConvexIfMesh)
  return _internal_isconvexifmesh();
}
inline void UGCColliderInfoData::_internal_set_isconvexifmesh(bool value) {
  
  _impl_.isconvexifmesh_ = value;
}
inline void UGCColliderInfoData::set_isconvexifmesh(bool value) {
  _internal_set_isconvexifmesh(value);
  // @@protoc_insertion_point(field_set:message.UGCColliderInfoData.IsConvexIfMesh)
}

// string MeshColliderUUID = 7;
inline void UGCColliderInfoData::clear_meshcollideruuid() {
  _impl_.meshcollideruuid_.ClearToEmpty();
}
inline const std::string& UGCColliderInfoData::meshcollideruuid() const {
  // @@protoc_insertion_point(field_get:message.UGCColliderInfoData.MeshColliderUUID)
  return _internal_meshcollideruuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCColliderInfoData::set_meshcollideruuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.meshcollideruuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCColliderInfoData.MeshColliderUUID)
}
inline std::string* UGCColliderInfoData::mutable_meshcollideruuid() {
  std::string* _s = _internal_mutable_meshcollideruuid();
  // @@protoc_insertion_point(field_mutable:message.UGCColliderInfoData.MeshColliderUUID)
  return _s;
}
inline const std::string& UGCColliderInfoData::_internal_meshcollideruuid() const {
  return _impl_.meshcollideruuid_.Get();
}
inline void UGCColliderInfoData::_internal_set_meshcollideruuid(const std::string& value) {
  
  _impl_.meshcollideruuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCColliderInfoData::_internal_mutable_meshcollideruuid() {
  
  return _impl_.meshcollideruuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCColliderInfoData::release_meshcollideruuid() {
  // @@protoc_insertion_point(field_release:message.UGCColliderInfoData.MeshColliderUUID)
  return _impl_.meshcollideruuid_.Release();
}
inline void UGCColliderInfoData::set_allocated_meshcollideruuid(std::string* meshcollideruuid) {
  if (meshcollideruuid != nullptr) {
    
  } else {
    
  }
  _impl_.meshcollideruuid_.SetAllocated(meshcollideruuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.meshcollideruuid_.IsDefault()) {
    _impl_.meshcollideruuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCColliderInfoData.MeshColliderUUID)
}

// -------------------------------------------------------------------

// UGCGameObjectData

// string EngineMeshUUID = 1;
inline void UGCGameObjectData::clear_enginemeshuuid() {
  _impl_.enginemeshuuid_.ClearToEmpty();
}
inline const std::string& UGCGameObjectData::enginemeshuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCGameObjectData.EngineMeshUUID)
  return _internal_enginemeshuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCGameObjectData::set_enginemeshuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.enginemeshuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCGameObjectData.EngineMeshUUID)
}
inline std::string* UGCGameObjectData::mutable_enginemeshuuid() {
  std::string* _s = _internal_mutable_enginemeshuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCGameObjectData.EngineMeshUUID)
  return _s;
}
inline const std::string& UGCGameObjectData::_internal_enginemeshuuid() const {
  return _impl_.enginemeshuuid_.Get();
}
inline void UGCGameObjectData::_internal_set_enginemeshuuid(const std::string& value) {
  
  _impl_.enginemeshuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCGameObjectData::_internal_mutable_enginemeshuuid() {
  
  return _impl_.enginemeshuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCGameObjectData::release_enginemeshuuid() {
  // @@protoc_insertion_point(field_release:message.UGCGameObjectData.EngineMeshUUID)
  return _impl_.enginemeshuuid_.Release();
}
inline void UGCGameObjectData::set_allocated_enginemeshuuid(std::string* enginemeshuuid) {
  if (enginemeshuuid != nullptr) {
    
  } else {
    
  }
  _impl_.enginemeshuuid_.SetAllocated(enginemeshuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.enginemeshuuid_.IsDefault()) {
    _impl_.enginemeshuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCGameObjectData.EngineMeshUUID)
}

// repeated string UGCMaterialUUIDList = 2;
inline int UGCGameObjectData::_internal_ugcmaterialuuidlist_size() const {
  return _impl_.ugcmaterialuuidlist_.size();
}
inline int UGCGameObjectData::ugcmaterialuuidlist_size() const {
  return _internal_ugcmaterialuuidlist_size();
}
inline void UGCGameObjectData::clear_ugcmaterialuuidlist() {
  _impl_.ugcmaterialuuidlist_.Clear();
}
inline std::string* UGCGameObjectData::add_ugcmaterialuuidlist() {
  std::string* _s = _internal_add_ugcmaterialuuidlist();
  // @@protoc_insertion_point(field_add_mutable:message.UGCGameObjectData.UGCMaterialUUIDList)
  return _s;
}
inline const std::string& UGCGameObjectData::_internal_ugcmaterialuuidlist(int index) const {
  return _impl_.ugcmaterialuuidlist_.Get(index);
}
inline const std::string& UGCGameObjectData::ugcmaterialuuidlist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameObjectData.UGCMaterialUUIDList)
  return _internal_ugcmaterialuuidlist(index);
}
inline std::string* UGCGameObjectData::mutable_ugcmaterialuuidlist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameObjectData.UGCMaterialUUIDList)
  return _impl_.ugcmaterialuuidlist_.Mutable(index);
}
inline void UGCGameObjectData::set_ugcmaterialuuidlist(int index, const std::string& value) {
  _impl_.ugcmaterialuuidlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCGameObjectData.UGCMaterialUUIDList)
}
inline void UGCGameObjectData::set_ugcmaterialuuidlist(int index, std::string&& value) {
  _impl_.ugcmaterialuuidlist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCGameObjectData.UGCMaterialUUIDList)
}
inline void UGCGameObjectData::set_ugcmaterialuuidlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ugcmaterialuuidlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCGameObjectData.UGCMaterialUUIDList)
}
inline void UGCGameObjectData::set_ugcmaterialuuidlist(int index, const char* value, size_t size) {
  _impl_.ugcmaterialuuidlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCGameObjectData.UGCMaterialUUIDList)
}
inline std::string* UGCGameObjectData::_internal_add_ugcmaterialuuidlist() {
  return _impl_.ugcmaterialuuidlist_.Add();
}
inline void UGCGameObjectData::add_ugcmaterialuuidlist(const std::string& value) {
  _impl_.ugcmaterialuuidlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCGameObjectData.UGCMaterialUUIDList)
}
inline void UGCGameObjectData::add_ugcmaterialuuidlist(std::string&& value) {
  _impl_.ugcmaterialuuidlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCGameObjectData.UGCMaterialUUIDList)
}
inline void UGCGameObjectData::add_ugcmaterialuuidlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ugcmaterialuuidlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCGameObjectData.UGCMaterialUUIDList)
}
inline void UGCGameObjectData::add_ugcmaterialuuidlist(const char* value, size_t size) {
  _impl_.ugcmaterialuuidlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCGameObjectData.UGCMaterialUUIDList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCGameObjectData::ugcmaterialuuidlist() const {
  // @@protoc_insertion_point(field_list:message.UGCGameObjectData.UGCMaterialUUIDList)
  return _impl_.ugcmaterialuuidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCGameObjectData::mutable_ugcmaterialuuidlist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameObjectData.UGCMaterialUUIDList)
  return &_impl_.ugcmaterialuuidlist_;
}

// repeated .message.UGCColliderInfoData ColliderList = 3;
inline int UGCGameObjectData::_internal_colliderlist_size() const {
  return _impl_.colliderlist_.size();
}
inline int UGCGameObjectData::colliderlist_size() const {
  return _internal_colliderlist_size();
}
inline void UGCGameObjectData::clear_colliderlist() {
  _impl_.colliderlist_.Clear();
}
inline ::message::UGCColliderInfoData* UGCGameObjectData::mutable_colliderlist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameObjectData.ColliderList)
  return _impl_.colliderlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData >*
UGCGameObjectData::mutable_colliderlist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameObjectData.ColliderList)
  return &_impl_.colliderlist_;
}
inline const ::message::UGCColliderInfoData& UGCGameObjectData::_internal_colliderlist(int index) const {
  return _impl_.colliderlist_.Get(index);
}
inline const ::message::UGCColliderInfoData& UGCGameObjectData::colliderlist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameObjectData.ColliderList)
  return _internal_colliderlist(index);
}
inline ::message::UGCColliderInfoData* UGCGameObjectData::_internal_add_colliderlist() {
  return _impl_.colliderlist_.Add();
}
inline ::message::UGCColliderInfoData* UGCGameObjectData::add_colliderlist() {
  ::message::UGCColliderInfoData* _add = _internal_add_colliderlist();
  // @@protoc_insertion_point(field_add:message.UGCGameObjectData.ColliderList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData >&
UGCGameObjectData::colliderlist() const {
  // @@protoc_insertion_point(field_list:message.UGCGameObjectData.ColliderList)
  return _impl_.colliderlist_;
}

// .message.EUGCRendererDataSource RendererDataSource = 4;
inline void UGCGameObjectData::clear_rendererdatasource() {
  _impl_.rendererdatasource_ = 0;
}
inline ::message::EUGCRendererDataSource UGCGameObjectData::_internal_rendererdatasource() const {
  return static_cast< ::message::EUGCRendererDataSource >(_impl_.rendererdatasource_);
}
inline ::message::EUGCRendererDataSource UGCGameObjectData::rendererdatasource() const {
  // @@protoc_insertion_point(field_get:message.UGCGameObjectData.RendererDataSource)
  return _internal_rendererdatasource();
}
inline void UGCGameObjectData::_internal_set_rendererdatasource(::message::EUGCRendererDataSource value) {
  
  _impl_.rendererdatasource_ = value;
}
inline void UGCGameObjectData::set_rendererdatasource(::message::EUGCRendererDataSource value) {
  _internal_set_rendererdatasource(value);
  // @@protoc_insertion_point(field_set:message.UGCGameObjectData.RendererDataSource)
}

// string ABGameObjectResUUID = 5;
inline void UGCGameObjectData::clear_abgameobjectresuuid() {
  _impl_.abgameobjectresuuid_.ClearToEmpty();
}
inline const std::string& UGCGameObjectData::abgameobjectresuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCGameObjectData.ABGameObjectResUUID)
  return _internal_abgameobjectresuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCGameObjectData::set_abgameobjectresuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.abgameobjectresuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCGameObjectData.ABGameObjectResUUID)
}
inline std::string* UGCGameObjectData::mutable_abgameobjectresuuid() {
  std::string* _s = _internal_mutable_abgameobjectresuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCGameObjectData.ABGameObjectResUUID)
  return _s;
}
inline const std::string& UGCGameObjectData::_internal_abgameobjectresuuid() const {
  return _impl_.abgameobjectresuuid_.Get();
}
inline void UGCGameObjectData::_internal_set_abgameobjectresuuid(const std::string& value) {
  
  _impl_.abgameobjectresuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCGameObjectData::_internal_mutable_abgameobjectresuuid() {
  
  return _impl_.abgameobjectresuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCGameObjectData::release_abgameobjectresuuid() {
  // @@protoc_insertion_point(field_release:message.UGCGameObjectData.ABGameObjectResUUID)
  return _impl_.abgameobjectresuuid_.Release();
}
inline void UGCGameObjectData::set_allocated_abgameobjectresuuid(std::string* abgameobjectresuuid) {
  if (abgameobjectresuuid != nullptr) {
    
  } else {
    
  }
  _impl_.abgameobjectresuuid_.SetAllocated(abgameobjectresuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.abgameobjectresuuid_.IsDefault()) {
    _impl_.abgameobjectresuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCGameObjectData.ABGameObjectResUUID)
}

// bool DisableABResCollision = 6;
inline void UGCGameObjectData::clear_disableabrescollision() {
  _impl_.disableabrescollision_ = false;
}
inline bool UGCGameObjectData::_internal_disableabrescollision() const {
  return _impl_.disableabrescollision_;
}
inline bool UGCGameObjectData::disableabrescollision() const {
  // @@protoc_insertion_point(field_get:message.UGCGameObjectData.DisableABResCollision)
  return _internal_disableabrescollision();
}
inline void UGCGameObjectData::_internal_set_disableabrescollision(bool value) {
  
  _impl_.disableabrescollision_ = value;
}
inline void UGCGameObjectData::set_disableabrescollision(bool value) {
  _internal_set_disableabrescollision(value);
  // @@protoc_insertion_point(field_set:message.UGCGameObjectData.DisableABResCollision)
}

// bool IsSkinnedMesh = 7;
inline void UGCGameObjectData::clear_isskinnedmesh() {
  _impl_.isskinnedmesh_ = false;
}
inline bool UGCGameObjectData::_internal_isskinnedmesh() const {
  return _impl_.isskinnedmesh_;
}
inline bool UGCGameObjectData::isskinnedmesh() const {
  // @@protoc_insertion_point(field_get:message.UGCGameObjectData.IsSkinnedMesh)
  return _internal_isskinnedmesh();
}
inline void UGCGameObjectData::_internal_set_isskinnedmesh(bool value) {
  
  _impl_.isskinnedmesh_ = value;
}
inline void UGCGameObjectData::set_isskinnedmesh(bool value) {
  _internal_set_isskinnedmesh(value);
  // @@protoc_insertion_point(field_set:message.UGCGameObjectData.IsSkinnedMesh)
}

// -------------------------------------------------------------------

// UGCResourceColliderData

// repeated .message.UGCColliderInfoData ColliderList = 3;
inline int UGCResourceColliderData::_internal_colliderlist_size() const {
  return _impl_.colliderlist_.size();
}
inline int UGCResourceColliderData::colliderlist_size() const {
  return _internal_colliderlist_size();
}
inline void UGCResourceColliderData::clear_colliderlist() {
  _impl_.colliderlist_.Clear();
}
inline ::message::UGCColliderInfoData* UGCResourceColliderData::mutable_colliderlist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResourceColliderData.ColliderList)
  return _impl_.colliderlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData >*
UGCResourceColliderData::mutable_colliderlist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResourceColliderData.ColliderList)
  return &_impl_.colliderlist_;
}
inline const ::message::UGCColliderInfoData& UGCResourceColliderData::_internal_colliderlist(int index) const {
  return _impl_.colliderlist_.Get(index);
}
inline const ::message::UGCColliderInfoData& UGCResourceColliderData::colliderlist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResourceColliderData.ColliderList)
  return _internal_colliderlist(index);
}
inline ::message::UGCColliderInfoData* UGCResourceColliderData::_internal_add_colliderlist() {
  return _impl_.colliderlist_.Add();
}
inline ::message::UGCColliderInfoData* UGCResourceColliderData::add_colliderlist() {
  ::message::UGCColliderInfoData* _add = _internal_add_colliderlist();
  // @@protoc_insertion_point(field_add:message.UGCResourceColliderData.ColliderList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCColliderInfoData >&
UGCResourceColliderData::colliderlist() const {
  // @@protoc_insertion_point(field_list:message.UGCResourceColliderData.ColliderList)
  return _impl_.colliderlist_;
}

// -------------------------------------------------------------------

// ProtoBuffVector4

// float X = 1;
inline void ProtoBuffVector4::clear_x() {
  _impl_.x_ = 0;
}
inline float ProtoBuffVector4::_internal_x() const {
  return _impl_.x_;
}
inline float ProtoBuffVector4::x() const {
  // @@protoc_insertion_point(field_get:message.ProtoBuffVector4.X)
  return _internal_x();
}
inline void ProtoBuffVector4::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void ProtoBuffVector4::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:message.ProtoBuffVector4.X)
}

// float Y = 2;
inline void ProtoBuffVector4::clear_y() {
  _impl_.y_ = 0;
}
inline float ProtoBuffVector4::_internal_y() const {
  return _impl_.y_;
}
inline float ProtoBuffVector4::y() const {
  // @@protoc_insertion_point(field_get:message.ProtoBuffVector4.Y)
  return _internal_y();
}
inline void ProtoBuffVector4::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void ProtoBuffVector4::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:message.ProtoBuffVector4.Y)
}

// float Z = 3;
inline void ProtoBuffVector4::clear_z() {
  _impl_.z_ = 0;
}
inline float ProtoBuffVector4::_internal_z() const {
  return _impl_.z_;
}
inline float ProtoBuffVector4::z() const {
  // @@protoc_insertion_point(field_get:message.ProtoBuffVector4.Z)
  return _internal_z();
}
inline void ProtoBuffVector4::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void ProtoBuffVector4::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:message.ProtoBuffVector4.Z)
}

// float W = 4;
inline void ProtoBuffVector4::clear_w() {
  _impl_.w_ = 0;
}
inline float ProtoBuffVector4::_internal_w() const {
  return _impl_.w_;
}
inline float ProtoBuffVector4::w() const {
  // @@protoc_insertion_point(field_get:message.ProtoBuffVector4.W)
  return _internal_w();
}
inline void ProtoBuffVector4::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void ProtoBuffVector4::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:message.ProtoBuffVector4.W)
}

// -------------------------------------------------------------------

// UGCMaterialParamData

// string Name = 1;
inline void UGCMaterialParamData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCMaterialParamData::name() const {
  // @@protoc_insertion_point(field_get:message.UGCMaterialParamData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCMaterialParamData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMaterialParamData.Name)
}
inline std::string* UGCMaterialParamData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCMaterialParamData.Name)
  return _s;
}
inline const std::string& UGCMaterialParamData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCMaterialParamData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMaterialParamData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCMaterialParamData::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCMaterialParamData.Name)
  return _impl_.name_.Release();
}
inline void UGCMaterialParamData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCMaterialParamData.Name)
}

// float FloatValue = 2;
inline bool UGCMaterialParamData::_internal_has_floatvalue() const {
  return Value_case() == kFloatValue;
}
inline bool UGCMaterialParamData::has_floatvalue() const {
  return _internal_has_floatvalue();
}
inline void UGCMaterialParamData::set_has_floatvalue() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void UGCMaterialParamData::clear_floatvalue() {
  if (_internal_has_floatvalue()) {
    _impl_.Value_.floatvalue_ = 0;
    clear_has_Value();
  }
}
inline float UGCMaterialParamData::_internal_floatvalue() const {
  if (_internal_has_floatvalue()) {
    return _impl_.Value_.floatvalue_;
  }
  return 0;
}
inline void UGCMaterialParamData::_internal_set_floatvalue(float value) {
  if (!_internal_has_floatvalue()) {
    clear_Value();
    set_has_floatvalue();
  }
  _impl_.Value_.floatvalue_ = value;
}
inline float UGCMaterialParamData::floatvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCMaterialParamData.FloatValue)
  return _internal_floatvalue();
}
inline void UGCMaterialParamData::set_floatvalue(float value) {
  _internal_set_floatvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCMaterialParamData.FloatValue)
}

// string TextureUUID = 3;
inline bool UGCMaterialParamData::_internal_has_textureuuid() const {
  return Value_case() == kTextureUUID;
}
inline bool UGCMaterialParamData::has_textureuuid() const {
  return _internal_has_textureuuid();
}
inline void UGCMaterialParamData::set_has_textureuuid() {
  _impl_._oneof_case_[0] = kTextureUUID;
}
inline void UGCMaterialParamData::clear_textureuuid() {
  if (_internal_has_textureuuid()) {
    _impl_.Value_.textureuuid_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& UGCMaterialParamData::textureuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCMaterialParamData.TextureUUID)
  return _internal_textureuuid();
}
template <typename ArgT0, typename... ArgT>
inline void UGCMaterialParamData::set_textureuuid(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_textureuuid()) {
    clear_Value();
    set_has_textureuuid();
    _impl_.Value_.textureuuid_.InitDefault();
  }
  _impl_.Value_.textureuuid_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMaterialParamData.TextureUUID)
}
inline std::string* UGCMaterialParamData::mutable_textureuuid() {
  std::string* _s = _internal_mutable_textureuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCMaterialParamData.TextureUUID)
  return _s;
}
inline const std::string& UGCMaterialParamData::_internal_textureuuid() const {
  if (_internal_has_textureuuid()) {
    return _impl_.Value_.textureuuid_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UGCMaterialParamData::_internal_set_textureuuid(const std::string& value) {
  if (!_internal_has_textureuuid()) {
    clear_Value();
    set_has_textureuuid();
    _impl_.Value_.textureuuid_.InitDefault();
  }
  _impl_.Value_.textureuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMaterialParamData::_internal_mutable_textureuuid() {
  if (!_internal_has_textureuuid()) {
    clear_Value();
    set_has_textureuuid();
    _impl_.Value_.textureuuid_.InitDefault();
  }
  return _impl_.Value_.textureuuid_.Mutable(      GetArenaForAllocation());
}
inline std::string* UGCMaterialParamData::release_textureuuid() {
  // @@protoc_insertion_point(field_release:message.UGCMaterialParamData.TextureUUID)
  if (_internal_has_textureuuid()) {
    clear_has_Value();
    return _impl_.Value_.textureuuid_.Release();
  } else {
    return nullptr;
  }
}
inline void UGCMaterialParamData::set_allocated_textureuuid(std::string* textureuuid) {
  if (has_Value()) {
    clear_Value();
  }
  if (textureuuid != nullptr) {
    set_has_textureuuid();
    _impl_.Value_.textureuuid_.InitAllocated(textureuuid, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCMaterialParamData.TextureUUID)
}

// .message.ProtoBuffVector4 Vector = 4;
inline bool UGCMaterialParamData::_internal_has_vector() const {
  return Value_case() == kVector;
}
inline bool UGCMaterialParamData::has_vector() const {
  return _internal_has_vector();
}
inline void UGCMaterialParamData::set_has_vector() {
  _impl_._oneof_case_[0] = kVector;
}
inline void UGCMaterialParamData::clear_vector() {
  if (_internal_has_vector()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Value_.vector_;
    }
    clear_has_Value();
  }
}
inline ::message::ProtoBuffVector4* UGCMaterialParamData::release_vector() {
  // @@protoc_insertion_point(field_release:message.UGCMaterialParamData.Vector)
  if (_internal_has_vector()) {
    clear_has_Value();
    ::message::ProtoBuffVector4* temp = _impl_.Value_.vector_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Value_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ProtoBuffVector4& UGCMaterialParamData::_internal_vector() const {
  return _internal_has_vector()
      ? *_impl_.Value_.vector_
      : reinterpret_cast< ::message::ProtoBuffVector4&>(::message::_ProtoBuffVector4_default_instance_);
}
inline const ::message::ProtoBuffVector4& UGCMaterialParamData::vector() const {
  // @@protoc_insertion_point(field_get:message.UGCMaterialParamData.Vector)
  return _internal_vector();
}
inline ::message::ProtoBuffVector4* UGCMaterialParamData::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.UGCMaterialParamData.Vector)
  if (_internal_has_vector()) {
    clear_has_Value();
    ::message::ProtoBuffVector4* temp = _impl_.Value_.vector_;
    _impl_.Value_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UGCMaterialParamData::unsafe_arena_set_allocated_vector(::message::ProtoBuffVector4* vector) {
  clear_Value();
  if (vector) {
    set_has_vector();
    _impl_.Value_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCMaterialParamData.Vector)
}
inline ::message::ProtoBuffVector4* UGCMaterialParamData::_internal_mutable_vector() {
  if (!_internal_has_vector()) {
    clear_Value();
    set_has_vector();
    _impl_.Value_.vector_ = CreateMaybeMessage< ::message::ProtoBuffVector4 >(GetArenaForAllocation());
  }
  return _impl_.Value_.vector_;
}
inline ::message::ProtoBuffVector4* UGCMaterialParamData::mutable_vector() {
  ::message::ProtoBuffVector4* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:message.UGCMaterialParamData.Vector)
  return _msg;
}

// int32 IntValue = 5;
inline bool UGCMaterialParamData::_internal_has_intvalue() const {
  return Value_case() == kIntValue;
}
inline bool UGCMaterialParamData::has_intvalue() const {
  return _internal_has_intvalue();
}
inline void UGCMaterialParamData::set_has_intvalue() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void UGCMaterialParamData::clear_intvalue() {
  if (_internal_has_intvalue()) {
    _impl_.Value_.intvalue_ = 0;
    clear_has_Value();
  }
}
inline int32_t UGCMaterialParamData::_internal_intvalue() const {
  if (_internal_has_intvalue()) {
    return _impl_.Value_.intvalue_;
  }
  return 0;
}
inline void UGCMaterialParamData::_internal_set_intvalue(int32_t value) {
  if (!_internal_has_intvalue()) {
    clear_Value();
    set_has_intvalue();
  }
  _impl_.Value_.intvalue_ = value;
}
inline int32_t UGCMaterialParamData::intvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCMaterialParamData.IntValue)
  return _internal_intvalue();
}
inline void UGCMaterialParamData::set_intvalue(int32_t value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCMaterialParamData.IntValue)
}

// int32 ColorValue = 6;
inline bool UGCMaterialParamData::_internal_has_colorvalue() const {
  return Value_case() == kColorValue;
}
inline bool UGCMaterialParamData::has_colorvalue() const {
  return _internal_has_colorvalue();
}
inline void UGCMaterialParamData::set_has_colorvalue() {
  _impl_._oneof_case_[0] = kColorValue;
}
inline void UGCMaterialParamData::clear_colorvalue() {
  if (_internal_has_colorvalue()) {
    _impl_.Value_.colorvalue_ = 0;
    clear_has_Value();
  }
}
inline int32_t UGCMaterialParamData::_internal_colorvalue() const {
  if (_internal_has_colorvalue()) {
    return _impl_.Value_.colorvalue_;
  }
  return 0;
}
inline void UGCMaterialParamData::_internal_set_colorvalue(int32_t value) {
  if (!_internal_has_colorvalue()) {
    clear_Value();
    set_has_colorvalue();
  }
  _impl_.Value_.colorvalue_ = value;
}
inline int32_t UGCMaterialParamData::colorvalue() const {
  // @@protoc_insertion_point(field_get:message.UGCMaterialParamData.ColorValue)
  return _internal_colorvalue();
}
inline void UGCMaterialParamData::set_colorvalue(int32_t value) {
  _internal_set_colorvalue(value);
  // @@protoc_insertion_point(field_set:message.UGCMaterialParamData.ColorValue)
}

// string EnableKeyword = 7;
inline bool UGCMaterialParamData::_internal_has_enablekeyword() const {
  return Value_case() == kEnableKeyword;
}
inline bool UGCMaterialParamData::has_enablekeyword() const {
  return _internal_has_enablekeyword();
}
inline void UGCMaterialParamData::set_has_enablekeyword() {
  _impl_._oneof_case_[0] = kEnableKeyword;
}
inline void UGCMaterialParamData::clear_enablekeyword() {
  if (_internal_has_enablekeyword()) {
    _impl_.Value_.enablekeyword_.Destroy();
    clear_has_Value();
  }
}
inline const std::string& UGCMaterialParamData::enablekeyword() const {
  // @@protoc_insertion_point(field_get:message.UGCMaterialParamData.EnableKeyword)
  return _internal_enablekeyword();
}
template <typename ArgT0, typename... ArgT>
inline void UGCMaterialParamData::set_enablekeyword(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_enablekeyword()) {
    clear_Value();
    set_has_enablekeyword();
    _impl_.Value_.enablekeyword_.InitDefault();
  }
  _impl_.Value_.enablekeyword_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMaterialParamData.EnableKeyword)
}
inline std::string* UGCMaterialParamData::mutable_enablekeyword() {
  std::string* _s = _internal_mutable_enablekeyword();
  // @@protoc_insertion_point(field_mutable:message.UGCMaterialParamData.EnableKeyword)
  return _s;
}
inline const std::string& UGCMaterialParamData::_internal_enablekeyword() const {
  if (_internal_has_enablekeyword()) {
    return _impl_.Value_.enablekeyword_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UGCMaterialParamData::_internal_set_enablekeyword(const std::string& value) {
  if (!_internal_has_enablekeyword()) {
    clear_Value();
    set_has_enablekeyword();
    _impl_.Value_.enablekeyword_.InitDefault();
  }
  _impl_.Value_.enablekeyword_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMaterialParamData::_internal_mutable_enablekeyword() {
  if (!_internal_has_enablekeyword()) {
    clear_Value();
    set_has_enablekeyword();
    _impl_.Value_.enablekeyword_.InitDefault();
  }
  return _impl_.Value_.enablekeyword_.Mutable(      GetArenaForAllocation());
}
inline std::string* UGCMaterialParamData::release_enablekeyword() {
  // @@protoc_insertion_point(field_release:message.UGCMaterialParamData.EnableKeyword)
  if (_internal_has_enablekeyword()) {
    clear_has_Value();
    return _impl_.Value_.enablekeyword_.Release();
  } else {
    return nullptr;
  }
}
inline void UGCMaterialParamData::set_allocated_enablekeyword(std::string* enablekeyword) {
  if (has_Value()) {
    clear_Value();
  }
  if (enablekeyword != nullptr) {
    set_has_enablekeyword();
    _impl_.Value_.enablekeyword_.InitAllocated(enablekeyword, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:message.UGCMaterialParamData.EnableKeyword)
}

inline bool UGCMaterialParamData::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void UGCMaterialParamData::clear_has_Value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline UGCMaterialParamData::ValueCase UGCMaterialParamData::Value_case() const {
  return UGCMaterialParamData::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UGCMaterialData

// string ShaderName = 1;
inline void UGCMaterialData::clear_shadername() {
  _impl_.shadername_.ClearToEmpty();
}
inline const std::string& UGCMaterialData::shadername() const {
  // @@protoc_insertion_point(field_get:message.UGCMaterialData.ShaderName)
  return _internal_shadername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCMaterialData::set_shadername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.shadername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCMaterialData.ShaderName)
}
inline std::string* UGCMaterialData::mutable_shadername() {
  std::string* _s = _internal_mutable_shadername();
  // @@protoc_insertion_point(field_mutable:message.UGCMaterialData.ShaderName)
  return _s;
}
inline const std::string& UGCMaterialData::_internal_shadername() const {
  return _impl_.shadername_.Get();
}
inline void UGCMaterialData::_internal_set_shadername(const std::string& value) {
  
  _impl_.shadername_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCMaterialData::_internal_mutable_shadername() {
  
  return _impl_.shadername_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCMaterialData::release_shadername() {
  // @@protoc_insertion_point(field_release:message.UGCMaterialData.ShaderName)
  return _impl_.shadername_.Release();
}
inline void UGCMaterialData::set_allocated_shadername(std::string* shadername) {
  if (shadername != nullptr) {
    
  } else {
    
  }
  _impl_.shadername_.SetAllocated(shadername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shadername_.IsDefault()) {
    _impl_.shadername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCMaterialData.ShaderName)
}

// repeated .message.UGCMaterialParamData ShaderParamList = 2;
inline int UGCMaterialData::_internal_shaderparamlist_size() const {
  return _impl_.shaderparamlist_.size();
}
inline int UGCMaterialData::shaderparamlist_size() const {
  return _internal_shaderparamlist_size();
}
inline void UGCMaterialData::clear_shaderparamlist() {
  _impl_.shaderparamlist_.Clear();
}
inline ::message::UGCMaterialParamData* UGCMaterialData::mutable_shaderparamlist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCMaterialData.ShaderParamList)
  return _impl_.shaderparamlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCMaterialParamData >*
UGCMaterialData::mutable_shaderparamlist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCMaterialData.ShaderParamList)
  return &_impl_.shaderparamlist_;
}
inline const ::message::UGCMaterialParamData& UGCMaterialData::_internal_shaderparamlist(int index) const {
  return _impl_.shaderparamlist_.Get(index);
}
inline const ::message::UGCMaterialParamData& UGCMaterialData::shaderparamlist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCMaterialData.ShaderParamList)
  return _internal_shaderparamlist(index);
}
inline ::message::UGCMaterialParamData* UGCMaterialData::_internal_add_shaderparamlist() {
  return _impl_.shaderparamlist_.Add();
}
inline ::message::UGCMaterialParamData* UGCMaterialData::add_shaderparamlist() {
  ::message::UGCMaterialParamData* _add = _internal_add_shaderparamlist();
  // @@protoc_insertion_point(field_add:message.UGCMaterialData.ShaderParamList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCMaterialParamData >&
UGCMaterialData::shaderparamlist() const {
  // @@protoc_insertion_point(field_list:message.UGCMaterialData.ShaderParamList)
  return _impl_.shaderparamlist_;
}

// -------------------------------------------------------------------

// UGCResourceUIAtlasData

// string MaterialResUUID = 1;
inline void UGCResourceUIAtlasData::clear_materialresuuid() {
  _impl_.materialresuuid_.ClearToEmpty();
}
inline const std::string& UGCResourceUIAtlasData::materialresuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUIAtlasData.MaterialResUUID)
  return _internal_materialresuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourceUIAtlasData::set_materialresuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.materialresuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourceUIAtlasData.MaterialResUUID)
}
inline std::string* UGCResourceUIAtlasData::mutable_materialresuuid() {
  std::string* _s = _internal_mutable_materialresuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCResourceUIAtlasData.MaterialResUUID)
  return _s;
}
inline const std::string& UGCResourceUIAtlasData::_internal_materialresuuid() const {
  return _impl_.materialresuuid_.Get();
}
inline void UGCResourceUIAtlasData::_internal_set_materialresuuid(const std::string& value) {
  
  _impl_.materialresuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourceUIAtlasData::_internal_mutable_materialresuuid() {
  
  return _impl_.materialresuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourceUIAtlasData::release_materialresuuid() {
  // @@protoc_insertion_point(field_release:message.UGCResourceUIAtlasData.MaterialResUUID)
  return _impl_.materialresuuid_.Release();
}
inline void UGCResourceUIAtlasData::set_allocated_materialresuuid(std::string* materialresuuid) {
  if (materialresuuid != nullptr) {
    
  } else {
    
  }
  _impl_.materialresuuid_.SetAllocated(materialresuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.materialresuuid_.IsDefault()) {
    _impl_.materialresuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourceUIAtlasData.MaterialResUUID)
}

// float PixelSize = 2;
inline void UGCResourceUIAtlasData::clear_pixelsize() {
  _impl_.pixelsize_ = 0;
}
inline float UGCResourceUIAtlasData::_internal_pixelsize() const {
  return _impl_.pixelsize_;
}
inline float UGCResourceUIAtlasData::pixelsize() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUIAtlasData.PixelSize)
  return _internal_pixelsize();
}
inline void UGCResourceUIAtlasData::_internal_set_pixelsize(float value) {
  
  _impl_.pixelsize_ = value;
}
inline void UGCResourceUIAtlasData::set_pixelsize(float value) {
  _internal_set_pixelsize(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUIAtlasData.PixelSize)
}

// repeated .message.UGCResourceUISpriteData Sprites = 3;
inline int UGCResourceUIAtlasData::_internal_sprites_size() const {
  return _impl_.sprites_.size();
}
inline int UGCResourceUIAtlasData::sprites_size() const {
  return _internal_sprites_size();
}
inline void UGCResourceUIAtlasData::clear_sprites() {
  _impl_.sprites_.Clear();
}
inline ::message::UGCResourceUISpriteData* UGCResourceUIAtlasData::mutable_sprites(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResourceUIAtlasData.Sprites)
  return _impl_.sprites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceUISpriteData >*
UGCResourceUIAtlasData::mutable_sprites() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResourceUIAtlasData.Sprites)
  return &_impl_.sprites_;
}
inline const ::message::UGCResourceUISpriteData& UGCResourceUIAtlasData::_internal_sprites(int index) const {
  return _impl_.sprites_.Get(index);
}
inline const ::message::UGCResourceUISpriteData& UGCResourceUIAtlasData::sprites(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUIAtlasData.Sprites)
  return _internal_sprites(index);
}
inline ::message::UGCResourceUISpriteData* UGCResourceUIAtlasData::_internal_add_sprites() {
  return _impl_.sprites_.Add();
}
inline ::message::UGCResourceUISpriteData* UGCResourceUIAtlasData::add_sprites() {
  ::message::UGCResourceUISpriteData* _add = _internal_add_sprites();
  // @@protoc_insertion_point(field_add:message.UGCResourceUIAtlasData.Sprites)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceUISpriteData >&
UGCResourceUIAtlasData::sprites() const {
  // @@protoc_insertion_point(field_list:message.UGCResourceUIAtlasData.Sprites)
  return _impl_.sprites_;
}

// -------------------------------------------------------------------

// UGCResourceUISpriteData

// string Name = 1;
inline void UGCResourceUISpriteData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCResourceUISpriteData::name() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourceUISpriteData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.Name)
}
inline std::string* UGCResourceUISpriteData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCResourceUISpriteData.Name)
  return _s;
}
inline const std::string& UGCResourceUISpriteData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCResourceUISpriteData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourceUISpriteData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourceUISpriteData::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCResourceUISpriteData.Name)
  return _impl_.name_.Release();
}
inline void UGCResourceUISpriteData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourceUISpriteData.Name)
}

// int32 X = 2;
inline void UGCResourceUISpriteData::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_x() const {
  return _impl_.x_;
}
inline int32_t UGCResourceUISpriteData::x() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.X)
  return _internal_x();
}
inline void UGCResourceUISpriteData::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void UGCResourceUISpriteData::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.X)
}

// int32 Y = 3;
inline void UGCResourceUISpriteData::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_y() const {
  return _impl_.y_;
}
inline int32_t UGCResourceUISpriteData::y() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.Y)
  return _internal_y();
}
inline void UGCResourceUISpriteData::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void UGCResourceUISpriteData::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.Y)
}

// int32 Width = 4;
inline void UGCResourceUISpriteData::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_width() const {
  return _impl_.width_;
}
inline int32_t UGCResourceUISpriteData::width() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.Width)
  return _internal_width();
}
inline void UGCResourceUISpriteData::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void UGCResourceUISpriteData::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.Width)
}

// int32 Height = 5;
inline void UGCResourceUISpriteData::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_height() const {
  return _impl_.height_;
}
inline int32_t UGCResourceUISpriteData::height() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.Height)
  return _internal_height();
}
inline void UGCResourceUISpriteData::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void UGCResourceUISpriteData::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.Height)
}

// int32 BorderLeft = 6;
inline void UGCResourceUISpriteData::clear_borderleft() {
  _impl_.borderleft_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_borderleft() const {
  return _impl_.borderleft_;
}
inline int32_t UGCResourceUISpriteData::borderleft() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.BorderLeft)
  return _internal_borderleft();
}
inline void UGCResourceUISpriteData::_internal_set_borderleft(int32_t value) {
  
  _impl_.borderleft_ = value;
}
inline void UGCResourceUISpriteData::set_borderleft(int32_t value) {
  _internal_set_borderleft(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.BorderLeft)
}

// int32 BorderRight = 7;
inline void UGCResourceUISpriteData::clear_borderright() {
  _impl_.borderright_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_borderright() const {
  return _impl_.borderright_;
}
inline int32_t UGCResourceUISpriteData::borderright() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.BorderRight)
  return _internal_borderright();
}
inline void UGCResourceUISpriteData::_internal_set_borderright(int32_t value) {
  
  _impl_.borderright_ = value;
}
inline void UGCResourceUISpriteData::set_borderright(int32_t value) {
  _internal_set_borderright(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.BorderRight)
}

// int32 BorderTop = 8;
inline void UGCResourceUISpriteData::clear_bordertop() {
  _impl_.bordertop_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_bordertop() const {
  return _impl_.bordertop_;
}
inline int32_t UGCResourceUISpriteData::bordertop() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.BorderTop)
  return _internal_bordertop();
}
inline void UGCResourceUISpriteData::_internal_set_bordertop(int32_t value) {
  
  _impl_.bordertop_ = value;
}
inline void UGCResourceUISpriteData::set_bordertop(int32_t value) {
  _internal_set_bordertop(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.BorderTop)
}

// int32 BorderBottom = 9;
inline void UGCResourceUISpriteData::clear_borderbottom() {
  _impl_.borderbottom_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_borderbottom() const {
  return _impl_.borderbottom_;
}
inline int32_t UGCResourceUISpriteData::borderbottom() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.BorderBottom)
  return _internal_borderbottom();
}
inline void UGCResourceUISpriteData::_internal_set_borderbottom(int32_t value) {
  
  _impl_.borderbottom_ = value;
}
inline void UGCResourceUISpriteData::set_borderbottom(int32_t value) {
  _internal_set_borderbottom(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.BorderBottom)
}

// int32 PaddingLeft = 10;
inline void UGCResourceUISpriteData::clear_paddingleft() {
  _impl_.paddingleft_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_paddingleft() const {
  return _impl_.paddingleft_;
}
inline int32_t UGCResourceUISpriteData::paddingleft() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.PaddingLeft)
  return _internal_paddingleft();
}
inline void UGCResourceUISpriteData::_internal_set_paddingleft(int32_t value) {
  
  _impl_.paddingleft_ = value;
}
inline void UGCResourceUISpriteData::set_paddingleft(int32_t value) {
  _internal_set_paddingleft(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.PaddingLeft)
}

// int32 PaddingRight = 11;
inline void UGCResourceUISpriteData::clear_paddingright() {
  _impl_.paddingright_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_paddingright() const {
  return _impl_.paddingright_;
}
inline int32_t UGCResourceUISpriteData::paddingright() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.PaddingRight)
  return _internal_paddingright();
}
inline void UGCResourceUISpriteData::_internal_set_paddingright(int32_t value) {
  
  _impl_.paddingright_ = value;
}
inline void UGCResourceUISpriteData::set_paddingright(int32_t value) {
  _internal_set_paddingright(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.PaddingRight)
}

// int32 PaddingTop = 12;
inline void UGCResourceUISpriteData::clear_paddingtop() {
  _impl_.paddingtop_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_paddingtop() const {
  return _impl_.paddingtop_;
}
inline int32_t UGCResourceUISpriteData::paddingtop() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.PaddingTop)
  return _internal_paddingtop();
}
inline void UGCResourceUISpriteData::_internal_set_paddingtop(int32_t value) {
  
  _impl_.paddingtop_ = value;
}
inline void UGCResourceUISpriteData::set_paddingtop(int32_t value) {
  _internal_set_paddingtop(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.PaddingTop)
}

// int32 PaddingBottom = 13;
inline void UGCResourceUISpriteData::clear_paddingbottom() {
  _impl_.paddingbottom_ = 0;
}
inline int32_t UGCResourceUISpriteData::_internal_paddingbottom() const {
  return _impl_.paddingbottom_;
}
inline int32_t UGCResourceUISpriteData::paddingbottom() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceUISpriteData.PaddingBottom)
  return _internal_paddingbottom();
}
inline void UGCResourceUISpriteData::_internal_set_paddingbottom(int32_t value) {
  
  _impl_.paddingbottom_ = value;
}
inline void UGCResourceUISpriteData::set_paddingbottom(int32_t value) {
  _internal_set_paddingbottom(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceUISpriteData.PaddingBottom)
}

// -------------------------------------------------------------------

// UGCResourcePackageItem

// string UUID = 1;
inline void UGCResourcePackageItem::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageItem::uuid() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageItem.UUID)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageItem::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageItem.UUID)
}
inline std::string* UGCResourcePackageItem::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageItem.UUID)
  return _s;
}
inline const std::string& UGCResourcePackageItem::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void UGCResourcePackageItem::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageItem::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageItem::release_uuid() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageItem.UUID)
  return _impl_.uuid_.Release();
}
inline void UGCResourcePackageItem::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageItem.UUID)
}

// .message.EUGCResourceType Type = 2;
inline void UGCResourcePackageItem::clear_type() {
  _impl_.type_ = 0;
}
inline ::message::EUGCResourceType UGCResourcePackageItem::_internal_type() const {
  return static_cast< ::message::EUGCResourceType >(_impl_.type_);
}
inline ::message::EUGCResourceType UGCResourcePackageItem::type() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageItem.Type)
  return _internal_type();
}
inline void UGCResourcePackageItem::_internal_set_type(::message::EUGCResourceType value) {
  
  _impl_.type_ = value;
}
inline void UGCResourcePackageItem::set_type(::message::EUGCResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageItem.Type)
}

// string Path = 3;
inline void UGCResourcePackageItem::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageItem::path() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageItem.Path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageItem::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageItem.Path)
}
inline std::string* UGCResourcePackageItem::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageItem.Path)
  return _s;
}
inline const std::string& UGCResourcePackageItem::_internal_path() const {
  return _impl_.path_.Get();
}
inline void UGCResourcePackageItem::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageItem::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageItem::release_path() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageItem.Path)
  return _impl_.path_.Release();
}
inline void UGCResourcePackageItem::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageItem.Path)
}

// bytes Data = 4;
inline void UGCResourcePackageItem::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageItem::data() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageItem.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageItem::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageItem.Data)
}
inline std::string* UGCResourcePackageItem::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageItem.Data)
  return _s;
}
inline const std::string& UGCResourcePackageItem::_internal_data() const {
  return _impl_.data_.Get();
}
inline void UGCResourcePackageItem::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageItem::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageItem::release_data() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageItem.Data)
  return _impl_.data_.Release();
}
inline void UGCResourcePackageItem::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageItem.Data)
}

// bool IsUnityAssetBundleRes = 5;
inline void UGCResourcePackageItem::clear_isunityassetbundleres() {
  _impl_.isunityassetbundleres_ = false;
}
inline bool UGCResourcePackageItem::_internal_isunityassetbundleres() const {
  return _impl_.isunityassetbundleres_;
}
inline bool UGCResourcePackageItem::isunityassetbundleres() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageItem.IsUnityAssetBundleRes)
  return _internal_isunityassetbundleres();
}
inline void UGCResourcePackageItem::_internal_set_isunityassetbundleres(bool value) {
  
  _impl_.isunityassetbundleres_ = value;
}
inline void UGCResourcePackageItem::set_isunityassetbundleres(bool value) {
  _internal_set_isunityassetbundleres(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageItem.IsUnityAssetBundleRes)
}

// -------------------------------------------------------------------

// UGCAssetBundleData

// string Path = 1;
inline void UGCAssetBundleData::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& UGCAssetBundleData::path() const {
  // @@protoc_insertion_point(field_get:message.UGCAssetBundleData.Path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCAssetBundleData::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCAssetBundleData.Path)
}
inline std::string* UGCAssetBundleData::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:message.UGCAssetBundleData.Path)
  return _s;
}
inline const std::string& UGCAssetBundleData::_internal_path() const {
  return _impl_.path_.Get();
}
inline void UGCAssetBundleData::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCAssetBundleData::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCAssetBundleData::release_path() {
  // @@protoc_insertion_point(field_release:message.UGCAssetBundleData.Path)
  return _impl_.path_.Release();
}
inline void UGCAssetBundleData::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCAssetBundleData.Path)
}

// string Hash = 2;
inline void UGCAssetBundleData::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& UGCAssetBundleData::hash() const {
  // @@protoc_insertion_point(field_get:message.UGCAssetBundleData.Hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCAssetBundleData::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCAssetBundleData.Hash)
}
inline std::string* UGCAssetBundleData::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:message.UGCAssetBundleData.Hash)
  return _s;
}
inline const std::string& UGCAssetBundleData::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void UGCAssetBundleData::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCAssetBundleData::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCAssetBundleData::release_hash() {
  // @@protoc_insertion_point(field_release:message.UGCAssetBundleData.Hash)
  return _impl_.hash_.Release();
}
inline void UGCAssetBundleData::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCAssetBundleData.Hash)
}

// int32 Size = 3;
inline void UGCAssetBundleData::clear_size() {
  _impl_.size_ = 0;
}
inline int32_t UGCAssetBundleData::_internal_size() const {
  return _impl_.size_;
}
inline int32_t UGCAssetBundleData::size() const {
  // @@protoc_insertion_point(field_get:message.UGCAssetBundleData.Size)
  return _internal_size();
}
inline void UGCAssetBundleData::_internal_set_size(int32_t value) {
  
  _impl_.size_ = value;
}
inline void UGCAssetBundleData::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:message.UGCAssetBundleData.Size)
}

// repeated string DependencesBundle = 4;
inline int UGCAssetBundleData::_internal_dependencesbundle_size() const {
  return _impl_.dependencesbundle_.size();
}
inline int UGCAssetBundleData::dependencesbundle_size() const {
  return _internal_dependencesbundle_size();
}
inline void UGCAssetBundleData::clear_dependencesbundle() {
  _impl_.dependencesbundle_.Clear();
}
inline std::string* UGCAssetBundleData::add_dependencesbundle() {
  std::string* _s = _internal_add_dependencesbundle();
  // @@protoc_insertion_point(field_add_mutable:message.UGCAssetBundleData.DependencesBundle)
  return _s;
}
inline const std::string& UGCAssetBundleData::_internal_dependencesbundle(int index) const {
  return _impl_.dependencesbundle_.Get(index);
}
inline const std::string& UGCAssetBundleData::dependencesbundle(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCAssetBundleData.DependencesBundle)
  return _internal_dependencesbundle(index);
}
inline std::string* UGCAssetBundleData::mutable_dependencesbundle(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCAssetBundleData.DependencesBundle)
  return _impl_.dependencesbundle_.Mutable(index);
}
inline void UGCAssetBundleData::set_dependencesbundle(int index, const std::string& value) {
  _impl_.dependencesbundle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCAssetBundleData.DependencesBundle)
}
inline void UGCAssetBundleData::set_dependencesbundle(int index, std::string&& value) {
  _impl_.dependencesbundle_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCAssetBundleData.DependencesBundle)
}
inline void UGCAssetBundleData::set_dependencesbundle(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependencesbundle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCAssetBundleData.DependencesBundle)
}
inline void UGCAssetBundleData::set_dependencesbundle(int index, const char* value, size_t size) {
  _impl_.dependencesbundle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCAssetBundleData.DependencesBundle)
}
inline std::string* UGCAssetBundleData::_internal_add_dependencesbundle() {
  return _impl_.dependencesbundle_.Add();
}
inline void UGCAssetBundleData::add_dependencesbundle(const std::string& value) {
  _impl_.dependencesbundle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCAssetBundleData.DependencesBundle)
}
inline void UGCAssetBundleData::add_dependencesbundle(std::string&& value) {
  _impl_.dependencesbundle_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCAssetBundleData.DependencesBundle)
}
inline void UGCAssetBundleData::add_dependencesbundle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dependencesbundle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCAssetBundleData.DependencesBundle)
}
inline void UGCAssetBundleData::add_dependencesbundle(const char* value, size_t size) {
  _impl_.dependencesbundle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCAssetBundleData.DependencesBundle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCAssetBundleData::dependencesbundle() const {
  // @@protoc_insertion_point(field_list:message.UGCAssetBundleData.DependencesBundle)
  return _impl_.dependencesbundle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCAssetBundleData::mutable_dependencesbundle() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCAssetBundleData.DependencesBundle)
  return &_impl_.dependencesbundle_;
}

// -------------------------------------------------------------------

// UGCAllUnityBundle

// repeated .message.UGCAssetBundleData BundleList = 1;
inline int UGCAllUnityBundle::_internal_bundlelist_size() const {
  return _impl_.bundlelist_.size();
}
inline int UGCAllUnityBundle::bundlelist_size() const {
  return _internal_bundlelist_size();
}
inline void UGCAllUnityBundle::clear_bundlelist() {
  _impl_.bundlelist_.Clear();
}
inline ::message::UGCAssetBundleData* UGCAllUnityBundle::mutable_bundlelist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCAllUnityBundle.BundleList)
  return _impl_.bundlelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCAssetBundleData >*
UGCAllUnityBundle::mutable_bundlelist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCAllUnityBundle.BundleList)
  return &_impl_.bundlelist_;
}
inline const ::message::UGCAssetBundleData& UGCAllUnityBundle::_internal_bundlelist(int index) const {
  return _impl_.bundlelist_.Get(index);
}
inline const ::message::UGCAssetBundleData& UGCAllUnityBundle::bundlelist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCAllUnityBundle.BundleList)
  return _internal_bundlelist(index);
}
inline ::message::UGCAssetBundleData* UGCAllUnityBundle::_internal_add_bundlelist() {
  return _impl_.bundlelist_.Add();
}
inline ::message::UGCAssetBundleData* UGCAllUnityBundle::add_bundlelist() {
  ::message::UGCAssetBundleData* _add = _internal_add_bundlelist();
  // @@protoc_insertion_point(field_add:message.UGCAllUnityBundle.BundleList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCAssetBundleData >&
UGCAllUnityBundle::bundlelist() const {
  // @@protoc_insertion_point(field_list:message.UGCAllUnityBundle.BundleList)
  return _impl_.bundlelist_;
}

// -------------------------------------------------------------------

// UGCResourcePackageData

// string Name = 1;
inline void UGCResourcePackageData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageData::name() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageData.Name)
}
inline std::string* UGCResourcePackageData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageData.Name)
  return _s;
}
inline const std::string& UGCResourcePackageData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCResourcePackageData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageData::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageData.Name)
  return _impl_.name_.Release();
}
inline void UGCResourcePackageData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageData.Name)
}

// string UUID = 2;
inline void UGCResourcePackageData::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageData::uuid() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.UUID)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageData::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageData.UUID)
}
inline std::string* UGCResourcePackageData::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageData.UUID)
  return _s;
}
inline const std::string& UGCResourcePackageData::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void UGCResourcePackageData::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageData::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageData::release_uuid() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageData.UUID)
  return _impl_.uuid_.Release();
}
inline void UGCResourcePackageData::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageData.UUID)
}

// .message.EUGCPackageShareType ShareType = 3;
inline void UGCResourcePackageData::clear_sharetype() {
  _impl_.sharetype_ = 0;
}
inline ::message::EUGCPackageShareType UGCResourcePackageData::_internal_sharetype() const {
  return static_cast< ::message::EUGCPackageShareType >(_impl_.sharetype_);
}
inline ::message::EUGCPackageShareType UGCResourcePackageData::sharetype() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.ShareType)
  return _internal_sharetype();
}
inline void UGCResourcePackageData::_internal_set_sharetype(::message::EUGCPackageShareType value) {
  
  _impl_.sharetype_ = value;
}
inline void UGCResourcePackageData::set_sharetype(::message::EUGCPackageShareType value) {
  _internal_set_sharetype(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageData.ShareType)
}

// .message.EUGCPackageType PackageType = 4;
inline void UGCResourcePackageData::clear_packagetype() {
  _impl_.packagetype_ = 0;
}
inline ::message::EUGCPackageType UGCResourcePackageData::_internal_packagetype() const {
  return static_cast< ::message::EUGCPackageType >(_impl_.packagetype_);
}
inline ::message::EUGCPackageType UGCResourcePackageData::packagetype() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.PackageType)
  return _internal_packagetype();
}
inline void UGCResourcePackageData::_internal_set_packagetype(::message::EUGCPackageType value) {
  
  _impl_.packagetype_ = value;
}
inline void UGCResourcePackageData::set_packagetype(::message::EUGCPackageType value) {
  _internal_set_packagetype(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageData.PackageType)
}

// .message.EUGCPackageUseableType UseableType = 5;
inline void UGCResourcePackageData::clear_useabletype() {
  _impl_.useabletype_ = 0;
}
inline ::message::EUGCPackageUseableType UGCResourcePackageData::_internal_useabletype() const {
  return static_cast< ::message::EUGCPackageUseableType >(_impl_.useabletype_);
}
inline ::message::EUGCPackageUseableType UGCResourcePackageData::useabletype() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.UseableType)
  return _internal_useabletype();
}
inline void UGCResourcePackageData::_internal_set_useabletype(::message::EUGCPackageUseableType value) {
  
  _impl_.useabletype_ = value;
}
inline void UGCResourcePackageData::set_useabletype(::message::EUGCPackageUseableType value) {
  _internal_set_useabletype(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageData.UseableType)
}

// .message.EUGCPackagePlatform Platform = 6;
inline void UGCResourcePackageData::clear_platform() {
  _impl_.platform_ = 0;
}
inline ::message::EUGCPackagePlatform UGCResourcePackageData::_internal_platform() const {
  return static_cast< ::message::EUGCPackagePlatform >(_impl_.platform_);
}
inline ::message::EUGCPackagePlatform UGCResourcePackageData::platform() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.Platform)
  return _internal_platform();
}
inline void UGCResourcePackageData::_internal_set_platform(::message::EUGCPackagePlatform value) {
  
  _impl_.platform_ = value;
}
inline void UGCResourcePackageData::set_platform(::message::EUGCPackagePlatform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageData.Platform)
}

// string Version = 7;
inline void UGCResourcePackageData::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageData::version() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.Version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageData::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageData.Version)
}
inline std::string* UGCResourcePackageData::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageData.Version)
  return _s;
}
inline const std::string& UGCResourcePackageData::_internal_version() const {
  return _impl_.version_.Get();
}
inline void UGCResourcePackageData::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageData::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageData::release_version() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageData.Version)
  return _impl_.version_.Release();
}
inline void UGCResourcePackageData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageData.Version)
}

// int32 DataFormatVersion = 8;
inline void UGCResourcePackageData::clear_dataformatversion() {
  _impl_.dataformatversion_ = 0;
}
inline int32_t UGCResourcePackageData::_internal_dataformatversion() const {
  return _impl_.dataformatversion_;
}
inline int32_t UGCResourcePackageData::dataformatversion() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.DataFormatVersion)
  return _internal_dataformatversion();
}
inline void UGCResourcePackageData::_internal_set_dataformatversion(int32_t value) {
  
  _impl_.dataformatversion_ = value;
}
inline void UGCResourcePackageData::set_dataformatversion(int32_t value) {
  _internal_set_dataformatversion(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageData.DataFormatVersion)
}

// .message.UGCAllUnityBundle AllUnityBundles = 9;
inline bool UGCResourcePackageData::_internal_has_allunitybundles() const {
  return this != internal_default_instance() && _impl_.allunitybundles_ != nullptr;
}
inline bool UGCResourcePackageData::has_allunitybundles() const {
  return _internal_has_allunitybundles();
}
inline void UGCResourcePackageData::clear_allunitybundles() {
  if (GetArenaForAllocation() == nullptr && _impl_.allunitybundles_ != nullptr) {
    delete _impl_.allunitybundles_;
  }
  _impl_.allunitybundles_ = nullptr;
}
inline const ::message::UGCAllUnityBundle& UGCResourcePackageData::_internal_allunitybundles() const {
  const ::message::UGCAllUnityBundle* p = _impl_.allunitybundles_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCAllUnityBundle&>(
      ::message::_UGCAllUnityBundle_default_instance_);
}
inline const ::message::UGCAllUnityBundle& UGCResourcePackageData::allunitybundles() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.AllUnityBundles)
  return _internal_allunitybundles();
}
inline void UGCResourcePackageData::unsafe_arena_set_allocated_allunitybundles(
    ::message::UGCAllUnityBundle* allunitybundles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allunitybundles_);
  }
  _impl_.allunitybundles_ = allunitybundles;
  if (allunitybundles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResourcePackageData.AllUnityBundles)
}
inline ::message::UGCAllUnityBundle* UGCResourcePackageData::release_allunitybundles() {
  
  ::message::UGCAllUnityBundle* temp = _impl_.allunitybundles_;
  _impl_.allunitybundles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCAllUnityBundle* UGCResourcePackageData::unsafe_arena_release_allunitybundles() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageData.AllUnityBundles)
  
  ::message::UGCAllUnityBundle* temp = _impl_.allunitybundles_;
  _impl_.allunitybundles_ = nullptr;
  return temp;
}
inline ::message::UGCAllUnityBundle* UGCResourcePackageData::_internal_mutable_allunitybundles() {
  
  if (_impl_.allunitybundles_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCAllUnityBundle>(GetArenaForAllocation());
    _impl_.allunitybundles_ = p;
  }
  return _impl_.allunitybundles_;
}
inline ::message::UGCAllUnityBundle* UGCResourcePackageData::mutable_allunitybundles() {
  ::message::UGCAllUnityBundle* _msg = _internal_mutable_allunitybundles();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageData.AllUnityBundles)
  return _msg;
}
inline void UGCResourcePackageData::set_allocated_allunitybundles(::message::UGCAllUnityBundle* allunitybundles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.allunitybundles_;
  }
  if (allunitybundles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(allunitybundles);
    if (message_arena != submessage_arena) {
      allunitybundles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allunitybundles, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.allunitybundles_ = allunitybundles;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageData.AllUnityBundles)
}

// repeated .message.UGCResourcePackageItem ResourceList = 10;
inline int UGCResourcePackageData::_internal_resourcelist_size() const {
  return _impl_.resourcelist_.size();
}
inline int UGCResourcePackageData::resourcelist_size() const {
  return _internal_resourcelist_size();
}
inline void UGCResourcePackageData::clear_resourcelist() {
  _impl_.resourcelist_.Clear();
}
inline ::message::UGCResourcePackageItem* UGCResourcePackageData::mutable_resourcelist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageData.ResourceList)
  return _impl_.resourcelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageItem >*
UGCResourcePackageData::mutable_resourcelist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResourcePackageData.ResourceList)
  return &_impl_.resourcelist_;
}
inline const ::message::UGCResourcePackageItem& UGCResourcePackageData::_internal_resourcelist(int index) const {
  return _impl_.resourcelist_.Get(index);
}
inline const ::message::UGCResourcePackageItem& UGCResourcePackageData::resourcelist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageData.ResourceList)
  return _internal_resourcelist(index);
}
inline ::message::UGCResourcePackageItem* UGCResourcePackageData::_internal_add_resourcelist() {
  return _impl_.resourcelist_.Add();
}
inline ::message::UGCResourcePackageItem* UGCResourcePackageData::add_resourcelist() {
  ::message::UGCResourcePackageItem* _add = _internal_add_resourcelist();
  // @@protoc_insertion_point(field_add:message.UGCResourcePackageData.ResourceList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageItem >&
UGCResourcePackageData::resourcelist() const {
  // @@protoc_insertion_point(field_list:message.UGCResourcePackageData.ResourceList)
  return _impl_.resourcelist_;
}

// -------------------------------------------------------------------

// UGCResourcePackageRefInfo

// string Name = 1;
inline void UGCResourcePackageRefInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageRefInfo::name() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageRefInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageRefInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageRefInfo.Name)
}
inline std::string* UGCResourcePackageRefInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageRefInfo.Name)
  return _s;
}
inline const std::string& UGCResourcePackageRefInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCResourcePackageRefInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageRefInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageRefInfo::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageRefInfo.Name)
  return _impl_.name_.Release();
}
inline void UGCResourcePackageRefInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageRefInfo.Name)
}

// string UUID = 2;
inline void UGCResourcePackageRefInfo::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageRefInfo::uuid() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageRefInfo.UUID)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageRefInfo::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageRefInfo.UUID)
}
inline std::string* UGCResourcePackageRefInfo::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageRefInfo.UUID)
  return _s;
}
inline const std::string& UGCResourcePackageRefInfo::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void UGCResourcePackageRefInfo::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageRefInfo::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageRefInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageRefInfo.UUID)
  return _impl_.uuid_.Release();
}
inline void UGCResourcePackageRefInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageRefInfo.UUID)
}

// .message.EUGCPackageRefVersionType RefVersionType = 3;
inline void UGCResourcePackageRefInfo::clear_refversiontype() {
  _impl_.refversiontype_ = 0;
}
inline ::message::EUGCPackageRefVersionType UGCResourcePackageRefInfo::_internal_refversiontype() const {
  return static_cast< ::message::EUGCPackageRefVersionType >(_impl_.refversiontype_);
}
inline ::message::EUGCPackageRefVersionType UGCResourcePackageRefInfo::refversiontype() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageRefInfo.RefVersionType)
  return _internal_refversiontype();
}
inline void UGCResourcePackageRefInfo::_internal_set_refversiontype(::message::EUGCPackageRefVersionType value) {
  
  _impl_.refversiontype_ = value;
}
inline void UGCResourcePackageRefInfo::set_refversiontype(::message::EUGCPackageRefVersionType value) {
  _internal_set_refversiontype(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageRefInfo.RefVersionType)
}

// string UseVersionMD5 = 4;
inline void UGCResourcePackageRefInfo::clear_useversionmd5() {
  _impl_.useversionmd5_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageRefInfo::useversionmd5() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageRefInfo.UseVersionMD5)
  return _internal_useversionmd5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageRefInfo::set_useversionmd5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.useversionmd5_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageRefInfo.UseVersionMD5)
}
inline std::string* UGCResourcePackageRefInfo::mutable_useversionmd5() {
  std::string* _s = _internal_mutable_useversionmd5();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageRefInfo.UseVersionMD5)
  return _s;
}
inline const std::string& UGCResourcePackageRefInfo::_internal_useversionmd5() const {
  return _impl_.useversionmd5_.Get();
}
inline void UGCResourcePackageRefInfo::_internal_set_useversionmd5(const std::string& value) {
  
  _impl_.useversionmd5_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageRefInfo::_internal_mutable_useversionmd5() {
  
  return _impl_.useversionmd5_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageRefInfo::release_useversionmd5() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageRefInfo.UseVersionMD5)
  return _impl_.useversionmd5_.Release();
}
inline void UGCResourcePackageRefInfo::set_allocated_useversionmd5(std::string* useversionmd5) {
  if (useversionmd5 != nullptr) {
    
  } else {
    
  }
  _impl_.useversionmd5_.SetAllocated(useversionmd5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.useversionmd5_.IsDefault()) {
    _impl_.useversionmd5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageRefInfo.UseVersionMD5)
}

// .message.EUGCPackageUseableType WhoRequire = 5;
inline void UGCResourcePackageRefInfo::clear_whorequire() {
  _impl_.whorequire_ = 0;
}
inline ::message::EUGCPackageUseableType UGCResourcePackageRefInfo::_internal_whorequire() const {
  return static_cast< ::message::EUGCPackageUseableType >(_impl_.whorequire_);
}
inline ::message::EUGCPackageUseableType UGCResourcePackageRefInfo::whorequire() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageRefInfo.WhoRequire)
  return _internal_whorequire();
}
inline void UGCResourcePackageRefInfo::_internal_set_whorequire(::message::EUGCPackageUseableType value) {
  
  _impl_.whorequire_ = value;
}
inline void UGCResourcePackageRefInfo::set_whorequire(::message::EUGCPackageUseableType value) {
  _internal_set_whorequire(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageRefInfo.WhoRequire)
}

// bool PlatformSpecial = 6;
inline void UGCResourcePackageRefInfo::clear_platformspecial() {
  _impl_.platformspecial_ = false;
}
inline bool UGCResourcePackageRefInfo::_internal_platformspecial() const {
  return _impl_.platformspecial_;
}
inline bool UGCResourcePackageRefInfo::platformspecial() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageRefInfo.PlatformSpecial)
  return _internal_platformspecial();
}
inline void UGCResourcePackageRefInfo::_internal_set_platformspecial(bool value) {
  
  _impl_.platformspecial_ = value;
}
inline void UGCResourcePackageRefInfo::set_platformspecial(bool value) {
  _internal_set_platformspecial(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageRefInfo.PlatformSpecial)
}

// -------------------------------------------------------------------

// UGCResourcePackageDownloadDesc

// string PackageUUID = 1;
inline void UGCResourcePackageDownloadDesc::clear_packageuuid() {
  _impl_.packageuuid_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageDownloadDesc::packageuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageDownloadDesc.PackageUUID)
  return _internal_packageuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageDownloadDesc::set_packageuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packageuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageDownloadDesc.PackageUUID)
}
inline std::string* UGCResourcePackageDownloadDesc::mutable_packageuuid() {
  std::string* _s = _internal_mutable_packageuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageDownloadDesc.PackageUUID)
  return _s;
}
inline const std::string& UGCResourcePackageDownloadDesc::_internal_packageuuid() const {
  return _impl_.packageuuid_.Get();
}
inline void UGCResourcePackageDownloadDesc::_internal_set_packageuuid(const std::string& value) {
  
  _impl_.packageuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageDownloadDesc::_internal_mutable_packageuuid() {
  
  return _impl_.packageuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageDownloadDesc::release_packageuuid() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageDownloadDesc.PackageUUID)
  return _impl_.packageuuid_.Release();
}
inline void UGCResourcePackageDownloadDesc::set_allocated_packageuuid(std::string* packageuuid) {
  if (packageuuid != nullptr) {
    
  } else {
    
  }
  _impl_.packageuuid_.SetAllocated(packageuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packageuuid_.IsDefault()) {
    _impl_.packageuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageDownloadDesc.PackageUUID)
}

// string DownloadPackageUrlTag = 2;
inline void UGCResourcePackageDownloadDesc::clear_downloadpackageurltag() {
  _impl_.downloadpackageurltag_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageDownloadDesc::downloadpackageurltag() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlTag)
  return _internal_downloadpackageurltag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageDownloadDesc::set_downloadpackageurltag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.downloadpackageurltag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlTag)
}
inline std::string* UGCResourcePackageDownloadDesc::mutable_downloadpackageurltag() {
  std::string* _s = _internal_mutable_downloadpackageurltag();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlTag)
  return _s;
}
inline const std::string& UGCResourcePackageDownloadDesc::_internal_downloadpackageurltag() const {
  return _impl_.downloadpackageurltag_.Get();
}
inline void UGCResourcePackageDownloadDesc::_internal_set_downloadpackageurltag(const std::string& value) {
  
  _impl_.downloadpackageurltag_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageDownloadDesc::_internal_mutable_downloadpackageurltag() {
  
  return _impl_.downloadpackageurltag_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageDownloadDesc::release_downloadpackageurltag() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlTag)
  return _impl_.downloadpackageurltag_.Release();
}
inline void UGCResourcePackageDownloadDesc::set_allocated_downloadpackageurltag(std::string* downloadpackageurltag) {
  if (downloadpackageurltag != nullptr) {
    
  } else {
    
  }
  _impl_.downloadpackageurltag_.SetAllocated(downloadpackageurltag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadpackageurltag_.IsDefault()) {
    _impl_.downloadpackageurltag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlTag)
}

// string DownloadPackageUrlInfo = 3;
inline void UGCResourcePackageDownloadDesc::clear_downloadpackageurlinfo() {
  _impl_.downloadpackageurlinfo_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageDownloadDesc::downloadpackageurlinfo() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlInfo)
  return _internal_downloadpackageurlinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageDownloadDesc::set_downloadpackageurlinfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.downloadpackageurlinfo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlInfo)
}
inline std::string* UGCResourcePackageDownloadDesc::mutable_downloadpackageurlinfo() {
  std::string* _s = _internal_mutable_downloadpackageurlinfo();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlInfo)
  return _s;
}
inline const std::string& UGCResourcePackageDownloadDesc::_internal_downloadpackageurlinfo() const {
  return _impl_.downloadpackageurlinfo_.Get();
}
inline void UGCResourcePackageDownloadDesc::_internal_set_downloadpackageurlinfo(const std::string& value) {
  
  _impl_.downloadpackageurlinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageDownloadDesc::_internal_mutable_downloadpackageurlinfo() {
  
  return _impl_.downloadpackageurlinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageDownloadDesc::release_downloadpackageurlinfo() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlInfo)
  return _impl_.downloadpackageurlinfo_.Release();
}
inline void UGCResourcePackageDownloadDesc::set_allocated_downloadpackageurlinfo(std::string* downloadpackageurlinfo) {
  if (downloadpackageurlinfo != nullptr) {
    
  } else {
    
  }
  _impl_.downloadpackageurlinfo_.SetAllocated(downloadpackageurlinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadpackageurlinfo_.IsDefault()) {
    _impl_.downloadpackageurlinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageDownloadDesc.DownloadPackageUrlInfo)
}

// string DownloadExtUrlTag = 4;
inline void UGCResourcePackageDownloadDesc::clear_downloadexturltag() {
  _impl_.downloadexturltag_.ClearToEmpty();
}
inline const std::string& UGCResourcePackageDownloadDesc::downloadexturltag() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageDownloadDesc.DownloadExtUrlTag)
  return _internal_downloadexturltag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourcePackageDownloadDesc::set_downloadexturltag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.downloadexturltag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageDownloadDesc.DownloadExtUrlTag)
}
inline std::string* UGCResourcePackageDownloadDesc::mutable_downloadexturltag() {
  std::string* _s = _internal_mutable_downloadexturltag();
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageDownloadDesc.DownloadExtUrlTag)
  return _s;
}
inline const std::string& UGCResourcePackageDownloadDesc::_internal_downloadexturltag() const {
  return _impl_.downloadexturltag_.Get();
}
inline void UGCResourcePackageDownloadDesc::_internal_set_downloadexturltag(const std::string& value) {
  
  _impl_.downloadexturltag_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourcePackageDownloadDesc::_internal_mutable_downloadexturltag() {
  
  return _impl_.downloadexturltag_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourcePackageDownloadDesc::release_downloadexturltag() {
  // @@protoc_insertion_point(field_release:message.UGCResourcePackageDownloadDesc.DownloadExtUrlTag)
  return _impl_.downloadexturltag_.Release();
}
inline void UGCResourcePackageDownloadDesc::set_allocated_downloadexturltag(std::string* downloadexturltag) {
  if (downloadexturltag != nullptr) {
    
  } else {
    
  }
  _impl_.downloadexturltag_.SetAllocated(downloadexturltag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.downloadexturltag_.IsDefault()) {
    _impl_.downloadexturltag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourcePackageDownloadDesc.DownloadExtUrlTag)
}

// repeated string DownloadExtUrlInfoList = 5;
inline int UGCResourcePackageDownloadDesc::_internal_downloadexturlinfolist_size() const {
  return _impl_.downloadexturlinfolist_.size();
}
inline int UGCResourcePackageDownloadDesc::downloadexturlinfolist_size() const {
  return _internal_downloadexturlinfolist_size();
}
inline void UGCResourcePackageDownloadDesc::clear_downloadexturlinfolist() {
  _impl_.downloadexturlinfolist_.Clear();
}
inline std::string* UGCResourcePackageDownloadDesc::add_downloadexturlinfolist() {
  std::string* _s = _internal_add_downloadexturlinfolist();
  // @@protoc_insertion_point(field_add_mutable:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
  return _s;
}
inline const std::string& UGCResourcePackageDownloadDesc::_internal_downloadexturlinfolist(int index) const {
  return _impl_.downloadexturlinfolist_.Get(index);
}
inline const std::string& UGCResourcePackageDownloadDesc::downloadexturlinfolist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
  return _internal_downloadexturlinfolist(index);
}
inline std::string* UGCResourcePackageDownloadDesc::mutable_downloadexturlinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
  return _impl_.downloadexturlinfolist_.Mutable(index);
}
inline void UGCResourcePackageDownloadDesc::set_downloadexturlinfolist(int index, const std::string& value) {
  _impl_.downloadexturlinfolist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
}
inline void UGCResourcePackageDownloadDesc::set_downloadexturlinfolist(int index, std::string&& value) {
  _impl_.downloadexturlinfolist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
}
inline void UGCResourcePackageDownloadDesc::set_downloadexturlinfolist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadexturlinfolist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
}
inline void UGCResourcePackageDownloadDesc::set_downloadexturlinfolist(int index, const char* value, size_t size) {
  _impl_.downloadexturlinfolist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
}
inline std::string* UGCResourcePackageDownloadDesc::_internal_add_downloadexturlinfolist() {
  return _impl_.downloadexturlinfolist_.Add();
}
inline void UGCResourcePackageDownloadDesc::add_downloadexturlinfolist(const std::string& value) {
  _impl_.downloadexturlinfolist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
}
inline void UGCResourcePackageDownloadDesc::add_downloadexturlinfolist(std::string&& value) {
  _impl_.downloadexturlinfolist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
}
inline void UGCResourcePackageDownloadDesc::add_downloadexturlinfolist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.downloadexturlinfolist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
}
inline void UGCResourcePackageDownloadDesc::add_downloadexturlinfolist(const char* value, size_t size) {
  _impl_.downloadexturlinfolist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCResourcePackageDownloadDesc::downloadexturlinfolist() const {
  // @@protoc_insertion_point(field_list:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
  return _impl_.downloadexturlinfolist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCResourcePackageDownloadDesc::mutable_downloadexturlinfolist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResourcePackageDownloadDesc.DownloadExtUrlInfoList)
  return &_impl_.downloadexturlinfolist_;
}

// int32 FileBytes = 6;
inline void UGCResourcePackageDownloadDesc::clear_filebytes() {
  _impl_.filebytes_ = 0;
}
inline int32_t UGCResourcePackageDownloadDesc::_internal_filebytes() const {
  return _impl_.filebytes_;
}
inline int32_t UGCResourcePackageDownloadDesc::filebytes() const {
  // @@protoc_insertion_point(field_get:message.UGCResourcePackageDownloadDesc.FileBytes)
  return _internal_filebytes();
}
inline void UGCResourcePackageDownloadDesc::_internal_set_filebytes(int32_t value) {
  
  _impl_.filebytes_ = value;
}
inline void UGCResourcePackageDownloadDesc::set_filebytes(int32_t value) {
  _internal_set_filebytes(value);
  // @@protoc_insertion_point(field_set:message.UGCResourcePackageDownloadDesc.FileBytes)
}

// -------------------------------------------------------------------

// UGCGameDataResourcePackageInfo

// uint32 DataFormatVersion = 1;
inline void UGCGameDataResourcePackageInfo::clear_dataformatversion() {
  _impl_.dataformatversion_ = 0u;
}
inline uint32_t UGCGameDataResourcePackageInfo::_internal_dataformatversion() const {
  return _impl_.dataformatversion_;
}
inline uint32_t UGCGameDataResourcePackageInfo::dataformatversion() const {
  // @@protoc_insertion_point(field_get:message.UGCGameDataResourcePackageInfo.DataFormatVersion)
  return _internal_dataformatversion();
}
inline void UGCGameDataResourcePackageInfo::_internal_set_dataformatversion(uint32_t value) {
  
  _impl_.dataformatversion_ = value;
}
inline void UGCGameDataResourcePackageInfo::set_dataformatversion(uint32_t value) {
  _internal_set_dataformatversion(value);
  // @@protoc_insertion_point(field_set:message.UGCGameDataResourcePackageInfo.DataFormatVersion)
}

// repeated .message.UGCResourcePackageRefInfo RefPackages = 3;
inline int UGCGameDataResourcePackageInfo::_internal_refpackages_size() const {
  return _impl_.refpackages_.size();
}
inline int UGCGameDataResourcePackageInfo::refpackages_size() const {
  return _internal_refpackages_size();
}
inline void UGCGameDataResourcePackageInfo::clear_refpackages() {
  _impl_.refpackages_.Clear();
}
inline ::message::UGCResourcePackageRefInfo* UGCGameDataResourcePackageInfo::mutable_refpackages(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameDataResourcePackageInfo.RefPackages)
  return _impl_.refpackages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageRefInfo >*
UGCGameDataResourcePackageInfo::mutable_refpackages() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameDataResourcePackageInfo.RefPackages)
  return &_impl_.refpackages_;
}
inline const ::message::UGCResourcePackageRefInfo& UGCGameDataResourcePackageInfo::_internal_refpackages(int index) const {
  return _impl_.refpackages_.Get(index);
}
inline const ::message::UGCResourcePackageRefInfo& UGCGameDataResourcePackageInfo::refpackages(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameDataResourcePackageInfo.RefPackages)
  return _internal_refpackages(index);
}
inline ::message::UGCResourcePackageRefInfo* UGCGameDataResourcePackageInfo::_internal_add_refpackages() {
  return _impl_.refpackages_.Add();
}
inline ::message::UGCResourcePackageRefInfo* UGCGameDataResourcePackageInfo::add_refpackages() {
  ::message::UGCResourcePackageRefInfo* _add = _internal_add_refpackages();
  // @@protoc_insertion_point(field_add:message.UGCGameDataResourcePackageInfo.RefPackages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageRefInfo >&
UGCGameDataResourcePackageInfo::refpackages() const {
  // @@protoc_insertion_point(field_list:message.UGCGameDataResourcePackageInfo.RefPackages)
  return _impl_.refpackages_;
}

// repeated .message.UGCResourcePackageData BuildinPackages = 4;
inline int UGCGameDataResourcePackageInfo::_internal_buildinpackages_size() const {
  return _impl_.buildinpackages_.size();
}
inline int UGCGameDataResourcePackageInfo::buildinpackages_size() const {
  return _internal_buildinpackages_size();
}
inline void UGCGameDataResourcePackageInfo::clear_buildinpackages() {
  _impl_.buildinpackages_.Clear();
}
inline ::message::UGCResourcePackageData* UGCGameDataResourcePackageInfo::mutable_buildinpackages(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameDataResourcePackageInfo.BuildinPackages)
  return _impl_.buildinpackages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageData >*
UGCGameDataResourcePackageInfo::mutable_buildinpackages() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameDataResourcePackageInfo.BuildinPackages)
  return &_impl_.buildinpackages_;
}
inline const ::message::UGCResourcePackageData& UGCGameDataResourcePackageInfo::_internal_buildinpackages(int index) const {
  return _impl_.buildinpackages_.Get(index);
}
inline const ::message::UGCResourcePackageData& UGCGameDataResourcePackageInfo::buildinpackages(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameDataResourcePackageInfo.BuildinPackages)
  return _internal_buildinpackages(index);
}
inline ::message::UGCResourcePackageData* UGCGameDataResourcePackageInfo::_internal_add_buildinpackages() {
  return _impl_.buildinpackages_.Add();
}
inline ::message::UGCResourcePackageData* UGCGameDataResourcePackageInfo::add_buildinpackages() {
  ::message::UGCResourcePackageData* _add = _internal_add_buildinpackages();
  // @@protoc_insertion_point(field_add:message.UGCGameDataResourcePackageInfo.BuildinPackages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageData >&
UGCGameDataResourcePackageInfo::buildinpackages() const {
  // @@protoc_insertion_point(field_list:message.UGCGameDataResourcePackageInfo.BuildinPackages)
  return _impl_.buildinpackages_;
}

// repeated .message.UGCResourcePackageDownloadDesc DownloadDescs = 5;
inline int UGCGameDataResourcePackageInfo::_internal_downloaddescs_size() const {
  return _impl_.downloaddescs_.size();
}
inline int UGCGameDataResourcePackageInfo::downloaddescs_size() const {
  return _internal_downloaddescs_size();
}
inline void UGCGameDataResourcePackageInfo::clear_downloaddescs() {
  _impl_.downloaddescs_.Clear();
}
inline ::message::UGCResourcePackageDownloadDesc* UGCGameDataResourcePackageInfo::mutable_downloaddescs(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameDataResourcePackageInfo.DownloadDescs)
  return _impl_.downloaddescs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageDownloadDesc >*
UGCGameDataResourcePackageInfo::mutable_downloaddescs() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameDataResourcePackageInfo.DownloadDescs)
  return &_impl_.downloaddescs_;
}
inline const ::message::UGCResourcePackageDownloadDesc& UGCGameDataResourcePackageInfo::_internal_downloaddescs(int index) const {
  return _impl_.downloaddescs_.Get(index);
}
inline const ::message::UGCResourcePackageDownloadDesc& UGCGameDataResourcePackageInfo::downloaddescs(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameDataResourcePackageInfo.DownloadDescs)
  return _internal_downloaddescs(index);
}
inline ::message::UGCResourcePackageDownloadDesc* UGCGameDataResourcePackageInfo::_internal_add_downloaddescs() {
  return _impl_.downloaddescs_.Add();
}
inline ::message::UGCResourcePackageDownloadDesc* UGCGameDataResourcePackageInfo::add_downloaddescs() {
  ::message::UGCResourcePackageDownloadDesc* _add = _internal_add_downloaddescs();
  // @@protoc_insertion_point(field_add:message.UGCGameDataResourcePackageInfo.DownloadDescs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourcePackageDownloadDesc >&
UGCGameDataResourcePackageInfo::downloaddescs() const {
  // @@protoc_insertion_point(field_list:message.UGCGameDataResourcePackageInfo.DownloadDescs)
  return _impl_.downloaddescs_;
}

// -------------------------------------------------------------------

// UGCResourceFileDownloadDesc

// string SubFileID = 1;
inline void UGCResourceFileDownloadDesc::clear_subfileid() {
  _impl_.subfileid_.ClearToEmpty();
}
inline const std::string& UGCResourceFileDownloadDesc::subfileid() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceFileDownloadDesc.SubFileID)
  return _internal_subfileid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourceFileDownloadDesc::set_subfileid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subfileid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourceFileDownloadDesc.SubFileID)
}
inline std::string* UGCResourceFileDownloadDesc::mutable_subfileid() {
  std::string* _s = _internal_mutable_subfileid();
  // @@protoc_insertion_point(field_mutable:message.UGCResourceFileDownloadDesc.SubFileID)
  return _s;
}
inline const std::string& UGCResourceFileDownloadDesc::_internal_subfileid() const {
  return _impl_.subfileid_.Get();
}
inline void UGCResourceFileDownloadDesc::_internal_set_subfileid(const std::string& value) {
  
  _impl_.subfileid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourceFileDownloadDesc::_internal_mutable_subfileid() {
  
  return _impl_.subfileid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourceFileDownloadDesc::release_subfileid() {
  // @@protoc_insertion_point(field_release:message.UGCResourceFileDownloadDesc.SubFileID)
  return _impl_.subfileid_.Release();
}
inline void UGCResourceFileDownloadDesc::set_allocated_subfileid(std::string* subfileid) {
  if (subfileid != nullptr) {
    
  } else {
    
  }
  _impl_.subfileid_.SetAllocated(subfileid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subfileid_.IsDefault()) {
    _impl_.subfileid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourceFileDownloadDesc.SubFileID)
}

// string SHA1 = 2;
inline void UGCResourceFileDownloadDesc::clear_sha1() {
  _impl_.sha1_.ClearToEmpty();
}
inline const std::string& UGCResourceFileDownloadDesc::sha1() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceFileDownloadDesc.SHA1)
  return _internal_sha1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourceFileDownloadDesc::set_sha1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sha1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourceFileDownloadDesc.SHA1)
}
inline std::string* UGCResourceFileDownloadDesc::mutable_sha1() {
  std::string* _s = _internal_mutable_sha1();
  // @@protoc_insertion_point(field_mutable:message.UGCResourceFileDownloadDesc.SHA1)
  return _s;
}
inline const std::string& UGCResourceFileDownloadDesc::_internal_sha1() const {
  return _impl_.sha1_.Get();
}
inline void UGCResourceFileDownloadDesc::_internal_set_sha1(const std::string& value) {
  
  _impl_.sha1_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourceFileDownloadDesc::_internal_mutable_sha1() {
  
  return _impl_.sha1_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourceFileDownloadDesc::release_sha1() {
  // @@protoc_insertion_point(field_release:message.UGCResourceFileDownloadDesc.SHA1)
  return _impl_.sha1_.Release();
}
inline void UGCResourceFileDownloadDesc::set_allocated_sha1(std::string* sha1) {
  if (sha1 != nullptr) {
    
  } else {
    
  }
  _impl_.sha1_.SetAllocated(sha1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sha1_.IsDefault()) {
    _impl_.sha1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourceFileDownloadDesc.SHA1)
}

// int32 FileSize = 3;
inline void UGCResourceFileDownloadDesc::clear_filesize() {
  _impl_.filesize_ = 0;
}
inline int32_t UGCResourceFileDownloadDesc::_internal_filesize() const {
  return _impl_.filesize_;
}
inline int32_t UGCResourceFileDownloadDesc::filesize() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceFileDownloadDesc.FileSize)
  return _internal_filesize();
}
inline void UGCResourceFileDownloadDesc::_internal_set_filesize(int32_t value) {
  
  _impl_.filesize_ = value;
}
inline void UGCResourceFileDownloadDesc::set_filesize(int32_t value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceFileDownloadDesc.FileSize)
}

// string URL = 4;
inline void UGCResourceFileDownloadDesc::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& UGCResourceFileDownloadDesc::url() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceFileDownloadDesc.URL)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResourceFileDownloadDesc::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResourceFileDownloadDesc.URL)
}
inline std::string* UGCResourceFileDownloadDesc::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:message.UGCResourceFileDownloadDesc.URL)
  return _s;
}
inline const std::string& UGCResourceFileDownloadDesc::_internal_url() const {
  return _impl_.url_.Get();
}
inline void UGCResourceFileDownloadDesc::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResourceFileDownloadDesc::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResourceFileDownloadDesc::release_url() {
  // @@protoc_insertion_point(field_release:message.UGCResourceFileDownloadDesc.URL)
  return _impl_.url_.Release();
}
inline void UGCResourceFileDownloadDesc::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResourceFileDownloadDesc.URL)
}

// int32 PlatformRequireMask = 5;
inline void UGCResourceFileDownloadDesc::clear_platformrequiremask() {
  _impl_.platformrequiremask_ = 0;
}
inline int32_t UGCResourceFileDownloadDesc::_internal_platformrequiremask() const {
  return _impl_.platformrequiremask_;
}
inline int32_t UGCResourceFileDownloadDesc::platformrequiremask() const {
  // @@protoc_insertion_point(field_get:message.UGCResourceFileDownloadDesc.PlatformRequireMask)
  return _internal_platformrequiremask();
}
inline void UGCResourceFileDownloadDesc::_internal_set_platformrequiremask(int32_t value) {
  
  _impl_.platformrequiremask_ = value;
}
inline void UGCResourceFileDownloadDesc::set_platformrequiremask(int32_t value) {
  _internal_set_platformrequiremask(value);
  // @@protoc_insertion_point(field_set:message.UGCResourceFileDownloadDesc.PlatformRequireMask)
}

// -------------------------------------------------------------------

// UGCPackageDownloadDesc

// string PackageUUID = 1;
inline void UGCPackageDownloadDesc::clear_packageuuid() {
  _impl_.packageuuid_.ClearToEmpty();
}
inline const std::string& UGCPackageDownloadDesc::packageuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCPackageDownloadDesc.PackageUUID)
  return _internal_packageuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCPackageDownloadDesc::set_packageuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packageuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCPackageDownloadDesc.PackageUUID)
}
inline std::string* UGCPackageDownloadDesc::mutable_packageuuid() {
  std::string* _s = _internal_mutable_packageuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCPackageDownloadDesc.PackageUUID)
  return _s;
}
inline const std::string& UGCPackageDownloadDesc::_internal_packageuuid() const {
  return _impl_.packageuuid_.Get();
}
inline void UGCPackageDownloadDesc::_internal_set_packageuuid(const std::string& value) {
  
  _impl_.packageuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCPackageDownloadDesc::_internal_mutable_packageuuid() {
  
  return _impl_.packageuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCPackageDownloadDesc::release_packageuuid() {
  // @@protoc_insertion_point(field_release:message.UGCPackageDownloadDesc.PackageUUID)
  return _impl_.packageuuid_.Release();
}
inline void UGCPackageDownloadDesc::set_allocated_packageuuid(std::string* packageuuid) {
  if (packageuuid != nullptr) {
    
  } else {
    
  }
  _impl_.packageuuid_.SetAllocated(packageuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packageuuid_.IsDefault()) {
    _impl_.packageuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCPackageDownloadDesc.PackageUUID)
}

// repeated .message.UGCResourceFileDownloadDesc FileList = 2;
inline int UGCPackageDownloadDesc::_internal_filelist_size() const {
  return _impl_.filelist_.size();
}
inline int UGCPackageDownloadDesc::filelist_size() const {
  return _internal_filelist_size();
}
inline void UGCPackageDownloadDesc::clear_filelist() {
  _impl_.filelist_.Clear();
}
inline ::message::UGCResourceFileDownloadDesc* UGCPackageDownloadDesc::mutable_filelist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCPackageDownloadDesc.FileList)
  return _impl_.filelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceFileDownloadDesc >*
UGCPackageDownloadDesc::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCPackageDownloadDesc.FileList)
  return &_impl_.filelist_;
}
inline const ::message::UGCResourceFileDownloadDesc& UGCPackageDownloadDesc::_internal_filelist(int index) const {
  return _impl_.filelist_.Get(index);
}
inline const ::message::UGCResourceFileDownloadDesc& UGCPackageDownloadDesc::filelist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCPackageDownloadDesc.FileList)
  return _internal_filelist(index);
}
inline ::message::UGCResourceFileDownloadDesc* UGCPackageDownloadDesc::_internal_add_filelist() {
  return _impl_.filelist_.Add();
}
inline ::message::UGCResourceFileDownloadDesc* UGCPackageDownloadDesc::add_filelist() {
  ::message::UGCResourceFileDownloadDesc* _add = _internal_add_filelist();
  // @@protoc_insertion_point(field_add:message.UGCPackageDownloadDesc.FileList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResourceFileDownloadDesc >&
UGCPackageDownloadDesc::filelist() const {
  // @@protoc_insertion_point(field_list:message.UGCPackageDownloadDesc.FileList)
  return _impl_.filelist_;
}

// int32 DownloadPriority = 3;
inline void UGCPackageDownloadDesc::clear_downloadpriority() {
  _impl_.downloadpriority_ = 0;
}
inline int32_t UGCPackageDownloadDesc::_internal_downloadpriority() const {
  return _impl_.downloadpriority_;
}
inline int32_t UGCPackageDownloadDesc::downloadpriority() const {
  // @@protoc_insertion_point(field_get:message.UGCPackageDownloadDesc.DownloadPriority)
  return _internal_downloadpriority();
}
inline void UGCPackageDownloadDesc::_internal_set_downloadpriority(int32_t value) {
  
  _impl_.downloadpriority_ = value;
}
inline void UGCPackageDownloadDesc::set_downloadpriority(int32_t value) {
  _internal_set_downloadpriority(value);
  // @@protoc_insertion_point(field_set:message.UGCPackageDownloadDesc.DownloadPriority)
}

// -------------------------------------------------------------------

// UGCGameDataDownloadDesc

// repeated .message.UGCPackageDownloadDesc PackageList = 1;
inline int UGCGameDataDownloadDesc::_internal_packagelist_size() const {
  return _impl_.packagelist_.size();
}
inline int UGCGameDataDownloadDesc::packagelist_size() const {
  return _internal_packagelist_size();
}
inline void UGCGameDataDownloadDesc::clear_packagelist() {
  _impl_.packagelist_.Clear();
}
inline ::message::UGCPackageDownloadDesc* UGCGameDataDownloadDesc::mutable_packagelist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCGameDataDownloadDesc.PackageList)
  return _impl_.packagelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPackageDownloadDesc >*
UGCGameDataDownloadDesc::mutable_packagelist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCGameDataDownloadDesc.PackageList)
  return &_impl_.packagelist_;
}
inline const ::message::UGCPackageDownloadDesc& UGCGameDataDownloadDesc::_internal_packagelist(int index) const {
  return _impl_.packagelist_.Get(index);
}
inline const ::message::UGCPackageDownloadDesc& UGCGameDataDownloadDesc::packagelist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCGameDataDownloadDesc.PackageList)
  return _internal_packagelist(index);
}
inline ::message::UGCPackageDownloadDesc* UGCGameDataDownloadDesc::_internal_add_packagelist() {
  return _impl_.packagelist_.Add();
}
inline ::message::UGCPackageDownloadDesc* UGCGameDataDownloadDesc::add_packagelist() {
  ::message::UGCPackageDownloadDesc* _add = _internal_add_packagelist();
  // @@protoc_insertion_point(field_add:message.UGCGameDataDownloadDesc.PackageList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCPackageDownloadDesc >&
UGCGameDataDownloadDesc::packagelist() const {
  // @@protoc_insertion_point(field_list:message.UGCGameDataDownloadDesc.PackageList)
  return _impl_.packagelist_;
}

// -------------------------------------------------------------------

// UGCCSVRowData

// repeated string RowData = 1;
inline int UGCCSVRowData::_internal_rowdata_size() const {
  return _impl_.rowdata_.size();
}
inline int UGCCSVRowData::rowdata_size() const {
  return _internal_rowdata_size();
}
inline void UGCCSVRowData::clear_rowdata() {
  _impl_.rowdata_.Clear();
}
inline std::string* UGCCSVRowData::add_rowdata() {
  std::string* _s = _internal_add_rowdata();
  // @@protoc_insertion_point(field_add_mutable:message.UGCCSVRowData.RowData)
  return _s;
}
inline const std::string& UGCCSVRowData::_internal_rowdata(int index) const {
  return _impl_.rowdata_.Get(index);
}
inline const std::string& UGCCSVRowData::rowdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCCSVRowData.RowData)
  return _internal_rowdata(index);
}
inline std::string* UGCCSVRowData::mutable_rowdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCCSVRowData.RowData)
  return _impl_.rowdata_.Mutable(index);
}
inline void UGCCSVRowData::set_rowdata(int index, const std::string& value) {
  _impl_.rowdata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCCSVRowData.RowData)
}
inline void UGCCSVRowData::set_rowdata(int index, std::string&& value) {
  _impl_.rowdata_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCCSVRowData.RowData)
}
inline void UGCCSVRowData::set_rowdata(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rowdata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCCSVRowData.RowData)
}
inline void UGCCSVRowData::set_rowdata(int index, const char* value, size_t size) {
  _impl_.rowdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCCSVRowData.RowData)
}
inline std::string* UGCCSVRowData::_internal_add_rowdata() {
  return _impl_.rowdata_.Add();
}
inline void UGCCSVRowData::add_rowdata(const std::string& value) {
  _impl_.rowdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCCSVRowData.RowData)
}
inline void UGCCSVRowData::add_rowdata(std::string&& value) {
  _impl_.rowdata_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCCSVRowData.RowData)
}
inline void UGCCSVRowData::add_rowdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.rowdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCCSVRowData.RowData)
}
inline void UGCCSVRowData::add_rowdata(const char* value, size_t size) {
  _impl_.rowdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCCSVRowData.RowData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCCSVRowData::rowdata() const {
  // @@protoc_insertion_point(field_list:message.UGCCSVRowData.RowData)
  return _impl_.rowdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCCSVRowData::mutable_rowdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCCSVRowData.RowData)
  return &_impl_.rowdata_;
}

// -------------------------------------------------------------------

// UGCCSVData

// repeated .message.UGCCSVRowData CSVData = 1;
inline int UGCCSVData::_internal_csvdata_size() const {
  return _impl_.csvdata_.size();
}
inline int UGCCSVData::csvdata_size() const {
  return _internal_csvdata_size();
}
inline void UGCCSVData::clear_csvdata() {
  _impl_.csvdata_.Clear();
}
inline ::message::UGCCSVRowData* UGCCSVData::mutable_csvdata(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCCSVData.CSVData)
  return _impl_.csvdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCSVRowData >*
UGCCSVData::mutable_csvdata() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCCSVData.CSVData)
  return &_impl_.csvdata_;
}
inline const ::message::UGCCSVRowData& UGCCSVData::_internal_csvdata(int index) const {
  return _impl_.csvdata_.Get(index);
}
inline const ::message::UGCCSVRowData& UGCCSVData::csvdata(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCCSVData.CSVData)
  return _internal_csvdata(index);
}
inline ::message::UGCCSVRowData* UGCCSVData::_internal_add_csvdata() {
  return _impl_.csvdata_.Add();
}
inline ::message::UGCCSVRowData* UGCCSVData::add_csvdata() {
  ::message::UGCCSVRowData* _add = _internal_add_csvdata();
  // @@protoc_insertion_point(field_add:message.UGCCSVData.CSVData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCCSVRowData >&
UGCCSVData::csvdata() const {
  // @@protoc_insertion_point(field_list:message.UGCCSVData.CSVData)
  return _impl_.csvdata_;
}

// -------------------------------------------------------------------

// UGCResFFBuildin

// string FFResourceName = 1;
inline void UGCResFFBuildin::clear_ffresourcename() {
  _impl_.ffresourcename_.ClearToEmpty();
}
inline const std::string& UGCResFFBuildin::ffresourcename() const {
  // @@protoc_insertion_point(field_get:message.UGCResFFBuildin.FFResourceName)
  return _internal_ffresourcename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResFFBuildin::set_ffresourcename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ffresourcename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResFFBuildin.FFResourceName)
}
inline std::string* UGCResFFBuildin::mutable_ffresourcename() {
  std::string* _s = _internal_mutable_ffresourcename();
  // @@protoc_insertion_point(field_mutable:message.UGCResFFBuildin.FFResourceName)
  return _s;
}
inline const std::string& UGCResFFBuildin::_internal_ffresourcename() const {
  return _impl_.ffresourcename_.Get();
}
inline void UGCResFFBuildin::_internal_set_ffresourcename(const std::string& value) {
  
  _impl_.ffresourcename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResFFBuildin::_internal_mutable_ffresourcename() {
  
  return _impl_.ffresourcename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResFFBuildin::release_ffresourcename() {
  // @@protoc_insertion_point(field_release:message.UGCResFFBuildin.FFResourceName)
  return _impl_.ffresourcename_.Release();
}
inline void UGCResFFBuildin::set_allocated_ffresourcename(std::string* ffresourcename) {
  if (ffresourcename != nullptr) {
    
  } else {
    
  }
  _impl_.ffresourcename_.SetAllocated(ffresourcename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ffresourcename_.IsDefault()) {
    _impl_.ffresourcename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResFFBuildin.FFResourceName)
}

// -------------------------------------------------------------------

// UGCResAnimationStateClipData

// string ClipUUID = 1;
inline void UGCResAnimationStateClipData::clear_clipuuid() {
  _impl_.clipuuid_.ClearToEmpty();
}
inline const std::string& UGCResAnimationStateClipData::clipuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationStateClipData.ClipUUID)
  return _internal_clipuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAnimationStateClipData::set_clipuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clipuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAnimationStateClipData.ClipUUID)
}
inline std::string* UGCResAnimationStateClipData::mutable_clipuuid() {
  std::string* _s = _internal_mutable_clipuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimationStateClipData.ClipUUID)
  return _s;
}
inline const std::string& UGCResAnimationStateClipData::_internal_clipuuid() const {
  return _impl_.clipuuid_.Get();
}
inline void UGCResAnimationStateClipData::_internal_set_clipuuid(const std::string& value) {
  
  _impl_.clipuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAnimationStateClipData::_internal_mutable_clipuuid() {
  
  return _impl_.clipuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAnimationStateClipData::release_clipuuid() {
  // @@protoc_insertion_point(field_release:message.UGCResAnimationStateClipData.ClipUUID)
  return _impl_.clipuuid_.Release();
}
inline void UGCResAnimationStateClipData::set_allocated_clipuuid(std::string* clipuuid) {
  if (clipuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clipuuid_.SetAllocated(clipuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clipuuid_.IsDefault()) {
    _impl_.clipuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAnimationStateClipData.ClipUUID)
}

// string ClipName = 2;
inline void UGCResAnimationStateClipData::clear_clipname() {
  _impl_.clipname_.ClearToEmpty();
}
inline const std::string& UGCResAnimationStateClipData::clipname() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationStateClipData.ClipName)
  return _internal_clipname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAnimationStateClipData::set_clipname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clipname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAnimationStateClipData.ClipName)
}
inline std::string* UGCResAnimationStateClipData::mutable_clipname() {
  std::string* _s = _internal_mutable_clipname();
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimationStateClipData.ClipName)
  return _s;
}
inline const std::string& UGCResAnimationStateClipData::_internal_clipname() const {
  return _impl_.clipname_.Get();
}
inline void UGCResAnimationStateClipData::_internal_set_clipname(const std::string& value) {
  
  _impl_.clipname_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAnimationStateClipData::_internal_mutable_clipname() {
  
  return _impl_.clipname_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAnimationStateClipData::release_clipname() {
  // @@protoc_insertion_point(field_release:message.UGCResAnimationStateClipData.ClipName)
  return _impl_.clipname_.Release();
}
inline void UGCResAnimationStateClipData::set_allocated_clipname(std::string* clipname) {
  if (clipname != nullptr) {
    
  } else {
    
  }
  _impl_.clipname_.SetAllocated(clipname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clipname_.IsDefault()) {
    _impl_.clipname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAnimationStateClipData.ClipName)
}

// bool IsLoop = 3;
inline void UGCResAnimationStateClipData::clear_isloop() {
  _impl_.isloop_ = false;
}
inline bool UGCResAnimationStateClipData::_internal_isloop() const {
  return _impl_.isloop_;
}
inline bool UGCResAnimationStateClipData::isloop() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationStateClipData.IsLoop)
  return _internal_isloop();
}
inline void UGCResAnimationStateClipData::_internal_set_isloop(bool value) {
  
  _impl_.isloop_ = value;
}
inline void UGCResAnimationStateClipData::set_isloop(bool value) {
  _internal_set_isloop(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimationStateClipData.IsLoop)
}

// float PlaySpeed = 4;
inline void UGCResAnimationStateClipData::clear_playspeed() {
  _impl_.playspeed_ = 0;
}
inline float UGCResAnimationStateClipData::_internal_playspeed() const {
  return _impl_.playspeed_;
}
inline float UGCResAnimationStateClipData::playspeed() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationStateClipData.PlaySpeed)
  return _internal_playspeed();
}
inline void UGCResAnimationStateClipData::_internal_set_playspeed(float value) {
  
  _impl_.playspeed_ = value;
}
inline void UGCResAnimationStateClipData::set_playspeed(float value) {
  _internal_set_playspeed(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimationStateClipData.PlaySpeed)
}

// float Length = 5;
inline void UGCResAnimationStateClipData::clear_length() {
  _impl_.length_ = 0;
}
inline float UGCResAnimationStateClipData::_internal_length() const {
  return _impl_.length_;
}
inline float UGCResAnimationStateClipData::length() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationStateClipData.Length)
  return _internal_length();
}
inline void UGCResAnimationStateClipData::_internal_set_length(float value) {
  
  _impl_.length_ = value;
}
inline void UGCResAnimationStateClipData::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimationStateClipData.Length)
}

// -------------------------------------------------------------------

// UGCResAnimationStateData

// string StateName = 1;
inline void UGCResAnimationStateData::clear_statename() {
  _impl_.statename_.ClearToEmpty();
}
inline const std::string& UGCResAnimationStateData::statename() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationStateData.StateName)
  return _internal_statename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAnimationStateData::set_statename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.statename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAnimationStateData.StateName)
}
inline std::string* UGCResAnimationStateData::mutable_statename() {
  std::string* _s = _internal_mutable_statename();
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimationStateData.StateName)
  return _s;
}
inline const std::string& UGCResAnimationStateData::_internal_statename() const {
  return _impl_.statename_.Get();
}
inline void UGCResAnimationStateData::_internal_set_statename(const std::string& value) {
  
  _impl_.statename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAnimationStateData::_internal_mutable_statename() {
  
  return _impl_.statename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAnimationStateData::release_statename() {
  // @@protoc_insertion_point(field_release:message.UGCResAnimationStateData.StateName)
  return _impl_.statename_.Release();
}
inline void UGCResAnimationStateData::set_allocated_statename(std::string* statename) {
  if (statename != nullptr) {
    
  } else {
    
  }
  _impl_.statename_.SetAllocated(statename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.statename_.IsDefault()) {
    _impl_.statename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAnimationStateData.StateName)
}

// bool IsLoop = 2;
inline void UGCResAnimationStateData::clear_isloop() {
  _impl_.isloop_ = false;
}
inline bool UGCResAnimationStateData::_internal_isloop() const {
  return _impl_.isloop_;
}
inline bool UGCResAnimationStateData::isloop() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationStateData.IsLoop)
  return _internal_isloop();
}
inline void UGCResAnimationStateData::_internal_set_isloop(bool value) {
  
  _impl_.isloop_ = value;
}
inline void UGCResAnimationStateData::set_isloop(bool value) {
  _internal_set_isloop(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimationStateData.IsLoop)
}

// repeated .message.UGCResAnimationStateClipData Clips = 3;
inline int UGCResAnimationStateData::_internal_clips_size() const {
  return _impl_.clips_.size();
}
inline int UGCResAnimationStateData::clips_size() const {
  return _internal_clips_size();
}
inline void UGCResAnimationStateData::clear_clips() {
  _impl_.clips_.Clear();
}
inline ::message::UGCResAnimationStateClipData* UGCResAnimationStateData::mutable_clips(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimationStateData.Clips)
  return _impl_.clips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateClipData >*
UGCResAnimationStateData::mutable_clips() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResAnimationStateData.Clips)
  return &_impl_.clips_;
}
inline const ::message::UGCResAnimationStateClipData& UGCResAnimationStateData::_internal_clips(int index) const {
  return _impl_.clips_.Get(index);
}
inline const ::message::UGCResAnimationStateClipData& UGCResAnimationStateData::clips(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationStateData.Clips)
  return _internal_clips(index);
}
inline ::message::UGCResAnimationStateClipData* UGCResAnimationStateData::_internal_add_clips() {
  return _impl_.clips_.Add();
}
inline ::message::UGCResAnimationStateClipData* UGCResAnimationStateData::add_clips() {
  ::message::UGCResAnimationStateClipData* _add = _internal_add_clips();
  // @@protoc_insertion_point(field_add:message.UGCResAnimationStateData.Clips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateClipData >&
UGCResAnimationStateData::clips() const {
  // @@protoc_insertion_point(field_list:message.UGCResAnimationStateData.Clips)
  return _impl_.clips_;
}

// -------------------------------------------------------------------

// UGCResAnimationControllerData

// repeated .message.UGCResAnimationStateData States = 1;
inline int UGCResAnimationControllerData::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int UGCResAnimationControllerData::states_size() const {
  return _internal_states_size();
}
inline void UGCResAnimationControllerData::clear_states() {
  _impl_.states_.Clear();
}
inline ::message::UGCResAnimationStateData* UGCResAnimationControllerData::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimationControllerData.States)
  return _impl_.states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateData >*
UGCResAnimationControllerData::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResAnimationControllerData.States)
  return &_impl_.states_;
}
inline const ::message::UGCResAnimationStateData& UGCResAnimationControllerData::_internal_states(int index) const {
  return _impl_.states_.Get(index);
}
inline const ::message::UGCResAnimationStateData& UGCResAnimationControllerData::states(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimationControllerData.States)
  return _internal_states(index);
}
inline ::message::UGCResAnimationStateData* UGCResAnimationControllerData::_internal_add_states() {
  return _impl_.states_.Add();
}
inline ::message::UGCResAnimationStateData* UGCResAnimationControllerData::add_states() {
  ::message::UGCResAnimationStateData* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:message.UGCResAnimationControllerData.States)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimationStateData >&
UGCResAnimationControllerData::states() const {
  // @@protoc_insertion_point(field_list:message.UGCResAnimationControllerData.States)
  return _impl_.states_;
}

// -------------------------------------------------------------------

// UGCResBoneNodeCapsuleData

// .message.ProtoBuffVector3 Center = 1;
inline bool UGCResBoneNodeCapsuleData::_internal_has_center() const {
  return this != internal_default_instance() && _impl_.center_ != nullptr;
}
inline bool UGCResBoneNodeCapsuleData::has_center() const {
  return _internal_has_center();
}
inline const ::message::ProtoBuffVector3& UGCResBoneNodeCapsuleData::_internal_center() const {
  const ::message::ProtoBuffVector3* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCResBoneNodeCapsuleData::center() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeCapsuleData.Center)
  return _internal_center();
}
inline void UGCResBoneNodeCapsuleData::unsafe_arena_set_allocated_center(
    ::message::ProtoBuffVector3* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResBoneNodeCapsuleData.Center)
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeCapsuleData::release_center() {
  
  ::message::ProtoBuffVector3* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeCapsuleData::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:message.UGCResBoneNodeCapsuleData.Center)
  
  ::message::ProtoBuffVector3* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeCapsuleData::_internal_mutable_center() {
  
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeCapsuleData::mutable_center() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:message.UGCResBoneNodeCapsuleData.Center)
  return _msg;
}
inline void UGCResBoneNodeCapsuleData::set_allocated_center(::message::ProtoBuffVector3* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResBoneNodeCapsuleData.Center)
}

// float Radius = 2;
inline void UGCResBoneNodeCapsuleData::clear_radius() {
  _impl_.radius_ = 0;
}
inline float UGCResBoneNodeCapsuleData::_internal_radius() const {
  return _impl_.radius_;
}
inline float UGCResBoneNodeCapsuleData::radius() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeCapsuleData.Radius)
  return _internal_radius();
}
inline void UGCResBoneNodeCapsuleData::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void UGCResBoneNodeCapsuleData::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:message.UGCResBoneNodeCapsuleData.Radius)
}

// float Height = 3;
inline void UGCResBoneNodeCapsuleData::clear_height() {
  _impl_.height_ = 0;
}
inline float UGCResBoneNodeCapsuleData::_internal_height() const {
  return _impl_.height_;
}
inline float UGCResBoneNodeCapsuleData::height() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeCapsuleData.Height)
  return _internal_height();
}
inline void UGCResBoneNodeCapsuleData::_internal_set_height(float value) {
  
  _impl_.height_ = value;
}
inline void UGCResBoneNodeCapsuleData::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:message.UGCResBoneNodeCapsuleData.Height)
}

// int32 Direction = 4;
inline void UGCResBoneNodeCapsuleData::clear_direction() {
  _impl_.direction_ = 0;
}
inline int32_t UGCResBoneNodeCapsuleData::_internal_direction() const {
  return _impl_.direction_;
}
inline int32_t UGCResBoneNodeCapsuleData::direction() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeCapsuleData.Direction)
  return _internal_direction();
}
inline void UGCResBoneNodeCapsuleData::_internal_set_direction(int32_t value) {
  
  _impl_.direction_ = value;
}
inline void UGCResBoneNodeCapsuleData::set_direction(int32_t value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:message.UGCResBoneNodeCapsuleData.Direction)
}

// int32 BodyType = 5;
inline void UGCResBoneNodeCapsuleData::clear_bodytype() {
  _impl_.bodytype_ = 0;
}
inline int32_t UGCResBoneNodeCapsuleData::_internal_bodytype() const {
  return _impl_.bodytype_;
}
inline int32_t UGCResBoneNodeCapsuleData::bodytype() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeCapsuleData.BodyType)
  return _internal_bodytype();
}
inline void UGCResBoneNodeCapsuleData::_internal_set_bodytype(int32_t value) {
  
  _impl_.bodytype_ = value;
}
inline void UGCResBoneNodeCapsuleData::set_bodytype(int32_t value) {
  _internal_set_bodytype(value);
  // @@protoc_insertion_point(field_set:message.UGCResBoneNodeCapsuleData.BodyType)
}

// -------------------------------------------------------------------

// UGCResBoneNodeData

// string BoneName = 1;
inline void UGCResBoneNodeData::clear_bonename() {
  _impl_.bonename_.ClearToEmpty();
}
inline const std::string& UGCResBoneNodeData::bonename() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeData.BoneName)
  return _internal_bonename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResBoneNodeData::set_bonename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bonename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResBoneNodeData.BoneName)
}
inline std::string* UGCResBoneNodeData::mutable_bonename() {
  std::string* _s = _internal_mutable_bonename();
  // @@protoc_insertion_point(field_mutable:message.UGCResBoneNodeData.BoneName)
  return _s;
}
inline const std::string& UGCResBoneNodeData::_internal_bonename() const {
  return _impl_.bonename_.Get();
}
inline void UGCResBoneNodeData::_internal_set_bonename(const std::string& value) {
  
  _impl_.bonename_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResBoneNodeData::_internal_mutable_bonename() {
  
  return _impl_.bonename_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResBoneNodeData::release_bonename() {
  // @@protoc_insertion_point(field_release:message.UGCResBoneNodeData.BoneName)
  return _impl_.bonename_.Release();
}
inline void UGCResBoneNodeData::set_allocated_bonename(std::string* bonename) {
  if (bonename != nullptr) {
    
  } else {
    
  }
  _impl_.bonename_.SetAllocated(bonename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bonename_.IsDefault()) {
    _impl_.bonename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResBoneNodeData.BoneName)
}

// .message.ProtoBuffVector3 LocalPosition = 2;
inline bool UGCResBoneNodeData::_internal_has_localposition() const {
  return this != internal_default_instance() && _impl_.localposition_ != nullptr;
}
inline bool UGCResBoneNodeData::has_localposition() const {
  return _internal_has_localposition();
}
inline const ::message::ProtoBuffVector3& UGCResBoneNodeData::_internal_localposition() const {
  const ::message::ProtoBuffVector3* p = _impl_.localposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCResBoneNodeData::localposition() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeData.LocalPosition)
  return _internal_localposition();
}
inline void UGCResBoneNodeData::unsafe_arena_set_allocated_localposition(
    ::message::ProtoBuffVector3* localposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localposition_);
  }
  _impl_.localposition_ = localposition;
  if (localposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResBoneNodeData.LocalPosition)
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeData::release_localposition() {
  
  ::message::ProtoBuffVector3* temp = _impl_.localposition_;
  _impl_.localposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeData::unsafe_arena_release_localposition() {
  // @@protoc_insertion_point(field_release:message.UGCResBoneNodeData.LocalPosition)
  
  ::message::ProtoBuffVector3* temp = _impl_.localposition_;
  _impl_.localposition_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeData::_internal_mutable_localposition() {
  
  if (_impl_.localposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.localposition_ = p;
  }
  return _impl_.localposition_;
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeData::mutable_localposition() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_localposition();
  // @@protoc_insertion_point(field_mutable:message.UGCResBoneNodeData.LocalPosition)
  return _msg;
}
inline void UGCResBoneNodeData::set_allocated_localposition(::message::ProtoBuffVector3* localposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localposition_);
  }
  if (localposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localposition));
    if (message_arena != submessage_arena) {
      localposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localposition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localposition_ = localposition;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResBoneNodeData.LocalPosition)
}

// .message.ProtoBuffVector3 LocalScale = 3;
inline bool UGCResBoneNodeData::_internal_has_localscale() const {
  return this != internal_default_instance() && _impl_.localscale_ != nullptr;
}
inline bool UGCResBoneNodeData::has_localscale() const {
  return _internal_has_localscale();
}
inline const ::message::ProtoBuffVector3& UGCResBoneNodeData::_internal_localscale() const {
  const ::message::ProtoBuffVector3* p = _impl_.localscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCResBoneNodeData::localscale() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeData.LocalScale)
  return _internal_localscale();
}
inline void UGCResBoneNodeData::unsafe_arena_set_allocated_localscale(
    ::message::ProtoBuffVector3* localscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localscale_);
  }
  _impl_.localscale_ = localscale;
  if (localscale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResBoneNodeData.LocalScale)
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeData::release_localscale() {
  
  ::message::ProtoBuffVector3* temp = _impl_.localscale_;
  _impl_.localscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeData::unsafe_arena_release_localscale() {
  // @@protoc_insertion_point(field_release:message.UGCResBoneNodeData.LocalScale)
  
  ::message::ProtoBuffVector3* temp = _impl_.localscale_;
  _impl_.localscale_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeData::_internal_mutable_localscale() {
  
  if (_impl_.localscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.localscale_ = p;
  }
  return _impl_.localscale_;
}
inline ::message::ProtoBuffVector3* UGCResBoneNodeData::mutable_localscale() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_localscale();
  // @@protoc_insertion_point(field_mutable:message.UGCResBoneNodeData.LocalScale)
  return _msg;
}
inline void UGCResBoneNodeData::set_allocated_localscale(::message::ProtoBuffVector3* localscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localscale_);
  }
  if (localscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localscale));
    if (message_arena != submessage_arena) {
      localscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localscale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localscale_ = localscale;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResBoneNodeData.LocalScale)
}

// .message.ProtoBuffQuaternion LocalRotation = 4;
inline bool UGCResBoneNodeData::_internal_has_localrotation() const {
  return this != internal_default_instance() && _impl_.localrotation_ != nullptr;
}
inline bool UGCResBoneNodeData::has_localrotation() const {
  return _internal_has_localrotation();
}
inline const ::message::ProtoBuffQuaternion& UGCResBoneNodeData::_internal_localrotation() const {
  const ::message::ProtoBuffQuaternion* p = _impl_.localrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffQuaternion&>(
      ::message::_ProtoBuffQuaternion_default_instance_);
}
inline const ::message::ProtoBuffQuaternion& UGCResBoneNodeData::localrotation() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeData.LocalRotation)
  return _internal_localrotation();
}
inline void UGCResBoneNodeData::unsafe_arena_set_allocated_localrotation(
    ::message::ProtoBuffQuaternion* localrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localrotation_);
  }
  _impl_.localrotation_ = localrotation;
  if (localrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResBoneNodeData.LocalRotation)
}
inline ::message::ProtoBuffQuaternion* UGCResBoneNodeData::release_localrotation() {
  
  ::message::ProtoBuffQuaternion* temp = _impl_.localrotation_;
  _impl_.localrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCResBoneNodeData::unsafe_arena_release_localrotation() {
  // @@protoc_insertion_point(field_release:message.UGCResBoneNodeData.LocalRotation)
  
  ::message::ProtoBuffQuaternion* temp = _impl_.localrotation_;
  _impl_.localrotation_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCResBoneNodeData::_internal_mutable_localrotation() {
  
  if (_impl_.localrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffQuaternion>(GetArenaForAllocation());
    _impl_.localrotation_ = p;
  }
  return _impl_.localrotation_;
}
inline ::message::ProtoBuffQuaternion* UGCResBoneNodeData::mutable_localrotation() {
  ::message::ProtoBuffQuaternion* _msg = _internal_mutable_localrotation();
  // @@protoc_insertion_point(field_mutable:message.UGCResBoneNodeData.LocalRotation)
  return _msg;
}
inline void UGCResBoneNodeData::set_allocated_localrotation(::message::ProtoBuffQuaternion* localrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localrotation_);
  }
  if (localrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localrotation));
    if (message_arena != submessage_arena) {
      localrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localrotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localrotation_ = localrotation;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResBoneNodeData.LocalRotation)
}

// .message.UGCResBoneNodeCapsuleData CapsuleInfo = 5;
inline bool UGCResBoneNodeData::_internal_has_capsuleinfo() const {
  return this != internal_default_instance() && _impl_.capsuleinfo_ != nullptr;
}
inline bool UGCResBoneNodeData::has_capsuleinfo() const {
  return _internal_has_capsuleinfo();
}
inline void UGCResBoneNodeData::clear_capsuleinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.capsuleinfo_ != nullptr) {
    delete _impl_.capsuleinfo_;
  }
  _impl_.capsuleinfo_ = nullptr;
}
inline const ::message::UGCResBoneNodeCapsuleData& UGCResBoneNodeData::_internal_capsuleinfo() const {
  const ::message::UGCResBoneNodeCapsuleData* p = _impl_.capsuleinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCResBoneNodeCapsuleData&>(
      ::message::_UGCResBoneNodeCapsuleData_default_instance_);
}
inline const ::message::UGCResBoneNodeCapsuleData& UGCResBoneNodeData::capsuleinfo() const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeData.CapsuleInfo)
  return _internal_capsuleinfo();
}
inline void UGCResBoneNodeData::unsafe_arena_set_allocated_capsuleinfo(
    ::message::UGCResBoneNodeCapsuleData* capsuleinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.capsuleinfo_);
  }
  _impl_.capsuleinfo_ = capsuleinfo;
  if (capsuleinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResBoneNodeData.CapsuleInfo)
}
inline ::message::UGCResBoneNodeCapsuleData* UGCResBoneNodeData::release_capsuleinfo() {
  
  ::message::UGCResBoneNodeCapsuleData* temp = _impl_.capsuleinfo_;
  _impl_.capsuleinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCResBoneNodeCapsuleData* UGCResBoneNodeData::unsafe_arena_release_capsuleinfo() {
  // @@protoc_insertion_point(field_release:message.UGCResBoneNodeData.CapsuleInfo)
  
  ::message::UGCResBoneNodeCapsuleData* temp = _impl_.capsuleinfo_;
  _impl_.capsuleinfo_ = nullptr;
  return temp;
}
inline ::message::UGCResBoneNodeCapsuleData* UGCResBoneNodeData::_internal_mutable_capsuleinfo() {
  
  if (_impl_.capsuleinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCResBoneNodeCapsuleData>(GetArenaForAllocation());
    _impl_.capsuleinfo_ = p;
  }
  return _impl_.capsuleinfo_;
}
inline ::message::UGCResBoneNodeCapsuleData* UGCResBoneNodeData::mutable_capsuleinfo() {
  ::message::UGCResBoneNodeCapsuleData* _msg = _internal_mutable_capsuleinfo();
  // @@protoc_insertion_point(field_mutable:message.UGCResBoneNodeData.CapsuleInfo)
  return _msg;
}
inline void UGCResBoneNodeData::set_allocated_capsuleinfo(::message::UGCResBoneNodeCapsuleData* capsuleinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.capsuleinfo_;
  }
  if (capsuleinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capsuleinfo);
    if (message_arena != submessage_arena) {
      capsuleinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capsuleinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.capsuleinfo_ = capsuleinfo;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResBoneNodeData.CapsuleInfo)
}

// repeated .message.UGCResBoneNodeData ChildBones = 6;
inline int UGCResBoneNodeData::_internal_childbones_size() const {
  return _impl_.childbones_.size();
}
inline int UGCResBoneNodeData::childbones_size() const {
  return _internal_childbones_size();
}
inline void UGCResBoneNodeData::clear_childbones() {
  _impl_.childbones_.Clear();
}
inline ::message::UGCResBoneNodeData* UGCResBoneNodeData::mutable_childbones(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResBoneNodeData.ChildBones)
  return _impl_.childbones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResBoneNodeData >*
UGCResBoneNodeData::mutable_childbones() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResBoneNodeData.ChildBones)
  return &_impl_.childbones_;
}
inline const ::message::UGCResBoneNodeData& UGCResBoneNodeData::_internal_childbones(int index) const {
  return _impl_.childbones_.Get(index);
}
inline const ::message::UGCResBoneNodeData& UGCResBoneNodeData::childbones(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResBoneNodeData.ChildBones)
  return _internal_childbones(index);
}
inline ::message::UGCResBoneNodeData* UGCResBoneNodeData::_internal_add_childbones() {
  return _impl_.childbones_.Add();
}
inline ::message::UGCResBoneNodeData* UGCResBoneNodeData::add_childbones() {
  ::message::UGCResBoneNodeData* _add = _internal_add_childbones();
  // @@protoc_insertion_point(field_add:message.UGCResBoneNodeData.ChildBones)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResBoneNodeData >&
UGCResBoneNodeData::childbones() const {
  // @@protoc_insertion_point(field_list:message.UGCResBoneNodeData.ChildBones)
  return _impl_.childbones_;
}

// -------------------------------------------------------------------

// UGCResSkeletonData

// .message.UGCResBoneNodeData RootBone = 1;
inline bool UGCResSkeletonData::_internal_has_rootbone() const {
  return this != internal_default_instance() && _impl_.rootbone_ != nullptr;
}
inline bool UGCResSkeletonData::has_rootbone() const {
  return _internal_has_rootbone();
}
inline void UGCResSkeletonData::clear_rootbone() {
  if (GetArenaForAllocation() == nullptr && _impl_.rootbone_ != nullptr) {
    delete _impl_.rootbone_;
  }
  _impl_.rootbone_ = nullptr;
}
inline const ::message::UGCResBoneNodeData& UGCResSkeletonData::_internal_rootbone() const {
  const ::message::UGCResBoneNodeData* p = _impl_.rootbone_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::UGCResBoneNodeData&>(
      ::message::_UGCResBoneNodeData_default_instance_);
}
inline const ::message::UGCResBoneNodeData& UGCResSkeletonData::rootbone() const {
  // @@protoc_insertion_point(field_get:message.UGCResSkeletonData.RootBone)
  return _internal_rootbone();
}
inline void UGCResSkeletonData::unsafe_arena_set_allocated_rootbone(
    ::message::UGCResBoneNodeData* rootbone) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootbone_);
  }
  _impl_.rootbone_ = rootbone;
  if (rootbone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResSkeletonData.RootBone)
}
inline ::message::UGCResBoneNodeData* UGCResSkeletonData::release_rootbone() {
  
  ::message::UGCResBoneNodeData* temp = _impl_.rootbone_;
  _impl_.rootbone_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::UGCResBoneNodeData* UGCResSkeletonData::unsafe_arena_release_rootbone() {
  // @@protoc_insertion_point(field_release:message.UGCResSkeletonData.RootBone)
  
  ::message::UGCResBoneNodeData* temp = _impl_.rootbone_;
  _impl_.rootbone_ = nullptr;
  return temp;
}
inline ::message::UGCResBoneNodeData* UGCResSkeletonData::_internal_mutable_rootbone() {
  
  if (_impl_.rootbone_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::UGCResBoneNodeData>(GetArenaForAllocation());
    _impl_.rootbone_ = p;
  }
  return _impl_.rootbone_;
}
inline ::message::UGCResBoneNodeData* UGCResSkeletonData::mutable_rootbone() {
  ::message::UGCResBoneNodeData* _msg = _internal_mutable_rootbone();
  // @@protoc_insertion_point(field_mutable:message.UGCResSkeletonData.RootBone)
  return _msg;
}
inline void UGCResSkeletonData::set_allocated_rootbone(::message::UGCResBoneNodeData* rootbone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rootbone_;
  }
  if (rootbone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rootbone);
    if (message_arena != submessage_arena) {
      rootbone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rootbone, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rootbone_ = rootbone;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResSkeletonData.RootBone)
}

// -------------------------------------------------------------------

// UGCResAvatarOnePartData

// string Name = 1;
inline void UGCResAvatarOnePartData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCResAvatarOnePartData::name() const {
  // @@protoc_insertion_point(field_get:message.UGCResAvatarOnePartData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAvatarOnePartData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAvatarOnePartData.Name)
}
inline std::string* UGCResAvatarOnePartData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCResAvatarOnePartData.Name)
  return _s;
}
inline const std::string& UGCResAvatarOnePartData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCResAvatarOnePartData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAvatarOnePartData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAvatarOnePartData::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCResAvatarOnePartData.Name)
  return _impl_.name_.Release();
}
inline void UGCResAvatarOnePartData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAvatarOnePartData.Name)
}

// int32 GroupID = 2;
inline void UGCResAvatarOnePartData::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline int32_t UGCResAvatarOnePartData::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int32_t UGCResAvatarOnePartData::groupid() const {
  // @@protoc_insertion_point(field_get:message.UGCResAvatarOnePartData.GroupID)
  return _internal_groupid();
}
inline void UGCResAvatarOnePartData::_internal_set_groupid(int32_t value) {
  
  _impl_.groupid_ = value;
}
inline void UGCResAvatarOnePartData::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:message.UGCResAvatarOnePartData.GroupID)
}

// int32 RepBitIndex = 3;
inline void UGCResAvatarOnePartData::clear_repbitindex() {
  _impl_.repbitindex_ = 0;
}
inline int32_t UGCResAvatarOnePartData::_internal_repbitindex() const {
  return _impl_.repbitindex_;
}
inline int32_t UGCResAvatarOnePartData::repbitindex() const {
  // @@protoc_insertion_point(field_get:message.UGCResAvatarOnePartData.RepBitIndex)
  return _internal_repbitindex();
}
inline void UGCResAvatarOnePartData::_internal_set_repbitindex(int32_t value) {
  
  _impl_.repbitindex_ = value;
}
inline void UGCResAvatarOnePartData::set_repbitindex(int32_t value) {
  _internal_set_repbitindex(value);
  // @@protoc_insertion_point(field_set:message.UGCResAvatarOnePartData.RepBitIndex)
}

// string GameObjResUUID = 4;
inline void UGCResAvatarOnePartData::clear_gameobjresuuid() {
  _impl_.gameobjresuuid_.ClearToEmpty();
}
inline const std::string& UGCResAvatarOnePartData::gameobjresuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCResAvatarOnePartData.GameObjResUUID)
  return _internal_gameobjresuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAvatarOnePartData::set_gameobjresuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gameobjresuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAvatarOnePartData.GameObjResUUID)
}
inline std::string* UGCResAvatarOnePartData::mutable_gameobjresuuid() {
  std::string* _s = _internal_mutable_gameobjresuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCResAvatarOnePartData.GameObjResUUID)
  return _s;
}
inline const std::string& UGCResAvatarOnePartData::_internal_gameobjresuuid() const {
  return _impl_.gameobjresuuid_.Get();
}
inline void UGCResAvatarOnePartData::_internal_set_gameobjresuuid(const std::string& value) {
  
  _impl_.gameobjresuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAvatarOnePartData::_internal_mutable_gameobjresuuid() {
  
  return _impl_.gameobjresuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAvatarOnePartData::release_gameobjresuuid() {
  // @@protoc_insertion_point(field_release:message.UGCResAvatarOnePartData.GameObjResUUID)
  return _impl_.gameobjresuuid_.Release();
}
inline void UGCResAvatarOnePartData::set_allocated_gameobjresuuid(std::string* gameobjresuuid) {
  if (gameobjresuuid != nullptr) {
    
  } else {
    
  }
  _impl_.gameobjresuuid_.SetAllocated(gameobjresuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gameobjresuuid_.IsDefault()) {
    _impl_.gameobjresuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAvatarOnePartData.GameObjResUUID)
}

// string Bone = 5;
inline void UGCResAvatarOnePartData::clear_bone() {
  _impl_.bone_.ClearToEmpty();
}
inline const std::string& UGCResAvatarOnePartData::bone() const {
  // @@protoc_insertion_point(field_get:message.UGCResAvatarOnePartData.Bone)
  return _internal_bone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAvatarOnePartData::set_bone(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAvatarOnePartData.Bone)
}
inline std::string* UGCResAvatarOnePartData::mutable_bone() {
  std::string* _s = _internal_mutable_bone();
  // @@protoc_insertion_point(field_mutable:message.UGCResAvatarOnePartData.Bone)
  return _s;
}
inline const std::string& UGCResAvatarOnePartData::_internal_bone() const {
  return _impl_.bone_.Get();
}
inline void UGCResAvatarOnePartData::_internal_set_bone(const std::string& value) {
  
  _impl_.bone_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAvatarOnePartData::_internal_mutable_bone() {
  
  return _impl_.bone_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAvatarOnePartData::release_bone() {
  // @@protoc_insertion_point(field_release:message.UGCResAvatarOnePartData.Bone)
  return _impl_.bone_.Release();
}
inline void UGCResAvatarOnePartData::set_allocated_bone(std::string* bone) {
  if (bone != nullptr) {
    
  } else {
    
  }
  _impl_.bone_.SetAllocated(bone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bone_.IsDefault()) {
    _impl_.bone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAvatarOnePartData.Bone)
}

// int32 BindType = 6;
inline void UGCResAvatarOnePartData::clear_bindtype() {
  _impl_.bindtype_ = 0;
}
inline int32_t UGCResAvatarOnePartData::_internal_bindtype() const {
  return _impl_.bindtype_;
}
inline int32_t UGCResAvatarOnePartData::bindtype() const {
  // @@protoc_insertion_point(field_get:message.UGCResAvatarOnePartData.BindType)
  return _internal_bindtype();
}
inline void UGCResAvatarOnePartData::_internal_set_bindtype(int32_t value) {
  
  _impl_.bindtype_ = value;
}
inline void UGCResAvatarOnePartData::set_bindtype(int32_t value) {
  _internal_set_bindtype(value);
  // @@protoc_insertion_point(field_set:message.UGCResAvatarOnePartData.BindType)
}

// .message.ProtoBuffVector3 LocalPosition = 7;
inline bool UGCResAvatarOnePartData::_internal_has_localposition() const {
  return this != internal_default_instance() && _impl_.localposition_ != nullptr;
}
inline bool UGCResAvatarOnePartData::has_localposition() const {
  return _internal_has_localposition();
}
inline const ::message::ProtoBuffVector3& UGCResAvatarOnePartData::_internal_localposition() const {
  const ::message::ProtoBuffVector3* p = _impl_.localposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCResAvatarOnePartData::localposition() const {
  // @@protoc_insertion_point(field_get:message.UGCResAvatarOnePartData.LocalPosition)
  return _internal_localposition();
}
inline void UGCResAvatarOnePartData::unsafe_arena_set_allocated_localposition(
    ::message::ProtoBuffVector3* localposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localposition_);
  }
  _impl_.localposition_ = localposition;
  if (localposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResAvatarOnePartData.LocalPosition)
}
inline ::message::ProtoBuffVector3* UGCResAvatarOnePartData::release_localposition() {
  
  ::message::ProtoBuffVector3* temp = _impl_.localposition_;
  _impl_.localposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResAvatarOnePartData::unsafe_arena_release_localposition() {
  // @@protoc_insertion_point(field_release:message.UGCResAvatarOnePartData.LocalPosition)
  
  ::message::ProtoBuffVector3* temp = _impl_.localposition_;
  _impl_.localposition_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResAvatarOnePartData::_internal_mutable_localposition() {
  
  if (_impl_.localposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.localposition_ = p;
  }
  return _impl_.localposition_;
}
inline ::message::ProtoBuffVector3* UGCResAvatarOnePartData::mutable_localposition() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_localposition();
  // @@protoc_insertion_point(field_mutable:message.UGCResAvatarOnePartData.LocalPosition)
  return _msg;
}
inline void UGCResAvatarOnePartData::set_allocated_localposition(::message::ProtoBuffVector3* localposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localposition_);
  }
  if (localposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localposition));
    if (message_arena != submessage_arena) {
      localposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localposition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localposition_ = localposition;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAvatarOnePartData.LocalPosition)
}

// .message.ProtoBuffVector3 LocalScale = 8;
inline bool UGCResAvatarOnePartData::_internal_has_localscale() const {
  return this != internal_default_instance() && _impl_.localscale_ != nullptr;
}
inline bool UGCResAvatarOnePartData::has_localscale() const {
  return _internal_has_localscale();
}
inline const ::message::ProtoBuffVector3& UGCResAvatarOnePartData::_internal_localscale() const {
  const ::message::ProtoBuffVector3* p = _impl_.localscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffVector3&>(
      ::message::_ProtoBuffVector3_default_instance_);
}
inline const ::message::ProtoBuffVector3& UGCResAvatarOnePartData::localscale() const {
  // @@protoc_insertion_point(field_get:message.UGCResAvatarOnePartData.LocalScale)
  return _internal_localscale();
}
inline void UGCResAvatarOnePartData::unsafe_arena_set_allocated_localscale(
    ::message::ProtoBuffVector3* localscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localscale_);
  }
  _impl_.localscale_ = localscale;
  if (localscale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResAvatarOnePartData.LocalScale)
}
inline ::message::ProtoBuffVector3* UGCResAvatarOnePartData::release_localscale() {
  
  ::message::ProtoBuffVector3* temp = _impl_.localscale_;
  _impl_.localscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResAvatarOnePartData::unsafe_arena_release_localscale() {
  // @@protoc_insertion_point(field_release:message.UGCResAvatarOnePartData.LocalScale)
  
  ::message::ProtoBuffVector3* temp = _impl_.localscale_;
  _impl_.localscale_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffVector3* UGCResAvatarOnePartData::_internal_mutable_localscale() {
  
  if (_impl_.localscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffVector3>(GetArenaForAllocation());
    _impl_.localscale_ = p;
  }
  return _impl_.localscale_;
}
inline ::message::ProtoBuffVector3* UGCResAvatarOnePartData::mutable_localscale() {
  ::message::ProtoBuffVector3* _msg = _internal_mutable_localscale();
  // @@protoc_insertion_point(field_mutable:message.UGCResAvatarOnePartData.LocalScale)
  return _msg;
}
inline void UGCResAvatarOnePartData::set_allocated_localscale(::message::ProtoBuffVector3* localscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localscale_);
  }
  if (localscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localscale));
    if (message_arena != submessage_arena) {
      localscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localscale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localscale_ = localscale;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAvatarOnePartData.LocalScale)
}

// .message.ProtoBuffQuaternion LocalRotation = 9;
inline bool UGCResAvatarOnePartData::_internal_has_localrotation() const {
  return this != internal_default_instance() && _impl_.localrotation_ != nullptr;
}
inline bool UGCResAvatarOnePartData::has_localrotation() const {
  return _internal_has_localrotation();
}
inline const ::message::ProtoBuffQuaternion& UGCResAvatarOnePartData::_internal_localrotation() const {
  const ::message::ProtoBuffQuaternion* p = _impl_.localrotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::ProtoBuffQuaternion&>(
      ::message::_ProtoBuffQuaternion_default_instance_);
}
inline const ::message::ProtoBuffQuaternion& UGCResAvatarOnePartData::localrotation() const {
  // @@protoc_insertion_point(field_get:message.UGCResAvatarOnePartData.LocalRotation)
  return _internal_localrotation();
}
inline void UGCResAvatarOnePartData::unsafe_arena_set_allocated_localrotation(
    ::message::ProtoBuffQuaternion* localrotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localrotation_);
  }
  _impl_.localrotation_ = localrotation;
  if (localrotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.UGCResAvatarOnePartData.LocalRotation)
}
inline ::message::ProtoBuffQuaternion* UGCResAvatarOnePartData::release_localrotation() {
  
  ::message::ProtoBuffQuaternion* temp = _impl_.localrotation_;
  _impl_.localrotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCResAvatarOnePartData::unsafe_arena_release_localrotation() {
  // @@protoc_insertion_point(field_release:message.UGCResAvatarOnePartData.LocalRotation)
  
  ::message::ProtoBuffQuaternion* temp = _impl_.localrotation_;
  _impl_.localrotation_ = nullptr;
  return temp;
}
inline ::message::ProtoBuffQuaternion* UGCResAvatarOnePartData::_internal_mutable_localrotation() {
  
  if (_impl_.localrotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::ProtoBuffQuaternion>(GetArenaForAllocation());
    _impl_.localrotation_ = p;
  }
  return _impl_.localrotation_;
}
inline ::message::ProtoBuffQuaternion* UGCResAvatarOnePartData::mutable_localrotation() {
  ::message::ProtoBuffQuaternion* _msg = _internal_mutable_localrotation();
  // @@protoc_insertion_point(field_mutable:message.UGCResAvatarOnePartData.LocalRotation)
  return _msg;
}
inline void UGCResAvatarOnePartData::set_allocated_localrotation(::message::ProtoBuffQuaternion* localrotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localrotation_);
  }
  if (localrotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localrotation));
    if (message_arena != submessage_arena) {
      localrotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localrotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localrotation_ = localrotation;
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAvatarOnePartData.LocalRotation)
}

// -------------------------------------------------------------------

// UGCResOneAvatarData

// string SkeletonResUUID = 1;
inline void UGCResOneAvatarData::clear_skeletonresuuid() {
  _impl_.skeletonresuuid_.ClearToEmpty();
}
inline const std::string& UGCResOneAvatarData::skeletonresuuid() const {
  // @@protoc_insertion_point(field_get:message.UGCResOneAvatarData.SkeletonResUUID)
  return _internal_skeletonresuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResOneAvatarData::set_skeletonresuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.skeletonresuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResOneAvatarData.SkeletonResUUID)
}
inline std::string* UGCResOneAvatarData::mutable_skeletonresuuid() {
  std::string* _s = _internal_mutable_skeletonresuuid();
  // @@protoc_insertion_point(field_mutable:message.UGCResOneAvatarData.SkeletonResUUID)
  return _s;
}
inline const std::string& UGCResOneAvatarData::_internal_skeletonresuuid() const {
  return _impl_.skeletonresuuid_.Get();
}
inline void UGCResOneAvatarData::_internal_set_skeletonresuuid(const std::string& value) {
  
  _impl_.skeletonresuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResOneAvatarData::_internal_mutable_skeletonresuuid() {
  
  return _impl_.skeletonresuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResOneAvatarData::release_skeletonresuuid() {
  // @@protoc_insertion_point(field_release:message.UGCResOneAvatarData.SkeletonResUUID)
  return _impl_.skeletonresuuid_.Release();
}
inline void UGCResOneAvatarData::set_allocated_skeletonresuuid(std::string* skeletonresuuid) {
  if (skeletonresuuid != nullptr) {
    
  } else {
    
  }
  _impl_.skeletonresuuid_.SetAllocated(skeletonresuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.skeletonresuuid_.IsDefault()) {
    _impl_.skeletonresuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResOneAvatarData.SkeletonResUUID)
}

// bool PreloadAllPart = 2;
inline void UGCResOneAvatarData::clear_preloadallpart() {
  _impl_.preloadallpart_ = false;
}
inline bool UGCResOneAvatarData::_internal_preloadallpart() const {
  return _impl_.preloadallpart_;
}
inline bool UGCResOneAvatarData::preloadallpart() const {
  // @@protoc_insertion_point(field_get:message.UGCResOneAvatarData.PreloadAllPart)
  return _internal_preloadallpart();
}
inline void UGCResOneAvatarData::_internal_set_preloadallpart(bool value) {
  
  _impl_.preloadallpart_ = value;
}
inline void UGCResOneAvatarData::set_preloadallpart(bool value) {
  _internal_set_preloadallpart(value);
  // @@protoc_insertion_point(field_set:message.UGCResOneAvatarData.PreloadAllPart)
}

// int32 DefaultVisableMask1 = 3;
inline void UGCResOneAvatarData::clear_defaultvisablemask1() {
  _impl_.defaultvisablemask1_ = 0;
}
inline int32_t UGCResOneAvatarData::_internal_defaultvisablemask1() const {
  return _impl_.defaultvisablemask1_;
}
inline int32_t UGCResOneAvatarData::defaultvisablemask1() const {
  // @@protoc_insertion_point(field_get:message.UGCResOneAvatarData.DefaultVisableMask1)
  return _internal_defaultvisablemask1();
}
inline void UGCResOneAvatarData::_internal_set_defaultvisablemask1(int32_t value) {
  
  _impl_.defaultvisablemask1_ = value;
}
inline void UGCResOneAvatarData::set_defaultvisablemask1(int32_t value) {
  _internal_set_defaultvisablemask1(value);
  // @@protoc_insertion_point(field_set:message.UGCResOneAvatarData.DefaultVisableMask1)
}

// int32 DefaultVisableMask2 = 4;
inline void UGCResOneAvatarData::clear_defaultvisablemask2() {
  _impl_.defaultvisablemask2_ = 0;
}
inline int32_t UGCResOneAvatarData::_internal_defaultvisablemask2() const {
  return _impl_.defaultvisablemask2_;
}
inline int32_t UGCResOneAvatarData::defaultvisablemask2() const {
  // @@protoc_insertion_point(field_get:message.UGCResOneAvatarData.DefaultVisableMask2)
  return _internal_defaultvisablemask2();
}
inline void UGCResOneAvatarData::_internal_set_defaultvisablemask2(int32_t value) {
  
  _impl_.defaultvisablemask2_ = value;
}
inline void UGCResOneAvatarData::set_defaultvisablemask2(int32_t value) {
  _internal_set_defaultvisablemask2(value);
  // @@protoc_insertion_point(field_set:message.UGCResOneAvatarData.DefaultVisableMask2)
}

// int32 DefaultVisableMask3 = 5;
inline void UGCResOneAvatarData::clear_defaultvisablemask3() {
  _impl_.defaultvisablemask3_ = 0;
}
inline int32_t UGCResOneAvatarData::_internal_defaultvisablemask3() const {
  return _impl_.defaultvisablemask3_;
}
inline int32_t UGCResOneAvatarData::defaultvisablemask3() const {
  // @@protoc_insertion_point(field_get:message.UGCResOneAvatarData.DefaultVisableMask3)
  return _internal_defaultvisablemask3();
}
inline void UGCResOneAvatarData::_internal_set_defaultvisablemask3(int32_t value) {
  
  _impl_.defaultvisablemask3_ = value;
}
inline void UGCResOneAvatarData::set_defaultvisablemask3(int32_t value) {
  _internal_set_defaultvisablemask3(value);
  // @@protoc_insertion_point(field_set:message.UGCResOneAvatarData.DefaultVisableMask3)
}

// int32 DefaultVisableMask4 = 6;
inline void UGCResOneAvatarData::clear_defaultvisablemask4() {
  _impl_.defaultvisablemask4_ = 0;
}
inline int32_t UGCResOneAvatarData::_internal_defaultvisablemask4() const {
  return _impl_.defaultvisablemask4_;
}
inline int32_t UGCResOneAvatarData::defaultvisablemask4() const {
  // @@protoc_insertion_point(field_get:message.UGCResOneAvatarData.DefaultVisableMask4)
  return _internal_defaultvisablemask4();
}
inline void UGCResOneAvatarData::_internal_set_defaultvisablemask4(int32_t value) {
  
  _impl_.defaultvisablemask4_ = value;
}
inline void UGCResOneAvatarData::set_defaultvisablemask4(int32_t value) {
  _internal_set_defaultvisablemask4(value);
  // @@protoc_insertion_point(field_set:message.UGCResOneAvatarData.DefaultVisableMask4)
}

// repeated .message.UGCResAvatarOnePartData PartList = 7;
inline int UGCResOneAvatarData::_internal_partlist_size() const {
  return _impl_.partlist_.size();
}
inline int UGCResOneAvatarData::partlist_size() const {
  return _internal_partlist_size();
}
inline void UGCResOneAvatarData::clear_partlist() {
  _impl_.partlist_.Clear();
}
inline ::message::UGCResAvatarOnePartData* UGCResOneAvatarData::mutable_partlist(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResOneAvatarData.PartList)
  return _impl_.partlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAvatarOnePartData >*
UGCResOneAvatarData::mutable_partlist() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResOneAvatarData.PartList)
  return &_impl_.partlist_;
}
inline const ::message::UGCResAvatarOnePartData& UGCResOneAvatarData::_internal_partlist(int index) const {
  return _impl_.partlist_.Get(index);
}
inline const ::message::UGCResAvatarOnePartData& UGCResOneAvatarData::partlist(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResOneAvatarData.PartList)
  return _internal_partlist(index);
}
inline ::message::UGCResAvatarOnePartData* UGCResOneAvatarData::_internal_add_partlist() {
  return _impl_.partlist_.Add();
}
inline ::message::UGCResAvatarOnePartData* UGCResOneAvatarData::add_partlist() {
  ::message::UGCResAvatarOnePartData* _add = _internal_add_partlist();
  // @@protoc_insertion_point(field_add:message.UGCResOneAvatarData.PartList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAvatarOnePartData >&
UGCResOneAvatarData::partlist() const {
  // @@protoc_insertion_point(field_list:message.UGCResOneAvatarData.PartList)
  return _impl_.partlist_;
}

// bool AutoCombineMesh = 8;
inline void UGCResOneAvatarData::clear_autocombinemesh() {
  _impl_.autocombinemesh_ = false;
}
inline bool UGCResOneAvatarData::_internal_autocombinemesh() const {
  return _impl_.autocombinemesh_;
}
inline bool UGCResOneAvatarData::autocombinemesh() const {
  // @@protoc_insertion_point(field_get:message.UGCResOneAvatarData.AutoCombineMesh)
  return _internal_autocombinemesh();
}
inline void UGCResOneAvatarData::_internal_set_autocombinemesh(bool value) {
  
  _impl_.autocombinemesh_ = value;
}
inline void UGCResOneAvatarData::set_autocombinemesh(bool value) {
  _internal_set_autocombinemesh(value);
  // @@protoc_insertion_point(field_set:message.UGCResOneAvatarData.AutoCombineMesh)
}

// -------------------------------------------------------------------

// UGCResSkinnedMeshExtData

// repeated string BoneNames = 1;
inline int UGCResSkinnedMeshExtData::_internal_bonenames_size() const {
  return _impl_.bonenames_.size();
}
inline int UGCResSkinnedMeshExtData::bonenames_size() const {
  return _internal_bonenames_size();
}
inline void UGCResSkinnedMeshExtData::clear_bonenames() {
  _impl_.bonenames_.Clear();
}
inline std::string* UGCResSkinnedMeshExtData::add_bonenames() {
  std::string* _s = _internal_add_bonenames();
  // @@protoc_insertion_point(field_add_mutable:message.UGCResSkinnedMeshExtData.BoneNames)
  return _s;
}
inline const std::string& UGCResSkinnedMeshExtData::_internal_bonenames(int index) const {
  return _impl_.bonenames_.Get(index);
}
inline const std::string& UGCResSkinnedMeshExtData::bonenames(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResSkinnedMeshExtData.BoneNames)
  return _internal_bonenames(index);
}
inline std::string* UGCResSkinnedMeshExtData::mutable_bonenames(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResSkinnedMeshExtData.BoneNames)
  return _impl_.bonenames_.Mutable(index);
}
inline void UGCResSkinnedMeshExtData::set_bonenames(int index, const std::string& value) {
  _impl_.bonenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:message.UGCResSkinnedMeshExtData.BoneNames)
}
inline void UGCResSkinnedMeshExtData::set_bonenames(int index, std::string&& value) {
  _impl_.bonenames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:message.UGCResSkinnedMeshExtData.BoneNames)
}
inline void UGCResSkinnedMeshExtData::set_bonenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bonenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:message.UGCResSkinnedMeshExtData.BoneNames)
}
inline void UGCResSkinnedMeshExtData::set_bonenames(int index, const char* value, size_t size) {
  _impl_.bonenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:message.UGCResSkinnedMeshExtData.BoneNames)
}
inline std::string* UGCResSkinnedMeshExtData::_internal_add_bonenames() {
  return _impl_.bonenames_.Add();
}
inline void UGCResSkinnedMeshExtData::add_bonenames(const std::string& value) {
  _impl_.bonenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:message.UGCResSkinnedMeshExtData.BoneNames)
}
inline void UGCResSkinnedMeshExtData::add_bonenames(std::string&& value) {
  _impl_.bonenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:message.UGCResSkinnedMeshExtData.BoneNames)
}
inline void UGCResSkinnedMeshExtData::add_bonenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bonenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:message.UGCResSkinnedMeshExtData.BoneNames)
}
inline void UGCResSkinnedMeshExtData::add_bonenames(const char* value, size_t size) {
  _impl_.bonenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:message.UGCResSkinnedMeshExtData.BoneNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UGCResSkinnedMeshExtData::bonenames() const {
  // @@protoc_insertion_point(field_list:message.UGCResSkinnedMeshExtData.BoneNames)
  return _impl_.bonenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UGCResSkinnedMeshExtData::mutable_bonenames() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResSkinnedMeshExtData.BoneNames)
  return &_impl_.bonenames_;
}

// -------------------------------------------------------------------

// UGCResAnimKeyFrameFloat

// float Time = 1;
inline void UGCResAnimKeyFrameFloat::clear_time() {
  _impl_.time_ = 0;
}
inline float UGCResAnimKeyFrameFloat::_internal_time() const {
  return _impl_.time_;
}
inline float UGCResAnimKeyFrameFloat::time() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimKeyFrameFloat.Time)
  return _internal_time();
}
inline void UGCResAnimKeyFrameFloat::_internal_set_time(float value) {
  
  _impl_.time_ = value;
}
inline void UGCResAnimKeyFrameFloat::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimKeyFrameFloat.Time)
}

// int32 WeightedMode = 2;
inline void UGCResAnimKeyFrameFloat::clear_weightedmode() {
  _impl_.weightedmode_ = 0;
}
inline int32_t UGCResAnimKeyFrameFloat::_internal_weightedmode() const {
  return _impl_.weightedmode_;
}
inline int32_t UGCResAnimKeyFrameFloat::weightedmode() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimKeyFrameFloat.WeightedMode)
  return _internal_weightedmode();
}
inline void UGCResAnimKeyFrameFloat::_internal_set_weightedmode(int32_t value) {
  
  _impl_.weightedmode_ = value;
}
inline void UGCResAnimKeyFrameFloat::set_weightedmode(int32_t value) {
  _internal_set_weightedmode(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimKeyFrameFloat.WeightedMode)
}

// float Value = 3;
inline void UGCResAnimKeyFrameFloat::clear_value() {
  _impl_.value_ = 0;
}
inline float UGCResAnimKeyFrameFloat::_internal_value() const {
  return _impl_.value_;
}
inline float UGCResAnimKeyFrameFloat::value() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimKeyFrameFloat.Value)
  return _internal_value();
}
inline void UGCResAnimKeyFrameFloat::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void UGCResAnimKeyFrameFloat::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimKeyFrameFloat.Value)
}

// float InSlope = 4;
inline void UGCResAnimKeyFrameFloat::clear_inslope() {
  _impl_.inslope_ = 0;
}
inline float UGCResAnimKeyFrameFloat::_internal_inslope() const {
  return _impl_.inslope_;
}
inline float UGCResAnimKeyFrameFloat::inslope() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimKeyFrameFloat.InSlope)
  return _internal_inslope();
}
inline void UGCResAnimKeyFrameFloat::_internal_set_inslope(float value) {
  
  _impl_.inslope_ = value;
}
inline void UGCResAnimKeyFrameFloat::set_inslope(float value) {
  _internal_set_inslope(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimKeyFrameFloat.InSlope)
}

// float OutSlope = 5;
inline void UGCResAnimKeyFrameFloat::clear_outslope() {
  _impl_.outslope_ = 0;
}
inline float UGCResAnimKeyFrameFloat::_internal_outslope() const {
  return _impl_.outslope_;
}
inline float UGCResAnimKeyFrameFloat::outslope() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimKeyFrameFloat.OutSlope)
  return _internal_outslope();
}
inline void UGCResAnimKeyFrameFloat::_internal_set_outslope(float value) {
  
  _impl_.outslope_ = value;
}
inline void UGCResAnimKeyFrameFloat::set_outslope(float value) {
  _internal_set_outslope(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimKeyFrameFloat.OutSlope)
}

// float InWeight = 6;
inline void UGCResAnimKeyFrameFloat::clear_inweight() {
  _impl_.inweight_ = 0;
}
inline float UGCResAnimKeyFrameFloat::_internal_inweight() const {
  return _impl_.inweight_;
}
inline float UGCResAnimKeyFrameFloat::inweight() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimKeyFrameFloat.InWeight)
  return _internal_inweight();
}
inline void UGCResAnimKeyFrameFloat::_internal_set_inweight(float value) {
  
  _impl_.inweight_ = value;
}
inline void UGCResAnimKeyFrameFloat::set_inweight(float value) {
  _internal_set_inweight(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimKeyFrameFloat.InWeight)
}

// float OutWeight = 7;
inline void UGCResAnimKeyFrameFloat::clear_outweight() {
  _impl_.outweight_ = 0;
}
inline float UGCResAnimKeyFrameFloat::_internal_outweight() const {
  return _impl_.outweight_;
}
inline float UGCResAnimKeyFrameFloat::outweight() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimKeyFrameFloat.OutWeight)
  return _internal_outweight();
}
inline void UGCResAnimKeyFrameFloat::_internal_set_outweight(float value) {
  
  _impl_.outweight_ = value;
}
inline void UGCResAnimKeyFrameFloat::set_outweight(float value) {
  _internal_set_outweight(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimKeyFrameFloat.OutWeight)
}

// -------------------------------------------------------------------

// FBXAnimationCurve

// repeated .message.UGCResAnimKeyFrameFloat Keyframes = 1;
inline int FBXAnimationCurve::_internal_keyframes_size() const {
  return _impl_.keyframes_.size();
}
inline int FBXAnimationCurve::keyframes_size() const {
  return _internal_keyframes_size();
}
inline void FBXAnimationCurve::clear_keyframes() {
  _impl_.keyframes_.Clear();
}
inline ::message::UGCResAnimKeyFrameFloat* FBXAnimationCurve::mutable_keyframes(int index) {
  // @@protoc_insertion_point(field_mutable:message.FBXAnimationCurve.Keyframes)
  return _impl_.keyframes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimKeyFrameFloat >*
FBXAnimationCurve::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_list:message.FBXAnimationCurve.Keyframes)
  return &_impl_.keyframes_;
}
inline const ::message::UGCResAnimKeyFrameFloat& FBXAnimationCurve::_internal_keyframes(int index) const {
  return _impl_.keyframes_.Get(index);
}
inline const ::message::UGCResAnimKeyFrameFloat& FBXAnimationCurve::keyframes(int index) const {
  // @@protoc_insertion_point(field_get:message.FBXAnimationCurve.Keyframes)
  return _internal_keyframes(index);
}
inline ::message::UGCResAnimKeyFrameFloat* FBXAnimationCurve::_internal_add_keyframes() {
  return _impl_.keyframes_.Add();
}
inline ::message::UGCResAnimKeyFrameFloat* FBXAnimationCurve::add_keyframes() {
  ::message::UGCResAnimKeyFrameFloat* _add = _internal_add_keyframes();
  // @@protoc_insertion_point(field_add:message.FBXAnimationCurve.Keyframes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimKeyFrameFloat >&
FBXAnimationCurve::keyframes() const {
  // @@protoc_insertion_point(field_list:message.FBXAnimationCurve.Keyframes)
  return _impl_.keyframes_;
}

// -------------------------------------------------------------------

// UGCResAnimFloatCurves

// repeated .message.FBXAnimationCurve Curve = 1;
inline int UGCResAnimFloatCurves::_internal_curve_size() const {
  return _impl_.curve_.size();
}
inline int UGCResAnimFloatCurves::curve_size() const {
  return _internal_curve_size();
}
inline void UGCResAnimFloatCurves::clear_curve() {
  _impl_.curve_.Clear();
}
inline ::message::FBXAnimationCurve* UGCResAnimFloatCurves::mutable_curve(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimFloatCurves.Curve)
  return _impl_.curve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >*
UGCResAnimFloatCurves::mutable_curve() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResAnimFloatCurves.Curve)
  return &_impl_.curve_;
}
inline const ::message::FBXAnimationCurve& UGCResAnimFloatCurves::_internal_curve(int index) const {
  return _impl_.curve_.Get(index);
}
inline const ::message::FBXAnimationCurve& UGCResAnimFloatCurves::curve(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimFloatCurves.Curve)
  return _internal_curve(index);
}
inline ::message::FBXAnimationCurve* UGCResAnimFloatCurves::_internal_add_curve() {
  return _impl_.curve_.Add();
}
inline ::message::FBXAnimationCurve* UGCResAnimFloatCurves::add_curve() {
  ::message::FBXAnimationCurve* _add = _internal_add_curve();
  // @@protoc_insertion_point(field_add:message.UGCResAnimFloatCurves.Curve)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >&
UGCResAnimFloatCurves::curve() const {
  // @@protoc_insertion_point(field_list:message.UGCResAnimFloatCurves.Curve)
  return _impl_.curve_;
}

// string ClassName = 2;
inline void UGCResAnimFloatCurves::clear_classname() {
  _impl_.classname_.ClearToEmpty();
}
inline const std::string& UGCResAnimFloatCurves::classname() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimFloatCurves.ClassName)
  return _internal_classname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAnimFloatCurves::set_classname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.classname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAnimFloatCurves.ClassName)
}
inline std::string* UGCResAnimFloatCurves::mutable_classname() {
  std::string* _s = _internal_mutable_classname();
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimFloatCurves.ClassName)
  return _s;
}
inline const std::string& UGCResAnimFloatCurves::_internal_classname() const {
  return _impl_.classname_.Get();
}
inline void UGCResAnimFloatCurves::_internal_set_classname(const std::string& value) {
  
  _impl_.classname_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAnimFloatCurves::_internal_mutable_classname() {
  
  return _impl_.classname_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAnimFloatCurves::release_classname() {
  // @@protoc_insertion_point(field_release:message.UGCResAnimFloatCurves.ClassName)
  return _impl_.classname_.Release();
}
inline void UGCResAnimFloatCurves::set_allocated_classname(std::string* classname) {
  if (classname != nullptr) {
    
  } else {
    
  }
  _impl_.classname_.SetAllocated(classname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.classname_.IsDefault()) {
    _impl_.classname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAnimFloatCurves.ClassName)
}

// string PropertyName = 3;
inline void UGCResAnimFloatCurves::clear_propertyname() {
  _impl_.propertyname_.ClearToEmpty();
}
inline const std::string& UGCResAnimFloatCurves::propertyname() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimFloatCurves.PropertyName)
  return _internal_propertyname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAnimFloatCurves::set_propertyname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.propertyname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAnimFloatCurves.PropertyName)
}
inline std::string* UGCResAnimFloatCurves::mutable_propertyname() {
  std::string* _s = _internal_mutable_propertyname();
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimFloatCurves.PropertyName)
  return _s;
}
inline const std::string& UGCResAnimFloatCurves::_internal_propertyname() const {
  return _impl_.propertyname_.Get();
}
inline void UGCResAnimFloatCurves::_internal_set_propertyname(const std::string& value) {
  
  _impl_.propertyname_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAnimFloatCurves::_internal_mutable_propertyname() {
  
  return _impl_.propertyname_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAnimFloatCurves::release_propertyname() {
  // @@protoc_insertion_point(field_release:message.UGCResAnimFloatCurves.PropertyName)
  return _impl_.propertyname_.Release();
}
inline void UGCResAnimFloatCurves::set_allocated_propertyname(std::string* propertyname) {
  if (propertyname != nullptr) {
    
  } else {
    
  }
  _impl_.propertyname_.SetAllocated(propertyname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.propertyname_.IsDefault()) {
    _impl_.propertyname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAnimFloatCurves.PropertyName)
}

// -------------------------------------------------------------------

// UGCResAnimNodeCurves

// string Name = 1;
inline void UGCResAnimNodeCurves::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCResAnimNodeCurves::name() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimNodeCurves.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAnimNodeCurves::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAnimNodeCurves.Name)
}
inline std::string* UGCResAnimNodeCurves::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimNodeCurves.Name)
  return _s;
}
inline const std::string& UGCResAnimNodeCurves::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCResAnimNodeCurves::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAnimNodeCurves::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAnimNodeCurves::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCResAnimNodeCurves.Name)
  return _impl_.name_.Release();
}
inline void UGCResAnimNodeCurves::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAnimNodeCurves.Name)
}

// repeated .message.FBXAnimationCurve Rotation = 2;
inline int UGCResAnimNodeCurves::_internal_rotation_size() const {
  return _impl_.rotation_.size();
}
inline int UGCResAnimNodeCurves::rotation_size() const {
  return _internal_rotation_size();
}
inline void UGCResAnimNodeCurves::clear_rotation() {
  _impl_.rotation_.Clear();
}
inline ::message::FBXAnimationCurve* UGCResAnimNodeCurves::mutable_rotation(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimNodeCurves.Rotation)
  return _impl_.rotation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >*
UGCResAnimNodeCurves::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResAnimNodeCurves.Rotation)
  return &_impl_.rotation_;
}
inline const ::message::FBXAnimationCurve& UGCResAnimNodeCurves::_internal_rotation(int index) const {
  return _impl_.rotation_.Get(index);
}
inline const ::message::FBXAnimationCurve& UGCResAnimNodeCurves::rotation(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimNodeCurves.Rotation)
  return _internal_rotation(index);
}
inline ::message::FBXAnimationCurve* UGCResAnimNodeCurves::_internal_add_rotation() {
  return _impl_.rotation_.Add();
}
inline ::message::FBXAnimationCurve* UGCResAnimNodeCurves::add_rotation() {
  ::message::FBXAnimationCurve* _add = _internal_add_rotation();
  // @@protoc_insertion_point(field_add:message.UGCResAnimNodeCurves.Rotation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >&
UGCResAnimNodeCurves::rotation() const {
  // @@protoc_insertion_point(field_list:message.UGCResAnimNodeCurves.Rotation)
  return _impl_.rotation_;
}

// repeated .message.FBXAnimationCurve Translation = 3;
inline int UGCResAnimNodeCurves::_internal_translation_size() const {
  return _impl_.translation_.size();
}
inline int UGCResAnimNodeCurves::translation_size() const {
  return _internal_translation_size();
}
inline void UGCResAnimNodeCurves::clear_translation() {
  _impl_.translation_.Clear();
}
inline ::message::FBXAnimationCurve* UGCResAnimNodeCurves::mutable_translation(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimNodeCurves.Translation)
  return _impl_.translation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >*
UGCResAnimNodeCurves::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResAnimNodeCurves.Translation)
  return &_impl_.translation_;
}
inline const ::message::FBXAnimationCurve& UGCResAnimNodeCurves::_internal_translation(int index) const {
  return _impl_.translation_.Get(index);
}
inline const ::message::FBXAnimationCurve& UGCResAnimNodeCurves::translation(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimNodeCurves.Translation)
  return _internal_translation(index);
}
inline ::message::FBXAnimationCurve* UGCResAnimNodeCurves::_internal_add_translation() {
  return _impl_.translation_.Add();
}
inline ::message::FBXAnimationCurve* UGCResAnimNodeCurves::add_translation() {
  ::message::FBXAnimationCurve* _add = _internal_add_translation();
  // @@protoc_insertion_point(field_add:message.UGCResAnimNodeCurves.Translation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >&
UGCResAnimNodeCurves::translation() const {
  // @@protoc_insertion_point(field_list:message.UGCResAnimNodeCurves.Translation)
  return _impl_.translation_;
}

// repeated .message.FBXAnimationCurve Scale = 4;
inline int UGCResAnimNodeCurves::_internal_scale_size() const {
  return _impl_.scale_.size();
}
inline int UGCResAnimNodeCurves::scale_size() const {
  return _internal_scale_size();
}
inline void UGCResAnimNodeCurves::clear_scale() {
  _impl_.scale_.Clear();
}
inline ::message::FBXAnimationCurve* UGCResAnimNodeCurves::mutable_scale(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimNodeCurves.Scale)
  return _impl_.scale_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >*
UGCResAnimNodeCurves::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResAnimNodeCurves.Scale)
  return &_impl_.scale_;
}
inline const ::message::FBXAnimationCurve& UGCResAnimNodeCurves::_internal_scale(int index) const {
  return _impl_.scale_.Get(index);
}
inline const ::message::FBXAnimationCurve& UGCResAnimNodeCurves::scale(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimNodeCurves.Scale)
  return _internal_scale(index);
}
inline ::message::FBXAnimationCurve* UGCResAnimNodeCurves::_internal_add_scale() {
  return _impl_.scale_.Add();
}
inline ::message::FBXAnimationCurve* UGCResAnimNodeCurves::add_scale() {
  ::message::FBXAnimationCurve* _add = _internal_add_scale();
  // @@protoc_insertion_point(field_add:message.UGCResAnimNodeCurves.Scale)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::FBXAnimationCurve >&
UGCResAnimNodeCurves::scale() const {
  // @@protoc_insertion_point(field_list:message.UGCResAnimNodeCurves.Scale)
  return _impl_.scale_;
}

// -------------------------------------------------------------------

// UGCResAnimClipData

// string Name = 1;
inline void UGCResAnimClipData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UGCResAnimClipData::name() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimClipData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UGCResAnimClipData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.UGCResAnimClipData.Name)
}
inline std::string* UGCResAnimClipData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimClipData.Name)
  return _s;
}
inline const std::string& UGCResAnimClipData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UGCResAnimClipData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UGCResAnimClipData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UGCResAnimClipData::release_name() {
  // @@protoc_insertion_point(field_release:message.UGCResAnimClipData.Name)
  return _impl_.name_.Release();
}
inline void UGCResAnimClipData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.UGCResAnimClipData.Name)
}

// double BakeStart = 2;
inline void UGCResAnimClipData::clear_bakestart() {
  _impl_.bakestart_ = 0;
}
inline double UGCResAnimClipData::_internal_bakestart() const {
  return _impl_.bakestart_;
}
inline double UGCResAnimClipData::bakestart() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimClipData.BakeStart)
  return _internal_bakestart();
}
inline void UGCResAnimClipData::_internal_set_bakestart(double value) {
  
  _impl_.bakestart_ = value;
}
inline void UGCResAnimClipData::set_bakestart(double value) {
  _internal_set_bakestart(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimClipData.BakeStart)
}

// double BakeStop = 3;
inline void UGCResAnimClipData::clear_bakestop() {
  _impl_.bakestop_ = 0;
}
inline double UGCResAnimClipData::_internal_bakestop() const {
  return _impl_.bakestop_;
}
inline double UGCResAnimClipData::bakestop() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimClipData.BakeStop)
  return _internal_bakestop();
}
inline void UGCResAnimClipData::_internal_set_bakestop(double value) {
  
  _impl_.bakestop_ = value;
}
inline void UGCResAnimClipData::set_bakestop(double value) {
  _internal_set_bakestop(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimClipData.BakeStop)
}

// float SampleRate = 4;
inline void UGCResAnimClipData::clear_samplerate() {
  _impl_.samplerate_ = 0;
}
inline float UGCResAnimClipData::_internal_samplerate() const {
  return _impl_.samplerate_;
}
inline float UGCResAnimClipData::samplerate() const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimClipData.SampleRate)
  return _internal_samplerate();
}
inline void UGCResAnimClipData::_internal_set_samplerate(float value) {
  
  _impl_.samplerate_ = value;
}
inline void UGCResAnimClipData::set_samplerate(float value) {
  _internal_set_samplerate(value);
  // @@protoc_insertion_point(field_set:message.UGCResAnimClipData.SampleRate)
}

// repeated .message.UGCResAnimFloatCurves FloatAnim = 5;
inline int UGCResAnimClipData::_internal_floatanim_size() const {
  return _impl_.floatanim_.size();
}
inline int UGCResAnimClipData::floatanim_size() const {
  return _internal_floatanim_size();
}
inline void UGCResAnimClipData::clear_floatanim() {
  _impl_.floatanim_.Clear();
}
inline ::message::UGCResAnimFloatCurves* UGCResAnimClipData::mutable_floatanim(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimClipData.FloatAnim)
  return _impl_.floatanim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimFloatCurves >*
UGCResAnimClipData::mutable_floatanim() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResAnimClipData.FloatAnim)
  return &_impl_.floatanim_;
}
inline const ::message::UGCResAnimFloatCurves& UGCResAnimClipData::_internal_floatanim(int index) const {
  return _impl_.floatanim_.Get(index);
}
inline const ::message::UGCResAnimFloatCurves& UGCResAnimClipData::floatanim(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimClipData.FloatAnim)
  return _internal_floatanim(index);
}
inline ::message::UGCResAnimFloatCurves* UGCResAnimClipData::_internal_add_floatanim() {
  return _impl_.floatanim_.Add();
}
inline ::message::UGCResAnimFloatCurves* UGCResAnimClipData::add_floatanim() {
  ::message::UGCResAnimFloatCurves* _add = _internal_add_floatanim();
  // @@protoc_insertion_point(field_add:message.UGCResAnimClipData.FloatAnim)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimFloatCurves >&
UGCResAnimClipData::floatanim() const {
  // @@protoc_insertion_point(field_list:message.UGCResAnimClipData.FloatAnim)
  return _impl_.floatanim_;
}

// repeated .message.UGCResAnimNodeCurves NodeAnim = 6;
inline int UGCResAnimClipData::_internal_nodeanim_size() const {
  return _impl_.nodeanim_.size();
}
inline int UGCResAnimClipData::nodeanim_size() const {
  return _internal_nodeanim_size();
}
inline void UGCResAnimClipData::clear_nodeanim() {
  _impl_.nodeanim_.Clear();
}
inline ::message::UGCResAnimNodeCurves* UGCResAnimClipData::mutable_nodeanim(int index) {
  // @@protoc_insertion_point(field_mutable:message.UGCResAnimClipData.NodeAnim)
  return _impl_.nodeanim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimNodeCurves >*
UGCResAnimClipData::mutable_nodeanim() {
  // @@protoc_insertion_point(field_mutable_list:message.UGCResAnimClipData.NodeAnim)
  return &_impl_.nodeanim_;
}
inline const ::message::UGCResAnimNodeCurves& UGCResAnimClipData::_internal_nodeanim(int index) const {
  return _impl_.nodeanim_.Get(index);
}
inline const ::message::UGCResAnimNodeCurves& UGCResAnimClipData::nodeanim(int index) const {
  // @@protoc_insertion_point(field_get:message.UGCResAnimClipData.NodeAnim)
  return _internal_nodeanim(index);
}
inline ::message::UGCResAnimNodeCurves* UGCResAnimClipData::_internal_add_nodeanim() {
  return _impl_.nodeanim_.Add();
}
inline ::message::UGCResAnimNodeCurves* UGCResAnimClipData::add_nodeanim() {
  ::message::UGCResAnimNodeCurves* _add = _internal_add_nodeanim();
  // @@protoc_insertion_point(field_add:message.UGCResAnimClipData.NodeAnim)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::UGCResAnimNodeCurves >&
UGCResAnimClipData::nodeanim() const {
  // @@protoc_insertion_point(field_list:message.UGCResAnimClipData.NodeAnim)
  return _impl_.nodeanim_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::message::EUGCColliderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCColliderType>() {
  return ::message::EUGCColliderType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCRendererDataSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCRendererDataSource>() {
  return ::message::EUGCRendererDataSource_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCPackageShareType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCPackageShareType>() {
  return ::message::EUGCPackageShareType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCPackageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCPackageType>() {
  return ::message::EUGCPackageType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCPackagePlatform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCPackagePlatform>() {
  return ::message::EUGCPackagePlatform_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCPackageUseableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCPackageUseableType>() {
  return ::message::EUGCPackageUseableType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCResourceType>() {
  return ::message::EUGCResourceType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCPackageRefVersionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCPackageRefVersionType>() {
  return ::message::EUGCPackageRefVersionType_descriptor();
}
template <> struct is_proto_enum< ::message::EUGCFilePlatformRequire> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::EUGCFilePlatformRequire>() {
  return ::message::EUGCFilePlatformRequire_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtoBuffUGCResource_2eproto
